/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 18:33:47 GMT 2025
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.SQLException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.list.FixedSizeList;
import org.apache.commons.collections4.queue.CircularFifoQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CollectionUtils_ESTest extends CollectionUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        CollectionUtils.removeRange((Collection<Object>) linkedList0, (-1050), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The start index can't be less than 0.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Collection<Integer> collection0 = CollectionUtils.removeAll((Collection<Integer>) stack0, (Collection<?>) stack0);
      Collection<Integer> collection1 = CollectionUtils.retainAll((Collection<Integer>) stack0, (Collection<?>) collection0);
      assertTrue(collection1.equals((Object)collection0));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CircularFifoQueue<Locale.Category> circularFifoQueue0 = new CircularFifoQueue<Locale.Category>();
      DefaultEquator<Locale.Category> defaultEquator0 = DefaultEquator.defaultEquator();
      Collection<Locale.Category> collection0 = CollectionUtils.removeAll((Iterable<Locale.Category>) circularFifoQueue0, (Iterable<? extends Locale.Category>) circularFifoQueue0, (Equator<? super Locale.Category>) defaultEquator0);
      Comparator<Locale.Category> comparator0 = (Comparator<Locale.Category>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Locale.Category> list0 = CollectionUtils.collate((Iterable<? extends Locale.Category>) collection0, (Iterable<? extends Locale.Category>) circularFifoQueue0, (Comparator<? super Locale.Category>) comparator0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0);
      EnumSet<Locale.Category> enumSet1 = enumSet0.clone();
      List<Locale.Category> list0 = CollectionUtils.collate((Iterable<? extends Locale.Category>) enumSet1, (Iterable<? extends Locale.Category>) enumSet0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<LinkedList<Integer>, Integer> hashMap0 = new HashMap<LinkedList<Integer>, Integer>();
      Collection<Integer> collection0 = hashMap0.values();
      Predicate<Integer> predicate0 = IdentityPredicate.identityPredicate((Integer) (-1));
      Collection<Integer> collection1 = CollectionUtils.selectRejected((Iterable<? extends Integer>) collection0, (Predicate<? super Integer>) predicate0);
      Integer[] integerArray0 = new Integer[2];
      boolean boolean0 = CollectionUtils.addAll(collection1, integerArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Integer integer0 = new Integer((-1812));
      arrayDeque0.add(integer0);
      arrayDeque0.push(integer0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Collection<Integer> collection0 = CollectionUtils.selectRejected((Iterable<? extends Integer>) arrayDeque0, (Predicate<? super Integer>) predicate0);
      assertTrue(collection0.contains((-1812)));
      
      Iterator<Integer> iterator0 = arrayDeque0.iterator();
      boolean boolean0 = CollectionUtils.addAll(collection0, (Iterator<? extends Integer>) iterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      HashSet<Integer> hashSet0 = new HashSet<Integer>(linkedHashSet0);
      Integer integer0 = new Integer((-4234));
      hashSet0.add(integer0);
      Integer integer1 = new Integer((-1173));
      Predicate<Integer> predicate0 = IdentityPredicate.identityPredicate(integer1);
      Collection<Integer> collection0 = CollectionUtils.select((Iterable<? extends Integer>) hashSet0, (Predicate<? super Integer>) predicate0, (Collection<Integer>) hashSet0, (Collection<Integer>) linkedHashSet0);
      assertTrue(linkedHashSet0.contains((-4234)));
      assertTrue(collection0.contains((-4234)));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Integer integer0 = new Integer(1);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add(integer0);
      Stack<Integer> stack0 = new Stack<Integer>();
      EqualPredicate<Integer> equalPredicate0 = new EqualPredicate<Integer>(integer0);
      Collection<Integer> collection0 = CollectionUtils.select((Iterable<? extends Integer>) linkedHashSet0, (Predicate<? super Integer>) equalPredicate0, (Collection<Integer>) linkedHashSet0, (Collection<Integer>) stack0);
      assertTrue(collection0.contains(1));
      assertFalse(stack0.contains(1));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DefaultEquator<Integer> defaultEquator0 = DefaultEquator.defaultEquator();
      HashMap<LinkedList<Integer>, Integer> hashMap0 = new HashMap<LinkedList<Integer>, Integer>();
      Collection<Integer> collection0 = hashMap0.values();
      Predicate<Integer> predicate0 = IdentityPredicate.identityPredicate((Integer) (-1));
      Collection<Integer> collection1 = CollectionUtils.selectRejected((Iterable<? extends Integer>) collection0, (Predicate<? super Integer>) predicate0);
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<? extends Integer>) collection1, (Collection<? extends Integer>) collection0, (Equator<? super Integer>) defaultEquator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer(2370);
      linkedHashSet0.add(integer0);
      DefaultEquator<Integer> defaultEquator0 = DefaultEquator.defaultEquator();
      HashMap<LinkedList<Integer>, Integer> hashMap0 = new HashMap<LinkedList<Integer>, Integer>();
      Collection<Integer> collection0 = hashMap0.values();
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<? extends Integer>) linkedHashSet0, (Collection<? extends Integer>) collection0, (Equator<? super Integer>) defaultEquator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      vector0.add(instanceofPredicate0);
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<?>) vector0, (Collection<?>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Integer integer0 = new Integer((-1812));
      arrayDeque0.push(integer0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Collection<Integer> collection0 = CollectionUtils.selectRejected((Iterable<? extends Integer>) arrayDeque0, (Predicate<? super Integer>) uniquePredicate0);
      boolean boolean0 = CollectionUtils.isProperSubCollection(arrayDeque0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CircularFifoQueue<Locale.Category> circularFifoQueue0 = new CircularFifoQueue<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      circularFifoQueue0.add(locale_Category0);
      DefaultEquator<Locale.Category> defaultEquator0 = DefaultEquator.defaultEquator();
      Collection<Locale.Category> collection0 = CollectionUtils.removeAll((Iterable<Locale.Category>) circularFifoQueue0, (Iterable<? extends Locale.Category>) circularFifoQueue0, (Equator<? super Locale.Category>) defaultEquator0);
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) circularFifoQueue0, (Collection<?>) collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Integer integer0 = new Integer((-1388));
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      arrayDeque0.add(integer0);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[0];
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) arrayDeque0, locale_CategoryArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>(hashSet0);
      Collection<InstanceofPredicate> collection0 = CollectionUtils.subtract((Iterable<? extends InstanceofPredicate>) hashSet0, (Iterable<? extends InstanceofPredicate>) priorityQueue0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Integer integer0 = new Integer((-273));
      treeSet0.add(integer0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Collection<Integer> collection0 = CollectionUtils.disjunction((Iterable<? extends Integer>) treeSet0, (Iterable<? extends Integer>) arrayList0);
      assertTrue(collection0.contains((-273)));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Integer integer0 = new Integer(1);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      arrayDeque0.add(integer0);
      arrayDeque0.push(integer0);
      Object object0 = CollectionUtils.get((Object) arrayDeque0, 1);
      assertEquals(1, object0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CollectionUtils.checkIndexBounds(0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TreeSet<Comparable<Locale.Category>> treeSet0 = new TreeSet<Comparable<Locale.Category>>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      treeSet0.add(locale_Category0);
      // Undeclared exception!
      try { 
        CollectionUtils.removeCount((Collection<Comparable<Locale.Category>>) treeSet0, 2147483645, 62);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap$PrivateEntryIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FixedSizeList<Object> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Object>) linkedList0);
      Collection<Object> collection0 = CollectionUtils.unmodifiableCollection((Collection<?>) fixedSizeList0);
      boolean boolean0 = CollectionUtils.isFull(collection0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.allOf(class0);
      int int0 = CollectionUtils.size(enumSet0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Collection<Object> collection0 = CollectionUtils.select((Iterable<?>) linkedList0, (Predicate<? super Object>) predicate0, (Collection<Object>) null, (Collection<Object>) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FixedSizeList<Object> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Object>) linkedList0);
      boolean boolean0 = CollectionUtils.isFull(fixedSizeList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      Object object0 = CollectionUtils.get(iterator0, 0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      ExceptionClosure<Locale.Category> exceptionClosure0 = (ExceptionClosure<Locale.Category>) mock(ExceptionClosure.class, new ViolatedAssumptionAnswer());
      Locale.Category locale_Category1 = CollectionUtils.forAllButLastDo(iterator0, exceptionClosure0);
      assertSame(locale_Category0, locale_Category1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CircularFifoQueue<Locale.Category> circularFifoQueue0 = new CircularFifoQueue<Locale.Category>(1);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      circularFifoQueue0.add(locale_Category0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>(circularFifoQueue0);
      SwitchClosure<Object> switchClosure0 = (SwitchClosure<Object>) mock(SwitchClosure.class, new ViolatedAssumptionAnswer());
      Object object0 = CollectionUtils.forAllButLastDo((Iterable<Object>) treeSet0, switchClosure0);
      assertEquals(Locale.Category.FORMAT, object0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category0, locale_Category0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) locale_Category0);
      Locale.Category locale_Category1 = CollectionUtils.find((Iterable<Locale.Category>) enumSet0, (Predicate<? super Locale.Category>) predicate0);
      assertEquals(Locale.Category.DISPLAY, locale_Category1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      stack0.add((Integer) null);
      Integer integer0 = CollectionUtils.extractSingleton((Collection<Integer>) stack0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Class<InstanceofPredicate>[] classArray0 = (Class<InstanceofPredicate>[]) Array.newInstance(Class.class, 5);
      Transformer<InstanceofPredicate, InstanceofPredicate> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      Collection<InstanceofPredicate> collection0 = CollectionUtils.collect((Iterable<? extends InstanceofPredicate>) arrayDeque0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) transformer0, (Collection<InstanceofPredicate>) arrayDeque0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Integer integer0 = new Integer((-2166));
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      arrayDeque0.add(integer0);
      List<Integer> list0 = CollectionUtils.collate((Iterable<? extends Integer>) arrayDeque0, (Iterable<? extends Integer>) arrayDeque0, true);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Integer integer0 = new Integer((-843));
      boolean boolean0 = CollectionUtils.addIgnoreNull((Collection<Integer>) arrayDeque0, integer0);
      assertTrue(boolean0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      List<Object> list0 = CollectionUtils.collate((Iterable<?>) arrayDeque0, (Iterable<?>) arrayDeque0, (Comparator<? super Object>) comparator0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Iterator<Integer> iterator0 = arrayDeque0.iterator();
      boolean boolean0 = CollectionUtils.addAll((Collection<Integer>) arrayDeque0, (Iterator<? extends Integer>) iterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LinkedHashSet<Locale.Category> linkedHashSet0 = new LinkedHashSet<Locale.Category>(4);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      boolean boolean0 = linkedHashSet0.add(locale_Category0);
      HashSet<Locale.Category> hashSet0 = new HashSet<Locale.Category>();
      boolean boolean1 = CollectionUtils.addAll((Collection<Locale.Category>) hashSet0, (Iterable<? extends Locale.Category>) linkedHashSet0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.unmodifiableCollection((Collection<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.union((Iterable<? extends Locale.FilteringMode>) null, (Iterable<? extends Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TreeSet<Comparable<Locale.Category>> treeSet0 = new TreeSet<Comparable<Locale.Category>>();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      treeSet0.add(locale_Category0);
      Transformer<Object, Locale.Category> transformer0 = InvokerTransformer.invokerTransformer("The end index can't be less than the start index.");
      // Undeclared exception!
      try { 
        CollectionUtils.transform((Collection<Comparable<Locale.Category>>) treeSet0, (Transformer<? super Comparable<Locale.Category>, ? extends Comparable<Locale.Category>>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'The end index can't be less than the start index.' on 'class java.util.Locale$Category' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.synchronizedCollection((Collection<Collection<Locale.Category>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.SynchronizedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>(1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      hashSet0.add(locale_FilteringMode0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Predicate<Locale.FilteringMode> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Locale.FilteringMode>) predicate0);
      // Undeclared exception!
      try { 
        CollectionUtils.subtract((Iterable<? extends Locale.FilteringMode>) hashSet0, (Iterable<? extends Locale.FilteringMode>) hashSet0, predicate1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      ConstantTransformer<Locale.FilteringMode, Locale.FilteringMode> constantTransformer0 = new ConstantTransformer<Locale.FilteringMode, Locale.FilteringMode>(locale_FilteringMode0);
      Collection<Locale.FilteringMode> collection0 = CollectionUtils.collect((Iterable<Locale.FilteringMode>) null, (Transformer<? super Locale.FilteringMode, ? extends Locale.FilteringMode>) constantTransformer0);
      // Undeclared exception!
      try { 
        CollectionUtils.subtract((Iterable<? extends Locale.FilteringMode>) collection0, (Iterable<? extends Locale.FilteringMode>) null, (Predicate<Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.subtract((Iterable<? extends Integer>) null, (Iterable<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = new Integer(680);
      CollectionUtils.addIgnoreNull((Collection<Integer>) stack0, integer0);
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        CollectionUtils.select((Iterable<? extends Integer>) stack0, (Predicate<? super Integer>) instanceofPredicate0, (Collection<Integer>) stack0, (Collection<Integer>) stack0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Integer integer0 = new Integer(1);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      arrayDeque0.add(integer0);
      Predicate<Integer> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        CollectionUtils.select((Iterable<? extends Integer>) arrayDeque0, (Predicate<? super Integer>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.reverseArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.retainAll((Collection<Collection<Object>>) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CircularFifoQueue<Locale.Category> circularFifoQueue0 = new CircularFifoQueue<Locale.Category>();
      Collection<Comparable<Locale.Category>> collection0 = CollectionUtils.unmodifiableCollection((Collection<? extends Comparable<Locale.Category>>) circularFifoQueue0);
      // Undeclared exception!
      try { 
        CollectionUtils.removeCount(collection0, 2147483645, 62);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.queue.CircularFifoQueue$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CircularFifoQueue<Locale.Category> circularFifoQueue0 = new CircularFifoQueue<Locale.Category>();
      // Undeclared exception!
      try { 
        CollectionUtils.removeAll((Collection<NOPTransformer<Locale.Category>>) null, (Collection<?>) circularFifoQueue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      LinkedHashSet<NOPTransformer<Integer>> linkedHashSet0 = new LinkedHashSet<NOPTransformer<Integer>>();
      NOPTransformer<Integer> nOPTransformer0 = (NOPTransformer<Integer>) mock(NOPTransformer.class, new ViolatedAssumptionAnswer());
      linkedHashSet0.add(nOPTransformer0);
      // Undeclared exception!
      try { 
        CollectionUtils.removeAll((Collection<NOPTransformer<Integer>>) linkedHashSet0, (Collection<?>) treeSet0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      // Undeclared exception!
      try { 
        CollectionUtils.removeAll((Iterable<Object>) null, (Iterable<?>) null, (Equator<? super Object>) defaultEquator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer((-1));
      linkedHashSet0.add(integer0);
      Predicate<Integer>[] predicateArray0 = (Predicate<Integer>[]) Array.newInstance(Predicate.class, 5);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 8);
      InvokerTransformer<Integer, Boolean> invokerTransformer0 = new InvokerTransformer<Integer, Boolean>("V/Ma", classArray0, predicateArray0);
      Predicate<Integer> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Integer, Boolean>) invokerTransformer0);
      predicateArray0[0] = predicate0;
      NonePredicate<Integer> nonePredicate0 = new NonePredicate<Integer>(predicateArray0);
      AndPredicate<Integer> andPredicate0 = new AndPredicate<Integer>(nonePredicate0, predicate0);
      // Undeclared exception!
      try { 
        CollectionUtils.predicatedCollection((Collection<Integer>) linkedHashSet0, (Predicate<? super Integer>) andPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'V/Ma' on 'class java.lang.Integer' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DefaultEquator<Integer> defaultEquator0 = DefaultEquator.defaultEquator();
      Stack<Integer> stack0 = new Stack<Integer>();
      CollectionUtils.addIgnoreNull((Collection<Integer>) stack0, (Integer) defaultEquator0.HASHCODE_NULL);
      Predicate<Integer> predicate0 = IdentityPredicate.identityPredicate((Integer) defaultEquator0.HASHCODE_NULL);
      AndPredicate<Integer> andPredicate0 = new AndPredicate<Integer>(predicate0, predicate0);
      // Undeclared exception!
      try { 
        CollectionUtils.predicatedCollection((Collection<Integer>) stack0, (Predicate<? super Integer>) andPredicate0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object '-1' - Predicate 'org.apache.commons.collections4.functors.AndPredicate@2' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.permutations((Collection<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The collection must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PermutationIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.isSubCollection((Collection<?>) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TreeSet<Comparable<Locale.Category>> treeSet0 = new TreeSet<Comparable<Locale.Category>>();
      // Undeclared exception!
      try { 
        CollectionUtils.isProperSubCollection(treeSet0, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.intersection((Iterable<? extends Locale.FilteringMode>) null, (Iterable<? extends Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.getCardinalityMap((Iterable<? extends Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.get((Map<ConstantTransformer<Collection, Integer>, Collection<Locale.Category>>) null, 1820);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Iterator<InstanceofPredicate> iterator0 = stack0.iterator();
      stack0.add((InstanceofPredicate) null);
      // Undeclared exception!
      try { 
        CollectionUtils.get(iterator0, 3797);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.get((Iterator<Transformer<Transformer, Transformer>>) null, 5067);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TreeSet<Comparable<Locale.Category>> treeSet0 = new TreeSet<Comparable<Locale.Category>>();
      Collection<Comparable<Locale.Category>> collection0 = CollectionUtils.removeCount((Collection<Comparable<Locale.Category>>) treeSet0, 0, 0);
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) collection0, 460);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 460, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ArrayList<Vector<Integer>> arrayList0 = new ArrayList<Vector<Integer>>(1300);
      // Undeclared exception!
      try { 
        CollectionUtils.get((Iterable<Vector<Integer>>) arrayList0, 1300);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1300, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      // Undeclared exception!
      try { 
        CollectionUtils.get((Iterable<Integer>) treeSet0, 93);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 93
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CircularFifoQueue<Locale.Category> circularFifoQueue0 = new CircularFifoQueue<Locale.Category>();
      Iterator<Predicate<Integer>> iterator0 = (Iterator<Predicate<Integer>>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Predicate<Integer> predicate0 = CollectionUtils.forAllButLastDo(iterator0, closure0);
      assertNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      CollectionUtils.select((Iterable<?>) arrayList0, (Predicate<? super Object>) nullIsFalsePredicate0, (Collection<Object>) arrayList0);
      Iterator<Collection<Object>> iterator0 = (Iterator<Collection<Object>>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) null);
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(nullIsFalsePredicate0, closure0, true);
      Collection<Object> collection0 = CollectionUtils.forAllButLastDo(iterator0, whileClosure0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.disjunction((Iterable<? extends Locale.Category>) null, (Iterable<? extends Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        CollectionUtils.containsAny((Collection<?>) stack0, (Locale.FilteringMode[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CircularFifoQueue<Locale.Category> circularFifoQueue0 = new CircularFifoQueue<Locale.Category>();
      // Undeclared exception!
      try { 
        CollectionUtils.containsAny((Collection<?>) null, (Collection<?>) circularFifoQueue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.containsAll((Collection<?>) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      Transformer<Object, Object> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ?>) null);
      IfTransformer<Object, Object> ifTransformer0 = new IfTransformer<Object, Object>((Predicate<? super Object>) null, transformer0, transformer0);
      CollectionUtils.collect(iterator0, (Transformer<? super Object, ?>) ifTransformer0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      priorityQueue0.add(instanceofPredicate0);
      Factory<InstanceofPredicate> factory0 = ConstantFactory.constantFactory(instanceofPredicate0);
      Transformer<Object, InstanceofPredicate> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends InstanceofPredicate>) factory0);
      // Undeclared exception!
      try { 
        CollectionUtils.collect((Iterable<?>) priorityQueue0, (Transformer<? super Object, ? extends Predicate<Object>>) transformer0, (Collection<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CircularFifoQueue<Locale.Category> circularFifoQueue0 = new CircularFifoQueue<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      circularFifoQueue0.add(locale_Category0);
      Transformer<Locale.Category, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        CollectionUtils.collect((Iterable<Locale.Category>) circularFifoQueue0, (Transformer<? super Locale.Category, ? extends Integer>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.checkIndexBounds((-2145336162));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -2145336162
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer(1);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Collection<Object> collection0 = CollectionUtils.intersection((Iterable<?>) linkedHashSet0, (Iterable<?>) arrayDeque0);
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      Collection<Object> collection1 = CollectionUtils.transformingCollection(collection0, (Transformer<? super Object, ?>) transformer0);
      // Undeclared exception!
      try { 
        CollectionUtils.addIgnoreNull(collection1, (Object) integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      FixedSizeList<Integer> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Integer>) linkedList0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 5);
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      Collection<Integer> collection0 = CollectionUtils.predicatedCollection((Collection<Integer>) fixedSizeList0, (Predicate<? super Integer>) predicate0);
      Integer[] integerArray0 = new Integer[4];
      // Undeclared exception!
      try { 
        CollectionUtils.addAll(collection0, integerArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Collection<Integer> collection0 = CollectionUtils.emptyCollection();
      Integer[] integerArray0 = new Integer[3];
      // Undeclared exception!
      try { 
        CollectionUtils.addAll(collection0, integerArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>(10);
      Collection<Integer> collection0 = CollectionUtils.unmodifiableCollection((Collection<? extends Integer>) circularFifoQueue0);
      Integer[] integerArray0 = new Integer[9];
      // Undeclared exception!
      try { 
        CollectionUtils.addAll(collection0, integerArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Collection<Integer> collection0 = CollectionUtils.emptyCollection();
      // Undeclared exception!
      try { 
        CollectionUtils.addAll(collection0, (Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>();
      Integer[] integerArray0 = new Integer[9];
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<Integer>) circularFifoQueue0, integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Attempted to add null object to queue
         //
         verifyException("org.apache.commons.collections4.queue.CircularFifoQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Integer integer0 = new Integer((-1812));
      arrayDeque0.push(integer0);
      arrayDeque0.add(integer0);
      Iterator<Integer> iterator0 = arrayDeque0.iterator();
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<Integer>) arrayDeque0, (Iterator<? extends Integer>) iterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque$DeqIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Integer integer0 = new Integer((-1812));
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      arrayDeque0.push(integer0);
      Iterator<Integer> iterator0 = arrayDeque0.iterator();
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<Integer>) null, (Iterator<? extends Integer>) iterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashSet<Locale.Category> hashSet0 = new HashSet<Locale.Category>();
      hashSet0.spliterator();
      Consumer<Locale.Category> consumer0 = (Consumer<Locale.Category>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      hashSet0.forEach(consumer0);
      CollectionUtils.isFull(hashSet0);
      Vector<ComparatorPredicate.Criterion> vector0 = new Vector<ComparatorPredicate.Criterion>();
      List<ComparatorPredicate.Criterion> list0 = CollectionUtils.collate((Iterable<? extends ComparatorPredicate.Criterion>) vector0, (Iterable<? extends ComparatorPredicate.Criterion>) vector0, true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) list0;
      CollectionUtils.reverseArray(objectArray0);
      CollectionUtils.maxSize(list0);
      Collection<ComparatorPredicate.Criterion> collection0 = CollectionUtils.emptyCollection();
      Collection<ComparatorPredicate.Criterion> collection1 = CollectionUtils.subtract((Iterable<? extends ComparatorPredicate.Criterion>) list0, (Iterable<? extends ComparatorPredicate.Criterion>) list0);
      CollectionUtils.isProperSubCollection(collection0, hashSet0);
      Comparator<Locale.Category> comparator0 = (Comparator<Locale.Category>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CollectionUtils.collate((Iterable<? extends Locale.Category>) hashSet0, (Iterable<? extends Locale.Category>) hashSet0, (Comparator<? super Locale.Category>) comparator0, false);
      Enumeration<ComparatorPredicate.Criterion> enumeration0 = (Enumeration<ComparatorPredicate.Criterion>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      CollectionUtils.addAll((Collection<ComparatorPredicate.Criterion>) list0, (Enumeration<? extends ComparatorPredicate.Criterion>) enumeration0);
      Predicate<ComparatorPredicate.Criterion>[] predicateArray0 = null;
      NonePredicate<ComparatorPredicate.Criterion> nonePredicate0 = new NonePredicate<ComparatorPredicate.Criterion>(predicateArray0);
      CollectionUtils.subtract((Iterable<? extends ComparatorPredicate.Criterion>) collection1, (Iterable<? extends ComparatorPredicate.Criterion>) collection1, (Predicate<ComparatorPredicate.Criterion>) nonePredicate0);
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Integer integer0 = null;
      // Undeclared exception!
      try { 
        treeSet0.add(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Collection<Comparable<Integer>> collection0 = CollectionUtils.subtract((Iterable<? extends Comparable<Integer>>) arrayDeque0, (Iterable<? extends Comparable<Integer>>) arrayDeque0);
      // Undeclared exception!
      try { 
        CollectionUtils.addAll(collection0, (Enumeration<? extends Comparable<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CircularFifoQueue<Locale.Category> circularFifoQueue0 = new CircularFifoQueue<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      circularFifoQueue0.add(locale_Category0);
      // Undeclared exception!
      CollectionUtils.addAll((Collection<Locale.Category>) circularFifoQueue0, (Iterable<? extends Locale.Category>) circularFifoQueue0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Stack<Comparable<Locale.Category>> stack0 = new Stack<Comparable<Locale.Category>>();
      // Undeclared exception!
      try { 
        CollectionUtils.removeCount((Collection<Comparable<Locale.Category>>) stack0, (-2686), (-1184));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The start index can't be less than 0.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ArrayDeque<Locale.FilteringMode> arrayDeque0 = new ArrayDeque<Locale.FilteringMode>();
      Comparator<Locale.FilteringMode> comparator0 = (Comparator<Locale.FilteringMode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Locale.FilteringMode> list0 = CollectionUtils.collate((Iterable<? extends Locale.FilteringMode>) arrayDeque0, (Iterable<? extends Locale.FilteringMode>) arrayDeque0, (Comparator<? super Locale.FilteringMode>) comparator0, true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      ServiceLoader<Locale.Category> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      // Undeclared exception!
      try { 
        CollectionUtils.collate((Iterable<? extends Locale.Category>) serviceLoader0, (Iterable<? extends Locale.Category>) serviceLoader0, (Comparator<? super Locale.Category>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The comparator must not be null
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      FixedSizeList<InstanceofPredicate> fixedSizeList0 = FixedSizeList.fixedSizeList((List<InstanceofPredicate>) stack0);
      Comparator<InstanceofPredicate> comparator0 = (Comparator<InstanceofPredicate>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CollectionUtils.collate((Iterable<? extends InstanceofPredicate>) fixedSizeList0, (Iterable<? extends InstanceofPredicate>) null, (Comparator<? super InstanceofPredicate>) comparator0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The collections must not be null
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.collate((Iterable<? extends Locale.Category>) null, (Iterable<? extends Locale.Category>) null, (Comparator<? super Locale.Category>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The collections must not be null
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean0 = CollectionUtils.isEmpty(linkedHashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CircularFifoQueue<Locale.Category> circularFifoQueue0 = new CircularFifoQueue<Locale.Category>();
      boolean boolean0 = CollectionUtils.addAll((Collection<Locale.Category>) circularFifoQueue0, (Iterable<? extends Locale.Category>) circularFifoQueue0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer(1);
      linkedHashSet0.add(integer0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedHashSet0.iterator();
      HashMap<InstanceofPredicate, Transformer<Integer, Integer>> hashMap0 = new HashMap<InstanceofPredicate, Transformer<Integer, Integer>>();
      Transformer<Integer, Integer> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Integer>, ? extends Transformer<? super Integer, ? extends Integer>>) hashMap0);
      CollectionUtils.collect((Iterator<? extends Integer>) iterator0, (Transformer<? super Integer, ? extends Integer>) transformer0, linkedList0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(1));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<Locale.Category, Integer> hashMap0 = new HashMap<Locale.Category, Integer>();
      Transformer<Locale.Category, Integer> transformer0 = MapTransformer.mapTransformer((Map<? super Locale.Category, ? extends Integer>) hashMap0);
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>(506);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Integer> list0 = CollectionUtils.collate((Iterable<? extends Integer>) circularFifoQueue0, (Iterable<? extends Integer>) circularFifoQueue0, (Comparator<? super Integer>) comparator0, false);
      Collection<Integer> collection0 = CollectionUtils.collect((Iterator<? extends Locale.Category>) null, (Transformer<? super Locale.Category, ? extends Integer>) transformer0, (Collection<Integer>) list0);
      assertFalse(collection0.contains(506));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Factory<InstanceofPredicate> factory0 = ConstantFactory.constantFactory(instanceofPredicate0);
      Transformer<Object, InstanceofPredicate> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends InstanceofPredicate>) factory0);
      Collection<Object> collection0 = CollectionUtils.collect((Iterable<?>) null, (Transformer<? super Object, ? extends Predicate<Object>>) transformer0, (Collection<Object>) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      vector0.add(instanceofPredicate0);
      // Undeclared exception!
      try { 
        CollectionUtils.selectRejected((Iterable<? extends Predicate<Object>>) vector0, (Predicate<? super Predicate<Object>>) instanceofPredicate0, (LinkedList<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      Predicate<Predicate<Object>> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Predicate<Object>>>) vector0);
      LinkedList<Object> linkedList0 = CollectionUtils.selectRejected((Iterable<? extends Predicate<Object>>) null, (Predicate<? super Predicate<Object>>) predicate0, (LinkedList<Object>) null);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Collection<Object> collection0 = CollectionUtils.select((Iterable<?>) null, (Predicate<? super Object>) instanceofPredicate0, (Collection<Object>) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Collection<Object> collection0 = CollectionUtils.select((Iterable<?>) linkedList0, (Predicate<? super Object>) null, (Collection<Object>) linkedList1);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) null);
      boolean boolean0 = CollectionUtils.filter((Iterable<Object>) linkedList0, (Predicate<? super Object>) predicate0);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(44);
      linkedList0.add((Object) integer0);
      boolean boolean0 = CollectionUtils.filter((Iterable<Object>) linkedList0, (Predicate<? super Object>) predicate0);
      assertFalse(linkedList0.contains(44));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0);
      List<Locale.Category> list0 = CollectionUtils.collate((Iterable<? extends Locale.Category>) enumSet0, (Iterable<? extends Locale.Category>) enumSet0);
      CollectionUtils.getCardinalityMap((Iterable<? extends Locale.Category>) list0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0);
      Predicate<Locale.FilteringMode> predicate0 = TruePredicate.truePredicate();
      Collection<Locale.FilteringMode> collection0 = CollectionUtils.subtract((Iterable<? extends Locale.FilteringMode>) enumSet0, (Iterable<? extends Locale.FilteringMode>) enumSet0, predicate0);
      assertFalse(collection0.contains(locale_FilteringMode0));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.extractSingleton((Collection<Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TreeSet<Vector<Locale.Category>> treeSet0 = new TreeSet<Vector<Locale.Category>>();
      // Undeclared exception!
      try { 
        CollectionUtils.extractSingleton((Collection<Vector<Locale.Category>>) treeSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can extract singleton only when collection size == 1
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Collection<Locale.Category> collection0 = CollectionUtils.removeAll((Iterable<Locale.Category>) enumSet0, (Iterable<? extends Locale.Category>) null, (Equator<? super Locale.Category>) defaultEquator0);
      assertTrue(collection0.contains(locale_Category0));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TreeSet<Comparable<Locale.Category>> treeSet0 = new TreeSet<Comparable<Locale.Category>>();
      // Undeclared exception!
      try { 
        CollectionUtils.removeCount((Collection<Comparable<Locale.Category>>) treeSet0, 1450, 1450);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The sum of start index and count can't be greater than the size of collection.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Collection<Comparable<Locale.Category>> collection0 = CollectionUtils.emptyCollection();
      // Undeclared exception!
      try { 
        CollectionUtils.removeCount(collection0, 2147483645, (-1121));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The count can't be less than 0.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.removeCount((Collection<Comparable<Locale.Category>>) null, 1997, 1997);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The collection can't be null.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        CollectionUtils.removeRange((Collection<Object>) stack0, (-1), (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The start index can't be less than 0.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.removeRange((Collection<Object>) null, (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The collection can't be null.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>();
      // Undeclared exception!
      try { 
        CollectionUtils.removeRange((Collection<Object>) hashSet0, 3103, 3103);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The end index can't be greater than the size of collection.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Collection<Locale.FilteringMode> collection0 = CollectionUtils.retainAll((Iterable<Locale.FilteringMode>) enumSet0, (Iterable<? extends Locale.FilteringMode>) null, (Equator<? super Locale.FilteringMode>) defaultEquator0);
      assertFalse(collection0.contains(locale_FilteringMode0));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Collection<Locale.FilteringMode> collection0 = CollectionUtils.retainAll((Iterable<Locale.FilteringMode>) enumSet0, (Iterable<? extends Locale.FilteringMode>) enumSet0, (Equator<? super Locale.FilteringMode>) defaultEquator0);
      assertTrue(collection0.contains(locale_FilteringMode0));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      CollectionUtils.permutations((Collection<Object>) arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LinkedHashSet<Locale.FilteringMode> linkedHashSet0 = new LinkedHashSet<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      linkedHashSet0.add(locale_FilteringMode0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      linkedHashSet0.add(locale_FilteringMode1);
      List<Object> list0 = CollectionUtils.collate((Iterable<?>) linkedHashSet0, (Iterable<?>) linkedHashSet0, (Comparator<? super Object>) comparator0, false);
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.range(locale_FilteringMode0, locale_FilteringMode0);
      Comparator<Locale.FilteringMode> comparator0 = (Comparator<Locale.FilteringMode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.util.Locale.FilteringMode.class) , any(java.util.Locale.FilteringMode.class));
      List<Locale.FilteringMode> list0 = CollectionUtils.collate((Iterable<? extends Locale.FilteringMode>) enumSet0, (Iterable<? extends Locale.FilteringMode>) enumSet0, (Comparator<? super Locale.FilteringMode>) comparator0, false);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      ServiceLoader<Locale.FilteringMode> serviceLoader0 = ServiceLoader.load(class0);
      Collection<Locale.FilteringMode> collection0 = CollectionUtils.subtract((Iterable<? extends Locale.FilteringMode>) serviceLoader0, (Iterable<? extends Locale.FilteringMode>) serviceLoader0);
      List<Locale.FilteringMode> list0 = CollectionUtils.collate((Iterable<? extends Locale.FilteringMode>) collection0, (Iterable<? extends Locale.FilteringMode>) serviceLoader0, true);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      ServiceLoader<Locale.Category> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      List<Locale.Category> list0 = CollectionUtils.collate((Iterable<? extends Locale.Category>) serviceLoader0, (Iterable<? extends Locale.Category>) serviceLoader0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.noneOf(class0);
      // Undeclared exception!
      try { 
        CollectionUtils.collate((Iterable<? extends Locale.FilteringMode>) enumSet0, (Iterable<? extends Locale.FilteringMode>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The collections must not be null
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.collate((Iterable<? extends Locale.Category>) null, (Iterable<? extends Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The collections must not be null
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CircularFifoQueue<Locale.Category> circularFifoQueue0 = new CircularFifoQueue<Locale.Category>();
      int int0 = CollectionUtils.maxSize(circularFifoQueue0);
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.isFull((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The collection must not be null
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      CollectionUtils.reverseArray(objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CircularFifoQueue<Locale.Category> circularFifoQueue0 = new CircularFifoQueue<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      circularFifoQueue0.add(locale_Category0);
      boolean boolean0 = CollectionUtils.isNotEmpty(circularFifoQueue0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CircularFifoQueue<Locale.Category> circularFifoQueue0 = new CircularFifoQueue<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      circularFifoQueue0.add(locale_Category0);
      boolean boolean0 = CollectionUtils.isEmpty(circularFifoQueue0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CircularFifoQueue<Locale.Category> circularFifoQueue0 = new CircularFifoQueue<Locale.Category>();
      boolean boolean0 = CollectionUtils.isNotEmpty(circularFifoQueue0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = CollectionUtils.isEmpty((Collection<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<Object> iterator0 = linkedList0.iterator();
      Vector<Object> vector0 = new Vector<Object>();
      linkedList0.add((Object) vector0);
      boolean boolean0 = CollectionUtils.sizeIsEmpty(iterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<Object> iterator0 = linkedList0.iterator();
      boolean boolean0 = CollectionUtils.sizeIsEmpty(iterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CircularFifoQueue<Locale.Category> circularFifoQueue0 = new CircularFifoQueue<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      circularFifoQueue0.add(locale_Category0);
      boolean boolean0 = CollectionUtils.sizeIsEmpty(circularFifoQueue0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      // Undeclared exception!
      try { 
        CollectionUtils.sizeIsEmpty(locale_Category0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.util.Locale$Category
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = CollectionUtils.sizeIsEmpty((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CircularFifoQueue<Locale.Category> circularFifoQueue0 = new CircularFifoQueue<Locale.Category>();
      boolean boolean0 = CollectionUtils.sizeIsEmpty(circularFifoQueue0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      int int0 = CollectionUtils.size(listIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        CollectionUtils.size(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.Object
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = CollectionUtils.size((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DefaultEquator<Locale.FilteringMode> defaultEquator0 = DefaultEquator.defaultEquator();
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) defaultEquator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: org.apache.commons.collections4.functors.DefaultEquator
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) stack0, 258);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 258
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) iterator0, 62);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 62
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) stack0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -1
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) null, 62);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: null
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = CollectionUtils.addAll((Collection<Integer>) linkedHashSet0, integerArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Enumeration<Integer> enumeration0 = stack0.elements();
      boolean boolean0 = CollectionUtils.addAll((Collection<Integer>) null, (Enumeration<? extends Integer>) enumeration0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      Collection<Integer> collection0 = CollectionUtils.intersection((Iterable<? extends Integer>) serviceLoader0, (Iterable<? extends Integer>) serviceLoader0);
      // Undeclared exception!
      try { 
        CollectionUtils.removeRange(collection0, (-804), (-2344));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end index can't be less than the start index.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CircularFifoQueue<Locale.Category> circularFifoQueue0 = new CircularFifoQueue<Locale.Category>();
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<Locale.Category>) circularFifoQueue0, (Iterable<? extends Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>(4449);
      hashSet0.add(locale_FilteringMode0);
      boolean boolean0 = CollectionUtils.addIgnoreNull((Collection<Locale.FilteringMode>) hashSet0, locale_FilteringMode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      // Undeclared exception!
      try { 
        CollectionUtils.addIgnoreNull((Collection<Object>) null, (Object) locale_FilteringMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The collection must not be null
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      Iterator<Locale.Category> iterator0 = linkedList0.descendingIterator();
      Collection<Integer> collection0 = CollectionUtils.collect((Iterator<? extends Locale.Category>) iterator0, (Transformer<? super Locale.Category, ? extends Integer>) null, (Collection<Integer>) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      // Undeclared exception!
      try { 
        CollectionUtils.retainAll((Iterable<Locale.FilteringMode>) null, (Iterable<? extends Locale.FilteringMode>) null, (Equator<? super Locale.FilteringMode>) defaultEquator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      vector0.add(instanceofPredicate0);
      LinkedList<Object> linkedList0 = CollectionUtils.selectRejected((Iterable<? extends Predicate<Object>>) vector0, (Predicate<? super Predicate<Object>>) instanceofPredicate0, (LinkedList<Object>) null);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      LinkedList<Object> linkedList2 = CollectionUtils.selectRejected((Iterable<? extends Predicate<Object>>) linkedList0, (Predicate<? super Predicate<Object>>) null, linkedList1);
      assertEquals(0, linkedList2.size());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = CollectionUtils.select((Iterable<? extends Integer>) linkedList0, (Predicate<? super Integer>) null, linkedList0, linkedList0);
      assertSame(linkedList0, linkedList1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      AllPredicate<Integer> allPredicate0 = new AllPredicate<Integer>((Predicate<? super Integer>[]) null);
      LinkedList<Integer> linkedList1 = CollectionUtils.select((Iterable<? extends Integer>) null, (Predicate<? super Integer>) allPredicate0, linkedList0, linkedList0);
      assertSame(linkedList1, linkedList0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      vector0.add(instanceofPredicate0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      CollectionUtils.select((Iterable<?>) vector0, (Predicate<? super Object>) instanceofPredicate0, (Collection<Object>) linkedList0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      Class<Integer> class0 = Integer.TYPE;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      vector0.add(instanceofPredicate0);
      Collection<Object> collection0 = CollectionUtils.select((Iterable<?>) vector0, (Predicate<? super Object>) instanceofPredicate0, (Collection<Object>) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Collection<Integer> collection0 = CollectionUtils.select((Iterable<? extends Integer>) linkedHashSet0, (Predicate<? super Integer>) null);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Predicate<Integer> predicate0 = UniquePredicate.uniquePredicate();
      NotPredicate<Integer> notPredicate0 = new NotPredicate<Integer>(predicate0);
      Collection<Integer> collection0 = CollectionUtils.select((Iterable<? extends Integer>) null, (Predicate<? super Integer>) notPredicate0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Integer integer0 = new Integer((-1812));
      arrayDeque0.push(integer0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      boolean boolean0 = CollectionUtils.matchesAll((Iterable<Integer>) arrayDeque0, (Predicate<? super Integer>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      boolean boolean0 = CollectionUtils.matchesAll((Iterable<Integer>) arrayDeque0, (Predicate<? super Integer>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      boolean boolean0 = CollectionUtils.matchesAll((Iterable<Integer>) arrayDeque0, (Predicate<? super Integer>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      boolean boolean0 = CollectionUtils.exists((Iterable<NOPTransformer<Object>>) null, (Predicate<? super NOPTransformer<Object>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      ServiceLoader<Locale.Category> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      int int0 = CollectionUtils.countMatches((Iterable<Locale.Category>) serviceLoader0, (Predicate<? super Locale.Category>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Object object0 = new Object();
      Transformer<Object, Object> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ?>) null);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add(object0);
      CollectionUtils.transform((Collection<Object>) arrayList0, (Transformer<? super Object, ?>) transformer0);
      assertFalse(arrayList0.contains(object0));
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      TreeSet<Comparable<Locale.Category>> treeSet0 = new TreeSet<Comparable<Locale.Category>>();
      Transformer<Object, Locale.Category> transformer0 = InvokerTransformer.invokerTransformer("The end index can't be less than the start index.");
      CollectionUtils.transform((Collection<Comparable<Locale.Category>>) treeSet0, (Transformer<? super Comparable<Locale.Category>, ? extends Comparable<Locale.Category>>) transformer0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      CollectionUtils.transform((Collection<Object>) arrayList0, (Transformer<? super Object, ?>) null);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Transformer<Object, Object> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ?>) null);
      CollectionUtils.transform((Collection<Object>) null, (Transformer<? super Object, ?>) transformer0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      LinkedHashSet<Locale.Category> linkedHashSet0 = new LinkedHashSet<Locale.Category>(4);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      linkedHashSet0.add(locale_Category0);
      IdentityPredicate<Locale.Category> identityPredicate0 = new IdentityPredicate<Locale.Category>(locale_Category0);
      boolean boolean0 = CollectionUtils.filterInverse((Iterable<Locale.Category>) linkedHashSet0, (Predicate<? super Locale.Category>) identityPredicate0);
      assertFalse(linkedHashSet0.contains(locale_Category0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      LinkedHashSet<Locale.Category> linkedHashSet0 = new LinkedHashSet<Locale.Category>(4);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      linkedHashSet0.add(locale_Category0);
      Predicate<Locale.Category> predicate0 = FalsePredicate.falsePredicate();
      boolean boolean0 = CollectionUtils.filterInverse((Iterable<Locale.Category>) linkedHashSet0, (Predicate<? super Locale.Category>) predicate0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Locale.Category> priorityQueue0 = new PriorityQueue<Locale.Category>(comparator0);
      boolean boolean0 = CollectionUtils.filterInverse((Iterable<Locale.Category>) priorityQueue0, (Predicate<? super Locale.Category>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(instanceofPredicate0, instanceofPredicate0);
      boolean boolean0 = CollectionUtils.filter((Iterable<Transformer<Collection, Integer>>) null, (Predicate<? super Transformer<Collection, Integer>>) orPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<Object> iterator0 = linkedList0.iterator();
      Object object0 = CollectionUtils.forAllButLastDo(iterator0, (IfClosure<Object>) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      PriorityQueue<LinkedList<ComparatorPredicate.Criterion>> priorityQueue0 = new PriorityQueue<LinkedList<ComparatorPredicate.Criterion>>(16);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      LinkedList<ComparatorPredicate.Criterion> linkedList0 = CollectionUtils.forAllButLastDo((Iterable<LinkedList<ComparatorPredicate.Criterion>>) priorityQueue0, closure0);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      PriorityQueue<LinkedList<Locale.FilteringMode>> priorityQueue0 = new PriorityQueue<LinkedList<Locale.FilteringMode>>();
      LinkedList<Locale.FilteringMode> linkedList0 = CollectionUtils.forAllButLastDo((Iterable<LinkedList<Locale.FilteringMode>>) priorityQueue0, (ExceptionClosure<Object>) null);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) null);
      LinkedHashSet<Transformer<Integer, Integer>> linkedHashSet0 = new LinkedHashSet<Transformer<Integer, Integer>>();
      Iterator<Transformer<Integer, Integer>> iterator0 = linkedHashSet0.iterator();
      Closure<Object> closure1 = CollectionUtils.forAllDo(iterator0, closure0);
      assertSame(closure0, closure1);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Iterator<InstanceofPredicate> iterator0 = stack0.iterator();
      Closure<InstanceofPredicate> closure0 = CollectionUtils.forAllDo(iterator0, (Closure<InstanceofPredicate>) null);
      assertNull(closure0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>((-562));
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) arrayDeque0, (Equator<Object>) defaultEquator0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) null);
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(orPredicate0, closure0, true);
      Closure<Object> closure1 = CollectionUtils.forAllDo((Iterable<Integer>) arrayDeque0, (Closure<Object>) whileClosure0);
      assertFalse(closure1.equals((Object)closure0));
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Closure<Object> closure0 = CollectionUtils.forAllDo((Iterable<Integer>) linkedList0, (Closure<Object>) null);
      assertNull(closure0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Predicate<Locale.FilteringMode> predicate0 = NotNullPredicate.notNullPredicate();
      OrPredicate<Locale.FilteringMode> orPredicate0 = new OrPredicate<Locale.FilteringMode>(predicate0, predicate0);
      AndPredicate<Locale.FilteringMode> andPredicate0 = new AndPredicate<Locale.FilteringMode>(orPredicate0, predicate0);
      CollectionUtils.find((Iterable<Locale.FilteringMode>) null, (Predicate<? super Locale.FilteringMode>) andPredicate0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      CollectionUtils.find((Iterable<Locale.Category>) null, (Predicate<? super Locale.Category>) null);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.cardinality((Object) null, (Iterable<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coll must not be null.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      ArrayDeque<Locale.FilteringMode> arrayDeque0 = new ArrayDeque<Locale.FilteringMode>((-76));
      int int0 = CollectionUtils.cardinality(locale_FilteringMode0, (Iterable<? super Locale.FilteringMode>) arrayDeque0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      HashSet<Integer> hashSet0 = new HashSet<Integer>(linkedHashSet0);
      Integer integer0 = new Integer((-4234));
      hashSet0.add(integer0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<? extends Integer>) linkedHashSet0, (Collection<? extends Integer>) hashSet0, (Equator<? super Integer>) defaultEquator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      // Undeclared exception!
      try { 
        CollectionUtils.isEqualCollection((Collection<? extends Integer>) arrayDeque0, (Collection<? extends Integer>) arrayDeque0, (Equator<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Equator must not be null.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      // Undeclared exception!
      try { 
        CollectionUtils.isEqualCollection((Collection<?>) arrayDeque0, (Collection<?>) null, (Equator<? super Object>) defaultEquator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      CircularFifoQueue<Locale.Category> circularFifoQueue0 = new CircularFifoQueue<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      circularFifoQueue0.add(locale_Category0);
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<?>) circularFifoQueue0, (Collection<?>) circularFifoQueue0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      TreeSet<Comparable<Locale.Category>> treeSet0 = new TreeSet<Comparable<Locale.Category>>();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      treeSet0.add(locale_Category0);
      Collection<Comparable<Locale.Category>> collection0 = CollectionUtils.removeCount((Collection<Comparable<Locale.Category>>) treeSet0, 0, 0);
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<?>) collection0, (Collection<?>) treeSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      CircularFifoQueue<Locale.Category> circularFifoQueue0 = new CircularFifoQueue<Locale.Category>(30);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      circularFifoQueue0.add(locale_Category0);
      circularFifoQueue0.add(locale_Category0);
      Stack<Transformer<Locale.Category, Locale.Category>> stack0 = new Stack<Transformer<Locale.Category, Locale.Category>>();
      stack0.add((Transformer<Locale.Category, Locale.Category>) null);
      boolean boolean0 = CollectionUtils.isProperSubCollection(stack0, circularFifoQueue0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      CircularFifoQueue<Locale.Category> circularFifoQueue0 = new CircularFifoQueue<Locale.Category>(1);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      circularFifoQueue0.add(locale_Category0);
      Vector<Transformer<Locale.Category, Locale.Category>> vector0 = new Vector<Transformer<Locale.Category, Locale.Category>>();
      boolean boolean0 = CollectionUtils.isProperSubCollection(vector0, circularFifoQueue0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Collection<Integer> collection0 = CollectionUtils.selectRejected((Iterable<? extends Integer>) null, (Predicate<? super Integer>) null);
      boolean boolean0 = CollectionUtils.isProperSubCollection(collection0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      CircularFifoQueue<Locale.Category> circularFifoQueue0 = new CircularFifoQueue<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      circularFifoQueue0.add(locale_Category0);
      boolean boolean0 = CollectionUtils.isSubCollection(circularFifoQueue0, arrayDeque0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      CircularFifoQueue<Locale.Category> circularFifoQueue0 = new CircularFifoQueue<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      circularFifoQueue0.add(locale_Category0);
      boolean boolean0 = CollectionUtils.isSubCollection(circularFifoQueue0, circularFifoQueue0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      CircularFifoQueue<Locale.Category> circularFifoQueue0 = new CircularFifoQueue<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      circularFifoQueue0.add(locale_Category0);
      circularFifoQueue0.add(locale_Category0);
      Collection<Locale.Category> collection0 = CollectionUtils.union((Iterable<? extends Locale.Category>) circularFifoQueue0, (Iterable<? extends Locale.Category>) circularFifoQueue0);
      assertTrue(collection0.contains(locale_Category0));
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      CircularFifoQueue<Locale.Category> circularFifoQueue0 = new CircularFifoQueue<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      circularFifoQueue0.add(locale_Category0);
      Stack<Transformer<Locale.Category, Locale.Category>> stack0 = new Stack<Transformer<Locale.Category, Locale.Category>>();
      Transformer<Locale.Category, Locale.Category> transformer0 = ConstantTransformer.nullTransformer();
      stack0.add(transformer0);
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) circularFifoQueue0, (Collection<?>) stack0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      CircularFifoQueue<Locale.Category> circularFifoQueue0 = new CircularFifoQueue<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      circularFifoQueue0.add(locale_Category0);
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) circularFifoQueue0, (Collection<?>) circularFifoQueue0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      DefaultEquator<Integer> defaultEquator0 = DefaultEquator.defaultEquator();
      Stack<Integer> stack0 = new Stack<Integer>();
      CollectionUtils.addIgnoreNull((Collection<Integer>) stack0, (Integer) (-1));
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      arrayDeque0.add((Integer) defaultEquator0.HASHCODE_NULL);
      arrayDeque0.push((Integer) (-1));
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) stack0, (Collection<?>) arrayDeque0);
      assertFalse(stack0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      CircularFifoQueue<Locale.Category> circularFifoQueue0 = new CircularFifoQueue<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      circularFifoQueue0.add(locale_Category0);
      Vector<Transformer<Locale.Category, Locale.Category>> vector0 = new Vector<Transformer<Locale.Category, Locale.Category>>();
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) vector0, (Collection<?>) circularFifoQueue0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Integer integer0 = new Integer((-1812));
      arrayDeque0.add(integer0);
      arrayDeque0.push(integer0);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[2];
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) arrayDeque0, locale_CategoryArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      CircularFifoQueue<Locale.Category> circularFifoQueue0 = new CircularFifoQueue<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      circularFifoQueue0.add(locale_Category0);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[5];
      locale_CategoryArray0[0] = locale_Category0;
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) circularFifoQueue0, locale_CategoryArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      CircularFifoQueue<Locale.Category> circularFifoQueue0 = new CircularFifoQueue<Locale.Category>(30);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      circularFifoQueue0.add(locale_Category0);
      Collection<Locale.Category>[] collectionArray0 = (Collection<Locale.Category>[]) Array.newInstance(Collection.class, 2);
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) circularFifoQueue0, collectionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Integer integer0 = new Integer((-1173));
      arrayDeque0.add(integer0);
      CircularFifoQueue<Locale.Category> circularFifoQueue0 = new CircularFifoQueue<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      circularFifoQueue0.add(locale_Category0);
      boolean boolean0 = CollectionUtils.containsAll(circularFifoQueue0, arrayDeque0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      CircularFifoQueue<Locale.Category> circularFifoQueue0 = new CircularFifoQueue<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      circularFifoQueue0.add(locale_Category0);
      circularFifoQueue0.add(locale_Category0);
      boolean boolean0 = CollectionUtils.containsAll(circularFifoQueue0, circularFifoQueue0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      TreeSet<Comparable<Locale.Category>> treeSet0 = new TreeSet<Comparable<Locale.Category>>();
      boolean boolean0 = CollectionUtils.containsAll(treeSet0, treeSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      CircularFifoQueue<Locale.Category> circularFifoQueue0 = new CircularFifoQueue<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      circularFifoQueue0.add(locale_Category0);
      Predicate<Locale.Category> predicate0 = TruePredicate.truePredicate();
      NotPredicate<Locale.Category> notPredicate0 = new NotPredicate<Locale.Category>(predicate0);
      AndPredicate<Locale.Category> andPredicate0 = new AndPredicate<Locale.Category>(predicate0, notPredicate0);
      NullIsTruePredicate<Locale.Category> nullIsTruePredicate0 = new NullIsTruePredicate<Locale.Category>(andPredicate0);
      Collection<Locale.Category> collection0 = CollectionUtils.subtract((Iterable<? extends Locale.Category>) circularFifoQueue0, (Iterable<? extends Locale.Category>) circularFifoQueue0, (Predicate<Locale.Category>) nullIsTruePredicate0);
      assertTrue(collection0.contains(locale_Category0));
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0);
      Collection<Locale.FilteringMode> collection0 = CollectionUtils.disjunction((Iterable<? extends Locale.FilteringMode>) enumSet0, (Iterable<? extends Locale.FilteringMode>) enumSet0);
      assertFalse(collection0.contains(locale_FilteringMode0));
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Collection<ComparatorPredicate.Criterion> collection0 = CollectionUtils.emptyIfNull((Collection<ComparatorPredicate.Criterion>) null);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      HashSet<Locale.Category> hashSet0 = new HashSet<Locale.Category>();
      Collection<Locale.Category> collection0 = CollectionUtils.emptyIfNull((Collection<Locale.Category>) hashSet0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      CircularFifoQueue<Locale.Category> circularFifoQueue0 = new CircularFifoQueue<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.range(locale_Category0, locale_Category0);
      Collection<Locale.Category> collection0 = CollectionUtils.union((Iterable<? extends Locale.Category>) circularFifoQueue0, (Iterable<? extends Locale.Category>) enumSet0);
      assertTrue(collection0.contains(locale_Category0));
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        CollectionUtils.get((Iterable<Object>) stack0, 968);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 968
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      LinkedHashSet<Locale.Category> linkedHashSet0 = new LinkedHashSet<Locale.Category>(4);
      // Undeclared exception!
      try { 
        CollectionUtils.collate((Iterable<? extends Locale.Category>) linkedHashSet0, (Iterable<? extends Locale.Category>) linkedHashSet0, (Comparator<? super Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The comparator must not be null
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.predicatedCollection((Collection<Integer>) null, (Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Iterator<Integer> iterator0 = arrayList0.iterator();
      // Undeclared exception!
      try { 
        CollectionUtils.get(iterator0, (-388));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -388
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Integer integer0 = new Integer(30);
      ConstantTransformer<Integer, Integer> constantTransformer0 = new ConstantTransformer<Integer, Integer>(integer0);
      // Undeclared exception!
      try { 
        CollectionUtils.transformingCollection((Collection<Integer>) null, (Transformer<? super Integer, ? extends Integer>) constantTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      Map<Object, Integer> map0 = CollectionUtils.getCardinalityMap((Iterable<?>) stack0);
      Transformer<Object, Integer> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Integer>) map0);
      Collection<Object> collection0 = CollectionUtils.collect((Iterator<Integer>) null, (Transformer<? super Integer, ?>) transformer0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      LinkedList<NOPTransformer<Integer>> linkedList0 = new LinkedList<NOPTransformer<Integer>>();
      Collection<NOPTransformer<Integer>> collection0 = CollectionUtils.synchronizedCollection((Collection<NOPTransformer<Integer>>) linkedList0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      stack0.add(locale_Category0);
      Collection<Locale.Category> collection0 = CollectionUtils.intersection((Iterable<? extends Locale.Category>) stack0, (Iterable<? extends Locale.Category>) stack0);
      assertTrue(collection0.contains(locale_Category0));
  }
}
