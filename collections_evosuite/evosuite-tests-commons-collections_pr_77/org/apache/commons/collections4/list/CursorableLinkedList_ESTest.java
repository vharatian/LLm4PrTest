/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 19:15:25 GMT 2025
 */

package org.apache.commons.collections4.list;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FilterInputStream;
import java.lang.ref.ReferenceQueue;
import java.lang.ref.WeakReference;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.ListIterator;
import org.apache.commons.collections4.list.AbstractLinkedList;
import org.apache.commons.collections4.list.CursorableLinkedList;
import org.apache.commons.collections4.list.NodeCachingLinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CursorableLinkedList_ESTest extends CursorableLinkedList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CursorableLinkedList<WeakReference<Object>> cursorableLinkedList0 = new CursorableLinkedList<WeakReference<Object>>();
      AbstractLinkedList.Node<WeakReference<Object>> abstractLinkedList_Node0 = new AbstractLinkedList.Node<WeakReference<Object>>();
      cursorableLinkedList0.addNode(abstractLinkedList_Node0, abstractLinkedList_Node0);
      AbstractLinkedList.LinkedSubList<WeakReference<Object>> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<WeakReference<Object>>(cursorableLinkedList0, 1, 1);
      CursorableLinkedList<Object> cursorableLinkedList1 = new CursorableLinkedList<Object>(abstractLinkedList_LinkedSubList0);
      assertTrue(cursorableLinkedList1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CursorableLinkedList<WeakReference<Object>> cursorableLinkedList0 = new CursorableLinkedList<WeakReference<Object>>();
      AbstractLinkedList.LinkedSubList<WeakReference<Object>> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<WeakReference<Object>>(cursorableLinkedList0, 0, 0);
      CursorableLinkedList.SubCursor<WeakReference<Object>> cursorableLinkedList_SubCursor0 = new CursorableLinkedList.SubCursor<WeakReference<Object>>(abstractLinkedList_LinkedSubList0, 0);
      cursorableLinkedList_SubCursor0.nextIndex = 172;
      boolean boolean0 = cursorableLinkedList_SubCursor0.hasPrevious();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      cursorableLinkedList0.listIterator();
      cursorableLinkedList0.broadcastNodeRemoved((AbstractLinkedList.Node<Object>) null);
      cursorableLinkedList0.broadcastNodeRemoved((AbstractLinkedList.Node<Object>) null);
      assertEquals(0, cursorableLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      CursorableLinkedList<Object> cursorableLinkedList1 = new CursorableLinkedList<Object>(cursorableLinkedList0);
      cursorableLinkedList1.size = (-794);
      cursorableLinkedList1.removeAllNodes();
      assertFalse(cursorableLinkedList1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CursorableLinkedList<WeakReference<Integer>> cursorableLinkedList0 = new CursorableLinkedList<WeakReference<Integer>>();
      AbstractLinkedList.LinkedSubList<WeakReference<Integer>> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<WeakReference<Integer>>(cursorableLinkedList0, 0, 0);
      ListIterator<WeakReference<Integer>> listIterator0 = cursorableLinkedList0.createSubListListIterator(abstractLinkedList_LinkedSubList0, 0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CursorableLinkedList<WeakReference<Object>> cursorableLinkedList0 = new CursorableLinkedList<WeakReference<Object>>();
      AbstractLinkedList.LinkedSubList<WeakReference<Object>> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<WeakReference<Object>>(cursorableLinkedList0, 0, 0);
      CursorableLinkedList.SubCursor<WeakReference<Object>> cursorableLinkedList_SubCursor0 = new CursorableLinkedList.SubCursor<WeakReference<Object>>(abstractLinkedList_LinkedSubList0, 0);
      Integer integer0 = new Integer(0);
      WeakReference<Integer> weakReference0 = new WeakReference<Integer>(integer0, (ReferenceQueue<? super Integer>) null);
      WeakReference<Object> weakReference1 = new WeakReference<Object>(weakReference0, (ReferenceQueue<? super Object>) null);
      cursorableLinkedList_SubCursor0.add(weakReference1);
      assertTrue(abstractLinkedList_LinkedSubList0.contains(weakReference1));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      CursorableLinkedList.Cursor<Object> cursorableLinkedList_Cursor0 = cursorableLinkedList0.cursor();
      // Undeclared exception!
      try { 
        cursorableLinkedList_Cursor0.nodeInserted((AbstractLinkedList.Node<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.CursorableLinkedList$Cursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      CursorableLinkedList.Cursor<Integer> cursorableLinkedList_Cursor0 = cursorableLinkedList0.cursor();
      AbstractLinkedList.Node<Integer> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Integer>();
      cursorableLinkedList_Cursor0.nodeChanged(abstractLinkedList_Node0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      CursorableLinkedList.Cursor<Integer> cursorableLinkedList_Cursor0 = cursorableLinkedList0.cursor();
      cursorableLinkedList_Cursor0.checkModCount();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      CursorableLinkedList.Cursor<Integer> cursorableLinkedList_Cursor0 = new CursorableLinkedList.Cursor<Integer>(cursorableLinkedList0, 0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      cursorableLinkedList0.init();
      assertTrue(cursorableLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      Iterator<Integer> iterator0 = cursorableLinkedList0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      CursorableLinkedList.Cursor<Integer> cursorableLinkedList_Cursor0 = cursorableLinkedList0.cursor(0);
      assertNotNull(cursorableLinkedList_Cursor0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      // Undeclared exception!
      try { 
        cursorableLinkedList0.updateNode((AbstractLinkedList.Node<Object>) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      AbstractLinkedList.Node<Object> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Object>(cursorableLinkedList0);
      // Undeclared exception!
      try { 
        cursorableLinkedList0.removeNode(abstractLinkedList_Node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      // Undeclared exception!
      try { 
        cursorableLinkedList0.listIterator(91);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (91) greater than the size of the list (0).
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      CursorableLinkedList<Object> cursorableLinkedList1 = new CursorableLinkedList<Object>(cursorableLinkedList0);
      cursorableLinkedList1.size = (-794);
      // Undeclared exception!
      try { 
        cursorableLinkedList1.listIterator();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (0) greater than the size of the list (-794).
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      cursorableLinkedList0.size = (-1);
      // Undeclared exception!
      try { 
        cursorableLinkedList0.iterator();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (0) greater than the size of the list (-1).
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      AbstractLinkedList.Node<Object> abstractLinkedList_Node0 = cursorableLinkedList0.createHeaderNode();
      cursorableLinkedList0.removeNode(abstractLinkedList_Node0);
      // Undeclared exception!
      try { 
        cursorableLinkedList0.cursor();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (0) greater than the size of the list (-1).
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      // Undeclared exception!
      try { 
        cursorableLinkedList0.createSubListListIterator((AbstractLinkedList.LinkedSubList<Object>) null, 227);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.CursorableLinkedList$SubCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      AbstractLinkedList.LinkedSubList<Integer> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Integer>(cursorableLinkedList0, 0, 0);
      // Undeclared exception!
      try { 
        cursorableLinkedList0.createSubListListIterator(abstractLinkedList_LinkedSubList0, 3332);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (3332) greater than the size of the list (0).
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NodeCachingLinkedList<FilterInputStream> nodeCachingLinkedList0 = new NodeCachingLinkedList<FilterInputStream>();
      CursorableLinkedList<FilterInputStream> cursorableLinkedList0 = new CursorableLinkedList<FilterInputStream>(nodeCachingLinkedList0);
      AbstractLinkedList.LinkedSubList<FilterInputStream> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<FilterInputStream>(nodeCachingLinkedList0, 0, 0);
      // Undeclared exception!
      try { 
        cursorableLinkedList0.createSubListListIterator(abstractLinkedList_LinkedSubList0, 0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.list.NodeCachingLinkedList cannot be cast to org.apache.commons.collections4.list.CursorableLinkedList
         //
         verifyException("org.apache.commons.collections4.list.CursorableLinkedList$SubCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      cursorableLinkedList0.cursor();
      // Undeclared exception!
      try { 
        cursorableLinkedList0.broadcastNodeInserted((AbstractLinkedList.Node<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.CursorableLinkedList$Cursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      // Undeclared exception!
      try { 
        cursorableLinkedList0.addNode((AbstractLinkedList.Node<Integer>) null, (AbstractLinkedList.Node<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CursorableLinkedList<WeakReference<Object>> cursorableLinkedList0 = new CursorableLinkedList<WeakReference<Object>>();
      AbstractLinkedList.LinkedSubList<WeakReference<Object>> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<WeakReference<Object>>(cursorableLinkedList0, 0, 0);
      WeakReference<Object> weakReference0 = new WeakReference<Object>(abstractLinkedList_LinkedSubList0);
      cursorableLinkedList0.addLast(weakReference0);
      CursorableLinkedList<Object> cursorableLinkedList1 = null;
      try {
        cursorableLinkedList1 = new CursorableLinkedList<Object>(abstractLinkedList_LinkedSubList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CursorableLinkedList<WeakReference<Object>> cursorableLinkedList0 = null;
      try {
        cursorableLinkedList0 = new CursorableLinkedList<WeakReference<Object>>((Collection<? extends WeakReference<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NodeCachingLinkedList<FilterInputStream> nodeCachingLinkedList0 = new NodeCachingLinkedList<FilterInputStream>();
      AbstractLinkedList.Node<FilterInputStream> abstractLinkedList_Node0 = new AbstractLinkedList.Node<FilterInputStream>();
      nodeCachingLinkedList0.removeNode(abstractLinkedList_Node0);
      CursorableLinkedList<FilterInputStream> cursorableLinkedList0 = null;
      try {
        cursorableLinkedList0 = new CursorableLinkedList<FilterInputStream>(nodeCachingLinkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (0) greater than the size of the list (-1).
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CursorableLinkedList<WeakReference<Object>> cursorableLinkedList0 = new CursorableLinkedList<WeakReference<Object>>();
      // Undeclared exception!
      try { 
        cursorableLinkedList0.cursor(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (2) greater than the size of the list (0).
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CursorableLinkedList<WeakReference<Object>> cursorableLinkedList0 = new CursorableLinkedList<WeakReference<Object>>();
      AbstractLinkedList.LinkedSubList<WeakReference<Object>> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<WeakReference<Object>>(cursorableLinkedList0, 0, 0);
      CursorableLinkedList.SubCursor<WeakReference<Object>> cursorableLinkedList_SubCursor0 = new CursorableLinkedList.SubCursor<WeakReference<Object>>(abstractLinkedList_LinkedSubList0, 0);
      boolean boolean0 = cursorableLinkedList_SubCursor0.hasPrevious();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CursorableLinkedList<WeakReference<Object>> cursorableLinkedList0 = new CursorableLinkedList<WeakReference<Object>>();
      AbstractLinkedList.LinkedSubList<WeakReference<Object>> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<WeakReference<Object>>(cursorableLinkedList0, 0, 0);
      WeakReference<Object> weakReference0 = new WeakReference<Object>(abstractLinkedList_LinkedSubList0);
      abstractLinkedList_LinkedSubList0.add(weakReference0);
      CursorableLinkedList<Object> cursorableLinkedList1 = new CursorableLinkedList<Object>(abstractLinkedList_LinkedSubList0);
      assertTrue(abstractLinkedList_LinkedSubList0.contains(weakReference0));
      assertEquals(1, cursorableLinkedList1.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      CursorableLinkedList.Cursor<Object> cursorableLinkedList_Cursor0 = cursorableLinkedList0.cursor();
      cursorableLinkedList_Cursor0.close();
      cursorableLinkedList_Cursor0.close();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      cursorableLinkedList0.cursor();
      AbstractLinkedList.Node<Object> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Object>(cursorableLinkedList0);
      cursorableLinkedList0.broadcastNodeInserted(abstractLinkedList_Node0);
      assertEquals(0, cursorableLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      cursorableLinkedList0.cursor();
      AbstractLinkedList.Node<Object> abstractLinkedList_Node0 = cursorableLinkedList0.header;
      cursorableLinkedList0.broadcastNodeRemoved(abstractLinkedList_Node0);
      assertEquals(0, cursorableLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CursorableLinkedList<WeakReference<Object>> cursorableLinkedList0 = new CursorableLinkedList<WeakReference<Object>>();
      CursorableLinkedList<Object> cursorableLinkedList1 = new CursorableLinkedList<Object>(cursorableLinkedList0);
      CursorableLinkedList.Cursor<Object> cursorableLinkedList_Cursor0 = cursorableLinkedList1.cursor();
      AbstractLinkedList.Node<Object> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Object>();
      cursorableLinkedList1.addLast(abstractLinkedList_Node0);
      cursorableLinkedList1.broadcastNodeRemoved(abstractLinkedList_Node0);
      int int0 = cursorableLinkedList_Cursor0.nextIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>();
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>(nodeCachingLinkedList0);
      CursorableLinkedList.Cursor<Integer> cursorableLinkedList_Cursor0 = cursorableLinkedList0.cursor();
      cursorableLinkedList_Cursor0.nodeRemoved((AbstractLinkedList.Node<Integer>) null);
      cursorableLinkedList_Cursor0.remove();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>();
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>(nodeCachingLinkedList0);
      CursorableLinkedList.Cursor<Integer> cursorableLinkedList_Cursor0 = cursorableLinkedList0.cursor();
      // Undeclared exception!
      try { 
        cursorableLinkedList_Cursor0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      Integer integer0 = new Integer(1905);
      cursorableLinkedList0.registerCursor((CursorableLinkedList.Cursor<Object>) null);
      cursorableLinkedList0.add((Object) integer0);
      assertTrue(cursorableLinkedList0.contains(1905));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      cursorableLinkedList0.registerCursor((CursorableLinkedList.Cursor<Object>) null);
      AbstractLinkedList.Node<Object> abstractLinkedList_Node0 = cursorableLinkedList0.header;
      cursorableLinkedList0.broadcastNodeRemoved(abstractLinkedList_Node0);
      assertTrue(cursorableLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      CursorableLinkedList.Cursor<Object> cursorableLinkedList_Cursor0 = cursorableLinkedList0.cursor();
      cursorableLinkedList_Cursor0.close();
      // Undeclared exception!
      try { 
        cursorableLinkedList_Cursor0.remove();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // Cursor closed
         //
         verifyException("org.apache.commons.collections4.list.CursorableLinkedList$Cursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      cursorableLinkedList0.unregisterCursor((CursorableLinkedList.Cursor<Object>) null);
      assertEquals(0, cursorableLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CursorableLinkedList<WeakReference<Object>> cursorableLinkedList0 = new CursorableLinkedList<WeakReference<Object>>();
      cursorableLinkedList0.registerCursor((CursorableLinkedList.Cursor<WeakReference<Object>>) null);
      CursorableLinkedList.Cursor<WeakReference<Object>> cursorableLinkedList_Cursor0 = cursorableLinkedList0.cursor();
      assertNotNull(cursorableLinkedList_Cursor0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      cursorableLinkedList0.cursor();
      cursorableLinkedList0.registerCursor((CursorableLinkedList.Cursor<Object>) null);
      assertEquals(0, cursorableLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      cursorableLinkedList0.removeAllNodes();
      assertEquals(0, cursorableLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CursorableLinkedList<WeakReference<Object>> cursorableLinkedList0 = new CursorableLinkedList<WeakReference<Object>>();
      AbstractLinkedList.LinkedSubList<WeakReference<Object>> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<WeakReference<Object>>(cursorableLinkedList0, 0, 0);
      CursorableLinkedList.SubCursor<WeakReference<Object>> cursorableLinkedList_SubCursor0 = new CursorableLinkedList.SubCursor<WeakReference<Object>>(abstractLinkedList_LinkedSubList0, 0);
      WeakReference<Object> weakReference0 = new WeakReference<Object>(cursorableLinkedList0);
      cursorableLinkedList_SubCursor0.add(weakReference0);
      boolean boolean0 = cursorableLinkedList_SubCursor0.hasPrevious();
      assertTrue(cursorableLinkedList0.contains(weakReference0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      cursorableLinkedList0.cursor();
      AbstractLinkedList.Node<Integer> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Integer>();
      cursorableLinkedList0.broadcastNodeChanged(abstractLinkedList_Node0);
      assertEquals(0, cursorableLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      CursorableLinkedList.Cursor<Integer> cursorableLinkedList_Cursor0 = cursorableLinkedList0.cursor();
      Integer integer0 = new Integer(3373);
      cursorableLinkedList_Cursor0.add(integer0);
      cursorableLinkedList0.removeAllNodes();
      assertEquals(0, cursorableLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CursorableLinkedList<FilterInputStream> cursorableLinkedList0 = new CursorableLinkedList<FilterInputStream>();
      ListIterator<FilterInputStream> listIterator0 = cursorableLinkedList0.listIterator(0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      AbstractLinkedList.Node<Object> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Object>(cursorableLinkedList0);
      cursorableLinkedList0.updateNode(abstractLinkedList_Node0, abstractLinkedList_Node0);
      assertTrue(cursorableLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CursorableLinkedList<WeakReference<Object>> cursorableLinkedList0 = new CursorableLinkedList<WeakReference<Object>>();
      CursorableLinkedList<Object> cursorableLinkedList1 = new CursorableLinkedList<Object>(cursorableLinkedList0);
      CursorableLinkedList.Cursor<Object> cursorableLinkedList_Cursor0 = cursorableLinkedList1.cursor();
      AbstractLinkedList.Node<Object> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Object>();
      cursorableLinkedList1.broadcastNodeRemoved(abstractLinkedList_Node0);
      int int0 = cursorableLinkedList_Cursor0.nextIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      cursorableLinkedList0.listIterator();
      CursorableLinkedList.Cursor<Object> cursorableLinkedList_Cursor0 = cursorableLinkedList0.cursor();
      cursorableLinkedList_Cursor0.close();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CursorableLinkedList<WeakReference<Object>> cursorableLinkedList0 = new CursorableLinkedList<WeakReference<Object>>();
      AbstractLinkedList.LinkedSubList<WeakReference<Object>> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<WeakReference<Object>>(cursorableLinkedList0, 0, 0);
      CursorableLinkedList.SubCursor<WeakReference<Object>> cursorableLinkedList_SubCursor0 = new CursorableLinkedList.SubCursor<WeakReference<Object>>(abstractLinkedList_LinkedSubList0, 0);
      AbstractLinkedList.Node<WeakReference<Object>> abstractLinkedList_Node0 = new AbstractLinkedList.Node<WeakReference<Object>>();
      cursorableLinkedList_SubCursor0.current = abstractLinkedList_Node0;
      cursorableLinkedList_SubCursor0.remove();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      ReferenceQueue<Object> referenceQueue0 = new ReferenceQueue<Object>();
      WeakReference<FilterInputStream> weakReference0 = new WeakReference<FilterInputStream>((FilterInputStream) null, referenceQueue0);
      cursorableLinkedList0.addFirst(weakReference0);
      CursorableLinkedList.Cursor<Object> cursorableLinkedList_Cursor0 = cursorableLinkedList0.cursor();
      AbstractLinkedList.Node<Object> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Object>();
      cursorableLinkedList0.addLast(abstractLinkedList_Node0);
      int int0 = cursorableLinkedList_Cursor0.nextIndex();
      assertEquals(0, int0);
  }
}
