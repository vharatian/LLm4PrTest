/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 19:17:37 GMT 2025
 */

package org.apache.commons.collections4.set;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.function.Predicate;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.set.ListOrderedSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ListOrderedSet_ESTest extends ListOrderedSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      Integer integer0 = new Integer((-1));
      linkedList0.add(integer0);
      ListOrderedSet<Integer> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<Integer>) linkedList0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>(listOrderedSet0);
      ListOrderedSet<Object> listOrderedSet1 = ListOrderedSet.listOrderedSet((List<Object>) linkedList1);
      boolean boolean0 = listOrderedSet0.removeAll(listOrderedSet1);
      assertFalse(listOrderedSet0.contains((-1)));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      Integer[] integerArray0 = new Integer[9];
      Integer[] integerArray1 = listOrderedSet0.toArray(integerArray0);
      assertSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add((Integer) null);
      ListOrderedSet<Integer> listOrderedSet0 = new ListOrderedSet<Integer>(linkedHashSet0);
      Object[] objectArray0 = listOrderedSet0.toArray();
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      Object[] objectArray0 = listOrderedSet0.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(1, 1);
      LinkedList<Object> linkedList0 = new LinkedList<Object>(linkedHashSet0);
      linkedList0.add((Object) null);
      ListOrderedSet<Object> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<Object>) linkedList0);
      Object object0 = listOrderedSet0.remove(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      ListOrderedSet<Object> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<Object>) linkedList0);
      Object object1 = listOrderedSet0.remove(0);
      assertFalse(linkedList0.contains(object1));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(4153);
      linkedList0.add(integer0);
      ListOrderedSet<Integer> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<Integer>) linkedList0);
      int int0 = listOrderedSet0.indexOf(integer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1118);
      linkedList0.add(integer0);
      Integer integer1 = new Integer((-2270));
      linkedList0.add(integer1);
      ListOrderedSet<Integer> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<Integer>) linkedList0);
      Integer integer2 = new Integer((-2270));
      int int0 = listOrderedSet0.indexOf(integer2);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2206));
      linkedList0.add(integer0);
      ListOrderedSet<Integer> listOrderedSet0 = new ListOrderedSet<Integer>();
      linkedList0.add((Integer) null);
      listOrderedSet0.addAll((Collection<? extends Integer>) linkedList0);
      Object object0 = listOrderedSet0.get(1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListOrderedSet<Object> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<Object>) linkedList0);
      listOrderedSet0.add((Object) listOrderedSet0);
      Object object0 = listOrderedSet0.get(0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ListOrderedSet<Integer> listOrderedSet0 = new ListOrderedSet<Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListOrderedSet<Integer> listOrderedSet1 = ListOrderedSet.listOrderedSet((Set<Integer>) listOrderedSet0, (List<Integer>) linkedList0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Integer integer0 = new Integer((-1));
      linkedList0.addLast(integer0);
      ListOrderedSet<Object> listOrderedSet2 = ListOrderedSet.listOrderedSet((List<Object>) linkedList1);
      boolean boolean0 = listOrderedSet2.addAll(0, (Collection<?>) listOrderedSet1);
      assertTrue(listOrderedSet2.contains((-1)));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      // Undeclared exception!
      try { 
        listOrderedSet0.toArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListOrderedSet<Integer> listOrderedSet1 = ListOrderedSet.listOrderedSet((List<Integer>) linkedList0);
      listOrderedSet0.add((Object) listOrderedSet1);
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
      try { 
        listOrderedSet0.toArray(integerArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-5));
      linkedList0.add(integer0);
      ListOrderedSet<Integer> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<Integer>) linkedList0);
      List<Integer> list0 = listOrderedSet0.asList();
      ListOrderedSet<Integer> listOrderedSet1 = ListOrderedSet.listOrderedSet(list0);
      linkedList0.remove();
      // Undeclared exception!
      try { 
        listOrderedSet1.retainAll(list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      List<Object> list0 = listOrderedSet0.asList();
      listOrderedSet0.add((Object) list0);
      // Undeclared exception!
      try { 
        listOrderedSet0.retainAll(listOrderedSet0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      // Undeclared exception!
      try { 
        listOrderedSet0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>(linkedHashSet0);
      listOrderedSet0.add((Object) listOrderedSet0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) listOrderedSet0);
      // Undeclared exception!
      try { 
        listOrderedSet0.removeIf(predicate0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      listOrderedSet0.add((Object) linkedList0);
      // Undeclared exception!
      try { 
        listOrderedSet0.removeAll(listOrderedSet0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ListOrderedSet<Integer> listOrderedSet0 = new ListOrderedSet<Integer>();
      List<Integer> list0 = listOrderedSet0.asList();
      Integer integer0 = new Integer(4225);
      listOrderedSet0.add(integer0);
      ListOrderedSet<Integer> listOrderedSet1 = ListOrderedSet.listOrderedSet(list0);
      // Undeclared exception!
      try { 
        listOrderedSet1.removeAll(listOrderedSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      listOrderedSet0.add((Object) linkedList0);
      linkedList0.add((Object) listOrderedSet0);
      // Undeclared exception!
      try { 
        listOrderedSet0.removeAll(linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      // Undeclared exception!
      try { 
        listOrderedSet0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.ListOrderedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer((-2206));
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      List<Object> list0 = listOrderedSet0.asList();
      ListOrderedSet<Object> listOrderedSet1 = ListOrderedSet.listOrderedSet((Set<Object>) listOrderedSet0, list0);
      listOrderedSet0.add((Object) integer0);
      // Undeclared exception!
      try { 
        listOrderedSet1.remove((Object) integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      // Undeclared exception!
      try { 
        listOrderedSet0.remove((Object) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      List<Object> list0 = listOrderedSet0.asList();
      ListOrderedSet<Object> listOrderedSet1 = ListOrderedSet.listOrderedSet((Set<Object>) listOrderedSet0, list0);
      // Undeclared exception!
      try { 
        listOrderedSet1.remove(3574);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      // Undeclared exception!
      try { 
        listOrderedSet0.remove((-1340));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListOrderedSet.listOrderedSet((Set<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1);
      linkedList0.add(integer0);
      linkedList0.add(integer0);
      ListOrderedSet<Integer> listOrderedSet0 = new ListOrderedSet<Integer>(linkedHashSet0, linkedList0);
      List<Integer> list0 = listOrderedSet0.asList();
      // Undeclared exception!
      try { 
        ListOrderedSet.listOrderedSet(list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove() is not supported
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      List<Object> list0 = listOrderedSet0.asList();
      listOrderedSet0.add((Object) list0);
      // Undeclared exception!
      try { 
        ListOrderedSet.listOrderedSet(list0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      // Undeclared exception!
      try { 
        listOrderedSet0.get((-1657));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      List<Object> list0 = listOrderedSet0.asList();
      ListOrderedSet<Object> listOrderedSet1 = ListOrderedSet.listOrderedSet((Set<Object>) listOrderedSet0, list0);
      // Undeclared exception!
      try { 
        listOrderedSet1.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListOrderedSet<Integer> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<Integer>) linkedList0);
      Integer integer0 = new Integer(1);
      linkedList0.add(integer0);
      // Undeclared exception!
      try { 
        listOrderedSet0.addAll((Collection<? extends Integer>) linkedList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1119);
      linkedList0.add(integer0);
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      List<Object> list0 = listOrderedSet0.asList();
      ListOrderedSet<Object> listOrderedSet1 = ListOrderedSet.listOrderedSet((Set<Object>) listOrderedSet0, list0);
      // Undeclared exception!
      try { 
        listOrderedSet1.addAll((Collection<?>) linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) listOrderedSet0);
      listOrderedSet0.addAll((Collection<?>) linkedList0);
      // Undeclared exception!
      try { 
        listOrderedSet0.addAll((Collection<?>) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      // Undeclared exception!
      try { 
        listOrderedSet0.addAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.ListOrderedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      ListOrderedSet<LinkedList<Object>> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<LinkedList<Object>>) linkedList0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      ListOrderedSet<Object> listOrderedSet1 = ListOrderedSet.listOrderedSet((List<Object>) linkedList1);
      ListOrderedSet<Object> listOrderedSet2 = new ListOrderedSet<Object>(listOrderedSet1);
      linkedList1.add((Object) listOrderedSet0);
      // Undeclared exception!
      try { 
        listOrderedSet2.addAll(10, (Collection<?>) listOrderedSet1);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1532);
      linkedList0.add(integer0);
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      List<Object> list0 = listOrderedSet0.asList();
      ListOrderedSet<Object> listOrderedSet1 = ListOrderedSet.listOrderedSet(list0);
      // Undeclared exception!
      try { 
        listOrderedSet1.addAll(1532, (Collection<?>) linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>(linkedHashSet0);
      linkedHashSet0.add(listOrderedSet0);
      // Undeclared exception!
      try { 
        listOrderedSet0.addAll((-970), (Collection<?>) linkedHashSet0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      // Undeclared exception!
      try { 
        listOrderedSet0.addAll(1, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.ListOrderedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      List<Object> list0 = listOrderedSet0.asList();
      ListOrderedSet<Object> listOrderedSet1 = ListOrderedSet.listOrderedSet((Set<Object>) listOrderedSet0, list0);
      Integer integer0 = new Integer((-664));
      // Undeclared exception!
      try { 
        listOrderedSet1.add((Object) integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>(linkedHashSet0);
      linkedHashSet0.add(listOrderedSet0);
      // Undeclared exception!
      try { 
        listOrderedSet0.add((Object) linkedHashSet0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>(linkedHashSet0);
      linkedHashSet0.add(listOrderedSet0);
      // Undeclared exception!
      try { 
        listOrderedSet0.add(1, (Object) linkedHashSet0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      // Undeclared exception!
      try { 
        listOrderedSet0.add(3711, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3711, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ListOrderedSet<LinkedList<Integer>> listOrderedSet0 = null;
      try {
        listOrderedSet0 = new ListOrderedSet<LinkedList<Integer>>((Set<LinkedList<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      boolean boolean0 = listOrderedSet0.remove((Object) listOrderedSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Object object0 = new Object();
      linkedHashSet0.add(object0);
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>(linkedHashSet0);
      boolean boolean0 = listOrderedSet0.addAll(1638, (Collection<?>) linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListOrderedSet<Object> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<Object>) linkedList0);
      Object object0 = new Object();
      listOrderedSet0.add(0, object0);
      assertFalse(listOrderedSet0.contains(0));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      ListOrderedSet<Integer> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<Integer>) linkedList0);
      listOrderedSet0.add((-2146792024), (Integer) null);
      assertFalse(listOrderedSet0.contains((-2146792024)));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      Integer integer0 = new Integer((-1483));
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>(linkedList0);
      linkedList1.add(integer0);
      ListOrderedSet<Integer> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<Integer>) linkedList1);
      boolean boolean0 = listOrderedSet0.retainAll(linkedList0);
      assertFalse(linkedList1.contains((-1483)));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      boolean boolean0 = listOrderedSet0.retainAll(listOrderedSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      ListOrderedSet<Integer> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<Integer>) linkedList0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      listOrderedSet0.removeIf(predicate0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      boolean boolean0 = listOrderedSet0.removeIf((Predicate<? super Object>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListOrderedSet<Integer> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<Integer>) linkedList0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = listOrderedSet0.removeIf(predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      ListOrderedSet<Integer> listOrderedSet1 = ListOrderedSet.listOrderedSet((List<Integer>) linkedList0);
      boolean boolean0 = listOrderedSet0.add((Object) listOrderedSet1);
      assertTrue(boolean0);
      
      boolean boolean1 = listOrderedSet0.remove((Object) listOrderedSet1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1);
      linkedList0.add(integer0);
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      boolean boolean0 = listOrderedSet0.removeAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = listOrderedSet0.addAll((Collection<?>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1));
      linkedList0.add(integer0);
      ListOrderedSet<Integer> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<Integer>) linkedList0);
      boolean boolean0 = listOrderedSet0.add(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      ListOrderedSet<Object> listOrderedSet1 = null;
      try {
        listOrderedSet1 = new ListOrderedSet<Object>(listOrderedSet0, (List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.set.ListOrderedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListOrderedSet.listOrderedSet((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.set.ListOrderedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) listOrderedSet0);
      // Undeclared exception!
      try { 
        ListOrderedSet.listOrderedSet((Set<Object>) listOrderedSet0, (List<Object>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Set and List must be empty
         //
         verifyException("org.apache.commons.collections4.set.ListOrderedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSet0.add(linkedList0);
      // Undeclared exception!
      try { 
        ListOrderedSet.listOrderedSet((Set<Object>) linkedHashSet0, (List<Object>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Set and List must be empty
         //
         verifyException("org.apache.commons.collections4.set.ListOrderedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      // Undeclared exception!
      try { 
        ListOrderedSet.listOrderedSet((Set<Object>) listOrderedSet0, (List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.set.ListOrderedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      // Undeclared exception!
      try { 
        ListOrderedSet.listOrderedSet((Set<LinkedList<Object>>) null, (List<LinkedList<Object>>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Set must not be null
         //
         verifyException("org.apache.commons.collections4.set.ListOrderedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      ListOrderedSet<LinkedList<Object>> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<LinkedList<Object>>) linkedList0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      ListOrderedSet<Object> listOrderedSet1 = ListOrderedSet.listOrderedSet((List<Object>) linkedList1);
      linkedList1.add((Object) listOrderedSet0);
      // Undeclared exception!
      try { 
        listOrderedSet1.addAll(10, (Collection<?>) listOrderedSet1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      // Undeclared exception!
      try { 
        listOrderedSet0.get(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListOrderedSet<Integer> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<Integer>) linkedList0);
      OrderedIterator<Integer> orderedIterator0 = listOrderedSet0.iterator();
      assertFalse(orderedIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      listOrderedSet0.clear();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      List<Object> list0 = listOrderedSet0.asList();
      ListOrderedSet<Object> listOrderedSet1 = ListOrderedSet.listOrderedSet((Set<Object>) listOrderedSet0, list0);
      // Undeclared exception!
      try { 
        listOrderedSet1.add(0, (Object) list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1118);
      ListOrderedSet<Integer> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<Integer>) linkedList0);
      int int0 = listOrderedSet0.indexOf(integer0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      ListOrderedSet<Object> listOrderedSet0 = ListOrderedSet.listOrderedSet((Set<Object>) linkedHashSet0);
      String string0 = listOrderedSet0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = listOrderedSet0.toArray(integerArray0);
      assertSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(1, 1);
      LinkedList<Object> linkedList0 = new LinkedList<Object>(linkedHashSet0);
      ListOrderedSet<Object> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<Object>) linkedList0);
      // Undeclared exception!
      try { 
        listOrderedSet0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }
}
