/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 18:30:18 GMT 2025
 */

package org.apache.commons.collections4.queue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import org.apache.commons.collections4.queue.CircularFifoQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CircularFifoQueue_ESTest extends CircularFifoQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer(32);
      linkedList1.add(integer0);
      Integer integer1 = new Integer((-4249));
      linkedList0.addFirst(integer1);
      linkedList0.add(integer1);
      linkedList0.add(integer0);
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>(linkedList0);
      circularFifoQueue0.add(integer0);
      circularFifoQueue0.removeAll(linkedList1);
      assertFalse(circularFifoQueue0.contains(32));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-7));
      linkedList0.add(integer0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.add(integer0);
      linkedList0.add(integer0);
      linkedList1.add(integer0);
      linkedList0.add(integer0);
      Integer integer1 = new Integer(1214);
      linkedList0.addFirst(integer1);
      linkedList0.add(integer0);
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>(linkedList0);
      boolean boolean0 = circularFifoQueue0.removeAll(linkedList1);
      assertEquals(1, circularFifoQueue0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(34);
      linkedList0.add(integer0);
      linkedList0.add(integer0);
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>(linkedList0);
      boolean boolean0 = circularFifoQueue0.add(integer0);
      assertTrue(boolean0);
      
      circularFifoQueue0.get(1);
      assertEquals(2, circularFifoQueue0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(5);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add(integer0);
      linkedList0.add(integer0);
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>(linkedList0);
      Integer integer1 = circularFifoQueue0.get(1);
      assertNotNull(integer1);
      assertTrue(circularFifoQueue0.isAtFullCapacity());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>();
      // Undeclared exception!
      try { 
        circularFifoQueue0.get(0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // The specified index 0 is outside the available range [0, 0)
         //
         verifyException("org.apache.commons.collections4.queue.CircularFifoQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(23);
      linkedList0.add(integer0);
      linkedList0.addFirst(integer0);
      linkedList0.add(integer0);
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>(linkedList0);
      linkedList0.add(integer0);
      circularFifoQueue0.addAll(linkedList0);
      boolean boolean0 = circularFifoQueue0.removeAll(linkedList0);
      assertTrue(circularFifoQueue0.isEmpty());
      
      boolean boolean1 = circularFifoQueue0.addAll(linkedList0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>();
      int int0 = circularFifoQueue0.size();
      assertEquals(32, circularFifoQueue0.maxSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>(3025);
      circularFifoQueue0.iterator();
      assertEquals(3025, circularFifoQueue0.maxSize());
      assertEquals(0, circularFifoQueue0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>();
      // Undeclared exception!
      try { 
        circularFifoQueue0.offer((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Attempted to add null object to queue
         //
         verifyException("org.apache.commons.collections4.queue.CircularFifoQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CircularFifoQueue<Integer> circularFifoQueue0 = null;
      try {
        circularFifoQueue0 = new CircularFifoQueue<Integer>((Collection<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.queue.CircularFifoQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CircularFifoQueue<Integer> circularFifoQueue0 = null;
      try {
        circularFifoQueue0 = new CircularFifoQueue<Integer>((-646));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.queue.CircularFifoQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>(1);
      Integer integer0 = new Integer(0);
      circularFifoQueue0.offer(integer0);
      circularFifoQueue0.remove();
      assertFalse(circularFifoQueue0.contains(0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>(1);
      assertEquals(0, circularFifoQueue0.size());
      
      Integer integer0 = new Integer(1);
      circularFifoQueue0.offer(integer0);
      circularFifoQueue0.peek();
      assertTrue(circularFifoQueue0.isAtFullCapacity());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>();
      // Undeclared exception!
      try { 
        circularFifoQueue0.add((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Attempted to add null object to queue
         //
         verifyException("org.apache.commons.collections4.queue.CircularFifoQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>();
      boolean boolean0 = circularFifoQueue0.isAtFullCapacity();
      assertEquals(32, circularFifoQueue0.maxSize());
      assertTrue(circularFifoQueue0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>();
      assertTrue(circularFifoQueue0.isEmpty());
      
      Integer integer0 = new Integer(1);
      circularFifoQueue0.add(integer0);
      CircularFifoQueue<Integer> circularFifoQueue1 = new CircularFifoQueue<Integer>(circularFifoQueue0);
      boolean boolean0 = circularFifoQueue1.isAtFullCapacity();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>();
      assertTrue(circularFifoQueue0.isEmpty());
      
      Integer integer0 = new Integer(1);
      circularFifoQueue0.add(integer0);
      circularFifoQueue0.isEmpty();
      assertEquals(1, circularFifoQueue0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>(1);
      Integer integer0 = new Integer(1);
      circularFifoQueue0.offer(integer0);
      CircularFifoQueue<Integer> circularFifoQueue1 = new CircularFifoQueue<Integer>(circularFifoQueue0);
      assertEquals(1, circularFifoQueue0.size());
      assertTrue(circularFifoQueue0.contains(1));
      assertEquals(1, circularFifoQueue0.maxSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer(1);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add(integer0);
      linkedList0.addFirst(integer0);
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>(linkedList0);
      assertTrue(circularFifoQueue0.isAtFullCapacity());
      
      circularFifoQueue0.remove();
      int int0 = circularFifoQueue0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer(32);
      linkedList1.add(integer0);
      Integer integer1 = new Integer((-4249));
      linkedList0.addFirst(integer1);
      linkedList0.add(integer1);
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>(linkedList0);
      circularFifoQueue0.add(integer0);
      boolean boolean0 = circularFifoQueue0.removeAll(linkedList1);
      assertEquals(1, circularFifoQueue0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>();
      // Undeclared exception!
      try { 
        circularFifoQueue0.remove();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // queue is empty
         //
         verifyException("org.apache.commons.collections4.queue.CircularFifoQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>();
      circularFifoQueue0.peek();
      assertEquals(32, circularFifoQueue0.maxSize());
      assertTrue(circularFifoQueue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(32);
      linkedList0.addFirst(integer0);
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>(linkedList0);
      circularFifoQueue0.removeAll(linkedList0);
      // Undeclared exception!
      try { 
        circularFifoQueue0.element();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // queue is empty
         //
         verifyException("org.apache.commons.collections4.queue.CircularFifoQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>();
      assertEquals(0, circularFifoQueue0.size());
      
      Integer integer0 = new Integer(0);
      circularFifoQueue0.offer(integer0);
      circularFifoQueue0.element();
      assertEquals(1, circularFifoQueue0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>();
      circularFifoQueue0.poll();
      assertTrue(circularFifoQueue0.isEmpty());
      assertEquals(32, circularFifoQueue0.maxSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>();
      Integer integer0 = new Integer(1);
      circularFifoQueue0.add(integer0);
      circularFifoQueue0.poll();
      assertFalse(circularFifoQueue0.contains(1));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-7));
      linkedList0.add(integer0);
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>(linkedList0);
      // Undeclared exception!
      try { 
        circularFifoQueue0.get(2);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // The specified index 2 is outside the available range [0, 1)
         //
         verifyException("org.apache.commons.collections4.queue.CircularFifoQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>();
      // Undeclared exception!
      try { 
        circularFifoQueue0.get((-1));
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // The specified index -1 is outside the available range [0, 0)
         //
         verifyException("org.apache.commons.collections4.queue.CircularFifoQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.addFirst((Integer) null);
      CircularFifoQueue<Integer> circularFifoQueue0 = null;
      try {
        circularFifoQueue0 = new CircularFifoQueue<Integer>(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Attempted to add null object to queue
         //
         verifyException("org.apache.commons.collections4.queue.CircularFifoQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>();
      CircularFifoQueue<Integer> circularFifoQueue1 = null;
      try {
        circularFifoQueue1 = new CircularFifoQueue<Integer>(circularFifoQueue0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.queue.CircularFifoQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(32);
      linkedList0.addFirst(integer0);
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>(linkedList0);
      int int0 = circularFifoQueue0.maxSize();
      assertTrue(circularFifoQueue0.isAtFullCapacity());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(32);
      linkedList0.addFirst(integer0);
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>(linkedList0);
      boolean boolean0 = circularFifoQueue0.isFull();
      assertFalse(boolean0);
      assertTrue(circularFifoQueue0.isAtFullCapacity());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>();
      circularFifoQueue0.clear();
      assertTrue(circularFifoQueue0.isEmpty());
      assertEquals(32, circularFifoQueue0.maxSize());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(32);
      linkedList0.addFirst(integer0);
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>(linkedList0);
      assertTrue(circularFifoQueue0.isAtFullCapacity());
      
      circularFifoQueue0.removeAll(linkedList0);
      boolean boolean0 = circularFifoQueue0.isEmpty();
      assertFalse(circularFifoQueue0.contains(32));
      assertTrue(boolean0);
  }
}
