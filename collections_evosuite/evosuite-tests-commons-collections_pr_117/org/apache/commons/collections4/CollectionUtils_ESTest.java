/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 18:24:08 GMT 2025
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.time.DayOfWeek;
import java.time.Month;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.ThaiBuddhistEra;
import java.time.format.FormatStyle;
import java.time.format.ResolverStyle;
import java.time.format.TextStyle;
import java.time.temporal.ChronoField;
import java.time.temporal.ChronoUnit;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ChainedTransformer;
import org.apache.commons.collections4.functors.CloneTransformer;
import org.apache.commons.collections4.functors.ClosureTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.list.FixedSizeList;
import org.apache.commons.collections4.queue.CircularFifoQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CollectionUtils_ESTest extends CollectionUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.SHORT;
      EnumSet<TextStyle> enumSet0 = EnumSet.range(textStyle0, textStyle0);
      Collection<TextStyle> collection0 = CollectionUtils.removeRange((Collection<TextStyle>) enumSet0, 1, 1);
      assertFalse(collection0.contains(textStyle0));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      // Undeclared exception!
      try { 
        CollectionUtils.removeRange((Collection<Integer>) priorityQueue0, (-1721), (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The start index can't be less than 0.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      // Undeclared exception!
      try { 
        CollectionUtils.removeRange((Collection<Integer>) priorityQueue0, (-1721), 1582);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The end index can't be greater than the size of collection.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Vector<Closure<Integer>> vector0 = new Vector<Closure<Integer>>();
      Collection<Closure<Integer>> collection0 = CollectionUtils.retainAll((Collection<Closure<Integer>>) vector0, (Collection<?>) treeSet0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.SHORT_STANDALONE;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0);
      EnumSet<TextStyle> enumSet1 = EnumSet.of(textStyle0, textStyle0);
      Comparator<TextStyle> comparator0 = (Comparator<TextStyle>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.time.format.TextStyle.class) , any(java.time.format.TextStyle.class));
      List<TextStyle> list0 = CollectionUtils.collate((Iterable<? extends TextStyle>) enumSet0, (Iterable<? extends TextStyle>) enumSet1, (Comparator<? super TextStyle>) comparator0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>();
      DefaultEquator<Integer> defaultEquator0 = DefaultEquator.defaultEquator();
      Collection<Integer> collection0 = CollectionUtils.retainAll((Iterable<Integer>) circularFifoQueue0, (Iterable<? extends Integer>) circularFifoQueue0, (Equator<? super Integer>) defaultEquator0);
      List<Integer> list0 = CollectionUtils.collate((Iterable<? extends Integer>) circularFifoQueue0, (Iterable<? extends Integer>) collection0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      CollectionUtils.reverseArray(objectArray0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.FULL_STANDALONE;
      LinkedList<TextStyle> linkedList0 = new LinkedList<TextStyle>();
      TextStyle textStyle1 = TextStyle.NARROW;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0, textStyle0, textStyle1);
      Iterator<TextStyle> iterator0 = enumSet0.iterator();
      boolean boolean0 = CollectionUtils.addAll((Collection<TextStyle>) linkedList0, (Iterator<? extends TextStyle>) iterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.NARROW_STANDALONE;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<?>) priorityQueue0, (Collection<?>) enumSet0, (Equator<? super Object>) defaultEquator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.FULL_STANDALONE;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0, textStyle0);
      Comparator<TextStyle> comparator0 = (Comparator<TextStyle>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(941).when(comparator0).compare(any(java.time.format.TextStyle.class) , any(java.time.format.TextStyle.class));
      List<TextStyle> list0 = CollectionUtils.collate((Iterable<? extends TextStyle>) enumSet0, (Iterable<? extends TextStyle>) enumSet0, (Comparator<? super TextStyle>) comparator0);
      Collection<TextStyle> collection0 = CollectionUtils.emptyIfNull((Collection<TextStyle>) list0);
      Collection<List<TextStyle>> collection1 = CollectionUtils.permutations(collection0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<?>) list0, (Collection<?>) collection1, (Equator<? super Object>) defaultEquator0);
      assertEquals(2, list0.size());
      assertTrue(collection1.contains(list0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Stack<TextStyle> stack0 = new Stack<TextStyle>();
      TextStyle textStyle0 = TextStyle.SHORT_STANDALONE;
      stack0.add(textStyle0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      CollectionUtils.select((Iterable<?>) stack0, (Predicate<? super Object>) predicate0, linkedList0, linkedList0);
      Collection<Object> collection0 = CollectionUtils.emptyCollection();
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<?>) linkedList0, (Collection<?>) collection0);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      TextStyle textStyle0 = TextStyle.FULL;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0);
      boolean boolean0 = CollectionUtils.isProperSubCollection(enumSet0, linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.NARROW;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      List<TextStyle> list0 = CollectionUtils.collate((Iterable<? extends TextStyle>) enumSet0, (Iterable<? extends TextStyle>) enumSet0, (Comparator<? super TextStyle>) comparator0, false);
      Collection<TextStyle> collection0 = CollectionUtils.removeAll((Iterable<TextStyle>) enumSet0, (Iterable<? extends TextStyle>) list0, (Equator<? super TextStyle>) defaultEquator0);
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) enumSet0, (Collection<?>) collection0);
      assertFalse(boolean0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Stack<TextStyle> stack0 = new Stack<TextStyle>();
      TextStyle textStyle0 = TextStyle.NARROW;
      stack0.add(textStyle0);
      TextStyle[] textStyleArray0 = new TextStyle[1];
      CollectionUtils.addAll((Collection<TextStyle>) stack0, textStyleArray0);
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) stack0, (Comparable<TextStyle>[]) textStyleArray0);
      assertEquals(2, stack0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashSet<Month> hashSet0 = new HashSet<Month>();
      Collection<Month> collection0 = CollectionUtils.intersection((Iterable<? extends Month>) hashSet0, (Iterable<? extends Month>) hashSet0);
      Collection<Month> collection1 = CollectionUtils.subtract((Iterable<? extends Month>) hashSet0, (Iterable<? extends Month>) collection0);
      assertNotSame(collection0, collection1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Class<TextStyle> class0 = TextStyle.class;
      EnumSet<TextStyle> enumSet0 = EnumSet.allOf(class0);
      Collection<Object> collection0 = CollectionUtils.disjunction((Iterable<?>) linkedHashSet0, (Iterable<?>) enumSet0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CollectionUtils.checkIndexBounds(3);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LinkedHashSet<LinkedList<TextStyle>> linkedHashSet0 = new LinkedHashSet<LinkedList<TextStyle>>();
      LinkedList<TextStyle> linkedList0 = new LinkedList<TextStyle>();
      linkedHashSet0.add(linkedList0);
      int int0 = CollectionUtils.size(linkedHashSet0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LinkedList<TextStyle> linkedList0 = new LinkedList<TextStyle>();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(linkedList0);
      Collection<Object> collection0 = CollectionUtils.select((Iterable<?>) linkedList0, (Predicate<? super Object>) equalPredicate0, (Collection<Object>) null, (Collection<Object>) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Stack<TextStyle> stack0 = new Stack<TextStyle>();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<?>) stack0, (Collection<?>) stack0, (Equator<? super Object>) defaultEquator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>();
      Map<Object, Integer> map0 = CollectionUtils.getCardinalityMap((Iterable<?>) hashSet0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.addFirst((Integer) null);
      Object object0 = CollectionUtils.get((Object) linkedList0, 0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.FULL_STANDALONE;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0, textStyle0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      List<TextStyle> list0 = CollectionUtils.collate((Iterable<? extends TextStyle>) enumSet0, (Iterable<? extends TextStyle>) enumSet0, (Comparator<? super TextStyle>) comparator0);
      CollectionUtils.get((Object) list0, 0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.SHORT_STANDALONE;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0, textStyle0);
      Iterator<TextStyle> iterator0 = enumSet0.iterator();
      ExceptionClosure<TextStyle> exceptionClosure0 = (ExceptionClosure<TextStyle>) mock(ExceptionClosure.class, new ViolatedAssumptionAnswer());
      TextStyle textStyle1 = CollectionUtils.forAllButLastDo(iterator0, exceptionClosure0);
      assertEquals(TextStyle.SHORT_STANDALONE, textStyle1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.NARROW_STANDALONE;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0, textStyle0, textStyle0, textStyle0);
      NOPClosure<TextStyle> nOPClosure0 = (NOPClosure<TextStyle>) mock(NOPClosure.class, new ViolatedAssumptionAnswer());
      TextStyle textStyle1 = CollectionUtils.forAllButLastDo((Iterable<TextStyle>) enumSet0, nOPClosure0);
      assertEquals(TextStyle.NARROW_STANDALONE, textStyle1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PriorityQueue<ChronoUnit> priorityQueue0 = new PriorityQueue<ChronoUnit>();
      ChronoUnit chronoUnit0 = ChronoUnit.CENTURIES;
      priorityQueue0.add(chronoUnit0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>(priorityQueue0);
      Object object0 = CollectionUtils.find((Iterable<Object>) linkedList0, (Predicate<? super Object>) uniquePredicate0);
      assertSame(object0, chronoUnit0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      TextStyle textStyle0 = TextStyle.SHORT_STANDALONE;
      EnumSet<TextStyle> enumSet0 = EnumSet.range(textStyle0, textStyle0);
      boolean boolean0 = CollectionUtils.filterInverse((Iterable<TextStyle>) enumSet0, (Predicate<? super TextStyle>) uniquePredicate0);
      assertFalse(enumSet0.contains(textStyle0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Vector<TextStyle> vector0 = new Vector<TextStyle>();
      TextStyle textStyle0 = TextStyle.SHORT_STANDALONE;
      vector0.add(textStyle0);
      TextStyle textStyle1 = CollectionUtils.extractSingleton((Collection<TextStyle>) vector0);
      assertTrue(vector0.contains(textStyle1));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.NARROW;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0);
      UniquePredicate<TextStyle> uniquePredicate0 = new UniquePredicate<TextStyle>();
      int int0 = CollectionUtils.countMatches((Iterable<TextStyle>) enumSet0, (Predicate<? super TextStyle>) uniquePredicate0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PriorityQueue<Closure<Integer>> priorityQueue0 = new PriorityQueue<Closure<Integer>>();
      Iterator<Closure<Integer>> iterator0 = priorityQueue0.iterator();
      Transformer<Object, Integer> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Integer>) null);
      Collection<Integer> collection0 = CollectionUtils.collect((Iterator<? extends Closure<Integer>>) iterator0, (Transformer<? super Closure<Integer>, ? extends Integer>) transformer0, (Collection<Integer>) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.CENTURIES;
      EnumSet<ChronoUnit> enumSet0 = EnumSet.of(chronoUnit0, chronoUnit0, chronoUnit0);
      int int0 = CollectionUtils.cardinality(chronoUnit0, (Iterable<? super ChronoUnit>) enumSet0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LinkedList<TextStyle> linkedList0 = new LinkedList<TextStyle>();
      TextStyle[] textStyleArray0 = new TextStyle[0];
      boolean boolean0 = CollectionUtils.addAll((Collection<TextStyle>) linkedList0, textStyleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TreeSet<Boolean> treeSet0 = new TreeSet<Boolean>();
      Stack<Boolean> stack0 = new Stack<Boolean>();
      ListIterator<Boolean> listIterator0 = stack0.listIterator();
      boolean boolean0 = CollectionUtils.addAll((Collection<Boolean>) treeSet0, (Iterator<? extends Boolean>) listIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.unmodifiableCollection((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        CollectionUtils.union((Iterable<?>) vector0, (Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // b
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Transformer<DayOfWeek, DayOfWeek> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        CollectionUtils.transformingCollection((Collection<DayOfWeek>) null, (Transformer<? super DayOfWeek, ? extends DayOfWeek>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.synchronizedCollection((Collection<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashSet<LinkedList<ChronoField>> hashSet0 = new HashSet<LinkedList<ChronoField>>(51);
      LinkedList<ChronoField> linkedList0 = new LinkedList<ChronoField>();
      hashSet0.add(linkedList0);
      Predicate<LinkedList<ChronoField>> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        CollectionUtils.subtract((Iterable<? extends LinkedList<ChronoField>>) hashSet0, (Iterable<? extends LinkedList<ChronoField>>) hashSet0, predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Stack<TextStyle> stack0 = new Stack<TextStyle>();
      // Undeclared exception!
      try { 
        CollectionUtils.subtract((Iterable<? extends Comparable<TextStyle>>) stack0, (Iterable<? extends Comparable<TextStyle>>) stack0, (Predicate<Comparable<TextStyle>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // p
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.SHORT;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      // Undeclared exception!
      try { 
        CollectionUtils.selectRejected((Iterable<?>) enumSet0, (Predicate<? super Object>) orPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer(3364);
      linkedHashSet0.add(integer0);
      EqualPredicate<Integer> equalPredicate0 = new EqualPredicate<Integer>((Integer) null);
      // Undeclared exception!
      try { 
        CollectionUtils.selectRejected((Iterable<? extends Integer>) linkedHashSet0, (Predicate<? super Integer>) equalPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.EqualPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Stack<TextStyle> stack0 = new Stack<TextStyle>();
      TextStyle textStyle0 = TextStyle.NARROW;
      stack0.add(textStyle0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        CollectionUtils.select((Iterable<? extends TextStyle>) stack0, (Predicate<? super TextStyle>) predicate0, (Collection<Object>) linkedList0, (Collection<Object>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      PriorityQueue<Boolean> priorityQueue0 = new PriorityQueue<Boolean>();
      PredicateTransformer<TextStyle> predicateTransformer0 = new PredicateTransformer<TextStyle>(instanceofPredicate0);
      TextStyle textStyle0 = TextStyle.NARROW;
      Boolean boolean0 = predicateTransformer0.transform(textStyle0);
      priorityQueue0.add(boolean0);
      // Undeclared exception!
      try { 
        CollectionUtils.select((Iterable<? extends Boolean>) priorityQueue0, (Predicate<? super Boolean>) instanceofPredicate0, (Collection<Boolean>) priorityQueue0, (Collection<Boolean>) priorityQueue0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer(3328);
      linkedHashSet0.add(integer0);
      Predicate<Integer> predicate0 = NullPredicate.nullPredicate();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      FixedSizeList<Integer> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Integer>) linkedList0);
      // Undeclared exception!
      try { 
        CollectionUtils.select((Iterable<? extends Integer>) linkedHashSet0, (Predicate<? super Integer>) predicate0, (Collection<Integer>) linkedHashSet0, (Collection<Integer>) fixedSizeList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // List is fixed size
         //
         verifyException("org.apache.commons.collections4.list.FixedSizeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<TextStyle> class0 = TextStyle.class;
      EnumSet<TextStyle> enumSet0 = EnumSet.noneOf(class0);
      TextStyle textStyle0 = TextStyle.FULL_STANDALONE;
      enumSet0.add(textStyle0);
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        CollectionUtils.select((Iterable<?>) enumSet0, (Predicate<? super Object>) instanceofPredicate0, (Collection<Object>) null, (Collection<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.FULL;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0, textStyle0, textStyle0, textStyle0);
      CircularFifoQueue<Object> circularFifoQueue0 = new CircularFifoQueue<Object>(enumSet0);
      Predicate<TextStyle> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        CollectionUtils.select((Iterable<? extends TextStyle>) enumSet0, (Predicate<? super TextStyle>) predicate0, (Collection<Object>) circularFifoQueue0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.NARROW_STANDALONE;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0, textStyle0, textStyle0);
      Transformer<TextStyle, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      TransformerPredicate<TextStyle> transformerPredicate0 = new TransformerPredicate<TextStyle>(transformer0);
      // Undeclared exception!
      try { 
        CollectionUtils.select((Iterable<? extends TextStyle>) enumSet0, (Predicate<? super TextStyle>) transformerPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.reverseArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // array
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.retainAll((Collection<LinkedList<Object>>) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      // Undeclared exception!
      try { 
        CollectionUtils.retainAll((Iterable<Locale.Category>) null, (Iterable<? extends Locale.Category>) null, (Equator<? super Locale.Category>) defaultEquator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.removeRange((Collection<Object>) null, 1, 1003);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.removeCount((Collection<Integer>) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.removeAll((Collection<TextStyle>) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.NARROW;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0);
      // Undeclared exception!
      try { 
        CollectionUtils.removeAll((Iterable<TextStyle>) enumSet0, (Iterable<? extends TextStyle>) enumSet0, (Equator<? super TextStyle>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // equator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Stack<TextStyle> stack0 = new Stack<TextStyle>();
      // Undeclared exception!
      try { 
        CollectionUtils.predicatedCollection((Collection<TextStyle>) stack0, (Predicate<? super TextStyle>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>(0);
      Collection<Predicate<Object>> collection0 = CollectionUtils.intersection((Iterable<? extends Predicate<Object>>) arrayList0, (Iterable<? extends Predicate<Object>>) arrayList0);
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) collection0);
      ChronoField chronoField0 = ChronoField.CLOCK_HOUR_OF_AMPM;
      EnumSet<ChronoField> enumSet0 = EnumSet.of(chronoField0, chronoField0, chronoField0, chronoField0);
      // Undeclared exception!
      try { 
        CollectionUtils.predicatedCollection((Collection<ChronoField>) enumSet0, (Predicate<? super ChronoField>) predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'ClockHourOfAmPm' - Predicate 'org.apache.commons.collections4.functors.FalsePredicate@3' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.permutations((Collection<TextStyle>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.maxSize((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Stack<Predicate<Integer>> stack0 = new Stack<Predicate<Integer>>();
      // Undeclared exception!
      try { 
        CollectionUtils.isSubCollection(stack0, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // b
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashSet<Month> hashSet0 = new HashSet<Month>();
      // Undeclared exception!
      try { 
        CollectionUtils.isProperSubCollection((Collection<?>) null, hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // a
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.isFull((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashSet<Month> hashSet0 = new HashSet<Month>();
      // Undeclared exception!
      try { 
        CollectionUtils.isEqualCollection((Collection<? extends Month>) hashSet0, (Collection<? extends Month>) hashSet0, (Equator<? super Month>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // equator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.isEqualCollection((Collection<?>) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // a
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.intersection((Iterable<? extends TextStyle>) null, (Iterable<? extends TextStyle>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // a
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.getCardinalityMap((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coll
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.get((Map<NOPClosure<Object>, Transformer<TextStyle, Transformer>>) null, (-2655));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LinkedList<TextStyle> linkedList0 = new LinkedList<TextStyle>();
      ListIterator<TextStyle> listIterator0 = linkedList0.listIterator();
      TextStyle textStyle0 = TextStyle.FULL_STANDALONE;
      linkedList0.add(textStyle0);
      // Undeclared exception!
      try { 
        CollectionUtils.get((Iterator<TextStyle>) listIterator0, 5);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      Iterator<Object> iterator0 = arrayDeque0.descendingIterator();
      // Undeclared exception!
      try { 
        CollectionUtils.get(iterator0, 1743);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1743
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LinkedList<TextStyle> linkedList0 = new LinkedList<TextStyle>();
      TextStyle textStyle0 = TextStyle.NARROW_STANDALONE;
      Iterator<TextStyle> iterator0 = linkedList0.iterator();
      linkedList0.add(textStyle0);
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) iterator0, 14);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) linkedList0, 2147483645);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483645, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Stack<TextStyle> stack0 = new Stack<TextStyle>();
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) stack0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 2
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.get((Iterable<Object>) null, 5919);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TreeSet<TextStyle> treeSet0 = new TreeSet<TextStyle>((Comparator<? super TextStyle>) null);
      // Undeclared exception!
      try { 
        CollectionUtils.get((Iterable<TextStyle>) treeSet0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -1
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Vector<ComparatorPredicate.Criterion> vector0 = new Vector<ComparatorPredicate.Criterion>();
      // Undeclared exception!
      try { 
        CollectionUtils.get((Iterable<ComparatorPredicate.Criterion>) vector0, 2575);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 2575
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ArrayDeque<Transformer<Locale.Category, Integer>> arrayDeque0 = new ArrayDeque<Transformer<Locale.Category, Integer>>();
      Factory<Integer> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Locale.Category, Integer> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Integer>) factory0);
      arrayDeque0.offerFirst(transformer0);
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>((Closure<? super Object>[]) null);
      // Undeclared exception!
      try { 
        CollectionUtils.forAllDo((Iterable<Transformer<Locale.Category, Integer>>) arrayDeque0, (Closure<Object>) chainedClosure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.ChainedClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(100);
      linkedList0.add(integer0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        CollectionUtils.find((Iterable<Integer>) linkedList0, (Predicate<? super Integer>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.extractSingleton((Collection<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.NARROW;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0);
      Predicate<TextStyle> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        CollectionUtils.exists((Iterable<TextStyle>) enumSet0, (Predicate<? super TextStyle>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.NARROW;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0);
      TransformerPredicate<TextStyle> transformerPredicate0 = new TransformerPredicate<TextStyle>((Transformer<? super TextStyle, Boolean>) null);
      // Undeclared exception!
      try { 
        CollectionUtils.exists((Iterable<TextStyle>) enumSet0, (Predicate<? super TextStyle>) transformerPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.disjunction((Iterable<?>) null, (Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // a
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>(1);
      Integer integer0 = new Integer(0);
      hashSet0.add(integer0);
      Predicate<Integer> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        CollectionUtils.countMatches((Iterable<Integer>) hashSet0, (Predicate<? super Integer>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Comparable<TextStyle>[] comparableArray0 = (Comparable<TextStyle>[]) Array.newInstance(Comparable.class, 10);
      // Undeclared exception!
      try { 
        CollectionUtils.containsAny((Collection<?>) null, comparableArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coll1
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.containsAny((Collection<?>) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coll1
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.containsAll((Collection<?>) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coll1
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.FULL_STANDALONE;
      LinkedList<TextStyle> linkedList0 = new LinkedList<TextStyle>();
      linkedList0.add(textStyle0);
      Iterator<TextStyle> iterator0 = linkedList0.iterator();
      ChainedTransformer<TextStyle> chainedTransformer0 = new ChainedTransformer<TextStyle>((Transformer<? super TextStyle, ? extends TextStyle>[]) null);
      // Undeclared exception!
      try { 
        CollectionUtils.collect(iterator0, (Transformer<? super TextStyle, ? extends TextStyle>) chainedTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.ChainedTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LinkedHashSet<LinkedList<TextStyle>> linkedHashSet0 = new LinkedHashSet<LinkedList<TextStyle>>();
      LinkedList<TextStyle> linkedList0 = new LinkedList<TextStyle>();
      linkedHashSet0.add(linkedList0);
      HashMap<Object, TextStyle> hashMap0 = new HashMap<Object, TextStyle>();
      Transformer<Object, TextStyle> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends TextStyle>) hashMap0);
      // Undeclared exception!
      try { 
        CollectionUtils.collect((Iterable<?>) linkedHashSet0, (Transformer<? super Object, ?>) transformer0, (Collection<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LinkedList<TextStyle> linkedList0 = new LinkedList<TextStyle>();
      TextStyle textStyle0 = TextStyle.NARROW;
      linkedList0.add(textStyle0);
      Transformer<TextStyle, TextStyle> transformer0 = InvokerTransformer.invokerTransformer("Dr/B\"-K>|6C=vPH");
      // Undeclared exception!
      try { 
        CollectionUtils.collect((Iterable<TextStyle>) linkedList0, (Transformer<? super TextStyle, ?>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Dr/B\"-K>|6C=vPH' on 'class java.time.format.TextStyle' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.collate((Iterable<? extends DayOfWeek>) null, (Iterable<? extends DayOfWeek>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterableA
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PriorityQueue<TextStyle> priorityQueue0 = new PriorityQueue<TextStyle>();
      // Undeclared exception!
      try { 
        CollectionUtils.collate((Iterable<? extends TextStyle>) priorityQueue0, (Iterable<? extends TextStyle>) priorityQueue0, (Comparator<? super TextStyle>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // comparator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.checkIndexBounds((-917));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -917
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.NARROW;
      // Undeclared exception!
      try { 
        CollectionUtils.cardinality(textStyle0, (Iterable<? super TextStyle>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LinkedHashSet<LinkedList<TextStyle>> linkedHashSet0 = new LinkedHashSet<LinkedList<TextStyle>>();
      LinkedList<TextStyle> linkedList0 = new LinkedList<TextStyle>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<LinkedList<TextStyle>> list0 = CollectionUtils.collate((Iterable<? extends LinkedList<TextStyle>>) linkedHashSet0, (Iterable<? extends LinkedList<TextStyle>>) linkedHashSet0, (Comparator<? super LinkedList<TextStyle>>) comparator0);
      FixedSizeList<LinkedList<TextStyle>> fixedSizeList0 = FixedSizeList.fixedSizeList(list0);
      // Undeclared exception!
      try { 
        CollectionUtils.addIgnoreNull((Collection<LinkedList<TextStyle>>) fixedSizeList0, linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // List is fixed size
         //
         verifyException("org.apache.commons.collections4.list.FixedSizeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Month month0 = Month.SEPTEMBER;
      // Undeclared exception!
      try { 
        CollectionUtils.addIgnoreNull((Collection<Month>) null, month0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Collection<TextStyle> collection0 = CollectionUtils.emptyCollection();
      TextStyle[] textStyleArray0 = new TextStyle[6];
      // Undeclared exception!
      try { 
        CollectionUtils.addAll(collection0, textStyleArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedHashSet<TextStyle> linkedHashSet0 = new LinkedHashSet<TextStyle>();
      Collection<TextStyle> collection0 = CollectionUtils.unmodifiableCollection((Collection<? extends TextStyle>) linkedHashSet0);
      TextStyle[] textStyleArray0 = new TextStyle[7];
      // Undeclared exception!
      try { 
        CollectionUtils.addAll(collection0, textStyleArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<Object>) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      PriorityQueue<Boolean> priorityQueue0 = new PriorityQueue<Boolean>();
      Iterator<Boolean> iterator0 = priorityQueue0.iterator();
      PredicateTransformer<TextStyle> predicateTransformer0 = new PredicateTransformer<TextStyle>(instanceofPredicate0);
      TextStyle textStyle0 = TextStyle.NARROW;
      Boolean boolean0 = predicateTransformer0.transform(textStyle0);
      priorityQueue0.add(boolean0);
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<Boolean>) priorityQueue0, (Iterator<? extends Boolean>) iterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PriorityQueue<TextStyle> priorityQueue0 = new PriorityQueue<TextStyle>();
      Iterator<TextStyle> iterator0 = priorityQueue0.iterator();
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<TextStyle>) null, (Iterator<? extends TextStyle>) iterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CollectionUtils.emptyCollection();
      ResolverStyle[] resolverStyleArray0 = new ResolverStyle[5];
      ResolverStyle resolverStyle0 = ResolverStyle.LENIENT;
      resolverStyleArray0[1] = resolverStyle0;
      ResolverStyle resolverStyle1 = ResolverStyle.SMART;
      resolverStyleArray0[2] = resolverStyle1;
      ResolverStyle resolverStyle2 = ResolverStyle.SMART;
      resolverStyleArray0[3] = resolverStyle2;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) resolverStyle0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      ExceptionTransformer.exceptionTransformer();
      Stack<Object> stack0 = new Stack<Object>();
      stack0.elements();
      Enumeration<TextStyle> enumeration0 = (Enumeration<TextStyle>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      boolean boolean0 = CollectionUtils.addAll((Collection<Object>) stack0, (Enumeration<?>) enumeration0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      FixedSizeList<Integer> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Integer>) linkedList0);
      Enumeration<Integer> enumeration0 = (Enumeration<Integer>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<Integer>) fixedSizeList0, (Enumeration<? extends Integer>) enumeration0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // List is fixed size
         //
         verifyException("org.apache.commons.collections4.list.FixedSizeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<Object>) stack0, (Enumeration<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // enumeration
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.NARROW;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      List<Object> list0 = CollectionUtils.collate((Iterable<?>) enumSet0, (Iterable<?>) enumSet0, (Comparator<? super Object>) comparator0, true);
      FixedSizeList<Object> fixedSizeList0 = FixedSizeList.fixedSizeList(list0);
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<Object>) fixedSizeList0, (Iterable<?>) enumSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // List is fixed size
         //
         verifyException("org.apache.commons.collections4.list.FixedSizeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0);
      List<Integer> list0 = CollectionUtils.collate((Iterable<? extends Integer>) serviceLoader0, (Iterable<? extends Integer>) serviceLoader0);
      // Undeclared exception!
      try { 
        CollectionUtils.removeCount((Collection<Integer>) list0, (-3501), (-3501));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The start index can't be less than 0.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CircularFifoQueue<TextStyle> circularFifoQueue0 = new CircularFifoQueue<TextStyle>();
      TextStyle textStyle0 = TextStyle.SHORT_STANDALONE;
      TextStyle textStyle1 = TextStyle.NARROW;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0, textStyle0, textStyle0, textStyle1);
      Comparator<TextStyle> comparator0 = (Comparator<TextStyle>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<TextStyle> list0 = CollectionUtils.collate((Iterable<? extends TextStyle>) circularFifoQueue0, (Iterable<? extends TextStyle>) enumSet0, (Comparator<? super TextStyle>) comparator0, false);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<TextStyle> class0 = TextStyle.class;
      ServiceLoader<TextStyle> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      LinkedList<TextStyle> linkedList0 = new LinkedList<TextStyle>();
      Comparator<TextStyle> comparator0 = (Comparator<TextStyle>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<TextStyle> list0 = CollectionUtils.collate((Iterable<? extends TextStyle>) linkedList0, (Iterable<? extends TextStyle>) serviceLoader0, (Comparator<? super TextStyle>) comparator0, false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Integer> list0 = CollectionUtils.collate((Iterable<? extends Integer>) serviceLoader0, (Iterable<? extends Integer>) serviceLoader0, (Comparator<? super Integer>) comparator0, true);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<ThaiBuddhistEra> class0 = ThaiBuddhistEra.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<ThaiBuddhistEra> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      Collection<ThaiBuddhistEra> collection0 = CollectionUtils.intersection((Iterable<? extends ThaiBuddhistEra>) serviceLoader0, (Iterable<? extends ThaiBuddhistEra>) serviceLoader0);
      boolean boolean0 = CollectionUtils.addAll(collection0, (Iterable<? extends ThaiBuddhistEra>) serviceLoader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.FULL_STANDALONE;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0, textStyle0);
      Comparator<TextStyle> comparator0 = (Comparator<TextStyle>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2526).when(comparator0).compare(any(java.time.format.TextStyle.class) , any(java.time.format.TextStyle.class));
      List<TextStyle> list0 = CollectionUtils.collate((Iterable<? extends TextStyle>) enumSet0, (Iterable<? extends TextStyle>) enumSet0, (Comparator<? super TextStyle>) comparator0);
      ArrayList<TextStyle> arrayList0 = new ArrayList<TextStyle>();
      Collection<Object> collection0 = CollectionUtils.union((Iterable<?>) arrayList0, (Iterable<?>) list0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = CollectionUtils.addAll((Collection<Object>) linkedList0, (Iterable<?>) collection0);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LinkedList<TextStyle> linkedList0 = new LinkedList<TextStyle>();
      ConstantTransformer<Object, LinkedList<TextStyle>> constantTransformer0 = new ConstantTransformer<Object, LinkedList<TextStyle>>(linkedList0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      TextStyle textStyle0 = TextStyle.SHORT;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0, textStyle0, textStyle0, textStyle0, textStyle0);
      Iterator<TextStyle> iterator0 = enumSet0.iterator();
      CollectionUtils.collect((Iterator<? extends TextStyle>) iterator0, (Transformer<? super TextStyle, ? extends LinkedList<TextStyle>>) constantTransformer0, linkedList1);
      assertEquals(1, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PriorityQueue<Closure<Integer>> priorityQueue0 = new PriorityQueue<Closure<Integer>>();
      Iterator<Closure<Integer>> iterator0 = priorityQueue0.iterator();
      Transformer<Closure<Integer>, Integer> transformer0 = MapTransformer.mapTransformer((Map<? super Closure<Integer>, ? extends Integer>) null);
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      Predicate<Integer> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Integer>>) hashSet0);
      Collection<Integer> collection0 = CollectionUtils.selectRejected((Iterable<? extends Integer>) serviceLoader0, (Predicate<? super Integer>) predicate0);
      Collection<Integer> collection1 = CollectionUtils.collect((Iterator<? extends Closure<Integer>>) iterator0, (Transformer<? super Closure<Integer>, ? extends Integer>) transformer0, collection0);
      assertSame(collection0, collection1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<TextStyle> iterator0 = (Iterator<TextStyle>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      LinkedList<Object> linkedList1 = CollectionUtils.collect((Iterator<? extends TextStyle>) iterator0, (Transformer<? super TextStyle, ? extends LinkedList<TextStyle>>) null, linkedList0);
      assertSame(linkedList0, linkedList1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Transformer<Object, Object> transformer0 = CloneTransformer.cloneTransformer();
      Collection<Object> collection0 = CollectionUtils.collect((Iterable<?>) null, (Transformer<? super Object, ?>) transformer0, (Collection<Object>) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>(0);
      Collection<Predicate<Object>> collection0 = CollectionUtils.intersection((Iterable<? extends Predicate<Object>>) arrayList0, (Iterable<? extends Predicate<Object>>) arrayList0);
      Comparator<Predicate<Object>> comparator0 = (Comparator<Predicate<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Predicate<Object>> list0 = CollectionUtils.collate((Iterable<? extends Predicate<Object>>) collection0, (Iterable<? extends Predicate<Object>>) collection0, (Comparator<? super Predicate<Object>>) comparator0);
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) list0);
      ChronoField chronoField0 = ChronoField.CLOCK_HOUR_OF_AMPM;
      EnumSet<ChronoField> enumSet0 = EnumSet.of(chronoField0, chronoField0, chronoField0, chronoField0);
      NullIsExceptionPredicate<ChronoField> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<ChronoField>(predicate0);
      // Undeclared exception!
      try { 
        CollectionUtils.selectRejected((Iterable<? extends ChronoField>) enumSet0, (Predicate<? super ChronoField>) nullIsExceptionPredicate0, (LinkedList<ChronoField>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      LinkedList<ChronoField> linkedList0 = CollectionUtils.selectRejected((Iterable<? extends ChronoField>) null, (Predicate<? super ChronoField>) predicate0, (LinkedList<ChronoField>) null);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.NARROW_STANDALONE;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0);
      Comparator<TextStyle> comparator0 = (Comparator<TextStyle>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(comparator0).compare(any(java.time.format.TextStyle.class) , any(java.time.format.TextStyle.class));
      List<TextStyle> list0 = CollectionUtils.collate((Iterable<? extends TextStyle>) enumSet0, (Iterable<? extends TextStyle>) enumSet0, (Comparator<? super TextStyle>) comparator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<TextStyle> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super TextStyle>) uniquePredicate0);
      Collection<TextStyle> collection0 = CollectionUtils.selectRejected((Iterable<? extends TextStyle>) enumSet0, (Predicate<? super TextStyle>) predicate0, (Collection<TextStyle>) list0);
      assertTrue(collection0.contains(textStyle0));
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Collection<TextStyle> collection0 = CollectionUtils.emptyCollection();
      Collection<TextStyle> collection1 = CollectionUtils.selectRejected((Iterable<? extends TextStyle>) collection0, (Predicate<? super TextStyle>) null, collection0);
      assertSame(collection0, collection1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.NARROW_STANDALONE;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0);
      Comparator<TextStyle> comparator0 = (Comparator<TextStyle>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(comparator0).compare(any(java.time.format.TextStyle.class) , any(java.time.format.TextStyle.class));
      List<TextStyle> list0 = CollectionUtils.collate((Iterable<? extends TextStyle>) enumSet0, (Iterable<? extends TextStyle>) enumSet0, (Comparator<? super TextStyle>) comparator0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      CircularFifoQueue<Object> circularFifoQueue0 = new CircularFifoQueue<Object>(list0);
      CollectionUtils.select((Iterable<? extends TextStyle>) list0, (Predicate<? super TextStyle>) predicate0, (Collection<Object>) circularFifoQueue0);
      assertEquals(2, circularFifoQueue0.size());
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-464));
      EqualPredicate<Integer> equalPredicate0 = new EqualPredicate<Integer>(integer0);
      linkedList0.addLast(integer0);
      // Undeclared exception!
      try { 
        CollectionUtils.select((Iterable<? extends Integer>) linkedList0, (Predicate<? super Integer>) equalPredicate0, (Collection<Integer>) linkedList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashSet<Month> hashSet0 = new HashSet<Month>();
      Month month0 = Month.APRIL;
      hashSet0.add(month0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      CircularFifoQueue<Object> circularFifoQueue0 = new CircularFifoQueue<Object>(hashSet0);
      Collection<Object> collection0 = CollectionUtils.select((Iterable<? extends TextStyle>) null, (Predicate<? super TextStyle>) predicate0, (Collection<Object>) circularFifoQueue0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LinkedList<TextStyle> linkedList0 = new LinkedList<TextStyle>();
      Transformer<TextStyle, Integer> transformer0 = ConstantTransformer.nullTransformer();
      Collection<Integer> collection0 = CollectionUtils.collect((Iterable<TextStyle>) linkedList0, (Transformer<? super TextStyle, ? extends Integer>) transformer0);
      Collection<Integer> collection1 = CollectionUtils.select((Iterable<? extends Integer>) collection0, (Predicate<? super Integer>) null, collection0);
      assertSame(collection0, collection1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<TextStyle> class0 = TextStyle.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      boolean boolean0 = CollectionUtils.filter((Iterable<ChronoUnit>) null, (Predicate<? super ChronoUnit>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.FULL_STANDALONE;
      LinkedHashSet<LinkedList<TextStyle>> linkedHashSet0 = new LinkedHashSet<LinkedList<TextStyle>>();
      LinkedList<TextStyle> linkedList0 = new LinkedList<TextStyle>();
      linkedHashSet0.add(linkedList0);
      linkedList0.add(textStyle0);
      linkedHashSet0.add(linkedList0);
      Map<Object, Integer> map0 = CollectionUtils.getCardinalityMap((Iterable<?>) linkedHashSet0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Month month0 = Month.JULY;
      EnumSet<Month> enumSet0 = EnumSet.of(month0);
      Predicate<Comparable<Month>> predicate0 = EqualPredicate.equalPredicate((Comparable<Month>) month0);
      Collection<Comparable<Month>> collection0 = CollectionUtils.subtract((Iterable<? extends Comparable<Month>>) enumSet0, (Iterable<? extends Comparable<Month>>) enumSet0, predicate0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Collection<Object> collection0 = CollectionUtils.emptyCollection();
      // Undeclared exception!
      try { 
        CollectionUtils.extractSingleton(collection0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can extract singleton only when collection size == 1
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Vector<LinkedList<Object>> vector0 = new Vector<LinkedList<Object>>();
      vector0.add((LinkedList<Object>) null);
      LinkedList<Object> linkedList0 = CollectionUtils.extractSingleton((Collection<LinkedList<Object>>) vector0);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.NARROW;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      TextStyle textStyle1 = TextStyle.FULL_STANDALONE;
      EnumSet<TextStyle> enumSet1 = EnumSet.of(textStyle1);
      Collection<TextStyle> collection0 = CollectionUtils.removeAll((Iterable<TextStyle>) enumSet1, (Iterable<? extends TextStyle>) enumSet0, (Equator<? super TextStyle>) defaultEquator0);
      assertTrue(collection0.contains(textStyle1));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      // Undeclared exception!
      try { 
        CollectionUtils.removeCount((Collection<Object>) arrayDeque0, 5, 5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The sum of start index and count can't be greater than the size of collection.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CircularFifoQueue<Predicate<Object>> circularFifoQueue0 = new CircularFifoQueue<Predicate<Object>>();
      // Undeclared exception!
      try { 
        CollectionUtils.removeCount((Collection<Predicate<Object>>) circularFifoQueue0, 1, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The count can't be less than 0.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Vector<LinkedList<ThaiBuddhistEra>> vector0 = new Vector<LinkedList<ThaiBuddhistEra>>();
      Collection<LinkedList<ThaiBuddhistEra>> collection0 = CollectionUtils.removeRange((Collection<LinkedList<ThaiBuddhistEra>>) vector0, 0, 0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        CollectionUtils.removeRange((Collection<Object>) stack0, 455, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end index can't be less than the start index.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Stack<TextStyle> stack0 = new Stack<TextStyle>();
      TextStyle textStyle0 = TextStyle.SHORT;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0, textStyle0, textStyle0);
      DefaultEquator<TextStyle> defaultEquator0 = DefaultEquator.defaultEquator();
      Collection<TextStyle> collection0 = CollectionUtils.retainAll((Iterable<TextStyle>) enumSet0, (Iterable<? extends TextStyle>) stack0, (Equator<? super TextStyle>) defaultEquator0);
      assertFalse(collection0.contains(textStyle0));
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.SHORT_STANDALONE;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0, textStyle0, textStyle0);
      DefaultEquator<TextStyle> defaultEquator0 = DefaultEquator.defaultEquator();
      Collection<TextStyle> collection0 = CollectionUtils.retainAll((Iterable<TextStyle>) enumSet0, (Iterable<? extends TextStyle>) enumSet0, (Equator<? super TextStyle>) defaultEquator0);
      assertTrue(collection0.contains(textStyle0));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FormatStyle formatStyle0 = FormatStyle.MEDIUM;
      FormatStyle formatStyle1 = FormatStyle.SHORT;
      EnumSet<FormatStyle> enumSet0 = EnumSet.of(formatStyle0, formatStyle1, formatStyle1);
      List<FormatStyle> list0 = CollectionUtils.collate((Iterable<? extends FormatStyle>) enumSet0, (Iterable<? extends FormatStyle>) enumSet0, false);
      assertTrue(list0.contains(formatStyle1));
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CircularFifoQueue<ChronoLocalDate> circularFifoQueue0 = new CircularFifoQueue<ChronoLocalDate>();
      Comparator<ChronoLocalDate> comparator0 = ChronoLocalDate.timeLineOrder();
      List<ChronoLocalDate> list0 = CollectionUtils.collate((Iterable<? extends ChronoLocalDate>) circularFifoQueue0, (Iterable<? extends ChronoLocalDate>) circularFifoQueue0, (Comparator<? super ChronoLocalDate>) comparator0, false);
      boolean boolean0 = CollectionUtils.isEmpty(list0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TreeSet<ThaiBuddhistEra> treeSet0 = new TreeSet<ThaiBuddhistEra>();
      Class<ThaiBuddhistEra> class0 = ThaiBuddhistEra.class;
      ServiceLoader<ThaiBuddhistEra> serviceLoader0 = ServiceLoader.load(class0);
      List<ThaiBuddhistEra> list0 = CollectionUtils.collate((Iterable<? extends ThaiBuddhistEra>) treeSet0, (Iterable<? extends ThaiBuddhistEra>) serviceLoader0, true);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CircularFifoQueue<ChronoField> circularFifoQueue0 = new CircularFifoQueue<ChronoField>();
      int int0 = CollectionUtils.maxSize(circularFifoQueue0);
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = CollectionUtils.maxSize(linkedList0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LinkedHashSet<LinkedList<TextStyle>> linkedHashSet0 = new LinkedHashSet<LinkedList<TextStyle>>();
      boolean boolean0 = CollectionUtils.isFull(linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      CollectionUtils.reverseArray(objectArray0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.NARROW;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0);
      boolean boolean0 = CollectionUtils.isNotEmpty(enumSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LinkedList<TextStyle> linkedList0 = new LinkedList<TextStyle>();
      boolean boolean0 = CollectionUtils.isNotEmpty(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = CollectionUtils.isEmpty((Collection<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      LinkedList<TextStyle> linkedList0 = new LinkedList<TextStyle>();
      TextStyle textStyle0 = TextStyle.NARROW_STANDALONE;
      linkedList0.add(textStyle0);
      Iterator<TextStyle> iterator0 = linkedList0.iterator();
      boolean boolean0 = CollectionUtils.sizeIsEmpty(iterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      LinkedList<TextStyle> linkedList0 = new LinkedList<TextStyle>();
      Iterator<TextStyle> iterator0 = linkedList0.iterator();
      boolean boolean0 = CollectionUtils.sizeIsEmpty(iterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = Integer.valueOf(3328);
      linkedHashSet0.add(integer0);
      boolean boolean0 = CollectionUtils.sizeIsEmpty(linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.FULL;
      TextStyle textStyle1 = textStyle0.asStandalone();
      // Undeclared exception!
      try { 
        CollectionUtils.sizeIsEmpty(textStyle1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.time.format.TextStyle
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = CollectionUtils.sizeIsEmpty((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      LinkedList<TextStyle> linkedList0 = new LinkedList<TextStyle>();
      boolean boolean0 = CollectionUtils.sizeIsEmpty(linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
      try { 
        CollectionUtils.size(uniquePredicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: org.apache.commons.collections4.functors.UniquePredicate
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = CollectionUtils.size((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Integer integer0 = new Integer(300);
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) integer0, 300);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.Integer
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      LinkedHashSet<LinkedList<TextStyle>> linkedHashSet0 = new LinkedHashSet<LinkedList<TextStyle>>();
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) linkedHashSet0, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 10
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.SHORT_STANDALONE;
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) textStyle0, (-11));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -11
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) null, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: null
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CircularFifoQueue<Object> circularFifoQueue0 = new CircularFifoQueue<Object>(1000);
      Stack<Object> stack0 = new Stack<Object>();
      Enumeration<Object> enumeration0 = stack0.elements();
      boolean boolean0 = CollectionUtils.addAll((Collection<Object>) circularFifoQueue0, (Enumeration<?>) enumeration0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Stack<Month> stack0 = new Stack<Month>();
      Month month0 = Month.AUGUST;
      boolean boolean0 = CollectionUtils.addIgnoreNull((Collection<Month>) stack0, month0);
      assertEquals(1, stack0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Month month0 = Month.AUGUST;
      Month[] monthArray0 = new Month[0];
      EnumSet<Month> enumSet0 = EnumSet.of(month0, monthArray0);
      boolean boolean0 = CollectionUtils.addIgnoreNull((Collection<Month>) enumSet0, month0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      LinkedHashSet<LinkedList<TextStyle>> linkedHashSet0 = new LinkedHashSet<LinkedList<TextStyle>>();
      boolean boolean0 = CollectionUtils.addIgnoreNull((Collection<LinkedList<TextStyle>>) linkedHashSet0, (LinkedList<TextStyle>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = CollectionUtils.collect((Iterator<? extends TextStyle>) null, (Transformer<? super TextStyle, ? extends LinkedList<TextStyle>>) null, linkedList0);
      assertSame(linkedList1, linkedList0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HashMap<Object, Month> hashMap0 = new HashMap<Object, Month>();
      Transformer<InstanceofPredicate, Month> transformer0 = MapTransformer.mapTransformer((Map<? super InstanceofPredicate, ? extends Month>) hashMap0);
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<InstanceofPredicate> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      Collection<Month> collection0 = CollectionUtils.collect((Iterable<InstanceofPredicate>) serviceLoader0, (Transformer<? super InstanceofPredicate, ? extends Month>) transformer0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      HashMap<Object, Month> hashMap0 = new HashMap<Object, Month>();
      Transformer<InstanceofPredicate, Month> transformer0 = MapTransformer.mapTransformer((Map<? super InstanceofPredicate, ? extends Month>) hashMap0);
      Collection<Month> collection0 = CollectionUtils.collect((Iterable<InstanceofPredicate>) null, (Transformer<? super InstanceofPredicate, ? extends Month>) transformer0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Collection<Integer> collection0 = CollectionUtils.selectRejected((Iterable<? extends Integer>) null, (Predicate<? super Integer>) predicate0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      LinkedList<TextStyle> linkedList0 = new LinkedList<TextStyle>();
      Stack<TextStyle> stack0 = new Stack<TextStyle>();
      TextStyle textStyle0 = TextStyle.SHORT;
      stack0.add(textStyle0);
      Predicate<TextStyle> predicate0 = EqualPredicate.equalPredicate(textStyle0);
      Collection<TextStyle> collection0 = CollectionUtils.select((Iterable<? extends TextStyle>) stack0, (Predicate<? super TextStyle>) predicate0, (Collection<TextStyle>) linkedList0, (Collection<TextStyle>) stack0);
      assertEquals(1, linkedList0.size());
      assertTrue(collection0.contains(textStyle0));
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      CircularFifoQueue<ChronoLocalDate> circularFifoQueue0 = new CircularFifoQueue<ChronoLocalDate>();
      Collection<ChronoLocalDate> collection0 = CollectionUtils.select((Iterable<? extends ChronoLocalDate>) circularFifoQueue0, (Predicate<? super ChronoLocalDate>) null, (Collection<ChronoLocalDate>) circularFifoQueue0, (Collection<ChronoLocalDate>) circularFifoQueue0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Vector<TextStyle> vector0 = new Vector<TextStyle>();
      TextStyle textStyle0 = TextStyle.SHORT_STANDALONE;
      vector0.add(textStyle0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Collection<Object> collection0 = CollectionUtils.select((Iterable<?>) vector0, (Predicate<? super Object>) uniquePredicate0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Stack<TextStyle> stack0 = new Stack<TextStyle>();
      Collection<Object> collection0 = CollectionUtils.select((Iterable<?>) stack0, (Predicate<? super Object>) null);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Collection<Object> collection0 = CollectionUtils.select((Iterable<?>) null, (Predicate<? super Object>) predicate0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer(3328);
      linkedHashSet0.add(integer0);
      Predicate<Integer> predicate0 = NullPredicate.nullPredicate();
      boolean boolean0 = CollectionUtils.matchesAll((Iterable<Integer>) linkedHashSet0, (Predicate<? super Integer>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      TreeSet<TextStyle> treeSet0 = new TreeSet<TextStyle>();
      Collection<Object> collection0 = CollectionUtils.union((Iterable<?>) treeSet0, (Iterable<?>) treeSet0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>(collection0);
      boolean boolean0 = CollectionUtils.matchesAll((Iterable<Object>) priorityQueue0, (Predicate<? super Object>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Stack<TextStyle> stack0 = new Stack<TextStyle>();
      TextStyle textStyle0 = TextStyle.SHORT_STANDALONE;
      stack0.add(textStyle0);
      DefaultEquator<TextStyle> defaultEquator0 = DefaultEquator.defaultEquator();
      Collection<Object> collection0 = CollectionUtils.union((Iterable<?>) stack0, (Iterable<?>) stack0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) defaultEquator0.HASHCODE_NULL, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      boolean boolean0 = CollectionUtils.exists((Iterable<Object>) collection0, (Predicate<? super Object>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Stack<Month> stack0 = new Stack<Month>();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(stack0);
      ArrayDeque<Collection<Object>> arrayDeque0 = new ArrayDeque<Collection<Object>>();
      boolean boolean0 = CollectionUtils.exists((Iterable<Collection<Object>>) arrayDeque0, (Predicate<? super Collection<Object>>) equalPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>(502);
      boolean boolean0 = CollectionUtils.exists((Iterable<Object>) vector0, (Predicate<? super Object>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      HashMap<TextStyle, Object> hashMap0 = new HashMap<TextStyle, Object>();
      Collection<Object> collection0 = hashMap0.values();
      int int0 = CollectionUtils.countMatches((Iterable<Object>) collection0, (Predicate<? super Object>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Stack<TextStyle> stack0 = new Stack<TextStyle>();
      TextStyle textStyle0 = TextStyle.NARROW_STANDALONE;
      stack0.add(textStyle0);
      Transformer<TextStyle, TextStyle> transformer0 = InvokerTransformer.invokerTransformer("a");
      // Undeclared exception!
      try { 
        CollectionUtils.transform((Collection<TextStyle>) stack0, (Transformer<? super TextStyle, ? extends TextStyle>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'a' on 'class java.time.format.TextStyle' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.NARROW;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0);
      HashMap<Predicate<TextStyle>, Transformer<TextStyle, TextStyle>> hashMap0 = new HashMap<Predicate<TextStyle>, Transformer<TextStyle, TextStyle>>();
      Transformer<TextStyle, TextStyle> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super TextStyle>, ? extends Transformer<? super TextStyle, ? extends TextStyle>>) hashMap0);
      // Undeclared exception!
      try { 
        CollectionUtils.transform((Collection<TextStyle>) enumSet0, (Transformer<? super TextStyle, ? extends TextStyle>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Stack<TextStyle> stack0 = new Stack<TextStyle>();
      Transformer<TextStyle, TextStyle> transformer0 = CloneTransformer.cloneTransformer();
      CollectionUtils.transform((Collection<TextStyle>) stack0, (Transformer<? super TextStyle, ? extends TextStyle>) transformer0);
      assertTrue(stack0.empty());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      LinkedList<TextStyle> linkedList0 = new LinkedList<TextStyle>();
      CollectionUtils.transform((Collection<TextStyle>) linkedList0, (Transformer<? super TextStyle, ? extends TextStyle>) null);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Comparator<TextStyle> comparator0 = (Comparator<TextStyle>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<TextStyle> treeSet0 = new TreeSet<TextStyle>(comparator0);
      boolean boolean0 = CollectionUtils.filterInverse((Iterable<TextStyle>) treeSet0, (Predicate<? super TextStyle>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      PriorityQueue<ChronoUnit> priorityQueue0 = new PriorityQueue<ChronoUnit>();
      ChronoUnit chronoUnit0 = ChronoUnit.MILLENNIA;
      priorityQueue0.add(chronoUnit0);
      priorityQueue0.add(chronoUnit0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      boolean boolean0 = CollectionUtils.filter((Iterable<ChronoUnit>) priorityQueue0, (Predicate<? super ChronoUnit>) uniquePredicate0);
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.NARROW;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0, textStyle0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        CollectionUtils.filter((Iterable<TextStyle>) enumSet0, (Predicate<? super TextStyle>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      PriorityQueue<ChronoUnit> priorityQueue0 = new PriorityQueue<ChronoUnit>();
      boolean boolean0 = CollectionUtils.filter((Iterable<ChronoUnit>) priorityQueue0, (Predicate<? super ChronoUnit>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      HashSet<FalsePredicate<TextStyle>> hashSet0 = new HashSet<FalsePredicate<TextStyle>>();
      Iterator<FalsePredicate<TextStyle>> iterator0 = hashSet0.iterator();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(hashSet0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(identityPredicate0, closure0, closure0);
      FalsePredicate<TextStyle> falsePredicate0 = CollectionUtils.forAllButLastDo(iterator0, ifClosure0);
      assertNull(falsePredicate0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Vector<TextStyle> vector0 = new Vector<TextStyle>(2725);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      CollectionUtils.forAllButLastDo((Iterable<TextStyle>) vector0, closure0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      PriorityQueue<Transformer<TextStyle, Object>> priorityQueue0 = new PriorityQueue<Transformer<TextStyle, Object>>();
      Transformer<TextStyle, Object> transformer0 = CollectionUtils.forAllButLastDo((Iterable<Transformer<TextStyle, Object>>) priorityQueue0, (ForClosure<Object>) null);
      assertNull(transformer0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<Locale.FilteringMode> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      ExceptionClosure<Locale.FilteringMode> exceptionClosure0 = CollectionUtils.forAllDo((Iterable<Locale.FilteringMode>) serviceLoader0, (ExceptionClosure<Locale.FilteringMode>) null);
      assertNull(exceptionClosure0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      PriorityQueue<ChronoUnit> priorityQueue0 = new PriorityQueue<ChronoUnit>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>(priorityQueue0);
      CollectionUtils.find((Iterable<Object>) linkedList0, (Predicate<? super Object>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Vector<TextStyle> vector0 = new Vector<TextStyle>(44, (-2964));
      CollectionUtils.find((Iterable<TextStyle>) vector0, (Predicate<? super TextStyle>) null);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Class<TextStyle> class0 = TextStyle.class;
      EnumSet<TextStyle> enumSet0 = EnumSet.allOf(class0);
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<?>) enumSet0, (Collection<?>) linkedHashSet0, (Equator<? super Object>) defaultEquator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.SHORT_STANDALONE;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0);
      TextStyle textStyle1 = TextStyle.FULL;
      EnumSet<TextStyle> enumSet1 = EnumSet.of(textStyle1, textStyle1);
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<?>) enumSet1, (Collection<?>) enumSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.NARROW;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0);
      TextStyle textStyle1 = TextStyle.FULL_STANDALONE;
      Comparator<TextStyle> comparator0 = (Comparator<TextStyle>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.time.format.TextStyle.class) , any(java.time.format.TextStyle.class));
      List<TextStyle> list0 = CollectionUtils.collate((Iterable<? extends TextStyle>) enumSet0, (Iterable<? extends TextStyle>) enumSet0, (Comparator<? super TextStyle>) comparator0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EnumSet<TextStyle> enumSet1 = EnumSet.of(textStyle0, textStyle1);
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<?>) enumSet1, (Collection<?>) list0, (Equator<? super Object>) defaultEquator0);
      assertFalse(boolean0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Vector<TextStyle> vector0 = new Vector<TextStyle>();
      TextStyle textStyle0 = TextStyle.FULL_STANDALONE;
      vector0.add(textStyle0);
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<?>) stack0, (Collection<?>) vector0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.NARROW;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0);
      TextStyle textStyle1 = TextStyle.FULL_STANDALONE;
      TextStyle textStyle2 = TextStyle.FULL;
      EnumSet<TextStyle> enumSet1 = EnumSet.of(textStyle1, textStyle2, textStyle0, textStyle1, textStyle0);
      Comparator<TextStyle> comparator0 = (Comparator<TextStyle>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.time.format.TextStyle.class) , any(java.time.format.TextStyle.class));
      List<TextStyle> list0 = CollectionUtils.collate((Iterable<? extends TextStyle>) enumSet0, (Iterable<? extends TextStyle>) enumSet0, (Comparator<? super TextStyle>) comparator0);
      boolean boolean0 = CollectionUtils.isProperSubCollection(list0, enumSet1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.NARROW_STANDALONE;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      boolean boolean0 = CollectionUtils.isProperSubCollection(priorityQueue0, enumSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      CircularFifoQueue<ChronoLocalDate> circularFifoQueue0 = new CircularFifoQueue<ChronoLocalDate>();
      boolean boolean0 = CollectionUtils.isProperSubCollection(circularFifoQueue0, circularFifoQueue0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      TextStyle textStyle0 = TextStyle.NARROW;
      Stack<TextStyle> stack0 = new Stack<TextStyle>();
      stack0.add(textStyle0);
      boolean boolean0 = CollectionUtils.isSubCollection(stack0, arrayDeque0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Stack<TextStyle> stack0 = new Stack<TextStyle>();
      TextStyle textStyle0 = TextStyle.NARROW;
      stack0.addElement(textStyle0);
      stack0.add(textStyle0);
      boolean boolean0 = CollectionUtils.isSubCollection(stack0, stack0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      HashSet<Month> hashSet0 = new HashSet<Month>();
      Month month0 = Month.APRIL;
      hashSet0.add(month0);
      Month month1 = Month.FEBRUARY;
      EnumSet<Month> enumSet0 = EnumSet.of(month1);
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) enumSet0, (Collection<?>) hashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Stack<TextStyle> stack0 = new Stack<TextStyle>();
      TextStyle textStyle0 = TextStyle.NARROW;
      stack0.add(textStyle0);
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) stack0, (Collection<?>) stack0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2006).when(comparator0).compare(any() , any());
      PriorityQueue<TextStyle> priorityQueue0 = new PriorityQueue<TextStyle>(comparator0);
      TextStyle textStyle0 = TextStyle.FULL_STANDALONE;
      priorityQueue0.add(textStyle0);
      priorityQueue0.add(textStyle0);
      PriorityQueue<DayOfWeek> priorityQueue1 = new PriorityQueue<DayOfWeek>();
      DayOfWeek dayOfWeek0 = DayOfWeek.TUESDAY;
      priorityQueue1.add(dayOfWeek0);
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) priorityQueue1, (Collection<?>) priorityQueue0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Stack<TextStyle> stack0 = new Stack<TextStyle>();
      TextStyle textStyle0 = TextStyle.NARROW;
      stack0.add(textStyle0);
      TextStyle[] textStyleArray0 = new TextStyle[1];
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) stack0, (Comparable<TextStyle>[]) textStyleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.SHORT_STANDALONE;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0, textStyle0, textStyle0);
      Comparable<TextStyle>[] comparableArray0 = (Comparable<TextStyle>[]) Array.newInstance(Comparable.class, 18);
      comparableArray0[0] = (Comparable<TextStyle>) textStyle0;
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) enumSet0, comparableArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.SHORT_STANDALONE;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0, textStyle0, textStyle0);
      Comparable<TextStyle>[] comparableArray0 = (Comparable<TextStyle>[]) Array.newInstance(Comparable.class, 18);
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) enumSet0, comparableArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = Integer.valueOf(3328);
      linkedHashSet0.add(integer0);
      LinkedList<TextStyle> linkedList0 = new LinkedList<TextStyle>();
      TextStyle textStyle0 = TextStyle.FULL;
      linkedList0.add(textStyle0);
      EnumSet<TextStyle> enumSet0 = EnumSet.copyOf((Collection<TextStyle>) linkedList0);
      boolean boolean0 = CollectionUtils.containsAll(linkedHashSet0, enumSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Stack<TextStyle> stack0 = new Stack<TextStyle>();
      TextStyle[] textStyleArray0 = new TextStyle[14];
      CollectionUtils.addAll((Collection<TextStyle>) stack0, textStyleArray0);
      boolean boolean0 = CollectionUtils.containsAll(stack0, stack0);
      assertFalse(stack0.empty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      LinkedList<TextStyle> linkedList0 = new LinkedList<TextStyle>();
      boolean boolean0 = CollectionUtils.containsAll(linkedList0, linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      LinkedList<TextStyle> linkedList0 = new LinkedList<TextStyle>();
      TextStyle textStyle0 = TextStyle.SHORT_STANDALONE;
      linkedList0.add(textStyle0);
      boolean boolean0 = CollectionUtils.containsAll(linkedList0, linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.SHORT_STANDALONE;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0, textStyle0, textStyle0);
      ArrayList<TextStyle> arrayList0 = new ArrayList<TextStyle>();
      UniquePredicate<TextStyle> uniquePredicate0 = new UniquePredicate<TextStyle>();
      Collection<TextStyle> collection0 = CollectionUtils.subtract((Iterable<? extends TextStyle>) enumSet0, (Iterable<? extends TextStyle>) arrayList0, (Predicate<TextStyle>) uniquePredicate0);
      assertTrue(collection0.contains(textStyle0));
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      HashSet<Month> hashSet0 = new HashSet<Month>();
      Month month0 = Month.APRIL;
      Month month1 = Month.FEBRUARY;
      EnumSet<Month> enumSet0 = EnumSet.of(month1);
      Predicate<Comparable<Month>> predicate0 = EqualPredicate.equalPredicate((Comparable<Month>) month0);
      Collection<Comparable<Month>> collection0 = CollectionUtils.subtract((Iterable<? extends Comparable<Month>>) hashSet0, (Iterable<? extends Comparable<Month>>) enumSet0, predicate0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.SHORT;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0, textStyle0, textStyle0, textStyle0);
      Collection<TextStyle> collection0 = CollectionUtils.disjunction((Iterable<? extends TextStyle>) enumSet0, (Iterable<? extends TextStyle>) enumSet0);
      assertFalse(collection0.contains(textStyle0));
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Collection<Object> collection0 = CollectionUtils.emptyIfNull((Collection<Object>) null);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.subtract((Iterable<?>) null, (Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // a
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      LinkedList<TextStyle> linkedList0 = new LinkedList<TextStyle>();
      // Undeclared exception!
      try { 
        CollectionUtils.get((Iterable<TextStyle>) linkedList0, 32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 32, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Vector<TextStyle> vector0 = new Vector<TextStyle>();
      // Undeclared exception!
      try { 
        CollectionUtils.collate((Iterable<? extends TextStyle>) vector0, (Iterable<? extends TextStyle>) vector0, (Comparator<? super TextStyle>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // comparator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.collate((Iterable<? extends Month>) null, (Iterable<? extends Month>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterableA
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      LinkedList<TextStyle> linkedList0 = new LinkedList<TextStyle>();
      Collection<Object> collection0 = CollectionUtils.union((Iterable<?>) arrayDeque0, (Iterable<?>) linkedList0);
      TextStyle textStyle0 = TextStyle.FULL;
      int int0 = CollectionUtils.cardinality(textStyle0, (Iterable<? super TextStyle>) collection0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Vector<TextStyle> vector0 = new Vector<TextStyle>();
      Collection<TextStyle> collection0 = CollectionUtils.removeAll((Collection<TextStyle>) vector0, (Collection<?>) arrayDeque0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(class0, defaultEquator0);
      Vector<FalsePredicate<Month>> vector0 = new Vector<FalsePredicate<Month>>();
      Collection<FalsePredicate<Month>> collection0 = CollectionUtils.predicatedCollection((Collection<FalsePredicate<Month>>) vector0, (Predicate<? super FalsePredicate<Month>>) equalPredicate0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.get((Iterator<LinkedList<TextStyle>>) null, (-1229));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Closure<Integer> closure0 = NOPClosure.nopClosure();
      ClosureTransformer<Integer> closureTransformer0 = new ClosureTransformer<Integer>(closure0);
      Collection<Integer> collection0 = CollectionUtils.transformingCollection((Collection<Integer>) linkedList0, (Transformer<? super Integer, ? extends Integer>) closureTransformer0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ArrayList<TextStyle> arrayList0 = new ArrayList<TextStyle>();
      Iterator<TextStyle> iterator0 = arrayList0.iterator();
      Transformer<Object, LinkedList<Object>> transformer0 = ConstantTransformer.nullTransformer();
      Collection<LinkedList<Object>> collection0 = CollectionUtils.collect(iterator0, (Transformer<? super TextStyle, ? extends LinkedList<Object>>) transformer0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ArrayList<TextStyle> arrayList0 = new ArrayList<TextStyle>();
      Collection<TextStyle> collection0 = CollectionUtils.synchronizedCollection((Collection<TextStyle>) arrayList0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Stack<TextStyle> stack0 = new Stack<TextStyle>();
      TextStyle[] textStyleArray0 = new TextStyle[1];
      CollectionUtils.addAll((Collection<TextStyle>) stack0, textStyleArray0);
      ArrayList<TextStyle> arrayList0 = new ArrayList<TextStyle>();
      CollectionUtils.intersection((Iterable<? extends TextStyle>) arrayList0, (Iterable<? extends TextStyle>) stack0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.SHORT_STANDALONE;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0, textStyle0, textStyle0);
      Collection<Object> collection0 = CollectionUtils.union((Iterable<?>) enumSet0, (Iterable<?>) enumSet0);
      boolean boolean0 = CollectionUtils.isEmpty(collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Vector<TextStyle> vector0 = new Vector<TextStyle>();
      TextStyle textStyle0 = TextStyle.NARROW;
      vector0.add(textStyle0);
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<?>) vector0, (Collection<?>) vector0);
      assertTrue(boolean0);
  }
}
