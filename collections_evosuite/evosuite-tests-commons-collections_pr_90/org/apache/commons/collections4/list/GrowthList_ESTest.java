/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 18:36:29 GMT 2025
 */

package org.apache.commons.collections4.list;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.collections4.list.GrowthList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class GrowthList_ESTest extends GrowthList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GrowthList<Object> growthList0 = new GrowthList<Object>(0);
      growthList0.set(0, growthList0);
      Object object0 = growthList0.set(2384, growthList0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GrowthList<Object> growthList0 = new GrowthList<Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      boolean boolean0 = growthList0.addAll(0, (Collection<?>) linkedList0);
      assertTrue(boolean0);
      
      boolean boolean1 = growthList0.addAll(1115, (Collection<?>) growthList0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1753);
      linkedList0.add(integer0);
      GrowthList<Integer> growthList0 = GrowthList.growthList((List<Integer>) linkedList0);
      growthList0.add(1753, integer0);
      assertEquals(1754, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GrowthList<Object> growthList0 = new GrowthList<Object>(0);
      growthList0.set(0, growthList0);
      Object object0 = growthList0.set(0, (Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GrowthList<Object> growthList0 = new GrowthList<Object>();
      List<Object> list0 = growthList0.subList(0, 0);
      growthList0.clear();
      GrowthList<Object> growthList1 = GrowthList.growthList(list0);
      // Undeclared exception!
      try { 
        growthList1.set(0, growthList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GrowthList<Object> growthList0 = new GrowthList<Object>();
      // Undeclared exception!
      try { 
        growthList0.set((-4335), growthList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        GrowthList.growthList((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GrowthList<Object> growthList0 = new GrowthList<Object>();
      List<Object> list0 = growthList0.subList(0, 0);
      growthList0.clear();
      GrowthList<Object> growthList1 = GrowthList.growthList(list0);
      // Undeclared exception!
      try { 
        growthList1.addAll((-2068), (Collection<?>) growthList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GrowthList<Integer> growthList0 = new GrowthList<Integer>();
      // Undeclared exception!
      try { 
        growthList0.addAll(4117, (Collection<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(0);
      GrowthList<Object> growthList0 = new GrowthList<Object>();
      List<Object> list0 = growthList0.subList(0, 0);
      growthList0.add(0, (Object) integer0);
      GrowthList<Object> growthList1 = new GrowthList<Object>(list0);
      // Undeclared exception!
      try { 
        growthList1.add((-1936), (Object) integer0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GrowthList<Object> growthList0 = new GrowthList<Object>();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        growthList0.add((-2074), object0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2074, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GrowthList<Object> growthList0 = null;
      try {
        growthList0 = new GrowthList<Object>((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GrowthList<Object> growthList0 = new GrowthList<Object>(linkedList0);
      // Undeclared exception!
      try { 
        growthList0.set((-177), linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -177, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GrowthList<Integer> growthList0 = new GrowthList<Integer>(3353);
      GrowthList<Integer> growthList1 = new GrowthList<Integer>(3353);
      boolean boolean0 = growthList0.addAll(3353, (Collection<? extends Integer>) growthList1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GrowthList<Integer> growthList0 = new GrowthList<Integer>(0);
      boolean boolean0 = growthList0.addAll(0, (Collection<? extends Integer>) growthList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GrowthList<Integer> growthList0 = new GrowthList<Integer>();
      // Undeclared exception!
      try { 
        growthList0.addAll((-2), (Collection<? extends Integer>) growthList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GrowthList<Object> growthList0 = null;
      try {
        growthList0 = new GrowthList<Object>((-871));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -871
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
