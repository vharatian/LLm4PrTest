/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 19:20:32 GMT 2025
 */

package org.apache.commons.collections4.properties;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.URI;
import java.net.URL;
import java.nio.file.FileSystemNotFoundException;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.util.Enumeration;
import java.util.Properties;
import org.apache.commons.collections4.properties.PropertiesFactory;
import org.apache.commons.collections4.properties.SortedProperties;
import org.apache.commons.collections4.properties.SortedPropertiesFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AbstractPropertiesFactory_ESTest extends AbstractPropertiesFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PropertiesFactory propertiesFactory0 = PropertiesFactory.INSTANCE;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("eli3b[I4$DMnYN");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Properties properties0 = propertiesFactory0.load("eli3b[I4$DMnYN");
      assertEquals(0, properties0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PropertiesFactory propertiesFactory0 = PropertiesFactory.INSTANCE;
      StringReader stringReader0 = new StringReader("");
      Properties properties0 = propertiesFactory0.load((Reader) stringReader0);
      assertTrue(properties0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PropertiesFactory propertiesFactory0 = PropertiesFactory.INSTANCE;
      StringReader stringReader0 = new StringReader("B.w]Sl:CH73X9koO_");
      Properties properties0 = propertiesFactory0.load((Reader) stringReader0);
      assertFalse(properties0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PropertiesFactory propertiesFactory0 = PropertiesFactory.INSTANCE;
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Properties properties0 = propertiesFactory0.load((InputStream) sequenceInputStream0);
      assertTrue(properties0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PropertiesFactory propertiesFactory0 = PropertiesFactory.INSTANCE;
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Properties properties0 = propertiesFactory0.load((InputStream) byteArrayInputStream0);
      assertEquals(1, properties0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SortedPropertiesFactory sortedPropertiesFactory0 = SortedPropertiesFactory.INSTANCE;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("47;M:&I*/47;M:&I*");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Eoo1{CeN@wq$D;C10CN");
      MockFile mockFile0 = new MockFile("47;M:&I*", "47;M:&I*");
      SortedProperties sortedProperties0 = sortedPropertiesFactory0.load((File) mockFile0);
      assertFalse(sortedProperties0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PropertiesFactory propertiesFactory0 = PropertiesFactory.INSTANCE;
      File file0 = MockFile.createTempFile("|bLIpBtZ\"oQ?IA!", "|bLIpBtZ\"oQ?IA!");
      Path path0 = file0.toPath();
      try { 
        propertiesFactory0.load(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PropertiesFactory propertiesFactory0 = PropertiesFactory.INSTANCE;
      // Undeclared exception!
      try { 
        propertiesFactory0.load((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PropertiesFactory propertiesFactory0 = PropertiesFactory.INSTANCE;
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        propertiesFactory0.load(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PropertiesFactory propertiesFactory0 = PropertiesFactory.INSTANCE;
      URL uRL0 = MockURL.getHttpExample();
      try { 
        propertiesFactory0.load(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PropertiesFactory propertiesFactory0 = PropertiesFactory.INSTANCE;
      URI uRI0 = MockURI.aHttpURI;
      // Undeclared exception!
      try { 
        propertiesFactory0.load(uRI0);
        fail("Expecting exception: FileSystemNotFoundException");
      
      } catch(FileSystemNotFoundException e) {
         //
         // Provider \"http\" not installed
         //
         verifyException("java.nio.file.Paths", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PropertiesFactory propertiesFactory0 = PropertiesFactory.INSTANCE;
      // Undeclared exception!
      try { 
        propertiesFactory0.load((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Paths", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PropertiesFactory propertiesFactory0 = PropertiesFactory.INSTANCE;
      URI uRI0 = MockURI.URI("");
      // Undeclared exception!
      try { 
        propertiesFactory0.load(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing scheme
         //
         verifyException("java.nio.file.Paths", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PropertiesFactory propertiesFactory0 = PropertiesFactory.INSTANCE;
      // Undeclared exception!
      try { 
        propertiesFactory0.load((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PropertiesFactory propertiesFactory0 = PropertiesFactory.INSTANCE;
      try { 
        propertiesFactory0.load("&'v~] LNi,78*zUa");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PropertiesFactory propertiesFactory0 = PropertiesFactory.INSTANCE;
      // Undeclared exception!
      try { 
        propertiesFactory0.load((ClassLoader) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.properties.AbstractPropertiesFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PropertiesFactory propertiesFactory0 = PropertiesFactory.INSTANCE;
      StringReader stringReader0 = new StringReader("org.apache.commons.collections4.properties.Propertiesactry");
      stringReader0.close();
      try { 
        propertiesFactory0.load((Reader) stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PropertiesFactory propertiesFactory0 = PropertiesFactory.INSTANCE;
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        propertiesFactory0.load((InputStream) dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PropertiesFactory propertiesFactory0 = PropertiesFactory.INSTANCE;
      // Undeclared exception!
      try { 
        propertiesFactory0.load((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PropertiesFactory propertiesFactory0 = PropertiesFactory.INSTANCE;
      MockFile mockFile0 = new MockFile("h#>m-_~JA}u");
      try { 
        propertiesFactory0.load((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PropertiesFactory propertiesFactory0 = PropertiesFactory.INSTANCE;
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      try { 
        propertiesFactory0.load(path0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PropertiesFactory propertiesFactory0 = PropertiesFactory.INSTANCE;
      Properties properties0 = propertiesFactory0.load((InputStream) null);
      assertNull(properties0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PropertiesFactory propertiesFactory0 = PropertiesFactory.INSTANCE;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        propertiesFactory0.load((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("eli3b[I4$DMnYN");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "eli3b[I4$DMnYN");
      PropertiesFactory propertiesFactory0 = PropertiesFactory.INSTANCE;
      try { 
        propertiesFactory0.load("eli3b[I4$DMnYN");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PropertiesFactory propertiesFactory0 = PropertiesFactory.INSTANCE;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("eli3b[I4$DMnYN");
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Properties properties0 = propertiesFactory0.load("eli3b[I4$DMnYN");
      assertEquals(1, properties0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PropertiesFactory propertiesFactory0 = PropertiesFactory.INSTANCE;
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.resolve(uRI0, "");
      try { 
        propertiesFactory0.load(uRI1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.collectins4.properties.PropertiesFactory", "org.apache.commons.collectins4.properties.PropertiesFactory");
      FileSystemHandling.shouldAllThrowIOExceptions();
      PropertiesFactory propertiesFactory0 = PropertiesFactory.INSTANCE;
      try { 
        propertiesFactory0.load(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PropertiesFactory propertiesFactory0 = PropertiesFactory.INSTANCE;
      File file0 = MockFile.createTempFile("|bLIpBtZ\"oQ?IA!", "|bLIpBtZ\"oQ?IA!");
      Properties properties0 = propertiesFactory0.load(file0);
      assertTrue(properties0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      PropertiesFactory propertiesFactory0 = PropertiesFactory.INSTANCE;
      Properties properties0 = propertiesFactory0.load(classLoader0, "");
      assertFalse(properties0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PropertiesFactory propertiesFactory0 = PropertiesFactory.INSTANCE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Properties properties0 = propertiesFactory0.load(classLoader0, "eli3b[I4$DMnYN");
      assertNull(properties0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PropertiesFactory propertiesFactory0 = PropertiesFactory.INSTANCE;
      // Undeclared exception!
      try { 
        propertiesFactory0.load((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PropertiesFactory propertiesFactory0 = PropertiesFactory.INSTANCE;
      URI uRI0 = MockURI.aFileURI;
      try { 
        propertiesFactory0.load(uRI0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }
}
