/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 18:39:57 GMT 2025
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.FilterInputStream;
import java.io.InputStream;
import java.io.NotSerializableException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.map.AbstractHashedMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AbstractHashedMap_ESTest extends AbstractHashedMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      AbstractHashedMap<Integer, Integer> abstractHashedMap0 = new AbstractHashedMap<Integer, Integer>();
      abstractHashedMap0.size = (-1347);
      AbstractHashedMap<FilterInputStream, AbstractHashedMap<Integer, FilterInputStream>> abstractHashedMap1 = new AbstractHashedMap<FilterInputStream, AbstractHashedMap<Integer, FilterInputStream>>();
      boolean boolean0 = abstractHashedMap1.equals(abstractHashedMap0);
      assertEquals((-1347), abstractHashedMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      AbstractHashedMap<FilterInputStream, AbstractHashedMap<FilterInputStream, Integer>> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, AbstractHashedMap<FilterInputStream, Integer>>(3574, (-1.0F), (-1093));
      abstractHashedMap0.size = (-1093);
      abstractHashedMap0.checkCapacity();
      assertFalse(abstractHashedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      AbstractHashedMap<AbstractHashedMap<Integer, FilterInputStream>, Integer> abstractHashedMap0 = new AbstractHashedMap<AbstractHashedMap<Integer, FilterInputStream>, Integer>(0, 0.75F, 0);
      abstractHashedMap0.checkCapacity();
      assertEquals(0, abstractHashedMap0.size());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<FilterInputStream, Integer> hashMap0 = new HashMap<FilterInputStream, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put((FilterInputStream) null, integer0);
      AbstractHashedMap<FilterInputStream, Integer> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, Integer>(hashMap0);
      abstractHashedMap0.addMapping(0, 6, (FilterInputStream) null, integer0);
      abstractHashedMap0.remove((Object) null);
      assertEquals(1, abstractHashedMap0.size());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      AbstractHashedMap<AbstractHashedMap<Integer, FilterInputStream>, Integer> abstractHashedMap0 = null;
      try {
        abstractHashedMap0 = new AbstractHashedMap<AbstractHashedMap<Integer, FilterInputStream>, Integer>(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      AbstractHashedMap<FilterInputStream, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, FilterInputStream>(640);
      AbstractHashedMap<Integer, FilterInputStream> abstractHashedMap1 = new AbstractHashedMap<Integer, FilterInputStream>(640);
      AbstractHashedMap.KeySet<FilterInputStream> abstractHashedMap_KeySet0 = new AbstractHashedMap.KeySet<FilterInputStream>(abstractHashedMap0);
      boolean boolean0 = abstractHashedMap_KeySet0.contains(abstractHashedMap1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      AbstractHashedMap<AbstractHashedMap<Integer, FilterInputStream>, Integer> abstractHashedMap0 = new AbstractHashedMap<AbstractHashedMap<Integer, FilterInputStream>, Integer>(1);
      AbstractHashedMap.HashEntry<AbstractHashedMap<Integer, FilterInputStream>, Integer> abstractHashedMap_HashEntry0 = new AbstractHashedMap.HashEntry<AbstractHashedMap<Integer, FilterInputStream>, Integer>((AbstractHashedMap.HashEntry<AbstractHashedMap<Integer, FilterInputStream>, Integer>) null, 1, abstractHashedMap0, (Integer) null);
      abstractHashedMap0.updateEntry(abstractHashedMap_HashEntry0, (Integer) null);
      assertTrue(abstractHashedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      AbstractHashedMap<AbstractHashedMap<FilterInputStream, FilterInputStream>, AbstractHashedMap<Integer, Integer>> abstractHashedMap0 = new AbstractHashedMap<AbstractHashedMap<FilterInputStream, FilterInputStream>, AbstractHashedMap<Integer, Integer>>(27);
      abstractHashedMap0.ensureCapacity(27);
      assertEquals(0, abstractHashedMap0.size());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      AbstractHashedMap<Integer, Integer> abstractHashedMap0 = new AbstractHashedMap<Integer, Integer>();
      Integer integer0 = new Integer(2);
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      AbstractHashedMap.HashEntry<Integer, Integer> abstractHashedMap_HashEntry0 = new AbstractHashedMap.HashEntry<Integer, Integer>((AbstractHashedMap.HashEntry<Integer, Integer>) null, (byte)0, bufferedInputStream0, integer0);
      abstractHashedMap0.destroyEntry(abstractHashedMap_HashEntry0);
      assertEquals(0, abstractHashedMap0.size());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<FilterInputStream, Integer> hashMap0 = new HashMap<FilterInputStream, Integer>();
      Integer integer0 = new Integer(0);
      AbstractHashedMap<FilterInputStream, Integer> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, Integer>(hashMap0);
      abstractHashedMap0.addMapping(0, 6, (FilterInputStream) null, integer0);
      assertFalse(abstractHashedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      AbstractHashedMap<Integer, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<Integer, FilterInputStream>(1024, 1024);
      abstractHashedMap0.addEntry((AbstractHashedMap.HashEntry<Integer, FilterInputStream>) null, 10);
      assertEquals(0, abstractHashedMap0.size());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      AbstractHashedMap<Integer, AbstractHashedMap<Integer, Integer>> abstractHashedMap0 = new AbstractHashedMap<Integer, AbstractHashedMap<Integer, Integer>>(1479);
      AbstractHashedMap.HashMapIterator<Integer, AbstractHashedMap<Integer, Integer>> abstractHashedMap_HashMapIterator0 = new AbstractHashedMap.HashMapIterator<Integer, AbstractHashedMap<Integer, Integer>>(abstractHashedMap0);
      // Undeclared exception!
      try { 
        abstractHashedMap_HashMapIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No next() entry in the iteration
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      AbstractHashedMap<FilterInputStream, AbstractHashedMap<Integer, Integer>> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, AbstractHashedMap<Integer, Integer>>(0);
      AbstractHashedMap.EntrySetIterator<FilterInputStream, AbstractHashedMap<Integer, Integer>> abstractHashedMap_EntrySetIterator0 = new AbstractHashedMap.EntrySetIterator<FilterInputStream, AbstractHashedMap<Integer, Integer>>(abstractHashedMap0);
      // Undeclared exception!
      try { 
        abstractHashedMap_EntrySetIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No next() entry in the iteration
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      AbstractHashedMap<FilterInputStream, Integer> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, Integer>(16);
      AbstractHashedMap.EntrySetIterator<FilterInputStream, Integer> abstractHashedMap_EntrySetIterator0 = new AbstractHashedMap.EntrySetIterator<FilterInputStream, Integer>(abstractHashedMap0);
      // Undeclared exception!
      try { 
        abstractHashedMap_EntrySetIterator0.nextEntry();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No next() entry in the iteration
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      AbstractHashedMap<Map.Entry<FilterInputStream, FilterInputStream>, AbstractHashedMap<FilterInputStream, Integer>> abstractHashedMap0 = new AbstractHashedMap<Map.Entry<FilterInputStream, FilterInputStream>, AbstractHashedMap<FilterInputStream, Integer>>(128, 1153.0F);
      AbstractHashedMap.EntrySet<Map.Entry<FilterInputStream, FilterInputStream>, AbstractHashedMap<FilterInputStream, Integer>> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<Map.Entry<FilterInputStream, FilterInputStream>, AbstractHashedMap<FilterInputStream, Integer>>(abstractHashedMap0);
      int int0 = abstractHashedMap_EntrySet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      AbstractHashedMap.EntrySet<AbstractHashedMap<Integer, Integer>, FilterInputStream> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<AbstractHashedMap<Integer, Integer>, FilterInputStream>((AbstractHashedMap<AbstractHashedMap<Integer, Integer>, FilterInputStream>) null);
      // Undeclared exception!
      try { 
        abstractHashedMap_EntrySet0.iterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap$EntrySet", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      AbstractHashedMap<DataInputStream, DataInputStream> abstractHashedMap0 = new AbstractHashedMap<DataInputStream, DataInputStream>(3853);
      abstractHashedMap0.init();
      assertTrue(abstractHashedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      AbstractHashedMap<Integer, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<Integer, FilterInputStream>();
      AbstractHashedMap<Integer, FilterInputStream> abstractHashedMap1 = new AbstractHashedMap<Integer, FilterInputStream>(abstractHashedMap0);
      AbstractHashedMap.Values<FilterInputStream> abstractHashedMap_Values0 = new AbstractHashedMap.Values<FilterInputStream>(abstractHashedMap1);
      abstractHashedMap_Values0.clear();
      assertEquals(0, abstractHashedMap_Values0.size());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      AbstractHashedMap<Integer, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<Integer, FilterInputStream>(963);
      AbstractHashedMap.EntrySet<Integer, FilterInputStream> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<Integer, FilterInputStream>(abstractHashedMap0);
      abstractHashedMap_EntrySet0.clear();
      assertEquals(0, abstractHashedMap_EntrySet0.size());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      AbstractHashedMap<FilterInputStream, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, FilterInputStream>(1111, (-34), (-34));
      abstractHashedMap0.putAll(abstractHashedMap0);
      assertEquals(0, abstractHashedMap0.size());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      AbstractHashedMap<Integer, Integer> abstractHashedMap0 = new AbstractHashedMap<Integer, Integer>(14, 14);
      int int0 = abstractHashedMap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      AbstractHashedMap<Map.Entry<FilterInputStream, Integer>, Map.Entry<Integer, Integer>> abstractHashedMap0 = new AbstractHashedMap<Map.Entry<FilterInputStream, Integer>, Map.Entry<Integer, Integer>>(1200, 1340.967F, (-4951));
      abstractHashedMap0.size = 1200;
      MapIterator<Map.Entry<FilterInputStream, Integer>, Map.Entry<Integer, Integer>> mapIterator0 = abstractHashedMap0.mapIterator();
      assertFalse(mapIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      AbstractHashedMap<FilterInputStream, Integer> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, Integer>(640, 640);
      abstractHashedMap0.putIfAbsent((FilterInputStream) null, (Integer) null);
      Set<FilterInputStream> set0 = abstractHashedMap0.keySet();
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<FilterInputStream, Integer> hashMap0 = new HashMap<FilterInputStream, Integer>();
      AbstractHashedMap<FilterInputStream, Integer> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, Integer>(hashMap0);
      byte[] byteArray0 = new byte[4];
      AbstractHashedMap<Integer, Integer> abstractHashedMap1 = new AbstractHashedMap<Integer, Integer>(11, (byte)98, 2633);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 16);
      boolean boolean0 = abstractHashedMap1.isEqualValue(abstractHashedMap0, bufferedInputStream0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      AbstractHashedMap<FilterInputStream, Integer> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, Integer>(32, (-1880.4615F), 128);
      int int0 = abstractHashedMap0.hashIndex(32, 862);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      AbstractHashedMap<FilterInputStream, Integer> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, Integer>(640, 640, 640);
      int int0 = abstractHashedMap0.hashIndex(640, 640);
      assertEquals(512, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      AbstractHashedMap<FilterInputStream, Integer> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, Integer>(914, 0, (-1927));
      int int0 = abstractHashedMap0.hashIndex((-3942), (-812));
      assertEquals((-3950), int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      AbstractHashedMap<FilterInputStream, AbstractHashedMap<Integer, Integer>> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, AbstractHashedMap<Integer, Integer>>();
      AbstractHashedMap<Integer, FilterInputStream> abstractHashedMap1 = new AbstractHashedMap<Integer, FilterInputStream>(42, 31.9376F, (-1));
      int int0 = abstractHashedMap1.hash(abstractHashedMap0);
      assertEquals((-8139033), int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      AbstractHashedMap<Integer, AbstractHashedMap<FilterInputStream, Integer>> abstractHashedMap0 = new AbstractHashedMap<Integer, AbstractHashedMap<FilterInputStream, Integer>>(3076);
      AbstractHashedMap<Integer, Integer> abstractHashedMap1 = new AbstractHashedMap<Integer, Integer>(349);
      Object object0 = abstractHashedMap1.convertKey(abstractHashedMap0);
      Integer integer0 = abstractHashedMap1.get(object0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Integer integer0 = new Integer(1);
      HashMap<FilterInputStream, Integer> hashMap0 = new HashMap<FilterInputStream, Integer>();
      hashMap0.put((FilterInputStream) null, integer0);
      AbstractHashedMap<FilterInputStream, Integer> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, Integer>(hashMap0);
      Set<Map.Entry<FilterInputStream, Integer>> set0 = (Set<Map.Entry<FilterInputStream, Integer>>)abstractHashedMap0.entrySet();
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      AbstractHashedMap<Integer, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<Integer, FilterInputStream>(3, 3, 2098);
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      AbstractHashedMap.HashEntry<Integer, FilterInputStream> abstractHashedMap_HashEntry0 = new AbstractHashedMap.HashEntry<Integer, FilterInputStream>((AbstractHashedMap.HashEntry<Integer, FilterInputStream>) null, 3, dataInputStream0, dataInputStream0);
      AbstractHashedMap.HashEntry<Integer, FilterInputStream> abstractHashedMap_HashEntry1 = abstractHashedMap0.entryNext(abstractHashedMap_HashEntry0);
      assertNull(abstractHashedMap_HashEntry1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      AbstractHashedMap<Integer, AbstractHashedMap<Integer, Integer>> abstractHashedMap0 = new AbstractHashedMap<Integer, AbstractHashedMap<Integer, Integer>>();
      AbstractHashedMap<FilterInputStream, FilterInputStream> abstractHashedMap1 = new AbstractHashedMap<FilterInputStream, FilterInputStream>(3015, 3015);
      AbstractHashedMap.HashEntry<FilterInputStream, FilterInputStream> abstractHashedMap_HashEntry0 = new AbstractHashedMap.HashEntry<FilterInputStream, FilterInputStream>((AbstractHashedMap.HashEntry<FilterInputStream, FilterInputStream>) null, 3015, abstractHashedMap0, (FilterInputStream) null);
      int int0 = abstractHashedMap1.entryHashCode(abstractHashedMap_HashEntry0);
      assertEquals(3015, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      AbstractHashedMap<FilterInputStream, Integer> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, Integer>(1, 1);
      Iterator<Map.Entry<FilterInputStream, Integer>> iterator0 = (Iterator<Map.Entry<FilterInputStream, Integer>>)abstractHashedMap0.createEntrySetIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      AbstractHashedMap<Integer, AbstractHashedMap<Integer, Integer>> abstractHashedMap0 = new AbstractHashedMap<Integer, AbstractHashedMap<Integer, Integer>>(4248, 1101.165F);
      Integer integer0 = new Integer(4248);
      AbstractHashedMap<Integer, Integer> abstractHashedMap1 = new AbstractHashedMap<Integer, Integer>(9);
      AbstractHashedMap.HashEntry<Integer, AbstractHashedMap<Integer, Integer>> abstractHashedMap_HashEntry0 = abstractHashedMap0.createEntry((AbstractHashedMap.HashEntry<Integer, AbstractHashedMap<Integer, Integer>>) null, 4248, integer0, abstractHashedMap1);
      assertNotNull(abstractHashedMap_HashEntry0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      AbstractHashedMap<Map.Entry<FilterInputStream, FilterInputStream>, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<Map.Entry<FilterInputStream, FilterInputStream>, FilterInputStream>();
      int int0 = abstractHashedMap0.calculateThreshold(0, (-278.7587F));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      AbstractHashedMap<FilterInputStream, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, FilterInputStream>(12);
      int int0 = abstractHashedMap0.calculateThreshold(1, 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      AbstractHashedMap<AbstractHashedMap<FilterInputStream, FilterInputStream>, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<AbstractHashedMap<FilterInputStream, FilterInputStream>, FilterInputStream>(607, 1760.9749F);
      int int0 = abstractHashedMap0.calculateThreshold(607, (-1.0F));
      assertEquals((-607), int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      AbstractHashedMap<Integer, Integer> abstractHashedMap0 = new AbstractHashedMap<Integer, Integer>(123);
      int int0 = abstractHashedMap0.calculateNewCapacity(8192);
      assertEquals(8192, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<FilterInputStream, Integer> hashMap0 = new HashMap<FilterInputStream, Integer>();
      AbstractHashedMap<FilterInputStream, Integer> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, Integer>(hashMap0);
      Integer integer0 = new Integer(484);
      // Undeclared exception!
      try { 
        abstractHashedMap0.updateEntry((AbstractHashedMap.HashEntry<FilterInputStream, Integer>) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      AbstractHashedMap<FilterInputStream, Integer> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, Integer>();
      abstractHashedMap0.size = 1725;
      // Undeclared exception!
      try { 
        abstractHashedMap0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      AbstractHashedMap<FilterInputStream, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, FilterInputStream>();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        abstractHashedMap0.reuseEntry((AbstractHashedMap.HashEntry<FilterInputStream, FilterInputStream>) null, 3, 3442, pushbackInputStream0, pushbackInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      HashMap<FilterInputStream, FilterInputStream> hashMap0 = new HashMap<FilterInputStream, FilterInputStream>();
      AbstractHashedMap<FilterInputStream, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, FilterInputStream>(hashMap0);
      // Undeclared exception!
      try { 
        abstractHashedMap0.reuseEntry((AbstractHashedMap.HashEntry<FilterInputStream, FilterInputStream>) null, 679, 32, pushbackInputStream0, pushbackInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 679
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      AbstractHashedMap<FilterInputStream, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, FilterInputStream>();
      // Undeclared exception!
      try { 
        abstractHashedMap0.removeMapping((AbstractHashedMap.HashEntry<FilterInputStream, FilterInputStream>) null, 7007, (AbstractHashedMap.HashEntry<FilterInputStream, FilterInputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      AbstractHashedMap<FilterInputStream, Integer> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, Integer>(0, 64.0F);
      // Undeclared exception!
      try { 
        abstractHashedMap0.removeEntry((AbstractHashedMap.HashEntry<FilterInputStream, Integer>) null, 512, (AbstractHashedMap.HashEntry<FilterInputStream, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<FilterInputStream, Integer> hashMap0 = new HashMap<FilterInputStream, Integer>();
      AbstractHashedMap<FilterInputStream, Integer> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, Integer>();
      // Undeclared exception!
      try { 
        abstractHashedMap0.remove((Object) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<FilterInputStream, Integer> hashMap0 = new HashMap<FilterInputStream, Integer>();
      AbstractHashedMap<FilterInputStream, Integer> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, Integer>(hashMap0);
      AbstractHashedMap.HashEntry<FilterInputStream, Integer>[] abstractHashedMap_HashEntryArray0 = (AbstractHashedMap.HashEntry<FilterInputStream, Integer>[]) Array.newInstance(AbstractHashedMap.HashEntry.class, 0);
      abstractHashedMap0.data = abstractHashedMap_HashEntryArray0;
      // Undeclared exception!
      try { 
        abstractHashedMap0.remove((Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -8147762
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      AbstractHashedMap<AbstractHashedMap<Integer, FilterInputStream>, Integer> abstractHashedMap0 = new AbstractHashedMap<AbstractHashedMap<Integer, FilterInputStream>, Integer>(262144, 642, (-464));
      AbstractHashedMap<Integer, FilterInputStream> abstractHashedMap1 = new AbstractHashedMap<Integer, FilterInputStream>();
      Integer integer0 = new Integer(262144);
      // Undeclared exception!
      abstractHashedMap0.put(abstractHashedMap1, integer0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      AbstractHashedMap<AbstractHashedMap<Integer, FilterInputStream>, Integer> abstractHashedMap0 = new AbstractHashedMap<AbstractHashedMap<Integer, FilterInputStream>, Integer>();
      AbstractHashedMap<Integer, FilterInputStream> abstractHashedMap1 = new AbstractHashedMap<Integer, FilterInputStream>();
      Integer integer0 = new Integer(1);
      // Undeclared exception!
      try { 
        abstractHashedMap0.put(abstractHashedMap1, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      AbstractHashedMap<AbstractHashedMap<Integer, FilterInputStream>, Integer> abstractHashedMap0 = new AbstractHashedMap<AbstractHashedMap<Integer, FilterInputStream>, Integer>(0, 0.75F, 0);
      AbstractHashedMap<Integer, FilterInputStream> abstractHashedMap1 = new AbstractHashedMap<Integer, FilterInputStream>();
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        abstractHashedMap0.put(abstractHashedMap1, integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -8147762
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      AbstractHashedMap<Integer, Integer> abstractHashedMap0 = new AbstractHashedMap<Integer, Integer>(17);
      Integer integer0 = new Integer(17);
      // Undeclared exception!
      try { 
        abstractHashedMap0.isEqualValue((Object) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      AbstractHashedMap<Integer, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<Integer, FilterInputStream>();
      Integer integer0 = new Integer(65542);
      AbstractHashedMap<AbstractHashedMap<Integer, FilterInputStream>, Integer> abstractHashedMap1 = new AbstractHashedMap<AbstractHashedMap<Integer, FilterInputStream>, Integer>(65542);
      abstractHashedMap1.put(abstractHashedMap0, integer0);
      // Undeclared exception!
      abstractHashedMap1.hashCode();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      AbstractHashedMap<Integer, Integer> abstractHashedMap0 = new AbstractHashedMap<Integer, Integer>();
      abstractHashedMap0.size = (-3218);
      // Undeclared exception!
      try { 
        abstractHashedMap0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      AbstractHashedMap<FilterInputStream, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, FilterInputStream>();
      // Undeclared exception!
      try { 
        abstractHashedMap0.getEntry(abstractHashedMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      AbstractHashedMap<AbstractHashedMap<Integer, Integer>, AbstractHashedMap<Integer, Integer>> abstractHashedMap0 = new AbstractHashedMap<AbstractHashedMap<Integer, Integer>, AbstractHashedMap<Integer, Integer>>(0, 1.0F, 0);
      Integer integer0 = new Integer(838);
      // Undeclared exception!
      try { 
        abstractHashedMap0.getEntry(integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -8147762
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      AbstractHashedMap<AbstractHashedMap<Integer, FilterInputStream>, Integer> abstractHashedMap0 = new AbstractHashedMap<AbstractHashedMap<Integer, FilterInputStream>, Integer>(262144, 663, 663);
      AbstractHashedMap<Integer, FilterInputStream> abstractHashedMap1 = new AbstractHashedMap<Integer, FilterInputStream>();
      // Undeclared exception!
      try { 
        abstractHashedMap1.get(abstractHashedMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      AbstractHashedMap<FilterInputStream, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, FilterInputStream>();
      // Undeclared exception!
      try { 
        abstractHashedMap0.entryValue((AbstractHashedMap.HashEntry<FilterInputStream, FilterInputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      AbstractHashedMap<AbstractHashedMap<Integer, FilterInputStream>, AbstractHashedMap<FilterInputStream, Integer>> abstractHashedMap0 = new AbstractHashedMap<AbstractHashedMap<Integer, FilterInputStream>, AbstractHashedMap<FilterInputStream, Integer>>(205, 205, 205);
      // Undeclared exception!
      try { 
        abstractHashedMap0.entryKey((AbstractHashedMap.HashEntry<AbstractHashedMap<Integer, FilterInputStream>, AbstractHashedMap<FilterInputStream, Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      AbstractHashedMap<FilterInputStream, Integer> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, Integer>(36);
      // Undeclared exception!
      try { 
        abstractHashedMap0.entryHashCode((AbstractHashedMap.HashEntry<FilterInputStream, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      AbstractHashedMap<Integer, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<Integer, FilterInputStream>();
      // Undeclared exception!
      try { 
        abstractHashedMap0.ensureCapacity(1227);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      AbstractHashedMap<Integer, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<Integer, FilterInputStream>();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        abstractHashedMap0.doWriteObject(objectOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      AbstractHashedMap<AbstractHashedMap<Integer, Integer>, Integer> abstractHashedMap0 = new AbstractHashedMap<AbstractHashedMap<Integer, Integer>, Integer>(17);
      // Undeclared exception!
      try { 
        abstractHashedMap0.doReadObject((ObjectInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      AbstractHashedMap<Integer, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<Integer, FilterInputStream>(3015);
      // Undeclared exception!
      try { 
        abstractHashedMap0.destroyEntry((AbstractHashedMap.HashEntry<Integer, FilterInputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      AbstractHashedMap<Integer, AbstractHashedMap<Integer, Integer>> abstractHashedMap0 = new AbstractHashedMap<Integer, AbstractHashedMap<Integer, Integer>>();
      abstractHashedMap0.size = 999;
      // Undeclared exception!
      try { 
        abstractHashedMap0.createKeySetIterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      AbstractHashedMap<Integer, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<Integer, FilterInputStream>();
      AbstractHashedMap<Integer, FilterInputStream> abstractHashedMap1 = new AbstractHashedMap<Integer, FilterInputStream>(55540);
      // Undeclared exception!
      abstractHashedMap1.containsValue(abstractHashedMap0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      AbstractHashedMap<Integer, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<Integer, FilterInputStream>();
      // Undeclared exception!
      try { 
        abstractHashedMap0.containsValue(abstractHashedMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      AbstractHashedMap<AbstractHashedMap<FilterInputStream, Integer>, AbstractHashedMap<Integer, Integer>> abstractHashedMap0 = new AbstractHashedMap<AbstractHashedMap<FilterInputStream, Integer>, AbstractHashedMap<Integer, Integer>>();
      AbstractHashedMap<Integer, FilterInputStream> abstractHashedMap1 = new AbstractHashedMap<Integer, FilterInputStream>();
      // Undeclared exception!
      try { 
        abstractHashedMap1.containsKey(abstractHashedMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      AbstractHashedMap<AbstractHashedMap<Integer, Integer>, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<AbstractHashedMap<Integer, Integer>, FilterInputStream>(514332);
      // Undeclared exception!
      abstractHashedMap0.clear();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      AbstractHashedMap<Integer, AbstractHashedMap<Integer, Integer>> abstractHashedMap0 = new AbstractHashedMap<Integer, AbstractHashedMap<Integer, Integer>>();
      // Undeclared exception!
      try { 
        abstractHashedMap0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      AbstractHashedMap<Integer, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<Integer, FilterInputStream>();
      // Undeclared exception!
      try { 
        abstractHashedMap0.checkCapacity();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      AbstractHashedMap<Integer, Integer> abstractHashedMap0 = new AbstractHashedMap<Integer, Integer>();
      Integer integer0 = new Integer(1);
      // Undeclared exception!
      try { 
        abstractHashedMap0.addMapping(3015, (-2761), integer0, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      AbstractHashedMap<Integer, Integer> abstractHashedMap0 = new AbstractHashedMap<Integer, Integer>(849, 849, 849);
      Integer integer0 = new Integer(849);
      // Undeclared exception!
      try { 
        abstractHashedMap0.addMapping(849, 1001, integer0, integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 849
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      AbstractHashedMap<FilterInputStream, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, FilterInputStream>(65542, 65542);
      // Undeclared exception!
      try { 
        abstractHashedMap0.addEntry((AbstractHashedMap.HashEntry<FilterInputStream, FilterInputStream>) null, (-1054));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1054
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      AbstractHashedMap<FilterInputStream, FilterInputStream> abstractHashedMap0 = null;
      try {
        abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, FilterInputStream>((Map<? extends FilterInputStream, ? extends FilterInputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      AbstractHashedMap<FilterInputStream, Integer> abstractHashedMap0 = null;
      try {
        abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, Integer>((-1), (-1), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      AbstractHashedMap<AbstractHashedMap<Integer, FilterInputStream>, Integer> abstractHashedMap0 = new AbstractHashedMap<AbstractHashedMap<Integer, FilterInputStream>, Integer>(3, 3);
      String string0 = abstractHashedMap0.toString();
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      AbstractHashedMap<Integer, Integer> abstractHashedMap0 = new AbstractHashedMap<Integer, Integer>();
      AbstractHashedMap<FilterInputStream, AbstractHashedMap<Integer, FilterInputStream>> abstractHashedMap1 = new AbstractHashedMap<FilterInputStream, AbstractHashedMap<Integer, FilterInputStream>>();
      boolean boolean0 = abstractHashedMap1.equals(abstractHashedMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      AbstractHashedMap<Integer, Map.Entry<Integer, Integer>> abstractHashedMap0 = new AbstractHashedMap<Integer, Map.Entry<Integer, Integer>>(454);
      boolean boolean0 = abstractHashedMap0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      Integer integer0 = new Integer(679);
      AbstractHashedMap.HashEntry<Integer, FilterInputStream> abstractHashedMap_HashEntry0 = new AbstractHashedMap.HashEntry<Integer, FilterInputStream>((AbstractHashedMap.HashEntry<Integer, FilterInputStream>) null, (-59), integer0, pushbackInputStream0);
      Object object0 = abstractHashedMap_HashEntry0.getKey();
      assertEquals(679, object0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      AbstractHashedMap<Integer, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<Integer, FilterInputStream>(42, 31.9376F, (-1));
      Integer integer0 = new Integer((-1));
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      abstractHashedMap0.put(integer0, pushbackInputStream0);
      abstractHashedMap0.mapIterator();
      assertFalse(abstractHashedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      AbstractHashedMap<FilterInputStream, Integer> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, Integer>();
      MapIterator<FilterInputStream, Integer> mapIterator0 = abstractHashedMap0.mapIterator();
      assertFalse(mapIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      AbstractHashedMap<Integer, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<Integer, FilterInputStream>(32768);
      assertEquals(0, abstractHashedMap0.size());
      
      AbstractHashedMap<Integer, FilterInputStream> abstractHashedMap1 = new AbstractHashedMap<Integer, FilterInputStream>(abstractHashedMap0);
      abstractHashedMap1.clear();
      assertTrue(abstractHashedMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<FilterInputStream, Integer> hashMap0 = new HashMap<FilterInputStream, Integer>();
      AbstractHashedMap<FilterInputStream, Integer> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, Integer>(hashMap0);
      Integer integer0 = abstractHashedMap0.remove((Object) hashMap0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      AbstractHashedMap<AbstractHashedMap<Integer, FilterInputStream>, Integer> abstractHashedMap0 = new AbstractHashedMap<AbstractHashedMap<Integer, FilterInputStream>, Integer>(3015);
      AbstractHashedMap<Integer, Integer> abstractHashedMap1 = new AbstractHashedMap<Integer, Integer>();
      boolean boolean0 = abstractHashedMap0.containsKey(abstractHashedMap1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<FilterInputStream, Integer> hashMap0 = new HashMap<FilterInputStream, Integer>();
      Integer integer0 = new Integer((-1));
      hashMap0.put((FilterInputStream) null, integer0);
      AbstractHashedMap<FilterInputStream, Integer> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, Integer>(hashMap0);
      BiFunction<FilterInputStream, Integer, Integer> biFunction0 = (BiFunction<FilterInputStream, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any(java.io.FilterInputStream.class) , anyInt());
      abstractHashedMap0.replaceAll(biFunction0);
      assertEquals(1, abstractHashedMap0.size());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      AbstractHashedMap<AbstractHashedMap<Integer, FilterInputStream>, Integer> abstractHashedMap0 = new AbstractHashedMap<AbstractHashedMap<Integer, FilterInputStream>, Integer>(1038, 1038);
      AbstractHashedMap<Integer, FilterInputStream> abstractHashedMap1 = new AbstractHashedMap<Integer, FilterInputStream>(1038);
      Integer integer0 = new Integer(41);
      BiFunction<Integer, Integer, Integer> biFunction0 = (BiFunction<Integer, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer1 = abstractHashedMap0.merge(abstractHashedMap1, integer0, biFunction0);
      AbstractHashedMap<Integer, FilterInputStream> abstractHashedMap2 = new AbstractHashedMap<Integer, FilterInputStream>();
      abstractHashedMap0.put(abstractHashedMap2, integer1);
      abstractHashedMap0.toString();
      assertEquals(2, abstractHashedMap0.size());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      AbstractHashedMap<Integer, AbstractHashedMap<Integer, Integer>> abstractHashedMap0 = new AbstractHashedMap<Integer, AbstractHashedMap<Integer, Integer>>(15);
      Integer integer0 = new Integer(15);
      abstractHashedMap0.put(integer0, (AbstractHashedMap<Integer, Integer>) null);
      AbstractHashedMap<Integer, FilterInputStream> abstractHashedMap1 = new AbstractHashedMap<Integer, FilterInputStream>(15);
      boolean boolean0 = abstractHashedMap1.equals(abstractHashedMap0);
      assertFalse(abstractHashedMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<Integer, FilterInputStream> hashMap0 = new HashMap<Integer, FilterInputStream>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      BiFunction<FilterInputStream, FilterInputStream, FilterInputStream> biFunction0 = (BiFunction<FilterInputStream, FilterInputStream, FilterInputStream>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge((Integer) null, pushbackInputStream0, biFunction0);
      AbstractHashedMap<Integer, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<Integer, FilterInputStream>(hashMap0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      try { 
        abstractHashedMap0.doWriteObject(objectOutputStream0);
        fail("Expecting exception: NotSerializableException");
      
      } catch(NotSerializableException e) {
         //
         // java.io.PushbackInputStream
         //
         verifyException("java.io.ObjectOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<Integer, FilterInputStream> hashMap0 = new HashMap<Integer, FilterInputStream>();
      AbstractHashedMap<Integer, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<Integer, FilterInputStream>(hashMap0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      abstractHashedMap0.doWriteObject(objectOutputStream0);
      assertEquals(0, abstractHashedMap0.size());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      AbstractHashedMap<AbstractHashedMap<Integer, FilterInputStream>, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<AbstractHashedMap<Integer, FilterInputStream>, FilterInputStream>(1);
      AbstractHashedMap.HashMapIterator<AbstractHashedMap<Integer, FilterInputStream>, FilterInputStream> abstractHashedMap_HashMapIterator0 = new AbstractHashedMap.HashMapIterator<AbstractHashedMap<Integer, FilterInputStream>, FilterInputStream>(abstractHashedMap0);
      String string0 = abstractHashedMap_HashMapIterator0.toString();
      assertEquals("Iterator[]", string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      AbstractHashedMap<Integer, AbstractHashedMap<Integer, Integer>> abstractHashedMap0 = new AbstractHashedMap<Integer, AbstractHashedMap<Integer, Integer>>(3015);
      AbstractHashedMap.HashMapIterator<Integer, AbstractHashedMap<Integer, Integer>> abstractHashedMap_HashMapIterator0 = new AbstractHashedMap.HashMapIterator<Integer, AbstractHashedMap<Integer, Integer>>(abstractHashedMap0);
      // Undeclared exception!
      try { 
        abstractHashedMap_HashMapIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // remove() can only be called once after next()
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      AbstractHashedMap<AbstractHashedMap<Integer, FilterInputStream>, Integer> abstractHashedMap0 = new AbstractHashedMap<AbstractHashedMap<Integer, FilterInputStream>, Integer>(1038, 1038);
      AbstractHashedMap<Integer, FilterInputStream> abstractHashedMap1 = new AbstractHashedMap<Integer, FilterInputStream>(1038, 1038, 265);
      Integer integer0 = new Integer(265);
      BiFunction<Integer, Integer, Integer> biFunction0 = (BiFunction<Integer, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      abstractHashedMap0.merge(abstractHashedMap1, integer0, biFunction0);
      AbstractHashedMap<Integer, FilterInputStream> abstractHashedMap2 = new AbstractHashedMap<Integer, FilterInputStream>();
      abstractHashedMap0.put(abstractHashedMap2, integer0);
      abstractHashedMap0.hashCode();
      assertEquals(2, abstractHashedMap0.size());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      AbstractHashedMap<Integer, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<Integer, FilterInputStream>();
      AbstractHashedMap<AbstractHashedMap<Integer, FilterInputStream>, Integer> abstractHashedMap1 = new AbstractHashedMap<AbstractHashedMap<Integer, FilterInputStream>, Integer>(1394);
      abstractHashedMap1.put(abstractHashedMap0, (Integer) null);
      abstractHashedMap1.hashCode();
      assertEquals(1, abstractHashedMap1.size());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      AbstractHashedMap<AbstractHashedMap<Integer, FilterInputStream>, Integer> abstractHashedMap0 = new AbstractHashedMap<AbstractHashedMap<Integer, FilterInputStream>, Integer>(1);
      Integer integer0 = new Integer(1);
      abstractHashedMap0.put((AbstractHashedMap<Integer, FilterInputStream>) null, integer0);
      abstractHashedMap0.hashCode();
      assertEquals(1, abstractHashedMap0.size());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Integer integer0 = new Integer(1574);
      AbstractHashedMap<Integer, Integer> abstractHashedMap0 = new AbstractHashedMap<Integer, Integer>(1574);
      AbstractHashedMap.HashEntry<Map.Entry<FilterInputStream, Integer>, AbstractHashedMap<Integer, Integer>> abstractHashedMap_HashEntry0 = new AbstractHashedMap.HashEntry<Map.Entry<FilterInputStream, Integer>, AbstractHashedMap<Integer, Integer>>((AbstractHashedMap.HashEntry<Map.Entry<FilterInputStream, Integer>, AbstractHashedMap<Integer, Integer>>) null, 1169, integer0, abstractHashedMap0);
      boolean boolean0 = abstractHashedMap_HashEntry0.equals(abstractHashedMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      AbstractHashedMap.HashEntry<Map.Entry<FilterInputStream, Integer>, AbstractHashedMap<Integer, Integer>> abstractHashedMap_HashEntry0 = new AbstractHashedMap.HashEntry<Map.Entry<FilterInputStream, Integer>, AbstractHashedMap<Integer, Integer>>((AbstractHashedMap.HashEntry<Map.Entry<FilterInputStream, Integer>, AbstractHashedMap<Integer, Integer>>) null, 15, (Object) null, (AbstractHashedMap<Integer, Integer>) null);
      Integer integer0 = new Integer(1372);
      AbstractHashedMap.HashEntry<Map.Entry<FilterInputStream, Integer>, AbstractHashedMap<Integer, Integer>> abstractHashedMap_HashEntry1 = new AbstractHashedMap.HashEntry<Map.Entry<FilterInputStream, Integer>, AbstractHashedMap<Integer, Integer>>(abstractHashedMap_HashEntry0, 15, integer0, (AbstractHashedMap<Integer, Integer>) null);
      boolean boolean0 = abstractHashedMap_HashEntry1.equals(abstractHashedMap_HashEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      AbstractHashedMap<Integer, AbstractHashedMap<Integer, Integer>> abstractHashedMap0 = new AbstractHashedMap<Integer, AbstractHashedMap<Integer, Integer>>(47);
      Collection<AbstractHashedMap<Integer, Integer>> collection0 = abstractHashedMap0.values();
      Collection<AbstractHashedMap<Integer, Integer>> collection1 = abstractHashedMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      AbstractHashedMap<FilterInputStream, Integer> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, Integer>(640, 640);
      Set<FilterInputStream> set0 = abstractHashedMap0.keySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      AbstractHashedMap<Integer, AbstractHashedMap<Integer, Integer>> abstractHashedMap0 = new AbstractHashedMap<Integer, AbstractHashedMap<Integer, Integer>>(1628);
      AbstractHashedMap.EntrySet<Integer, AbstractHashedMap<Integer, Integer>> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<Integer, AbstractHashedMap<Integer, Integer>>(abstractHashedMap0);
      boolean boolean0 = abstractHashedMap_EntrySet0.remove(abstractHashedMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      AbstractHashedMap<Integer, Integer> abstractHashedMap0 = new AbstractHashedMap<Integer, Integer>();
      BiFunction<Integer, Integer, Integer> biFunction0 = (BiFunction<Integer, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      abstractHashedMap0.replaceAll(biFunction0);
      Set<Map.Entry<Integer, Integer>> set0 = (Set<Map.Entry<Integer, Integer>>)abstractHashedMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      AbstractHashedMap<Integer, Integer> abstractHashedMap0 = new AbstractHashedMap<Integer, Integer>(hashMap0);
      AbstractHashedMap<Integer, AbstractHashedMap<Integer, Integer>> abstractHashedMap1 = new AbstractHashedMap<Integer, AbstractHashedMap<Integer, Integer>>(14, (-87.95763F), 8);
      AbstractHashedMap.HashMapIterator<Integer, AbstractHashedMap<Integer, Integer>> abstractHashedMap_HashMapIterator0 = new AbstractHashedMap.HashMapIterator<Integer, AbstractHashedMap<Integer, Integer>>(abstractHashedMap1);
      // Undeclared exception!
      try { 
        abstractHashedMap_HashMapIterator0.setValue(abstractHashedMap0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // setValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap$HashMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      AbstractHashedMap<Integer, AbstractHashedMap<Integer, Integer>> abstractHashedMap0 = new AbstractHashedMap<Integer, AbstractHashedMap<Integer, Integer>>(35, (-87.95763F), 8);
      AbstractHashedMap.HashMapIterator<Integer, AbstractHashedMap<Integer, Integer>> abstractHashedMap_HashMapIterator0 = new AbstractHashedMap.HashMapIterator<Integer, AbstractHashedMap<Integer, Integer>>(abstractHashedMap0);
      // Undeclared exception!
      try { 
        abstractHashedMap_HashMapIterator0.getValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap$HashMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      AbstractHashedMap<Integer, AbstractHashedMap<Integer, Integer>> abstractHashedMap0 = new AbstractHashedMap<Integer, AbstractHashedMap<Integer, Integer>>(0);
      AbstractHashedMap.HashMapIterator<Integer, AbstractHashedMap<Integer, Integer>> abstractHashedMap_HashMapIterator0 = new AbstractHashedMap.HashMapIterator<Integer, AbstractHashedMap<Integer, Integer>>(abstractHashedMap0);
      // Undeclared exception!
      try { 
        abstractHashedMap_HashMapIterator0.getKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getKey() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap$HashMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      AbstractHashedMap<AbstractHashedMap<Integer, FilterInputStream>, Integer> abstractHashedMap0 = new AbstractHashedMap<AbstractHashedMap<Integer, FilterInputStream>, Integer>(262144, 642, (-464));
      AbstractHashedMap<Integer, FilterInputStream> abstractHashedMap1 = new AbstractHashedMap<Integer, FilterInputStream>();
      Integer integer0 = new Integer(262144);
      // Undeclared exception!
      abstractHashedMap0.addMapping(6425, 26, abstractHashedMap1, integer0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      AbstractHashedMap<AbstractHashedMap<Integer, FilterInputStream>, Integer> abstractHashedMap0 = new AbstractHashedMap<AbstractHashedMap<Integer, FilterInputStream>, Integer>(0, 0.75F);
      abstractHashedMap0.checkCapacity();
      assertEquals(0, abstractHashedMap0.size());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      AbstractHashedMap<Integer, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<Integer, FilterInputStream>(5633);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, 3937);
      AbstractHashedMap.HashEntry<Integer, FilterInputStream> abstractHashedMap_HashEntry0 = new AbstractHashedMap.HashEntry<Integer, FilterInputStream>((AbstractHashedMap.HashEntry<Integer, FilterInputStream>) null, 798, (Object) null, pushbackInputStream0);
      abstractHashedMap0.removeEntry(abstractHashedMap_HashEntry0, 798, abstractHashedMap_HashEntry0);
      assertEquals(0, abstractHashedMap0.size());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      AbstractHashedMap<Integer, AbstractHashedMap<Integer, Integer>> abstractHashedMap0 = new AbstractHashedMap<Integer, AbstractHashedMap<Integer, Integer>>(4248, 1101.165F);
      Integer integer0 = new Integer(4248);
      AbstractHashedMap.HashEntry<Integer, AbstractHashedMap<Integer, Integer>> abstractHashedMap_HashEntry0 = abstractHashedMap0.getEntry(integer0);
      AbstractHashedMap<Integer, Integer> abstractHashedMap1 = new AbstractHashedMap<Integer, Integer>(9);
      AbstractHashedMap.HashEntry<Integer, AbstractHashedMap<Integer, Integer>> abstractHashedMap_HashEntry1 = new AbstractHashedMap.HashEntry<Integer, AbstractHashedMap<Integer, Integer>>(abstractHashedMap_HashEntry0, 4248, abstractHashedMap1, abstractHashedMap1);
      String string0 = abstractHashedMap_HashEntry1.toString();
      assertEquals(0, abstractHashedMap1.size());
      assertEquals("{}={}", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      AbstractHashedMap<Integer, Integer> abstractHashedMap0 = new AbstractHashedMap<Integer, Integer>(1, 0.75F, 1);
      HashMap<Integer, FilterInputStream> hashMap0 = new HashMap<Integer, FilterInputStream>();
      AbstractHashedMap<Integer, FilterInputStream> abstractHashedMap1 = new AbstractHashedMap<Integer, FilterInputStream>(hashMap0);
      AbstractHashedMap<Integer, FilterInputStream> abstractHashedMap2 = new AbstractHashedMap<Integer, FilterInputStream>(abstractHashedMap1);
      boolean boolean0 = abstractHashedMap0.isEqualValue(abstractHashedMap2, abstractHashedMap1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<FilterInputStream, Integer> hashMap0 = new HashMap<FilterInputStream, Integer>();
      AbstractHashedMap<FilterInputStream, Integer> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, Integer>(hashMap0);
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 16);
      boolean boolean0 = abstractHashedMap0.isEqualKey(bufferedInputStream0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      AbstractHashedMap<FilterInputStream, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, FilterInputStream>(640);
      AbstractHashedMap<FilterInputStream, Integer> abstractHashedMap1 = new AbstractHashedMap<FilterInputStream, Integer>(640, 640, 640);
      AbstractHashedMap<Integer, Integer> abstractHashedMap2 = new AbstractHashedMap<Integer, Integer>(17, 4869.3384F);
      boolean boolean0 = abstractHashedMap1.isEqualKey(abstractHashedMap2, abstractHashedMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Integer integer0 = new Integer(1);
      HashMap<FilterInputStream, Integer> hashMap0 = new HashMap<FilterInputStream, Integer>();
      hashMap0.put((FilterInputStream) null, integer0);
      AbstractHashedMap<FilterInputStream, Integer> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, Integer>(hashMap0);
      boolean boolean0 = abstractHashedMap0.containsValue(integer0);
      assertTrue(boolean0);
      assertEquals(1, abstractHashedMap0.size());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      AbstractHashedMap<FilterInputStream, Integer> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, Integer>(1872, 1872);
      abstractHashedMap0.putIfAbsent((FilterInputStream) null, (Integer) null);
      boolean boolean0 = abstractHashedMap0.containsValue(abstractHashedMap0);
      assertEquals(1, abstractHashedMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      AbstractHashedMap<FilterInputStream, Integer> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, Integer>(640, 640);
      abstractHashedMap0.putIfAbsent((FilterInputStream) null, (Integer) null);
      boolean boolean0 = abstractHashedMap0.containsValue((Object) null);
      assertFalse(abstractHashedMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Integer integer0 = new Integer(1);
      AbstractHashedMap<FilterInputStream, Integer> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, Integer>(1, 1);
      abstractHashedMap0.putIfAbsent((FilterInputStream) null, integer0);
      boolean boolean0 = abstractHashedMap0.containsValue((Object) null);
      assertEquals(1, abstractHashedMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      AbstractHashedMap<FilterInputStream, Integer> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, Integer>(631, 631);
      abstractHashedMap0.putIfAbsent((FilterInputStream) null, (Integer) null);
      abstractHashedMap0.replace((FilterInputStream) null, (Integer) null);
      assertEquals(1, abstractHashedMap0.size());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<FilterInputStream, Integer> hashMap0 = new HashMap<FilterInputStream, Integer>();
      AbstractHashedMap<FilterInputStream, Integer> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, Integer>(hashMap0);
      boolean boolean0 = abstractHashedMap0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      AbstractHashedMap<FilterInputStream, Integer> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, Integer>();
      assertTrue(abstractHashedMap0.isEmpty());
      
      abstractHashedMap0.size = 1725;
      boolean boolean0 = abstractHashedMap0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      AbstractHashedMap<FilterInputStream, FilterInputStream> abstractHashedMap0 = null;
      try {
        abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, FilterInputStream>((byte)0, (-1.0F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      AbstractHashedMap<FilterInputStream, Map.Entry<Integer, FilterInputStream>> abstractHashedMap0 = null;
      try {
        abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, Map.Entry<Integer, FilterInputStream>>((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Initial capacity must be a non negative number
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      AbstractHashedMap<Integer, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<Integer, FilterInputStream>();
      AbstractHashedMap.KeySet<Integer> abstractHashedMap_KeySet0 = new AbstractHashedMap.KeySet<Integer>(abstractHashedMap0);
      int int0 = abstractHashedMap_KeySet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      AbstractHashedMap<AbstractHashedMap<FilterInputStream, Integer>, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<AbstractHashedMap<FilterInputStream, Integer>, FilterInputStream>(3352);
      AbstractHashedMap.KeySet<AbstractHashedMap<FilterInputStream, Integer>> abstractHashedMap_KeySet0 = new AbstractHashedMap.KeySet<AbstractHashedMap<FilterInputStream, Integer>>(abstractHashedMap0);
      abstractHashedMap_KeySet0.clear();
      assertEquals(0, abstractHashedMap_KeySet0.size());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      AbstractHashedMap<Integer, Integer> abstractHashedMap0 = new AbstractHashedMap<Integer, Integer>(14, 14);
      AbstractHashedMap.KeySet<Integer> abstractHashedMap_KeySet0 = new AbstractHashedMap.KeySet<Integer>(abstractHashedMap0);
      boolean boolean0 = abstractHashedMap_KeySet0.remove(abstractHashedMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      AbstractHashedMap<Integer, Integer> abstractHashedMap0 = new AbstractHashedMap<Integer, Integer>();
      AbstractHashedMap.KeySet<Integer> abstractHashedMap_KeySet0 = new AbstractHashedMap.KeySet<Integer>(abstractHashedMap0);
      Iterator<Integer> iterator0 = abstractHashedMap_KeySet0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      AbstractHashedMap<Integer, Integer> abstractHashedMap0 = new AbstractHashedMap<Integer, Integer>(1549);
      AbstractHashedMap.KeySetIterator<Integer> abstractHashedMap_KeySetIterator0 = new AbstractHashedMap.KeySetIterator<Integer>(abstractHashedMap0);
      // Undeclared exception!
      try { 
        abstractHashedMap_KeySetIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No next() entry in the iteration
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Integer integer0 = new Integer(20);
      HashMap<FilterInputStream, Integer> hashMap0 = new HashMap<FilterInputStream, Integer>();
      hashMap0.put((FilterInputStream) null, integer0);
      AbstractHashedMap<FilterInputStream, Integer> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, Integer>(hashMap0);
      abstractHashedMap0.createKeySetIterator();
      assertEquals(1, abstractHashedMap0.size());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<AbstractHashedMap<Integer, Integer>, FilterInputStream> hashMap0 = new HashMap<AbstractHashedMap<Integer, Integer>, FilterInputStream>();
      AbstractHashedMap<AbstractHashedMap<Integer, Integer>, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<AbstractHashedMap<Integer, Integer>, FilterInputStream>(hashMap0);
      AbstractHashedMap.ValuesIterator<FilterInputStream> abstractHashedMap_ValuesIterator0 = new AbstractHashedMap.ValuesIterator<FilterInputStream>(abstractHashedMap0);
      // Undeclared exception!
      try { 
        abstractHashedMap_ValuesIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No next() entry in the iteration
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      AbstractHashedMap<AbstractHashedMap<Integer, FilterInputStream>, Integer> abstractHashedMap0 = new AbstractHashedMap<AbstractHashedMap<Integer, FilterInputStream>, Integer>(0, 0.75F);
      AbstractHashedMap<Integer, FilterInputStream> abstractHashedMap1 = new AbstractHashedMap<Integer, FilterInputStream>(556);
      Integer integer0 = new Integer((-600));
      abstractHashedMap0.put(abstractHashedMap1, integer0);
      abstractHashedMap0.createValuesIterator();
      assertFalse(abstractHashedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      AbstractHashedMap<Integer, Integer> abstractHashedMap0 = new AbstractHashedMap<Integer, Integer>(0);
      AbstractHashedMap.Values<Integer> abstractHashedMap_Values0 = new AbstractHashedMap.Values<Integer>(abstractHashedMap0);
      boolean boolean0 = abstractHashedMap_Values0.contains(abstractHashedMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      AbstractHashedMap<Integer, Integer> abstractHashedMap0 = new AbstractHashedMap<Integer, Integer>();
      AbstractHashedMap.Values<Integer> abstractHashedMap_Values0 = new AbstractHashedMap.Values<Integer>(abstractHashedMap0);
      Iterator<Integer> iterator0 = abstractHashedMap_Values0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      AbstractHashedMap<Integer, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<Integer, FilterInputStream>(10, 593.551F, 10);
      AbstractHashedMap.Values<FilterInputStream> abstractHashedMap_Values0 = new AbstractHashedMap.Values<FilterInputStream>(abstractHashedMap0);
      int int0 = abstractHashedMap_Values0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      AbstractHashedMap<Integer, AbstractHashedMap<Integer, Integer>> abstractHashedMap0 = new AbstractHashedMap<Integer, AbstractHashedMap<Integer, Integer>>(1628);
      AbstractHashedMap<FilterInputStream, Integer> abstractHashedMap1 = new AbstractHashedMap<FilterInputStream, Integer>();
      Integer integer0 = new Integer((-2385));
      AbstractHashedMap.HashEntry<FilterInputStream, Integer> abstractHashedMap_HashEntry0 = new AbstractHashedMap.HashEntry<FilterInputStream, Integer>((AbstractHashedMap.HashEntry<FilterInputStream, Integer>) null, (-2385), abstractHashedMap0, integer0);
      int int0 = abstractHashedMap1.entryHashCode(abstractHashedMap_HashEntry0);
      assertEquals((-2385), int0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      AbstractHashedMap<AbstractHashedMap<Integer, FilterInputStream>, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<AbstractHashedMap<Integer, FilterInputStream>, FilterInputStream>(1, 1);
      AbstractHashedMap.HashEntry<AbstractHashedMap<Integer, FilterInputStream>, FilterInputStream> abstractHashedMap_HashEntry0 = new AbstractHashedMap.HashEntry<AbstractHashedMap<Integer, FilterInputStream>, FilterInputStream>((AbstractHashedMap.HashEntry<AbstractHashedMap<Integer, FilterInputStream>, FilterInputStream>) null, 1, (Object) null, (FilterInputStream) null);
      AbstractHashedMap<Integer, FilterInputStream> abstractHashedMap1 = abstractHashedMap0.entryKey(abstractHashedMap_HashEntry0);
      assertNull(abstractHashedMap1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      AbstractHashedMap<FilterInputStream, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<FilterInputStream, FilterInputStream>();
      // Undeclared exception!
      try { 
        abstractHashedMap0.putAll((Map<? extends FilterInputStream, ? extends FilterInputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4086, (-5117));
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      AbstractHashedMap<AbstractHashedMap<Integer, Integer>, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<AbstractHashedMap<Integer, Integer>, FilterInputStream>(4067, 1056, (byte) (-120));
      Integer integer0 = new Integer((-5117));
      AbstractHashedMap.HashEntry<AbstractHashedMap<Integer, Integer>, FilterInputStream> abstractHashedMap_HashEntry0 = new AbstractHashedMap.HashEntry<AbstractHashedMap<Integer, Integer>, FilterInputStream>((AbstractHashedMap.HashEntry<AbstractHashedMap<Integer, Integer>, FilterInputStream>) null, (-571), integer0, dataInputStream0);
      FilterInputStream filterInputStream0 = abstractHashedMap0.entryValue(abstractHashedMap_HashEntry0);
      assertSame(dataInputStream0, filterInputStream0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      AbstractHashedMap<Integer, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<Integer, FilterInputStream>();
      // Undeclared exception!
      try { 
        abstractHashedMap0.entryNext((AbstractHashedMap.HashEntry<Integer, FilterInputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      AbstractHashedMap<Integer, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<Integer, FilterInputStream>(5633);
      Object object0 = new Object();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 639);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      AbstractHashedMap.HashEntry<Integer, FilterInputStream> abstractHashedMap_HashEntry0 = new AbstractHashedMap.HashEntry<Integer, FilterInputStream>((AbstractHashedMap.HashEntry<Integer, FilterInputStream>) null, 639, object0, pushbackInputStream0);
      Integer integer0 = new Integer(639);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      abstractHashedMap0.reuseEntry(abstractHashedMap_HashEntry0, 639, 639, integer0, dataInputStream0);
      assertEquals(0, abstractHashedMap0.size());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      AbstractHashedMap<AbstractHashedMap<Integer, Integer>, FilterInputStream> abstractHashedMap0 = new AbstractHashedMap<AbstractHashedMap<Integer, Integer>, FilterInputStream>();
      AbstractHashedMap.EntrySet<AbstractHashedMap<Integer, Integer>, FilterInputStream> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<AbstractHashedMap<Integer, Integer>, FilterInputStream>(abstractHashedMap0);
      boolean boolean0 = abstractHashedMap_EntrySet0.contains(abstractHashedMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      AbstractHashedMap<Integer, Integer> abstractHashedMap0 = new AbstractHashedMap<Integer, Integer>(1);
      // Undeclared exception!
      try { 
        abstractHashedMap0.clone();
        fail("Expecting exception: InternalError");
      
      } catch(InternalError e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }
}
