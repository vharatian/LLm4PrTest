/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 09:37:53 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter;
import org.apache.commons.collections4.bloomfilter.BitMapProducer;
import org.apache.commons.collections4.bloomfilter.BloomFilter;
import org.apache.commons.collections4.bloomfilter.EnhancedDoubleHasher;
import org.apache.commons.collections4.bloomfilter.Hasher;
import org.apache.commons.collections4.bloomfilter.IndexProducer;
import org.apache.commons.collections4.bloomfilter.Shape;
import org.apache.commons.collections4.bloomfilter.SimpleBloomFilter;
import org.apache.commons.collections4.bloomfilter.SparseBloomFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class BloomFilter_ESTest extends BloomFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Shape shape0 = Shape.fromKM(22, 22);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher((-21L), 3878L);
      arrayCountingBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      simpleBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      int int0 = arrayCountingBloomFilter0.estimateIntersection(simpleBloomFilter0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1, 1592);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-7);
      byteArray0[3] = (byte)85;
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      boolean boolean0 = simpleBloomFilter0.contains((BloomFilter) sparseBloomFilter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Shape shape0 = Shape.fromNM(64, 64);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(478L, 0);
      boolean boolean0 = simpleBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(1, 1, 1);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      byte[] byteArray0 = new byte[9];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      boolean boolean0 = arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      boolean boolean1 = arrayCountingBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Shape shape0 = Shape.fromNM(64, 64);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      boolean boolean0 = simpleBloomFilter0.merge((BloomFilter) arrayCountingBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(1, 1, 1);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      byte[] byteArray0 = new byte[1];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.merge((BloomFilter) simpleBloomFilter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(20, 1, 1);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      byte[] byteArray0 = new byte[20];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      int int0 = arrayCountingBloomFilter0.estimateUnion(sparseBloomFilter0);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Shape shape0 = Shape.fromNM(64, 64);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(64, 64);
      simpleBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      boolean boolean0 = simpleBloomFilter0.contains((Hasher) enhancedDoubleHasher0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Shape shape0 = Shape.fromKM(31, 728);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      byte[] byteArray0 = new byte[6];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      boolean boolean0 = arrayCountingBloomFilter0.contains((Hasher) enhancedDoubleHasher0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(63, 2028, 728);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 2028;
      BitMapProducer bitMapProducer0 = BitMapProducer.fromBitMapArray(longArray0);
      boolean boolean0 = simpleBloomFilter0.contains(bitMapProducer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2522, 1);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      byte[] byteArray0 = new byte[1];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      arrayCountingBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.merge((Hasher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // hasher
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = BloomFilter.SPARSE;
      Shape shape0 = Shape.fromNMK(20, Integer.MAX_VALUE, 64);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      SimpleBloomFilter simpleBloomFilter1 = simpleBloomFilter0.copy();
      simpleBloomFilter1.estimateN();
      // Undeclared exception!
      simpleBloomFilter1.merge((BloomFilter) simpleBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1, 1);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.merge((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(1, 1, 1);
      Shape shape1 = Shape.fromKM(1, 951);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      SimpleBloomFilter simpleBloomFilter1 = new SimpleBloomFilter(shape1);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.merge((BloomFilter) simpleBloomFilter1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BitMapProducer should send at most 1 maps
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SimpleBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(8, Integer.MAX_VALUE, 2775);
      shape0.getProbability(2775);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)64;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-102);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-50);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)2;
      byteArray0[4] = byte4;
      byte byte5 = (byte)104;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-1);
      byteArray0[6] = byte6;
      byte byte7 = (byte)5;
      byteArray0[7] = byte7;
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      IndexProducer indexProducer0 = enhancedDoubleHasher0.indices(shape0);
      simpleBloomFilter0.merge(indexProducer0);
      // Undeclared exception!
      simpleBloomFilter0.isFull();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = BloomFilter.SPARSE;
      Shape shape0 = Shape.fromNMK(8, Integer.MAX_VALUE, 2775);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      simpleBloomFilter0.estimateUnion(simpleBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Shape shape0 = Shape.fromKM(26, 26);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.estimateUnion((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(1, 1, 1);
      Shape shape1 = Shape.fromNMK(1, 255, 924);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape1);
      SimpleBloomFilter simpleBloomFilter1 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter1.estimateUnion(simpleBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BitMapProducer should send at most 1 maps
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SimpleBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Shape shape0 = Shape.fromNM(Integer.MAX_VALUE, Integer.MAX_VALUE);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      SimpleBloomFilter simpleBloomFilter1 = simpleBloomFilter0.copy();
      // Undeclared exception!
      simpleBloomFilter1.estimateIntersection(simpleBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(26, 26, 26);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.estimateIntersection((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(1, 1, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.contains((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Shape shape0 = Shape.fromNM(12, 12);
      Shape shape1 = Shape.fromNMK(12, 91, 1);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-75);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.contains((BloomFilter) sparseBloomFilter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1143, 1143);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.contains((BitMapProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // producer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(63, 2028, 728);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      boolean boolean0 = simpleBloomFilter0.contains((BitMapProducer) simpleBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Shape shape0 = Shape.fromKM(20, 20);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)53;
      byteArray0[6] = (byte)119;
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher((byte)0, (byte)90);
      simpleBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      byteArray0[7] = (byte)67;
      EnhancedDoubleHasher enhancedDoubleHasher1 = new EnhancedDoubleHasher(byteArray0);
      sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher1);
      int int0 = simpleBloomFilter0.estimateIntersection(sparseBloomFilter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1, 1);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher((-3483967564700757785L), 268L);
      arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      ArrayCountingBloomFilter arrayCountingBloomFilter1 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter1.estimateIntersection(arrayCountingBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The estimated N for the union of the filters is infinite
         //
         verifyException("org.apache.commons.collections4.bloomfilter.BloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1, 1);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1, 1);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      int int0 = arrayCountingBloomFilter0.estimateIntersection(sparseBloomFilter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(1, 1, 1);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1, 1);
      arrayCountingBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      int int0 = arrayCountingBloomFilter0.estimateIntersection(arrayCountingBloomFilter0);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1, 1);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher((-1L), 3878L);
      arrayCountingBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      int int0 = arrayCountingBloomFilter0.estimateIntersection(simpleBloomFilter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1, 1592);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      int int0 = simpleBloomFilter0.estimateIntersection(sparseBloomFilter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1, 1);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher((-1L), 3878L);
      arrayCountingBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      int int0 = arrayCountingBloomFilter0.estimateN();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1, 1);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1, 1);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      boolean boolean0 = sparseBloomFilter0.isFull();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1, 1592);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      boolean boolean0 = sparseBloomFilter0.isFull();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1, 1592);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.contains((BloomFilter) simpleBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1, 1);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.contains((Hasher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Hasher
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1, 1592);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      int int0 = arrayCountingBloomFilter0.estimateUnion(arrayCountingBloomFilter0);
      assertEquals(0, int0);
  }
}
