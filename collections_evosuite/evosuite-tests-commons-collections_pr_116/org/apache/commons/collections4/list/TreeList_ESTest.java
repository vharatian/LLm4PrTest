/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 18:27:22 GMT 2025
 */

package org.apache.commons.collections4.list;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import org.apache.commons.collections4.list.TreeList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class TreeList_ESTest extends TreeList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2903));
      linkedList0.add(integer0);
      linkedList0.add((Integer) null);
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      int int0 = treeList0.lastIndexOf((Object) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      boolean boolean0 = linkedList0.add((Integer) null);
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      treeList0.add((Object) linkedList0);
      treeList0.add((Object) linkedList0);
      boolean boolean1 = treeList0.addAll((Collection<?>) linkedList0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      treeList0.add((Object) null);
      Integer integer0 = new Integer(1);
      treeList0.add((Object) integer0);
      treeList0.addAll((Collection<?>) treeList0);
      treeList0.add((Object) treeList0);
      boolean boolean0 = treeList0.addAll((Collection<?>) treeList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      linkedList0.addFirst((Integer) null);
      linkedList0.add((Integer) null);
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      linkedList0.add((Integer) null);
      treeList0.addAll((Collection<?>) linkedList0);
      treeList0.toArray();
      assertEquals(7, treeList0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      treeList0.add((Object) treeList0);
      TreeList<Object> treeList1 = new TreeList<Object>(treeList0);
      treeList1.addAll((Collection<?>) treeList0);
      treeList1.add((Object) treeList0);
      boolean boolean0 = treeList0.addAll((Collection<?>) treeList1);
      assertTrue(boolean0);
      
      boolean boolean1 = treeList1.removeAll(treeList0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      Integer integer0 = new Integer(642);
      treeList0.add((Object) integer0);
      treeList0.add((Object) integer0);
      TreeList.TreeListIterator<Object> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Object>(treeList0, 1);
      treeList_TreeListIterator0.next();
      assertFalse(treeList_TreeListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      TreeList.TreeListIterator<Object> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Object>(treeList0, (-2395));
      int int0 = treeList_TreeListIterator0.nextIndex();
      assertEquals((-2395), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      TreeList.TreeListIterator<Integer> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Integer>(treeList0, 1706);
      boolean boolean0 = treeList_TreeListIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      TreeList.TreeListIterator<Object> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Object>(treeList0, 621);
      treeList_TreeListIterator0.checkModCount();
      assertFalse(treeList_TreeListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      int int0 = treeList0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      Integer integer0 = new Integer(1);
      treeList0.add((Object) integer0);
      int int0 = treeList0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      Integer integer0 = new Integer(1);
      treeList0.add((Object) integer0);
      ListIterator<Object> listIterator0 = treeList0.listIterator();
      treeList0.add(1, (Object) listIterator0);
      treeList0.set(1, treeList0);
      assertTrue(treeList0.contains(1));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      Integer integer0 = new Integer(1);
      treeList0.add((Object) integer0);
      TreeList.TreeListIterator<Object> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Object>(treeList0, 1);
      treeList_TreeListIterator0.add(treeList0);
      treeList0.remove(1);
      assertEquals(1, treeList0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      linkedList0.add((Integer) null);
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      ListIterator<Object> listIterator0 = treeList0.listIterator(2);
      assertTrue(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      ListIterator<Object> listIterator0 = treeList0.listIterator(0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      Integer integer0 = new Integer(642);
      treeList0.add((Object) integer0);
      TreeList.TreeListIterator<Object> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Object>(treeList0, 1);
      treeList_TreeListIterator0.previous();
      Object object0 = new Object();
      treeList_TreeListIterator0.add(object0);
      assertEquals(1, treeList_TreeListIterator0.nextIndex());
      
      int int0 = treeList0.indexOf(integer0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      TreeList<Integer> treeList0 = new TreeList<Integer>(linkedList0);
      treeList0.addAll(1, (Collection<? extends Integer>) linkedList0);
      Integer integer0 = treeList0.get(1);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      Integer integer0 = new Integer(1);
      treeList0.add((Object) integer0);
      treeList0.add((Object) treeList0);
      TreeList treeList1 = (TreeList)treeList0.get(1);
      assertEquals(2, treeList1.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      TreeList<Integer> treeList0 = new TreeList<Integer>(linkedList0);
      boolean boolean0 = treeList0.contains((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      // Undeclared exception!
      try { 
        treeList0.remove((-1407));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:-1407, size=0
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      // Undeclared exception!
      try { 
        treeList0.listIterator((-706));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:-706, size=0
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      Integer integer0 = new Integer(1);
      treeList0.add((Object) integer0);
      List<Object> list0 = treeList0.subList(0, 1);
      // Undeclared exception!
      try { 
        treeList0.addAll((Collection<?>) list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      // Undeclared exception!
      try { 
        treeList0.addAll((Collection<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      Integer integer0 = new Integer(1538);
      // Undeclared exception!
      try { 
        treeList0.add((-2992), (Object) integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:-2992, size=0
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TreeList<Integer> treeList0 = null;
      try {
        treeList0 = new TreeList<Integer>((Collection<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      Integer integer0 = new Integer((-565));
      treeList0.add((Object) integer0);
      treeList0.add((Object) integer0);
      treeList0.add((Object) integer0);
      treeList0.addAll((Collection<?>) treeList0);
      TreeList<Object> treeList1 = new TreeList<Object>(treeList0);
      TreeList<Object> treeList2 = new TreeList<Object>(treeList1);
      assertEquals(6, treeList0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      treeList0.add((Object) treeList0);
      treeList0.add((Object) null);
      TreeList<Object> treeList1 = new TreeList<Object>(treeList0);
      boolean boolean0 = treeList0.removeAll(treeList1);
      assertEquals(0, treeList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      Iterator<Object> iterator0 = treeList0.iterator();
      treeList0.add((Object) iterator0);
      treeList0.add((Object) treeList0);
      treeList0.addAll((Collection<?>) treeList0);
      treeList0.addAll((Collection<?>) treeList0);
      boolean boolean0 = treeList0.removeAll(treeList0);
      assertEquals(0, treeList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      TreeList<Integer> treeList0 = new TreeList<Integer>(linkedList0);
      int int0 = treeList0.indexOf(linkedList0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      Integer integer0 = new Integer(642);
      treeList0.add((Object) integer0);
      int int0 = treeList0.indexOf(integer0);
      assertEquals(1, treeList0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      // Undeclared exception!
      try { 
        treeList0.get(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:2, size=0
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      int int0 = treeList0.lastIndexOf((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      TreeList.TreeListIterator<Object> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Object>(treeList0, (-1232));
      // Undeclared exception!
      try { 
        treeList_TreeListIterator0.set(treeList0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      Integer integer0 = new Integer((-565));
      treeList0.add((Object) integer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      treeList0.sort(comparator0);
      assertEquals(1, treeList0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      treeList0.add((Object) treeList0);
      TreeList.TreeListIterator<Object> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Object>(treeList0, 1);
      treeList_TreeListIterator0.previous();
      assertEquals(1, treeList0.size());
      
      treeList_TreeListIterator0.remove();
      assertFalse(treeList_TreeListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      TreeList.TreeListIterator<Integer> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Integer>(treeList0, 1);
      // Undeclared exception!
      try { 
        treeList_TreeListIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      TreeList.TreeListIterator<Object> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Object>(treeList0, (-357));
      // Undeclared exception!
      try { 
        treeList_TreeListIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Already at start of list.
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      TreeList.TreeListIterator<Integer> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Integer>(treeList0, 285);
      // Undeclared exception!
      try { 
        treeList_TreeListIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No element at index 285.
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      TreeList.TreeListIterator<Object> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Object>(treeList0, 2);
      treeList0.add((Object) treeList_TreeListIterator0);
      // Undeclared exception!
      try { 
        treeList_TreeListIterator0.remove();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      Integer integer0 = new Integer(1);
      treeList0.add((Object) integer0);
      TreeList<Object> treeList1 = new TreeList<Object>(treeList0);
      treeList0.addAll((Collection<?>) treeList1);
      treeList0.add((Object) treeList1);
      assertTrue(treeList0.contains(1));
      
      treeList1.addAll((Collection<?>) treeList0);
      TreeList.TreeListIterator<Object> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Object>(treeList1, 1);
      Object object0 = treeList_TreeListIterator0.previous();
      assertEquals(0, treeList_TreeListIterator0.nextIndex());
      
      treeList_TreeListIterator0.add(object0);
      assertTrue(treeList1.contains(1));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      linkedList0.add((Integer) null);
      linkedList0.add((Integer) null);
      linkedList0.add((Integer) null);
      Integer integer0 = new Integer(3582);
      linkedList0.add(integer0);
      TreeList<Integer> treeList0 = new TreeList<Integer>(linkedList0);
      treeList0.add(0, integer0);
      treeList0.remove(1);
      assertEquals(5, treeList0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      linkedList0.add((Integer) null);
      linkedList0.add((Integer) null);
      Integer integer0 = new Integer(2235);
      linkedList0.add(integer0);
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      TreeList.TreeListIterator<Object> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Object>(treeList0, 1);
      Object object0 = new Object();
      treeList_TreeListIterator0.add(object0);
      treeList0.removeAll(linkedList0);
      assertEquals(1, treeList0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      Integer integer0 = new Integer(1);
      treeList0.add((Object) integer0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add(integer0);
      TreeList.TreeListIterator<Object> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Object>(treeList0, 1);
      treeList_TreeListIterator0.previous();
      treeList_TreeListIterator0.add(treeList0);
      boolean boolean0 = treeList0.removeAll(linkedList0);
      assertEquals(1, treeList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      linkedList0.add((Integer) null);
      linkedList0.add((Integer) null);
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      TreeList.TreeListIterator<Object> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Object>(treeList0, 1);
      treeList_TreeListIterator0.previous();
      Object object0 = new Object();
      treeList_TreeListIterator0.add(object0);
      boolean boolean0 = treeList0.removeAll(linkedList0);
      assertEquals(1, treeList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      linkedList0.add((Integer) null);
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      Integer integer0 = new Integer(828);
      linkedList0.add(integer0);
      linkedList0.add((Integer) null);
      TreeList<Object> treeList1 = new TreeList<Object>(linkedList0);
      boolean boolean0 = treeList0.addAll((Collection<?>) treeList1);
      assertEquals(6, treeList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      linkedList0.add((Integer) null);
      linkedList0.add((Integer) null);
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      TreeList.TreeListIterator<Object> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Object>(treeList0, 1);
      treeList_TreeListIterator0.add(linkedList0);
      treeList_TreeListIterator0.add(treeList0);
      treeList0.removeAll(linkedList0);
      assertEquals(2, treeList0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2903));
      linkedList0.add(integer0);
      linkedList0.add((Integer) null);
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      treeList0.addAll((Collection<?>) linkedList0);
      treeList0.remove(1);
      assertEquals(3, treeList0.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      linkedList0.add((Integer) null);
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      TreeList.TreeListIterator<Object> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Object>(treeList0, 1);
      Object object0 = new Object();
      treeList_TreeListIterator0.add(object0);
      treeList0.removeAll(linkedList0);
      assertEquals(1, treeList0.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      treeList0.add((Object) treeList0);
      treeList0.addAll((Collection<?>) treeList0);
      TreeList.TreeListIterator<Object> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Object>(treeList0, 1);
      treeList_TreeListIterator0.previous();
      assertEquals(2, treeList0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      TreeList<Object> treeList0 = new TreeList<Object>();
      treeList0.add((Object) linkedList0);
      TreeList<Object> treeList1 = new TreeList<Object>(linkedList0);
      boolean boolean0 = treeList0.removeAll(treeList1);
      assertEquals(1, treeList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      // Undeclared exception!
      try { 
        treeList0.set((-1), treeList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:-1, size=0
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      Integer integer0 = new Integer(1);
      treeList0.add((Object) integer0);
      TreeList<Object> treeList1 = new TreeList<Object>();
      boolean boolean0 = treeList1.addAll((Collection<?>) treeList0);
      assertEquals(1, treeList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      assertEquals(0, treeList0.size());
      
      boolean boolean0 = treeList0.addAll((Collection<?>) treeList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      Object[] objectArray0 = treeList0.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      TreeList.TreeListIterator<Integer> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Integer>(treeList0, (-1707));
      boolean boolean0 = treeList0.contains(treeList_TreeListIterator0);
      assertFalse(boolean0);
      assertEquals((-1708), treeList_TreeListIterator0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      linkedList0.add((Integer) null);
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      treeList0.set(1, (Object) null);
      assertEquals(2, treeList0.size());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      TreeList.TreeListIterator<Integer> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Integer>(treeList0, 11);
      int int0 = treeList_TreeListIterator0.previousIndex();
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      treeList0.clear();
      assertEquals(0, treeList0.size());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      TreeList<Integer> treeList0 = new TreeList<Integer>(linkedList0);
      ListIterator<Integer> listIterator0 = treeList0.listIterator();
      assertFalse(listIterator0.hasNext());
      assertEquals(0, treeList0.size());
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      Integer integer0 = new Integer(1);
      treeList0.add((Object) integer0);
      TreeList<Object> treeList1 = new TreeList<Object>(treeList0);
      treeList0.addAll((Collection<?>) treeList1);
      treeList0.add((Object) treeList1);
      treeList1.addAll((Collection<?>) treeList0);
      TreeList.TreeListIterator<Object> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Object>(treeList1, 1);
      treeList_TreeListIterator0.add(integer0);
      assertEquals(3, treeList0.size());
      assertTrue(treeList1.contains(1));
  }
}
