/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 13:29:20 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.bloomfilter.IndexProducer;
import org.apache.commons.collections4.bloomfilter.Shape;
import org.apache.commons.collections4.bloomfilter.SimpleHasher;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SimpleHasher_ESTest extends SimpleHasher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-46);
      SimpleHasher simpleHasher0 = new SimpleHasher(byteArray0);
      assertEquals((-7046029254386353131L), simpleHasher0.getDefaultIncrement());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = SimpleHasher.mod(654, 654);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = SimpleHasher.mod((-2145369998), (-2145369998));
      assertEquals((-871020640), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        SimpleHasher.mod(4129535L, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SimpleHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleHasher simpleHasher0 = null;
      try {
        simpleHasher0 = new SimpleHasher((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SimpleHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleHasher simpleHasher0 = new SimpleHasher(0L, (-7046029254386353131L));
      long long0 = simpleHasher0.getDefaultIncrement();
      assertEquals((-7046029254386353131L), long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = SimpleHasher.mod(0L, (-1243));
      assertEquals(1243, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = SimpleHasher.mod((-7046029254386353131L), 2143297520);
      assertEquals(1707059925, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleHasher simpleHasher0 = new SimpleHasher(0L, 0L);
      assertEquals((-7046029254386353131L), simpleHasher0.getDefaultIncrement());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[8] = (byte) (-122);
      SimpleHasher simpleHasher0 = new SimpleHasher(byteArray0);
      assertEquals((-7046029254386353131L), simpleHasher0.getDefaultIncrement());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      SimpleHasher simpleHasher0 = null;
      try {
        simpleHasher0 = new SimpleHasher(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // buffer length must be greater than 0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SimpleHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Shape shape0 = Shape.fromNM(727, 727);
      SimpleHasher simpleHasher0 = new SimpleHasher(727, 727);
      IndexProducer indexProducer0 = simpleHasher0.indices(shape0);
      assertNotNull(indexProducer0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      SimpleHasher simpleHasher0 = new SimpleHasher(byteArray0);
      simpleHasher0.uniqueIndices((Shape) null);
      assertEquals((-7046029254386353131L), simpleHasher0.getDefaultIncrement());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      SimpleHasher simpleHasher0 = new SimpleHasher(byteArray0);
      // Undeclared exception!
      try { 
        simpleHasher0.indices((Shape) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // shape
         //
         verifyException("java.util.Objects", e);
      }
  }
}
