/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 13:27:15 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Vector;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter;
import org.apache.commons.collections4.bloomfilter.BitCountProducer;
import org.apache.commons.collections4.bloomfilter.BitMapProducer;
import org.apache.commons.collections4.bloomfilter.BloomFilter;
import org.apache.commons.collections4.bloomfilter.CountingBloomFilter;
import org.apache.commons.collections4.bloomfilter.Hasher;
import org.apache.commons.collections4.bloomfilter.HasherCollection;
import org.apache.commons.collections4.bloomfilter.IndexProducer;
import org.apache.commons.collections4.bloomfilter.LongBiPredicate;
import org.apache.commons.collections4.bloomfilter.Shape;
import org.apache.commons.collections4.bloomfilter.SimpleBloomFilter;
import org.apache.commons.collections4.bloomfilter.SimpleHasher;
import org.apache.commons.collections4.bloomfilter.SparseBloomFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SimpleBloomFilter_ESTest extends SimpleBloomFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1193, 1193);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(arrayCountingBloomFilter0);
      SimpleHasher simpleHasher0 = new SimpleHasher(1193L, 1193L);
      boolean boolean0 = simpleBloomFilter0.mergeInPlace((Hasher) simpleHasher0);
      boolean boolean1 = simpleBloomFilter0.mergeInPlace((BloomFilter) simpleBloomFilter0);
      assertFalse(simpleBloomFilter0.isSparse());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2, 1033);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      SimpleHasher simpleHasher0 = new SimpleHasher(1033, 2);
      boolean boolean0 = simpleBloomFilter0.mergeInPlace((Hasher) simpleHasher0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Shape shape0 = Shape.fromKM(307, 307);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, (IndexProducer) sparseBloomFilter0);
      boolean boolean0 = simpleBloomFilter0.isSparse();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Shape shape0 = Shape.fromNM(489, 489);
      SimpleHasher simpleHasher0 = new SimpleHasher(489, 0L);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, simpleHasher0);
      Hasher.IndexFilter.ArrayTracker hasher_IndexFilter_ArrayTracker0 = new Hasher.IndexFilter.ArrayTracker(shape0);
      Hasher.IndexFilter hasher_IndexFilter0 = Hasher.IndexFilter.create(shape0, hasher_IndexFilter_ArrayTracker0);
      boolean boolean0 = simpleBloomFilter0.forEachIndex(hasher_IndexFilter0);
      boolean boolean1 = simpleBloomFilter0.forEachIndex(hasher_IndexFilter_ArrayTracker0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1193, 1193);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(arrayCountingBloomFilter0);
      int[] intArray0 = new int[1];
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      boolean boolean0 = simpleBloomFilter0.contains(indexProducer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1, 5206);
      SimpleHasher simpleHasher0 = new SimpleHasher(1, (-829L));
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, simpleHasher0);
      simpleBloomFilter0.cardinality();
      int int0 = simpleBloomFilter0.cardinality();
      assertEquals(3609, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Shape shape0 = Shape.fromKM(698997, 698997);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      SimpleHasher simpleHasher0 = new SimpleHasher(1914L, 698997);
      // Undeclared exception!
      simpleBloomFilter0.mergeInPlace((Hasher) simpleHasher0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Shape shape0 = Shape.fromKM(698997, 698997);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      simpleBloomFilter0.mergeInPlace((BloomFilter) simpleBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(2, 2, 2);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.mergeInPlace((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(13, 13, 13);
      Shape shape1 = Shape.fromNM(30, 30);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape1);
      Hasher[] hasherArray0 = new Hasher[8];
      SimpleHasher simpleHasher0 = new SimpleHasher((-2996L), 13);
      hasherArray0[0] = (Hasher) simpleHasher0;
      Vector<Hasher> vector0 = new Vector<Hasher>();
      HasherCollection hasherCollection0 = new HasherCollection(vector0);
      hasherArray0[1] = (Hasher) hasherCollection0;
      hasherArray0[2] = (Hasher) simpleHasher0;
      hasherArray0[3] = (Hasher) hasherCollection0;
      hasherArray0[4] = (Hasher) hasherCollection0;
      hasherArray0[5] = (Hasher) hasherCollection0;
      hasherArray0[6] = (Hasher) hasherCollection0;
      hasherArray0[7] = (Hasher) hasherCollection0;
      HasherCollection hasherCollection1 = new HasherCollection(hasherArray0);
      CountingBloomFilter countingBloomFilter0 = arrayCountingBloomFilter0.merge((Hasher) hasherCollection1);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.mergeInPlace((BloomFilter) countingBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // IndexProducer should only send values in the range[0,12]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SimpleBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2, 2);
      Shape shape1 = Shape.fromNMK(2, 72, 72);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      SimpleBloomFilter simpleBloomFilter1 = new SimpleBloomFilter(shape1, (BitMapProducer) simpleBloomFilter0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.mergeInPlace((BloomFilter) simpleBloomFilter1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BitMapProducer should send at most 1 maps
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SimpleBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2643, 2643);
      SimpleHasher simpleHasher0 = new SimpleHasher(2643, 1131L);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, simpleHasher0);
      Hasher.IndexFilter.ArrayTracker hasher_IndexFilter_ArrayTracker0 = new Hasher.IndexFilter.ArrayTracker(shape0);
      // Undeclared exception!
      simpleBloomFilter0.forEachIndex(hasher_IndexFilter_ArrayTracker0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Shape shape0 = Shape.fromNM(489, 489);
      SimpleHasher simpleHasher0 = new SimpleHasher(489, 0L);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, simpleHasher0);
      Hasher.IndexFilter.ArrayTracker hasher_IndexFilter_ArrayTracker0 = new Hasher.IndexFilter.ArrayTracker(shape0);
      Hasher.IndexFilter hasher_IndexFilter0 = Hasher.IndexFilter.create(shape0, hasher_IndexFilter_ArrayTracker0);
      hasher_IndexFilter_ArrayTracker0.test(121);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.forEachIndex(hasher_IndexFilter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Shape shape0 = Shape.fromKM(3642, 3642);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      CountingBloomFilter countingBloomFilter0 = arrayCountingBloomFilter0.merge((BloomFilter) arrayCountingBloomFilter0);
      simpleBloomFilter0.contains((IndexProducer) arrayCountingBloomFilter0);
      // Undeclared exception!
      simpleBloomFilter0.forEachBitMapPair(countingBloomFilter0, (LongBiPredicate) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Shape shape0 = Shape.fromNM(489, 489);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.forEachBitMapPair(simpleBloomFilter0, (LongBiPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Shape shape0 = Shape.fromNM(699004, 699004);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      long[] longArray0 = new long[1];
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(longBiPredicate0).test(anyLong() , anyLong());
      BitMapProducer.CountingLongPredicate bitMapProducer_CountingLongPredicate0 = new BitMapProducer.CountingLongPredicate(longArray0, longBiPredicate0);
      LongPredicate longPredicate0 = bitMapProducer_CountingLongPredicate0.negate();
      // Undeclared exception!
      simpleBloomFilter0.forEachBitMap(longPredicate0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2643, 2643);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.forEachBitMap((LongPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // consumer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(10, 10, 29);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, (BitMapProducer) arrayCountingBloomFilter0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, (BitMapProducer) sparseBloomFilter0);
      long[] longArray0 = new long[7];
      BitMapProducer.CountingLongPredicate bitMapProducer_CountingLongPredicate0 = new BitMapProducer.CountingLongPredicate(longArray0, (LongBiPredicate) null);
      bitMapProducer_CountingLongPredicate0.idx = 985;
      // Undeclared exception!
      try { 
        simpleBloomFilter0.forEachBitMap(bitMapProducer_CountingLongPredicate0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Shape shape0 = Shape.fromKM(3642, 3642);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      CountingBloomFilter countingBloomFilter0 = arrayCountingBloomFilter0.merge((BloomFilter) arrayCountingBloomFilter0);
      simpleBloomFilter0.mergeInPlace((BloomFilter) countingBloomFilter0);
      // Undeclared exception!
      simpleBloomFilter0.contains((IndexProducer) arrayCountingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Shape shape0 = Shape.fromKM(550, 550);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.contains((IndexProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SimpleBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Shape shape0 = Shape.fromKM(8202, 8202);
      SimpleHasher simpleHasher0 = new SimpleHasher(8202, 8202);
      IndexProducer indexProducer0 = simpleHasher0.uniqueIndices(shape0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, indexProducer0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, indexProducer0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Shape shape0 = Shape.fromKM(461845907, 2619);
      SimpleHasher simpleHasher0 = new SimpleHasher(2619, 461845907);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, simpleHasher0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Shape shape0 = Shape.fromNM(8, 8);
      SimpleBloomFilter simpleBloomFilter0 = null;
      try {
        simpleBloomFilter0 = new SimpleBloomFilter(shape0, (Hasher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // hasher
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Shape shape0 = Shape.fromNP(588, 4.9E-324);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      SimpleBloomFilter simpleBloomFilter1 = new SimpleBloomFilter(shape0, (BitMapProducer) simpleBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleBloomFilter simpleBloomFilter0 = null;
      try {
        simpleBloomFilter0 = new SimpleBloomFilter((Shape) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // shape
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Shape shape0 = Shape.fromNM(699004, 699004);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      SimpleBloomFilter simpleBloomFilter1 = new SimpleBloomFilter(simpleBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleBloomFilter simpleBloomFilter0 = null;
      try {
        simpleBloomFilter0 = new SimpleBloomFilter((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2, 1033);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, (IndexProducer) arrayCountingBloomFilter0);
      long[] longArray0 = new long[1];
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(longBiPredicate0).test(anyLong() , anyLong());
      BitMapProducer.CountingLongPredicate bitMapProducer_CountingLongPredicate0 = new BitMapProducer.CountingLongPredicate(longArray0, longBiPredicate0);
      boolean boolean0 = simpleBloomFilter0.forEachBitMap(bitMapProducer_CountingLongPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1193, 1193);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(arrayCountingBloomFilter0);
      long[] longArray0 = new long[5];
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(longBiPredicate0).test(anyLong() , anyLong());
      BitMapProducer.CountingLongPredicate bitMapProducer_CountingLongPredicate0 = new BitMapProducer.CountingLongPredicate(longArray0, longBiPredicate0);
      LongPredicate longPredicate0 = bitMapProducer_CountingLongPredicate0.negate();
      boolean boolean0 = simpleBloomFilter0.forEachBitMap(longPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Shape shape0 = Shape.fromKM(15, 15);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.forEachIndex((IntPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // consumer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2, 1033);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      Shape shape1 = simpleBloomFilter0.getShape();
      assertEquals(358, shape1.getNumberOfHashFunctions());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1193, 1193);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, (IndexProducer) arrayCountingBloomFilter0);
      boolean boolean0 = simpleBloomFilter0.contains((BloomFilter) simpleBloomFilter0);
      assertTrue(boolean0);
      assertFalse(simpleBloomFilter0.isSparse());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.mergeInPlace((Hasher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // hasher
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Shape shape0 = Shape.fromKM(489, 489);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      SimpleBloomFilter simpleBloomFilter1 = new SimpleBloomFilter(simpleBloomFilter0);
      int int0 = simpleBloomFilter1.cardinality();
      assertEquals(0, int0);
      assertFalse(simpleBloomFilter1.isSparse());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2629, 2629);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      int int0 = simpleBloomFilter0.cardinality();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Shape shape0 = Shape.fromKM(9, 9);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1828;
      BitMapProducer bitMapProducer0 = BitMapProducer.fromBitMapArray(longArray0);
      SimpleBloomFilter simpleBloomFilter0 = null;
      try {
        simpleBloomFilter0 = new SimpleBloomFilter(shape0, bitMapProducer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BitMapProducer set a bit higher than the limit for the shape: 9
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SimpleBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1116, 1116);
      int[] intArray0 = new int[2];
      intArray0[1] = 1116;
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      SimpleBloomFilter simpleBloomFilter0 = null;
      try {
        simpleBloomFilter0 = new SimpleBloomFilter(shape0, indexProducer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // IndexProducer should only send values in the range[0,1115]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SimpleBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Shape shape0 = Shape.fromKM(37, 37);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      BitCountProducer bitCountProducer0 = BitCountProducer.from(indexProducer0);
      SimpleBloomFilter simpleBloomFilter0 = null;
      try {
        simpleBloomFilter0 = new SimpleBloomFilter(shape0, bitCountProducer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // IndexProducer should only send values in the range[0,36]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SimpleBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Shape shape0 = Shape.fromNM(522, 522);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      long[] longArray0 = new long[0];
      BitMapProducer bitMapProducer0 = BitMapProducer.fromBitMapArray(longArray0);
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(longBiPredicate0).test(anyLong() , anyLong());
      boolean boolean0 = simpleBloomFilter0.forEachBitMapPair(bitMapProducer0, longBiPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2619, 2619);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      SimpleHasher simpleHasher0 = new SimpleHasher(2619, 2619);
      SimpleBloomFilter simpleBloomFilter1 = new SimpleBloomFilter(shape0, simpleHasher0);
      boolean boolean0 = simpleBloomFilter0.contains((BitMapProducer) simpleBloomFilter1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Shape shape0 = Shape.fromNM(488, 488);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      long[] longArray0 = simpleBloomFilter0.asBitMapArray();
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2627, 2627);
      SimpleBloomFilter simpleBloomFilter0 = null;
      try {
        simpleBloomFilter0 = new SimpleBloomFilter(shape0, (BitMapProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // bitMaps
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Shape shape0 = Shape.fromNM(482, 482);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      SimpleBloomFilter simpleBloomFilter1 = simpleBloomFilter0.copy();
      assertNotSame(simpleBloomFilter0, simpleBloomFilter1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleBloomFilter simpleBloomFilter0 = null;
      try {
        simpleBloomFilter0 = new SimpleBloomFilter((Shape) null, (IndexProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // shape
         //
         verifyException("java.util.Objects", e);
      }
  }
}
