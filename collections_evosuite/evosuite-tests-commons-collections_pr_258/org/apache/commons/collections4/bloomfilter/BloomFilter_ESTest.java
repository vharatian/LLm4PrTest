/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 13:16:10 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Vector;
import org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter;
import org.apache.commons.collections4.bloomfilter.BitMapProducer;
import org.apache.commons.collections4.bloomfilter.BloomFilter;
import org.apache.commons.collections4.bloomfilter.CountingBloomFilter;
import org.apache.commons.collections4.bloomfilter.Hasher;
import org.apache.commons.collections4.bloomfilter.HasherCollection;
import org.apache.commons.collections4.bloomfilter.IndexProducer;
import org.apache.commons.collections4.bloomfilter.Shape;
import org.apache.commons.collections4.bloomfilter.SimpleBloomFilter;
import org.apache.commons.collections4.bloomfilter.SimpleHasher;
import org.apache.commons.collections4.bloomfilter.SparseBloomFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class BloomFilter_ESTest extends BloomFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1, 3963);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      Hasher[] hasherArray0 = new Hasher[6];
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)49;
      SimpleHasher simpleHasher0 = new SimpleHasher(byteArray0);
      hasherArray0[0] = (Hasher) simpleHasher0;
      HasherCollection hasherCollection0 = new HasherCollection();
      hasherArray0[1] = (Hasher) hasherCollection0;
      hasherArray0[2] = (Hasher) hasherCollection0;
      hasherArray0[3] = (Hasher) hasherCollection0;
      hasherArray0[4] = (Hasher) hasherCollection0;
      hasherArray0[5] = (Hasher) simpleHasher0;
      HasherCollection hasherCollection1 = new HasherCollection(hasherArray0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, hasherCollection1);
      boolean boolean0 = simpleBloomFilter0.contains((BloomFilter) sparseBloomFilter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Shape shape0 = Shape.fromNM(29, 29);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, (IndexProducer) arrayCountingBloomFilter0);
      Vector<Hasher> vector0 = new Vector<Hasher>();
      HasherCollection hasherCollection0 = new HasherCollection(vector0);
      boolean boolean0 = sparseBloomFilter0.mergeInPlace((Hasher) hasherCollection0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Shape shape0 = Shape.fromNM(27, 27);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      byte[] byteArray0 = new byte[4];
      SimpleHasher simpleHasher0 = new SimpleHasher(byteArray0);
      CountingBloomFilter countingBloomFilter0 = arrayCountingBloomFilter0.merge((Hasher) simpleHasher0);
      boolean boolean0 = arrayCountingBloomFilter0.subtract(countingBloomFilter0);
      boolean boolean1 = arrayCountingBloomFilter0.mergeInPlace((Hasher) simpleHasher0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Shape shape0 = Shape.fromNM(29, 29);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, (IndexProducer) arrayCountingBloomFilter0);
      Vector<Hasher> vector0 = new Vector<Hasher>();
      HasherCollection hasherCollection0 = new HasherCollection(vector0);
      BloomFilter bloomFilter0 = sparseBloomFilter0.merge((Hasher) hasherCollection0);
      assertNotSame(bloomFilter0, sparseBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Shape shape0 = Shape.fromNM(7, 7);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      SimpleHasher simpleHasher0 = new SimpleHasher(7, 7);
      BloomFilter bloomFilter0 = simpleBloomFilter0.merge((Hasher) simpleHasher0);
      assertNotSame(bloomFilter0, simpleBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Shape shape0 = Shape.fromNM(29, 29);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      BloomFilter bloomFilter0 = sparseBloomFilter0.merge((BloomFilter) arrayCountingBloomFilter0);
      assertNotSame(bloomFilter0, sparseBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(1, 1, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      BloomFilter bloomFilter0 = simpleBloomFilter0.merge((BloomFilter) simpleBloomFilter0);
      assertNotSame(bloomFilter0, simpleBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2719, 2719);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      int int0 = arrayCountingBloomFilter0.estimateUnion(arrayCountingBloomFilter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2719, 2719);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      byte[] byteArray0 = new byte[6];
      SimpleHasher simpleHasher0 = new SimpleHasher(byteArray0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(arrayCountingBloomFilter0);
      sparseBloomFilter0.mergeInPlace((Hasher) simpleHasher0);
      int int0 = sparseBloomFilter0.estimateUnion(arrayCountingBloomFilter0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1, 1);
      SimpleHasher simpleHasher0 = new SimpleHasher(1, 99L);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, simpleHasher0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      int int0 = arrayCountingBloomFilter0.estimateUnion(simpleBloomFilter0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      SimpleHasher simpleHasher0 = new SimpleHasher(byteArray0);
      Shape shape0 = Shape.fromNM(1, (byte)58);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      arrayCountingBloomFilter0.mergeInPlace((Hasher) simpleHasher0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, (BitMapProducer) arrayCountingBloomFilter0);
      int int0 = simpleBloomFilter0.estimateN();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2719, 2719);
      byte[] byteArray0 = new byte[9];
      SimpleHasher simpleHasher0 = new SimpleHasher(byteArray0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, simpleHasher0);
      int int0 = simpleBloomFilter0.estimateN();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      SimpleHasher simpleHasher0 = new SimpleHasher(byteArray0);
      Shape shape0 = Shape.fromNM(1, (byte)58);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      arrayCountingBloomFilter0.mergeInPlace((Hasher) simpleHasher0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, (BitMapProducer) arrayCountingBloomFilter0);
      int int0 = arrayCountingBloomFilter0.estimateIntersection(simpleBloomFilter0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1, 1);
      SimpleHasher simpleHasher0 = new SimpleHasher(1, 99L);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, simpleHasher0);
      int int0 = simpleBloomFilter0.estimateIntersection(simpleBloomFilter0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1753, 1753);
      HasherCollection hasherCollection0 = new HasherCollection();
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, hasherCollection0);
      boolean boolean0 = simpleBloomFilter0.contains((Hasher) hasherCollection0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2719, 2719);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      Hasher[] hasherArray0 = new Hasher[8];
      HasherCollection hasherCollection0 = new HasherCollection();
      hasherArray0[0] = (Hasher) hasherCollection0;
      hasherArray0[1] = (Hasher) hasherCollection0;
      hasherArray0[2] = (Hasher) hasherCollection0;
      SimpleHasher simpleHasher0 = new SimpleHasher(2719, 0L);
      hasherArray0[3] = (Hasher) simpleHasher0;
      HasherCollection hasherCollection1 = new HasherCollection(hasherArray0);
      boolean boolean0 = simpleBloomFilter0.contains((Hasher) hasherCollection1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2719, 2719);
      Vector<Hasher> vector0 = new Vector<Hasher>();
      HasherCollection hasherCollection0 = new HasherCollection(vector0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, hasherCollection0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, (BitMapProducer) sparseBloomFilter0);
      boolean boolean0 = sparseBloomFilter0.contains((BitMapProducer) simpleBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1, 1);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(arrayCountingBloomFilter0);
      SimpleHasher simpleHasher0 = new SimpleHasher(1, 1);
      CountingBloomFilter countingBloomFilter0 = arrayCountingBloomFilter0.merge((Hasher) simpleHasher0);
      boolean boolean0 = sparseBloomFilter0.contains((BitMapProducer) countingBloomFilter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Shape shape0 = Shape.fromNM(15, 461845907);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      byte[] byteArray0 = new byte[3];
      SimpleHasher simpleHasher0 = new SimpleHasher(byteArray0);
      // Undeclared exception!
      simpleBloomFilter0.mergeInPlace((Hasher) simpleHasher0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(1, 1, 1);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.mergeInPlace((Hasher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // hasher
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.merge((Hasher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // hasher
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1073741824, 1073741824);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      IndexProducer.fromBitMapProducer(simpleBloomFilter0);
      // Undeclared exception!
      simpleBloomFilter0.merge((BloomFilter) simpleBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1, 1);
      SimpleHasher simpleHasher0 = new SimpleHasher(1, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, simpleHasher0);
      Shape shape1 = Shape.fromNM(251, 251);
      SimpleBloomFilter simpleBloomFilter1 = new SimpleBloomFilter(shape1);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.merge((BloomFilter) simpleBloomFilter1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BitMapProducer should send at most 1 maps
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SimpleBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Shape shape0 = Shape.fromNM(Integer.MAX_VALUE, Integer.MAX_VALUE);
      SimpleHasher simpleHasher0 = new SimpleHasher(Integer.MAX_VALUE, Integer.MAX_VALUE);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, simpleHasher0);
      // Undeclared exception!
      simpleBloomFilter0.isFull();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Shape shape0 = Shape.fromKM(Integer.MAX_VALUE, Integer.MAX_VALUE);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      simpleBloomFilter0.estimateUnion(sparseBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Shape shape0 = Shape.fromKM(5078, 5078);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      Shape shape1 = Shape.fromNM(8, 5160);
      SimpleBloomFilter simpleBloomFilter1 = new SimpleBloomFilter(shape1, (IndexProducer) simpleBloomFilter0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.estimateUnion(simpleBloomFilter1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BitMapProducer should send at most 80 maps
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SimpleBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Shape shape0 = Shape.fromKM(4834, 65554);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      arrayCountingBloomFilter0.estimateIntersection(arrayCountingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Shape shape0 = Shape.fromKM(4808, 4808);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.estimateIntersection((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1, 1);
      SimpleHasher simpleHasher0 = new SimpleHasher(1, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, simpleHasher0);
      Shape shape1 = Shape.fromNMK(1, 3056, 1);
      HasherCollection hasherCollection0 = new HasherCollection();
      hasherCollection0.add((Hasher) simpleHasher0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape1, hasherCollection0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.estimateIntersection(sparseBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // IndexProducer should only send values in the range[0,0]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SimpleBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Shape shape0 = Shape.fromNM(12303, 12303);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(sparseBloomFilter0);
      // Undeclared exception!
      simpleBloomFilter0.contains((BloomFilter) arrayCountingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(1, 1, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.contains((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      BitMapProducer bitMapProducer0 = BitMapProducer.fromIndexProducer(sparseBloomFilter0, 1073741823);
      // Undeclared exception!
      simpleBloomFilter0.contains(bitMapProducer0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Shape shape0 = Shape.fromKM(22, 22);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.estimateUnion((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(1, 1, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.merge((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Shape shape0 = Shape.fromKM(13, 13);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.contains((BitMapProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SimpleBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1, 1);
      SimpleHasher simpleHasher0 = new SimpleHasher(1, 99L);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, simpleHasher0);
      boolean boolean0 = simpleBloomFilter0.isFull();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Shape shape0 = Shape.fromNM(15, 461845907);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      boolean boolean0 = simpleBloomFilter0.isFull();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1, 3963);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      Hasher[] hasherArray0 = new Hasher[6];
      byte[] byteArray0 = new byte[7];
      SimpleHasher simpleHasher0 = new SimpleHasher(byteArray0);
      hasherArray0[0] = (Hasher) simpleHasher0;
      HasherCollection hasherCollection0 = new HasherCollection();
      hasherArray0[1] = (Hasher) hasherCollection0;
      hasherArray0[2] = (Hasher) hasherCollection0;
      hasherArray0[3] = (Hasher) hasherCollection0;
      hasherArray0[4] = (Hasher) hasherCollection0;
      hasherArray0[5] = (Hasher) simpleHasher0;
      HasherCollection hasherCollection1 = new HasherCollection(hasherArray0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, hasherCollection1);
      boolean boolean0 = simpleBloomFilter0.contains((BloomFilter) sparseBloomFilter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Shape shape0 = Shape.fromKM(249, 249);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, (BitMapProducer) arrayCountingBloomFilter0);
      boolean boolean0 = arrayCountingBloomFilter0.contains((BloomFilter) simpleBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1, 1);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.contains((Hasher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Hasher
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1, 1);
      SimpleHasher simpleHasher0 = new SimpleHasher(1, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, simpleHasher0);
      HasherCollection hasherCollection0 = new HasherCollection();
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, hasherCollection0);
      int int0 = simpleBloomFilter0.estimateIntersection(sparseBloomFilter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2719, 2719);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      int int0 = simpleBloomFilter0.estimateN();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1, 461845907);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      SimpleHasher simpleHasher0 = new SimpleHasher((byte) (-71), (byte) (-71));
      // Undeclared exception!
      simpleBloomFilter0.merge((Hasher) simpleHasher0);
  }
}
