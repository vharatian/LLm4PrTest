/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 13:11:43 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.IntPredicate;
import org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter;
import org.apache.commons.collections4.bloomfilter.BitCountProducer;
import org.apache.commons.collections4.bloomfilter.BloomFilter;
import org.apache.commons.collections4.bloomfilter.CountingBloomFilter;
import org.apache.commons.collections4.bloomfilter.Hasher;
import org.apache.commons.collections4.bloomfilter.HasherCollection;
import org.apache.commons.collections4.bloomfilter.IndexProducer;
import org.apache.commons.collections4.bloomfilter.Shape;
import org.apache.commons.collections4.bloomfilter.SimpleBloomFilter;
import org.apache.commons.collections4.bloomfilter.SimpleHasher;
import org.apache.commons.collections4.bloomfilter.SparseBloomFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class BitCountProducer_ESTest extends BitCountProducer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Shape shape0 = Shape.fromKM(344, 344);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      Hasher[] hasherArray0 = new Hasher[1];
      SimpleHasher simpleHasher0 = new SimpleHasher(0L, (-1212L));
      hasherArray0[0] = (Hasher) simpleHasher0;
      HasherCollection hasherCollection0 = new HasherCollection(hasherArray0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, hasherCollection0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(simpleBloomFilter0);
      CountingBloomFilter countingBloomFilter0 = arrayCountingBloomFilter0.merge((BloomFilter) sparseBloomFilter0);
      Hasher.IndexFilter.ArrayTracker hasher_IndexFilter_ArrayTracker0 = new Hasher.IndexFilter.ArrayTracker(shape0);
      IntPredicate intPredicate0 = hasher_IndexFilter_ArrayTracker0.negate();
      Hasher.IndexFilter hasher_IndexFilter0 = Hasher.IndexFilter.create(shape0, intPredicate0);
      boolean boolean0 = countingBloomFilter0.forEachIndex(hasher_IndexFilter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BitCountProducer bitCountProducer0 = BitCountProducer.from((IndexProducer) null);
      // Undeclared exception!
      try { 
        bitCountProducer0.forEachIndex((IntPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.BitCountProducer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2525;
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      BitCountProducer bitCountProducer0 = BitCountProducer.from(indexProducer0);
      Shape shape0 = Shape.fromKM(2525, 2525);
      Hasher.IndexFilter.ArrayTracker hasher_IndexFilter_ArrayTracker0 = new Hasher.IndexFilter.ArrayTracker(shape0);
      Hasher.IndexFilter hasher_IndexFilter0 = Hasher.IndexFilter.create(shape0, hasher_IndexFilter_ArrayTracker0);
      // Undeclared exception!
      try { 
        bitCountProducer0.forEachIndex(hasher_IndexFilter0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // number too large 2525 >= 2525
         //
         verifyException("org.apache.commons.collections4.bloomfilter.Hasher$IndexFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Shape shape0 = Shape.fromNM(303, 303);
      byte[] byteArray0 = new byte[1];
      SimpleHasher simpleHasher0 = new SimpleHasher(byteArray0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, simpleHasher0);
      BitCountProducer bitCountProducer0 = BitCountProducer.from(simpleBloomFilter0);
      Hasher.IndexFilter.ArrayTracker hasher_IndexFilter_ArrayTracker0 = new Hasher.IndexFilter.ArrayTracker(shape0);
      hasher_IndexFilter_ArrayTracker0.test(303);
      // Undeclared exception!
      try { 
        bitCountProducer0.forEachIndex(hasher_IndexFilter_ArrayTracker0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.collections4.bloomfilter.Hasher$IndexFilter$ArrayTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Shape shape0 = Shape.fromKM(6877, 6877);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      BitCountProducer bitCountProducer0 = BitCountProducer.from(arrayCountingBloomFilter0);
      Hasher.IndexFilter.ArrayTracker hasher_IndexFilter_ArrayTracker0 = new Hasher.IndexFilter.ArrayTracker(shape0);
      boolean boolean0 = bitCountProducer0.forEachIndex(hasher_IndexFilter_ArrayTracker0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Shape shape0 = Shape.fromKM(6877, 6877);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      BitCountProducer bitCountProducer0 = BitCountProducer.from(arrayCountingBloomFilter0);
      arrayCountingBloomFilter0.add(bitCountProducer0);
      Hasher.IndexFilter.ArrayTracker hasher_IndexFilter_ArrayTracker0 = new Hasher.IndexFilter.ArrayTracker(shape0);
      // Undeclared exception!
      bitCountProducer0.forEachIndex(hasher_IndexFilter_ArrayTracker0);
  }
}
