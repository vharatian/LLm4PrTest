/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 13:09:38 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter;
import org.apache.commons.collections4.bloomfilter.BitCountProducer;
import org.apache.commons.collections4.bloomfilter.BitMapProducer;
import org.apache.commons.collections4.bloomfilter.BloomFilter;
import org.apache.commons.collections4.bloomfilter.CountingBloomFilter;
import org.apache.commons.collections4.bloomfilter.Hasher;
import org.apache.commons.collections4.bloomfilter.HasherCollection;
import org.apache.commons.collections4.bloomfilter.IndexProducer;
import org.apache.commons.collections4.bloomfilter.LongBiPredicate;
import org.apache.commons.collections4.bloomfilter.Shape;
import org.apache.commons.collections4.bloomfilter.SimpleBloomFilter;
import org.apache.commons.collections4.bloomfilter.SimpleHasher;
import org.apache.commons.collections4.bloomfilter.SparseBloomFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ArrayCountingBloomFilter_ESTest extends ArrayCountingBloomFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Shape shape0 = Shape.fromNM(304, 304);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      
      SimpleHasher simpleHasher0 = new SimpleHasher(304, 304);
      arrayCountingBloomFilter0.remove((Hasher) simpleHasher0);
      arrayCountingBloomFilter0.asIndexArray();
      assertFalse(arrayCountingBloomFilter0.isValid());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Shape shape0 = Shape.fromNM(3227, 3227);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SimpleHasher simpleHasher0 = new SimpleHasher(3227, 3227);
      CountingBloomFilter countingBloomFilter0 = arrayCountingBloomFilter0.merge((Hasher) simpleHasher0);
      boolean boolean0 = ((ArrayCountingBloomFilter) countingBloomFilter0).contains((BitMapProducer) countingBloomFilter0);
      assertTrue(countingBloomFilter0.isValid());
      assertNotSame(countingBloomFilter0, arrayCountingBloomFilter0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1281, 1281);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      
      SimpleHasher simpleHasher0 = new SimpleHasher(461L, 1281);
      arrayCountingBloomFilter0.remove((Hasher) simpleHasher0);
      int int0 = arrayCountingBloomFilter0.cardinality();
      assertFalse(arrayCountingBloomFilter0.isValid());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Shape shape0 = Shape.fromNM(304, 304);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.subtract(arrayCountingBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(1, 994, 1);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      byte[] byteArray0 = new byte[8];
      SimpleHasher simpleHasher0 = new SimpleHasher(byteArray0);
      arrayCountingBloomFilter0.mergeInPlace((Hasher) simpleHasher0);
      boolean boolean0 = arrayCountingBloomFilter0.remove((Hasher) simpleHasher0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(1, 994, 1);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.remove((BloomFilter) arrayCountingBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Shape shape0 = Shape.fromNM(3227, 3227);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SimpleHasher simpleHasher0 = new SimpleHasher(0L, 0L);
      CountingBloomFilter countingBloomFilter0 = arrayCountingBloomFilter0.merge((Hasher) simpleHasher0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      
      arrayCountingBloomFilter0.subtract(countingBloomFilter0);
      boolean boolean0 = arrayCountingBloomFilter0.remove((BloomFilter) arrayCountingBloomFilter0);
      assertFalse(arrayCountingBloomFilter0.isValid());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Shape shape0 = Shape.fromNM(4022, 4022);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      
      SimpleHasher simpleHasher0 = new SimpleHasher(4022, 2009L);
      arrayCountingBloomFilter0.remove((Hasher) simpleHasher0);
      HasherCollection hasherCollection0 = new HasherCollection();
      boolean boolean0 = arrayCountingBloomFilter0.mergeInPlace((Hasher) hasherCollection0);
      assertFalse(arrayCountingBloomFilter0.isValid());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Shape shape0 = Shape.fromKM(278, 278);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      
      SimpleHasher simpleHasher0 = new SimpleHasher((-1L), (-1L));
      arrayCountingBloomFilter0.remove((Hasher) simpleHasher0);
      boolean boolean0 = arrayCountingBloomFilter0.mergeInPlace((BloomFilter) arrayCountingBloomFilter0);
      assertFalse(arrayCountingBloomFilter0.isValid());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Shape shape0 = Shape.fromKM(278, 278);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      
      SimpleHasher simpleHasher0 = new SimpleHasher((-1L), (-1L));
      arrayCountingBloomFilter0.remove((Hasher) simpleHasher0);
      arrayCountingBloomFilter0.merge((Hasher) simpleHasher0);
      assertFalse(arrayCountingBloomFilter0.isValid());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Shape shape0 = Shape.fromNM(4022, 4022);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      
      SimpleHasher simpleHasher0 = new SimpleHasher(4022, 2009L);
      arrayCountingBloomFilter0.remove((Hasher) simpleHasher0);
      arrayCountingBloomFilter0.merge((BloomFilter) arrayCountingBloomFilter0);
      assertFalse(arrayCountingBloomFilter0.isValid());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Shape shape0 = Shape.fromNM(3227, 3227);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      Shape shape1 = arrayCountingBloomFilter0.getShape();
      assertEquals(1, shape1.getNumberOfHashFunctions());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2366, 2377);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      long[] longArray0 = new long[5];
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(longBiPredicate0).test(anyLong() , anyLong());
      BitMapProducer.CountingLongPredicate bitMapProducer_CountingLongPredicate0 = new BitMapProducer.CountingLongPredicate(longArray0, longBiPredicate0);
      LongPredicate longPredicate0 = bitMapProducer_CountingLongPredicate0.negate();
      boolean boolean0 = arrayCountingBloomFilter0.forEachBitMap(longPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Shape shape0 = Shape.fromKM(3212, 3212);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      long[] longArray0 = new long[5];
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(longBiPredicate0).test(anyLong() , anyLong());
      BitMapProducer.CountingLongPredicate bitMapProducer_CountingLongPredicate0 = new BitMapProducer.CountingLongPredicate(longArray0, longBiPredicate0);
      boolean boolean0 = arrayCountingBloomFilter0.forEachBitMap(bitMapProducer_CountingLongPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Shape shape0 = Shape.fromNM(304, 304);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      
      SimpleHasher simpleHasher0 = new SimpleHasher(304, 304);
      arrayCountingBloomFilter0.remove((Hasher) simpleHasher0);
      arrayCountingBloomFilter0.copy();
      assertFalse(arrayCountingBloomFilter0.isValid());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2366, 2377);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.contains((IndexProducer) arrayCountingBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Shape shape0 = Shape.fromNM(3227, 3227);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SimpleHasher simpleHasher0 = new SimpleHasher(3227, (byte)0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, simpleHasher0);
      boolean boolean0 = arrayCountingBloomFilter0.contains((BitMapProducer) sparseBloomFilter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Shape shape0 = Shape.fromKM(278, 274);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      
      SimpleHasher simpleHasher0 = new SimpleHasher((-1L), (-1L));
      arrayCountingBloomFilter0.remove((Hasher) simpleHasher0);
      boolean boolean0 = arrayCountingBloomFilter0.add(arrayCountingBloomFilter0);
      assertFalse(arrayCountingBloomFilter0.isValid());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Shape shape0 = Shape.fromKM(4736, 5301);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      byte[] byteArray0 = new byte[1];
      SimpleHasher simpleHasher0 = new SimpleHasher(byteArray0);
      CountingBloomFilter countingBloomFilter0 = arrayCountingBloomFilter0.merge((Hasher) simpleHasher0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      
      boolean boolean0 = arrayCountingBloomFilter0.subtract(countingBloomFilter0);
      assertFalse(arrayCountingBloomFilter0.isValid());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1147, 1147);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.remove((Hasher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // hasher
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Shape shape0 = Shape.fromNM(3227, 3227);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      BitMapProducer.fromIndexProducer(arrayCountingBloomFilter0, 3227);
      CountingBloomFilter countingBloomFilter0 = arrayCountingBloomFilter0.merge((BloomFilter) arrayCountingBloomFilter0);
      arrayCountingBloomFilter0.estimateIntersection(countingBloomFilter0);
      // Undeclared exception!
      arrayCountingBloomFilter0.remove((BloomFilter) arrayCountingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Shape shape0 = Shape.fromNM(3227, 3227);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      BitMapProducer.fromIndexProducer(arrayCountingBloomFilter0, 3227);
      CountingBloomFilter countingBloomFilter0 = arrayCountingBloomFilter0.merge((BloomFilter) arrayCountingBloomFilter0);
      arrayCountingBloomFilter0.estimateIntersection(countingBloomFilter0);
      // Undeclared exception!
      arrayCountingBloomFilter0.mergeInPlace((BloomFilter) arrayCountingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Shape shape0 = Shape.fromNM(327, 327);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.mergeInPlace((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1281, 1281);
      Shape shape1 = Shape.fromKM(3217, 3217);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SimpleHasher simpleHasher0 = new SimpleHasher(0L, 1841L);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape1, simpleHasher0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.mergeInPlace((BloomFilter) sparseBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.lang.ArrayIndexOutOfBoundsException
         //
         verifyException("org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Shape shape0 = Shape.fromKM(12288, 12288);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SimpleHasher simpleHasher0 = new SimpleHasher(12288, (-2296L));
      // Undeclared exception!
      arrayCountingBloomFilter0.merge((Hasher) simpleHasher0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Shape shape0 = Shape.fromNM(65536, 65536);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      arrayCountingBloomFilter0.merge((BloomFilter) arrayCountingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Shape shape0 = Shape.fromKM(291, 291);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.merge((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(268, 12288, 268);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      Hasher.IndexFilter.ArrayTracker hasher_IndexFilter_ArrayTracker0 = new Hasher.IndexFilter.ArrayTracker(shape0);
      Hasher.IndexFilter hasher_IndexFilter0 = Hasher.IndexFilter.create(shape0, hasher_IndexFilter_ArrayTracker0);
      // Undeclared exception!
      arrayCountingBloomFilter0.forEachIndex(hasher_IndexFilter0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Shape shape0 = Shape.fromKM(6, 6);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.forEachIndex((IntPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // consumer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(14, 65536, 14);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      BitCountProducer.BitCountConsumer bitCountProducer_BitCountConsumer0 = mock(BitCountProducer.BitCountConsumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      arrayCountingBloomFilter0.forEachCount(bitCountProducer_BitCountConsumer0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1281, 1281);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.forEachCount((BitCountProducer.BitCountConsumer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // consumer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Shape shape0 = Shape.fromNM(4732, 4732);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      arrayCountingBloomFilter0.estimateUnion(arrayCountingBloomFilter0);
      BitMapProducer.fromIndexProducer(arrayCountingBloomFilter0, 4732);
      long[] longArray0 = new long[3];
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      BitMapProducer.CountingLongPredicate bitMapProducer_CountingLongPredicate0 = new BitMapProducer.CountingLongPredicate(longArray0, longBiPredicate0);
      // Undeclared exception!
      arrayCountingBloomFilter0.forEachBitMap(bitMapProducer_CountingLongPredicate0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Shape shape0 = Shape.fromNM(4736, 4736);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.forEachBitMap((LongPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // consumer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Shape shape0 = Shape.fromKM(774, 774);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      long[] longArray0 = new long[9];
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      BitMapProducer.CountingLongPredicate bitMapProducer_CountingLongPredicate0 = new BitMapProducer.CountingLongPredicate(longArray0, longBiPredicate0);
      bitMapProducer_CountingLongPredicate0.idx = 774;
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.forEachBitMap(bitMapProducer_CountingLongPredicate0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 774
         //
         verifyException("org.apache.commons.collections4.bloomfilter.BitMapProducer$CountingLongPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Shape shape0 = Shape.fromKM(4732, 4732);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      arrayCountingBloomFilter0.asBitMapArray();
      arrayCountingBloomFilter0.estimateUnion(arrayCountingBloomFilter0);
      // Undeclared exception!
      arrayCountingBloomFilter0.contains((IndexProducer) arrayCountingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Shape shape0 = Shape.fromKM(277, 277);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.contains((IndexProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Shape shape0 = Shape.fromKM(261, 261);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      int[] intArray0 = new int[2];
      intArray0[0] = 261;
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.contains(indexProducer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 261
         //
         verifyException("org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Shape shape0 = Shape.fromNM(3227, 3227);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      BitMapProducer.fromIndexProducer(arrayCountingBloomFilter0, 3227);
      CountingBloomFilter countingBloomFilter0 = arrayCountingBloomFilter0.merge((BloomFilter) arrayCountingBloomFilter0);
      arrayCountingBloomFilter0.estimateIntersection(countingBloomFilter0);
      // Undeclared exception!
      arrayCountingBloomFilter0.contains((BitMapProducer) arrayCountingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Shape shape0 = Shape.fromNM(315, 315);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.contains((BitMapProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // producer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Shape shape0 = Shape.fromNM(758, 758);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      int[] intArray0 = new int[4];
      intArray0[0] = 758;
      intArray0[1] = 758;
      intArray0[2] = 758;
      intArray0[3] = 758;
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      BitMapProducer bitMapProducer0 = BitMapProducer.fromIndexProducer(indexProducer0, 758);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.contains(bitMapProducer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 758
         //
         verifyException("org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Shape shape0 = Shape.fromNM(5791, 5791);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      arrayCountingBloomFilter0.add(arrayCountingBloomFilter0);
      // Undeclared exception!
      arrayCountingBloomFilter0.add(arrayCountingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Shape shape0 = Shape.fromNM(315, 315);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.add((BitCountProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Shape shape0 = Shape.fromNM(21, 21);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      int[] intArray0 = new int[1];
      intArray0[0] = 21;
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      BitCountProducer bitCountProducer0 = BitCountProducer.from(indexProducer0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.add(bitCountProducer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = null;
      try {
        arrayCountingBloomFilter0 = new ArrayCountingBloomFilter((Shape) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // shape
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1281, 1281);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      
      SimpleHasher simpleHasher0 = new SimpleHasher(461L, 1281);
      Hasher.IndexFilter.BitMapTracker hasher_IndexFilter_BitMapTracker0 = new Hasher.IndexFilter.BitMapTracker(shape0);
      arrayCountingBloomFilter0.remove((Hasher) simpleHasher0);
      boolean boolean0 = arrayCountingBloomFilter0.forEachIndex(hasher_IndexFilter_BitMapTracker0);
      assertFalse(arrayCountingBloomFilter0.isValid());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Shape shape0 = Shape.fromNM(3227, 3227);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SimpleHasher simpleHasher0 = new SimpleHasher(3227, 3227);
      CountingBloomFilter countingBloomFilter0 = arrayCountingBloomFilter0.merge((Hasher) simpleHasher0);
      Hasher.IndexFilter.ArrayTracker hasher_IndexFilter_ArrayTracker0 = new Hasher.IndexFilter.ArrayTracker(shape0);
      IntPredicate intPredicate0 = hasher_IndexFilter_ArrayTracker0.negate();
      boolean boolean0 = ((ArrayCountingBloomFilter) countingBloomFilter0).forEachIndex(intPredicate0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      assertFalse(boolean0);
      assertTrue(countingBloomFilter0.isValid());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Shape shape0 = Shape.fromKM(4620, 4620);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(arrayCountingBloomFilter0);
      assertTrue(arrayCountingBloomFilter0.isSparse());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Shape shape0 = Shape.fromNM(3232, 3232);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SimpleHasher simpleHasher0 = new SimpleHasher(3227, 3227);
      CountingBloomFilter countingBloomFilter0 = arrayCountingBloomFilter0.merge((Hasher) simpleHasher0);
      BitCountProducer.BitCountConsumer bitCountProducer_BitCountConsumer0 = mock(BitCountProducer.BitCountConsumer.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(bitCountProducer_BitCountConsumer0).test(anyInt() , anyInt());
      boolean boolean0 = ((ArrayCountingBloomFilter) countingBloomFilter0).forEachCount(bitCountProducer_BitCountConsumer0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      assertNotSame(countingBloomFilter0, arrayCountingBloomFilter0);
      assertTrue(countingBloomFilter0.isValid());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1147, 1147);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.isValid();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Shape shape0 = Shape.fromNM(304, 304);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      
      byte[] byteArray0 = new byte[8];
      SimpleHasher simpleHasher0 = new SimpleHasher(byteArray0);
      arrayCountingBloomFilter0.remove((Hasher) simpleHasher0);
      boolean boolean0 = arrayCountingBloomFilter0.isValid();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Shape shape0 = Shape.fromKM(4736, 4736);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      ArrayCountingBloomFilter arrayCountingBloomFilter1 = arrayCountingBloomFilter0.copy();
      assertTrue(arrayCountingBloomFilter1.isValid());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1260, 1260);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SimpleHasher simpleHasher0 = new SimpleHasher(1260, 1260);
      CountingBloomFilter countingBloomFilter0 = arrayCountingBloomFilter0.merge((Hasher) simpleHasher0);
      int[] intArray0 = ((ArrayCountingBloomFilter) countingBloomFilter0).asIndexArray();
      assertEquals(1, intArray0.length);
      assertTrue(arrayCountingBloomFilter0.isValid());
      assertArrayEquals(new int[] {0}, intArray0);
      assertTrue(countingBloomFilter0.isValid());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Shape shape0 = Shape.fromNM(304, 304);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      
      SimpleHasher simpleHasher0 = new SimpleHasher(304, 304);
      arrayCountingBloomFilter0.remove((Hasher) simpleHasher0);
      boolean boolean0 = arrayCountingBloomFilter0.contains((BloomFilter) arrayCountingBloomFilter0);
      assertFalse(arrayCountingBloomFilter0.isValid());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Shape shape0 = Shape.fromKM(4620, 4620);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SimpleHasher simpleHasher0 = new SimpleHasher(4620, 4620);
      CountingBloomFilter countingBloomFilter0 = arrayCountingBloomFilter0.merge((Hasher) simpleHasher0);
      boolean boolean0 = arrayCountingBloomFilter0.contains((IndexProducer) countingBloomFilter0);
      assertFalse(boolean0);
      assertTrue(countingBloomFilter0.isValid());
      assertTrue(arrayCountingBloomFilter0.isValid());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Shape shape0 = Shape.fromNM(304, 304);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SimpleHasher simpleHasher0 = new SimpleHasher(304, 304);
      boolean boolean0 = arrayCountingBloomFilter0.mergeInPlace((Hasher) simpleHasher0);
      BitCountProducer.BitCountConsumer bitCountProducer_BitCountConsumer0 = mock(BitCountProducer.BitCountConsumer.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(bitCountProducer_BitCountConsumer0).test(anyInt() , anyInt());
      boolean boolean1 = arrayCountingBloomFilter0.forEachCount(bitCountProducer_BitCountConsumer0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Shape shape0 = Shape.fromKM(3189, 3189);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SimpleHasher simpleHasher0 = new SimpleHasher(3189, 3189);
      arrayCountingBloomFilter0.mergeInPlace((Hasher) simpleHasher0);
      int int0 = arrayCountingBloomFilter0.cardinality();
      assertTrue(arrayCountingBloomFilter0.isValid());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Shape shape0 = Shape.fromKM(3189, 3189);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.isSparse();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1147, 1147);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.remove((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Shape shape0 = Shape.fromKM(461845907, 5781);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SimpleHasher simpleHasher0 = new SimpleHasher(0L, 0L);
      // Undeclared exception!
      arrayCountingBloomFilter0.mergeInPlace((Hasher) simpleHasher0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Shape shape0 = Shape.fromNM(327, 327);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.subtract((BitCountProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Shape shape0 = Shape.fromKM(6, 6);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.mergeInPlace((Hasher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // hasher
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Shape shape0 = Shape.fromKM(6, 6);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.merge((Hasher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // hasher
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Shape shape0 = Shape.fromKM(6, 6);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.mergeInPlace((BloomFilter) arrayCountingBloomFilter0);
      assertTrue(boolean0);
  }
}
