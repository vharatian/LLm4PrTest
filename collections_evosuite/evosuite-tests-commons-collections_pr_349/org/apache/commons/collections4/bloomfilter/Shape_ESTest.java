/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 10:00:44 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.bloomfilter.Shape;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Shape_ESTest extends Shape_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Shape shape0 = Shape.fromNP(19, 0.07731184199480806);
      assertEquals(102, shape0.getNumberOfBits());
      assertEquals(4, shape0.getNumberOfHashFunctions());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        Shape.fromPMK(261, (-2124), 261);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Probability must be greater than 0 and less than 1: 261.0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        Shape.fromPMK(0.0, 3049, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Probability must be greater than 0 and less than 1: 0.0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Shape shape0 = Shape.fromKM(3853, 1437);
      assertEquals(1437, shape0.getNumberOfBits());
      assertEquals(3853, shape0.getNumberOfHashFunctions());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(19, 31, 6);
      boolean boolean0 = shape0.isSparse(2);
      assertTrue(boolean0);
      assertEquals(31, shape0.getNumberOfBits());
      assertEquals(6, shape0.getNumberOfHashFunctions());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Shape shape0 = Shape.fromNM(3853, 3853);
      Shape shape1 = Shape.fromKM(3853, 3853);
      boolean boolean0 = shape1.equals(shape0);
      assertEquals(3853, shape0.getNumberOfBits());
      assertFalse(shape0.equals((Object)shape1));
      assertEquals(3853, shape1.getNumberOfHashFunctions());
      assertEquals(3853, shape1.getNumberOfBits());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(19, 19, 19);
      Shape shape1 = Shape.fromNMK(19, 1273, 19);
      boolean boolean0 = shape1.equals(shape0);
      assertEquals(19, shape1.getNumberOfHashFunctions());
      assertFalse(boolean0);
      assertEquals(1273, shape1.getNumberOfBits());
      assertFalse(shape0.equals((Object)shape1));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Shape shape0 = Shape.fromPMK(0.0016652785490613212, 2806, 2806);
      assertEquals(2806, shape0.getNumberOfBits());
      assertEquals(2806, shape0.getNumberOfHashFunctions());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(1854, 1854, 2);
      double double0 = shape0.estimateN(0);
      assertEquals(1854, shape0.getNumberOfBits());
      assertEquals(2, shape0.getNumberOfHashFunctions());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(1854, 1854, 2);
      double double0 = shape0.estimateN((-292));
      assertEquals((-135.58318413910976), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1505, 1505);
      double double0 = shape0.getProbability(1505);
      assertEquals(0.6321205588285577, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1505, 1505);
      int int0 = shape0.getNumberOfBits();
      assertEquals(1, shape0.getNumberOfHashFunctions());
      assertEquals(1505, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        Shape.fromNM(2146056748, 1870);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Filter too small: Calculated number of hash functions (0) was less than 1
         //
         verifyException("org.apache.commons.collections4.bloomfilter.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        Shape.fromPMK(0.31427546478880786, 1, 2590);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Calculated probability is greater than or equal to 1: 1.0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        Shape.fromPMK(1.0, 19, 19);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Probability must be greater than 0 and less than 1: 1.0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        Shape.fromKM(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of hash functions must be greater than 0: 0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Shape.fromPMK(4.162982287056216E-5, (-1889), (-655));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be greater than 0: -1889
         //
         verifyException("org.apache.commons.collections4.bloomfilter.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        Shape.fromNMK(0, 415, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of items must be greater than 0: 0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Shape.fromNP(2147483646, 1.6594979771488868E-55);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Resulting filter has more than 2147483647 bits: 5.6378931941E11
         //
         verifyException("org.apache.commons.collections4.bloomfilter.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(19, 19, 19);
      boolean boolean0 = shape0.isSparse(1431655769);
      assertEquals(19, shape0.getNumberOfHashFunctions());
      assertFalse(boolean0);
      assertEquals(19, shape0.getNumberOfBits());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Shape shape0 = Shape.fromKM(218, 218);
      double double0 = shape0.getProbability(0);
      assertEquals(218, shape0.getNumberOfHashFunctions());
      assertEquals(218, shape0.getNumberOfBits());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1528, 1528);
      // Undeclared exception!
      try { 
        shape0.getProbability((-4070));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of items must be greater than or equal to 0: -4070
         //
         verifyException("org.apache.commons.collections4.bloomfilter.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(19, 1273, 19);
      Shape shape1 = Shape.fromNM(836, 1273);
      boolean boolean0 = shape1.equals(shape0);
      assertEquals(1273, shape1.getNumberOfBits());
      assertFalse(boolean0);
      assertEquals(1, shape1.getNumberOfHashFunctions());
      assertEquals(1273, shape0.getNumberOfBits());
      assertFalse(shape0.equals((Object)shape1));
      assertEquals(19, shape0.getNumberOfHashFunctions());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(19, 19, 19);
      Shape shape1 = Shape.fromNMK(19, 1273, 19);
      boolean boolean0 = shape0.equals(shape1);
      assertEquals(19, shape1.getNumberOfHashFunctions());
      assertEquals(1273, shape1.getNumberOfBits());
      assertFalse(shape1.equals((Object)shape0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(19, 19, 19);
      boolean boolean0 = shape0.equals(shape0);
      assertEquals(19, shape0.getNumberOfBits());
      assertEquals(19, shape0.getNumberOfHashFunctions());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Shape shape0 = Shape.fromKM(3853, 3853);
      boolean boolean0 = shape0.equals((Object) null);
      assertEquals(3853, shape0.getNumberOfHashFunctions());
      assertEquals(3853, shape0.getNumberOfBits());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1560, 1560);
      shape0.hashCode();
      assertEquals(1560, shape0.getNumberOfBits());
      assertEquals(1, shape0.getNumberOfHashFunctions());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(1, 1, 1);
      boolean boolean0 = shape0.isSparse(1);
      assertTrue(boolean0);
      assertEquals(1, shape0.getNumberOfHashFunctions());
      assertEquals(1, shape0.getNumberOfBits());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2294, 2294);
      double double0 = shape0.estimateN(2294);
      assertEquals(2294, shape0.getNumberOfHashFunctions());
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Shape shape0 = Shape.fromKM(261, 261);
      String string0 = shape0.toString();
      assertEquals("Shape[k=261 m=261]", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        Shape.fromPMK((-1179), (-1179), (-1179));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Probability must be greater than 0 and less than 1: -1179.0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1505, 1505);
      int int0 = shape0.getNumberOfHashFunctions();
      assertEquals(1505, int0);
      assertEquals(1505, shape0.getNumberOfBits());
  }
}
