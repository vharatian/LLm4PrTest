/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 11:35:12 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter;
import org.apache.commons.collections4.bloomfilter.BitMapProducer;
import org.apache.commons.collections4.bloomfilter.Hasher;
import org.apache.commons.collections4.bloomfilter.HasherCollection;
import org.apache.commons.collections4.bloomfilter.IndexProducer;
import org.apache.commons.collections4.bloomfilter.LongBiPredicate;
import org.apache.commons.collections4.bloomfilter.Shape;
import org.apache.commons.collections4.bloomfilter.SimpleBloomFilter;
import org.apache.commons.collections4.bloomfilter.SimpleHasher;
import org.apache.commons.collections4.bloomfilter.SparseBloomFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class BitMapProducer_ESTest extends BitMapProducer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Shape shape0 = Shape.fromNM(127, 936);
      Hasher[] hasherArray0 = new Hasher[1];
      SimpleHasher simpleHasher0 = new SimpleHasher(127, 936);
      hasherArray0[0] = (Hasher) simpleHasher0;
      HasherCollection hasherCollection0 = new HasherCollection(hasherArray0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, hasherCollection0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(simpleBloomFilter0);
      BitMapProducer bitMapProducer0 = BitMapProducer.fromIndexProducer(sparseBloomFilter0, 936);
      assertNotNull(bitMapProducer0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long[] longArray0 = new long[0];
      BitMapProducer bitMapProducer0 = BitMapProducer.fromBitMapArray(longArray0);
      long[] longArray1 = bitMapProducer0.asBitMapArray();
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Shape shape0 = Shape.fromKM(8164, 8164);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      arrayCountingBloomFilter0.asBitMapArray();
      // Undeclared exception!
      BitMapProducer.fromIndexProducer(arrayCountingBloomFilter0, 8164);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        BitMapProducer.fromIndexProducer((IndexProducer) null, 103);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // producer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[1];
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      // Undeclared exception!
      try { 
        BitMapProducer.fromIndexProducer(indexProducer0, (-2640));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.BitMapProducer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-2640);
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      // Undeclared exception!
      try { 
        BitMapProducer.fromIndexProducer(indexProducer0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -42
         //
         verifyException("org.apache.commons.collections4.bloomfilter.BitMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Shape shape0 = Shape.fromNM(8192, 8192);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      arrayCountingBloomFilter0.forEachBitMapPair(arrayCountingBloomFilter0, (LongBiPredicate) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Shape shape0 = Shape.fromKM(12288, 12288);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      arrayCountingBloomFilter0.asBitMapArray();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BitMapProducer bitMapProducer0 = BitMapProducer.fromBitMapArray((long[]) null);
      // Undeclared exception!
      try { 
        bitMapProducer0.asBitMapArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.BitMapProducer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long[] longArray0 = new long[0];
      BitMapProducer bitMapProducer0 = BitMapProducer.fromBitMapArray(longArray0);
      long[] longArray1 = new long[2];
      BitMapProducer bitMapProducer1 = BitMapProducer.fromBitMapArray(longArray1);
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(longBiPredicate0).test(anyLong() , anyLong());
      boolean boolean0 = bitMapProducer1.forEachBitMapPair(bitMapProducer0, longBiPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Shape shape0 = Shape.fromKM(3201, 3201);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      BitMapProducer bitMapProducer0 = BitMapProducer.fromIndexProducer(arrayCountingBloomFilter0, 40);
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(longBiPredicate0).test(anyLong() , anyLong());
      boolean boolean0 = bitMapProducer0.forEachBitMapPair(arrayCountingBloomFilter0, longBiPredicate0);
      assertFalse(boolean0);
      
      LongBiPredicate longBiPredicate1 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(longBiPredicate1).test(anyLong() , anyLong());
      boolean boolean1 = arrayCountingBloomFilter0.forEachBitMapPair(bitMapProducer0, longBiPredicate1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1023, 1023);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.forEachBitMapPair(arrayCountingBloomFilter0, (LongBiPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.CountingLongPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Shape shape0 = Shape.fromKM(3201, 3201);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(longBiPredicate0).test(anyLong() , anyLong());
      boolean boolean0 = arrayCountingBloomFilter0.forEachBitMapPair(arrayCountingBloomFilter0, longBiPredicate0);
      assertFalse(boolean0);
  }
}
