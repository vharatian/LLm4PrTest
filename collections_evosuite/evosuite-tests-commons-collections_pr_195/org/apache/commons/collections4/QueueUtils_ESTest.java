/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 15:52:36 GMT 2025
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.Queue;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.QueueUtils;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class QueueUtils_ESTest extends QueueUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Queue<Integer> queue0 = QueueUtils.emptyQueue();
      Queue<Object> queue1 = QueueUtils.emptyQueue();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) queue0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Queue<Object> queue2 = QueueUtils.predicatedQueue(queue1, (Predicate<? super Object>) predicate0);
      Integer integer0 = new Integer((-3938));
      Transformer<Object, Integer> transformer0 = ConstantTransformer.constantTransformer(integer0);
      Queue<Object> queue3 = QueueUtils.transformingQueue(queue2, (Transformer<? super Object, ?>) transformer0);
      assertFalse(queue3.equals((Object)queue2));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueueUtils.unmodifiableQueue((Queue<? extends InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Queue<Boolean> queue0 = QueueUtils.emptyQueue();
      // Undeclared exception!
      try { 
        QueueUtils.transformingQueue(queue0, (Transformer<? super Boolean, ? extends Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueueUtils.synchronizedQueue((Queue<Transformer<InstanceofPredicate, Predicate<Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Object object0 = new Object();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate(object0);
      priorityQueue0.add(predicate0);
      Predicate<Object> predicate1 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        QueueUtils.predicatedQueue((Queue<Predicate<Object>>) priorityQueue0, (Predicate<? super Predicate<Object>>) predicate1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Queue<Predicate<Object>> queue0 = QueueUtils.emptyQueue();
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      priorityQueue0.add(queue0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(anyPredicate0, anyPredicate0);
      predicateArray0[0] = (Predicate<Object>) andPredicate0;
      // Undeclared exception!
      try { 
        QueueUtils.predicatedQueue((Queue<Object>) priorityQueue0, (Predicate<? super Object>) predicateArray0[0]);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Queue<Integer> queue0 = QueueUtils.emptyQueue();
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      priorityQueue0.add(queue0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) priorityQueue0);
      // Undeclared exception!
      try { 
        QueueUtils.predicatedQueue((Queue<Object>) priorityQueue0, (Predicate<? super Object>) predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'java.util.LinkedList@0000000001' - Predicate 'org.apache.commons.collections4.functors.EqualPredicate@2' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Queue<InstanceofPredicate> queue0 = QueueUtils.emptyQueue();
      Queue<InstanceofPredicate> queue1 = QueueUtils.unmodifiableQueue((Queue<? extends InstanceofPredicate>) queue0);
      assertSame(queue1, queue0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Queue<Object> queue0 = QueueUtils.emptyQueue();
      Queue<Object> queue1 = QueueUtils.synchronizedQueue(queue0);
      assertTrue(queue1.equals((Object)queue0));
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      // Undeclared exception!
      try { 
        QueueUtils.predicatedQueue((Queue<Transformer<Object, Boolean>>) null, (Predicate<? super Transformer<Object, Boolean>>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }
}
