/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 15:39:15 GMT 2025
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.time.DayOfWeek;
import java.time.Month;
import java.time.chrono.IsoEra;
import java.time.chrono.ThaiBuddhistEra;
import java.time.format.ResolverStyle;
import java.time.format.TextStyle;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.ClosureTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MapIterator<ChronoUnit, StringTokenizer> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends ChronoUnit>) null, (Iterator<? extends ChronoUnit>) null, (Iterator<? extends ChronoUnit>) mapIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      OrderedMapIterator<ResolverStyle, Transformer<Class<StringTokenizer>, Class<StringTokenizer>>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<ResolverStyle, Transformer<Class<StringTokenizer>, Class<StringTokenizer>>> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<ResolverStyle, Transformer<Class<StringTokenizer>, Class<StringTokenizer>>>) orderedMapIterator0);
      ZippingIterator<ResolverStyle> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends ResolverStyle>) mapIterator0, (Iterator<? extends ResolverStyle>) orderedMapIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<StringTokenizer> class0 = StringTokenizer.class;
      ListIterator<Class<StringTokenizer>> listIterator0 = IteratorUtils.singletonListIterator(class0);
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      ListIterator<StringTokenizer> listIterator1 = arrayList0.listIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Object> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Object>) comparator0, (Iterator<?>) listIterator1, (Iterator<?>) listIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<StringTokenizer> class0 = StringTokenizer.class;
      ListIterator<Class<StringTokenizer>> listIterator0 = IteratorUtils.singletonListIterator(class0);
      Hashtable<StringTokenizer, ChronoUnit> hashtable0 = new Hashtable<StringTokenizer, ChronoUnit>();
      EntrySetMapIterator<StringTokenizer, ChronoUnit> entrySetMapIterator0 = new EntrySetMapIterator<StringTokenizer, ChronoUnit>(hashtable0);
      Iterator<Object> iterator0 = IteratorUtils.chainedIterator((Iterator<?>) listIterator0, (Iterator<?>) entrySetMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[9];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) stringTokenizerArray0[2], (-1550), (-3537));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      OrderedIterator<StringTokenizer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ZippingIterator<StringTokenizer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) orderedIterator0, (Iterator<? extends StringTokenizer>) orderedIterator0, (Iterator<? extends StringTokenizer>) orderedIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      ReverseListIterator<StringTokenizer> reverseListIterator0 = new ReverseListIterator<StringTokenizer>(arrayList0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("]");
      arrayList0.add(stringTokenizer0);
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<StringTokenizer>) reverseListIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<StringTokenizer> class0 = StringTokenizer.class;
      ListIterator<Class<StringTokenizer>> listIterator0 = IteratorUtils.singletonListIterator(class0);
      ListIterator<Class<StringTokenizer>> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      assertFalse(listIterator1.equals((Object)listIterator0));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<StringTokenizer>) resettableListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>();
      Iterator<StringTokenizer> iterator0 = priorityQueue0.iterator();
      Transformer<StringTokenizer, String> transformer0 = ConstantTransformer.constantTransformer("");
      String string0 = IteratorUtils.toString(iterator0, (Transformer<? super StringTokenizer, String>) transformer0, "", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, StringTokenizer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      List<StringTokenizer> list0 = IteratorUtils.toList((Iterator<? extends StringTokenizer>) orderedMapIterator0, 2155);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MapIterator<StringTokenizer, Object> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      List<StringTokenizer> list0 = IteratorUtils.toList((Iterator<? extends StringTokenizer>) mapIterator0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("x{", "x{", false);
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) singletonListIterator0, class0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<StringTokenizer> class0 = StringTokenizer.class;
      StringTokenizer[] stringTokenizerArray0 = IteratorUtils.toArray((Iterator<? extends StringTokenizer>) resettableIterator0, class0);
      assertEquals(0, stringTokenizerArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("|PkW");
      Object[] objectArray0 = IteratorUtils.toArray(iterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      OrderedMapIterator<Object, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      OrderedIterator<StringTokenizer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<Object> iterator0 = IteratorUtils.pushbackIterator((Iterator<?>) orderedIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<StringTokenizer> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends StringTokenizer>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PriorityQueue<HashMap<StringTokenizer, StringTokenizer>> priorityQueue0 = new PriorityQueue<HashMap<StringTokenizer, StringTokenizer>>();
      ResettableIterator<HashMap<StringTokenizer, StringTokenizer>> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends HashMap<StringTokenizer, StringTokenizer>>) priorityQueue0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[9];
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "", false);
      stringTokenizerArray0[0] = stringTokenizer0;
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.arrayListIterator(stringTokenizerArray0);
      StringTokenizer stringTokenizer1 = IteratorUtils.get((Iterator<StringTokenizer>) resettableListIterator0, 0);
      assertSame(stringTokenizer1, stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("ql|PkW");
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.singletonListIterator(stringTokenizer0);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      ListIterator<Object> listIterator1 = IteratorUtils.toListIterator((Iterator<?>) listIterator0);
      StringTokenizer stringTokenizer1 = (StringTokenizer)IteratorUtils.forEachButLast((Iterator<Object>) listIterator1, (Closure<? super Object>) closure0);
      assertEquals(1, stringTokenizer1.countTokens());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ListIterator<Predicate<Object>> listIterator0 = IteratorUtils.singletonListIterator((Predicate<Object>) null);
      Predicate<Object> predicate0 = IteratorUtils.first((Iterator<Predicate<Object>>) listIterator0);
      assertNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.emptyIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(resettableIterator0);
      Iterator<Object> iterator0 = IteratorUtils.filteredIterator((Iterator<?>) resettableIterator0, (Predicate<? super Object>) equalPredicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Iterator<ResolverStyle>[] iteratorArray0 = (Iterator<ResolverStyle>[]) Array.newInstance(Iterator.class, 0);
      Iterator<ResolverStyle> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends ResolverStyle>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<StringTokenizer>[] classArray0 = (Class<StringTokenizer>[]) Array.newInstance(Class.class, 5);
      ResettableIterator<Class<StringTokenizer>> resettableIterator0 = IteratorUtils.arrayIterator(classArray0);
      BoundedIterator<Class<StringTokenizer>> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Class<StringTokenizer>>) resettableIterator0, 0L, 866L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      OrderedIterator<StringTokenizer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterable<Object> iterable0 = IteratorUtils.asIterable((Iterator<?>) orderedIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<StringTokenizer>[] classArray0 = (Class<StringTokenizer>[]) Array.newInstance(Class.class, 8);
      ResettableListIterator<Class<StringTokenizer>> resettableListIterator0 = IteratorUtils.arrayListIterator(classArray0, 0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[9];
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.arrayListIterator(stringTokenizerArray0, 0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ChronoUnit[] chronoUnitArray0 = new ChronoUnit[0];
      ResettableListIterator<ChronoUnit> resettableListIterator0 = IteratorUtils.arrayListIterator(chronoUnitArray0, 0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[0];
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.arrayListIterator(stringTokenizerArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[3];
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.arrayIterator(stringTokenizerArray0, 1, 1);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ResolverStyle[] resolverStyleArray0 = new ResolverStyle[6];
      ResettableIterator<ResolverStyle> resettableIterator0 = IteratorUtils.arrayIterator(resolverStyleArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<Transformer<Class<StringTokenizer>, Predicate<Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      OrderedIterator<Class<StringTokenizer>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Class<StringTokenizer>>) orderedIterator0, (Transformer<? super Class<StringTokenizer>, ? extends Class<StringTokenizer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>();
      Iterator<StringTokenizer> iterator0 = priorityQueue0.iterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("ef9i=ej03", (String) null);
      priorityQueue0.add(stringTokenizer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super StringTokenizer, String>) transformer0, "", "", "\"]C()vH");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MapIterator<StringTokenizer, Object> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<StringTokenizer>) mapIterator0, (Transformer<? super StringTokenizer, String>) null, "u7SCL,\"+v", "u7SCL,\"+v", "u7SCL,\"+v");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("", true);
      Closure<String> closure0 = ExceptionClosure.exceptionClosure();
      ClosureTransformer<String> closureTransformer0 = new ClosureTransformer<String>(closure0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<String>) singletonIterator0, (Transformer<? super String, String>) closureTransformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Iterator<Class<StringTokenizer>> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super Class<StringTokenizer>, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Vector<Class<StringTokenizer>> vector0 = new Vector<Class<StringTokenizer>>();
      Class<StringTokenizer> class0 = StringTokenizer.class;
      vector0.add(class0);
      LoopingListIterator<Class<StringTokenizer>> loopingListIterator0 = new LoopingListIterator<Class<StringTokenizer>>(vector0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<Class<StringTokenizer>>) loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>();
      Iterator<StringTokenizer> iterator0 = priorityQueue0.iterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "");
      priorityQueue0.add(stringTokenizer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("rL67w;X`;RN/jZAtFT?", "", true);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>((Predicate<? super Object>) null);
      Transformer<Object, StringTokenizer> transformer0 = ConstantTransformer.constantTransformer(stringTokenizer0);
      IfTransformer<Object, StringTokenizer> ifTransformer0 = new IfTransformer<Object, StringTokenizer>(nullIsExceptionPredicate0, transformer0, transformer0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.objectGraphIterator(stringTokenizer0, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) ifTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LinkedHashSet<StringTokenizer> linkedHashSet0 = new LinkedHashSet<StringTokenizer>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("|PHW", "%j7u HB5F7P(v\\NN=,", false);
      linkedHashSet0.add(stringTokenizer0);
      LoopingIterator<StringTokenizer> loopingIterator0 = new LoopingIterator<StringTokenizer>(linkedHashSet0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends StringTokenizer>) loopingIterator0, 127);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<?>) null, 113);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LinkedList<StringTokenizer> linkedList0 = new LinkedList<StringTokenizer>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "", false);
      linkedList0.addFirst(stringTokenizer0);
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.loopingListIterator((List<StringTokenizer>) linkedList0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ResettableListIterator<Iterator<Class<Object>>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<Iterator<Class<Object>>>) resettableListIterator0, (-722L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // node
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<InstanceofPredicate>[] classArray0 = (Class<InstanceofPredicate>[]) Array.newInstance(Class.class, 2);
      ObjectArrayListIterator<Class<InstanceofPredicate>> objectArrayListIterator0 = new ObjectArrayListIterator<Class<InstanceofPredicate>>(classArray0);
      Predicate<Class<InstanceofPredicate>> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Class<InstanceofPredicate>>) objectArrayListIterator0, (Predicate<? super Class<InstanceofPredicate>>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MapIterator<String, Predicate<StringTokenizer>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<String, Predicate<StringTokenizer>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, Predicate<StringTokenizer>>(mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<String>) abstractMapIteratorDecorator0, (Predicate<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LinkedList<IsoEra> linkedList0 = new LinkedList<IsoEra>();
      LoopingListIterator<IsoEra> loopingListIterator0 = new LoopingListIterator<IsoEra>(linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<IsoEra>) loopingListIterator0, (Predicate<? super IsoEra>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // list
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ResettableListIterator<Class<StringTokenizer>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.indexOf((Iterator<Class<StringTokenizer>>) resettableListIterator0, (Predicate<? super Class<StringTokenizer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<HashMap<String, StringTokenizer>>) null, 2467);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[4];
      ObjectArrayIterator<StringTokenizer> objectArrayIterator0 = new ObjectArrayIterator<StringTokenizer>(stringTokenizerArray0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Closure<Object> closure1 = WhileClosure.whileClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) closure0, false);
      // Undeclared exception!
      IteratorUtils.forEachButLast((Iterator<StringTokenizer>) objectArrayIterator0, (Closure<? super StringTokenizer>) closure1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.forEachButLast((Iterator<Object>) null, (Closure<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // closure
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<StringTokenizer> class0 = StringTokenizer.class;
      ListIterator<Class<StringTokenizer>> listIterator0 = IteratorUtils.singletonListIterator(class0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      // Undeclared exception!
      try { 
        IteratorUtils.forEach((Iterator<Class<StringTokenizer>>) listIterator0, (Closure<? super Class<StringTokenizer>>) closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<StringTokenizer> class0 = StringTokenizer.class;
      Stack<Object> stack0 = new Stack<Object>();
      Iterator<Object> iterator0 = stack0.iterator();
      stack0.add((Object) class0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      // Undeclared exception!
      try { 
        IteratorUtils.forEach(iterator0, (Closure<? super Object>) closure0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, Predicate<Object>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.forEach((Iterator<StringTokenizer>) orderedMapIterator0, (Closure<? super StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // closure
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.first((Iterator<HashMap<Predicate, Class<Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Class<Object>>) null, (Predicate<? super Class<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends StringTokenizer>) null, (Predicate<? super StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // listIterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super StringTokenizer>) null, (Iterator<? extends StringTokenizer>) null, (Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends StringTokenizer>) null, (Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      OrderedIterator<StringTokenizer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends StringTokenizer>) orderedIterator0, (-34L), (-34L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Class<StringTokenizer>>) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      OrderedMapIterator<Predicate<StringTokenizer>, Class<StringTokenizer>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<?>) orderedMapIterator0, (-1335L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends Class<StringTokenizer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<?>) null, (Collection<? super Object>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // enumeration
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Class<StringTokenizer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // enumeration
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends Predicate<StringTokenizer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((StringTokenizer[]) null, 1173, 1173);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object[]) null, (-4536), (-4536));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(objectArray0, (-1302));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 505, 871);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      OrderedIterator<Class<StringTokenizer>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) orderedIterator0, (-13));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      OrderedMapIterator<Object, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) orderedMapIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<StringTokenizer>[] classArray0 = (Class<StringTokenizer>[]) Array.newInstance(Class.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(classArray0, 1, (-1337));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((StringTokenizer[]) null, (-924), (-924));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((StringTokenizer[]) null, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-3426));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "node");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("transformer", "", false);
      arrayList0.add(stringTokenizer0);
      ListIterator<StringTokenizer> listIterator0 = arrayList0.listIterator();
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      Transformer<StringTokenizer, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) instantiateFactory0);
      String string0 = IteratorUtils.toString((Iterator<StringTokenizer>) listIterator0, (Transformer<? super StringTokenizer, String>) transformer0, "64S+5Mo2b FDR@os\",", "I%:H(+0pm4t", "BU(+");
      assertEquals("I%:H(+0pm4tBU(+", string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Transformer<StringTokenizer, String> transformer0 = ConstantTransformer.constantTransformer("");
      String string0 = IteratorUtils.toString((Iterator<StringTokenizer>) null, (Transformer<? super StringTokenizer, String>) transformer0, "", "", "siK9");
      assertEquals("siK9", string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[8];
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.arrayListIterator(stringTokenizerArray0);
      StringTokenizer stringTokenizer0 = IteratorUtils.get((Iterator<StringTokenizer>) resettableListIterator0, 2);
      assertNull(stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      NullIsTruePredicate<Class<StringTokenizer>> nullIsTruePredicate0 = new NullIsTruePredicate<Class<StringTokenizer>>(allPredicate0);
      SingletonIterator<Predicate<Class<StringTokenizer>>> singletonIterator0 = new SingletonIterator<Predicate<Class<StringTokenizer>>>(nullIsTruePredicate0, false);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Predicate<Class<StringTokenizer>>>) singletonIterator0, (Predicate<? super Predicate<Class<StringTokenizer>>>) allPredicate0);
      assertFalse(singletonIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Predicate<StringTokenizer>[] predicateArray0 = (Predicate<StringTokenizer>[]) Array.newInstance(Predicate.class, 8);
      OnePredicate<StringTokenizer> onePredicate0 = new OnePredicate<StringTokenizer>(predicateArray0);
      predicateArray0[1] = (Predicate<StringTokenizer>) onePredicate0;
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<StringTokenizer>) null, (Predicate<? super StringTokenizer>) predicateArray0[1]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("qlyPkW");
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.singletonListIterator(stringTokenizer0);
      StringTokenizer stringTokenizer1 = new StringTokenizer("tHWI<|O");
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(stringTokenizer1, defaultEquator0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(equalPredicate0, equalPredicate0);
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 3);
      iteratorArray0[0] = (Iterator<StringTokenizer>) listIterator0;
      iteratorArray0[1] = (Iterator<StringTokenizer>) listIterator0;
      iteratorArray0[2] = (Iterator<StringTokenizer>) listIterator0;
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>[]) iteratorArray0);
      int int0 = IteratorUtils.indexOf((Iterator<Object>) zippingIterator0, (Predicate<? super Object>) orPredicate0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("qlyPkW");
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.singletonListIterator(stringTokenizer0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(stringTokenizer0, defaultEquator0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(equalPredicate0, equalPredicate0);
      predicateArray0[0] = (Predicate<Object>) orPredicate0;
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 3);
      iteratorArray0[0] = (Iterator<StringTokenizer>) listIterator0;
      iteratorArray0[1] = (Iterator<StringTokenizer>) listIterator0;
      iteratorArray0[2] = (Iterator<StringTokenizer>) listIterator0;
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>[]) iteratorArray0);
      int int0 = IteratorUtils.indexOf((Iterator<Object>) zippingIterator0, (Predicate<? super Object>) predicateArray0[0]);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<StringTokenizer> class0 = StringTokenizer.class;
      SingletonListIterator<Class<StringTokenizer>> singletonListIterator0 = new SingletonListIterator<Class<StringTokenizer>>(class0);
      IteratorUtils.toList((Iterator<?>) singletonListIterator0, 2);
      assertFalse(singletonListIterator0.hasNext());
      assertEquals(1, singletonListIterator0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.FOREVER;
      ResettableIterator<ChronoUnit> resettableIterator0 = IteratorUtils.singletonIterator(chronoUnit0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Predicate<Object>>) null, 1L, 1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<StringTokenizer> class0 = StringTokenizer.class;
      ListIterator<Class<StringTokenizer>> listIterator0 = IteratorUtils.singletonListIterator(class0);
      String string0 = IteratorUtils.toString((Iterator<Class<StringTokenizer>>) listIterator0);
      assertTrue(listIterator0.hasPrevious());
      assertEquals("[class java.util.StringTokenizer]", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.NARROW;
      SingletonIterator<TextStyle> singletonIterator0 = new SingletonIterator<TextStyle>(textStyle0);
      Transformer<TextStyle, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<TextStyle>) singletonIterator0, (Transformer<? super TextStyle, String>) transformer0, "org.apache.commons.collections4.map.AbstractHashedMap", "org.apache.commons.collections4.map.AbstractHashedMap", "~z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<StringTokenizer> class0 = StringTokenizer.class;
      ListIterator<Class<StringTokenizer>> listIterator0 = IteratorUtils.singletonListIterator(class0);
      int int0 = IteratorUtils.size(listIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("aPAF");
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Iterator<Iterator>>) iterator0, 123);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 122
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, StringTokenizer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<StringTokenizer, StringTokenizer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<StringTokenizer, StringTokenizer>(orderedMapIterator0);
      boolean boolean0 = IteratorUtils.isEmpty(abstractOrderedMapIteratorDecorator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("q|PkW");
      boolean boolean0 = IteratorUtils.isEmpty(iterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      IsoEra[] isoEraArray0 = new IsoEra[4];
      ResettableIterator<IsoEra> resettableIterator0 = IteratorUtils.arrayIterator(isoEraArray0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("Z+}x,~fMgV{jBRN", "|1~%8V5");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) stringTokenizer0, comparator0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<IsoEra>) resettableIterator0, (Predicate<? super IsoEra>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Predicate<IsoEra> predicate0 = FalsePredicate.falsePredicate();
      Stack<IsoEra> stack0 = new Stack<IsoEra>();
      IsoEra isoEra0 = IsoEra.BCE;
      stack0.add(isoEra0);
      LoopingListIterator<IsoEra> loopingListIterator0 = new LoopingListIterator<IsoEra>(stack0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<IsoEra>) loopingListIterator0, (Predicate<? super IsoEra>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      IsoEra isoEra0 = IsoEra.BCE;
      SingletonListIterator<IsoEra> singletonListIterator0 = new SingletonListIterator<IsoEra>(isoEra0);
      SkippingIterator<IsoEra> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<IsoEra>) singletonListIterator0, 3323L);
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      Predicate<IsoEra> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super IsoEra>>) arrayList0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<IsoEra>) skippingIterator0, (Predicate<? super IsoEra>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<IsoEra>) null, (Predicate<? super IsoEra>) equalPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      int int0 = IteratorUtils.indexOf((Iterator<Object>) null, (Predicate<? super Object>) predicate0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("listIterator", "listIterator");
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0, true);
      DefaultEquator<StringTokenizer> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<StringTokenizer> predicate0 = EqualPredicate.equalPredicate(stringTokenizer0, (Equator<StringTokenizer>) defaultEquator0);
      StringTokenizer stringTokenizer1 = IteratorUtils.find((Iterator<StringTokenizer>) singletonIterator0, (Predicate<? super StringTokenizer>) predicate0);
      assertSame(stringTokenizer1, stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[9];
      StringTokenizer stringTokenizer0 = new StringTokenizer("1Avpw~i", "1Avpw~i");
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.arrayIterator(stringTokenizerArray0);
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends StringTokenizer>) resettableIterator0);
      List<StringTokenizer> list0 = IteratorUtils.toList((Iterator<? extends StringTokenizer>) listIterator0);
      LoopingIterator<StringTokenizer> loopingIterator0 = new LoopingIterator<StringTokenizer>(list0);
      Comparator<StringTokenizer> comparator0 = (Comparator<StringTokenizer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any(java.util.StringTokenizer.class) , any(java.util.StringTokenizer.class));
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Predicate<StringTokenizer> predicate0 = ComparatorPredicate.comparatorPredicate(stringTokenizer0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      // Undeclared exception!
      IteratorUtils.find((Iterator<StringTokenizer>) loopingIterator0, (Predicate<? super StringTokenizer>) predicate0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, Predicate<Object>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UniquePredicate<StringTokenizer> uniquePredicate0 = new UniquePredicate<StringTokenizer>();
      StringTokenizer stringTokenizer0 = IteratorUtils.find((Iterator<StringTokenizer>) orderedMapIterator0, (Predicate<? super StringTokenizer>) uniquePredicate0);
      assertNull(stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Class<StringTokenizer> class0 = IteratorUtils.find((Iterator<Class<StringTokenizer>>) null, (Predicate<? super Class<StringTokenizer>>) predicate0);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[5];
      ObjectArrayIterator<StringTokenizer> objectArrayIterator0 = new ObjectArrayIterator<StringTokenizer>(stringTokenizerArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray1);
      predicateArray0[0] = predicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Closure<Object> closure1 = IfClosure.ifClosure((Predicate<? super Object>) nonePredicate0, (Closure<? super Object>) closure0);
      IteratorUtils.forEachButLast((Iterator<StringTokenizer>) objectArrayIterator0, (Closure<? super StringTokenizer>) closure1);
      assertFalse(objectArrayIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MapIterator<StringTokenizer, Object> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Closure<StringTokenizer> closure0 = ExceptionClosure.exceptionClosure();
      StringTokenizer stringTokenizer0 = IteratorUtils.forEachButLast((Iterator<StringTokenizer>) mapIterator0, (Closure<? super StringTokenizer>) closure0);
      assertNull(stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[5];
      ObjectArrayIterator<StringTokenizer> objectArrayIterator0 = new ObjectArrayIterator<StringTokenizer>(stringTokenizerArray0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      // Undeclared exception!
      try { 
        IteratorUtils.forEachButLast((Iterator<StringTokenizer>) objectArrayIterator0, (Closure<? super StringTokenizer>) closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Class<Object> class0 = IteratorUtils.forEachButLast((Iterator<Class<Object>>) null, (Closure<? super Class<Object>>) closure0);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MapIterator<StringTokenizer, Object> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Closure<StringTokenizer> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.forEach((Iterator<StringTokenizer>) mapIterator0, (Closure<? super StringTokenizer>) closure0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Closure<StringTokenizer> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.forEach((Iterator<StringTokenizer>) null, (Closure<? super StringTokenizer>) closure0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(hashMap0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[5];
      StringTokenizer stringTokenizer0 = new StringTokenizer("&[@Glc-\"[L%/tQ");
      stringTokenizerArray0[0] = stringTokenizer0;
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizerArray0[0]);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(stack0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MapIterator<StringTokenizer, Object> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends StringTokenizer>) orderedMapIterator0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Locale.Category> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) null, (Iterator<? extends Locale.Category>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Comparator<StringTokenizer> comparator0 = (Comparator<StringTokenizer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super StringTokenizer>) comparator0, (Iterator<? extends StringTokenizer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LinkedHashSet<StringTokenizer> linkedHashSet0 = new LinkedHashSet<StringTokenizer>();
      LoopingIterator<StringTokenizer> loopingIterator0 = new LoopingIterator<StringTokenizer>(linkedHashSet0);
      Enumeration<StringTokenizer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) loopingIterator0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<Class<StringTokenizer>>) null, 1668L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "0&", (-206), (-206));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<StringTokenizer>[] classArray0 = (Class<StringTokenizer>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(classArray0, 17);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("rL67w;X`;RN/jZAtFT?", "", true);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>((Predicate<? super Object>) null);
      Transformer<Object, StringTokenizer> transformer0 = ConstantTransformer.constantTransformer(stringTokenizer0);
      IfTransformer<Object, StringTokenizer> ifTransformer0 = new IfTransformer<Object, StringTokenizer>(nullIsExceptionPredicate0, transformer0, transformer0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.objectGraphIterator(stringTokenizer0, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) ifTransformer0);
      Iterator<StringTokenizer> iterator1 = IteratorUtils.unmodifiableIterator(iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Stack<Class<StringTokenizer>> stack0 = new Stack<Class<StringTokenizer>>();
      Enumeration<Class<StringTokenizer>> enumeration0 = stack0.elements();
      Iterator<Class<StringTokenizer>> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Class<StringTokenizer>>) enumeration0, (Collection<? super Class<StringTokenizer>>) stack0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Predicate<StringTokenizer> predicate0 = NullPredicate.nullPredicate();
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends StringTokenizer>) resettableListIterator0, (Predicate<? super StringTokenizer>) predicate0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("L8|d9'P");
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0);
      Transformer<StringTokenizer, StringTokenizer> transformer0 = InvokerTransformer.invokerTransformer("KqDj=}1ZNA<Y::_0W~");
      Iterator<StringTokenizer> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends StringTokenizer>) singletonIterator0, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends StringTokenizer>) iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'KqDj=}1ZNA<Y::_0W~' on 'class java.util.StringTokenizer' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends ResolverStyle>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends Month>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ResettableListIterator<Class<StringTokenizer>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) resettableListIterator0, 597, 597);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("S#eJ#U1a", "S#eJ#U1a");
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.singletonListIterator(stringTokenizer0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) listIterator0);
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      // Undeclared exception!
      IteratorUtils.forEach((Iterator<Object>) resettableListIterator0, (Closure<? super Object>) closure0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Vector<HashMap<StringTokenizer, DayOfWeek>> vector0 = new Vector<HashMap<StringTokenizer, DayOfWeek>>();
      ResettableListIterator<HashMap<StringTokenizer, DayOfWeek>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<HashMap<StringTokenizer, DayOfWeek>>) vector0);
      HashMap<StringTokenizer, DayOfWeek> hashMap0 = new HashMap<StringTokenizer, DayOfWeek>();
      vector0.add(hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<HashMap<StringTokenizer, DayOfWeek>>) resettableListIterator0, 100);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      OrderedMapIterator<Object, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterable<Object> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<?>) orderedMapIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) resettableIterator0, 1583);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Class<StringTokenizer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      OrderedIterator<StringTokenizer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) orderedIterator0, (Iterator<? extends StringTokenizer>) null, (Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("");
      HashSet<StringTokenizer> hashSet0 = new HashSet<StringTokenizer>();
      LoopingIterator<Object> loopingIterator0 = new LoopingIterator<Object>(hashSet0);
      String string0 = IteratorUtils.toString((Iterator<Object>) loopingIterator0, (Transformer<? super Object, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<StringTokenizer, Iterator<Class<StringTokenizer>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[1];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(stringTokenizerArray0, 1, (-1056));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((ThaiBuddhistEra[]) null, 1668, 1668);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // nodeList
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) null, (Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "", true);
      Transformer<Object, StringTokenizer> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<StringTokenizer> iterator0 = IteratorUtils.objectGraphIterator(stringTokenizer0, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, Predicate<Object>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends StringTokenizer>) orderedMapIterator0, (Predicate<? super StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Class<StringTokenizer>[]) null, (-480));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 3062);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<StringTokenizer> class0 = StringTokenizer.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends StringTokenizer>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }
}
