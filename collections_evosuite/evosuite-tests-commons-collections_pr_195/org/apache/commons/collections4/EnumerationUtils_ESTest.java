/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 15:32:28 GMT 2025
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Enumeration;
import java.util.List;
import java.util.StringTokenizer;
import org.apache.commons.collections4.EnumerationUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class EnumerationUtils_ESTest extends EnumerationUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Enumeration<String> enumeration0 = (Enumeration<String>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      List<String> list0 = EnumerationUtils.toList((Enumeration<? extends String>) enumeration0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("L]{OK>e*is},R};IW");
      List<Object> list0 = EnumerationUtils.toList((Enumeration<?>) stringTokenizer0);
      assertTrue(list0.contains("L]{OK>e*is},R};IW"));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Enumeration<String> enumeration0 = (Enumeration<String>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      String string0 = EnumerationUtils.get(enumeration0, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        EnumerationUtils.toList((StringTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.EnumerationUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Enumeration<String> enumeration0 = (Enumeration<String>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      List<Object> list0 = EnumerationUtils.toList((Enumeration<?>) enumeration0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        EnumerationUtils.get((Enumeration<Object>) null, 47);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.EnumerationUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("9<");
      List<String> list0 = EnumerationUtils.toList(stringTokenizer0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      List<String> list0 = EnumerationUtils.toList(stringTokenizer0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("9<");
      Object object0 = EnumerationUtils.get((Enumeration<Object>) stringTokenizer0, 0);
      assertEquals("9<", object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("9<");
      // Undeclared exception!
      try { 
        EnumerationUtils.get((Enumeration<Object>) stringTokenizer0, 4085);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 4084
         //
         verifyException("org.apache.commons.collections4.EnumerationUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        EnumerationUtils.toList((Enumeration<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.EnumerationIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Iterable<String> iterable0 = EnumerationUtils.asIterable((Enumeration<String>) null);
      assertNotNull(iterable0);
  }
}
