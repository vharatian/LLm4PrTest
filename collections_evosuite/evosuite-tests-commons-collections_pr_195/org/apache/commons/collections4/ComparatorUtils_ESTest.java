/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 15:30:23 GMT 2025
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import org.apache.commons.collections4.ComparatorUtils;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.CloneTransformer;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ComparatorUtils_ESTest extends ComparatorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-622));
      Integer integer1 = new Integer(604);
      Comparator<Integer>[] comparatorArray0 = (Comparator<Integer>[]) Array.newInstance(Comparator.class, 8);
      Integer integer2 = ComparatorUtils.max(integer0, integer1, comparatorArray0[0]);
      assertEquals(604, (int)integer2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Comparator<Integer> comparator0 = ComparatorUtils.naturalComparator();
      Integer integer1 = new Integer((-3359));
      Integer integer2 = ComparatorUtils.min(integer0, integer1, comparator0);
      assertEquals((-3359), (int)integer2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparator<Object>[] comparatorArray0 = (Comparator<Object>[]) Array.newInstance(Comparator.class, 0);
      Comparator<Object> comparator0 = ComparatorUtils.chainedComparator(comparatorArray0);
      Comparator<Object> comparator1 = ComparatorUtils.nullLowComparator(comparator0);
      assertFalse(comparator1.equals((Object)comparator0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Comparator<Integer>> linkedList0 = new LinkedList<Comparator<Integer>>();
      Comparator<Integer> comparator0 = ComparatorUtils.chainedComparator((Collection<Comparator<Integer>>) linkedList0);
      Comparator<Integer> comparator1 = ComparatorUtils.nullHighComparator(comparator0);
      Integer integer0 = ComparatorUtils.min((Integer) null, (Integer) null, comparator1);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparable0).compareTo(any());
      doReturn((String) null).when(comparable0).toString();
      Comparator<Comparable<Object>> comparator0 = ComparatorUtils.reversedComparator((Comparator<Comparable<Object>>) null);
      Comparable<Object> comparable1 = ComparatorUtils.min(comparable0, comparable0, comparator0);
      assertSame(comparable1, comparable0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = Integer.valueOf(5);
      Comparator<Integer> comparator0 = ComparatorUtils.naturalComparator();
      Comparator<Integer> comparator1 = ComparatorUtils.nullHighComparator(comparator0);
      Integer integer1 = ComparatorUtils.max((Integer) null, integer0, comparator1);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(1);
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      Comparator<Object> comparator0 = ComparatorUtils.chainedComparator((Collection<Comparator<Object>>) linkedList0);
      Comparator<Object> comparator1 = ComparatorUtils.nullHighComparator(comparator0);
      Factory<Integer> factory0 = ConstantFactory.constantFactory(integer0);
      Transformer<Object, Integer> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Integer>) factory0);
      Comparator<Object> comparator2 = ComparatorUtils.transformedComparator(comparator1, (Transformer<? super Object, ?>) transformer0);
      Object object0 = new Object();
      Object object1 = ComparatorUtils.max((Object) comparator1, object0, comparator2);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comparator<Integer> comparator0 = ComparatorUtils.naturalComparator();
      Transformer<Object, Object> transformer0 = ExceptionTransformer.exceptionTransformer();
      Comparator<Object> comparator1 = ComparatorUtils.transformedComparator((Comparator<Object>) null, (Transformer<? super Object, ?>) transformer0);
      // Undeclared exception!
      try { 
        ComparatorUtils.min((Object) comparator0, (Object) comparator0, comparator1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      Comparator<Object> comparator0 = ComparatorUtils.chainedComparator((Collection<Comparator<Object>>) linkedList0);
      // Undeclared exception!
      try { 
        ComparatorUtils.min((Object) linkedList0, (Object) comparator0, comparator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ComparatorChains must contain at least one Comparator
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        ComparatorUtils.min((Object) null, (Object) null, (Comparator<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      Comparator<Object> comparator0 = ComparatorUtils.chainedComparator((Collection<Comparator<Object>>) linkedList0);
      Transformer<Object, Object> transformer0 = CloneTransformer.cloneTransformer();
      Comparator<Object> comparator1 = ComparatorUtils.transformedComparator(comparator0, (Transformer<? super Object, ?>) transformer0);
      Comparator<Comparable<Object>>[] comparatorArray0 = (Comparator<Comparable<Object>>[]) Array.newInstance(Comparator.class, 0);
      Comparator<Comparable<Object>> comparator2 = ComparatorUtils.chainedComparator(comparatorArray0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ComparatorUtils.min(object0, (Object) comparator2, comparator1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The prototype must be cloneable via a public clone method
         //
         verifyException("org.apache.commons.collections4.functors.PrototypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        ComparatorUtils.min((Object) linkedList0, (Object) linkedList0, (Comparator<Object>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.LinkedList cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.collections4.comparators.ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comparator<Integer> comparator0 = ComparatorUtils.naturalComparator();
      // Undeclared exception!
      try { 
        ComparatorUtils.max((Integer) null, (Integer) null, comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      Comparator<Object>[] comparatorArray0 = (Comparator<Object>[]) Array.newInstance(Comparator.class, 7);
      Comparator<Object> comparator0 = ComparatorUtils.nullHighComparator(comparatorArray0[0]);
      Class<Object> class0 = Object.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      InstantiateFactory<Object> instantiateFactory0 = new InstantiateFactory<Object>(class0, classArray0, comparatorArray0);
      FactoryTransformer<Object, Object> factoryTransformer0 = new FactoryTransformer<Object, Object>(instantiateFactory0);
      Comparator<Object> comparator1 = ComparatorUtils.transformedComparator(comparator0, (Transformer<? super Object, ?>) factoryTransformer0);
      // Undeclared exception!
      try { 
        ComparatorUtils.max(object0, object0, comparator1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      LinkedList<Comparator<Boolean>> linkedList0 = new LinkedList<Comparator<Boolean>>();
      Comparator<Boolean> comparator0 = ComparatorUtils.chainedComparator((Collection<Comparator<Boolean>>) linkedList0);
      Predicate<Boolean>[] predicateArray0 = (Predicate<Boolean>[]) Array.newInstance(Predicate.class, 3);
      Predicate<Boolean> predicate0 = IdentityPredicate.identityPredicate((Boolean) null);
      predicateArray0[0] = predicate0;
      UniquePredicate<Boolean> uniquePredicate0 = new UniquePredicate<Boolean>();
      predicateArray0[1] = (Predicate<Boolean>) uniquePredicate0;
      Transformer<Boolean, Boolean>[] transformerArray0 = (Transformer<Boolean, Boolean>[]) Array.newInstance(Transformer.class, 1);
      Factory<Boolean> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Boolean, Boolean> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Boolean>) factory0);
      SwitchTransformer<Boolean, Boolean> switchTransformer0 = new SwitchTransformer<Boolean, Boolean>(predicateArray0, transformerArray0, transformer0);
      Comparator<Boolean> comparator1 = ComparatorUtils.transformedComparator(comparator0, (Transformer<? super Boolean, ? extends Boolean>) switchTransformer0);
      // Undeclared exception!
      try { 
        ComparatorUtils.max(boolean0, boolean0, comparator1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        ComparatorUtils.chainedComparator((Collection<Comparator<Transformer<Transformer, Predicate>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ComparatorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Comparator<Integer>[] comparatorArray0 = (Comparator<Integer>[]) Array.newInstance(Comparator.class, 6);
      Comparator<Integer> comparator0 = ComparatorUtils.naturalComparator();
      comparatorArray0[0] = comparator0;
      comparatorArray0[1] = comparatorArray0[0];
      comparatorArray0[2] = comparator0;
      comparatorArray0[3] = comparatorArray0[0];
      comparatorArray0[4] = comparatorArray0[1];
      comparatorArray0[5] = comparatorArray0[1];
      Comparator<Integer> comparator1 = ComparatorUtils.chainedComparator(comparatorArray0);
      assertFalse(comparator1.equals((Object)comparator0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(1);
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      Comparator<Object> comparator0 = ComparatorUtils.chainedComparator((Collection<Comparator<Object>>) linkedList0);
      // Undeclared exception!
      try { 
        ComparatorUtils.max((Object) integer0, (Object) integer0, comparator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ComparatorChains must contain at least one Comparator
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer(166);
      Comparator<Integer> comparator0 = ComparatorUtils.naturalComparator();
      Integer integer1 = new Integer(0);
      Integer integer2 = ComparatorUtils.min(integer1, integer0, comparator0);
      assertEquals(0, (int)integer2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Comparator<Integer> comparator0 = ComparatorUtils.nullLowComparator((Comparator<Integer>) null);
      assertNotNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comparator<Integer>[] comparatorArray0 = (Comparator<Integer>[]) Array.newInstance(Comparator.class, 1);
      // Undeclared exception!
      try { 
        ComparatorUtils.chainedComparator(comparatorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // comparator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Comparator<Boolean> comparator0 = ComparatorUtils.booleanComparator(true);
      assertNotNull(comparator0);
  }
}
