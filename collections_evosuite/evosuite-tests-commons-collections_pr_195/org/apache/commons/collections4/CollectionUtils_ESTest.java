/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 15:28:15 GMT 2025
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.nio.CharBuffer;
import java.time.chrono.Chronology;
import java.time.chrono.HijrahEra;
import java.time.chrono.IsoEra;
import java.time.chrono.ThaiBuddhistEra;
import java.time.format.FormatStyle;
import java.time.format.TextStyle;
import java.time.temporal.ChronoUnit;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.NavigableSet;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.CloneTransformer;
import org.apache.commons.collections4.functors.ClosureTransformer;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NOPTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.list.FixedSizeList;
import org.apache.commons.collections4.queue.CircularFifoQueue;
import org.apache.commons.io.IOCase;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CollectionUtils_ESTest extends CollectionUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FormatStyle formatStyle0 = FormatStyle.SHORT;
      EnumSet<FormatStyle> enumSet0 = EnumSet.of(formatStyle0);
      Integer integer0 = new Integer((-1540));
      Collection<Object> collection0 = CollectionUtils.subtract((Iterable<?>) enumSet0, (Iterable<?>) enumSet0);
      ConstantTransformer<Object, Integer> constantTransformer0 = new ConstantTransformer<Object, Integer>(integer0);
      Collection<Object> collection1 = CollectionUtils.transformingCollection(collection0, (Transformer<? super Object, ?>) constantTransformer0);
      assertFalse(collection1.equals((Object)collection0));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      // Undeclared exception!
      try { 
        CollectionUtils.removeCount((Collection<Object>) treeSet0, 9, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The sum of start index and count can't be greater than the size of collection.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      // Undeclared exception!
      try { 
        CollectionUtils.removeRange((Collection<Object>) treeSet0, (-3835), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The start index can't be less than 0.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>(0);
      List<Integer> list0 = CollectionUtils.collate((Iterable<? extends Integer>) arrayList0, (Iterable<? extends Integer>) stack0);
      assertFalse(list0.contains(0));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>(comparator0);
      DefaultEquator<Integer> defaultEquator0 = DefaultEquator.defaultEquator();
      Collection<Integer> collection0 = CollectionUtils.removeAll((Iterable<Integer>) treeSet0, (Iterable<? extends Integer>) treeSet0, (Equator<? super Integer>) defaultEquator0);
      Integer[] integerArray0 = new Integer[9];
      boolean boolean0 = CollectionUtils.addAll(collection0, integerArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer((-1));
      Stack<Integer> stack0 = new Stack<Integer>();
      stack0.add(integer0);
      Stack<Predicate<Integer>> stack1 = new Stack<Predicate<Integer>>();
      Predicate<Integer> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Integer>>) stack1);
      CollectionUtils.select((Iterable<? extends Integer>) stack0, (Predicate<? super Integer>) predicate0, (Collection<Integer>) stack0, (Collection<Integer>) arrayList0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = new Integer(1059);
      stack0.add(integer0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Collection<Integer> collection0 = CollectionUtils.intersection((Iterable<? extends Integer>) stack0, (Iterable<? extends Integer>) stack0);
      Collection<Integer> collection1 = CollectionUtils.select((Iterable<? extends Integer>) collection0, (Predicate<? super Integer>) predicate0, (Collection<Integer>) stack0, collection0);
      assertEquals(2, stack0.size());
      assertFalse(collection1.equals((Object)collection0));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Vector<Integer> vector0 = new Vector<Integer>(7, (-100));
      DefaultEquator<Integer> defaultEquator0 = DefaultEquator.defaultEquator();
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<? extends Integer>) vector0, (Collection<? extends Integer>) stack0, (Equator<? super Integer>) defaultEquator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>(645, 645);
      Integer integer0 = new Integer(645);
      vector0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      DefaultEquator<Integer> defaultEquator0 = DefaultEquator.defaultEquator();
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<? extends Integer>) linkedHashSet0, (Collection<? extends Integer>) vector0, (Equator<? super Integer>) defaultEquator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FormatStyle formatStyle0 = FormatStyle.SHORT;
      EnumSet<FormatStyle> enumSet0 = EnumSet.of(formatStyle0);
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<?>) treeSet0, (Collection<?>) enumSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>(comparator0);
      Integer integer0 = new Integer((-555));
      priorityQueue0.add(integer0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      boolean boolean0 = CollectionUtils.isProperSubCollection(priorityQueue0, linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FormatStyle formatStyle0 = FormatStyle.SHORT;
      EnumSet<FormatStyle> enumSet0 = EnumSet.of(formatStyle0);
      List<FormatStyle> list0 = CollectionUtils.collate((Iterable<? extends FormatStyle>) enumSet0, (Iterable<? extends FormatStyle>) enumSet0);
      boolean boolean0 = CollectionUtils.isSubCollection(enumSet0, list0);
      assertEquals(2, list0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FormatStyle formatStyle0 = FormatStyle.LONG;
      EnumSet<FormatStyle> enumSet0 = EnumSet.of(formatStyle0);
      CircularFifoQueue<FormatStyle> circularFifoQueue0 = new CircularFifoQueue<FormatStyle>(1854);
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) enumSet0, (Collection<?>) circularFifoQueue0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer(93);
      arrayList0.add(integer0);
      arrayList0.add(integer0);
      Integer[] integerArray0 = new Integer[1];
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) arrayList0, integerArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Collection<Object> collection0 = CollectionUtils.subtract((Iterable<?>) linkedList0, (Iterable<?>) treeSet0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      NavigableSet<Integer> navigableSet0 = treeSet0.descendingSet();
      Collection<Integer> collection0 = CollectionUtils.intersection((Iterable<? extends Integer>) navigableSet0, (Iterable<? extends Integer>) treeSet0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      NavigableSet<Integer> navigableSet0 = treeSet0.descendingSet();
      Collection<Integer> collection0 = CollectionUtils.union((Iterable<? extends Integer>) treeSet0, (Iterable<? extends Integer>) navigableSet0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CollectionUtils.checkIndexBounds(0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CircularFifoQueue<FormatStyle> circularFifoQueue0 = new CircularFifoQueue<FormatStyle>();
      Collection<Object> collection0 = CollectionUtils.unmodifiableCollection((Collection<?>) circularFifoQueue0);
      int int0 = CollectionUtils.maxSize(collection0);
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      // Undeclared exception!
      try { 
        CollectionUtils.get((Map<Object, Integer>) hashMap0, 699);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 699
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LinkedHashSet<FormatStyle> linkedHashSet0 = new LinkedHashSet<FormatStyle>();
      FormatStyle formatStyle0 = FormatStyle.LONG;
      linkedHashSet0.add(formatStyle0);
      Map<Object, Integer> map0 = CollectionUtils.getCardinalityMap((Iterable<?>) linkedHashSet0);
      int int0 = CollectionUtils.size(map0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Collection<Integer> collection0 = CollectionUtils.emptyCollection();
      Collection<Object> collection1 = CollectionUtils.select((Iterable<? extends Integer>) collection0, (Predicate<? super Integer>) null, (Collection<Object>) null, (Collection<Object>) null);
      assertNull(collection1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Collection<Object> collection0 = CollectionUtils.removeRange((Collection<Object>) treeSet0, 0, 0);
      assertFalse(collection0.contains(0));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>(1750, comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Integer> list0 = CollectionUtils.collate((Iterable<? extends Integer>) priorityQueue0, (Iterable<? extends Integer>) priorityQueue0, (Comparator<? super Integer>) comparator1);
      FixedSizeList<Integer> fixedSizeList0 = FixedSizeList.fixedSizeList(list0);
      int int0 = CollectionUtils.maxSize(fixedSizeList0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ArrayList<Comparable<IsoEra>> arrayList0 = new ArrayList<Comparable<IsoEra>>();
      FixedSizeList<Comparable<IsoEra>> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Comparable<IsoEra>>) arrayList0);
      boolean boolean0 = CollectionUtils.isFull(fixedSizeList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      stack0.add((Integer) null);
      ListIterator<Integer> listIterator0 = stack0.listIterator();
      Object object0 = CollectionUtils.get((Object) listIterator0, 0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PriorityQueue<LinkedList<Object>> priorityQueue0 = new PriorityQueue<LinkedList<Object>>();
      Vector<LinkedList<Object>> vector0 = new Vector<LinkedList<Object>>(priorityQueue0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      vector0.add(linkedList0);
      ExceptionClosure<Object> exceptionClosure0 = (ExceptionClosure<Object>) mock(ExceptionClosure.class, new ViolatedAssumptionAnswer());
      LinkedList<Object> linkedList1 = CollectionUtils.forAllButLastDo((Iterable<LinkedList<Object>>) vector0, exceptionClosure0);
      assertTrue(vector0.contains(linkedList1));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer(2610);
      arrayList0.add(integer0);
      UniquePredicate<Integer> uniquePredicate0 = new UniquePredicate<Integer>();
      boolean boolean0 = CollectionUtils.filterInverse((Iterable<Integer>) arrayList0, (Predicate<? super Integer>) uniquePredicate0);
      assertFalse(arrayList0.contains(2610));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FormatStyle formatStyle0 = FormatStyle.SHORT;
      EnumSet<FormatStyle> enumSet0 = EnumSet.range(formatStyle0, formatStyle0);
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      int int0 = CollectionUtils.countMatches((Iterable<FormatStyle>) enumSet0, (Predicate<? super FormatStyle>) predicate0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ArrayDeque<LinkedList<FormatStyle>> arrayDeque0 = new ArrayDeque<LinkedList<FormatStyle>>();
      LinkedList<FormatStyle> linkedList0 = CollectionUtils.collect((Iterable<? extends LinkedList<FormatStyle>>) arrayDeque0, (Transformer<? super LinkedList<FormatStyle>, ? extends FormatStyle>) null, (LinkedList<FormatStyle>) null);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Integer integer0 = new Integer((-1));
      treeSet0.add(integer0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      List<Integer> list0 = CollectionUtils.collate((Iterable<? extends Integer>) treeSet0, (Iterable<? extends Integer>) treeSet0, (Comparator<? super Integer>) comparator0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PriorityQueue<HijrahEra> priorityQueue0 = new PriorityQueue<HijrahEra>();
      List<HijrahEra> list0 = CollectionUtils.collate((Iterable<? extends HijrahEra>) priorityQueue0, (Iterable<? extends HijrahEra>) priorityQueue0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Collection<Integer> collection0 = CollectionUtils.retainAll((Collection<Integer>) linkedHashSet0, (Collection<?>) list0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Collection<Object> collection0 = CollectionUtils.emptyIfNull((Collection<Object>) null);
      Integer integer0 = new Integer(7);
      int int0 = CollectionUtils.cardinality(integer0, (Iterable<? super Integer>) collection0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = new Integer(0);
      stack0.add(integer0);
      int int0 = CollectionUtils.cardinality(integer0, (Iterable<? super Integer>) stack0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>(1855);
      Comparator<FormatStyle> comparator0 = (Comparator<FormatStyle>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<FormatStyle> priorityQueue1 = new PriorityQueue<FormatStyle>(10, comparator0);
      FormatStyle formatStyle0 = FormatStyle.LONG;
      priorityQueue1.add(formatStyle0);
      FormatStyle formatStyle1 = CollectionUtils.get((Iterable<FormatStyle>) priorityQueue1, 0);
      LinkedList<FormatStyle> linkedList0 = new LinkedList<FormatStyle>();
      linkedList0.add(formatStyle1);
      Iterator<FormatStyle> iterator0 = linkedList0.descendingIterator();
      boolean boolean0 = CollectionUtils.addAll((Collection<Object>) priorityQueue0, (Iterator<?>) iterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = new Integer(0);
      stack0.add(integer0);
      boolean boolean0 = CollectionUtils.addAll((Collection<Integer>) stack0, (Iterable<? extends Integer>) stack0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      FixedSizeList<Object> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Object>) stack0);
      stack0.push(fixedSizeList0);
      // Undeclared exception!
      try { 
        CollectionUtils.union((Iterable<?>) fixedSizeList0, (Iterable<?>) fixedSizeList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FormatStyle formatStyle0 = FormatStyle.MEDIUM;
      EnumSet<FormatStyle> enumSet0 = EnumSet.of(formatStyle0);
      // Undeclared exception!
      try { 
        CollectionUtils.union((Iterable<? extends FormatStyle>) null, (Iterable<? extends FormatStyle>) enumSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // a
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Vector<ThaiBuddhistEra> vector0 = new Vector<ThaiBuddhistEra>(31, (-1));
      // Undeclared exception!
      try { 
        CollectionUtils.transformingCollection((Collection<ThaiBuddhistEra>) vector0, (Transformer<? super ThaiBuddhistEra, ? extends ThaiBuddhistEra>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FormatStyle formatStyle0 = FormatStyle.SHORT;
      EnumSet<FormatStyle> enumSet0 = EnumSet.of(formatStyle0, formatStyle0, formatStyle0, formatStyle0, formatStyle0);
      ConstantTransformer<FormatStyle, FormatStyle> constantTransformer0 = new ConstantTransformer<FormatStyle, FormatStyle>(formatStyle0);
      Collection<FormatStyle> collection0 = CollectionUtils.unmodifiableCollection((Collection<? extends FormatStyle>) enumSet0);
      // Undeclared exception!
      try { 
        CollectionUtils.transform(collection0, (Transformer<? super FormatStyle, ? extends FormatStyle>) constantTransformer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CircularFifoQueue<IOCase> circularFifoQueue0 = new CircularFifoQueue<IOCase>(93);
      FactoryTransformer<IOCase, IOCase> factoryTransformer0 = new FactoryTransformer<IOCase, IOCase>((Factory<? extends IOCase>) null);
      IOCase iOCase0 = IOCase.INSENSITIVE;
      circularFifoQueue0.add(iOCase0);
      // Undeclared exception!
      try { 
        CollectionUtils.transform((Collection<IOCase>) circularFifoQueue0, (Transformer<? super IOCase, ? extends IOCase>) factoryTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.FactoryTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.synchronizedCollection((Collection<FormatStyle>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.subtract((Iterable<? extends Integer>) null, (Iterable<? extends Integer>) null, (Predicate<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // a
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.subtract((Iterable<? extends Integer>) null, (Iterable<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // a
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      Predicate<Integer>[] predicateArray0 = (Predicate<Integer>[]) Array.newInstance(Predicate.class, 6);
      Predicate<Integer> predicate0 = UniquePredicate.uniquePredicate();
      predicateArray0[0] = predicate0;
      NotPredicate<Integer> notPredicate0 = new NotPredicate<Integer>(predicate0);
      predicateArray0[1] = (Predicate<Integer>) notPredicate0;
      Integer integer0 = new Integer((-1579));
      EqualPredicate<Integer> equalPredicate0 = new EqualPredicate<Integer>(integer0);
      predicateArray0[2] = (Predicate<Integer>) equalPredicate0;
      AllPredicate<Integer> allPredicate0 = new AllPredicate<Integer>(predicateArray0);
      // Undeclared exception!
      try { 
        CollectionUtils.selectRejected((Iterable<? extends Integer>) linkedList0, (Predicate<? super Integer>) allPredicate0, (Collection<Integer>) linkedList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = new Integer(0);
      stack0.add(integer0);
      Transformer<Integer, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      TransformerPredicate<Integer> transformerPredicate0 = new TransformerPredicate<Integer>(transformer0);
      // Undeclared exception!
      try { 
        CollectionUtils.selectRejected((Iterable<? extends Integer>) stack0, (Predicate<? super Integer>) transformerPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FormatStyle formatStyle0 = FormatStyle.LONG;
      EnumSet<FormatStyle> enumSet0 = EnumSet.of(formatStyle0);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 4);
      InvokerTransformer<Object, Boolean> invokerTransformer0 = new InvokerTransformer<Object, Boolean>("0;p", classArray0, classArray0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(invokerTransformer0);
      // Undeclared exception!
      try { 
        CollectionUtils.select((Iterable<?>) enumSet0, (Predicate<? super Object>) transformerPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '0;p' on 'class java.time.format.FormatStyle' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.reverseArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // array
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.retainAll((Collection<Object>) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      // Undeclared exception!
      try { 
        CollectionUtils.retainAll((Iterable<ThaiBuddhistEra>) null, (Iterable<? extends ThaiBuddhistEra>) null, (Equator<? super ThaiBuddhistEra>) defaultEquator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.removeRange((Collection<LinkedList<Integer>>) null, 2961, 2961);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.removeCount((Collection<FormatStyle>) null, (-954), (-954));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.removeAll((Collection<FormatStyle>) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DefaultEquator<FormatStyle> defaultEquator0 = DefaultEquator.defaultEquator();
      // Undeclared exception!
      try { 
        CollectionUtils.removeAll((Iterable<FormatStyle>) null, (Iterable<? extends FormatStyle>) null, (Equator<? super FormatStyle>) defaultEquator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      // Undeclared exception!
      try { 
        CollectionUtils.predicatedCollection((Collection<Integer>) null, (Predicate<? super Integer>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FormatStyle formatStyle0 = FormatStyle.SHORT;
      FormatStyle formatStyle1 = FormatStyle.FULL;
      EnumSet<FormatStyle> enumSet0 = EnumSet.of(formatStyle1);
      Predicate<FormatStyle> predicate0 = IdentityPredicate.identityPredicate(formatStyle0);
      // Undeclared exception!
      try { 
        CollectionUtils.predicatedCollection((Collection<FormatStyle>) enumSet0, (Predicate<? super FormatStyle>) predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'FULL' - Predicate 'org.apache.commons.collections4.functors.IdentityPredicate@1' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.permutations((Collection<FormatStyle>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.maxSize((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      arrayList0.add((Object) arrayList0);
      // Undeclared exception!
      try { 
        CollectionUtils.isProperSubCollection(arrayList1, arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Collection<Object> collection0 = CollectionUtils.select((Iterable<?>) null, (Predicate<? super Object>) null);
      // Undeclared exception!
      try { 
        CollectionUtils.isProperSubCollection((Collection<?>) null, collection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // a
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.isFull((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        CollectionUtils.isEqualCollection((Collection<? extends Integer>) linkedList0, (Collection<? extends Integer>) linkedList0, (Equator<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // equator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.isEqualCollection((Collection<?>) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // a
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<FormatStyle> class0 = FormatStyle.class;
      EnumSet<FormatStyle> enumSet0 = EnumSet.allOf(class0);
      // Undeclared exception!
      try { 
        CollectionUtils.intersection((Iterable<?>) null, (Iterable<?>) enumSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // a
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Collection<FormatStyle> collection0 = CollectionUtils.emptyCollection();
      // Undeclared exception!
      try { 
        CollectionUtils.hashCode((Collection<?>) collection0, (Equator<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // equator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.getCardinalityMap((Iterable<? extends ArrayList<FormatStyle>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coll
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.get((Map<Integer, Integer>) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.get((Iterator<LinkedList<Integer>>) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      ListIterator<Integer> listIterator0 = stack0.listIterator();
      Integer integer0 = new Integer(0);
      stack0.add(integer0);
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) listIterator0, 0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>(645, 645);
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) vector0, 645);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 645
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.get((Iterable<FormatStyle>) null, (-170));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Collection<LinkedList<Object>> collection0 = CollectionUtils.emptyCollection();
      // Undeclared exception!
      try { 
        CollectionUtils.get((Iterable<LinkedList<Object>>) collection0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1
         //
         verifyException("java.util.Collections$EmptyList", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Vector<Transformer<Object, Integer>> vector0 = new Vector<Transformer<Object, Integer>>(4732);
      // Undeclared exception!
      try { 
        CollectionUtils.get((Iterable<Transformer<Object, Integer>>) vector0, 4732);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 4732
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Iterator<LinkedHashSet<Boolean>> iterator0 = (Iterator<LinkedHashSet<Boolean>>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      NOPClosure<Object> nOPClosure0 = (NOPClosure<Object>) mock(NOPClosure.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(nOPClosure0).toString();
      CollectionUtils.forAllDo(iterator0, nOPClosure0);
      PriorityQueue<LinkedHashSet<Integer>> priorityQueue0 = new PriorityQueue<LinkedHashSet<Integer>>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.iterator();
      priorityQueue0.add(linkedHashSet0);
      // Undeclared exception!
      try { 
        priorityQueue0.add(linkedHashSet0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.LinkedHashSet cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Iterator<InstanceofPredicate> iterator0 = linkedList0.iterator();
      Closure<InstanceofPredicate> closure0 = NOPClosure.nopClosure();
      Transformer<InstanceofPredicate, InstanceofPredicate> transformer0 = ClosureTransformer.closureTransformer((Closure<? super InstanceofPredicate>) closure0);
      TransformerClosure<InstanceofPredicate> transformerClosure0 = new TransformerClosure<InstanceofPredicate>(transformer0);
      Class<IOCase> class0 = IOCase.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      linkedList0.add(instanceofPredicate0);
      // Undeclared exception!
      try { 
        CollectionUtils.forAllDo(iterator0, transformerClosure0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FormatStyle formatStyle0 = FormatStyle.SHORT;
      FormatStyle formatStyle1 = FormatStyle.FULL;
      EnumSet<FormatStyle> enumSet0 = EnumSet.of(formatStyle0, formatStyle1, formatStyle0, formatStyle1);
      Iterator<FormatStyle> iterator0 = enumSet0.iterator();
      Factory<FormatStyle> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, FormatStyle> factoryTransformer0 = new FactoryTransformer<Object, FormatStyle>(factory0);
      TransformerClosure<FormatStyle> transformerClosure0 = new TransformerClosure<FormatStyle>(factoryTransformer0);
      // Undeclared exception!
      try { 
        CollectionUtils.forAllButLastDo(iterator0, transformerClosure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<FormatStyle> class0 = FormatStyle.class;
      EnumSet<FormatStyle> enumSet0 = EnumSet.noneOf(class0);
      NullIsExceptionPredicate<FormatStyle> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<FormatStyle>((Predicate<? super FormatStyle>) null);
      FormatStyle formatStyle0 = FormatStyle.FULL;
      enumSet0.add(formatStyle0);
      // Undeclared exception!
      try { 
        CollectionUtils.find((Iterable<FormatStyle>) enumSet0, (Predicate<? super FormatStyle>) nullIsExceptionPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.extractSingleton((Collection<Transformer<Integer, Transformer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>((SortedSet<? extends InstanceofPredicate>) treeSet0);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Integer integer0 = new Integer(2147483645);
      CollectionUtils.addIgnoreNull((Collection<Integer>) arrayDeque0, integer0);
      Predicate<Integer> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Integer>>) priorityQueue0);
      TransformedPredicate<Integer> transformedPredicate0 = new TransformedPredicate<Integer>((Transformer<? super Integer, ? extends Integer>) null, predicate0);
      // Undeclared exception!
      try { 
        CollectionUtils.exists((Iterable<Integer>) arrayDeque0, (Predicate<? super Integer>) transformedPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.TransformedPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.disjunction((Iterable<?>) null, (Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // a
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        CollectionUtils.containsAny((Collection<?>) linkedList0, (Transformer<FormatStyle, FormatStyle>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coll2
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<FormatStyle> class0 = FormatStyle.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<FormatStyle> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      FormatStyle formatStyle0 = FormatStyle.LONG;
      IdentityPredicate<FormatStyle> identityPredicate0 = new IdentityPredicate<FormatStyle>(formatStyle0);
      AndPredicate<FormatStyle> andPredicate0 = new AndPredicate<FormatStyle>(identityPredicate0, identityPredicate0);
      NullIsFalsePredicate<FormatStyle> nullIsFalsePredicate0 = new NullIsFalsePredicate<FormatStyle>(andPredicate0);
      Collection<FormatStyle> collection0 = CollectionUtils.subtract((Iterable<? extends FormatStyle>) serviceLoader0, (Iterable<? extends FormatStyle>) serviceLoader0, (Predicate<FormatStyle>) nullIsFalsePredicate0);
      // Undeclared exception!
      try { 
        CollectionUtils.containsAny((Collection<?>) null, collection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coll1
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        CollectionUtils.containsAll((Collection<?>) null, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coll1
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.SHORT;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0, textStyle0, textStyle0, textStyle0);
      Iterator<TextStyle> iterator0 = enumSet0.iterator();
      Transformer<TextStyle, TextStyle> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        CollectionUtils.collect(iterator0, (Transformer<? super TextStyle, ? extends TextStyle>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>();
      Integer integer0 = new Integer((-2759));
      circularFifoQueue0.add(integer0);
      Transformer<Integer, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        CollectionUtils.collect((Iterable<? extends Integer>) circularFifoQueue0, (Transformer<? super Integer, ? extends Integer>) transformer0, linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Integer integer0 = new Integer((-2638));
      treeSet0.add(integer0);
      Predicate<Integer> predicate0 = FalsePredicate.falsePredicate();
      IfTransformer<Integer, Integer> ifTransformer0 = new IfTransformer<Integer, Integer>(predicate0, (Transformer<? super Integer, ? extends Integer>) null, (Transformer<? super Integer, ? extends Integer>) null);
      // Undeclared exception!
      try { 
        CollectionUtils.collect((Iterable<Integer>) treeSet0, (Transformer<? super Integer, ? extends Integer>) ifTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Collection<IsoEra> collection0 = CollectionUtils.select((Iterable<? extends IsoEra>) null, (Predicate<? super IsoEra>) null);
      // Undeclared exception!
      try { 
        CollectionUtils.collate((Iterable<? extends IsoEra>) null, (Iterable<? extends IsoEra>) collection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterableA
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        CollectionUtils.collate((Iterable<?>) linkedList0, (Iterable<?>) linkedList0, (Comparator<? super Object>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // comparator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FormatStyle formatStyle0 = FormatStyle.LONG;
      EnumSet<FormatStyle> enumSet0 = EnumSet.of(formatStyle0, formatStyle0);
      // Undeclared exception!
      try { 
        CollectionUtils.collate((Iterable<? extends FormatStyle>) enumSet0, (Iterable<? extends FormatStyle>) enumSet0, (Comparator<? super FormatStyle>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // comparator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Integer integer0 = new Integer(865);
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      FactoryTransformer<Object, Integer> factoryTransformer0 = new FactoryTransformer<Object, Integer>(constantFactory0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      // Undeclared exception!
      try { 
        CollectionUtils.cardinality((Transformer<Object, Integer>) factoryTransformer0, (Iterable<? super Transformer<Object, Integer>>) treeSet0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<FormatStyle> class0 = FormatStyle.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<FormatStyle> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      Comparator<FormatStyle> comparator0 = (Comparator<FormatStyle>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<FormatStyle> list0 = CollectionUtils.collate((Iterable<? extends FormatStyle>) serviceLoader0, (Iterable<? extends FormatStyle>) serviceLoader0, (Comparator<? super FormatStyle>) comparator0, true);
      Collection<FormatStyle> collection0 = CollectionUtils.unmodifiableCollection((Collection<? extends FormatStyle>) list0);
      FormatStyle formatStyle0 = FormatStyle.SHORT;
      // Undeclared exception!
      try { 
        CollectionUtils.addIgnoreNull(collection0, formatStyle0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ArrayList<FormatStyle> arrayList0 = new ArrayList<FormatStyle>();
      Collection<FormatStyle> collection0 = CollectionUtils.unmodifiableCollection((Collection<? extends FormatStyle>) arrayList0);
      FormatStyle[] formatStyleArray0 = new FormatStyle[4];
      // Undeclared exception!
      try { 
        CollectionUtils.addAll(collection0, formatStyleArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<FormatStyle>) null, (Iterator<? extends FormatStyle>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>(priorityQueue0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Integer> list0 = CollectionUtils.collate((Iterable<? extends Integer>) arrayList0, (Iterable<? extends Integer>) priorityQueue0, (Comparator<? super Integer>) comparator0);
      Integer integer0 = new Integer(99);
      Predicate<Integer> predicate0 = IdentityPredicate.identityPredicate(integer0);
      Collection<Integer> collection0 = CollectionUtils.select((Iterable<? extends Integer>) list0, (Predicate<? super Integer>) predicate0, (Collection<Integer>) arrayList0, (Collection<Integer>) list0);
      CollectionUtils.containsAny((Collection<?>) collection0, (Collection<?>) list0);
      Integer integer1 = new Integer(187);
      Enumeration<Integer> enumeration0 = (Enumeration<Integer>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      CollectionUtils.addAll(collection0, (Enumeration<? extends Integer>) enumeration0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Collection<Integer> collection0 = CollectionUtils.emptyCollection();
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = new Integer(1088);
      stack0.push(integer0);
      Enumeration<Integer> enumeration0 = stack0.elements();
      // Undeclared exception!
      try { 
        CollectionUtils.addAll(collection0, (Enumeration<? extends Integer>) enumeration0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<Object>) null, (Enumeration<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CircularFifoQueue<FormatStyle> circularFifoQueue0 = new CircularFifoQueue<FormatStyle>();
      FormatStyle formatStyle0 = FormatStyle.MEDIUM;
      circularFifoQueue0.add(formatStyle0);
      // Undeclared exception!
      CollectionUtils.addAll((Collection<FormatStyle>) circularFifoQueue0, (Iterable<? extends FormatStyle>) circularFifoQueue0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<Integer>) null, (Iterable<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PriorityQueue<LinkedHashSet<Integer>> priorityQueue0 = new PriorityQueue<LinkedHashSet<Integer>>();
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<LinkedHashSet<Integer>>) priorityQueue0, (Iterable<? extends LinkedHashSet<Integer>>) priorityQueue0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PriorityQueue<Transformer<Integer, Integer>> priorityQueue0 = new PriorityQueue<Transformer<Integer, Integer>>();
      Collection<Transformer<Integer, Integer>> collection0 = CollectionUtils.synchronizedCollection((Collection<Transformer<Integer, Integer>>) priorityQueue0);
      // Undeclared exception!
      try { 
        CollectionUtils.addAll(collection0, (Iterable<? extends Transformer<Integer, Integer>>) priorityQueue0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      PriorityQueue<LinkedHashSet<Integer>> priorityQueue0 = new PriorityQueue<LinkedHashSet<Integer>>(1012);
      priorityQueue0.add(linkedHashSet0);
      PriorityQueue<LinkedHashSet<Integer>> priorityQueue1 = new PriorityQueue<LinkedHashSet<Integer>>((Collection<? extends LinkedHashSet<Integer>>) priorityQueue0);
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<LinkedHashSet<Integer>>) priorityQueue0, (Iterable<? extends LinkedHashSet<Integer>>) priorityQueue1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.LinkedHashSet cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        CollectionUtils.removeCount((Collection<Object>) vector0, (-4439), (-4439));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The start index can't be less than 0.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FormatStyle formatStyle0 = FormatStyle.LONG;
      EnumSet<FormatStyle> enumSet0 = EnumSet.of(formatStyle0, formatStyle0, formatStyle0);
      Vector<FormatStyle> vector0 = new Vector<FormatStyle>(650);
      Comparator<FormatStyle> comparator0 = (Comparator<FormatStyle>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.time.format.FormatStyle.class) , any(java.time.format.FormatStyle.class));
      vector0.add(formatStyle0);
      List<FormatStyle> list0 = CollectionUtils.collate((Iterable<? extends FormatStyle>) enumSet0, (Iterable<? extends FormatStyle>) vector0, (Comparator<? super FormatStyle>) comparator0, false);
      assertTrue(list0.contains(formatStyle0));
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      boolean boolean0 = CollectionUtils.addAll((Collection<Integer>) linkedList0, (Iterator<? extends Integer>) listIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      boolean boolean0 = CollectionUtils.addAll((Collection<Integer>) linkedList0, (Iterable<? extends Integer>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Transformer<Object, Object> transformer0 = CloneTransformer.cloneTransformer();
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) transformer0);
      Iterator<Object> iterator0 = stack0.iterator();
      // Undeclared exception!
      try { 
        CollectionUtils.collect((Iterator<?>) iterator0, (Transformer<? super Object, ?>) transformer0, (Collection<Object>) stack0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The prototype must be cloneable via a public clone method
         //
         verifyException("org.apache.commons.collections4.functors.PrototypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Iterator<Integer> iterator0 = arrayDeque0.descendingIterator();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = CollectionUtils.collect((Iterator<? extends Integer>) iterator0, (Transformer<? super Integer, ? extends LinkedList<Integer>>) null, linkedList0);
      assertSame(linkedList0, linkedList1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Transformer<Object, Object> transformer0 = CloneTransformer.cloneTransformer();
      Stack<Object> stack0 = new Stack<Object>();
      Iterator<Object> iterator0 = stack0.iterator();
      Collection<Object> collection0 = CollectionUtils.collect((Iterator<?>) iterator0, (Transformer<? super Object, ?>) transformer0, (Collection<Object>) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Collection<Integer> collection0 = CollectionUtils.emptyCollection();
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      Collection<Integer> collection1 = CollectionUtils.collect((Iterator<?>) null, (Transformer<? super Object, ? extends Integer>) transformer0, collection0);
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Transformer<Integer, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = CollectionUtils.collect((Iterable<? extends Integer>) null, (Transformer<? super Integer, ? extends Integer>) transformer0, linkedList0);
      assertSame(linkedList0, linkedList1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<FormatStyle>[] classArray0 = (Class<FormatStyle>[]) Array.newInstance(Class.class, 4);
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("p", (Class<?>[]) classArray0, (Object[]) classArray0);
      FormatStyle formatStyle0 = FormatStyle.FULL;
      EnumSet<FormatStyle> enumSet0 = EnumSet.of(formatStyle0, formatStyle0, formatStyle0);
      // Undeclared exception!
      try { 
        CollectionUtils.collect((Iterable<FormatStyle>) enumSet0, (Transformer<? super FormatStyle, ?>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'p' on 'class java.time.format.FormatStyle' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-3835));
      vector0.add(integer1);
      Predicate<Integer> predicate0 = EqualPredicate.equalPredicate(integer0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = CollectionUtils.selectRejected((Iterable<? extends Integer>) vector0, (Predicate<? super Integer>) predicate0, linkedList0);
      assertTrue(linkedList0.contains((-3835)));
      assertTrue(linkedList1.contains((-3835)));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>(645, 645);
      Integer integer0 = new Integer(5);
      vector0.add(integer0);
      UniquePredicate<Integer> uniquePredicate0 = new UniquePredicate<Integer>();
      Collection<Integer> collection0 = CollectionUtils.selectRejected((Iterable<? extends Integer>) vector0, (Predicate<? super Integer>) uniquePredicate0, (Collection<Integer>) vector0);
      assertTrue(collection0.contains(5));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<FormatStyle> class0 = FormatStyle.class;
      ServiceLoader<FormatStyle> serviceLoader0 = ServiceLoader.load(class0);
      Predicate<FormatStyle> predicate0 = NotNullPredicate.notNullPredicate();
      Collection<Object> collection0 = CollectionUtils.selectRejected((Iterable<? extends FormatStyle>) serviceLoader0, (Predicate<? super FormatStyle>) predicate0, (Collection<Object>) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<IsoEra> class0 = IsoEra.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<IsoEra> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      LinkedHashSet<Predicate<IsoEra>> linkedHashSet0 = new LinkedHashSet<Predicate<IsoEra>>();
      Predicate<IsoEra> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super IsoEra>>) linkedHashSet0);
      Collection<IsoEra> collection0 = CollectionUtils.select((Iterable<? extends IsoEra>) serviceLoader0, (Predicate<? super IsoEra>) predicate0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      Collection<Object> collection1 = CollectionUtils.selectRejected((Iterable<?>) collection0, (Predicate<? super Object>) null, (Collection<Object>) priorityQueue0);
      assertNotNull(collection1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList<Object> arrayList1 = CollectionUtils.selectRejected((Iterable<?>) null, (Predicate<? super Object>) null, arrayList0);
      assertTrue(arrayList1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<FormatStyle> class0 = FormatStyle.class;
      EnumSet<FormatStyle> enumSet0 = EnumSet.allOf(class0);
      FormatStyle formatStyle0 = FormatStyle.SHORT;
      EqualPredicate<FormatStyle> equalPredicate0 = new EqualPredicate<FormatStyle>(formatStyle0);
      Collection<FormatStyle> collection0 = CollectionUtils.select((Iterable<? extends FormatStyle>) enumSet0, (Predicate<? super FormatStyle>) equalPredicate0, (Collection<FormatStyle>) enumSet0);
      assertTrue(collection0.contains(formatStyle0));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Integer integer0 = new Integer((-2203));
      EqualPredicate<Integer> equalPredicate0 = new EqualPredicate<Integer>(integer0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add(integer0);
      // Undeclared exception!
      try { 
        CollectionUtils.select((Iterable<? extends Integer>) linkedList0, (Predicate<? super Integer>) equalPredicate0, linkedList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      FixedSizeList<Integer> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Integer>) arrayList0);
      Collection<Integer> collection0 = CollectionUtils.select((Iterable<? extends Integer>) null, (Predicate<? super Integer>) null, (Collection<Integer>) fixedSizeList0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Collection<Integer> collection0 = CollectionUtils.select((Iterable<? extends Integer>) linkedList0, (Predicate<? super Integer>) null, (Collection<Integer>) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Integer integer0 = new Integer((-2638));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add(integer0);
      FixedSizeList<Integer> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Integer>) linkedList0);
      boolean boolean0 = CollectionUtils.isSubCollection(fixedSizeList0, treeSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ArrayList<FormatStyle> arrayList0 = new ArrayList<FormatStyle>();
      FormatStyle formatStyle0 = FormatStyle.LONG;
      arrayList0.add(formatStyle0);
      arrayList0.add(formatStyle0);
      Map<FormatStyle, Integer> map0 = CollectionUtils.getCardinalityMap((Iterable<? extends FormatStyle>) arrayList0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      // Undeclared exception!
      try { 
        CollectionUtils.extractSingleton((Collection<InstanceofPredicate>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can extract singleton only when collection size == 1
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LinkedHashSet<FormatStyle> linkedHashSet0 = new LinkedHashSet<FormatStyle>();
      FormatStyle formatStyle0 = FormatStyle.LONG;
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EnumSet<FormatStyle> enumSet0 = EnumSet.of(formatStyle0, formatStyle0, formatStyle0, formatStyle0, formatStyle0);
      Collection<FormatStyle> collection0 = CollectionUtils.removeAll((Iterable<FormatStyle>) enumSet0, (Iterable<? extends FormatStyle>) linkedHashSet0, (Equator<? super FormatStyle>) defaultEquator0);
      assertTrue(collection0.contains(formatStyle0));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Collection<Object> collection0 = CollectionUtils.removeCount((Collection<Object>) treeSet0, 0, 0);
      assertFalse(collection0.contains(0));
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      // Undeclared exception!
      try { 
        CollectionUtils.removeCount((Collection<Object>) linkedHashSet0, 10, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The sum of start index and count can't be greater than the size of collection.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TreeSet<FormatStyle> treeSet0 = new TreeSet<FormatStyle>();
      // Undeclared exception!
      try { 
        CollectionUtils.removeCount((Collection<FormatStyle>) treeSet0, 1618, (-4439));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The count can't be less than 0.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<ThaiBuddhistEra> class0 = ThaiBuddhistEra.class;
      EnumSet<ThaiBuddhistEra> enumSet0 = EnumSet.allOf(class0);
      // Undeclared exception!
      try { 
        CollectionUtils.removeRange((Collection<ThaiBuddhistEra>) enumSet0, (-1), (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The start index can't be less than 0.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Vector<IsoEra> vector0 = new Vector<IsoEra>();
      // Undeclared exception!
      try { 
        CollectionUtils.removeRange((Collection<IsoEra>) vector0, 1580, 408);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end index can't be less than the start index.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      // Undeclared exception!
      try { 
        CollectionUtils.removeRange((Collection<Integer>) treeSet0, 1143, 1143);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The end index can't be greater than the size of collection.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<ThaiBuddhistEra> class0 = ThaiBuddhistEra.class;
      EnumSet<ThaiBuddhistEra> enumSet0 = EnumSet.allOf(class0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Collection<ThaiBuddhistEra> collection0 = CollectionUtils.emptyCollection();
      Collection<ThaiBuddhistEra> collection1 = CollectionUtils.retainAll((Iterable<ThaiBuddhistEra>) enumSet0, (Iterable<? extends ThaiBuddhistEra>) collection0, (Equator<? super ThaiBuddhistEra>) defaultEquator0);
      assertTrue(collection1.equals((Object)collection0));
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<ThaiBuddhistEra> class0 = ThaiBuddhistEra.class;
      EnumSet<ThaiBuddhistEra> enumSet0 = EnumSet.allOf(class0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Collection<ThaiBuddhistEra> collection0 = CollectionUtils.retainAll((Iterable<ThaiBuddhistEra>) enumSet0, (Iterable<? extends ThaiBuddhistEra>) enumSet0, (Equator<? super ThaiBuddhistEra>) defaultEquator0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FormatStyle formatStyle0 = FormatStyle.LONG;
      FormatStyle formatStyle1 = FormatStyle.SHORT;
      EnumSet<FormatStyle> enumSet0 = EnumSet.of(formatStyle0, formatStyle1, formatStyle1);
      Vector<FormatStyle> vector0 = new Vector<FormatStyle>(650);
      Comparator<FormatStyle> comparator0 = (Comparator<FormatStyle>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<FormatStyle> list0 = CollectionUtils.collate((Iterable<? extends FormatStyle>) enumSet0, (Iterable<? extends FormatStyle>) vector0, (Comparator<? super FormatStyle>) comparator0, false);
      assertTrue(list0.contains(formatStyle1));
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BEFORE_BE;
      EnumSet<ThaiBuddhistEra> enumSet0 = EnumSet.of(thaiBuddhistEra0, thaiBuddhistEra0);
      List<ThaiBuddhistEra> list0 = CollectionUtils.collate((Iterable<? extends ThaiBuddhistEra>) enumSet0, (Iterable<? extends ThaiBuddhistEra>) enumSet0, false);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(thaiBuddhistEra0));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Vector<FormatStyle> vector0 = new Vector<FormatStyle>(92, 0);
      Class<FormatStyle> class0 = FormatStyle.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<FormatStyle> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Object> list0 = CollectionUtils.collate((Iterable<?>) vector0, (Iterable<?>) serviceLoader0, (Comparator<? super Object>) comparator0, false);
      assertFalse(list0.contains(92));
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<FormatStyle> class0 = FormatStyle.class;
      ServiceLoader<FormatStyle> serviceLoader0 = ServiceLoader.load(class0);
      List<FormatStyle> list0 = CollectionUtils.collate((Iterable<? extends FormatStyle>) serviceLoader0, (Iterable<? extends FormatStyle>) serviceLoader0, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = CollectionUtils.maxSize(linkedList0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CircularFifoQueue<Object> circularFifoQueue0 = new CircularFifoQueue<Object>();
      boolean boolean0 = CollectionUtils.isFull(circularFifoQueue0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ArrayList<FormatStyle> arrayList0 = new ArrayList<FormatStyle>();
      boolean boolean0 = CollectionUtils.isFull(arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Closure<Integer>[] closureArray0 = (Closure<Integer>[]) Array.newInstance(Closure.class, 6);
      CollectionUtils.reverseArray(closureArray0);
      assertEquals(6, closureArray0.length);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      CollectionUtils.reverseArray(objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1);
      linkedList0.add(integer0);
      boolean boolean0 = CollectionUtils.isNotEmpty(linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ArrayList<ChronoUnit> arrayList0 = new ArrayList<ChronoUnit>(5);
      boolean boolean0 = CollectionUtils.isNotEmpty(arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FormatStyle formatStyle0 = FormatStyle.FULL;
      EnumSet<FormatStyle> enumSet0 = EnumSet.of(formatStyle0);
      boolean boolean0 = CollectionUtils.isEmpty(enumSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean0 = CollectionUtils.isEmpty(linkedHashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = CollectionUtils.isEmpty((Collection<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Integer integer0 = new Integer((-4202));
      treeSet0.add(integer0);
      Iterator<Integer> iterator0 = treeSet0.descendingIterator();
      boolean boolean0 = CollectionUtils.sizeIsEmpty(iterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Iterator<Integer> iterator0 = treeSet0.descendingIterator();
      boolean boolean0 = CollectionUtils.sizeIsEmpty(iterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HashSet<FormatStyle> hashSet0 = new HashSet<FormatStyle>();
      FormatStyle formatStyle0 = FormatStyle.LONG;
      hashSet0.add(formatStyle0);
      Map<Object, Integer> map0 = CollectionUtils.getCardinalityMap((Iterable<?>) hashSet0);
      boolean boolean0 = CollectionUtils.sizeIsEmpty(map0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.SHORT_STANDALONE;
      // Undeclared exception!
      try { 
        CollectionUtils.sizeIsEmpty(textStyle0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.time.format.TextStyle
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FormatStyle formatStyle0 = FormatStyle.LONG;
      EnumSet<FormatStyle> enumSet0 = EnumSet.of(formatStyle0);
      boolean boolean0 = CollectionUtils.sizeIsEmpty(enumSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean0 = CollectionUtils.sizeIsEmpty(linkedHashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      boolean boolean0 = CollectionUtils.sizeIsEmpty((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HashMap<Object, FormatStyle> hashMap0 = new HashMap<Object, FormatStyle>();
      boolean boolean0 = CollectionUtils.sizeIsEmpty(hashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      int int0 = CollectionUtils.size(stack0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      LinkedHashSet<FormatStyle> linkedHashSet0 = new LinkedHashSet<FormatStyle>();
      Map<Object, Integer> map0 = CollectionUtils.getCardinalityMap((Iterable<?>) linkedHashSet0);
      int int0 = CollectionUtils.size(map0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int int0 = CollectionUtils.size((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FormatStyle formatStyle0 = FormatStyle.FULL;
      // Undeclared exception!
      try { 
        CollectionUtils.size(formatStyle0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.time.format.FormatStyle
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.SHORT_STANDALONE;
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) textStyle0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.time.format.TextStyle
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) linkedList0, 4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      ListIterator<Integer> listIterator0 = stack0.listIterator();
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) listIterator0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HashMap<Object, FormatStyle> hashMap0 = new HashMap<Object, FormatStyle>();
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) hashMap0, 93);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 93
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.SHORT_STANDALONE;
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) textStyle0, (-403));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -403
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) null, 971);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: null
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<FormatStyle> class0 = FormatStyle.class;
      EnumSet<FormatStyle> enumSet0 = EnumSet.noneOf(class0);
      FormatStyle[] formatStyleArray0 = new FormatStyle[1];
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<FormatStyle>) enumSet0, formatStyleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<FormatStyle> class0 = FormatStyle.class;
      EnumSet<FormatStyle> enumSet0 = EnumSet.noneOf(class0);
      FormatStyle[] formatStyleArray0 = new FormatStyle[0];
      boolean boolean0 = CollectionUtils.addAll((Collection<FormatStyle>) enumSet0, formatStyleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Enumeration<Integer> enumeration0 = stack0.elements();
      boolean boolean0 = CollectionUtils.addAll((Collection<Integer>) stack0, (Enumeration<? extends Integer>) enumeration0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ArrayDeque<Transformer<Object, Integer>> arrayDeque0 = new ArrayDeque<Transformer<Object, Integer>>();
      Integer integer0 = new Integer(0);
      ConstantTransformer<Object, Integer> constantTransformer0 = new ConstantTransformer<Object, Integer>(integer0);
      Iterator<Transformer<Object, Integer>> iterator0 = (Iterator<Transformer<Object, Integer>>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn(constantTransformer0).when(iterator0).next();
      boolean boolean0 = CollectionUtils.addAll((Collection<Transformer<Object, Integer>>) arrayDeque0, (Iterator<? extends Transformer<Object, Integer>>) iterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Class<Integer> class0 = Integer.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      boolean boolean0 = CollectionUtils.addAll((Collection<Integer>) arrayList0, (Iterable<? extends Integer>) serviceLoader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      FormatStyle formatStyle0 = FormatStyle.SHORT;
      EnumSet<FormatStyle> enumSet0 = EnumSet.of(formatStyle0);
      boolean boolean0 = CollectionUtils.addIgnoreNull((Collection<FormatStyle>) enumSet0, formatStyle0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Collection<Object> collection0 = CollectionUtils.disjunction((Iterable<?>) linkedList0, (Iterable<?>) linkedList0);
      Collection<ThaiBuddhistEra> collection1 = CollectionUtils.collect((Iterable<Object>) collection0, (Transformer<? super Object, ? extends ThaiBuddhistEra>) null);
      assertNotNull(collection1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Transformer<Object, Object> transformer0 = NOPTransformer.nopTransformer();
      Collection<Object> collection0 = CollectionUtils.collect((Iterator<Object>) null, (Transformer<? super Object, ?>) transformer0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<? extends Integer>) linkedList0, (Collection<? extends Integer>) linkedList0, (Equator<? super Integer>) defaultEquator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<ThaiBuddhistEra> class0 = ThaiBuddhistEra.class;
      ServiceLoader<ThaiBuddhistEra> serviceLoader0 = ServiceLoader.load(class0);
      Predicate<ThaiBuddhistEra>[] predicateArray0 = (Predicate<ThaiBuddhistEra>[]) Array.newInstance(Predicate.class, 0);
      InvokerTransformer<ThaiBuddhistEra, ThaiBuddhistEra> invokerTransformer0 = new InvokerTransformer<ThaiBuddhistEra, ThaiBuddhistEra>((String) null, (Class<?>[]) null, predicateArray0);
      Collection<ThaiBuddhistEra> collection0 = CollectionUtils.collect((Iterable<ThaiBuddhistEra>) serviceLoader0, (Transformer<? super ThaiBuddhistEra, ? extends ThaiBuddhistEra>) invokerTransformer0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      FormatStyle formatStyle0 = FormatStyle.FULL;
      EnumSet<FormatStyle> enumSet0 = EnumSet.of(formatStyle0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AnyPredicate<FormatStyle> anyPredicate0 = new AnyPredicate<FormatStyle>(predicateArray0);
      Collection<FormatStyle> collection0 = CollectionUtils.selectRejected((Iterable<? extends FormatStyle>) enumSet0, (Predicate<? super FormatStyle>) anyPredicate0);
      assertTrue(collection0.contains(formatStyle0));
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Collection<Integer> collection0 = CollectionUtils.selectRejected((Iterable<? extends Integer>) serviceLoader0, (Predicate<? super Integer>) uniquePredicate0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      UniquePredicate<Integer> uniquePredicate0 = new UniquePredicate<Integer>();
      Collection<Integer> collection0 = CollectionUtils.selectRejected((Iterable<? extends Integer>) null, (Predicate<? super Integer>) uniquePredicate0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = new Integer(636);
      stack0.add(integer0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      // Undeclared exception!
      try { 
        CollectionUtils.select((Iterable<? extends Integer>) stack0, (Predicate<? super Integer>) predicate0, (Collection<Integer>) stack0, (Collection<Integer>) stack0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      Collection<Integer> collection0 = CollectionUtils.select((Iterable<? extends Integer>) null, (Predicate<? super Integer>) nullIsTruePredicate0, (Collection<Integer>) arrayList0, (Collection<Integer>) arrayList0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FormatStyle formatStyle0 = FormatStyle.SHORT;
      EnumSet<FormatStyle> enumSet0 = EnumSet.of(formatStyle0);
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      boolean boolean0 = CollectionUtils.matchesAll((Iterable<FormatStyle>) enumSet0, (Predicate<? super FormatStyle>) instanceofPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Stack<HashMap<FormatStyle, FormatStyle>> stack0 = new Stack<HashMap<FormatStyle, FormatStyle>>();
      boolean boolean0 = CollectionUtils.matchesAll((Iterable<HashMap<FormatStyle, FormatStyle>>) stack0, (Predicate<? super HashMap<FormatStyle, FormatStyle>>) instanceofPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Stack<HashMap<FormatStyle, FormatStyle>> stack0 = new Stack<HashMap<FormatStyle, FormatStyle>>();
      boolean boolean0 = CollectionUtils.matchesAll((Iterable<HashMap<FormatStyle, FormatStyle>>) stack0, (Predicate<? super HashMap<FormatStyle, FormatStyle>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Stack<Integer> stack0 = new Stack<Integer>();
      stack0.add(integer0);
      Predicate<Integer> predicate0 = NotNullPredicate.notNullPredicate();
      boolean boolean0 = CollectionUtils.exists((Iterable<Integer>) stack0, (Predicate<? super Integer>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      boolean boolean0 = CollectionUtils.exists((Iterable<Integer>) stack0, (Predicate<? super Integer>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ArrayList<Chronology> arrayList0 = new ArrayList<Chronology>();
      int int0 = CollectionUtils.countMatches((Iterable<Chronology>) arrayList0, (Predicate<? super Chronology>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Stack<Predicate<Integer>> stack0 = new Stack<Predicate<Integer>>();
      Predicate<Integer> predicate0 = NullPredicate.nullPredicate();
      AndPredicate<Integer> andPredicate0 = new AndPredicate<Integer>(predicate0, predicate0);
      stack0.add((Predicate<Integer>) andPredicate0);
      FixedSizeList<Predicate<Integer>> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Predicate<Integer>>) stack0);
      Transformer<Object, Predicate<Integer>> transformer0 = InvokerTransformer.invokerTransformer("sugv`PYRLAz\"OZ-jL");
      // Undeclared exception!
      try { 
        CollectionUtils.transform((Collection<Predicate<Integer>>) fixedSizeList0, (Transformer<? super Predicate<Integer>, ? extends Predicate<Integer>>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'sugv`PYRLAz\"OZ-jL' on 'class org.apache.commons.collections4.functors.AndPredicate' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      LinkedHashSet<FormatStyle> linkedHashSet0 = new LinkedHashSet<FormatStyle>();
      Transformer<Object, FormatStyle> transformer0 = ConstantTransformer.nullTransformer();
      CollectionUtils.transform((Collection<FormatStyle>) linkedHashSet0, (Transformer<? super FormatStyle, ? extends FormatStyle>) transformer0);
      assertTrue(linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      LinkedHashSet<FormatStyle> linkedHashSet0 = new LinkedHashSet<FormatStyle>();
      CollectionUtils.transform((Collection<FormatStyle>) linkedHashSet0, (Transformer<? super FormatStyle, ? extends FormatStyle>) null);
      assertTrue(linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Map<Integer, Integer> map0 = CollectionUtils.getCardinalityMap((Iterable<? extends Integer>) linkedList0);
      Transformer<Integer, Integer> transformer0 = MapTransformer.mapTransformer((Map<? super Integer, ? extends Integer>) map0);
      CollectionUtils.transform((Collection<Integer>) linkedList0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Transformer<Object, Object> transformer0 = ExceptionTransformer.exceptionTransformer();
      CollectionUtils.transform((Collection<Object>) null, (Transformer<? super Object, ?>) transformer0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      boolean boolean0 = CollectionUtils.filterInverse((Iterable<HijrahEra>) null, (Predicate<? super HijrahEra>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = new Integer(0);
      stack0.add(integer0);
      IdentityPredicate<Integer> identityPredicate0 = new IdentityPredicate<Integer>(integer0);
      boolean boolean0 = CollectionUtils.filter((Iterable<Integer>) stack0, (Predicate<? super Integer>) identityPredicate0);
      assertFalse(stack0.empty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      FormatStyle formatStyle0 = FormatStyle.SHORT;
      EnumSet<FormatStyle> enumSet0 = EnumSet.of(formatStyle0, formatStyle0, formatStyle0, formatStyle0, formatStyle0);
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Collection<Object> collection0 = CollectionUtils.intersection((Iterable<?>) enumSet0, (Iterable<?>) enumSet0);
      boolean boolean0 = CollectionUtils.filter((Iterable<Object>) collection0, (Predicate<? super Object>) instanceofPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      boolean boolean0 = CollectionUtils.filter((Iterable<Integer>) linkedList0, (Predicate<? super Integer>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<FormatStyle> class0 = FormatStyle.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      boolean boolean0 = CollectionUtils.filter((Iterable<Object>) null, (Predicate<? super Object>) instanceofPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Stack<FormatStyle> stack0 = new Stack<FormatStyle>();
      ListIterator<FormatStyle> listIterator0 = stack0.listIterator();
      Closure<FormatStyle>[] closureArray0 = (Closure<FormatStyle>[]) Array.newInstance(Closure.class, 0);
      ChainedClosure<FormatStyle> chainedClosure0 = new ChainedClosure<FormatStyle>(closureArray0);
      CollectionUtils.forAllButLastDo((Iterator<FormatStyle>) listIterator0, chainedClosure0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ArrayList<FormatStyle> arrayList0 = CollectionUtils.forAllButLastDo((Iterator<ArrayList<FormatStyle>>) null, (ExceptionClosure<Object>) null);
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      HashMap<FormatStyle, Object> hashMap0 = new HashMap<FormatStyle, Object>();
      Set<FormatStyle> set0 = hashMap0.keySet();
      Transformer<FormatStyle, Object> transformer0 = MapTransformer.mapTransformer((Map<? super FormatStyle, ?>) hashMap0);
      TransformerClosure<FormatStyle> transformerClosure0 = new TransformerClosure<FormatStyle>(transformer0);
      CollectionUtils.forAllButLastDo((Iterable<FormatStyle>) set0, transformerClosure0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>(linkedList0);
      Object object0 = CollectionUtils.forAllButLastDo((Iterable<Object>) arrayDeque0, (Closure<Object>) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ForClosure<Object> forClosure0 = CollectionUtils.forAllDo((Iterable<Transformer<Object, LinkedList>>) null, (ForClosure<Object>) null);
      assertNull(forClosure0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      Object object0 = CollectionUtils.find((Iterable<Object>) arrayDeque0, (Predicate<? super Object>) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      FormatStyle formatStyle0 = FormatStyle.MEDIUM;
      EnumSet<FormatStyle> enumSet0 = EnumSet.of(formatStyle0);
      List<FormatStyle> list0 = CollectionUtils.collate((Iterable<? extends FormatStyle>) enumSet0, (Iterable<? extends FormatStyle>) enumSet0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      CollectionUtils.hashCode((Collection<?>) list0, (Equator<? super Object>) defaultEquator0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      DefaultEquator<Integer> defaultEquator0 = DefaultEquator.defaultEquator();
      CollectionUtils.hashCode((Collection<? extends Integer>) null, (Equator<? super Integer>) defaultEquator0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      DefaultEquator<Integer> defaultEquator0 = DefaultEquator.defaultEquator();
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<? extends Integer>) linkedList0, (Collection<? extends Integer>) arrayDeque0, (Equator<? super Integer>) defaultEquator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      FormatStyle formatStyle0 = FormatStyle.MEDIUM;
      EnumSet<FormatStyle> enumSet0 = EnumSet.of(formatStyle0);
      Integer integer0 = new Integer(293);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add(integer0);
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<?>) linkedList0, (Collection<?>) enumSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      FormatStyle formatStyle0 = FormatStyle.LONG;
      EnumSet<FormatStyle> enumSet0 = EnumSet.of(formatStyle0);
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<?>) enumSet0, (Collection<?>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      boolean boolean0 = CollectionUtils.isProperSubCollection(treeSet0, treeSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Integer integer0 = new Integer((-2638));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add(integer0);
      boolean boolean0 = CollectionUtils.isSubCollection(linkedList0, linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      FormatStyle formatStyle0 = FormatStyle.FULL;
      EnumSet<FormatStyle> enumSet0 = EnumSet.of(formatStyle0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer(1834);
      FormatStyle formatStyle1 = FormatStyle.LONG;
      enumSet0.add(formatStyle1);
      linkedHashSet0.add(integer0);
      boolean boolean0 = CollectionUtils.isProperSubCollection(linkedHashSet0, enumSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList1.add((Integer) null);
      linkedList1.add((Integer) null);
      boolean boolean0 = CollectionUtils.isProperSubCollection(linkedList0, linkedList1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      FormatStyle formatStyle0 = FormatStyle.LONG;
      Integer integer0 = new Integer((-1372));
      stack0.add(integer0);
      EnumSet<FormatStyle> enumSet0 = EnumSet.of(formatStyle0);
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) stack0, (Collection<?>) enumSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      FormatStyle formatStyle0 = FormatStyle.MEDIUM;
      EnumSet<FormatStyle> enumSet0 = EnumSet.of(formatStyle0);
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) enumSet0, (Collection<?>) enumSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      FormatStyle formatStyle0 = FormatStyle.MEDIUM;
      Integer integer0 = new Integer(31);
      linkedList0.add(integer0);
      linkedList0.add(integer0);
      EnumSet<FormatStyle> enumSet0 = EnumSet.of(formatStyle0);
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) enumSet0, (Collection<?>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      arrayList0.add((Integer) null);
      Integer[] integerArray0 = new Integer[1];
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) arrayList0, integerArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      FormatStyle formatStyle0 = FormatStyle.SHORT;
      EnumSet<FormatStyle> enumSet0 = EnumSet.of(formatStyle0);
      FormatStyle[] formatStyleArray0 = new FormatStyle[3];
      formatStyleArray0[0] = formatStyle0;
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) enumSet0, formatStyleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      FormatStyle formatStyle0 = FormatStyle.SHORT;
      EnumSet<FormatStyle> enumSet0 = EnumSet.of(formatStyle0);
      FormatStyle[] formatStyleArray0 = new FormatStyle[3];
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) enumSet0, formatStyleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      FormatStyle formatStyle0 = FormatStyle.SHORT;
      EnumSet<FormatStyle> enumSet0 = EnumSet.of(formatStyle0);
      HijrahEra hijrahEra0 = HijrahEra.AH;
      PriorityQueue<HijrahEra> priorityQueue0 = new PriorityQueue<HijrahEra>();
      priorityQueue0.add(hijrahEra0);
      boolean boolean0 = CollectionUtils.containsAll(priorityQueue0, enumSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      linkedList0.add((Integer) null);
      boolean boolean0 = CollectionUtils.containsAll(linkedList0, linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      boolean boolean0 = CollectionUtils.containsAll(linkedList0, linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      FormatStyle formatStyle0 = FormatStyle.SHORT;
      EnumSet<FormatStyle> enumSet0 = EnumSet.of(formatStyle0);
      boolean boolean0 = CollectionUtils.containsAll(enumSet0, enumSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      FormatStyle formatStyle0 = FormatStyle.MEDIUM;
      EnumSet<FormatStyle> enumSet0 = EnumSet.of(formatStyle0);
      Predicate<FormatStyle>[] predicateArray0 = (Predicate<FormatStyle>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<FormatStyle> allPredicate0 = new AllPredicate<FormatStyle>(predicateArray0);
      Collection<FormatStyle> collection0 = CollectionUtils.subtract((Iterable<? extends FormatStyle>) enumSet0, (Iterable<? extends FormatStyle>) enumSet0, (Predicate<FormatStyle>) allPredicate0);
      assertFalse(collection0.contains(formatStyle0));
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Class<ThaiBuddhistEra> class0 = ThaiBuddhistEra.class;
      EnumSet<ThaiBuddhistEra> enumSet0 = EnumSet.allOf(class0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) null);
      Collection<Object> collection0 = CollectionUtils.subtract((Iterable<?>) enumSet0, (Iterable<?>) enumSet0, predicate0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<Integer> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Integer>) uniquePredicate0);
      // Undeclared exception!
      try { 
        CollectionUtils.subtract((Iterable<? extends Integer>) linkedList0, (Iterable<? extends Integer>) linkedList0, predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Input Object must not be null
         //
         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Collection<Object> collection0 = CollectionUtils.emptyIfNull((Collection<Object>) null);
      // Undeclared exception!
      try { 
        CollectionUtils.isSubCollection((Collection<?>) null, collection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // a
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Vector<FormatStyle> vector0 = new Vector<FormatStyle>();
      Collection<FormatStyle> collection0 = CollectionUtils.emptyIfNull((Collection<FormatStyle>) vector0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      ArrayList<FormatStyle> arrayList0 = new ArrayList<FormatStyle>();
      FormatStyle formatStyle0 = FormatStyle.FULL;
      EnumSet<FormatStyle> enumSet0 = EnumSet.of(formatStyle0);
      Collection<Object> collection0 = CollectionUtils.disjunction((Iterable<?>) enumSet0, (Iterable<?>) arrayList0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      FormatStyle formatStyle0 = FormatStyle.LONG;
      EnumSet<FormatStyle> enumSet0 = EnumSet.of(formatStyle0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Collection<FormatStyle> collection0 = CollectionUtils.removeAll((Iterable<FormatStyle>) enumSet0, (Iterable<? extends FormatStyle>) enumSet0, (Equator<? super FormatStyle>) defaultEquator0);
      assertFalse(collection0.contains(formatStyle0));
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.collate((Iterable<? extends CharBuffer>) null, (Iterable<? extends CharBuffer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterableA
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.cardinality((Object) null, (Iterable<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Collection<Object> collection0 = CollectionUtils.select((Iterable<?>) null, (Predicate<? super Object>) predicate0);
      Collection<Integer> collection1 = CollectionUtils.removeAll((Collection<Integer>) stack0, (Collection<?>) collection0);
      assertNotNull(collection1);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Predicate<Integer> predicate0 = UniquePredicate.uniquePredicate();
      Collection<Integer> collection0 = CollectionUtils.predicatedCollection((Collection<Integer>) arrayList0, (Predicate<? super Integer>) predicate0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      ListIterator<Predicate<Object>> listIterator0 = stack0.listIterator();
      // Undeclared exception!
      try { 
        CollectionUtils.get((Iterator<Predicate<Object>>) listIterator0, 1828);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1828
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.unmodifiableCollection((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      FormatStyle formatStyle0 = FormatStyle.MEDIUM;
      EnumSet<FormatStyle> enumSet0 = EnumSet.of(formatStyle0);
      Collection<Object> collection0 = CollectionUtils.disjunction((Iterable<?>) enumSet0, (Iterable<?>) enumSet0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      FormatStyle formatStyle0 = FormatStyle.SHORT;
      EnumSet<FormatStyle> enumSet0 = EnumSet.of(formatStyle0);
      Collection<FormatStyle> collection0 = CollectionUtils.union((Iterable<? extends FormatStyle>) enumSet0, (Iterable<? extends FormatStyle>) enumSet0);
      assertTrue(collection0.contains(formatStyle0));
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      FormatStyle formatStyle0 = FormatStyle.MEDIUM;
      EnumSet<FormatStyle> enumSet0 = EnumSet.of(formatStyle0);
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<?>) enumSet0, (Collection<?>) enumSet0);
      assertTrue(boolean0);
  }
}
