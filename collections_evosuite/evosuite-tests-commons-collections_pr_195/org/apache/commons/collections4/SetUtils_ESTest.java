/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 15:54:50 GMT 2025
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.NavigableSet;
import java.util.Set;
import java.util.SortedSet;
import java.util.TreeSet;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.SetUtils;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SetUtils_ESTest extends SetUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      Integer[] integerArray0 = new Integer[2];
      HashSet<Integer> hashSet0 = SetUtils.hashSet(integerArray0);
      boolean boolean0 = SetUtils.isEqualSet(hashSet0, treeSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.intersection((Set<? extends Integer>) linkedHashSet0, (Set<? extends Integer>) linkedHashSet0);
      Integer integer0 = new Integer(540);
      linkedHashSet0.add(integer0);
      SetUtils.SetView<Integer> setUtils_SetView1 = SetUtils.difference((Set<? extends Integer>) linkedHashSet0, (Set<? extends Integer>) linkedHashSet0);
      Set<Integer> set0 = SetUtils.synchronizedSet((Set<Integer>) setUtils_SetView1);
      SetUtils.SetView<Integer> setUtils_SetView2 = SetUtils.disjunction((Set<? extends Integer>) set0, (Set<? extends Integer>) setUtils_SetView0);
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      boolean boolean0 = SetUtils.isEqualSet(treeSet0, setUtils_SetView2);
      assertTrue(setUtils_SetView2.equals((Object)setUtils_SetView0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      SortedSet<Object> sortedSet0 = SetUtils.unmodifiableSortedSet((SortedSet<Object>) treeSet0);
      assertEquals(0, sortedSet0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Set<LinkedHashSet<Object>> set0 = SetUtils.emptyIfNull((Set<LinkedHashSet<Object>>) null);
      Set<LinkedHashSet<Object>> set1 = SetUtils.unmodifiableSet((Set<? extends LinkedHashSet<Object>>) set0);
      assertTrue(set1.equals((Object)set0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      SortedSet<InstanceofPredicate> sortedSet0 = SetUtils.unmodifiableNavigableSet((NavigableSet<InstanceofPredicate>) treeSet0);
      assertTrue(sortedSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Integer integer0 = new Integer(4);
      ConstantTransformer<Object, Integer> constantTransformer0 = new ConstantTransformer<Object, Integer>(integer0);
      SortedSet<Object> sortedSet0 = SetUtils.transformedSortedSet((SortedSet<Object>) treeSet0, (Transformer<? super Object, ?>) constantTransformer0);
      assertEquals(0, sortedSet0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Transformer<Object, Integer> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Integer>) null);
      Set<Integer> set0 = SetUtils.transformedSet((Set<Integer>) treeSet0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Integer integer0 = new Integer(5);
      Transformer<Object, Integer> transformer0 = ConstantTransformer.constantTransformer(integer0);
      SortedSet<Object> sortedSet0 = SetUtils.transformedNavigableSet((NavigableSet<Object>) treeSet0, (Transformer<? super Object, ?>) transformer0);
      assertEquals(0, sortedSet0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      SortedSet<Object> sortedSet0 = SetUtils.synchronizedSortedSet((SortedSet<Object>) treeSet0);
      assertEquals(0, sortedSet0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[3];
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[1] = instanceofPredicate0;
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      SortedSet<Integer> sortedSet0 = SetUtils.predicatedSortedSet((SortedSet<Integer>) treeSet0, (Predicate<? super Integer>) instanceofPredicateArray0[1]);
      assertTrue(sortedSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Set<InstanceofPredicate> set0 = SetUtils.predicatedSet((Set<InstanceofPredicate>) treeSet0, (Predicate<? super InstanceofPredicate>) instanceofPredicate0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SortedSet<InstanceofPredicate> sortedSet0 = SetUtils.predicatedNavigableSet((NavigableSet<InstanceofPredicate>) treeSet0, (Predicate<? super InstanceofPredicate>) instanceofPredicate0);
      assertTrue(sortedSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Set<Integer> set0 = SetUtils.emptySet();
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.union((Set<? extends Integer>) set0, (Set<? extends Integer>) treeSet0);
      int int0 = setUtils_SetView0.size();
      assertFalse(treeSet0.contains(int0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      SetUtils.SetView<InstanceofPredicate> setUtils_SetView0 = SetUtils.union((Set<? extends InstanceofPredicate>) treeSet0, (Set<? extends InstanceofPredicate>) treeSet0);
      Iterator<InstanceofPredicate> iterator0 = setUtils_SetView0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.disjunction((Set<? extends Integer>) linkedHashSet0, (Set<? extends Integer>) linkedHashSet0);
      setUtils_SetView0.copyInto((Set<Integer>) linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Set<Integer> set0 = SetUtils.emptyIfNull((Set<Integer>) linkedHashSet0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer((-3510));
      linkedHashSet0.add(integer0);
      Set<Integer> set0 = SetUtils.emptyIfNull((Set<Integer>) linkedHashSet0);
      assertTrue(set0.contains((-3510)));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      TreeSet<Object> treeSet0 = new TreeSet<Object>(comparator0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Object object0 = new Object();
      treeSet0.add(object0);
      // Undeclared exception!
      try { 
        SetUtils.predicatedSortedSet((SortedSet<Object>) treeSet0, (Predicate<? super Object>) predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'java.lang.Object@7806a2b' - Predicate 'org.apache.commons.collections4.functors.FalsePredicate@2' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add((Integer) null);
      Predicate<Integer> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        SetUtils.predicatedSet((Set<Integer>) linkedHashSet0, (Predicate<? super Integer>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add((Integer) null);
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.union((Set<? extends Integer>) linkedHashSet0, (Set<? extends Integer>) linkedHashSet0);
      Predicate<Integer> predicate0 = NotNullPredicate.notNullPredicate();
      // Undeclared exception!
      try { 
        SetUtils.predicatedSet((Set<Integer>) setUtils_SetView0, (Predicate<? super Integer>) predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'null' - Predicate 'org.apache.commons.collections4.functors.NotNullPredicate@e' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Integer integer0 = new Integer((-1431655764));
      treeSet0.add(integer0);
      Predicate<Integer> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        SetUtils.predicatedNavigableSet((NavigableSet<Integer>) treeSet0, (Predicate<? super Integer>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(2);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      IdentityPredicate<Integer> identityPredicate0 = new IdentityPredicate<Integer>(integer1);
      linkedHashSet0.add(integer0);
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>(linkedHashSet0);
      // Undeclared exception!
      try { 
        SetUtils.predicatedNavigableSet((NavigableSet<Integer>) treeSet0, (Predicate<? super Integer>) identityPredicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object '0' - Predicate 'org.apache.commons.collections4.functors.IdentityPredicate@1' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.orderedSet((Set<LinkedHashSet<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedHashSet<Object>[] linkedHashSetArray0 = (LinkedHashSet<Object>[]) Array.newInstance(LinkedHashSet.class, 7);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSetArray0[0] = linkedHashSet0;
      linkedHashSetArray0[4] = linkedHashSetArray0[0];
      linkedHashSetArray0[4].add(linkedHashSet0);
      // Undeclared exception!
      try { 
        SetUtils.hashSet(linkedHashSetArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.disjunction((Set<?>) null, (Set<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // setA
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.difference((Set<? extends Integer>) null, (Set<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // setA
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedHashSet<LinkedHashSet<Object>>[] linkedHashSetArray0 = (LinkedHashSet<LinkedHashSet<Object>>[]) Array.newInstance(LinkedHashSet.class, 0);
      HashSet<LinkedHashSet<LinkedHashSet<Object>>> hashSet0 = SetUtils.hashSet(linkedHashSetArray0);
      assertTrue(hashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Set<Integer> set0 = SetUtils.unmodifiableSet((Integer[]) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add((Integer) null);
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.union((Set<? extends Integer>) linkedHashSet1, (Set<? extends Integer>) linkedHashSet0);
      boolean boolean0 = setUtils_SetView0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.union((Set<? extends Integer>) linkedHashSet0, (Set<? extends Integer>) linkedHashSet0);
      boolean boolean0 = setUtils_SetView0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add((Integer) null);
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.union((Set<? extends Integer>) linkedHashSet0, (Set<? extends Integer>) linkedHashSet0);
      boolean boolean0 = setUtils_SetView0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add((Integer) null);
      Set<Integer> set0 = SetUtils.emptySet();
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.union((Set<? extends Integer>) set0, (Set<? extends Integer>) linkedHashSet0);
      boolean boolean0 = SetUtils.isEqualSet(setUtils_SetView0, linkedHashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.union((Set<? extends Integer>) linkedHashSet0, (Set<? extends Integer>) linkedHashSet0);
      boolean boolean0 = setUtils_SetView0.contains(linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer(1);
      linkedHashSet0.add(integer0);
      linkedHashSet1.add((Integer) null);
      boolean boolean0 = SetUtils.isEqualSet(linkedHashSet1, linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean0 = SetUtils.isEqualSet(linkedHashSet0, (Collection<?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean0 = SetUtils.isEqualSet((Collection<?>) null, linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add((Integer) null);
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.difference((Set<? extends Integer>) linkedHashSet0, (Set<? extends Integer>) linkedHashSet0);
      SetUtils.SetView<Integer> setUtils_SetView1 = SetUtils.intersection((Set<? extends Integer>) linkedHashSet0, (Set<? extends Integer>) setUtils_SetView0);
      boolean boolean0 = setUtils_SetView1.contains((Object) null);
      assertTrue(setUtils_SetView1.equals((Object)setUtils_SetView0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add((Integer) null);
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.intersection((Set<? extends Integer>) linkedHashSet0, (Set<? extends Integer>) linkedHashSet0);
      boolean boolean0 = setUtils_SetView0.contains((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.intersection((Set<? extends Integer>) linkedHashSet0, (Set<? extends Integer>) linkedHashSet0);
      boolean boolean0 = setUtils_SetView0.contains(linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add((Integer) null);
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.intersection((Set<? extends Integer>) linkedHashSet0, (Set<? extends Integer>) linkedHashSet1);
      boolean boolean0 = setUtils_SetView0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashSet<ConstantTransformer<Integer, Integer>> hashSet0 = SetUtils.hashSet((ConstantTransformer<Integer, Integer>[]) null);
      assertNull(hashSet0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add((Integer) null);
      int int0 = SetUtils.hashCodeForSet((Collection<Integer>) linkedHashSet0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer((-2146804492));
      linkedHashSet0.add(integer0);
      int int0 = SetUtils.hashCodeForSet((Collection<Integer>) linkedHashSet0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = SetUtils.hashCodeForSet((Collection<Object>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Set<Integer> set0 = SetUtils.newIdentityHashSet();
      Set<Integer> set1 = SetUtils.emptyIfNull(set0);
      assertSame(set0, set1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      linkedHashSet1.add((Integer) null);
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.disjunction((Set<? extends Integer>) linkedHashSet0, (Set<? extends Integer>) linkedHashSet1);
      boolean boolean0 = setUtils_SetView0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.disjunction((Set<? extends Integer>) linkedHashSet0, (Set<? extends Integer>) linkedHashSet0);
      boolean boolean0 = setUtils_SetView0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add((Integer) null);
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.difference((Set<? extends Integer>) linkedHashSet0, (Set<? extends Integer>) linkedHashSet0);
      SetUtils.SetView<Integer> setUtils_SetView1 = SetUtils.disjunction((Set<? extends Integer>) linkedHashSet0, (Set<? extends Integer>) setUtils_SetView0);
      boolean boolean0 = setUtils_SetView1.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add((Integer) null);
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.disjunction((Set<? extends Integer>) linkedHashSet0, (Set<? extends Integer>) linkedHashSet0);
      boolean boolean0 = setUtils_SetView0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.disjunction((Set<? extends Integer>) linkedHashSet0, (Set<? extends Integer>) linkedHashSet0);
      boolean boolean0 = setUtils_SetView0.contains(linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add((Integer) null);
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.difference((Set<? extends Integer>) linkedHashSet0, (Set<? extends Integer>) linkedHashSet1);
      boolean boolean0 = setUtils_SetView0.contains((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add((Integer) null);
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.difference((Set<? extends Integer>) linkedHashSet0, (Set<? extends Integer>) linkedHashSet0);
      boolean boolean0 = setUtils_SetView0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.difference((Set<? extends Integer>) linkedHashSet0, (Set<? extends Integer>) linkedHashSet0);
      boolean boolean0 = setUtils_SetView0.contains(linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add((Integer) null);
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.union((Set<? extends Integer>) linkedHashSet0, (Set<? extends Integer>) linkedHashSet0);
      boolean boolean0 = SetUtils.isEqualSet(setUtils_SetView0, linkedHashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.intersection((Set<? extends Integer>) linkedHashSet0, (Set<? extends Integer>) linkedHashSet0);
      Set<Integer> set0 = setUtils_SetView0.toSet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      // Undeclared exception!
      try { 
        SetUtils.predicatedNavigableSet((NavigableSet<Object>) treeSet0, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.transformedSet((Set<LinkedHashSet<Integer>>) null, (Transformer<? super LinkedHashSet<Integer>, ? extends LinkedHashSet<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.unmodifiableSet((Set<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.synchronizedSet((Set<LinkedHashSet<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.unmodifiableNavigableSet((NavigableSet<ConstantTransformer<Integer, Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.unmodifiableSortedSet((SortedSet<ConstantTransformer<Integer, InstanceofPredicate>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.union((Set<? extends LinkedHashSet<Integer>>) null, (Set<? extends LinkedHashSet<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // setA
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.synchronizedSortedSet((SortedSet<LinkedHashSet<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SortedSet<LinkedHashSet<Object>> sortedSet0 = SetUtils.emptySortedSet();
      // Undeclared exception!
      try { 
        SetUtils.transformedSortedSet(sortedSet0, (Transformer<? super LinkedHashSet<Object>, ? extends LinkedHashSet<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.intersection((Set<? extends LinkedHashSet<Integer>>) null, (Set<? extends LinkedHashSet<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // setA
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SortedSet<Boolean> sortedSet0 = SetUtils.emptySortedSet();
      boolean boolean0 = SetUtils.isEqualSet(sortedSet0, sortedSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TreeSet<LinkedHashSet<Integer>> treeSet0 = new TreeSet<LinkedHashSet<Integer>>();
      // Undeclared exception!
      try { 
        SetUtils.predicatedSortedSet((SortedSet<LinkedHashSet<Integer>>) treeSet0, (Predicate<? super LinkedHashSet<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.predicatedSet((Set<Predicate<LinkedHashSet<Object>>>) null, (Predicate<? super Predicate<LinkedHashSet<Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      // Undeclared exception!
      try { 
        SetUtils.transformedNavigableSet((NavigableSet<Object>) treeSet0, (Transformer<? super Object, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer
         //
         verifyException("java.util.Objects", e);
      }
  }
}
