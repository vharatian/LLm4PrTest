/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 15:23:28 GMT 2025
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import org.apache.commons.collections4.Bag;
import org.apache.commons.collections4.BagUtils;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.SortedBag;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.bag.SynchronizedSortedBag;
import org.apache.commons.collections4.bag.TransformedSortedBag;
import org.apache.commons.collections4.bag.TreeBag;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class BagUtils_ESTest extends BagUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-516));
      Transformer<Object, Integer> transformer0 = ConstantTransformer.constantTransformer(integer0);
      SortedBag<Object> sortedBag0 = BagUtils.emptySortedBag();
      Bag<Object> bag0 = BagUtils.transformingBag((Bag<Object>) sortedBag0, (Transformer<? super Object, ?>) transformer0);
      assertFalse(bag0.contains((-516)));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        BagUtils.unmodifiableSortedBag((SortedBag<TransformedSortedBag<TransformedSortedBag>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        BagUtils.unmodifiableBag((Bag<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TreeBag<Object> treeBag0 = new TreeBag<Object>();
      // Undeclared exception!
      try { 
        BagUtils.transformingSortedBag((SortedBag<Object>) treeBag0, (Transformer<? super Object, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        BagUtils.synchronizedSortedBag((SortedBag<TransformedSortedBag<Boolean>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        BagUtils.synchronizedBag((Bag<Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SortedBag<Boolean> sortedBag0 = BagUtils.emptySortedBag();
      // Undeclared exception!
      try { 
        BagUtils.predicatedSortedBag(sortedBag0, (Predicate<? super Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      SynchronizedSortedBag<Integer> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<Integer>) treeBag0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      SortedBag<Integer> sortedBag0 = BagUtils.predicatedSortedBag((SortedBag<Integer>) synchronizedSortedBag0, (Predicate<? super Integer>) predicate0);
      SynchronizedSortedBag<Integer> synchronizedSortedBag1 = SynchronizedSortedBag.synchronizedSortedBag(sortedBag0);
      Integer integer0 = new Integer(0);
      synchronizedSortedBag1.add(integer0);
      // Undeclared exception!
      try { 
        BagUtils.predicatedSortedBag((SortedBag<Integer>) synchronizedSortedBag1, (Predicate<? super Integer>) predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object '0' - Predicate 'org.apache.commons.collections4.functors.UniquePredicate@3' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      Integer integer0 = new Integer((-251));
      treeBag0.add(integer0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        BagUtils.predicatedBag((Bag<Integer>) treeBag0, (Predicate<? super Integer>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TreeBag<Boolean> treeBag0 = new TreeBag<Boolean>();
      SynchronizedSortedBag<Boolean> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<Boolean>) treeBag0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      PredicateTransformer<Integer> predicateTransformer0 = new PredicateTransformer<Integer>(predicate0);
      Boolean boolean0 = predicateTransformer0.transform((Integer) null);
      treeBag0.add(boolean0);
      // Undeclared exception!
      try { 
        BagUtils.predicatedBag((Bag<Boolean>) synchronizedSortedBag0, (Predicate<? super Boolean>) predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'true' - Predicate 'org.apache.commons.collections4.functors.NullPredicate@7' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        BagUtils.collectionBag((Bag<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      Integer integer0 = new Integer((-516));
      ConstantTransformer<Integer, Integer> constantTransformer0 = new ConstantTransformer<Integer, Integer>(integer0);
      SortedBag<Integer> sortedBag0 = BagUtils.transformingSortedBag((SortedBag<Integer>) treeBag0, (Transformer<? super Integer, ? extends Integer>) constantTransformer0);
      assertEquals(0, sortedBag0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      Bag<Integer> bag0 = BagUtils.unmodifiableBag((Bag<? extends Integer>) treeBag0);
      assertEquals(0, bag0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Bag<Object> bag0 = BagUtils.emptyBag();
      Bag<Object> bag1 = BagUtils.synchronizedBag(bag0);
      assertEquals(0, bag1.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      Bag<Integer> bag0 = BagUtils.collectionBag((Bag<Integer>) treeBag0);
      assertEquals(0, bag0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(object0, comparator0, comparatorPredicate_Criterion0);
      Bag<Integer> bag0 = BagUtils.predicatedBag((Bag<Integer>) treeBag0, (Predicate<? super Integer>) comparatorPredicate0);
      assertEquals(0, bag0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      SortedBag<Integer> sortedBag0 = BagUtils.unmodifiableSortedBag((SortedBag<Integer>) treeBag0);
      assertEquals(0, sortedBag0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SortedBag<Object> sortedBag0 = BagUtils.emptySortedBag();
      // Undeclared exception!
      try { 
        BagUtils.predicatedBag((Bag<Object>) sortedBag0, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TreeBag<Object> treeBag0 = new TreeBag<Object>();
      SortedBag<Object> sortedBag0 = BagUtils.synchronizedSortedBag((SortedBag<Object>) treeBag0);
      assertEquals(0, sortedBag0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        BagUtils.transformingBag((Bag<Integer>) null, (Transformer<? super Integer, ? extends Integer>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }
}
