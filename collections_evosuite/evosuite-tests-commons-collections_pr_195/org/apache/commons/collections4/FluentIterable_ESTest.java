/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 15:36:47 GMT 2025
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.time.chrono.HijrahEra;
import java.time.chrono.MinguoEra;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Vector;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.FluentIterable;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.io.IOCase;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FluentIterable_ESTest extends FluentIterable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>(2, 144);
      FluentIterable<Integer> fluentIterable0 = FluentIterable.of((Iterable<Integer>) vector0);
      List<Integer> list0 = fluentIterable0.toList();
      assertFalse(list0.contains(144));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      FluentIterable<Object> fluentIterable0 = FluentIterable.of((Iterable<Object>) linkedHashSet0);
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = fluentIterable0.toArray(class0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      FluentIterable<Object> fluentIterable0 = FluentIterable.of(object0);
      int int0 = fluentIterable0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(2304);
      FluentIterable<Integer> fluentIterable0 = FluentIterable.of(integer0);
      Integer[] integerArray0 = new Integer[4];
      FluentIterable<Integer> fluentIterable1 = fluentIterable0.append(integerArray0);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FluentIterable<Object>[] fluentIterableArray0 = (FluentIterable<Object>[]) Array.newInstance(FluentIterable.class, 8);
      FluentIterable<Object> fluentIterable0 = new FluentIterable<Object>();
      // Undeclared exception!
      try { 
        fluentIterable0.zip((Iterable<?>[]) fluentIterableArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FluentIterable<MinguoEra> fluentIterable0 = FluentIterable.empty();
      // Undeclared exception!
      try { 
        fluentIterable0.transform((Transformer<? super MinguoEra, ? extends MinguoEra>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        FluentIterable.of((IOCase[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        FluentIterable.of((Iterable<ComparatorPredicate.Criterion>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FluentIterable<Object> fluentIterable0 = new FluentIterable<Object>();
      // Undeclared exception!
      try { 
        fluentIterable0.limit((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MaxSize parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayDeque<Boolean> arrayDeque0 = new ArrayDeque<Boolean>(0);
      FluentIterable<Boolean> fluentIterable0 = FluentIterable.of((Iterable<Boolean>) arrayDeque0);
      // Undeclared exception!
      try { 
        fluentIterable0.get(1229);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1229
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      FluentIterable<Integer> fluentIterable0 = FluentIterable.of(integerArray0);
      // Undeclared exception!
      try { 
        fluentIterable0.forEach((Closure<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // closure
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FluentIterable<IOCase> fluentIterable0 = FluentIterable.empty();
      // Undeclared exception!
      try { 
        fluentIterable0.filter((Predicate<? super IOCase>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MinguoEra minguoEra0 = MinguoEra.BEFORE_ROC;
      ConstantFactory<MinguoEra> constantFactory0 = new ConstantFactory<MinguoEra>(minguoEra0);
      Transformer<Integer, Object> transformer0 = FactoryTransformer.factoryTransformer((Factory<?>) constantFactory0);
      FluentIterable<Transformer<Integer, Object>> fluentIterable0 = FluentIterable.of(transformer0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Set<Object> set0 = hashMap0.keySet();
      // Undeclared exception!
      try { 
        fluentIterable0.copyInto(set0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FluentIterable<Object> fluentIterable0 = new FluentIterable<Object>();
      // Undeclared exception!
      try { 
        fluentIterable0.collate((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FluentIterable<Object>[] fluentIterableArray0 = (FluentIterable<Object>[]) Array.newInstance(FluentIterable.class, 8);
      FluentIterable<Object> fluentIterable0 = new FluentIterable<Object>();
      fluentIterableArray0[0] = fluentIterable0;
      // Undeclared exception!
      try { 
        fluentIterableArray0[0].append((Iterable<?>) fluentIterableArray0[2]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(803);
      FluentIterable<Integer> fluentIterable0 = FluentIterable.of(integer0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        fluentIterable0.anyMatch(predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      FluentIterable<Integer> fluentIterable0 = FluentIterable.of(integerArray0);
      FluentIterable<Integer> fluentIterable1 = FluentIterable.of((Iterable<Integer>) fluentIterable0);
      assertSame(fluentIterable1, fluentIterable0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(0);
      FluentIterable<Integer> fluentIterable0 = FluentIterable.of(integer0);
      List<Integer> list0 = fluentIterable0.toList();
      assertTrue(list0.contains(integer0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer(0);
      FluentIterable<Integer> fluentIterable0 = FluentIterable.of(integer0);
      Iterator<Integer> iterator0 = fluentIterable0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FluentIterable<Object> fluentIterable0 = new FluentIterable<Object>();
      FluentIterable<Object> fluentIterable1 = fluentIterable0.append((Iterable<?>) fluentIterable0);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<FluentIterable<IOCase>> linkedList0 = new LinkedList<FluentIterable<IOCase>>();
      FluentIterable<FluentIterable<IOCase>> fluentIterable0 = FluentIterable.of((Iterable<FluentIterable<IOCase>>) linkedList0);
      fluentIterable0.copyInto(linkedList0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FluentIterable<Object> fluentIterable0 = new FluentIterable<Object>();
      // Undeclared exception!
      try { 
        fluentIterable0.skip((-3980L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ElementsToSkip parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FluentIterable<Object> fluentIterable0 = new FluentIterable<Object>();
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      FluentIterable<Object> fluentIterable1 = fluentIterable0.filter(predicate0);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      FluentIterable<Integer> fluentIterable0 = FluentIterable.of(integerArray0);
      FluentIterable<Integer> fluentIterable1 = fluentIterable0.zip((Iterable<? extends Integer>) fluentIterable0);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FluentIterable<IOCase> fluentIterable0 = FluentIterable.empty();
      Enumeration<IOCase> enumeration0 = fluentIterable0.asEnumeration();
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FluentIterable<Predicate<Object>> fluentIterable0 = FluentIterable.empty();
      FluentIterable<Predicate<Object>> fluentIterable1 = fluentIterable0.limit(1891L);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      FluentIterable<Integer> fluentIterable0 = FluentIterable.of(integerArray0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Transformer<Integer, Integer> transformer0 = MapTransformer.mapTransformer((Map<? super Integer, ? extends Integer>) hashMap0);
      FluentIterable<Integer> fluentIterable1 = fluentIterable0.transform((Transformer<? super Integer, ? extends Integer>) transformer0);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FluentIterable<Object> fluentIterable0 = new FluentIterable<Object>();
      FluentIterable<Object> fluentIterable1 = fluentIterable0.reverse();
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>(0);
      FluentIterable<Integer> fluentIterable0 = FluentIterable.of((Iterable<Integer>) vector0);
      // Undeclared exception!
      try { 
        fluentIterable0.get(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FluentIterable<Predicate<Object>> fluentIterable0 = FluentIterable.empty();
      FluentIterable<Predicate<Object>> fluentIterable1 = fluentIterable0.unmodifiable();
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      FluentIterable<Integer> fluentIterable0 = FluentIterable.of(integerArray0);
      FluentIterable<Integer> fluentIterable1 = fluentIterable0.loop();
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      FluentIterable<Integer> fluentIterable0 = FluentIterable.of(integerArray0);
      Closure<Integer> closure0 = NOPClosure.nopClosure();
      fluentIterable0.forEach(closure0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      FluentIterable<Integer> fluentIterable0 = FluentIterable.of(integerArray0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null);
      boolean boolean0 = fluentIterable0.allMatch(predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FluentIterable<Integer>[] fluentIterableArray0 = (FluentIterable<Integer>[]) Array.newInstance(FluentIterable.class, 0);
      FluentIterable<FluentIterable<Integer>> fluentIterable0 = FluentIterable.of(fluentIterableArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FluentIterable<FluentIterable<Integer>> fluentIterable1 = fluentIterable0.collate((Iterable<? extends FluentIterable<Integer>>) fluentIterable0, (Comparator<? super FluentIterable<Integer>>) comparator0);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>(2, 144);
      FluentIterable<Integer> fluentIterable0 = FluentIterable.of((Iterable<Integer>) vector0);
      // Undeclared exception!
      try { 
        fluentIterable0.append((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FluentIterable<Predicate<Object>> fluentIterable0 = FluentIterable.empty();
      Iterable<Predicate<Object>>[] iterableArray0 = (Iterable<Predicate<Object>>[]) Array.newInstance(Iterable.class, 1);
      iterableArray0[0] = (Iterable<Predicate<Object>>) fluentIterable0;
      FluentIterable<Predicate<Object>> fluentIterable1 = fluentIterable0.zip(iterableArray0);
      FluentIterable<Predicate<Object>> fluentIterable2 = fluentIterable1.collate((Iterable<? extends Predicate<Object>>) fluentIterable1);
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashSet<Transformer<Integer, Object>> hashSet0 = new HashSet<Transformer<Integer, Object>>(46, 46);
      FluentIterable<Transformer<Integer, Object>> fluentIterable0 = FluentIterable.of((Iterable<Transformer<Integer, Object>>) hashSet0);
      int int0 = fluentIterable0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      FluentIterable<Integer> fluentIterable0 = FluentIterable.of(integerArray0);
      boolean boolean0 = fluentIterable0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      FluentIterable<Integer> fluentIterable0 = FluentIterable.of(integerArray0);
      FluentIterable<Integer> fluentIterable1 = fluentIterable0.unique();
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FluentIterable<Object> fluentIterable0 = FluentIterable.empty();
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>((Predicate<? super Object>[]) null);
      boolean boolean0 = fluentIterable0.contains(onePredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MinguoEra[] minguoEraArray0 = new MinguoEra[6];
      FluentIterable<MinguoEra> fluentIterable0 = FluentIterable.of(minguoEraArray0);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<MinguoEra> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super MinguoEra>>) linkedList0);
      boolean boolean0 = fluentIterable0.anyMatch(predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      FluentIterable<Integer> fluentIterable0 = FluentIterable.of(integerArray0);
      FluentIterable<Integer> fluentIterable1 = fluentIterable0.eval();
      assertNotSame(fluentIterable0, fluentIterable1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FluentIterable<HijrahEra> fluentIterable0 = FluentIterable.empty();
      String string0 = fluentIterable0.toString();
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      FluentIterable<Integer> fluentIterable0 = FluentIterable.of(integerArray0);
      Class<Integer> class0 = Integer.class;
      Integer[] integerArray1 = fluentIterable0.toArray(class0);
      assertNotSame(integerArray1, integerArray0);
  }
}
