/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 15:25:37 GMT 2025
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.ClosureUtils;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ClosureUtils_ESTest extends ClosureUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 5);
      InvokerTransformer<Object, Object> invokerTransformer0 = new InvokerTransformer<Object, Object>("objectsAndClosures", classArray0, classArray0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) invokerTransformer0);
      Closure<InstanceofPredicate> closure1 = ClosureUtils.whileClosure((Predicate<? super InstanceofPredicate>) predicate0, (Closure<? super InstanceofPredicate>) closure0);
      assertNotNull(closure1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      Closure<Boolean> closure0 = ClosureUtils.switchClosure((Predicate<? super Boolean>[]) predicateArray0, (Closure<? super Boolean>[]) closureArray0, (Closure<? super Boolean>) null);
      assertNotNull(closure0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Closure<Object> closure0 = ClosureUtils.nopClosure();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(predicate0, (Comparator<Object>) null, comparatorPredicate_Criterion0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicateArray0[2]);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(nonePredicate0, nullIsTruePredicate0);
      predicateArray0[0] = (Predicate<Object>) orPredicate0;
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicateArray0[5]);
      predicateArray0[1] = (Predicate<Object>) nullIsExceptionPredicate0;
      predicateArray0[2] = (Predicate<Object>) comparatorPredicate0;
      predicateArray0[3] = (Predicate<Object>) nullIsExceptionPredicate0;
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(nullIsExceptionPredicate0);
      predicateArray0[4] = (Predicate<Object>) identityPredicate0;
      predicateArray0[5] = (Predicate<Object>) comparatorPredicate0;
      predicateArray0[6] = predicate0;
      predicateArray0[7] = (Predicate<Object>) uniquePredicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      predicateArray0[8] = (Predicate<Object>) onePredicate0;
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 9);
      closureArray0[0] = closure0;
      closureArray0[1] = closure0;
      closureArray0[2] = closure0;
      closureArray0[3] = closure0;
      closureArray0[4] = closure0;
      closureArray0[5] = closure0;
      closureArray0[6] = closure0;
      closureArray0[7] = closure0;
      closureArray0[8] = closure0;
      Closure<Transformer<InstanceofPredicate, Object>> closure1 = ClosureUtils.switchClosure((Predicate<? super Transformer<InstanceofPredicate, Object>>[]) predicateArray0, (Closure<? super Transformer<InstanceofPredicate, Object>>[]) closureArray0);
      assertNotNull(closure1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Closure<Closure<AbstractMap.SimpleImmutableEntry>> closure0 = ClosureUtils.invokerClosure("");
      assertNotNull(closure0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      Closure<Object> closure0 = ClosureUtils.nopClosure();
      Closure<Object> closure1 = ClosureUtils.ifClosure((Predicate<? super Object>) allPredicate0, (Closure<? super Object>) closure0, (Closure<? super Object>) closure0);
      Closure<NonePredicate<NonePredicate>> closure2 = ClosureUtils.ifClosure((Predicate<? super NonePredicate<NonePredicate>>) allPredicate0, (Closure<? super NonePredicate<NonePredicate>>) closure1, (Closure<? super NonePredicate<NonePredicate>>) closure0);
      assertNotNull(closure2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Closure<InstanceofPredicate> closure0 = ClosureUtils.nopClosure();
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Closure<InstanceofPredicate> closure1 = ClosureUtils.ifClosure((Predicate<? super InstanceofPredicate>) predicate0, (Closure<? super InstanceofPredicate>) closure0);
      assertFalse(closure1.equals((Object)closure0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = ClosureUtils.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Closure<NonePredicate<Object>> closure1 = ClosureUtils.doWhileClosure((Closure<? super NonePredicate<Object>>) closure0, (Predicate<? super NonePredicate<Object>>) instanceofPredicate0);
      assertNotNull(closure1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      Closure<InstanceofPredicate> closure0 = ClosureUtils.chainedClosure((Closure<? super InstanceofPredicate>[]) closureArray0);
      assertNotNull(closure0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClosureUtils.switchMapClosure((Map<? extends Boolean, Closure<Boolean>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // objectsAndClosures
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<InstanceofPredicate, Closure<Object>> hashMap0 = new HashMap<InstanceofPredicate, Closure<Object>>();
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      hashMap0.put(instanceofPredicate0, (Closure<Object>) null);
      // Undeclared exception!
      try { 
        ClosureUtils.switchMapClosure((Map<?, Closure<Object>>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // closures[0]
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 1);
      // Undeclared exception!
      try { 
        ClosureUtils.switchClosure((Predicate<? super Closure<Closure>>[]) predicateArray0, (Closure<? super Closure<Closure>>[]) closureArray0, (Closure<? super Closure<Closure>>) closureArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // closures[0]
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Closure<Object> closure0 = ClosureUtils.exceptionClosure();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 1);
      closureArray0[0] = closure0;
      // Undeclared exception!
      try { 
        ClosureUtils.switchClosure((Predicate<? super Closure<Closure>>[]) predicateArray0, (Closure<? super Closure<Closure>>[]) closureArray0, (Closure<? super Closure<Closure>>) closure0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate and closure arrays must be the same size
         //
         verifyException("org.apache.commons.collections4.functors.SwitchClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 5);
      // Undeclared exception!
      try { 
        ClosureUtils.switchClosure((Predicate<? super AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, InstanceofPredicate>>[]) predicateArray0, (Closure<? super AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, InstanceofPredicate>>[]) closureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // closures[0]
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 2);
      Closure<Object> closure0 = ClosureUtils.nopClosure();
      closureArray0[0] = closure0;
      closureArray0[1] = closureArray0[0];
      // Undeclared exception!
      try { 
        ClosureUtils.switchClosure((Predicate<? super Object>[]) predicateArray0, (Closure<? super Object>[]) closureArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate and closure arrays must be the same size
         //
         verifyException("org.apache.commons.collections4.functors.SwitchClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<InstanceofPredicate>[] classArray0 = (Class<InstanceofPredicate>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
      try { 
        ClosureUtils.invokerClosure((String) null, (Class<?>[]) classArray0, (Object[]) classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // methodName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      // Undeclared exception!
      try { 
        ClosureUtils.invokerClosure("]", (Class<?>[]) null, (Object[]) predicateArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter types must match the arguments
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClosureUtils.chainedClosure((Closure<? super Object>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // closures
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClosureUtils.chainedClosure((Collection<? extends Closure<? super AbstractMap.SimpleImmutableEntry<NonePredicate, Boolean>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // closures
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Closure<Object>> linkedList0 = new LinkedList<Closure<Object>>();
      linkedList0.add((Closure<Object>) null);
      // Undeclared exception!
      try { 
        ClosureUtils.chainedClosure((Collection<? extends Closure<? super Closure<Closure>>>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // closures[0]
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Closure<Closure<Object>> closure0 = ClosureUtils.asClosure((Transformer<? super Closure<Object>, ?>) null);
      assertNotNull(closure0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<InstanceofPredicate, Closure<Object>> hashMap0 = new HashMap<InstanceofPredicate, Closure<Object>>();
      Closure<Object> closure0 = ClosureUtils.switchMapClosure((Map<?, Closure<Object>>) hashMap0);
      assertNotNull(closure0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      // Undeclared exception!
      try { 
        ClosureUtils.switchClosure((Predicate<? super InstanceofPredicate>[]) predicateArray0, (Closure<? super InstanceofPredicate>[]) null, (Closure<? super InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // closures
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      // Undeclared exception!
      try { 
        ClosureUtils.ifClosure((Predicate<? super InstanceofPredicate>) predicate0, (Closure<? super InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // trueClosure
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClosureUtils.invokerClosure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // methodName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 1);
      // Undeclared exception!
      try { 
        ClosureUtils.chainedClosure((Closure<? super Object>[]) closureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // closures[0]
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Closure<Object>> linkedList0 = new LinkedList<Closure<Object>>();
      Closure<Closure<Closure>> closure0 = ClosureUtils.chainedClosure((Collection<? extends Closure<? super Closure<Closure>>>) linkedList0);
      assertNotNull(closure0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Closure<Boolean> closure0 = ClosureUtils.forClosure(1526, (Closure<? super Boolean>) null);
      assertNotNull(closure0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      // Undeclared exception!
      try { 
        ClosureUtils.switchClosure((Predicate<? super NonePredicate<InstanceofPredicate>>[]) null, (Closure<? super NonePredicate<InstanceofPredicate>>[]) closureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicates
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Closure<InstanceofPredicate> closure0 = ClosureUtils.exceptionClosure();
      // Undeclared exception!
      try { 
        ClosureUtils.ifClosure((Predicate<? super InstanceofPredicate>) null, (Closure<? super InstanceofPredicate>) closure0, (Closure<? super InstanceofPredicate>) closure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      // Undeclared exception!
      try { 
        ClosureUtils.whileClosure((Predicate<? super Boolean>) predicate0, (Closure<? super Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // closure
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClosureUtils.switchClosure((Map<Predicate<Object>, Closure<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicatesAndClosures
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      Closure<InstanceofPredicate> closure0 = ClosureUtils.invokerClosure("0^P/L@DE]]$^3", (Class<?>[]) classArray0, (Object[]) classArray0);
      assertNotNull(closure0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Closure<Object> closure0 = ClosureUtils.nopClosure();
      // Undeclared exception!
      try { 
        ClosureUtils.doWhileClosure((Closure<? super Object>) closure0, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicate
         //
         verifyException("java.util.Objects", e);
      }
  }
}
