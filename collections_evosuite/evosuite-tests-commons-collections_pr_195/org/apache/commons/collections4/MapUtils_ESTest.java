/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 15:44:07 GMT 2025
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.lang.reflect.Array;
import java.nio.CharBuffer;
import java.time.DayOfWeek;
import java.time.Month;
import java.time.format.FormatStyle;
import java.time.format.TextStyle;
import java.time.temporal.ChronoField;
import java.time.temporal.ChronoUnit;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.SortedMap;
import java.util.Stack;
import java.util.TreeMap;
import java.util.concurrent.TimeUnit;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IterableMap;
import org.apache.commons.collections4.MapUtils;
import org.apache.commons.collections4.OrderedMap;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.bidimap.DualHashBidiMap;
import org.apache.commons.collections4.bidimap.DualLinkedHashBidiMap;
import org.apache.commons.collections4.bidimap.DualTreeBidiMap;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.keyvalue.DefaultKeyValue;
import org.apache.commons.collections4.keyvalue.UnmodifiableMapEntry;
import org.apache.commons.collections4.map.AbstractReferenceMap;
import org.apache.commons.collections4.map.CaseInsensitiveMap;
import org.apache.commons.collections4.map.CompositeMap;
import org.apache.commons.collections4.map.DefaultedMap;
import org.apache.commons.collections4.map.FixedSizeMap;
import org.apache.commons.collections4.map.Flat3Map;
import org.apache.commons.collections4.map.HashedMap;
import org.apache.commons.collections4.map.LRUMap;
import org.apache.commons.collections4.map.LinkedMap;
import org.apache.commons.collections4.map.ListOrderedMap;
import org.apache.commons.collections4.map.PassiveExpiringMap;
import org.apache.commons.collections4.map.PredicatedSortedMap;
import org.apache.commons.collections4.map.ReferenceIdentityMap;
import org.apache.commons.collections4.map.ReferenceMap;
import org.apache.commons.collections4.map.SingletonMap;
import org.apache.commons.collections4.map.StaticBucketMap;
import org.apache.commons.collections4.map.TransformedMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class MapUtils_ESTest extends MapUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Double double0 = new Double(0.0);
      DefaultedMap<Double, Double> defaultedMap0 = new DefaultedMap<Double, Double>(double0);
      Double double1 = new Double(0.0);
      defaultedMap0.put(double1, double0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.collections4.MapUtils$2");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      MapUtils.verbosePrint(mockPrintStream0, mockPrintStream0, defaultedMap0);
      assertFalse(defaultedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CompositeMap<Object, LinkedList<Object>> compositeMap0 = new CompositeMap<Object, LinkedList<Object>>();
      DualTreeBidiMap<Object, LinkedList<Object>> dualTreeBidiMap0 = new DualTreeBidiMap<Object, LinkedList<Object>>(compositeMap0);
      SortedMap<Object, LinkedList<Object>> sortedMap0 = MapUtils.unmodifiableSortedMap((SortedMap<Object, ? extends LinkedList<Object>>) dualTreeBidiMap0);
      assertEquals(0, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = linkedList0.poll();
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      Flat3Map<Object, Object> flat3Map0 = new Flat3Map<Object, Object>(linkedMap0);
      Map<Object, Object> map0 = MapUtils.unmodifiableMap((Map<?, ?>) flat3Map0);
      flat3Map0.put(object0, (Object) null);
      Map<Object, Object> map1 = MapUtils.unmodifiableMap((Map<?, ?>) map0);
      assertEquals(1, map1.size());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Float float0 = new Float((-1.0));
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceIdentityMap<Float, Float> referenceIdentityMap0 = new ReferenceIdentityMap<Float, Float>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 1041, 1041, true);
      Float float1 = referenceIdentityMap0.put(float0, float0);
      ConstantFactory<Float> constantFactory0 = new ConstantFactory<Float>(float1);
      Transformer<Float, Float> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Float>) constantFactory0);
      IterableMap<Float, Float> iterableMap0 = MapUtils.transformedMap((Map<Float, Float>) referenceIdentityMap0, (Transformer<? super Float, ? extends Float>) transformer0, (Transformer<? super Float, ? extends Float>) transformer0);
      assertFalse(iterableMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DualTreeBidiMap<Object, Object> dualTreeBidiMap0 = new DualTreeBidiMap<Object, Object>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) stack0);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      SortedMap<Object, Object> sortedMap0 = MapUtils.predicatedSortedMap((SortedMap<Object, Object>) dualTreeBidiMap0, (Predicate<? super Object>) nonePredicate0, (Predicate<? super Object>) predicate0);
      assertTrue(sortedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Float float0 = new Float(1952.0492591);
      Factory<Float> factory0 = ConstantFactory.constantFactory(float0);
      Transformer<Float, Float> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Float>) factory0);
      ReferenceMap<Float, Float> referenceMap0 = new ReferenceMap<Float, Float>();
      TransformedMap<Float, Float> transformedMap0 = TransformedMap.transformingMap((Map<Float, Float>) referenceMap0, (Transformer<? super Float, ? extends Float>) transformer0, (Transformer<? super Float, ? extends Float>) transformer0);
      IterableMap<Float, Float> iterableMap0 = MapUtils.lazyMap((Map<Float, Float>) transformedMap0, (Factory<? extends Float>) factory0);
      assertTrue(iterableMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Object, Object> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Object, Object>();
      PassiveExpiringMap<Object, Object> passiveExpiringMap0 = new PassiveExpiringMap<Object, Object>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      Object object0 = passiveExpiringMap0.put((Object) null, locale_FilteringMode0);
      OrderedMap<Object, Object> orderedMap0 = MapUtils.orderedMap((Map<Object, Object>) passiveExpiringMap0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate(object0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Function<Predicate<Object>, String> function0 = (Function<Predicate<Object>, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any(org.apache.commons.collections4.Predicate.class));
      String string0 = MapUtils.getString((Map<? super Predicate<Object>, ?>) orderedMap0, predicate0, function0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StaticBucketMap<LinkedList<Double>, Double> staticBucketMap0 = new StaticBucketMap<LinkedList<Double>, Double>(1146);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Short short0 = new Short((short) (-3));
      Function<LinkedList<Double>, Short> function0 = (Function<LinkedList<Double>, Short>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(short0).when(function0).apply(any(java.util.LinkedList.class));
      short short1 = MapUtils.getShortValue((Map<? super LinkedList<Double>, ?>) staticBucketMap0, linkedList0, function0);
      assertEquals((short) (-3), short1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      PassiveExpiringMap<Object, Object> passiveExpiringMap0 = new PassiveExpiringMap<Object, Object>(0L);
      Short short0 = new Short((short)0);
      Short short1 = MapUtils.getShort((Map<? super Byte, ?>) passiveExpiringMap0, byte0, short0);
      assertEquals((short)0, (short)short1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CompositeMap.MapMutator<Object, Object> compositeMap_MapMutator0 = (CompositeMap.MapMutator<Object, Object>) mock(CompositeMap.MapMutator.class, new ViolatedAssumptionAnswer());
      CompositeMap<Object, Object> compositeMap0 = new CompositeMap<Object, Object>((Map<Object, Object>) null, (Map<Object, Object>) null, compositeMap_MapMutator0);
      Short short0 = new Short((short) (-1933));
      Short short1 = MapUtils.getShort((Map<? super Object, ?>) compositeMap0, (Object) compositeMap0, short0);
      assertEquals((short) (-1933), (short)short1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DualLinkedHashBidiMap<ChronoUnit, Byte> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<ChronoUnit, Byte>();
      HashedMap<Object, Object> hashedMap0 = new HashedMap<Object, Object>(3, 3);
      Object object0 = MapUtils.getObject((Map<Object, Object>) hashedMap0, (Object) dualLinkedHashBidiMap0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      SingletonMap<LinkedList<Byte>, Byte> singletonMap0 = new SingletonMap<LinkedList<Byte>, Byte>(linkedList0, (Byte) null);
      Function<LinkedList<Byte>, Number> function0 = (Function<LinkedList<Byte>, Number>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any(java.util.LinkedList.class));
      Number number0 = MapUtils.getNumber((Map<? super LinkedList<Byte>, ?>) singletonMap0, linkedList0, function0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Byte byte1 = new Byte((byte)54);
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte0, byte1);
      SingletonMap<Byte, Byte> singletonMap0 = new SingletonMap<Byte, Byte>(abstractMap_SimpleImmutableEntry0);
      Function<Byte, Long> function0 = (Function<Byte, Long>) mock(Function.class, new ViolatedAssumptionAnswer());
      long long0 = MapUtils.getLongValue((Map<? super Byte, ?>) singletonMap0, byte0, function0);
      assertEquals(54L, long0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      Byte byte1 = new Byte((byte) (-73));
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte0, byte1);
      SingletonMap<Byte, Byte> singletonMap0 = new SingletonMap<Byte, Byte>(abstractMap_SimpleImmutableEntry0);
      Function<Byte, Long> function0 = (Function<Byte, Long>) mock(Function.class, new ViolatedAssumptionAnswer());
      long long0 = MapUtils.getLongValue((Map<? super Byte, ?>) singletonMap0, byte0, function0);
      assertEquals((-73L), long0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>(0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Long long0 = new Long(0);
      Long long1 = MapUtils.getLong((Map<? super Predicate<Object>, ?>) linkedMap0, predicate0, long0);
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Long long0 = MapUtils.getLong((Map<? super LinkedList<Predicate<Object>>, ?>) null, linkedList0, (Long) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      SingletonMap<Byte, Byte> singletonMap0 = new SingletonMap<Byte, Byte>(byte0, byte0);
      Function<Byte, Integer> function0 = (Function<Byte, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Integer integer0 = MapUtils.getInteger((Map<? super Byte, ?>) singletonMap0, byte0, function0);
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Byte byte0 = new Byte((byte)32);
      SingletonMap<Byte, Byte> singletonMap0 = new SingletonMap<Byte, Byte>(byte0, byte0);
      LRUMap<Byte, Byte> lRUMap0 = new LRUMap<Byte, Byte>(singletonMap0, true);
      Function<Byte, Integer> function0 = (Function<Byte, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Integer integer0 = MapUtils.getInteger((Map<? super Byte, ?>) lRUMap0, byte0, function0);
      assertEquals(32, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LinkedMap<ChronoField, ChronoField> linkedMap0 = new LinkedMap<ChronoField, ChronoField>();
      ChronoField chronoField0 = ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR;
      Integer integer0 = new Integer(1);
      Function<ChronoField, Integer> function0 = (Function<ChronoField, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(function0).apply(any(java.time.temporal.ChronoField.class));
      int int0 = MapUtils.getIntValue((Map<? super ChronoField, ?>) linkedMap0, chronoField0, function0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LinkedMap<ChronoField, ChronoField> linkedMap0 = new LinkedMap<ChronoField, ChronoField>();
      ChronoField chronoField0 = ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR;
      Integer integer0 = new Integer((-8));
      Function<ChronoField, Integer> function0 = (Function<ChronoField, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(function0).apply(any(java.time.temporal.ChronoField.class));
      int int0 = MapUtils.getIntValue((Map<? super ChronoField, ?>) linkedMap0, chronoField0, function0);
      assertEquals((-8), int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.HOURS;
      Byte byte0 = new Byte((byte)6);
      DefaultedMap<ChronoUnit, Byte> defaultedMap0 = new DefaultedMap<ChronoUnit, Byte>(byte0);
      Function<ChronoUnit, Float> function0 = (Function<ChronoUnit, Float>) mock(Function.class, new ViolatedAssumptionAnswer());
      float float0 = MapUtils.getFloatValue((Map<? super ChronoUnit, ?>) defaultedMap0, chronoUnit0, function0);
      assertEquals(6.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DualLinkedHashBidiMap<ChronoUnit, Byte> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<ChronoUnit, Byte>();
      ChronoUnit chronoUnit0 = ChronoUnit.HOURS;
      Float float0 = new Float((-1141.567F));
      Function<ChronoUnit, Float> function0 = (Function<ChronoUnit, Float>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(float0).when(function0).apply(any(java.time.temporal.ChronoUnit.class));
      float float1 = MapUtils.getFloatValue((Map<? super ChronoUnit, ?>) dualLinkedHashBidiMap0, chronoUnit0, function0);
      assertEquals((-1141.567F), float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LRUMap<CharBuffer, CharBuffer> lRUMap0 = new LRUMap<CharBuffer, CharBuffer>(1163, 1163, 4830.944F, false);
      Float float0 = MapUtils.getFloat((Map<? super CharBuffer, ?>) lRUMap0, (CharBuffer) null, (Function<CharBuffer, Float>) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Double double0 = new Double(0.0);
      DefaultedMap<Double, Double> defaultedMap0 = new DefaultedMap<Double, Double>(double0);
      defaultedMap0.put(double0, (Double) null);
      double double1 = MapUtils.getDoubleValue((Map<? super Double, ?>) defaultedMap0, double0, 573.411957);
      assertEquals(573.411957, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Double double0 = new Double((-1.0));
      HashedMap<Object, Object> hashedMap0 = new HashedMap<Object, Object>();
      double double1 = MapUtils.getDoubleValue((Map<? super Double, ?>) hashedMap0, double0, (-672.156408));
      assertEquals((-672.156408), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashedMap<Double, Double> hashedMap0 = new HashedMap<Double, Double>();
      Double double0 = new Double(583.267724008326);
      hashedMap0.put(double0, double0);
      Double double1 = MapUtils.getDouble((Map<? super Double, ?>) hashedMap0, double0, (Function<Double, Double>) null);
      assertEquals(583.267724008326, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-76));
      ConstantTransformer<Object, Byte> constantTransformer0 = new ConstantTransformer<Object, Byte>(byte0);
      LRUMap<Object, Object> lRUMap0 = new LRUMap<Object, Object>();
      Predicate<Byte>[] predicateArray0 = (Predicate<Byte>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Byte> predicate0 = AnyPredicate.anyPredicate((Predicate<? super Byte>[]) predicateArray0);
      TransformedPredicate<Byte> transformedPredicate0 = new TransformedPredicate<Byte>(constantTransformer0, predicate0);
      Double double0 = new Double((byte) (-76));
      Function<Predicate<Byte>, Double> function0 = (Function<Predicate<Byte>, Double>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(double0).when(function0).apply(any(org.apache.commons.collections4.Predicate.class));
      Double double1 = MapUtils.getDouble((Map<? super Predicate<Byte>, ?>) lRUMap0, (Predicate<Byte>) transformedPredicate0, function0);
      assertEquals((-76.0), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Double double0 = new Double(1.0);
      Double double1 = MapUtils.getDouble((Map<? super Byte, ?>) null, byte0, double0);
      assertEquals(1.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LRUMap<Byte, Locale.FilteringMode> lRUMap0 = new LRUMap<Byte, Locale.FilteringMode>(1203, 1203);
      Double double0 = new Double((byte) (-1));
      Double double1 = MapUtils.getDouble((Map<? super Byte, ?>) lRUMap0, (Byte) null, double0);
      assertEquals((-1.0), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Byte byte0 = new Byte((byte)6);
      DefaultedMap<ChronoUnit, Byte> defaultedMap0 = new DefaultedMap<ChronoUnit, Byte>(byte0);
      Map<Object, Object> map0 = MapUtils.unmodifiableMap((Map<?, ?>) defaultedMap0);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      byte byte1 = MapUtils.getByteValue((Map<? super LinkedList<Predicate<Object>>, ?>) map0, linkedList0, (byte) (-125));
      assertEquals((byte)6, byte1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      Function<Byte, Byte> function0 = Function.identity();
      Byte byte1 = MapUtils.getByte((Map<? super Byte, ?>) linkedMap0, byte0, function0);
      assertEquals((byte)0, (byte)byte1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      HashedMap<Byte, Byte> hashedMap0 = new HashedMap<Byte, Byte>();
      Function<Byte, Byte> function0 = Function.identity();
      Byte byte1 = MapUtils.getByte((Map<? super Byte, ?>) hashedMap0, byte0, function0);
      assertEquals((byte)2, (byte)byte1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LRUMap<Month, Month> lRUMap0 = new LRUMap<Month, Month>(1203, false);
      Month month0 = Month.OCTOBER;
      Function<Month, Byte> function0 = (Function<Month, Byte>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any(java.time.Month.class));
      Byte byte0 = MapUtils.getByte((Map<? super Month, ?>) lRUMap0, month0, function0);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<Boolean, Boolean> referenceMap0 = new ReferenceMap<Boolean, Boolean>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, true);
      Boolean boolean0 = Boolean.valueOf("0+,'+-");
      Byte byte0 = MapUtils.getByte((Map<? super Boolean, ?>) referenceMap0, boolean0, (Byte) null);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>((Predicate<? super Object>[]) null);
      ReferenceIdentityMap<Object, Object> referenceIdentityMap0 = new ReferenceIdentityMap<Object, Object>();
      Boolean boolean0 = Boolean.valueOf(true);
      Function<Predicate<Object>, Boolean> function0 = (Function<Predicate<Object>, Boolean>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(function0).apply(any(org.apache.commons.collections4.Predicate.class));
      boolean boolean1 = MapUtils.getBooleanValue((Map<? super Predicate<Object>, ?>) referenceIdentityMap0, (Predicate<Object>) nonePredicate0, function0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<Object, Object> dualTreeBidiMap0 = new DualTreeBidiMap<Object, Object>(comparator0, comparator0);
      boolean boolean0 = MapUtils.getBooleanValue((Map<? super Predicate<Object>, ?>) dualTreeBidiMap0, (Predicate<Object>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>((Predicate<? super Object>[]) null);
      Boolean boolean0 = Boolean.FALSE;
      Function<Predicate<Object>, Boolean> function0 = (Function<Predicate<Object>, Boolean>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(function0).apply(any(org.apache.commons.collections4.Predicate.class));
      Boolean boolean1 = MapUtils.getBoolean((Map<? super Predicate<Object>, ?>) null, (Predicate<Object>) nonePredicate0, function0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ReferenceIdentityMap<Object, Object> referenceIdentityMap0 = new ReferenceIdentityMap<Object, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Boolean boolean0 = MapUtils.getBoolean((Map<? super LinkedList<Object>, ?>) referenceIdentityMap0, linkedList0, (Boolean) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Object object0 = new Object();
      DefaultedMap<Object, Object> defaultedMap0 = new DefaultedMap<Object, Object>(object0);
      IterableMap<Object, Object> iterableMap0 = MapUtils.fixedSizeMap((Map<Object, Object>) defaultedMap0);
      assertEquals(0, iterableMap0.size());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DualLinkedHashBidiMap<ChronoUnit, Byte> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<ChronoUnit, Byte>();
      ChronoUnit chronoUnit0 = ChronoUnit.MONTHS;
      Byte byte0 = new Byte((byte)14);
      dualLinkedHashBidiMap0.put(chronoUnit0, byte0);
      Map<ChronoUnit, Byte> map0 = MapUtils.emptyIfNull((Map<ChronoUnit, Byte>) dualLinkedHashBidiMap0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtils.unmodifiableMap((Map<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Float float0 = new Float((-3292.310507252));
      ConstantTransformer<Object, Float> constantTransformer0 = new ConstantTransformer<Object, Float>(float0);
      // Undeclared exception!
      try { 
        MapUtils.transformedMap((Map<Float, Float>) null, (Transformer<? super Float, ? extends Float>) constantTransformer0, (Transformer<? super Float, ? extends Float>) constantTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtils.synchronizedSortedMap((SortedMap<Month, Byte>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Byte byte0 = new Byte((byte)6);
      DefaultedMap<ChronoUnit, Byte> defaultedMap0 = new DefaultedMap<ChronoUnit, Byte>(byte0);
      Object object0 = new Object();
      Map<Object, Object> map0 = MapUtils.unmodifiableMap((Map<?, ?>) defaultedMap0);
      // Undeclared exception!
      try { 
        MapUtils.safeAddToMap((Map<? super LinkedList<LinkedList>, Object>) map0, (LinkedList<LinkedList>) null, object0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte0, byte0);
      SingletonMap<Byte, Byte> singletonMap0 = new SingletonMap<Byte, Byte>(abstractMap_SimpleImmutableEntry0);
      SingletonMap<Object, Object> singletonMap1 = new SingletonMap<Object, Object>(singletonMap0, byte0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        MapUtils.safeAddToMap((Map<? super LinkedList<LinkedList>, Object>) singletonMap1, (LinkedList<LinkedList>) null, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot put new key/value pair - Map is fixed size singleton
         //
         verifyException("org.apache.commons.collections4.map.SingletonMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 3);
      // Undeclared exception!
      try { 
        MapUtils.putAll((Map<AbstractMap.SimpleImmutableEntry<LinkedList, Object>, Object>) null, (Object[]) classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtils.predicatedMap((Map<AbstractMap.SimpleImmutableEntry<Object, LinkedList>, Object>) null, (Predicate<? super AbstractMap.SimpleImmutableEntry<Object, LinkedList>>) null, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 4);
      InvokerTransformer<Object, Object> invokerTransformer0 = new InvokerTransformer<Object, Object>("y(E9U)GN8]D'Y/L", classArray0, classArray0);
      // Undeclared exception!
      try { 
        MapUtils.lazySortedMap((SortedMap<Object, Object>) null, (Transformer<? super Object, ?>) invokerTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Float float0 = new Float(1558.773);
      ConstantFactory<Float> constantFactory0 = new ConstantFactory<Float>(float0);
      // Undeclared exception!
      try { 
        MapUtils.lazySortedMap((SortedMap<Float, Float>) null, (Factory<? extends Float>) constantFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 3);
      InvokerTransformer<Object, Object> invokerTransformer0 = new InvokerTransformer<Object, Object>("0H:`V=:aEL<XOs", classArray0, classArray0);
      // Undeclared exception!
      try { 
        MapUtils.lazyMap((Map<Object, Object>) null, (Transformer<? super Object, ?>) invokerTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtils.iterableSortedMap((SortedMap<Object, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sortedMap
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtils.iterableMap((Map<Object, LinkedList<Transformer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtils.invertMap((Map<Transformer<LinkedList, AbstractMap.SimpleImmutableEntry>, Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TreeMap<Object, Object> treeMap0 = new TreeMap<Object, Object>();
      Predicate<Byte> predicate0 = UniquePredicate.uniquePredicate();
      // Undeclared exception!
      try { 
        MapUtils.getShort((Map<? super Predicate<Byte>, ?>) treeMap0, predicate0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DualTreeBidiMap<Object, Object> dualTreeBidiMap0 = new DualTreeBidiMap<Object, Object>();
      // Undeclared exception!
      try { 
        MapUtils.getObject((Map<? super Object, Object>) dualTreeBidiMap0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TreeMap<Object, Object> treeMap0 = new TreeMap<Object, Object>();
      UniquePredicate<ChronoField> uniquePredicate0 = new UniquePredicate<ChronoField>();
      // Undeclared exception!
      try { 
        MapUtils.getNumber((Map<? super Predicate<ChronoField>, ?>) treeMap0, (Predicate<ChronoField>) uniquePredicate0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-43));
      Byte byte1 = new Byte((byte)0);
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte0, byte1);
      SingletonMap<Byte, Byte> singletonMap0 = new SingletonMap<Byte, Byte>(abstractMap_SimpleImmutableEntry0);
      ConstantFactory<Byte> constantFactory0 = new ConstantFactory<Byte>(byte1);
      IterableMap<Byte, Byte> iterableMap0 = MapUtils.lazyMap((Map<Byte, Byte>) singletonMap0, (Factory<? extends Byte>) constantFactory0);
      Function<Byte, Long> function0 = (Function<Byte, Long>) mock(Function.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        MapUtils.getLongValue((Map<? super Byte, ?>) iterableMap0, byte1, function0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot put new key/value pair - Map is fixed size singleton
         //
         verifyException("org.apache.commons.collections4.map.SingletonMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DualLinkedHashBidiMap<ChronoUnit, Byte> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<ChronoUnit, Byte>();
      DualTreeBidiMap<Object, Object> dualTreeBidiMap0 = new DualTreeBidiMap<Object, Object>(dualLinkedHashBidiMap0);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        MapUtils.getInteger((Map<? super Predicate<Object>, ?>) dualTreeBidiMap0, (Predicate<Object>) instanceofPredicate0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CompositeMap<Object, LinkedList<Object>> compositeMap0 = new CompositeMap<Object, LinkedList<Object>>();
      DualTreeBidiMap<Object, LinkedList<Object>> dualTreeBidiMap0 = new DualTreeBidiMap<Object, LinkedList<Object>>(compositeMap0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      Function<Predicate<Object>, Float> function0 = (Function<Predicate<Object>, Float>) mock(Function.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        MapUtils.getFloat((Map<? super Predicate<Object>, ?>) dualTreeBidiMap0, (Predicate<Object>) anyPredicate0, function0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CompositeMap<Object, LinkedList<Object>> compositeMap0 = new CompositeMap<Object, LinkedList<Object>>();
      DualTreeBidiMap<Object, LinkedList<Object>> dualTreeBidiMap0 = new DualTreeBidiMap<Object, LinkedList<Object>>(compositeMap0);
      ListOrderedMap<Predicate<Object>, LinkedList<Object>> listOrderedMap0 = new ListOrderedMap<Predicate<Object>, LinkedList<Object>>();
      Set<Predicate<Object>> set0 = listOrderedMap0.keySet();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) set0);
      Transformer<Object, Object> transformer0 = ConstantTransformer.nullTransformer();
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate0);
      Function<Object, Double> function0 = (Function<Object, Double>) mock(Function.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        MapUtils.getDoubleValue((Map<? super Object, ?>) dualTreeBidiMap0, (Object) transformedPredicate0, function0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TreeMap<Object, Object> treeMap0 = new TreeMap<Object, Object>();
      // Undeclared exception!
      try { 
        MapUtils.getDoubleValue((Map<? super Double, ?>) treeMap0, (Double) null, (double) 1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CaseInsensitiveMap<LinkedList<TextStyle>, TextStyle> caseInsensitiveMap0 = new CaseInsensitiveMap<LinkedList<TextStyle>, TextStyle>();
      TextStyle textStyle0 = TextStyle.SHORT_STANDALONE;
      BiFunction<TextStyle, TextStyle, TextStyle> biFunction0 = (BiFunction<TextStyle, TextStyle, TextStyle>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      TextStyle textStyle1 = caseInsensitiveMap0.merge((LinkedList<TextStyle>) null, textStyle0, biFunction0);
      Double double0 = new Double((byte)0);
      Flat3Map<Transformer<TextStyle, TextStyle>, TextStyle> flat3Map0 = new Flat3Map<Transformer<TextStyle, TextStyle>, TextStyle>();
      DualTreeBidiMap<Transformer<TextStyle, TextStyle>, TextStyle> dualTreeBidiMap0 = new DualTreeBidiMap<Transformer<TextStyle, TextStyle>, TextStyle>(flat3Map0);
      CompositeMap.MapMutator<Transformer<TextStyle, TextStyle>, TextStyle> compositeMap_MapMutator0 = (CompositeMap.MapMutator<Transformer<TextStyle, TextStyle>, TextStyle>) mock(CompositeMap.MapMutator.class, new ViolatedAssumptionAnswer());
      CompositeMap<Transformer<TextStyle, TextStyle>, TextStyle> compositeMap0 = new CompositeMap<Transformer<TextStyle, TextStyle>, TextStyle>(dualTreeBidiMap0, flat3Map0, compositeMap_MapMutator0);
      Transformer<TextStyle, TextStyle> transformer0 = ConstantTransformer.constantTransformer(textStyle1);
      // Undeclared exception!
      try { 
        MapUtils.getDouble((Map<? super Transformer<TextStyle, TextStyle>, ?>) compositeMap0, transformer0, double0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      DualTreeBidiMap<Object, Object> dualTreeBidiMap0 = new DualTreeBidiMap<Object, Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(byte0, comparator0, comparatorPredicate_Criterion0);
      // Undeclared exception!
      try { 
        MapUtils.getBooleanValue((Map<? super Predicate<Object>, ?>) dualTreeBidiMap0, (Predicate<Object>) comparatorPredicate0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtils.fixedSizeSortedMap((SortedMap<Object, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      PassiveExpiringMap<Object, Object> passiveExpiringMap0 = new PassiveExpiringMap<Object, Object>(489L, timeUnit0);
      Month month0 = Month.DECEMBER;
      String string0 = MapUtils.getString((Map<? super Month, ?>) passiveExpiringMap0, month0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceIdentityMap<Object, Object> referenceIdentityMap0 = new ReferenceIdentityMap<Object, Object>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Short short0 = MapUtils.getShort((Map<? super Predicate<Object>, ?>) referenceIdentityMap0, (Predicate<Object>) uniquePredicate0);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null, (Equator<Object>) null);
      Predicate<ChronoField> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super ChronoField>) equalPredicate0);
      ChronoField chronoField0 = ChronoField.YEAR_OF_ERA;
      Flat3Map<Predicate<ChronoField>, ChronoField> flat3Map0 = new Flat3Map<Predicate<ChronoField>, ChronoField>();
      flat3Map0.put(predicate0, chronoField0);
      Number number0 = MapUtils.getNumber((Map<? super Predicate<ChronoField>, ?>) flat3Map0, predicate0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null, (Equator<Object>) null);
      Predicate<ChronoField> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super ChronoField>) equalPredicate0);
      Flat3Map<Predicate<ChronoField>, ChronoField> flat3Map0 = new Flat3Map<Predicate<ChronoField>, ChronoField>();
      Number number0 = MapUtils.getNumber((Map<? super Predicate<ChronoField>, ?>) flat3Map0, predicate0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Object object0 = new Object();
      DefaultedMap<Object, Object> defaultedMap0 = new DefaultedMap<Object, Object>(object0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Long long0 = MapUtils.getLong((Map<? super LinkedList<Object>, ?>) defaultedMap0, linkedList0);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TreeMap<Float, Float> treeMap0 = new TreeMap<Float, Float>();
      Float float0 = new Float((-1.0));
      Double double0 = MapUtils.getDouble((Map<? super Float, ?>) treeMap0, float0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Boolean, Boolean> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Boolean, Boolean>((-1427L), timeUnit0);
      PassiveExpiringMap<Boolean, Boolean> passiveExpiringMap0 = new PassiveExpiringMap<Boolean, Boolean>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      HashedMap<Boolean, Boolean> hashedMap0 = new HashedMap<Boolean, Boolean>(passiveExpiringMap0);
      Boolean boolean0 = Boolean.FALSE;
      Boolean boolean1 = MapUtils.getBoolean((Map<? super Boolean, ?>) hashedMap0, boolean0);
      assertNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("WW");
      PassiveExpiringMap<Object, Object> passiveExpiringMap0 = new PassiveExpiringMap<Object, Object>();
      MapUtils.debugPrint(mockPrintStream0, (Object) null, passiveExpiringMap0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CompositeMap<Object, LinkedList<Object>> compositeMap0 = new CompositeMap<Object, LinkedList<Object>>();
      DualTreeBidiMap<Object, LinkedList<Object>> dualTreeBidiMap0 = new DualTreeBidiMap<Object, LinkedList<Object>>(compositeMap0);
      // Undeclared exception!
      try { 
        MapUtils.debugPrint((PrintStream) null, (Object) null, dualTreeBidiMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.MapUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("W|3");
      MapUtils.debugPrint(mockPrintStream0, (Object) null, (Map<?, ?>) null);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      MapUtils.debugPrint(mockPrintStream0, byte0, (Map<?, ?>) null);
      assertEquals(9, byteArrayOutputStream0.size());
      assertEquals("0 = null\n", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = MapUtils.size((Map<?, ?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = linkedList0.poll();
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      Flat3Map<Object, Object> flat3Map0 = new Flat3Map<Object, Object>(linkedMap0);
      flat3Map0.put(object0, (Object) null);
      CaseInsensitiveMap<Object, Object> caseInsensitiveMap0 = new CaseInsensitiveMap<Object, Object>(flat3Map0);
      boolean boolean0 = MapUtils.isNotEmpty(caseInsensitiveMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = MapUtils.isNotEmpty((Map<?, ?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Month month0 = Month.DECEMBER;
      String string0 = MapUtils.getString((Map<? super Month, ?>) null, month0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Byte byte0 = new Byte((byte)6);
      DefaultedMap<ChronoUnit, Byte> defaultedMap0 = new DefaultedMap<ChronoUnit, Byte>(byte0);
      Object object0 = new Object();
      Map<Object, Object> map0 = MapUtils.unmodifiableMap((Map<?, ?>) defaultedMap0);
      Function<Object, Short> function0 = (Function<Object, Short>) mock(Function.class, new ViolatedAssumptionAnswer());
      short short0 = MapUtils.getShortValue((Map<? super Object, ?>) map0, object0, function0);
      assertEquals((short)6, short0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CaseInsensitiveMap<Object, Object> caseInsensitiveMap0 = new CaseInsensitiveMap<Object, Object>();
      Object object0 = new Object();
      Object object1 = MapUtils.getObject((Map<Object, Object>) caseInsensitiveMap0, (Object) caseInsensitiveMap0, object0);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      LinkedList<Predicate<Object>> linkedList0 = MapUtils.getObject((Map<? super Predicate<Object>, LinkedList<Predicate<Object>>>) null, predicate0);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-8));
      SingletonMap<Byte, Byte> singletonMap0 = new SingletonMap<Byte, Byte>(byte0, byte0);
      Function<Byte, Integer> function0 = (Function<Byte, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Integer integer0 = MapUtils.getInteger((Map<? super Byte, ?>) singletonMap0, byte0, function0);
      assertEquals((-8), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Double double0 = new Double(0.0);
      DefaultedMap<Double, Double> defaultedMap0 = new DefaultedMap<Double, Double>(double0);
      double double1 = MapUtils.getDoubleValue((Map<? super Double, ?>) defaultedMap0, double0, 573.411957);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>((Predicate<? super Object>[]) null);
      AndPredicate<ChronoField> andPredicate0 = new AndPredicate<ChronoField>(nonePredicate0, nonePredicate0);
      Boolean boolean0 = MapUtils.getBoolean((Map<? super Predicate<ChronoField>, ?>) null, (Predicate<ChronoField>) andPredicate0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DualLinkedHashBidiMap<ChronoUnit, Byte> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<ChronoUnit, Byte>();
      Map<ChronoUnit, Byte> map0 = MapUtils.emptyIfNull((Map<ChronoUnit, Byte>) dualLinkedHashBidiMap0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte0, byte0);
      SingletonMap<Byte, Byte> singletonMap0 = new SingletonMap<Byte, Byte>(abstractMap_SimpleImmutableEntry0);
      Byte byte1 = new Byte((byte)10);
      long long0 = MapUtils.getLongValue((Map<? super Byte, ?>) singletonMap0, byte1, (Function<Byte, Long>) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Properties properties0 = MapUtils.toProperties((Map<Month, Byte>) null);
      // Undeclared exception!
      try { 
        MapUtils.getFloatValue((Map<? super Byte, ?>) properties0, (Byte) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<Object, Object> dualTreeBidiMap0 = new DualTreeBidiMap<Object, Object>(comparator0, comparator0);
      Factory<Object> factory0 = ExceptionFactory.exceptionFactory();
      SortedMap<Object, Object> sortedMap0 = MapUtils.lazySortedMap((SortedMap<Object, Object>) dualTreeBidiMap0, (Factory<?>) factory0);
      // Undeclared exception!
      try { 
        MapUtils.getBooleanValue((Map<? super Predicate<Object>, ?>) sortedMap0, (Predicate<Object>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceMap<LinkedList<TextStyle>, TextStyle> referenceMap0 = new ReferenceMap<LinkedList<TextStyle>, TextStyle>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, false);
      LinkedList<TextStyle> linkedList0 = new LinkedList<TextStyle>();
      boolean boolean0 = MapUtils.getBooleanValue((Map<? super LinkedList<TextStyle>, ?>) referenceMap0, linkedList0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) null);
      // Undeclared exception!
      try { 
        MapUtils.predicatedSortedMap((SortedMap<Byte, LinkedList<LinkedList>>) null, (Predicate<? super Byte>) predicate0, (Predicate<? super LinkedList<LinkedList>>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>((Predicate<? super Object>[]) null);
      Function<Predicate<Object>, Boolean> function0 = (Function<Predicate<Object>, Boolean>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any(org.apache.commons.collections4.Predicate.class));
      Boolean boolean0 = MapUtils.getBoolean((Map<? super Predicate<Object>, ?>) null, (Predicate<Object>) nonePredicate0, function0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtils.unmodifiableSortedMap((SortedMap<Predicate<LinkedList>, ? extends AbstractMap.SimpleImmutableEntry<FormatStyle, LinkedList>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DualLinkedHashBidiMap<ChronoUnit, Byte> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<ChronoUnit, Byte>();
      ChronoUnit chronoUnit0 = ChronoUnit.HOURS;
      Function<ChronoUnit, Float> function0 = (Function<ChronoUnit, Float>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any(java.time.temporal.ChronoUnit.class));
      float float0 = MapUtils.getFloatValue((Map<? super ChronoUnit, ?>) dualLinkedHashBidiMap0, chronoUnit0, function0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-76));
      ConstantTransformer<Object, Byte> constantTransformer0 = new ConstantTransformer<Object, Byte>(byte0);
      LRUMap<Object, Object> lRUMap0 = new LRUMap<Object, Object>();
      Predicate<Byte>[] predicateArray0 = (Predicate<Byte>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Byte> predicate0 = AnyPredicate.anyPredicate((Predicate<? super Byte>[]) predicateArray0);
      TransformedPredicate<Byte> transformedPredicate0 = new TransformedPredicate<Byte>(constantTransformer0, predicate0);
      Function<Predicate<Byte>, Double> function0 = (Function<Predicate<Byte>, Double>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any(org.apache.commons.collections4.Predicate.class));
      Double double0 = MapUtils.getDouble((Map<? super Predicate<Byte>, ?>) lRUMap0, (Predicate<Byte>) transformedPredicate0, function0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StaticBucketMap<ChronoUnit, ChronoUnit> staticBucketMap0 = new StaticBucketMap<ChronoUnit, ChronoUnit>();
      LinkedMap<ChronoUnit, ChronoUnit> linkedMap0 = new LinkedMap<ChronoUnit, ChronoUnit>(staticBucketMap0);
      ChronoUnit chronoUnit0 = ChronoUnit.NANOS;
      Byte byte0 = new Byte((byte) (-100));
      Byte byte1 = MapUtils.getByte((Map<? super ChronoUnit, ?>) linkedMap0, chronoUnit0, byte0);
      assertEquals((byte) (-100), (byte)byte1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TreeMap<Object, Object> treeMap0 = new TreeMap<Object, Object>();
      // Undeclared exception!
      try { 
        MapUtils.getDoubleValue((Map<? super Predicate<Object>, ?>) treeMap0, (Predicate<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>((Predicate<? super Object>[]) null);
      ReferenceIdentityMap<Object, Object> referenceIdentityMap0 = new ReferenceIdentityMap<Object, Object>();
      Function<Predicate<Object>, Boolean> function0 = (Function<Predicate<Object>, Boolean>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any(org.apache.commons.collections4.Predicate.class));
      boolean boolean0 = MapUtils.getBooleanValue((Map<? super Predicate<Object>, ?>) referenceIdentityMap0, (Predicate<Object>) nonePredicate0, function0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Float float0 = new Float((-1.0));
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceIdentityMap<Float, Float> referenceIdentityMap0 = new ReferenceIdentityMap<Float, Float>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 1041, 1041, false);
      ConstantFactory<Float> constantFactory0 = new ConstantFactory<Float>(float0);
      Transformer<Float, Float> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Float>) constantFactory0);
      IterableMap<Float, Float> iterableMap0 = MapUtils.transformedMap((Map<Float, Float>) referenceIdentityMap0, (Transformer<? super Float, ? extends Float>) transformer0, (Transformer<? super Float, ? extends Float>) transformer0);
      assertTrue(iterableMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DayOfWeek dayOfWeek0 = DayOfWeek.THURSDAY;
      DefaultKeyValue<DayOfWeek, DayOfWeek> defaultKeyValue0 = new DefaultKeyValue<DayOfWeek, DayOfWeek>(dayOfWeek0, dayOfWeek0);
      UnmodifiableMapEntry<DayOfWeek, DayOfWeek> unmodifiableMapEntry0 = new UnmodifiableMapEntry<DayOfWeek, DayOfWeek>(defaultKeyValue0);
      SingletonMap<DayOfWeek, DayOfWeek> singletonMap0 = new SingletonMap<DayOfWeek, DayOfWeek>((Map.Entry<? extends DayOfWeek, ? extends DayOfWeek>) unmodifiableMapEntry0);
      int int0 = MapUtils.getIntValue((Map<? super DayOfWeek, ?>) singletonMap0, dayOfWeek0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LRUMap<Byte, Locale.FilteringMode> lRUMap0 = new LRUMap<Byte, Locale.FilteringMode>(1203, 1203);
      Byte byte0 = new Byte((byte)0);
      String string0 = MapUtils.getString((Map<? super Byte, ?>) lRUMap0, byte0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Function<Object, Long> function0 = (Function<Object, Long>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Long long0 = MapUtils.getLong((Map<? super Object, ?>) null, (Object) null, function0);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TreeMap<Object, Object> treeMap0 = new TreeMap<Object, Object>();
      PredicatedSortedMap<Object, Object> predicatedSortedMap0 = PredicatedSortedMap.predicatedSortedMap((SortedMap<Object, Object>) treeMap0, (Predicate<? super Object>) null, (Predicate<? super Object>) null);
      // Undeclared exception!
      try { 
        MapUtils.getBooleanValue((Map<? super Predicate<Object>, ?>) predicatedSortedMap0, (Predicate<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DualHashBidiMap<Object, Object> dualHashBidiMap0 = new DualHashBidiMap<Object, Object>();
      Short short0 = new Short((short)1085);
      Short short1 = MapUtils.getShort((Map<? super Transformer<LinkedList, Predicate<Object>>, ?>) dualHashBidiMap0, (Transformer<LinkedList, Predicate<Object>>) null, short0);
      assertEquals((short)1085, (short)short1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StaticBucketMap<TextStyle, Predicate<Object>> staticBucketMap0 = new StaticBucketMap<TextStyle, Predicate<Object>>();
      DualLinkedHashBidiMap<TextStyle, Predicate<Object>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<TextStyle, Predicate<Object>>(staticBucketMap0);
      FixedSizeMap<TextStyle, Predicate<Object>> fixedSizeMap0 = FixedSizeMap.fixedSizeMap((Map<TextStyle, Predicate<Object>>) dualLinkedHashBidiMap0);
      TextStyle textStyle0 = TextStyle.FULL_STANDALONE;
      Long long0 = new Long((byte)54);
      Long long1 = MapUtils.getLong((Map<? super TextStyle, ?>) fixedSizeMap0, textStyle0, long0);
      assertEquals(54L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-8));
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      Function<Byte, Byte> function0 = Function.identity();
      Byte byte1 = MapUtils.getByte((Map<? super Byte, ?>) linkedMap0, byte0, function0);
      assertEquals((byte) (-8), (byte)byte1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-76));
      ConstantTransformer<Object, Byte> constantTransformer0 = new ConstantTransformer<Object, Byte>(byte0);
      LRUMap<Object, Object> lRUMap0 = new LRUMap<Object, Object>();
      int int0 = MapUtils.getIntValue((Map<? super Object, ?>) lRUMap0, (Object) constantTransformer0, (-367));
      assertEquals((-367), int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte byte0 = MapUtils.getByteValue((Map<? super Object, ?>) null, (Object) null);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CaseInsensitiveMap<Object, Object> caseInsensitiveMap0 = new CaseInsensitiveMap<Object, Object>();
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>(linkedHashSet0);
      long long0 = MapUtils.getLongValue((Map<? super LinkedList<Predicate<Object>>, ?>) caseInsensitiveMap0, linkedList0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 6);
      Transformer<Month, Byte> transformer0 = InvokerTransformer.invokerTransformer("Q~Kz*N", (Class<?>[]) classArray0, (Object[]) classArray0);
      DualTreeBidiMap<Month, Byte> dualTreeBidiMap0 = new DualTreeBidiMap<Month, Byte>();
      SortedMap<Month, Byte> sortedMap0 = MapUtils.lazySortedMap((SortedMap<Month, Byte>) dualTreeBidiMap0, (Transformer<? super Month, ? extends Byte>) transformer0);
      assertEquals(0, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LinkedMap<ChronoField, ChronoField> linkedMap0 = new LinkedMap<ChronoField, ChronoField>();
      ChronoField chronoField0 = ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR;
      Function<ChronoField, Integer> function0 = (Function<ChronoField, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any(java.time.temporal.ChronoField.class));
      int int0 = MapUtils.getIntValue((Map<? super ChronoField, ?>) linkedMap0, chronoField0, function0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TreeMap<Float, Float> treeMap0 = new TreeMap<Float, Float>();
      PredicatedSortedMap<Float, Float> predicatedSortedMap0 = PredicatedSortedMap.predicatedSortedMap((SortedMap<Float, Float>) treeMap0, (Predicate<? super Float>) null, (Predicate<? super Float>) null);
      SortedMap<Float, Float> sortedMap0 = MapUtils.synchronizedSortedMap((SortedMap<Float, Float>) predicatedSortedMap0);
      assertEquals(0, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtils.fixedSizeMap((Map<Predicate<Transformer>, Predicate<Predicate>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Double double0 = new Double((byte)0);
      Double double1 = MapUtils.getDouble((Map<? super Byte, ?>) null, byte0, double0);
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Double double0 = new Double(0.0);
      DefaultedMap<Double, Double> defaultedMap0 = new DefaultedMap<Double, Double>(double0);
      Map<Object, Object> map0 = MapUtils.unmodifiableMap((Map<?, ?>) defaultedMap0);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      byte byte0 = MapUtils.getByteValue((Map<? super LinkedList<Predicate<Object>>, ?>) map0, linkedList0, (byte)3);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Float float0 = new Float((-1.0));
      SingletonMap<Float, Float> singletonMap0 = new SingletonMap<Float, Float>();
      UnaryOperator<Float> unaryOperator0 = UnaryOperator.identity();
      Float float1 = MapUtils.getFloat((Map<? super Float, ?>) singletonMap0, float0, (Function<Float, Float>) unaryOperator0);
      assertEquals((-1.0F), (float)float1, 0.01F);
  }
}
