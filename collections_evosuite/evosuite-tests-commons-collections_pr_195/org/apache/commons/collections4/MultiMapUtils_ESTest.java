/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 15:46:16 GMT 2025
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.format.FormatStyle;
import java.util.Collection;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.apache.commons.collections4.Bag;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.ListValuedMap;
import org.apache.commons.collections4.MultiMapUtils;
import org.apache.commons.collections4.MultiValuedMap;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.CloneTransformer;
import org.apache.commons.collections4.functors.ClosureTransformer;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.multimap.ArrayListValuedHashMap;
import org.apache.commons.collections4.multimap.HashSetValuedHashMap;
import org.apache.commons.collections4.multimap.TransformedMultiValuedMap;
import org.apache.commons.io.IOCase;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class MultiMapUtils_ESTest extends MultiMapUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashSetValuedHashMap<Object, FormatStyle> hashSetValuedHashMap0 = new HashSetValuedHashMap<Object, FormatStyle>();
      Transformer<Object, Object> transformer0 = CloneTransformer.cloneTransformer();
      Closure<FormatStyle> closure0 = TransformerClosure.transformerClosure((Transformer<? super FormatStyle, ?>) transformer0);
      Transformer<FormatStyle, FormatStyle> transformer1 = ClosureTransformer.closureTransformer((Closure<? super FormatStyle>) closure0);
      MultiValuedMap<Object, FormatStyle> multiValuedMap0 = MultiMapUtils.transformedMultiValuedMap((MultiValuedMap<Object, FormatStyle>) hashSetValuedHashMap0, (Transformer<? super Object, ?>) transformer0, (Transformer<? super FormatStyle, ? extends FormatStyle>) transformer1);
      assertTrue(multiValuedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      ArrayListValuedHashMap<Object, Object> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Object, Object>(hashMap0);
      arrayListValuedHashMap0.put(hashMap0, hashMap0);
      Transformer<Object, Object> transformer0 = InvokerTransformer.invokerTransformer("The size must be non-negative");
      MultiValuedMap<Object, Object> multiValuedMap0 = MultiMapUtils.transformedMultiValuedMap((MultiValuedMap<Object, Object>) arrayListValuedHashMap0, (Transformer<? super Object, ?>) transformer0, (Transformer<? super Object, ?>) transformer0);
      assertFalse(multiValuedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayListValuedHashMap<FormatStyle, FormatStyle> arrayListValuedHashMap0 = new ArrayListValuedHashMap<FormatStyle, FormatStyle>(2684);
      FormatStyle formatStyle0 = FormatStyle.FULL;
      Transformer<Object, FormatStyle> transformer0 = ConstantTransformer.constantTransformer(formatStyle0);
      TransformedMultiValuedMap<FormatStyle, FormatStyle> transformedMultiValuedMap0 = TransformedMultiValuedMap.transformedMap((MultiValuedMap<FormatStyle, FormatStyle>) arrayListValuedHashMap0, (Transformer<? super FormatStyle, ? extends FormatStyle>) transformer0, (Transformer<? super FormatStyle, ? extends FormatStyle>) transformer0);
      Class<FormatStyle> class0 = FormatStyle.class;
      EnumSet<FormatStyle> enumSet0 = EnumSet.allOf(class0);
      arrayListValuedHashMap0.putAll(formatStyle0, (Iterable<? extends FormatStyle>) enumSet0);
      Set<FormatStyle> set0 = MultiMapUtils.getValuesAsSet((MultiValuedMap<FormatStyle, FormatStyle>) transformedMultiValuedMap0, formatStyle0);
      assertTrue(set0.contains(formatStyle0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      HashMap<IOCase, Predicate<Object>> hashMap0 = new HashMap<IOCase, Predicate<Object>>();
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      hashMap0.put(iOCase0, predicate0);
      HashSetValuedHashMap<IOCase, Predicate<Object>> hashSetValuedHashMap0 = new HashSetValuedHashMap<IOCase, Predicate<Object>>(hashMap0);
      List<Predicate<Object>> list0 = MultiMapUtils.getValuesAsList((MultiValuedMap<IOCase, Predicate<Object>>) hashSetValuedHashMap0, iOCase0);
      assertTrue(list0.contains(predicate0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayListValuedHashMap<FormatStyle, FormatStyle> arrayListValuedHashMap0 = new ArrayListValuedHashMap<FormatStyle, FormatStyle>(0);
      FormatStyle formatStyle0 = FormatStyle.FULL;
      arrayListValuedHashMap0.put(formatStyle0, formatStyle0);
      MultiValuedMap<FormatStyle, Object> multiValuedMap0 = MultiMapUtils.unmodifiableMultiValuedMap((MultiValuedMap<? extends FormatStyle, ?>) arrayListValuedHashMap0);
      Bag<Object> bag0 = MultiMapUtils.getValuesAsBag(multiValuedMap0, formatStyle0);
      assertEquals(1, bag0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrayListValuedHashMap<FormatStyle, FormatStyle> arrayListValuedHashMap0 = new ArrayListValuedHashMap<FormatStyle, FormatStyle>(0);
      FormatStyle formatStyle0 = FormatStyle.FULL;
      arrayListValuedHashMap0.put(formatStyle0, formatStyle0);
      MultiValuedMap<FormatStyle, Object> multiValuedMap0 = MultiMapUtils.unmodifiableMultiValuedMap((MultiValuedMap<? extends FormatStyle, ?>) arrayListValuedHashMap0);
      MultiValuedMap<FormatStyle, Object> multiValuedMap1 = MultiMapUtils.emptyIfNull(multiValuedMap0);
      assertFalse(multiValuedMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiMapUtils.unmodifiableMultiValuedMap((MultiValuedMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiMapUtils.transformedMultiValuedMap((MultiValuedMap<Object, Predicate<Object>>) null, (Transformer<? super Object, ?>) null, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<FormatStyle, Object> hashMap0 = new HashMap<FormatStyle, Object>();
      Set<Map.Entry<FormatStyle, Object>> set0 = (Set<Map.Entry<FormatStyle, Object>>)hashMap0.entrySet();
      ArrayListValuedHashMap<FormatStyle, Object> arrayListValuedHashMap0 = new ArrayListValuedHashMap<FormatStyle, Object>(hashMap0);
      FormatStyle formatStyle0 = FormatStyle.SHORT;
      hashMap0.put(formatStyle0, arrayListValuedHashMap0);
      arrayListValuedHashMap0.put(formatStyle0, set0);
      // Undeclared exception!
      try { 
        MultiMapUtils.getValuesAsSet((MultiValuedMap<FormatStyle, Object>) arrayListValuedHashMap0, formatStyle0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashSetValuedHashMap<Object, FormatStyle> hashSetValuedHashMap0 = new HashSetValuedHashMap<Object, FormatStyle>();
      HashMap<Object, FormatStyle> hashMap0 = new HashMap<Object, FormatStyle>();
      FormatStyle formatStyle0 = FormatStyle.LONG;
      hashMap0.put(hashSetValuedHashMap0, formatStyle0);
      hashSetValuedHashMap0.putAll((Map<?, ? extends FormatStyle>) hashMap0);
      // Undeclared exception!
      try { 
        MultiMapUtils.getValuesAsBag((MultiValuedMap<Object, FormatStyle>) hashSetValuedHashMap0, (Object) hashSetValuedHashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Bag<LinkedHashSet<Object>> bag0 = MultiMapUtils.getValuesAsBag((MultiValuedMap<LinkedHashSet<Object>, LinkedHashSet<Object>>) null, linkedHashSet0);
      assertNull(bag0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Set<Object> set0 = MultiMapUtils.getValuesAsSet((MultiValuedMap<Object, Object>) null, (Object) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FormatStyle formatStyle0 = FormatStyle.FULL;
      List<Object> list0 = MultiMapUtils.getValuesAsList((MultiValuedMap<FormatStyle, Object>) null, formatStyle0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ListValuedMap<FormatStyle, FormatStyle> listValuedMap0 = MultiMapUtils.newListValuedHashMap();
      FormatStyle formatStyle0 = FormatStyle.FULL;
      Collection<FormatStyle> collection0 = MultiMapUtils.getCollection((MultiValuedMap<FormatStyle, FormatStyle>) listValuedMap0, formatStyle0);
      assertFalse(collection0.contains(formatStyle0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Collection<Object> collection0 = MultiMapUtils.getCollection((MultiValuedMap<Object, Object>) null, (Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayListValuedHashMap<Object, Object> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Object, Object>();
      Predicate<LinkedHashSet<Object>> predicate0 = ExceptionPredicate.exceptionPredicate();
      Object object0 = new Object();
      arrayListValuedHashMap0.put(predicate0, object0);
      boolean boolean0 = MultiMapUtils.isEmpty(arrayListValuedHashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ListValuedMap<LinkedHashSet<Object>, Object> listValuedMap0 = MultiMapUtils.newListValuedHashMap();
      boolean boolean0 = MultiMapUtils.isEmpty(listValuedMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = MultiMapUtils.isEmpty((MultiValuedMap<?, ?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValuedMap<Predicate<Object>, LinkedHashSet<IOCase>> multiValuedMap0 = MultiMapUtils.emptyIfNull((MultiValuedMap<Predicate<Object>, LinkedHashSet<IOCase>>) null);
      assertTrue(multiValuedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValuedMap<Object, Object> multiValuedMap0 = MultiMapUtils.emptyMultiValuedMap();
      Bag<Object> bag0 = MultiMapUtils.getValuesAsBag(multiValuedMap0, (Object) null);
      HashMap<FormatStyle, Object> hashMap0 = new HashMap<FormatStyle, Object>();
      FormatStyle formatStyle0 = FormatStyle.FULL;
      Object object0 = hashMap0.put(formatStyle0, bag0);
      List<Object> list0 = MultiMapUtils.getValuesAsList(multiValuedMap0, object0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArrayListValuedHashMap<FormatStyle, FormatStyle> arrayListValuedHashMap0 = new ArrayListValuedHashMap<FormatStyle, FormatStyle>(0);
      MultiValuedMap<FormatStyle, Object> multiValuedMap0 = MultiMapUtils.unmodifiableMultiValuedMap((MultiValuedMap<? extends FormatStyle, ?>) arrayListValuedHashMap0);
      assertTrue(multiValuedMap0.isEmpty());
  }
}
