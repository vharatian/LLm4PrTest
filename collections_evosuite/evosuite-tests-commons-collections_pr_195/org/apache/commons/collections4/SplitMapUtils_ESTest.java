/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 15:56:57 GMT 2025
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.collections4.Get;
import org.apache.commons.collections4.IterableMap;
import org.apache.commons.collections4.OrderedBidiMap;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Put;
import org.apache.commons.collections4.SplitMapUtils;
import org.apache.commons.collections4.bidimap.DualLinkedHashBidiMap;
import org.apache.commons.collections4.bidimap.DualTreeBidiMap;
import org.apache.commons.collections4.map.CompositeMap;
import org.apache.commons.collections4.trie.PatriciaTrie;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SplitMapUtils_ESTest extends SplitMapUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DualTreeBidiMap<Integer, Object> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Object>();
      OrderedBidiMap<Object, Integer> orderedBidiMap0 = dualTreeBidiMap0.inverseOrderedBidiMap();
      Map<Object, Integer> map0 = SplitMapUtils.writableMap((Put<Object, Integer>) orderedBidiMap0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DualLinkedHashBidiMap<Object, Object> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Object, Object>();
      Object object0 = new Object();
      dualLinkedHashBidiMap0.put(object0, object0);
      IterableMap<Object, Object> iterableMap0 = SplitMapUtils.readableMap((Get<Object, Object>) dualLinkedHashBidiMap0);
      assertFalse(iterableMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        SplitMapUtils.writableMap((Put<Integer, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // put
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        SplitMapUtils.readableMap((Get<HashMap<Predicate<Object>, PatriciaTrie>, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // get
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CompositeMap.MapMutator<PatriciaTrie<Object>, Object> compositeMap_MapMutator0 = (CompositeMap.MapMutator<PatriciaTrie<Object>, Object>) mock(CompositeMap.MapMutator.class, new ViolatedAssumptionAnswer());
      CompositeMap<PatriciaTrie<Object>, Object> compositeMap0 = new CompositeMap<PatriciaTrie<Object>, Object>((Map<PatriciaTrie<Object>, Object>) null, (Map<PatriciaTrie<Object>, Object>) null, compositeMap_MapMutator0);
      IterableMap<PatriciaTrie<Object>, Object> iterableMap0 = SplitMapUtils.readableMap((Get<PatriciaTrie<Object>, Object>) compositeMap0);
      assertEquals(0, iterableMap0.size());
  }
}
