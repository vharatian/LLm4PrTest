/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 20:03:45 GMT 2025
 */

package org.apache.commons.collections4.multiset;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Set;
import org.apache.commons.collections4.MultiSet;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.multiset.HashMultiSet;
import org.apache.commons.collections4.multiset.PredicatedMultiSet;
import org.apache.commons.collections4.multiset.SynchronizedMultiSet;
import org.apache.commons.collections4.multiset.UnmodifiableMultiSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class UnmodifiableMultiSet_ESTest extends UnmodifiableMultiSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnmodifiableMultiSet.unmodifiableMultiSet((MultiSet<? extends Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      MultiSet<Integer> multiSet0 = UnmodifiableMultiSet.unmodifiableMultiSet((MultiSet<? extends Integer>) hashMultiSet0);
      MultiSet<Object> multiSet1 = UnmodifiableMultiSet.unmodifiableMultiSet((MultiSet<?>) multiSet0);
      assertNotNull(multiSet1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      MultiSet<Integer> multiSet0 = UnmodifiableMultiSet.unmodifiableMultiSet((MultiSet<? extends Integer>) hashMultiSet0);
      Object object0 = new Object();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(object0);
      PredicatedMultiSet<Integer> predicatedMultiSet0 = new PredicatedMultiSet<Integer>(multiSet0, identityPredicate0);
      Set<MultiSet.Entry<Integer>> set0 = (Set<MultiSet.Entry<Integer>>)predicatedMultiSet0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      MultiSet<Object> multiSet0 = UnmodifiableMultiSet.unmodifiableMultiSet((MultiSet<?>) hashMultiSet0);
      SynchronizedMultiSet<Object> synchronizedMultiSet0 = new SynchronizedMultiSet<Object>(multiSet0);
      // Undeclared exception!
      try { 
        synchronizedMultiSet0.addAll(hashMultiSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multiset.UnmodifiableMultiSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      MultiSet<Object> multiSet0 = UnmodifiableMultiSet.unmodifiableMultiSet((MultiSet<?>) hashMultiSet0);
      SynchronizedMultiSet<Object> synchronizedMultiSet0 = new SynchronizedMultiSet<Object>(multiSet0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        synchronizedMultiSet0.setCount(object0, 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multiset.UnmodifiableMultiSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      MultiSet<Object> multiSet0 = UnmodifiableMultiSet.unmodifiableMultiSet((MultiSet<?>) hashMultiSet0);
      SynchronizedMultiSet<Object> synchronizedMultiSet0 = new SynchronizedMultiSet<Object>(multiSet0);
      // Undeclared exception!
      try { 
        synchronizedMultiSet0.add((Object) hashMultiSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multiset.UnmodifiableMultiSet", e);
      }
  }
}
