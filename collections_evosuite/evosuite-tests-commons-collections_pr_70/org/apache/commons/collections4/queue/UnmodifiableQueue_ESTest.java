/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 20:05:51 GMT 2025
 */

package org.apache.commons.collections4.queue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import java.util.Queue;
import org.apache.commons.collections4.queue.CircularFifoQueue;
import org.apache.commons.collections4.queue.UnmodifiableQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class UnmodifiableQueue_ESTest extends UnmodifiableQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnmodifiableQueue.unmodifiableQueue((Queue<? extends Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CircularFifoQueue<Locale.Category> circularFifoQueue0 = new CircularFifoQueue<Locale.Category>();
      Queue<Locale.Category> queue0 = UnmodifiableQueue.unmodifiableQueue((Queue<? extends Locale.Category>) circularFifoQueue0);
      Queue<Locale.Category> queue1 = UnmodifiableQueue.unmodifiableQueue((Queue<? extends Locale.Category>) queue0);
      assertSame(queue0, queue1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CircularFifoQueue<Locale.Category> circularFifoQueue0 = new CircularFifoQueue<Locale.Category>();
      Queue<Locale.Category> queue0 = UnmodifiableQueue.unmodifiableQueue((Queue<? extends Locale.Category>) circularFifoQueue0);
      boolean boolean0 = circularFifoQueue0.containsAll(queue0);
      assertTrue(boolean0);
  }
}
