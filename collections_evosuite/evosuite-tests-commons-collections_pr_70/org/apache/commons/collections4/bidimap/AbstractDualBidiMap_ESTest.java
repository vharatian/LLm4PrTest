/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 19:34:57 GMT 2025
 */

package org.apache.commons.collections4.bidimap;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Map;
import java.util.Set;
import java.util.function.Predicate;
import org.apache.commons.collections4.BidiMap;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedBidiMap;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.bidimap.AbstractDualBidiMap;
import org.apache.commons.collections4.bidimap.DualHashBidiMap;
import org.apache.commons.collections4.bidimap.DualLinkedHashBidiMap;
import org.apache.commons.collections4.bidimap.DualTreeBidiMap;
import org.apache.commons.collections4.bidimap.TreeBidiMap;
import org.apache.commons.collections4.bidimap.UnmodifiableBidiMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AbstractDualBidiMap_ESTest extends AbstractDualBidiMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>();
      Integer integer0 = new Integer((-2114445436));
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      AbstractDualBidiMap.MapEntry<Integer, Integer> abstractDualBidiMap_MapEntry0 = new AbstractDualBidiMap.MapEntry<Integer, Integer>(abstractMap_SimpleEntry0, dualHashBidiMap0);
      abstractDualBidiMap_MapEntry0.setValue(integer0);
      Integer integer1 = new Integer((-2114445436));
      Integer integer2 = abstractDualBidiMap_MapEntry0.setValue(integer1);
      assertEquals((-2114445436), (int)integer2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer((-2));
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      Integer integer1 = new Integer(123);
      treeBidiMap0.put(integer0, integer1);
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>(treeBidiMap0);
      AbstractDualBidiMap.EntrySet<Integer, Integer> abstractDualBidiMap_EntrySet0 = new AbstractDualBidiMap.EntrySet<Integer, Integer>(dualLinkedHashBidiMap0);
      boolean boolean0 = abstractDualBidiMap_EntrySet0.removeAll(abstractDualBidiMap_EntrySet0);
      assertEquals(0, dualLinkedHashBidiMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      Integer integer0 = new Integer((-2146449710));
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      dualLinkedHashBidiMap0.put(integer0, abstractMap_SimpleImmutableEntry0);
      AbstractDualBidiMap.Values<AbstractMap.SimpleImmutableEntry<Integer, Integer>> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<AbstractMap.SimpleImmutableEntry<Integer, Integer>>(dualLinkedHashBidiMap0);
      boolean boolean0 = abstractDualBidiMap_Values0.remove(abstractMap_SimpleImmutableEntry0);
      assertTrue(dualLinkedHashBidiMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(1752);
      dualTreeBidiMap0.put(integer0, integer0);
      Integer integer1 = new Integer(1752);
      dualTreeBidiMap0.removeValue(integer1);
      assertEquals(0, dualTreeBidiMap0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      dualLinkedHashBidiMap0.put(integer0, integer0);
      AbstractDualBidiMap.KeySet<Integer> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<Integer>(dualLinkedHashBidiMap0);
      Iterator<Integer> iterator0 = abstractDualBidiMap_KeySet0.iterator();
      AbstractDualBidiMap.ValuesIterator<Integer> abstractDualBidiMap_ValuesIterator0 = new AbstractDualBidiMap.ValuesIterator<Integer>(iterator0, dualLinkedHashBidiMap0);
      Object object0 = abstractDualBidiMap_ValuesIterator0.next();
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>();
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(dualHashBidiMap0);
      Integer integer0 = new Integer(264);
      treeBidiMap0.put(integer0, integer0);
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>(treeBidiMap0);
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Integer>(dualLinkedHashBidiMap0);
      Iterator<Integer> iterator0 = abstractDualBidiMap_Values0.iterator();
      AbstractDualBidiMap.KeySetIterator<Integer> abstractDualBidiMap_KeySetIterator0 = new AbstractDualBidiMap.KeySetIterator<Integer>(iterator0, dualLinkedHashBidiMap0);
      assertTrue(abstractDualBidiMap_Values0.contains(264));
      
      Object object0 = abstractDualBidiMap_KeySetIterator0.next();
      assertTrue(abstractDualBidiMap_Values0.contains(object0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>();
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(dualHashBidiMap0);
      dualHashBidiMap0.putAll(treeBidiMap0);
      assertEquals(0, treeBidiMap0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DualLinkedHashBidiMap<AbstractDualBidiMap.ValuesIterator<Integer>, AbstractMap.SimpleImmutableEntry<Object, Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<AbstractDualBidiMap.ValuesIterator<Integer>, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      Set<Map.Entry<AbstractDualBidiMap.ValuesIterator<Integer>, AbstractMap.SimpleImmutableEntry<Object, Integer>>> set0 = (Set<Map.Entry<AbstractDualBidiMap.ValuesIterator<Integer>, AbstractMap.SimpleImmutableEntry<Object, Integer>>>)dualLinkedHashBidiMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(hashMap0, hashMap0, (BidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>) null);
      AbstractDualBidiMap.KeySet<AbstractMap.SimpleImmutableEntry<Integer, Integer>> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<AbstractMap.SimpleImmutableEntry<Integer, Integer>>(dualLinkedHashBidiMap0);
      Iterator<AbstractMap.SimpleImmutableEntry<Integer, Integer>> iterator0 = abstractDualBidiMap_KeySet0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Iterator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>> iterator0 = (Iterator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(iterator0).next();
      Comparator<AbstractMap.SimpleImmutableEntry<Integer, Integer>> comparator0 = (Comparator<AbstractMap.SimpleImmutableEntry<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(comparator0, comparator0);
      AbstractDualBidiMap.EntrySetIterator<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> abstractDualBidiMap_EntrySetIterator0 = new AbstractDualBidiMap.EntrySetIterator<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(iterator0, dualTreeBidiMap0);
      // Undeclared exception!
      try { 
        abstractDualBidiMap_EntrySetIterator0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map Entry must not be null.
         //
         verifyException("org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(1);
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>();
      AbstractDualBidiMap.EntrySet<Integer, Integer> abstractDualBidiMap_EntrySet0 = new AbstractDualBidiMap.EntrySet<Integer, Integer>(dualTreeBidiMap0);
      boolean boolean0 = abstractDualBidiMap_EntrySet0.remove(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>();
      AbstractDualBidiMap.EntrySet<Integer, Integer> abstractDualBidiMap_EntrySet0 = new AbstractDualBidiMap.EntrySet<Integer, Integer>(dualTreeBidiMap0);
      Iterator<Map.Entry<Integer, Integer>> iterator0 = (Iterator<Map.Entry<Integer, Integer>>)abstractDualBidiMap_EntrySet0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DualHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualHashBidiMap0 = new DualHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      Integer integer0 = new Integer(125);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = dualHashBidiMap0.put(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry0);
      assertNull(abstractMap_SimpleImmutableEntry1);
      
      BidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> bidiMap0 = dualHashBidiMap0.inverseBidiMap();
      assertFalse(bidiMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      DualTreeBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualTreeBidiMap1 = new DualTreeBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      DualHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualHashBidiMap0 = new DualHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(dualTreeBidiMap1, dualTreeBidiMap0, dualTreeBidiMap0);
      LinkedHashSet<AbstractMap.SimpleImmutableEntry<Integer, Integer>> linkedHashSet0 = new LinkedHashSet<AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      Iterator<AbstractMap.SimpleImmutableEntry<Integer, Integer>> iterator0 = linkedHashSet0.iterator();
      Iterator<AbstractMap.SimpleImmutableEntry<Integer, Integer>> iterator1 = dualHashBidiMap0.createValuesIterator(iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DualTreeBidiMap<Object, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Object, Integer>();
      DualHashBidiMap<Object, Integer> dualHashBidiMap0 = new DualHashBidiMap<Object, Integer>(dualTreeBidiMap0);
      AbstractDualBidiMap.BidiMapIterator<Object, Integer> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<Object, Integer>(dualTreeBidiMap0);
      Iterator<Object> iterator0 = dualHashBidiMap0.createKeySetIterator(abstractDualBidiMap_BidiMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>();
      Iterator<Map.Entry<Integer, Integer>> iterator0 = (Iterator<Map.Entry<Integer, Integer>>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      Iterator<Map.Entry<Integer, Integer>> iterator1 = (Iterator<Map.Entry<Integer, Integer>>)dualHashBidiMap0.createEntrySetIterator(iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DualTreeBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      DualHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> dualHashBidiMap0 = new DualHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>((Map<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>) null, dualTreeBidiMap0, dualTreeBidiMap0);
      // Undeclared exception!
      try { 
        dualHashBidiMap0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>(dualLinkedHashBidiMap0, dualLinkedHashBidiMap0, dualLinkedHashBidiMap0);
      dualHashBidiMap0.put((Integer) null, integer0);
      // Undeclared exception!
      try { 
        dualHashBidiMap0.putAll(dualLinkedHashBidiMap0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedHashMap$LinkedHashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(1);
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      treeBidiMap0.put(integer0, integer0);
      BidiMap<Integer, Integer> bidiMap0 = UnmodifiableBidiMap.unmodifiableBidiMap((BidiMap<? extends Integer, ? extends Integer>) dualTreeBidiMap0);
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>(treeBidiMap0);
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>(bidiMap0, bidiMap0, treeBidiMap0);
      DualHashBidiMap<Integer, Integer> dualHashBidiMap1 = new DualHashBidiMap<Integer, Integer>(dualLinkedHashBidiMap0, dualLinkedHashBidiMap0, treeBidiMap0);
      // Undeclared exception!
      try { 
        dualHashBidiMap0.putAll(dualHashBidiMap1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.UnmodifiableBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      // Undeclared exception!
      try { 
        dualLinkedHashBidiMap0.putAll((Map<? extends Integer, ? extends AbstractMap.SimpleImmutableEntry<Integer, Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>((Comparator<? super AbstractMap.SimpleImmutableEntry<Integer, Integer>>) null, (Comparator<? super AbstractMap.SimpleImmutableEntry<Integer, Integer>>) null);
      // Undeclared exception!
      try { 
        dualTreeBidiMap0.put((AbstractMap.SimpleImmutableEntry<Integer, Integer>) null, (AbstractMap.SimpleImmutableEntry<Integer, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      Integer integer0 = new Integer(32);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      // Undeclared exception!
      try { 
        dualTreeBidiMap0.put(abstractMap_SimpleImmutableEntry0, integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.AbstractMap$SimpleImmutableEntry cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = new Integer(1592);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>(comparator0, comparator0);
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>(dualTreeBidiMap0, (Map<Integer, Integer>) null, dualTreeBidiMap0);
      // Undeclared exception!
      try { 
        dualLinkedHashBidiMap0.getKey(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>();
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>(dualHashBidiMap0);
      DualTreeBidiMap<Comparable<Integer>, Comparable<Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<Comparable<Integer>, Comparable<Integer>>();
      // Undeclared exception!
      try { 
        dualTreeBidiMap0.getKey(dualLinkedHashBidiMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      DualLinkedHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>((Map<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>) null, dualTreeBidiMap0, dualTreeBidiMap0);
      // Undeclared exception!
      try { 
        dualLinkedHashBidiMap0.entrySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$EntrySet", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DualTreeBidiMap<Integer, Object> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Object>();
      // Undeclared exception!
      try { 
        dualTreeBidiMap0.createValuesIterator((Iterator<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DualTreeBidiMap<DualLinkedHashBidiMap<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<DualLinkedHashBidiMap<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      // Undeclared exception!
      try { 
        dualTreeBidiMap0.createKeySetIterator((Iterator<DualLinkedHashBidiMap<Integer, Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        dualTreeBidiMap0.createEntrySetIterator((Iterator<Map.Entry<Integer, Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>();
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(dualTreeBidiMap0);
      OrderedMapIterator<Integer, Integer> orderedMapIterator0 = dualTreeBidiMap0.mapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(125, 125, 125, 26, 61).when(comparator0).compare(anyInt() , anyInt());
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>(comparator0, comparator0);
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>(dualTreeBidiMap0, dualTreeBidiMap0, dualTreeBidiMap0);
      Integer integer0 = new Integer(0);
      dualTreeBidiMap0.put(integer0, integer0);
      dualLinkedHashBidiMap0.put(integer0, (Integer) null);
      assertEquals(2, dualLinkedHashBidiMap0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DualLinkedHashBidiMap<AbstractDualBidiMap.ValuesIterator<Integer>, AbstractMap.SimpleImmutableEntry<Object, Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<AbstractDualBidiMap.ValuesIterator<Integer>, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      boolean boolean0 = dualLinkedHashBidiMap0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Integer integer0 = new Integer((-3631));
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>();
      dualHashBidiMap0.put(integer0, integer0);
      boolean boolean0 = dualHashBidiMap0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DualHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> dualHashBidiMap0 = new DualHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = dualHashBidiMap0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>(comparator0, comparator0);
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>(dualTreeBidiMap0, dualTreeBidiMap0, dualTreeBidiMap0);
      dualLinkedHashBidiMap0.hashCode();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DualHashBidiMap<AbstractDualBidiMap.Values<Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualHashBidiMap0 = new DualHashBidiMap<AbstractDualBidiMap.Values<Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      AbstractDualBidiMap.BidiMapIterator<AbstractDualBidiMap.Values<Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<AbstractDualBidiMap.Values<Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(dualHashBidiMap0);
      String string0 = abstractDualBidiMap_BidiMapIterator0.toString();
      assertEquals("MapIterator[]", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      AbstractDualBidiMap.BidiMapIterator<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(dualLinkedHashBidiMap0);
      // Undeclared exception!
      try { 
        abstractDualBidiMap_BidiMapIterator0.setValue((AbstractMap.SimpleImmutableEntry<Integer, Integer>) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator setValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      OrderedBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> orderedBidiMap0 = dualTreeBidiMap0.inverseOrderedBidiMap();
      DualTreeBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualTreeBidiMap1 = new DualTreeBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(orderedBidiMap0);
      DualHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualHashBidiMap0 = new DualHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(dualTreeBidiMap1, dualTreeBidiMap0, dualTreeBidiMap0);
      AbstractDualBidiMap.BidiMapIterator<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(dualHashBidiMap0);
      // Undeclared exception!
      try { 
        abstractDualBidiMap_BidiMapIterator0.getValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator getValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      OrderedBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> orderedBidiMap0 = dualTreeBidiMap0.inverseOrderedBidiMap();
      DualTreeBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualTreeBidiMap1 = new DualTreeBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(orderedBidiMap0);
      DualHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualHashBidiMap0 = new DualHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(dualTreeBidiMap1, dualTreeBidiMap0, dualTreeBidiMap0);
      AbstractDualBidiMap.BidiMapIterator<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(dualHashBidiMap0);
      // Undeclared exception!
      try { 
        abstractDualBidiMap_BidiMapIterator0.getKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator getKey() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<AbstractMap.SimpleImmutableEntry<Integer, Integer>> comparator1 = (Comparator<AbstractMap.SimpleImmutableEntry<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(comparator0, comparator1);
      Integer integer0 = new Integer(1);
      DualLinkedHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(dualTreeBidiMap0);
      dualLinkedHashBidiMap0.put(integer0, (AbstractMap.SimpleImmutableEntry<Integer, Integer>) null);
      AbstractDualBidiMap.BidiMapIterator<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(dualLinkedHashBidiMap0);
      abstractDualBidiMap_BidiMapIterator0.next();
      String string0 = abstractDualBidiMap_BidiMapIterator0.toString();
      assertEquals(1, dualLinkedHashBidiMap0.size());
      assertEquals("MapIterator[1=null]", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DualHashBidiMap<AbstractDualBidiMap.Values<Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualHashBidiMap0 = new DualHashBidiMap<AbstractDualBidiMap.Values<Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      AbstractDualBidiMap.BidiMapIterator<AbstractDualBidiMap.Values<Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<AbstractDualBidiMap.Values<Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(dualHashBidiMap0);
      // Undeclared exception!
      try { 
        abstractDualBidiMap_BidiMapIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator remove() can only be called once after next()
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>();
      Integer integer0 = new Integer((-2114445436));
      Integer integer1 = new Integer((-2114445436));
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer1);
      dualHashBidiMap0.put(integer1, integer1);
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      AbstractDualBidiMap.MapEntry<Integer, Integer> abstractDualBidiMap_MapEntry0 = new AbstractDualBidiMap.MapEntry<Integer, Integer>(abstractMap_SimpleEntry0, dualHashBidiMap0);
      // Undeclared exception!
      try { 
        abstractDualBidiMap_MapEntry0.setValue(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot use setValue() when the object being set is already in the map
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$MapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Iterator<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>> iterator0 = (Iterator<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      DualLinkedHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      AbstractDualBidiMap.EntrySetIterator<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> abstractDualBidiMap_EntrySetIterator0 = new AbstractDualBidiMap.EntrySetIterator<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(iterator0, dualLinkedHashBidiMap0);
      // Undeclared exception!
      try { 
        abstractDualBidiMap_EntrySetIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator remove() can only be called once after next()
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$EntrySetIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Iterator<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>> iterator0 = (Iterator<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      DualLinkedHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      AbstractDualBidiMap.EntrySetIterator<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> abstractDualBidiMap_EntrySetIterator0 = new AbstractDualBidiMap.EntrySetIterator<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(iterator0, dualLinkedHashBidiMap0);
      abstractDualBidiMap_EntrySetIterator0.canRemove = true;
      // Undeclared exception!
      try { 
        abstractDualBidiMap_EntrySetIterator0.remove();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$EntrySetIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      AbstractDualBidiMap.ValuesIterator<Integer> abstractDualBidiMap_ValuesIterator0 = new AbstractDualBidiMap.ValuesIterator<Integer>(listIterator0, dualLinkedHashBidiMap0);
      // Undeclared exception!
      try { 
        abstractDualBidiMap_ValuesIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator remove() can only be called once after next()
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$ValuesIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>();
      Set<Integer> set0 = dualHashBidiMap0.keySet();
      Integer integer0 = new Integer((-2114445436));
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      AbstractDualBidiMap.MapEntry<Integer, Integer> abstractDualBidiMap_MapEntry0 = new AbstractDualBidiMap.MapEntry<Integer, Integer>(abstractMap_SimpleEntry0, dualHashBidiMap0);
      abstractDualBidiMap_MapEntry0.setValue(integer0);
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Integer>(dualHashBidiMap0);
      assertEquals(1, dualHashBidiMap0.size());
      
      boolean boolean0 = abstractDualBidiMap_Values0.removeAll(set0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Integer integer0 = new Integer(1);
      DualHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualHashBidiMap0 = new DualHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      AbstractDualBidiMap.Values<AbstractMap.SimpleImmutableEntry<Integer, Integer>> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<AbstractMap.SimpleImmutableEntry<Integer, Integer>>(dualHashBidiMap0);
      boolean boolean0 = abstractDualBidiMap_Values0.remove(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      dualLinkedHashBidiMap0.put(integer0, integer0);
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Integer>(dualLinkedHashBidiMap0);
      boolean boolean0 = abstractDualBidiMap_Values0.contains(integer0);
      assertEquals(1, dualLinkedHashBidiMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DualTreeBidiMap<Object, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Object, Integer>();
      DualHashBidiMap<Object, Integer> dualHashBidiMap0 = new DualHashBidiMap<Object, Integer>(dualTreeBidiMap0);
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Integer>(dualHashBidiMap0);
      boolean boolean0 = abstractDualBidiMap_Values0.contains(dualHashBidiMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Iterator<Integer> iterator0 = linkedHashSet0.iterator();
      AbstractDualBidiMap.KeySetIterator<Integer> abstractDualBidiMap_KeySetIterator0 = new AbstractDualBidiMap.KeySetIterator<Integer>(iterator0, dualHashBidiMap0);
      // Undeclared exception!
      try { 
        abstractDualBidiMap_KeySetIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator remove() can only be called once after next()
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$KeySetIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Iterator<Integer> iterator0 = linkedHashSet0.iterator();
      AbstractDualBidiMap.KeySetIterator<Integer> abstractDualBidiMap_KeySetIterator0 = new AbstractDualBidiMap.KeySetIterator<Integer>(iterator0, dualHashBidiMap0);
      abstractDualBidiMap_KeySetIterator0.canRemove = true;
      // Undeclared exception!
      try { 
        abstractDualBidiMap_KeySetIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedHashMap$LinkedHashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      AbstractDualBidiMap.KeySet<Integer> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<Integer>(dualTreeBidiMap0);
      dualTreeBidiMap0.put(integer0, integer0);
      assertFalse(dualTreeBidiMap0.isEmpty());
      
      Integer integer1 = new Integer(0);
      boolean boolean0 = abstractDualBidiMap_KeySet0.remove(integer1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      AbstractDualBidiMap.KeySet<Integer> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<Integer>(dualTreeBidiMap0);
      boolean boolean0 = abstractDualBidiMap_KeySet0.remove(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>(dualLinkedHashBidiMap0);
      AbstractDualBidiMap.KeySet<Integer> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<Integer>(dualTreeBidiMap0);
      dualTreeBidiMap0.put(integer0, integer0);
      boolean boolean0 = abstractDualBidiMap_KeySet0.contains(integer0);
      assertFalse(dualTreeBidiMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      AbstractDualBidiMap.KeySet<AbstractMap.SimpleImmutableEntry<Integer, Integer>> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<AbstractMap.SimpleImmutableEntry<Integer, Integer>>(dualTreeBidiMap0);
      boolean boolean0 = abstractDualBidiMap_KeySet0.retainAll((Collection<?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>();
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(dualHashBidiMap0);
      Integer integer0 = new Integer(734);
      treeBidiMap0.put(integer0, integer0);
      BidiMap<Integer, Integer> bidiMap0 = UnmodifiableBidiMap.unmodifiableBidiMap((BidiMap<? extends Integer, ? extends Integer>) treeBidiMap0);
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>(bidiMap0);
      AbstractDualBidiMap.EntrySet<Integer, Integer> abstractDualBidiMap_EntrySet0 = new AbstractDualBidiMap.EntrySet<Integer, Integer>(dualLinkedHashBidiMap0);
      Set<Integer> set0 = dualHashBidiMap0.keySet();
      assertNotNull(set0);
      
      boolean boolean0 = abstractDualBidiMap_EntrySet0.removeAll(set0);
      assertFalse(boolean0);
      assertFalse(dualLinkedHashBidiMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      AbstractDualBidiMap.KeySet<AbstractMap.SimpleImmutableEntry<Integer, Integer>> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<AbstractMap.SimpleImmutableEntry<Integer, Integer>>(dualTreeBidiMap0);
      assertTrue(dualTreeBidiMap0.isEmpty());
      
      boolean boolean0 = abstractDualBidiMap_KeySet0.removeAll((Collection<?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      dualLinkedHashBidiMap0.put(integer0, integer0);
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Integer>(dualLinkedHashBidiMap0);
      assertEquals(1, dualLinkedHashBidiMap0.size());
      
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) integer0);
      boolean boolean0 = abstractDualBidiMap_Values0.removeIf(predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DualLinkedHashBidiMap<Comparable<Object>, Object> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Comparable<Object>, Object>();
      DualTreeBidiMap<Integer, Object> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Object>();
      Set<Object> set0 = dualTreeBidiMap0.values();
      dualLinkedHashBidiMap0.values = set0;
      Set<Object> set1 = dualLinkedHashBidiMap0.values();
      assertSame(set1, set0);
      assertNotNull(set1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>();
      Set<Integer> set0 = dualHashBidiMap0.keySet();
      Set<Integer> set1 = dualHashBidiMap0.keySet();
      assertSame(set1, set0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      OrderedBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> orderedBidiMap0 = dualTreeBidiMap0.inverseOrderedBidiMap();
      DualTreeBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualTreeBidiMap1 = new DualTreeBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(orderedBidiMap0);
      DualHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualHashBidiMap0 = new DualHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(dualTreeBidiMap1, dualTreeBidiMap0, dualTreeBidiMap0);
      BidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> bidiMap0 = dualHashBidiMap0.inverseBidiMap();
      assertEquals(0, bidiMap0.size());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(1);
      Object object0 = dualTreeBidiMap0.removeValue(integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<AbstractMap.SimpleImmutableEntry<Integer, Integer>> comparator1 = (Comparator<AbstractMap.SimpleImmutableEntry<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(comparator0, comparator1);
      Integer integer0 = new Integer(1);
      DualLinkedHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(dualTreeBidiMap0);
      dualLinkedHashBidiMap0.put(integer0, (AbstractMap.SimpleImmutableEntry<Integer, Integer>) null);
      boolean boolean0 = dualLinkedHashBidiMap0.containsValue((Object) null);
      assertFalse(dualLinkedHashBidiMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DualLinkedHashBidiMap<AbstractDualBidiMap.ValuesIterator<Integer>, AbstractMap.SimpleImmutableEntry<Object, Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<AbstractDualBidiMap.ValuesIterator<Integer>, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      DualLinkedHashBidiMap<Comparable<Object>, Comparable<Object>> dualLinkedHashBidiMap1 = new DualLinkedHashBidiMap<Comparable<Object>, Comparable<Object>>();
      boolean boolean0 = dualLinkedHashBidiMap1.containsValue(dualLinkedHashBidiMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>();
      Integer integer0 = new Integer((-2147483645));
      dualTreeBidiMap0.put(integer0, integer0);
      assertEquals(1, dualTreeBidiMap0.size());
      
      dualTreeBidiMap0.remove((Object) integer0);
      assertTrue(dualTreeBidiMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>();
      Integer integer0 = new Integer((-2147483645));
      Integer integer1 = dualTreeBidiMap0.remove((Object) integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-138), 2147483645, (-138)).when(comparator0).compare(anyInt() , anyInt());
      Comparator<AbstractMap.SimpleImmutableEntry<Integer, Integer>> comparator1 = (Comparator<AbstractMap.SimpleImmutableEntry<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-659), 0, 0).when(comparator1).compare(any(java.util.AbstractMap.SimpleImmutableEntry.class) , any(java.util.AbstractMap.SimpleImmutableEntry.class));
      DualTreeBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(comparator0, comparator1);
      Integer integer0 = new Integer((-567));
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) null, integer0);
      dualTreeBidiMap0.put((Integer) null, abstractMap_SimpleImmutableEntry0);
      dualTreeBidiMap0.put(integer0, abstractMap_SimpleImmutableEntry0);
      assertFalse(dualTreeBidiMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(1592);
      dualLinkedHashBidiMap0.put(integer0, integer0);
      boolean boolean0 = dualLinkedHashBidiMap0.containsKey(integer0);
      assertEquals(1, dualLinkedHashBidiMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>();
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Integer>(dualHashBidiMap0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = abstractDualBidiMap_Values0.removeIf(predicate0);
      assertTrue(dualHashBidiMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DualHashBidiMap<AbstractDualBidiMap.Values<Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualHashBidiMap0 = new DualHashBidiMap<AbstractDualBidiMap.Values<Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      AbstractDualBidiMap.BidiMapIterator<AbstractDualBidiMap.Values<Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<AbstractDualBidiMap.Values<Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(dualHashBidiMap0);
      abstractDualBidiMap_BidiMapIterator0.reset();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DualHashBidiMap<AbstractDualBidiMap.Values<Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualHashBidiMap0 = new DualHashBidiMap<AbstractDualBidiMap.Values<Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      AbstractDualBidiMap.BidiMapIterator<AbstractDualBidiMap.Values<Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<AbstractDualBidiMap.Values<Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(dualHashBidiMap0);
      boolean boolean0 = abstractDualBidiMap_BidiMapIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>();
      DualLinkedHashBidiMap<AbstractDualBidiMap.Values<Integer>, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<AbstractDualBidiMap.Values<Integer>, Integer>();
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Integer>(dualHashBidiMap0);
      dualLinkedHashBidiMap0.put(abstractDualBidiMap_Values0, (Integer) null);
      AbstractDualBidiMap.KeySet<AbstractDualBidiMap.Values<Integer>> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<AbstractDualBidiMap.Values<Integer>>(dualLinkedHashBidiMap0);
      boolean boolean0 = abstractDualBidiMap_KeySet0.contains((Object) null);
      assertFalse(dualLinkedHashBidiMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Integer>(dualLinkedHashBidiMap0);
      abstractDualBidiMap_Values0.clear();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DualLinkedHashBidiMap<Comparable<Object>, Comparable<Object>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Comparable<Object>, Comparable<Object>>();
      MapIterator<Comparable<Object>, Comparable<Object>> mapIterator0 = dualLinkedHashBidiMap0.mapIterator();
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DualLinkedHashBidiMap<AbstractDualBidiMap.ValuesIterator<Integer>, AbstractMap.SimpleImmutableEntry<Object, Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<AbstractDualBidiMap.ValuesIterator<Integer>, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      DualLinkedHashBidiMap<Comparable<Object>, Comparable<Object>> dualLinkedHashBidiMap1 = new DualLinkedHashBidiMap<Comparable<Object>, Comparable<Object>>();
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap2 = new DualLinkedHashBidiMap<Integer, Integer>();
      boolean boolean0 = dualLinkedHashBidiMap1.remove((Object) dualLinkedHashBidiMap2, (Object) dualLinkedHashBidiMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DualHashBidiMap<AbstractDualBidiMap.Values<Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualHashBidiMap0 = new DualHashBidiMap<AbstractDualBidiMap.Values<Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      dualLinkedHashBidiMap0.put(integer0, integer0);
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Integer>(dualLinkedHashBidiMap0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) dualHashBidiMap0);
      boolean boolean0 = abstractDualBidiMap_Values0.removeIf(predicate0);
      assertEquals(1, dualLinkedHashBidiMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DualHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualHashBidiMap0 = new DualHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      dualHashBidiMap0.clear();
      assertEquals(0, dualHashBidiMap0.size());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      int int0 = dualLinkedHashBidiMap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(1928);
      Integer integer1 = dualLinkedHashBidiMap0.getKey(integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>();
      String string0 = dualTreeBidiMap0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      Integer integer1 = dualTreeBidiMap0.get(integer0);
      assertNull(integer1);
  }
}
