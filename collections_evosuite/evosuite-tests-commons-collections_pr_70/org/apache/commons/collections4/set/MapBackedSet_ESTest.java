/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 20:15:05 GMT 2025
 */

package org.apache.commons.collections4.set;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.Predicate;
import org.apache.commons.collections4.set.MapBackedSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class MapBackedSet_ESTest extends MapBackedSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      MapBackedSet<Integer, Integer> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Integer, ? super Integer>) hashMap0);
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = mapBackedSet0.toArray(integerArray0);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      MapBackedSet<Integer, Integer> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Integer, ? super Integer>) hashMap0);
      Integer integer0 = new Integer(446);
      mapBackedSet0.add(integer0);
      Object[] objectArray0 = mapBackedSet0.toArray();
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(2726);
      MapBackedSet<Integer, Integer> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Integer, ? super Integer>) hashMap0, integer0);
      hashMap0.put(integer0, integer0);
      int int0 = mapBackedSet0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      MapBackedSet<Integer, Integer> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Integer, ? super Integer>) hashMap0);
      Integer integer0 = new Integer(446);
      boolean boolean0 = mapBackedSet0.add(integer0);
      assertTrue(boolean0);
      
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) integer0);
      boolean boolean1 = mapBackedSet0.removeIf(predicate0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-2039));
      MapBackedSet<Integer, Integer> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Integer, ? super Integer>) hashMap0, integer0);
      hashMap0.put(integer0, integer0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = mapBackedSet0.removeAll(linkedList0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      MapBackedSet<Integer, Integer> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Integer, ? super Integer>) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1));
      linkedList0.add(integer0);
      mapBackedSet0.addAll(linkedList0);
      MapBackedSet<Integer, Integer> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<Integer, ? super Integer>) hashMap0);
      assertEquals(1, mapBackedSet1.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(2726);
      MapBackedSet<Integer, Integer> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Integer, ? super Integer>) hashMap0, integer0);
      boolean boolean0 = mapBackedSet0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<MapBackedSet<Object, Object>, Object> hashMap0 = new HashMap<MapBackedSet<Object, Object>, Object>();
      MapBackedSet<MapBackedSet<Object, Object>, LinkedList<Object>> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<MapBackedSet<Object, Object>, ? super LinkedList<Object>>) hashMap0);
      // Undeclared exception!
      try { 
        mapBackedSet0.toArray((LinkedList<Object>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<LinkedList<Integer>, HashMap<Integer, Integer>> hashMap0 = new HashMap<LinkedList<Integer>, HashMap<Integer, Integer>>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      hashMap0.put(linkedList0, hashMap1);
      MapBackedSet<LinkedList<Integer>, HashMap<Integer, Integer>> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<LinkedList<Integer>, ? super HashMap<Integer, Integer>>) hashMap0, hashMap1);
      MapBackedSet<LinkedList<Integer>, HashMap<Integer, Integer>>[] mapBackedSetArray0 = (MapBackedSet<LinkedList<Integer>, HashMap<Integer, Integer>>[]) Array.newInstance(MapBackedSet.class, 0);
      // Undeclared exception!
      try { 
        mapBackedSet0.toArray(mapBackedSetArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      MapBackedSet<Integer, Integer> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Integer, ? super Integer>) hashMap0);
      // Undeclared exception!
      try { 
        mapBackedSet0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      MapBackedSet<Integer, Integer> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Integer, ? super Integer>) hashMap0);
      // Undeclared exception!
      try { 
        mapBackedSet0.removeIf((Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      MapBackedSet<Integer, Integer> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Integer, ? super Integer>) hashMap0);
      // Undeclared exception!
      try { 
        mapBackedSet0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      MapBackedSet<Object, Integer> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super Integer>) hashMap0);
      mapBackedSet0.add(hashMap0);
      HashMap<LinkedList<Integer>, LinkedList<Integer>> hashMap1 = new HashMap<LinkedList<Integer>, LinkedList<Integer>>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      MapBackedSet<LinkedList<Integer>, LinkedList<Integer>> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<LinkedList<Integer>, ? super LinkedList<Integer>>) hashMap1, linkedList0);
      // Undeclared exception!
      try { 
        mapBackedSet1.remove(hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapBackedSet.mapBackedSet((Map<Object, ? super Object>) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The map must not be null
         //
         verifyException("org.apache.commons.collections4.set.MapBackedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      MapBackedSet<Object, Integer> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super Integer>) hashMap0);
      mapBackedSet0.add(hashMap0);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      MapBackedSet<Integer, Integer> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<Integer, ? super Integer>) hashMap1);
      // Undeclared exception!
      try { 
        mapBackedSet1.containsAll(mapBackedSet0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      MapBackedSet<Integer, Integer> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Integer, ? super Integer>) hashMap0);
      // Undeclared exception!
      try { 
        mapBackedSet0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MapBackedSet<Object, Integer> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super Integer>) hashMap0);
      mapBackedSet0.add(hashMap0);
      // Undeclared exception!
      try { 
        mapBackedSet0.addAll(mapBackedSet0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      MapBackedSet<Integer, Integer> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Integer, ? super Integer>) hashMap0);
      // Undeclared exception!
      try { 
        mapBackedSet0.addAll((Collection<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.MapBackedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MapBackedSet<Object, Integer> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super Integer>) hashMap0);
      mapBackedSet0.add(hashMap0);
      // Undeclared exception!
      try { 
        mapBackedSet0.add(hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      MapBackedSet<Integer, Integer> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Integer, ? super Integer>) hashMap0);
      hashMap0.put((Integer) null, (Integer) null);
      boolean boolean0 = mapBackedSet0.contains((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      MapBackedSet<Integer, Integer> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Integer, ? super Integer>) hashMap0);
      boolean boolean0 = mapBackedSet0.contains(hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      MapBackedSet<Integer, Integer> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Integer, ? super Integer>) hashMap0);
      mapBackedSet0.hashCode();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      MapBackedSet<Integer, Integer> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Integer, ? super Integer>) hashMap0);
      Iterator<Integer> iterator0 = mapBackedSet0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MapBackedSet<Object, Object> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super Object>) hashMap0, (Object) hashMap0);
      int int0 = mapBackedSet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-1));
      MapBackedSet<Integer, Integer> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Integer, ? super Integer>) hashMap0, integer0);
      boolean boolean0 = mapBackedSet0.add(integer0);
      boolean boolean1 = mapBackedSet0.remove(integer0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      MapBackedSet<Integer, Integer> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Integer, ? super Integer>) hashMap0, integer0);
      Object object0 = new Object();
      boolean boolean0 = mapBackedSet0.remove(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MapBackedSet<Object, Integer> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super Integer>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = mapBackedSet0.addAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      MapBackedSet<Integer, Integer> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Integer, ? super Integer>) hashMap0, integer0);
      hashMap0.put(integer0, integer0);
      boolean boolean0 = mapBackedSet0.add(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      MapBackedSet<Integer, Integer> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Integer, ? super Integer>) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1);
      linkedList0.add(integer0);
      boolean boolean0 = mapBackedSet0.containsAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-1));
      MapBackedSet<Integer, Integer> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Integer, ? super Integer>) hashMap0, integer0);
      mapBackedSet0.add(integer0);
      boolean boolean0 = mapBackedSet0.retainAll(mapBackedSet0);
      assertFalse(mapBackedSet0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(2726);
      MapBackedSet<Integer, Integer> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Integer, ? super Integer>) hashMap0, integer0);
      hashMap0.put(integer0, integer0);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>((int) integer0, 3341.548F);
      MapBackedSet<Integer, Integer> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<Integer, ? super Integer>) hashMap1, integer0);
      boolean boolean0 = mapBackedSet0.retainAll(mapBackedSet1);
      assertTrue(hashMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-1));
      MapBackedSet<Integer, Integer> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Integer, ? super Integer>) hashMap0, integer0);
      boolean boolean0 = mapBackedSet0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      MapBackedSet<Object, Integer> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super Integer>) hashMap0);
      assertTrue(mapBackedSet0.isEmpty());
      
      mapBackedSet0.add(hashMap0);
      boolean boolean0 = mapBackedSet0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapBackedSet.mapBackedSet((Map<Integer, ? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The map must not be null
         //
         verifyException("org.apache.commons.collections4.set.MapBackedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-2039));
      MapBackedSet<Integer, Integer> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Integer, ? super Integer>) hashMap0, integer0);
      Object[] objectArray0 = mapBackedSet0.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      MapBackedSet<Integer, Integer> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Integer, ? super Integer>) hashMap0);
      mapBackedSet0.clear();
      assertEquals(0, mapBackedSet0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      MapBackedSet<Integer, Integer> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Integer, ? super Integer>) hashMap0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) hashMap0);
      boolean boolean0 = mapBackedSet0.removeIf(predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MapBackedSet<Object, HashMap<Object, Object>> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super HashMap<Object, Object>>) hashMap0, hashMap0);
      MapBackedSet<Object, Object> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<Object, ? super Object>) hashMap0);
      boolean boolean0 = mapBackedSet1.equals(mapBackedSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-1));
      MapBackedSet<Integer, Integer> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Integer, ? super Integer>) hashMap0, integer0);
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = mapBackedSet0.toArray(integerArray0);
      assertSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-1));
      MapBackedSet<Integer, Integer> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Integer, ? super Integer>) hashMap0, integer0);
      boolean boolean0 = mapBackedSet0.containsAll(mapBackedSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-2039));
      MapBackedSet<Integer, Integer> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Integer, ? super Integer>) hashMap0, integer0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      boolean boolean0 = mapBackedSet0.removeAll(linkedList0);
      assertFalse(boolean0);
  }
}
