/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 20:10:41 GMT 2025
 */

package org.apache.commons.collections4.set;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.function.Predicate;
import org.apache.commons.collections4.set.CompositeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CompositeSet_ESTest extends CompositeSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(linkedHashSet0);
      boolean boolean0 = linkedHashSet0.add(compositeSet0);
      assertTrue(boolean0);
      
      LinkedHashSet<Object> linkedHashSet1 = new LinkedHashSet<Object>();
      linkedHashSet1.add(linkedHashSet0);
      linkedHashSet1.add(compositeSet0);
      // Undeclared exception!
      try { 
        compositeSet0.addComposited((Set<Object>) linkedHashSet1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Collision adding composited set with no SetMutator set
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(linkedHashSet0);
      Set<LinkedHashSet<Integer>>[] setArray0 = (Set<LinkedHashSet<Integer>>[]) Array.newInstance(Set.class, 7);
      LinkedHashSet<LinkedHashSet<Integer>> linkedHashSet1 = new LinkedHashSet<LinkedHashSet<Integer>>();
      setArray0[0] = (Set<LinkedHashSet<Integer>>) linkedHashSet1;
      CompositeSet<LinkedHashSet<Integer>> compositeSet1 = new CompositeSet<LinkedHashSet<Integer>>(linkedHashSet1);
      setArray0[1] = (Set<LinkedHashSet<Integer>>) compositeSet1;
      CompositeSet<LinkedHashSet<Integer>> compositeSet2 = new CompositeSet<LinkedHashSet<Integer>>(setArray0);
      CompositeSet<LinkedHashSet<Integer>> compositeSet3 = new CompositeSet<LinkedHashSet<Integer>>(compositeSet2);
      setArray0[2] = (Set<LinkedHashSet<Integer>>) compositeSet3;
      CompositeSet<LinkedHashSet<Integer>> compositeSet4 = new CompositeSet<LinkedHashSet<Integer>>(setArray0);
      CompositeSet<LinkedHashSet<Integer>> compositeSet5 = new CompositeSet<LinkedHashSet<Integer>>(compositeSet2);
      setArray0[4] = (Set<LinkedHashSet<Integer>>) compositeSet5;
      CompositeSet<LinkedHashSet<Integer>> compositeSet6 = new CompositeSet<LinkedHashSet<Integer>>(compositeSet4);
      CompositeSet<LinkedHashSet<Integer>> compositeSet7 = new CompositeSet<LinkedHashSet<Integer>>();
      setArray0[6] = (Set<LinkedHashSet<Integer>>) compositeSet7;
      CompositeSet<LinkedHashSet<Integer>> compositeSet8 = new CompositeSet<LinkedHashSet<Integer>>(setArray0);
      // Undeclared exception!
      try { 
        compositeSet8.retainAll(setArray0[3]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Set<Integer>[] setArray0 = (Set<Integer>[]) Array.newInstance(Set.class, 9);
      Set<Integer>[] setArray1 = (Set<Integer>[]) Array.newInstance(Set.class, 9);
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      setArray1[0] = (Set<Integer>) linkedHashSet1;
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(setArray1[0]);
      setArray1[1] = (Set<Integer>) compositeSet0;
      LinkedHashSet<Integer> linkedHashSet2 = new LinkedHashSet<Integer>();
      setArray1[2] = (Set<Integer>) linkedHashSet2;
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>();
      setArray1[3] = (Set<Integer>) compositeSet1;
      CompositeSet<Integer> compositeSet2 = new CompositeSet<Integer>(compositeSet0);
      setArray1[4] = (Set<Integer>) compositeSet2;
      CompositeSet<Integer> compositeSet3 = new CompositeSet<Integer>(setArray1);
      setArray1[5] = (Set<Integer>) compositeSet3;
      CompositeSet<Integer> compositeSet4 = new CompositeSet<Integer>();
      setArray1[6] = (Set<Integer>) compositeSet4;
      CompositeSet<Integer> compositeSet5 = new CompositeSet<Integer>();
      setArray1[7] = (Set<Integer>) compositeSet5;
      CompositeSet<Integer> compositeSet6 = new CompositeSet<Integer>(setArray1[5]);
      setArray1[8] = (Set<Integer>) compositeSet6;
      CompositeSet<Integer> compositeSet7 = new CompositeSet<Integer>(setArray1);
      setArray0[0] = (Set<Integer>) compositeSet7;
      CompositeSet<Integer> compositeSet8 = new CompositeSet<Integer>(setArray1);
      setArray0[1] = (Set<Integer>) compositeSet8;
      CompositeSet<Integer> compositeSet9 = new CompositeSet<Integer>(setArray1);
      setArray0[2] = (Set<Integer>) compositeSet9;
      CompositeSet<Integer> compositeSet10 = new CompositeSet<Integer>(setArray0);
      setArray0[3] = (Set<Integer>) compositeSet10;
      CompositeSet<Integer> compositeSet11 = new CompositeSet<Integer>(compositeSet6);
      setArray0[4] = (Set<Integer>) compositeSet11;
      CompositeSet<Integer> compositeSet12 = new CompositeSet<Integer>();
      setArray0[5] = (Set<Integer>) compositeSet12;
      CompositeSet<Integer> compositeSet13 = new CompositeSet<Integer>(setArray1);
      setArray0[6] = (Set<Integer>) compositeSet13;
      setArray0[7] = (Set<Integer>) compositeSet9;
      CompositeSet<Integer> compositeSet14 = new CompositeSet<Integer>();
      setArray0[8] = (Set<Integer>) compositeSet14;
      CompositeSet<Integer> compositeSet15 = new CompositeSet<Integer>(setArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Set<Object>[] setArray0 = (Set<Object>[]) Array.newInstance(Set.class, 4);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      setArray0[0] = (Set<Object>) linkedHashSet0;
      linkedHashSet0.add(setArray0[0]);
      LinkedHashSet<Object> linkedHashSet1 = new LinkedHashSet<Object>();
      setArray0[1] = (Set<Object>) linkedHashSet1;
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(linkedHashSet1);
      CompositeSet<Object> compositeSet1 = new CompositeSet<Object>(compositeSet0);
      setArray0[2] = (Set<Object>) compositeSet1;
      CompositeSet<Object> compositeSet2 = new CompositeSet<Object>();
      setArray0[3] = (Set<Object>) compositeSet2;
      CompositeSet<Object> compositeSet3 = null;
      try {
        compositeSet3 = new CompositeSet<Object>(setArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer((-2198));
      linkedHashSet0.clone();
      linkedHashSet0.add(integer0);
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>();
      compositeSet0.removeAll(linkedHashSet0);
      compositeSet0.toSet();
      linkedHashSet0.add(integer0);
      LinkedHashSet<Object> linkedHashSet1 = new LinkedHashSet<Object>();
      Object object0 = new Object();
      Integer integer1 = new Integer((-2198));
      CompositeSet.SetMutator<Integer> compositeSet_SetMutator0 = (CompositeSet.SetMutator<Integer>) mock(CompositeSet.SetMutator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(compositeSet_SetMutator0).add(any(org.apache.commons.collections4.set.CompositeSet.class) , anyList() , anyInt());
      compositeSet0.setMutator(compositeSet_SetMutator0);
      Integer integer2 = new Integer((-3));
      compositeSet0.add(integer2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(linkedHashSet0);
      linkedHashSet0.add(compositeSet0);
      CompositeSet<Object> compositeSet1 = new CompositeSet<Object>(linkedHashSet0);
      linkedHashSet0.add(compositeSet1);
      compositeSet0.equals(linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(linkedHashSet0);
      compositeSet0.removeComposited(linkedHashSet0);
      linkedHashSet0.iterator();
      compositeSet0.containsAll(linkedHashSet0);
      Set<Object>[] setArray0 = (Set<Object>[]) Array.newInstance(Set.class, 9);
      CompositeSet<Object> compositeSet1 = new CompositeSet<Object>();
      Set<Object> set0 = compositeSet1.toSet();
      setArray0[0] = set0;
      CompositeSet<Object> compositeSet2 = new CompositeSet<Object>(setArray0);
      setArray0[1] = (Set<Object>) compositeSet2;
      CompositeSet<Object> compositeSet3 = new CompositeSet<Object>(compositeSet1);
      setArray0[2] = (Set<Object>) compositeSet3;
      Set<Object> set1 = compositeSet1.toSet();
      setArray0[3] = set1;
      Set<Object> set2 = compositeSet2.toSet();
      setArray0[4] = set2;
      CompositeSet<Object> compositeSet4 = new CompositeSet<Object>();
      setArray0[5] = (Set<Object>) compositeSet4;
      CompositeSet<Object> compositeSet5 = new CompositeSet<Object>(compositeSet1);
      setArray0[6] = (Set<Object>) compositeSet5;
      Set<Object> set3 = compositeSet2.toSet();
      setArray0[7] = set3;
      LinkedHashSet<Object> linkedHashSet1 = new LinkedHashSet<Object>();
      setArray0[8] = (Set<Object>) linkedHashSet1;
      CompositeSet<Object> compositeSet6 = new CompositeSet<Object>(setArray0);
      compositeSet6.addComposited(setArray0[8]);
      compositeSet6.toSet();
      // Undeclared exception!
      compositeSet5.addComposited(setArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(linkedHashSet0);
      linkedHashSet0.add(compositeSet0);
      CompositeSet<Object> compositeSet1 = new CompositeSet<Object>(compositeSet0);
      compositeSet1.remove(compositeSet0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Set<Object>[] setArray0 = (Set<Object>[]) Array.newInstance(Set.class, 2);
      setArray0[0] = (Set<Object>) linkedHashSet0;
      setArray0[1] = (Set<Object>) linkedHashSet0;
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(setArray0);
      linkedHashSet0.add(compositeSet0);
      Predicate.isEqual((Object) setArray0[0]);
      compositeSet0.removeAll(setArray0[0]);
      CompositeSet<Object> compositeSet1 = new CompositeSet<Object>(setArray0[0]);
      compositeSet0.removeAll(compositeSet1);
      // Undeclared exception!
      try { 
        compositeSet0.addComposited((Set<Object>) compositeSet1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Collision adding composited set with no SetMutator set
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(linkedHashSet0);
      linkedHashSet0.add(compositeSet0);
      Object[] objectArray0 = compositeSet0.toArray();
      assertEquals(1, objectArray0.length);
      
      Predicate.isEqual((Object) compositeSet0);
      compositeSet0.isEmpty();
      compositeSet0.removeAll(linkedHashSet0);
      CompositeSet<Object> compositeSet1 = new CompositeSet<Object>();
      linkedHashSet0.add(compositeSet1);
      compositeSet0.removeAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        compositeSet0.addComposited((Set<Object>) linkedHashSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Collision adding composited set with no SetMutator set
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(linkedHashSet0);
      linkedHashSet0.add(compositeSet0);
      Predicate.isEqual((Object) compositeSet0);
      LinkedHashSet<Object>[] linkedHashSetArray0 = (LinkedHashSet<Object>[]) Array.newInstance(LinkedHashSet.class, 9);
      linkedHashSetArray0[0] = linkedHashSet0;
      linkedHashSetArray0[1] = linkedHashSet0;
      linkedHashSetArray0[2] = linkedHashSet0;
      linkedHashSetArray0[3] = linkedHashSet0;
      linkedHashSetArray0[4] = linkedHashSet0;
      linkedHashSetArray0[5] = linkedHashSet0;
      linkedHashSetArray0[6] = linkedHashSet0;
      linkedHashSetArray0[7] = linkedHashSet0;
      linkedHashSetArray0[8] = linkedHashSet0;
      // Undeclared exception!
      try { 
        compositeSet0.toArray(linkedHashSetArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // org.apache.commons.collections4.set.CompositeSet
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>();
      compositeSet0.toSet();
      compositeSet0.stream();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>(linkedHashSet0);
      compositeSet0.isEmpty();
      Integer integer0 = new Integer(18);
      linkedHashSet0.add(integer0);
      compositeSet1.removeComposited(compositeSet0);
      compositeSet0.addComposited((Set<Integer>) compositeSet1);
      compositeSet0.iterator();
      compositeSet0.containsAll(linkedHashSet0);
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      compositeSet0.toArray(integerArray0);
      assertTrue(compositeSet0.contains(18));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer((-2198));
      linkedHashSet0.clone();
      linkedHashSet0.add(integer0);
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>();
      boolean boolean0 = compositeSet0.removeAll(linkedHashSet0);
      assertFalse(boolean0);
      
      compositeSet0.toSet();
      linkedHashSet0.add(integer0);
      LinkedHashSet<Object> linkedHashSet1 = new LinkedHashSet<Object>();
      Object object0 = new Object();
      Integer integer1 = new Integer((-2198));
      CompositeSet.SetMutator<Integer> compositeSet_SetMutator0 = (CompositeSet.SetMutator<Integer>) mock(CompositeSet.SetMutator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(compositeSet_SetMutator0).add(any(org.apache.commons.collections4.set.CompositeSet.class) , anyList() , anyInt());
      compositeSet0.setMutator(compositeSet_SetMutator0);
      Integer integer2 = new Integer((-3));
      boolean boolean1 = compositeSet0.add(integer2);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(linkedHashSet0);
      CompositeSet<Object> compositeSet1 = new CompositeSet<Object>(compositeSet0);
      linkedHashSet0.add(compositeSet1);
      compositeSet0.toArray();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) compositeSet1);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) linkedHashSet0);
      predicate1.test(predicate0);
      compositeSet0.removeIf(predicate1);
      boolean boolean0 = compositeSet0.removeAll(compositeSet1);
      //  // Unstable assertion: assertEquals(1, linkedHashSet0.size());
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(linkedHashSet0);
      linkedHashSet0.add(compositeSet0);
      Object object0 = new Object();
      compositeSet0.remove(linkedHashSet0);
      Object object1 = new Object();
      compositeSet0.contains(object1);
      // Undeclared exception!
      try { 
        compositeSet0.add(object1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is not supported on CompositeSet without a SetMutator strategy
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(linkedHashSet0);
      linkedHashSet0.add(compositeSet0);
      Predicate.isEqual((Object) compositeSet0);
      CompositeSet<LinkedHashSet<Integer>> compositeSet1 = new CompositeSet<LinkedHashSet<Integer>>();
      boolean boolean0 = compositeSet1.equals(compositeSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Set<Integer>[] setArray0 = (Set<Integer>[]) Array.newInstance(Set.class, 1);
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(setArray0);
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>(compositeSet0);
      Set<LinkedHashSet<Integer>>[] setArray1 = (Set<LinkedHashSet<Integer>>[]) Array.newInstance(Set.class, 1);
      CompositeSet<LinkedHashSet<Integer>> compositeSet2 = new CompositeSet<LinkedHashSet<Integer>>();
      setArray1[0] = (Set<LinkedHashSet<Integer>>) compositeSet2;
      Integer integer0 = new Integer(34);
      Integer integer1 = new Integer((-408));
      Integer integer2 = new Integer(0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add(integer1);
      Integer integer3 = new Integer(1723);
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer1;
      Integer integer4 = new Integer((-408));
      integerArray0[1] = integer4;
      integerArray0[2] = integer2;
      linkedHashSet0.toArray(integerArray0);
      compositeSet1.hashCode();
      CompositeSet<Integer> compositeSet3 = new CompositeSet<Integer>(linkedHashSet0);
      compositeSet1.removeComposited(compositeSet3);
      compositeSet1.retainAll(linkedHashSet0);
      CompositeSet<Integer> compositeSet4 = new CompositeSet<Integer>(setArray0);
      compositeSet4.clear();
      Object object0 = new Object();
      compositeSet3.contains(object0);
      compositeSet1.addComposited((Set<Integer>) compositeSet4);
      Integer integer5 = new Integer((-1));
      Integer integer6 = new Integer((int) integer1);
      // Undeclared exception!
      try { 
        compositeSet4.add(integer6);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is not supported on CompositeSet without a SetMutator strategy
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer(1);
      linkedHashSet0.add(integer0);
      Integer integer1 = new Integer(674);
      linkedHashSet0.add(integer1);
      compositeSet0.removeComposited(linkedHashSet0);
      compositeSet0.addComposited((Set<Integer>) linkedHashSet0);
      compositeSet0.iterator();
      compositeSet0.containsAll(linkedHashSet0);
      Integer[] integerArray0 = new Integer[1];
      compositeSet0.toArray(integerArray0);
      compositeSet0.isEmpty();
      linkedHashSet0.retainAll(compositeSet0);
      Set<Integer>[] setArray0 = (Set<Integer>[]) Array.newInstance(Set.class, 8);
      setArray0[0] = (Set<Integer>) linkedHashSet0;
      setArray0[2] = (Set<Integer>) linkedHashSet0;
      setArray0[1] = (Set<Integer>) compositeSet0;
      setArray0[4] = (Set<Integer>) linkedHashSet0;
      setArray0[5] = (Set<Integer>) compositeSet0;
      setArray0[6] = (Set<Integer>) linkedHashSet0;
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>();
      compositeSet1.iterator();
      setArray0[7] = (Set<Integer>) compositeSet1;
      // Undeclared exception!
      try { 
        compositeSet0.addComposited(setArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Collision adding composited set with no SetMutator set
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(linkedHashSet0);
      Integer[] integerArray0 = new Integer[8];
      int int0 = 23;
      Integer integer0 = new Integer(23);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(23);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(23);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(2078);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(23);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-408));
      Integer integer7 = new Integer(int0);
      linkedHashSet0.add(integer7);
      integerArray0[6] = integer6;
      Integer integer8 = new Integer(int0);
      integerArray0[7] = integer8;
      linkedHashSet0.toArray(integerArray0);
      compositeSet0.hashCode();
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>(compositeSet0);
      compositeSet1.removeComposited(compositeSet0);
      compositeSet1.retainAll(linkedHashSet0);
      compositeSet0.clear();
      Object object0 = new Object();
      compositeSet1.contains(object0);
      compositeSet1.addComposited((Set<Integer>) linkedHashSet0);
      Integer integer9 = new Integer(int0);
      // Undeclared exception!
      try { 
        compositeSet1.add(integer9);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is not supported on CompositeSet without a SetMutator strategy
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Set<Integer>[] setArray0 = (Set<Integer>[]) Array.newInstance(Set.class, 2);
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      setArray0[0] = (Set<Integer>) linkedHashSet1;
      LinkedHashSet<Integer> linkedHashSet2 = new LinkedHashSet<Integer>();
      setArray0[1] = (Set<Integer>) linkedHashSet2;
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(setArray0);
      Integer integer0 = new Integer((-1));
      linkedHashSet2.add(integer0);
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>(compositeSet0);
      CompositeSet<LinkedHashSet<Integer>> compositeSet2 = new CompositeSet<LinkedHashSet<Integer>>();
      CompositeSet<Object> compositeSet3 = new CompositeSet<Object>();
      compositeSet1.contains(compositeSet3);
      LinkedHashSet<LinkedHashSet<Integer>> linkedHashSet3 = new LinkedHashSet<LinkedHashSet<Integer>>();
      CompositeSet<LinkedHashSet<Integer>> compositeSet4 = new CompositeSet<LinkedHashSet<Integer>>(linkedHashSet3);
      CompositeSet<LinkedHashSet<Integer>> compositeSet5 = new CompositeSet<LinkedHashSet<Integer>>(compositeSet2);
      compositeSet0.containsAll(compositeSet5);
      // Undeclared exception!
      try { 
        compositeSet0.addComposited(setArray0[1]);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Collision adding composited set with no SetMutator set
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CompositeSet<CompositeSet<Integer>> compositeSet0 = new CompositeSet<CompositeSet<Integer>>();
      CompositeSet<CompositeSet<Integer>> compositeSet1 = new CompositeSet<CompositeSet<Integer>>(compositeSet0);
      CompositeSet<CompositeSet<Integer>> compositeSet2 = new CompositeSet<CompositeSet<Integer>>(compositeSet1);
      CompositeSet<CompositeSet<Integer>> compositeSet3 = new CompositeSet<CompositeSet<Integer>>(compositeSet2);
      boolean boolean0 = compositeSet3.removeIf((Predicate<? super CompositeSet<Integer>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>();
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>(compositeSet0);
      CompositeSet<Integer> compositeSet2 = new CompositeSet<Integer>(compositeSet0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      compositeSet1.containsAll(compositeSet2);
      compositeSet0.toSet();
      compositeSet1.containsAll(linkedHashSet0);
      List<Set<Integer>> list0 = compositeSet0.getSets();
      Integer integer0 = new Integer(10);
      Integer integer1 = new Integer(10);
      linkedHashSet0.add(integer1);
      compositeSet1.addComposited((Set<Integer>) linkedHashSet0);
      CompositeSet<Integer> compositeSet3 = new CompositeSet<Integer>(compositeSet1);
      CompositeSet<Integer> compositeSet4 = new CompositeSet<Integer>();
      compositeSet4.clear();
      Set<Integer>[] setArray0 = (Set<Integer>[]) Array.newInstance(Set.class, 5);
      setArray0[0] = (Set<Integer>) compositeSet4;
      setArray0[2] = (Set<Integer>) compositeSet1;
      setArray0[3] = (Set<Integer>) compositeSet4;
      setArray0[4] = (Set<Integer>) compositeSet2;
      CompositeSet<Integer> compositeSet5 = new CompositeSet<Integer>(setArray0);
      compositeSet5.containsAll(list0);
      compositeSet5.retainAll(compositeSet2);
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      compositeSet0.remove(linkedHashSet1);
      Object object0 = new Object();
      compositeSet4.contains(integer1);
      LinkedHashSet<LinkedHashSet<Integer>> linkedHashSet2 = new LinkedHashSet<LinkedHashSet<Integer>>();
      CompositeSet<LinkedHashSet<Integer>> compositeSet6 = new CompositeSet<LinkedHashSet<Integer>>(linkedHashSet2);
      CompositeSet<LinkedHashSet<Integer>> compositeSet7 = new CompositeSet<LinkedHashSet<Integer>>(compositeSet6);
      boolean boolean0 = compositeSet2.containsAll(list0);
      assertTrue(compositeSet0.equals((Object)compositeSet3));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Object object0 = new Object();
      linkedHashSet0.add(object0);
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(linkedHashSet0);
      Object object1 = new Object();
      compositeSet0.remove(linkedHashSet0);
      Set<Object>[] setArray0 = (Set<Object>[]) Array.newInstance(Set.class, 3);
      linkedHashSet0.add(object1);
      setArray0[0] = (Set<Object>) compositeSet0;
      setArray0[1] = (Set<Object>) linkedHashSet0;
      setArray0[2] = (Set<Object>) compositeSet0;
      // Undeclared exception!
      try { 
        compositeSet0.addComposited(setArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Collision adding composited set with no SetMutator set
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer(1);
      linkedHashSet0.add(integer0);
      Integer integer1 = new Integer(674);
      linkedHashSet0.add(integer1);
      compositeSet0.removeComposited(linkedHashSet0);
      compositeSet0.addComposited((Set<Integer>) linkedHashSet0);
      compositeSet0.iterator();
      compositeSet0.containsAll(linkedHashSet0);
      Integer[] integerArray0 = new Integer[0];
      compositeSet0.toArray(integerArray0);
      assertTrue(compositeSet0.contains(674));
      
      compositeSet0.isEmpty();
      Set<Integer>[] setArray0 = (Set<Integer>[]) Array.newInstance(Set.class, 8);
      setArray0[0] = (Set<Integer>) linkedHashSet0;
      setArray0[1] = (Set<Integer>) compositeSet0;
      setArray0[2] = (Set<Integer>) linkedHashSet0;
      setArray0[3] = (Set<Integer>) compositeSet0;
      setArray0[4] = (Set<Integer>) linkedHashSet0;
      setArray0[5] = (Set<Integer>) compositeSet0;
      setArray0[6] = (Set<Integer>) linkedHashSet0;
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>();
      setArray0[7] = (Set<Integer>) compositeSet1;
      // Undeclared exception!
      try { 
        compositeSet0.addComposited(setArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Collision adding composited set with no SetMutator set
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(linkedHashSet0);
      linkedHashSet0.add(compositeSet0);
      Predicate.isEqual((Object) linkedHashSet0);
      CompositeSet<Object> compositeSet1 = new CompositeSet<Object>(compositeSet0);
      boolean boolean0 = compositeSet0.removeAll(compositeSet1);
      //  // Unstable assertion: assertFalse(linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>();
      Set<Integer> set0 = compositeSet0.toSet();
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>(set0);
      CompositeSet<Integer> compositeSet2 = new CompositeSet<Integer>(compositeSet1);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      compositeSet2.containsAll(linkedHashSet0);
      compositeSet1.toSet();
      boolean boolean0 = compositeSet2.containsAll(linkedHashSet0);
      assertTrue(boolean0);
      
      compositeSet2.getSets();
      Integer integer0 = new Integer((-1));
      linkedHashSet0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      Integer integer1 = new Integer((-1));
      linkedHashSet1.add(integer1);
      compositeSet1.removeComposited(linkedHashSet0);
      compositeSet0.addComposited((Set<Integer>) compositeSet2);
      compositeSet1.iterator();
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      boolean boolean1 = compositeSet2.removeIf(predicate0);
      boolean boolean2 = compositeSet1.containsAll(linkedHashSet1);
      assertTrue(boolean2 == boolean1);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = compositeSet2.toArray(integerArray0);
      assertSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>((Set<Integer>) null);
      compositeSet0.addComposited((Set<Integer>) null, (Set<Integer>) null);
      compositeSet0.clear();
      Object object0 = new Object();
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>();
      compositeSet1.remove(object0);
      Object object1 = new Object();
      boolean boolean0 = compositeSet1.equals(object1);
      assertFalse(boolean0);
      
      boolean boolean1 = compositeSet0.containsAll((Collection<?>) null);
      CompositeSet<LinkedHashSet<Integer>> compositeSet2 = new CompositeSet<LinkedHashSet<Integer>>((Set<LinkedHashSet<Integer>>) null);
      compositeSet2.toArray();
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      Integer[] integerArray1 = compositeSet2.toArray(integerArray0);
      CompositeSet<LinkedHashSet<Integer>> compositeSet3 = new CompositeSet<LinkedHashSet<Integer>>((Set<LinkedHashSet<Integer>>) null);
      Predicate<LinkedHashSet<Integer>> predicate0 = Predicate.isEqual(object0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      predicate0.negate();
      predicate0.test(linkedHashSet0);
      boolean boolean2 = compositeSet2.removeIf(predicate0);
      compositeSet3.getMutator();
      compositeSet0.getSets();
      boolean boolean3 = compositeSet1.isEmpty();
      assertFalse(boolean3 == boolean1);
      
      Integer integer1 = new Integer(int0);
      boolean boolean4 = compositeSet1.remove(integer1);
      assertTrue(boolean4 == boolean2);
      
      compositeSet3.toArray(integerArray1);
      assertEquals(6, integerArray1.length);
      
      Object[] objectArray0 = compositeSet0.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Set<Integer>[] setArray0 = (Set<Integer>[]) Array.newInstance(Set.class, 2);
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(setArray0);
      boolean boolean0 = compositeSet0.containsAll((Collection<?>) null);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(compositeSet0);
      boolean boolean1 = compositeSet0.containsAll(linkedHashSet0);
      assertFalse(boolean1 == boolean0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = compositeSet0.toArray(integerArray0);
      assertEquals(1, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(linkedHashSet0);
      // Undeclared exception!
      try { 
        compositeSet0.toArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>((Set<Integer>) null);
      compositeSet0.getMutator();
      compositeSet0.setMutator((CompositeSet.SetMutator<Integer>) null);
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>();
      compositeSet1.containsAll(compositeSet0);
      Set<Integer> set0 = compositeSet1.toSet();
      boolean boolean0 = compositeSet0.containsAll(compositeSet1);
      List<Set<Integer>> list0 = compositeSet0.getSets();
      Integer integer0 = new Integer((-1));
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(5627);
      Integer integer1 = new Integer((-8));
      linkedHashSet0.add(integer1);
      compositeSet0.addComposited((Set<Integer>) null);
      compositeSet0.clear();
      CompositeSet<Integer> compositeSet2 = new CompositeSet<Integer>();
      compositeSet2.clear();
      compositeSet1.containsAll(list0);
      boolean boolean1 = compositeSet2.retainAll(set0);
      assertFalse(boolean1 == boolean0);
      
      Object object0 = new Object();
      boolean boolean2 = compositeSet0.contains((Object) null);
      assertFalse(boolean2);
      
      LinkedHashSet<LinkedHashSet<Integer>> linkedHashSet1 = new LinkedHashSet<LinkedHashSet<Integer>>();
      CompositeSet<LinkedHashSet<Integer>> compositeSet3 = new CompositeSet<LinkedHashSet<Integer>>(linkedHashSet1);
      CompositeSet<LinkedHashSet<Integer>> compositeSet4 = new CompositeSet<LinkedHashSet<Integer>>(linkedHashSet1);
      compositeSet3.addComposited((Set<LinkedHashSet<Integer>>[]) null);
      assertFalse(compositeSet3.contains(linkedHashSet0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>();
      Set<Integer>[] setArray0 = (Set<Integer>[]) Array.newInstance(Set.class, 4);
      setArray0[0] = (Set<Integer>) compositeSet0;
      setArray0[1] = (Set<Integer>) compositeSet0;
      setArray0[2] = (Set<Integer>) compositeSet0;
      setArray0[3] = (Set<Integer>) compositeSet0;
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>(setArray0);
      compositeSet1.removeComposited(setArray0[0]);
      compositeSet0.removeAll(setArray0[2]);
      compositeSet0.retainAll(compositeSet1);
      Set<Integer> set0 = compositeSet0.toSet();
      compositeSet0.addComposited(set0);
      CompositeSet<LinkedHashSet<Integer>> compositeSet2 = new CompositeSet<LinkedHashSet<Integer>>();
      LinkedHashSet<LinkedHashSet<Integer>> linkedHashSet0 = new LinkedHashSet<LinkedHashSet<Integer>>();
      compositeSet2.addComposited((Set<LinkedHashSet<Integer>>) linkedHashSet0);
      compositeSet2.removeAll(compositeSet0);
      compositeSet2.toSet();
      compositeSet2.toSet();
      CompositeSet.SetMutator<LinkedHashSet<Integer>> compositeSet_SetMutator0 = (CompositeSet.SetMutator<LinkedHashSet<Integer>>) mock(CompositeSet.SetMutator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(compositeSet_SetMutator0).toString();
      compositeSet2.setMutator(compositeSet_SetMutator0);
      CompositeSet.SetMutator<LinkedHashSet<Integer>> compositeSet_SetMutator1 = compositeSet2.getMutator();
      compositeSet0.removeAll(setArray0[1]);
      compositeSet2.setMutator(compositeSet_SetMutator1);
      compositeSet1.toArray();
      // Undeclared exception!
      try { 
        compositeSet1.addAll(setArray0[2]);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // addAll() is not supported on CompositeSet without a SetMutator strategy
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>();
      Set<Integer> set0 = compositeSet0.toSet();
      compositeSet0.toArray();
      Set<LinkedHashSet<Integer>>[] setArray0 = (Set<LinkedHashSet<Integer>>[]) Array.newInstance(Set.class, 4);
      LinkedHashSet<LinkedHashSet<Integer>> linkedHashSet0 = new LinkedHashSet<LinkedHashSet<Integer>>();
      setArray0[0] = (Set<LinkedHashSet<Integer>>) linkedHashSet0;
      CompositeSet<LinkedHashSet<Integer>> compositeSet1 = new CompositeSet<LinkedHashSet<Integer>>(setArray0);
      setArray0[1] = (Set<LinkedHashSet<Integer>>) compositeSet1;
      LinkedHashSet<LinkedHashSet<Integer>> linkedHashSet1 = new LinkedHashSet<LinkedHashSet<Integer>>();
      linkedHashSet0.parallelStream();
      setArray0[2] = (Set<LinkedHashSet<Integer>>) linkedHashSet1;
      CompositeSet<LinkedHashSet<Integer>> compositeSet2 = new CompositeSet<LinkedHashSet<Integer>>(setArray0);
      setArray0[3] = (Set<LinkedHashSet<Integer>>) compositeSet2;
      CompositeSet<LinkedHashSet<Integer>> compositeSet3 = new CompositeSet<LinkedHashSet<Integer>>(setArray0);
      assertTrue(compositeSet3.equals((Object)compositeSet1));
      
      CompositeSet.SetMutator<LinkedHashSet<Integer>> compositeSet_SetMutator0 = (CompositeSet.SetMutator<LinkedHashSet<Integer>>) mock(CompositeSet.SetMutator.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(compositeSet_SetMutator0).addAll(any(org.apache.commons.collections4.set.CompositeSet.class) , anyList() , anyCollection());
      LinkedHashSet<Integer> linkedHashSet2 = new LinkedHashSet<Integer>();
      linkedHashSet0.add(linkedHashSet2);
      compositeSet3.setMutator(compositeSet_SetMutator0);
      compositeSet3.addAll(setArray0[2]);
      compositeSet3.toSet();
      compositeSet3.addAll(compositeSet1);
      compositeSet3.removeComposited(setArray0[0]);
      CompositeSet.SetMutator<LinkedHashSet<Integer>> compositeSet_SetMutator1 = (CompositeSet.SetMutator<LinkedHashSet<Integer>>) mock(CompositeSet.SetMutator.class, new ViolatedAssumptionAnswer());
      compositeSet3.setMutator(compositeSet_SetMutator1);
      compositeSet0.clear();
      compositeSet0.getSets();
      int int0 = compositeSet3.size();
      assertEquals(3, int0);
      
      CompositeSet<Integer> compositeSet4 = new CompositeSet<Integer>(set0);
      Integer integer0 = new Integer(0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) integer0);
      compositeSet4.removeIf(predicate0);
      compositeSet0.retainAll(compositeSet4);
      Integer integer1 = new Integer((-1868));
      compositeSet0.remove(integer1);
      compositeSet4.addComposited(set0, (Set<Integer>) compositeSet0);
      assertTrue(compositeSet0.equals((Object)compositeSet4));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>();
      Set<Integer> set0 = compositeSet0.toSet();
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>(set0);
      CompositeSet<Integer> compositeSet2 = new CompositeSet<Integer>(compositeSet1);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean0 = compositeSet2.containsAll(linkedHashSet0);
      compositeSet1.toSet();
      compositeSet2.containsAll(linkedHashSet0);
      compositeSet2.getSets();
      Integer integer0 = new Integer((-1));
      linkedHashSet0.add(integer0);
      compositeSet0.addComposited((Set<Integer>) compositeSet2);
      compositeSet1.clear();
      CompositeSet<Integer> compositeSet3 = new CompositeSet<Integer>();
      compositeSet3.clear();
      boolean boolean1 = compositeSet3.containsAll(linkedHashSet0);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = compositeSet0.retainAll(compositeSet3);
      Object object0 = new Object();
      boolean boolean3 = compositeSet2.contains(object0);
      assertTrue(boolean3 == boolean2);
      
      LinkedHashSet<LinkedHashSet<Integer>> linkedHashSet1 = new LinkedHashSet<LinkedHashSet<Integer>>();
      CompositeSet<LinkedHashSet<Integer>> compositeSet4 = new CompositeSet<LinkedHashSet<Integer>>(linkedHashSet1);
      CompositeSet<LinkedHashSet<Integer>> compositeSet5 = new CompositeSet<LinkedHashSet<Integer>>(compositeSet4);
      compositeSet5.addComposited((Set<LinkedHashSet<Integer>>[]) null);
      assertTrue(compositeSet5.equals((Object)compositeSet4));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer((-3243));
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(linkedHashSet0);
      compositeSet0.isEmpty();
      Integer integer1 = new Integer((-3243));
      linkedHashSet0.add(integer0);
      compositeSet0.removeComposited(linkedHashSet0);
      compositeSet0.addComposited((Set<Integer>) linkedHashSet0);
      compositeSet0.iterator();
      compositeSet0.containsAll(linkedHashSet0);
      Integer[] integerArray0 = new Integer[0];
      compositeSet0.toArray(integerArray0);
      assertTrue(compositeSet0.contains((-3243)));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(linkedHashSet0);
      linkedHashSet0.add(compositeSet0);
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>();
      compositeSet1.containsAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        compositeSet1.toArray((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CompositeSet<LinkedHashSet<Integer>> compositeSet0 = new CompositeSet<LinkedHashSet<Integer>>();
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>((Set<Integer>[]) null);
      boolean boolean0 = compositeSet1.containsAll(compositeSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CompositeSet<LinkedHashSet<Integer>> compositeSet0 = new CompositeSet<LinkedHashSet<Integer>>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>(linkedHashSet0);
      Integer integer0 = new Integer((-1176));
      linkedHashSet0.add(integer0);
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = compositeSet1.toArray(integerArray0);
      assertEquals(1, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Set<Integer>[] setArray0 = (Set<Integer>[]) Array.newInstance(Set.class, 8);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      setArray0[0] = (Set<Integer>) linkedHashSet0;
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(setArray0[0]);
      setArray0[1] = (Set<Integer>) compositeSet0;
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>();
      setArray0[2] = (Set<Integer>) compositeSet1;
      CompositeSet<Integer> compositeSet2 = new CompositeSet<Integer>(linkedHashSet0);
      Set<Integer> set0 = compositeSet2.toSet();
      setArray0[3] = set0;
      CompositeSet<Integer> compositeSet3 = new CompositeSet<Integer>(compositeSet2);
      setArray0[4] = (Set<Integer>) compositeSet3;
      CompositeSet<Integer> compositeSet4 = new CompositeSet<Integer>();
      compositeSet4.size();
      setArray0[5] = (Set<Integer>) compositeSet4;
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>(476);
      setArray0[6] = (Set<Integer>) linkedHashSet1;
      CompositeSet<Integer> compositeSet5 = new CompositeSet<Integer>(compositeSet4);
      compositeSet3.removeAll(compositeSet2);
      setArray0[7] = (Set<Integer>) compositeSet5;
      CompositeSet<Integer> compositeSet6 = new CompositeSet<Integer>(setArray0);
      compositeSet4.size();
      compositeSet6.removeComposited(linkedHashSet0);
      compositeSet4.retainAll(set0);
      compositeSet6.addComposited(setArray0);
      Set<LinkedHashSet<Integer>>[] setArray1 = (Set<LinkedHashSet<Integer>>[]) Array.newInstance(Set.class, 0);
      CompositeSet<LinkedHashSet<Integer>> compositeSet7 = new CompositeSet<LinkedHashSet<Integer>>(setArray1);
      // Undeclared exception!
      try { 
        compositeSet7.add(linkedHashSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is not supported on CompositeSet without a SetMutator strategy
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Set<LinkedHashSet<Integer>>[] setArray0 = (Set<LinkedHashSet<Integer>>[]) Array.newInstance(Set.class, 0);
      CompositeSet<LinkedHashSet<Integer>> compositeSet0 = new CompositeSet<LinkedHashSet<Integer>>(setArray0);
      compositeSet0.size();
      CompositeSet<LinkedHashSet<Integer>> compositeSet1 = new CompositeSet<LinkedHashSet<Integer>>((Set<LinkedHashSet<Integer>>[]) null);
      compositeSet0.addComposited((Set<LinkedHashSet<Integer>>) compositeSet1, (Set<LinkedHashSet<Integer>>) compositeSet1);
      compositeSet0.addComposited(setArray0);
      CompositeSet<LinkedHashSet<Integer>> compositeSet2 = new CompositeSet<LinkedHashSet<Integer>>(compositeSet0);
      compositeSet0.getMutator();
      Set<Integer>[] setArray1 = (Set<Integer>[]) Array.newInstance(Set.class, 9);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      CompositeSet<Integer> compositeSet3 = new CompositeSet<Integer>(linkedHashSet0);
      Set<Integer> set0 = compositeSet3.toSet();
      setArray1[0] = set0;
      CompositeSet<Integer> compositeSet4 = new CompositeSet<Integer>();
      setArray1[1] = (Set<Integer>) compositeSet4;
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>(setArray1[1]);
      setArray1[2] = (Set<Integer>) linkedHashSet1;
      CompositeSet<Integer> compositeSet5 = new CompositeSet<Integer>();
      setArray1[3] = (Set<Integer>) compositeSet5;
      CompositeSet<Integer> compositeSet6 = new CompositeSet<Integer>();
      setArray1[4] = (Set<Integer>) compositeSet6;
      CompositeSet<Integer> compositeSet7 = new CompositeSet<Integer>();
      setArray1[5] = (Set<Integer>) compositeSet7;
      CompositeSet<Integer> compositeSet8 = new CompositeSet<Integer>();
      setArray1[6] = (Set<Integer>) compositeSet8;
      Set<Integer> set1 = compositeSet5.toSet();
      setArray1[7] = set1;
      CompositeSet<Integer> compositeSet9 = new CompositeSet<Integer>(setArray1);
      setArray1[8] = (Set<Integer>) compositeSet9;
      CompositeSet<Integer> compositeSet10 = new CompositeSet<Integer>(setArray1);
      int int0 = compositeSet10.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>();
      compositeSet0.iterator();
      compositeSet0.isEmpty();
      Set<Integer> set0 = compositeSet0.toSet();
      compositeSet0.addComposited(set0);
      Integer integer0 = new Integer((-1));
      // Undeclared exception!
      try { 
        compositeSet0.add(integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is not supported on CompositeSet without a SetMutator strategy
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CompositeSet<LinkedHashSet<Integer>> compositeSet0 = new CompositeSet<LinkedHashSet<Integer>>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedHashSet<Object> linkedHashSet1 = new LinkedHashSet<Object>();
      Object object0 = new Object();
      linkedHashSet1.add(object0);
      Set<Object>[] setArray0 = (Set<Object>[]) Array.newInstance(Set.class, 2);
      setArray0[0] = (Set<Object>) linkedHashSet1;
      setArray0[1] = (Set<Object>) linkedHashSet1;
      CompositeSet<Object> compositeSet1 = null;
      try {
        compositeSet1 = new CompositeSet<Object>(setArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Collision adding composited set with no SetMutator set
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(linkedHashSet0);
      linkedHashSet0.add(compositeSet0);
      // Undeclared exception!
      try { 
        compositeSet0.addComposited((Set<Object>) linkedHashSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Collision adding composited set with no SetMutator set
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedHashSet<LinkedHashSet<Integer>> linkedHashSet0 = new LinkedHashSet<LinkedHashSet<Integer>>();
      CompositeSet<LinkedHashSet<Integer>> compositeSet0 = new CompositeSet<LinkedHashSet<Integer>>(linkedHashSet0);
      compositeSet0.iterator();
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>();
      compositeSet0.addComposited((Set<LinkedHashSet<Integer>>) linkedHashSet0);
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>(0);
      Integer integer0 = new Integer(1);
      compositeSet1.toArray();
      linkedHashSet1.add(integer0);
      // Undeclared exception!
      try { 
        compositeSet1.addComposited((Set<Integer>) linkedHashSet1, (Set<Integer>) linkedHashSet1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Collision adding composited set with no SetMutator set
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>();
      compositeSet0.getMutator();
      compositeSet0.setMutator((CompositeSet.SetMutator<Integer>) null);
      compositeSet0.getMutator();
      Set<LinkedHashSet<Integer>>[] setArray0 = (Set<LinkedHashSet<Integer>>[]) Array.newInstance(Set.class, 2);
      LinkedHashSet<LinkedHashSet<Integer>> linkedHashSet0 = new LinkedHashSet<LinkedHashSet<Integer>>();
      setArray0[0] = (Set<LinkedHashSet<Integer>>) linkedHashSet0;
      CompositeSet<LinkedHashSet<Integer>> compositeSet1 = new CompositeSet<LinkedHashSet<Integer>>();
      // Undeclared exception!
      try { 
        compositeSet1.addAll(linkedHashSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // addAll() is not supported on CompositeSet without a SetMutator strategy
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CompositeSet<LinkedHashSet<Object>> compositeSet0 = new CompositeSet<LinkedHashSet<Object>>();
      compositeSet0.getMutator();
      compositeSet0.setMutator((CompositeSet.SetMutator<LinkedHashSet<Object>>) null);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = compositeSet0.retainAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      compositeSet0.removeAll(linkedHashSet0);
      compositeSet0.hashCode();
      CompositeSet<LinkedHashSet<Integer>> compositeSet1 = new CompositeSet<LinkedHashSet<Integer>>((Set<LinkedHashSet<Integer>>) null);
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      linkedHashSet0.add(integer0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedHashSet0);
      compositeSet0.removeIf(predicate0);
      compositeSet1.remove(object0);
      compositeSet0.hashCode();
      Predicate<LinkedHashSet<Integer>> predicate1 = Predicate.isEqual((Object) linkedHashSet0);
      compositeSet1.removeIf(predicate1);
      compositeSet1.retainAll((Collection<?>) null);
      compositeSet1.removeComposited((Set<LinkedHashSet<Integer>>) null);
      assertFalse(compositeSet1.contains(linkedHashSet0));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CompositeSet<LinkedHashSet<Integer>> compositeSet0 = new CompositeSet<LinkedHashSet<Integer>>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>(linkedHashSet0);
      boolean boolean0 = compositeSet0.equals(compositeSet1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer((-2198));
      linkedHashSet0.add(integer0);
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(linkedHashSet0);
      compositeSet0.removeAll(linkedHashSet0);
      Set<LinkedHashSet<Integer>>[] setArray0 = (Set<LinkedHashSet<Integer>>[]) Array.newInstance(Set.class, 0);
      compositeSet0.addComposited((Set<Integer>) linkedHashSet0, (Set<Integer>) linkedHashSet0);
      linkedHashSet0.clear();
      CompositeSet<LinkedHashSet<Integer>> compositeSet1 = new CompositeSet<LinkedHashSet<Integer>>(setArray0);
      compositeSet1.contains(linkedHashSet0);
      compositeSet0.equals(linkedHashSet0);
      compositeSet0.getSets();
      compositeSet1.spliterator();
      compositeSet0.clear();
      // Undeclared exception!
      try { 
        compositeSet1.add(linkedHashSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is not supported on CompositeSet without a SetMutator strategy
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(linkedHashSet0);
      linkedHashSet0.add(compositeSet0);
      compositeSet0.removeAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        compositeSet0.addComposited((Set<Object>) linkedHashSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Collision adding composited set with no SetMutator set
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CompositeSet<LinkedHashSet<Integer>> compositeSet0 = new CompositeSet<LinkedHashSet<Integer>>();
      CompositeSet<LinkedHashSet<Integer>> compositeSet1 = new CompositeSet<LinkedHashSet<Integer>>(compositeSet0);
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      
      boolean boolean0 = compositeSet1.retainAll(compositeSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CompositeSet<LinkedHashSet<Integer>> compositeSet0 = new CompositeSet<LinkedHashSet<Integer>>((Set<LinkedHashSet<Integer>>[]) null);
      int int0 = compositeSet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer(161);
      linkedHashSet0.add(integer0);
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(linkedHashSet0);
      compositeSet0.toArray();
      compositeSet0.addComposited((Set<Integer>[]) null);
      compositeSet0.retainAll(linkedHashSet0);
      compositeSet0.removeComposited(linkedHashSet0);
      compositeSet0.getSets();
      CompositeSet<LinkedHashSet<Integer>> compositeSet1 = new CompositeSet<LinkedHashSet<Integer>>((Set<LinkedHashSet<Integer>>) null);
      compositeSet1.getSets();
      Set<LinkedHashSet<Integer>> set0 = compositeSet1.toSet();
      Set<LinkedHashSet<Integer>> set1 = compositeSet1.toSet();
      compositeSet0.parallelStream();
      compositeSet1.addComposited(set0);
      compositeSet0.isEmpty();
      compositeSet1.addComposited((Set<LinkedHashSet<Integer>>) null, set1);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) integer0);
      Predicate<Integer> predicate1 = Predicate.isEqual((Object) linkedHashSet0);
      predicate0.or(predicate1);
      compositeSet0.removeIf(predicate0);
      compositeSet0.getSets();
      Integer integer1 = new Integer(161);
      // Undeclared exception!
      try { 
        compositeSet0.add(integer1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is not supported on CompositeSet without a SetMutator strategy
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(linkedHashSet0);
      linkedHashSet0.add(compositeSet0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) compositeSet0);
      boolean boolean0 = compositeSet0.removeIf(predicate0);
      //  // Unstable assertion: assertEquals(1, linkedHashSet0.size());
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(linkedHashSet0);
      compositeSet0.removeComposited(linkedHashSet0);
      compositeSet0.addComposited((Set<Integer>) linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>();
      compositeSet0.hashCode();
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>();
      compositeSet1.isEmpty();
      compositeSet0.removeComposited(compositeSet1);
      compositeSet0.addComposited((Set<Integer>) compositeSet1);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(compositeSet0);
      compositeSet1.retainAll(linkedHashSet0);
      Set<LinkedHashSet<Integer>>[] setArray0 = (Set<LinkedHashSet<Integer>>[]) Array.newInstance(Set.class, 0);
      CompositeSet<LinkedHashSet<Integer>> compositeSet2 = new CompositeSet<LinkedHashSet<Integer>>(setArray0);
      compositeSet2.addComposited(setArray0);
      assertFalse(compositeSet2.contains(linkedHashSet0));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(linkedHashSet0);
      Predicate.isEqual((Object) compositeSet0);
      // Undeclared exception!
      try { 
        compositeSet0.addAll(linkedHashSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // addAll() is not supported on CompositeSet without a SetMutator strategy
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CompositeSet<LinkedHashSet<Integer>> compositeSet0 = new CompositeSet<LinkedHashSet<Integer>>();
      CompositeSet<Object> compositeSet1 = new CompositeSet<Object>();
      boolean boolean0 = compositeSet1.contains(compositeSet1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(linkedHashSet0);
      compositeSet0.contains(linkedHashSet0);
      compositeSet0.addComposited((Set<Object>) linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Set<LinkedHashSet<Integer>>[] setArray0 = (Set<LinkedHashSet<Integer>>[]) Array.newInstance(Set.class, 8);
      CompositeSet<LinkedHashSet<Integer>> compositeSet0 = new CompositeSet<LinkedHashSet<Integer>>(setArray0);
      setArray0[0] = (Set<LinkedHashSet<Integer>>) compositeSet0;
      LinkedHashSet<LinkedHashSet<Integer>> linkedHashSet0 = new LinkedHashSet<LinkedHashSet<Integer>>();
      setArray0[1] = (Set<LinkedHashSet<Integer>>) linkedHashSet0;
      LinkedHashSet<LinkedHashSet<Integer>> linkedHashSet1 = new LinkedHashSet<LinkedHashSet<Integer>>();
      setArray0[2] = (Set<LinkedHashSet<Integer>>) linkedHashSet1;
      Set<LinkedHashSet<Integer>>[] setArray1 = (Set<LinkedHashSet<Integer>>[]) Array.newInstance(Set.class, 0);
      CompositeSet<LinkedHashSet<Integer>> compositeSet1 = new CompositeSet<LinkedHashSet<Integer>>(setArray1);
      setArray0[3] = (Set<LinkedHashSet<Integer>>) compositeSet1;
      CompositeSet<LinkedHashSet<Integer>> compositeSet2 = new CompositeSet<LinkedHashSet<Integer>>();
      setArray0[4] = (Set<LinkedHashSet<Integer>>) compositeSet2;
      LinkedHashSet<LinkedHashSet<Integer>> linkedHashSet2 = new LinkedHashSet<LinkedHashSet<Integer>>();
      setArray0[5] = (Set<LinkedHashSet<Integer>>) linkedHashSet2;
      CompositeSet<LinkedHashSet<Integer>> compositeSet3 = new CompositeSet<LinkedHashSet<Integer>>(setArray0);
      setArray0[6] = (Set<LinkedHashSet<Integer>>) compositeSet3;
      CompositeSet<LinkedHashSet<Integer>> compositeSet4 = new CompositeSet<LinkedHashSet<Integer>>();
      compositeSet4.remove(linkedHashSet0);
      setArray0[7] = (Set<LinkedHashSet<Integer>>) compositeSet4;
      CompositeSet<LinkedHashSet<Integer>> compositeSet5 = new CompositeSet<LinkedHashSet<Integer>>(setArray0);
      compositeSet5.contains(linkedHashSet2);
      Set<Integer>[] setArray2 = (Set<Integer>[]) Array.newInstance(Set.class, 1);
      CompositeSet<Integer> compositeSet6 = new CompositeSet<Integer>();
      Set<Integer> set0 = compositeSet6.toSet();
      setArray2[0] = set0;
      CompositeSet<Integer> compositeSet7 = new CompositeSet<Integer>(setArray2);
      LinkedHashSet<Integer> linkedHashSet3 = new LinkedHashSet<Integer>(compositeSet7);
      CompositeSet<LinkedHashSet<Integer>> compositeSet8 = new CompositeSet<LinkedHashSet<Integer>>();
      // Undeclared exception!
      try { 
        compositeSet0.addAll(compositeSet8);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // addAll() is not supported on CompositeSet without a SetMutator strategy
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CompositeSet<LinkedHashSet<Integer>> compositeSet0 = new CompositeSet<LinkedHashSet<Integer>>();
      boolean boolean0 = compositeSet0.retainAll(compositeSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      compositeSet0.retainAll(linkedList0);
      compositeSet0.toSet();
      compositeSet0.getMutator();
      Set<LinkedHashSet<Integer>>[] setArray0 = (Set<LinkedHashSet<Integer>>[]) Array.newInstance(Set.class, 7);
      CompositeSet<LinkedHashSet<Integer>> compositeSet1 = new CompositeSet<LinkedHashSet<Integer>>(setArray0);
      setArray0[0] = (Set<LinkedHashSet<Integer>>) compositeSet1;
      LinkedHashSet<LinkedHashSet<Integer>> linkedHashSet0 = new LinkedHashSet<LinkedHashSet<Integer>>();
      setArray0[1] = (Set<LinkedHashSet<Integer>>) linkedHashSet0;
      LinkedHashSet<LinkedHashSet<Integer>> linkedHashSet1 = new LinkedHashSet<LinkedHashSet<Integer>>();
      setArray0[2] = (Set<LinkedHashSet<Integer>>) linkedHashSet1;
      CompositeSet<LinkedHashSet<Integer>> compositeSet2 = new CompositeSet<LinkedHashSet<Integer>>();
      setArray0[3] = (Set<LinkedHashSet<Integer>>) compositeSet2;
      CompositeSet<LinkedHashSet<Integer>> compositeSet3 = new CompositeSet<LinkedHashSet<Integer>>(setArray0);
      setArray0[4] = (Set<LinkedHashSet<Integer>>) compositeSet3;
      CompositeSet<LinkedHashSet<Integer>> compositeSet4 = new CompositeSet<LinkedHashSet<Integer>>(setArray0);
      setArray0[5] = (Set<LinkedHashSet<Integer>>) compositeSet4;
      LinkedHashSet<LinkedHashSet<Integer>> linkedHashSet2 = null;
      try {
        linkedHashSet2 = new LinkedHashSet<LinkedHashSet<Integer>>(3866, (-1.0F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: -1.0
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CompositeSet<LinkedHashSet<Integer>> compositeSet0 = new CompositeSet<LinkedHashSet<Integer>>();
      CompositeSet<LinkedHashSet<Object>> compositeSet1 = new CompositeSet<LinkedHashSet<Object>>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      // Undeclared exception!
      try { 
        compositeSet1.add(linkedHashSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is not supported on CompositeSet without a SetMutator strategy
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(linkedHashSet0);
      compositeSet0.addComposited((Set<Object>) linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(linkedHashSet0);
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = compositeSet0.toArray(integerArray0);
      assertSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Set<LinkedHashSet<Integer>>[] setArray0 = (Set<LinkedHashSet<Integer>>[]) Array.newInstance(Set.class, 2);
      CompositeSet<LinkedHashSet<Integer>> compositeSet0 = new CompositeSet<LinkedHashSet<Integer>>(setArray0);
      setArray0[0] = (Set<LinkedHashSet<Integer>>) compositeSet0;
      CompositeSet<LinkedHashSet<Integer>> compositeSet1 = new CompositeSet<LinkedHashSet<Integer>>(compositeSet0);
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-876));
      integerArray0[0] = integer0;
      compositeSet1.toArray(integerArray0);
      setArray0[1] = (Set<LinkedHashSet<Integer>>) compositeSet1;
      CompositeSet<LinkedHashSet<Integer>> compositeSet2 = new CompositeSet<LinkedHashSet<Integer>>(setArray0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      // Undeclared exception!
      try { 
        compositeSet2.add(linkedHashSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is not supported on CompositeSet without a SetMutator strategy
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(linkedHashSet0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) compositeSet0);
      boolean boolean0 = compositeSet0.removeIf(predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CompositeSet<LinkedHashSet<Integer>> compositeSet0 = new CompositeSet<LinkedHashSet<Integer>>();
      boolean boolean0 = compositeSet0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(linkedHashSet0);
      Integer integer0 = new Integer(12);
      linkedHashSet0.add(integer0);
      linkedHashSet0.add(compositeSet0);
      Predicate.isEqual((Object) linkedHashSet0);
      compositeSet0.isEmpty();
      CompositeSet<Object> compositeSet1 = new CompositeSet<Object>(compositeSet0);
      compositeSet1.remove(compositeSet0);
      compositeSet0.removeAll(compositeSet1);
      compositeSet0.toArray();
      assertFalse(linkedHashSet0.contains(12));
      assertEquals(1, linkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>();
      linkedHashSet0.add(compositeSet0);
      // Undeclared exception!
      try { 
        compositeSet0.addComposited((Set<Object>) linkedHashSet0, (Set<Object>) linkedHashSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Collision adding composited set with no SetMutator set
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>();
      Object object0 = new Object();
      boolean boolean0 = compositeSet0.remove(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(linkedHashSet0);
      compositeSet0.clear();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedHashSet0);
      boolean boolean0 = compositeSet0.removeIf(predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>();
      compositeSet0.clear();
      Object object0 = new Object();
      boolean boolean0 = compositeSet0.remove(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>();
      compositeSet0.hashCode();
      boolean boolean0 = compositeSet0.isEmpty();
      CompositeSet.SetMutator<Integer> compositeSet_SetMutator0 = compositeSet0.getMutator();
      assertNull(compositeSet_SetMutator0);
      
      Set<LinkedHashSet<Object>>[] setArray0 = (Set<LinkedHashSet<Object>>[]) Array.newInstance(Set.class, 4);
      CompositeSet<LinkedHashSet<Object>> compositeSet1 = new CompositeSet<LinkedHashSet<Object>>();
      Set<LinkedHashSet<Object>> set0 = compositeSet1.toSet();
      CompositeSet<LinkedHashSet<Object>> compositeSet2 = new CompositeSet<LinkedHashSet<Object>>(set0);
      Set<LinkedHashSet<Object>> set1 = compositeSet2.toSet();
      setArray0[0] = set1;
      LinkedHashSet<LinkedHashSet<Object>> linkedHashSet0 = new LinkedHashSet<LinkedHashSet<Object>>();
      setArray0[1] = (Set<LinkedHashSet<Object>>) linkedHashSet0;
      LinkedHashSet<LinkedHashSet<Object>> linkedHashSet1 = new LinkedHashSet<LinkedHashSet<Object>>();
      setArray0[2] = (Set<LinkedHashSet<Object>>) linkedHashSet1;
      LinkedHashSet<LinkedHashSet<Object>> linkedHashSet2 = new LinkedHashSet<LinkedHashSet<Object>>(linkedHashSet1);
      setArray0[3] = (Set<LinkedHashSet<Object>>) linkedHashSet2;
      CompositeSet<LinkedHashSet<Object>> compositeSet3 = new CompositeSet<LinkedHashSet<Object>>(setArray0);
      int int0 = compositeSet3.size();
      assertEquals(0, int0);
      
      CompositeSet<Object> compositeSet4 = new CompositeSet<Object>();
      boolean boolean1 = compositeSet4.removeIf((Predicate<? super Object>) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(linkedHashSet0);
      boolean boolean0 = compositeSet0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>();
      CompositeSet<Object> compositeSet1 = new CompositeSet<Object>(compositeSet0);
      boolean boolean0 = compositeSet1.removeAll(compositeSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>((Set<Integer>[]) null);
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = compositeSet0.toArray(integerArray0);
      assertEquals(1, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>();
      Set<Object> set0 = compositeSet0.toSet();
      compositeSet0.addComposited(set0);
      // Undeclared exception!
      try { 
        compositeSet0.add(set0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is not supported on CompositeSet without a SetMutator strategy
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>((Set<Object>) null);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(linkedHashSet0);
      boolean boolean0 = compositeSet0.remove(linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>();
      Set<Integer> set0 = compositeSet0.toSet();
      compositeSet0.stream();
      compositeSet0.addComposited(set0, set0);
      compositeSet0.clear();
      Object object0 = new Object();
      compositeSet0.remove(object0);
      boolean boolean0 = compositeSet0.equals(object0);
      CompositeSet<LinkedHashSet<Integer>> compositeSet1 = new CompositeSet<LinkedHashSet<Integer>>((Set<LinkedHashSet<Integer>>) null);
      compositeSet1.toArray();
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      compositeSet1.toArray(integerArray0);
      CompositeSet<LinkedHashSet<Integer>> compositeSet2 = new CompositeSet<LinkedHashSet<Integer>>(compositeSet1);
      Predicate<LinkedHashSet<Integer>> predicate0 = Predicate.isEqual((Object) integerArray0[0]);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      predicate0.test(linkedHashSet0);
      boolean boolean1 = compositeSet2.removeIf(predicate0);
      compositeSet2.getMutator();
      compositeSet0.getSets();
      boolean boolean2 = compositeSet0.isEmpty();
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = compositeSet0.remove(integer0);
      assertTrue(boolean3 == boolean0);
      
      Integer[] integerArray1 = compositeSet2.toArray(integerArray0);
      assertTrue(compositeSet2.equals((Object)compositeSet1));
      assertEquals(1, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      CompositeSet<LinkedHashSet<Integer>> compositeSet0 = new CompositeSet<LinkedHashSet<Integer>>();
      Iterator<LinkedHashSet<Integer>> iterator0 = compositeSet0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CompositeSet<LinkedHashSet<Object>> compositeSet0 = new CompositeSet<LinkedHashSet<Object>>();
      int int0 = compositeSet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) compositeSet0);
      boolean boolean0 = compositeSet0.removeIf(predicate0);
      assertFalse(boolean0);
  }
}
