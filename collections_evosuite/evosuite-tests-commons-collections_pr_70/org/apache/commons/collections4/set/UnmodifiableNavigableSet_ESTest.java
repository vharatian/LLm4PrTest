/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 20:17:11 GMT 2025
 */

package org.apache.commons.collections4.set;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.NavigableSet;
import java.util.SortedSet;
import java.util.TreeSet;
import org.apache.commons.collections4.set.UnmodifiableNavigableSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class UnmodifiableNavigableSet_ESTest extends UnmodifiableNavigableSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnmodifiableNavigableSet.unmodifiableNavigableSet((NavigableSet<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      NavigableSet<Integer> navigableSet0 = UnmodifiableNavigableSet.unmodifiableNavigableSet((NavigableSet<Integer>) treeSet0);
      NavigableSet<Integer> navigableSet1 = UnmodifiableNavigableSet.unmodifiableNavigableSet(navigableSet0);
      assertSame(navigableSet0, navigableSet1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TreeSet<LinkedList<Object>> treeSet0 = new TreeSet<LinkedList<Object>>();
      NavigableSet<LinkedList<Object>> navigableSet0 = UnmodifiableNavigableSet.unmodifiableNavigableSet((NavigableSet<LinkedList<Object>>) treeSet0);
      TreeSet<LinkedList<Object>> treeSet1 = new TreeSet<LinkedList<Object>>((SortedSet<LinkedList<Object>>) navigableSet0);
      assertTrue(treeSet1.equals((Object)treeSet0));
  }
}
