/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 19:59:34 GMT 2025
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.Predicate;
import org.apache.commons.collections4.map.LinkedMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class LinkedMap_ESTest extends LinkedMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedMap.LinkedMapList<LinkedMap<Object, Object>> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<LinkedMap<Object, Object>>((LinkedMap<LinkedMap<Object, Object>, ?>) null);
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.subList(1, 3988);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LinkedMap$LinkedMapList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedMap<LinkedMap<Object, Object>, Object> linkedMap0 = new LinkedMap<LinkedMap<Object, Object>, Object>();
      LinkedMap.LinkedMapList<LinkedMap<Object, Object>> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<LinkedMap<Object, Object>>(linkedMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) null);
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedMap<LinkedMap<Object, Object>, Object> linkedMap0 = new LinkedMap<LinkedMap<Object, Object>, Object>();
      LinkedMap.LinkedMapList<LinkedMap<Object, Object>> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<LinkedMap<Object, Object>>(linkedMap0);
      ListIterator<LinkedMap<Object, Object>> listIterator0 = linkedMap_LinkedMapList0.listIterator();
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedMap<Locale.FilteringMode, Object> linkedMap0 = new LinkedMap<Locale.FilteringMode, Object>(1603);
      LinkedMap.LinkedMapList<Locale.FilteringMode> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Locale.FilteringMode>(linkedMap0);
      Iterator<Locale.FilteringMode> iterator0 = linkedMap_LinkedMapList0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      linkedMap0.size = 4185;
      Object object0 = linkedMap0.remove(237);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedMap<Locale.FilteringMode, LinkedMap<Object, Object>> linkedMap0 = new LinkedMap<Locale.FilteringMode, LinkedMap<Object, Object>>(0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>(linkedMap0);
      linkedMap0.putIfAbsent(locale_FilteringMode0, linkedMap1);
      LinkedMap<Object, Object> linkedMap2 = linkedMap0.remove(0);
      assertSame(linkedMap2, linkedMap1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedMap<Locale.FilteringMode, Object> linkedMap0 = new LinkedMap<Locale.FilteringMode, Object>(2546, 2546);
      linkedMap0.size = 3664;
      Object object0 = linkedMap0.getValue(2546);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedMap<Locale.FilteringMode, Locale.FilteringMode> linkedMap0 = new LinkedMap<Locale.FilteringMode, Locale.FilteringMode>(13);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      linkedMap0.putIfAbsent(locale_FilteringMode0, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = linkedMap0.getValue(0);
      assertEquals(Locale.FilteringMode.REJECT_EXTENDED_RANGES, locale_FilteringMode1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedMap<Object, Locale.FilteringMode> linkedMap0 = new LinkedMap<Object, Locale.FilteringMode>(0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      BiFunction<Object, Object, Locale.FilteringMode> biFunction0 = (BiFunction<Object, Object, Locale.FilteringMode>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedMap0.merge((Object) null, locale_FilteringMode0, biFunction0);
      Object object0 = linkedMap0.get(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedMap<Object, Locale.FilteringMode> linkedMap0 = new LinkedMap<Object, Locale.FilteringMode>();
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      linkedMap0.put(linkedMap1, locale_FilteringMode0);
      LinkedMap linkedMap2 = (LinkedMap)linkedMap0.get(0);
      assertTrue(linkedMap2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedMap<Locale.FilteringMode, Object> linkedMap0 = new LinkedMap<Locale.FilteringMode, Object>(0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      linkedMap0.putIfAbsent(locale_FilteringMode0, locale_FilteringMode0);
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>(linkedMap0);
      LinkedMap<Object, Object> linkedMap2 = linkedMap1.clone();
      assertEquals(1, linkedMap2.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedMap<LinkedMap<Object, Object>, LinkedMap<Object, Object>> linkedMap0 = new LinkedMap<LinkedMap<Object, Object>, LinkedMap<Object, Object>>();
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>(2424);
      linkedMap0.put(linkedMap1, linkedMap1);
      List<LinkedMap<Object, Object>> list0 = linkedMap0.asList();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      linkedMap1.header = null;
      // Undeclared exception!
      try { 
        linkedMap1.indexOf(linkedMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LinkedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedMap<LinkedMap<Object, Locale.FilteringMode>, Object> linkedMap0 = new LinkedMap<LinkedMap<Object, Locale.FilteringMode>, Object>(1);
      linkedMap0.data = null;
      // Undeclared exception!
      try { 
        linkedMap0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedMap<Locale.FilteringMode, Object> linkedMap0 = null;
      try {
        linkedMap0 = new LinkedMap<Locale.FilteringMode, Object>((Map<? extends Locale.FilteringMode, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedMap<LinkedMap<Object, Object>, Object> linkedMap0 = null;
      try {
        linkedMap0 = new LinkedMap<LinkedMap<Object, Object>, Object>((-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Initial capacity must be a non negative number
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = null;
      try {
        linkedMap0 = new LinkedMap<Object, Object>((-2730));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Initial capacity must be a non negative number
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedMap<Object, Locale.FilteringMode> linkedMap0 = new LinkedMap<Object, Locale.FilteringMode>();
      // Undeclared exception!
      try { 
        linkedMap0.get(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index 0 is invalid for size 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedMap<Object, Locale.FilteringMode> linkedMap0 = new LinkedMap<Object, Locale.FilteringMode>();
      linkedMap0.size = (-1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(linkedMap_LinkedMapList0);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedMap<Object, Locale.FilteringMode> linkedMap0 = new LinkedMap<Object, Locale.FilteringMode>();
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      linkedMap1.put(linkedMap1, linkedMap0);
      int int0 = linkedMap1.indexOf(linkedMap0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      LinkedMap<Locale.FilteringMode, Object> linkedMap1 = new LinkedMap<Locale.FilteringMode, Object>();
      LinkedMap.LinkedMapList<Locale.FilteringMode> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Locale.FilteringMode>(linkedMap1);
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.retainAll(linkedMap_LinkedMapList1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LinkedMap$LinkedMapList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>((LinkedMap<Object, ?>) null);
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.removeAll((Collection<?>) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LinkedMap$LinkedMapList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedMap<LinkedMap<Object, Object>, Object> linkedMap0 = new LinkedMap<LinkedMap<Object, Object>, Object>();
      LinkedMap.LinkedMapList<LinkedMap<Object, Object>> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<LinkedMap<Object, Object>>(linkedMap0);
      ListIterator<LinkedMap<Object, Object>> listIterator0 = linkedMap_LinkedMapList0.listIterator(0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedMap<Object, Locale.FilteringMode> linkedMap0 = new LinkedMap<Object, Locale.FilteringMode>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(linkedMap_LinkedMapList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedMap<Object, Locale.FilteringMode> linkedMap0 = new LinkedMap<Object, Locale.FilteringMode>(12);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.remove(12);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LinkedMap$LinkedMapList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedMap<Locale.FilteringMode, Object> linkedMap0 = new LinkedMap<Locale.FilteringMode, Object>();
      LinkedMap.LinkedMapList<Locale.FilteringMode> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Locale.FilteringMode>(linkedMap0);
      int int0 = linkedMap_LinkedMapList0.indexOf(linkedMap0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedMap<Locale.FilteringMode, Object> linkedMap0 = new LinkedMap<Locale.FilteringMode, Object>(0);
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>(linkedMap0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList0.lastIndexOf((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedMap<Object, Locale.FilteringMode> linkedMap0 = new LinkedMap<Object, Locale.FilteringMode>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      boolean boolean0 = linkedMap_LinkedMapList0.contains(linkedMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedMap<Object, Locale.FilteringMode> linkedMap0 = new LinkedMap<Object, Locale.FilteringMode>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Object[] objectArray0 = new Object[2];
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      assertEquals(2, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedMap<Object, Locale.FilteringMode> linkedMap0 = new LinkedMap<Object, Locale.FilteringMode>();
      LinkedMap<LinkedMap<Object, Object>, Locale.FilteringMode> linkedMap1 = new LinkedMap<LinkedMap<Object, Object>, Locale.FilteringMode>();
      LinkedMap.LinkedMapList<LinkedMap<Object, Object>> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<LinkedMap<Object, Object>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.removeIf(predicate0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LinkedMap$LinkedMapList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedMap<Object, Locale.FilteringMode> linkedMap0 = new LinkedMap<Object, Locale.FilteringMode>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedMap<Object, Locale.FilteringMode> linkedMap0 = new LinkedMap<Object, Locale.FilteringMode>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LinkedMap$LinkedMapList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedMap<Object, Locale.FilteringMode> linkedMap0 = new LinkedMap<Object, Locale.FilteringMode>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.get(2456);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index 2456 is invalid for size 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedMap<Object, Locale.FilteringMode> linkedMap0 = new LinkedMap<Object, Locale.FilteringMode>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.remove((Object) linkedMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LinkedMap$LinkedMapList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedMap<Object, Locale.FilteringMode> linkedMap0 = new LinkedMap<Object, Locale.FilteringMode>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      // Undeclared exception!
      try { 
        linkedMap0.remove(237);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index 237 is invalid for size 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedMap<Object, Locale.FilteringMode> linkedMap0 = new LinkedMap<Object, Locale.FilteringMode>(0);
      List<Object> list0 = linkedMap0.asList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedMap<Locale.FilteringMode, LinkedMap<Object, Object>> linkedMap0 = new LinkedMap<Locale.FilteringMode, LinkedMap<Object, Object>>(0);
      // Undeclared exception!
      try { 
        linkedMap0.getValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index 0 is invalid for size 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedMap<Locale.FilteringMode, Locale.FilteringMode> linkedMap0 = new LinkedMap<Locale.FilteringMode, Locale.FilteringMode>();
      LinkedMap<Locale.FilteringMode, Locale.FilteringMode> linkedMap1 = linkedMap0.clone();
      assertEquals(0, linkedMap1.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedMap<Object, Locale.FilteringMode> linkedMap0 = new LinkedMap<Object, Locale.FilteringMode>();
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>(linkedMap0);
      linkedMap1.put(linkedMap0, linkedMap0);
      int int0 = linkedMap1.indexOf(linkedMap0);
      assertEquals(0, int0);
  }
}
