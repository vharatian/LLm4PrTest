/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 19:55:12 GMT 2025
 */

package org.apache.commons.collections4.list;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Set;
import java.util.function.Predicate;
import org.apache.commons.collections4.list.SetUniqueList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SetUniqueList_ESTest extends SetUniqueList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      linkedList0.add((Object) linkedList0);
      SetUniqueList<Object> setUniqueList0 = new SetUniqueList<Object>(linkedList0, hashSet0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      setUniqueList0.add(1, (Object) linkedList1);
      // Undeclared exception!
      try { 
        setUniqueList0.set(1, linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ListIterator<LinkedHashSet<Object>> listIterator0 = (ListIterator<LinkedHashSet<Object>>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      HashSet<LinkedHashSet<Object>> hashSet0 = new HashSet<LinkedHashSet<Object>>();
      SetUniqueList.SetListListIterator<LinkedHashSet<Object>> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<LinkedHashSet<Object>>(listIterator0, hashSet0);
      setUniqueList_SetListListIterator0.remove();
      assertFalse(setUniqueList_SetListListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ListIterator<LinkedHashSet<Object>> listIterator0 = (ListIterator<LinkedHashSet<Object>>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(listIterator0).next();
      HashSet<LinkedHashSet<Object>> hashSet0 = new HashSet<LinkedHashSet<Object>>();
      SetUniqueList.SetListListIterator<LinkedHashSet<Object>> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<LinkedHashSet<Object>>(listIterator0, hashSet0);
      LinkedHashSet<Object> linkedHashSet0 = setUniqueList_SetListListIterator0.next();
      assertNull(linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ListIterator<LinkedHashSet<Integer>> listIterator0 = (ListIterator<LinkedHashSet<Integer>>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      LinkedHashSet<LinkedHashSet<Integer>> linkedHashSet0 = new LinkedHashSet<LinkedHashSet<Integer>>();
      SetUniqueList.SetListListIterator<LinkedHashSet<Integer>> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<LinkedHashSet<Integer>>(listIterator0, linkedHashSet0);
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      // Undeclared exception!
      try { 
        setUniqueList_SetListListIterator0.set(linkedHashSet1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ListIterator does not support set
         //
         verifyException("org.apache.commons.collections4.list.SetUniqueList$SetListListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ListIterator<LinkedHashSet<Integer>> listIterator0 = (ListIterator<LinkedHashSet<Integer>>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      HashSet<LinkedHashSet<Integer>> hashSet0 = new HashSet<LinkedHashSet<Integer>>();
      SetUniqueList.SetListListIterator<LinkedHashSet<Integer>> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<LinkedHashSet<Integer>>(listIterator0, hashSet0);
      SetUniqueList.SetListIterator<LinkedHashSet<Integer>> setUniqueList_SetListIterator0 = new SetUniqueList.SetListIterator<LinkedHashSet<Integer>>(setUniqueList_SetListListIterator0, hashSet0);
      SetUniqueList.SetListIterator<LinkedHashSet<Integer>> setUniqueList_SetListIterator1 = new SetUniqueList.SetListIterator<LinkedHashSet<Integer>>(setUniqueList_SetListIterator0, hashSet0);
      setUniqueList_SetListIterator1.remove();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(listIterator0).previous();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      SetUniqueList.SetListListIterator<Object> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<Object>(listIterator0, hashSet0);
      Object object0 = setUniqueList_SetListListIterator0.previous();
      linkedList0.add((Object) null);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      SetUniqueList<Object> setUniqueList0 = new SetUniqueList<Object>(linkedList0, linkedHashSet0);
      setUniqueList0.set(0, object0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      boolean boolean0 = linkedList0.add(linkedList1);
      SetUniqueList<LinkedList<Object>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedList<Object>>) linkedList0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList1);
      boolean boolean1 = setUniqueList0.removeIf(predicate0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      SetUniqueList<LinkedList<Object>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedList<Object>>) linkedList0);
      linkedList0.add((LinkedList<Object>) null);
      LinkedList<Object> linkedList1 = setUniqueList0.remove(0);
      assertNull(linkedList1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<LinkedList<Object>> linkedList1 = new LinkedList<LinkedList<Object>>();
      linkedList1.add(linkedList0);
      SetUniqueList<LinkedList<Object>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedList<Object>>) linkedList1);
      LinkedList<Object> linkedList2 = setUniqueList0.remove(0);
      assertEquals(0, linkedList2.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      HashSet<LinkedList<Object>> hashSet0 = new HashSet<LinkedList<Object>>();
      SetUniqueList<LinkedList<Object>> setUniqueList0 = new SetUniqueList<LinkedList<Object>>(linkedList0, hashSet0);
      ListIterator<LinkedList<Object>> listIterator0 = setUniqueList0.listIterator();
      SetUniqueList.SetListListIterator<LinkedList<Object>> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<LinkedList<Object>>(listIterator0, hashSet0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      setUniqueList_SetListListIterator0.add(linkedList1);
      ListIterator<LinkedList<Object>> listIterator1 = setUniqueList0.listIterator(1);
      assertFalse(listIterator1.hasNext());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.add((Object) linkedList0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      SetUniqueList<Object> setUniqueList0 = new SetUniqueList<Object>(linkedList1, linkedHashSet0);
      ListIterator<Object> listIterator0 = setUniqueList0.listIterator(0);
      SetUniqueList.SetListListIterator<Object> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<Object>(listIterator0, linkedHashSet0);
      SetUniqueList.SetListIterator<Object> setUniqueList_SetListIterator0 = new SetUniqueList.SetListIterator<Object>(setUniqueList_SetListListIterator0, linkedHashSet0);
      LinkedList linkedList2 = (LinkedList)setUniqueList_SetListIterator0.next();
      assertEquals(0, linkedList2.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      SetUniqueList<LinkedList<Object>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedList<Object>>) linkedList0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.offer(linkedList1);
      ListIterator<LinkedList<Object>> listIterator0 = setUniqueList0.listIterator();
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<LinkedHashSet<Object>> linkedList0 = new LinkedList<LinkedHashSet<Object>>();
      SetUniqueList<LinkedHashSet<Object>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedHashSet<Object>>) linkedList0);
      boolean boolean0 = setUniqueList0.addAll((Collection<? extends LinkedHashSet<Object>>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      SetUniqueList<LinkedList<Object>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedList<Object>>) linkedList0);
      HashSet<LinkedList<Object>> hashSet0 = new HashSet<LinkedList<Object>>();
      boolean boolean0 = linkedList0.add((LinkedList<Object>) null);
      hashSet0.add((LinkedList<Object>) null);
      SetUniqueList<LinkedList<Object>> setUniqueList1 = new SetUniqueList<LinkedList<Object>>(setUniqueList0, hashSet0);
      boolean boolean1 = setUniqueList1.addAll(1, (Collection<? extends LinkedList<Object>>) setUniqueList1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      SetUniqueList<LinkedList<Object>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedList<Object>>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.subList((-226), (-226));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -226
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.subList(4, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(4) > toIndex(-1)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      Set<Object> set0 = setUniqueList0.asSet();
      SetUniqueList<Object> setUniqueList1 = new SetUniqueList<Object>(setUniqueList0, set0);
      // Undeclared exception!
      try { 
        SetUniqueList.setUniqueList((List<Object>) setUniqueList1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.UnmodifiableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      // Undeclared exception!
      try { 
        SetUniqueList.setUniqueList((List<Object>) linkedList1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      Set<Object> set0 = setUniqueList0.asSet();
      SetUniqueList<Object> setUniqueList1 = new SetUniqueList<Object>(linkedList0, set0);
      // Undeclared exception!
      try { 
        setUniqueList1.set(0, set0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.UnmodifiableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.set(0, linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      Set<Object> set0 = setUniqueList0.asSet();
      SetUniqueList<Object> setUniqueList1 = new SetUniqueList<Object>(linkedList0, set0);
      // Undeclared exception!
      try { 
        setUniqueList1.retainAll(linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.UnmodifiableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = new SetUniqueList<Object>(linkedList0, linkedHashSet0);
      setUniqueList0.add((Object) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.retainAll(linkedHashSet0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.removeIf((Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSet0.add((Object) null);
      linkedHashSet0.add(linkedList0);
      SetUniqueList<Object> setUniqueList0 = new SetUniqueList<Object>(linkedList0, linkedHashSet0);
      // Undeclared exception!
      try { 
        setUniqueList0.removeAll(linkedHashSet0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedHashMap$LinkedHashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      Set<Object> set0 = setUniqueList0.asSet();
      SetUniqueList<Object> setUniqueList1 = new SetUniqueList<Object>(linkedList0, set0);
      // Undeclared exception!
      try { 
        setUniqueList1.removeAll(set0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.UnmodifiableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      setUniqueList0.add((Object) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.removeAll(linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.SetUniqueList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      SetUniqueList<Integer> setUniqueList1 = SetUniqueList.setUniqueList((List<Integer>) linkedList1);
      Set<Integer> set0 = setUniqueList1.asSet();
      SetUniqueList<Integer> setUniqueList2 = new SetUniqueList<Integer>(setUniqueList1, set0);
      // Undeclared exception!
      try { 
        setUniqueList2.remove((Object) setUniqueList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.UnmodifiableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.remove((Object) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedHashSet0);
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      Set<Object> set0 = setUniqueList0.asSet();
      SetUniqueList<Object> setUniqueList1 = new SetUniqueList<Object>(setUniqueList0, set0);
      // Undeclared exception!
      try { 
        setUniqueList1.remove(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.UnmodifiableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.add((Object) linkedList0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      SetUniqueList<Object> setUniqueList0 = new SetUniqueList<Object>(linkedList1, linkedHashSet0);
      setUniqueList0.set(0, linkedHashSet0);
      // Undeclared exception!
      try { 
        setUniqueList0.remove(0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<LinkedHashSet<Object>> linkedList0 = new LinkedList<LinkedHashSet<Object>>();
      SetUniqueList<LinkedHashSet<Object>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedHashSet<Object>>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.listIterator((-2854));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2854, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.createSetBasedOnList((Set<Object>) null, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.SetUniqueList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.containsAll(linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList((List<Integer>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.add((Object) linkedList0);
      linkedList0.add(linkedList1);
      SetUniqueList<LinkedList<Object>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedList<Object>>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.contains(linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      Set<Object> set0 = setUniqueList0.asSet();
      SetUniqueList<Object> setUniqueList1 = new SetUniqueList<Object>(linkedList0, set0);
      // Undeclared exception!
      try { 
        setUniqueList1.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.UnmodifiableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      List<Object> list0 = setUniqueList0.subList(0, 0);
      SetUniqueList<Object> setUniqueList1 = new SetUniqueList<Object>(list0, linkedHashSet0);
      // Undeclared exception!
      try { 
        setUniqueList1.addAll((Collection<?>) linkedHashSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.addAll((Collection<?>) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.addAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.SetUniqueList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.addAll((-1), (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.SetUniqueList", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      Set<Object> set0 = setUniqueList0.asSet();
      SetUniqueList<Object> setUniqueList1 = new SetUniqueList<Object>(setUniqueList0, set0);
      // Undeclared exception!
      try { 
        setUniqueList1.add((Object) set0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.UnmodifiableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      linkedList0.add((Object) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.add((Object) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      SetUniqueList<Object> setUniqueList1 = new SetUniqueList<Object>(setUniqueList0, linkedHashSet0);
      SetUniqueList<Object> setUniqueList2 = SetUniqueList.setUniqueList((List<Object>) setUniqueList1);
      // Undeclared exception!
      try { 
        setUniqueList2.add(15, (Object) linkedHashSet0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      LinkedList<LinkedList<Object>> linkedList1 = new LinkedList<LinkedList<Object>>();
      HashSet<LinkedList<Object>> hashSet0 = new HashSet<LinkedList<Object>>();
      hashSet0.add(linkedList0);
      SetUniqueList<LinkedList<Object>> setUniqueList1 = new SetUniqueList<LinkedList<Object>>(linkedList1, hashSet0);
      boolean boolean0 = setUniqueList1.contains(setUniqueList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      SetUniqueList<LinkedList<Object>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedList<Object>>) linkedList0);
      boolean boolean0 = setUniqueList0.remove((Object) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      SetUniqueList<Object> setUniqueList0 = new SetUniqueList<Object>(linkedList0, linkedHashSet0);
      boolean boolean0 = linkedHashSet0.add(setUniqueList0);
      boolean boolean1 = setUniqueList0.remove((Object) linkedList0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      SetUniqueList<LinkedList<Object>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedList<Object>>) linkedList0);
      linkedList0.add((LinkedList<Object>) null);
      linkedList0.add((LinkedList<Object>) null);
      boolean boolean0 = setUniqueList0.addAll(1, (Collection<? extends LinkedList<Object>>) setUniqueList0);
      assertEquals(3, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.addAll(0, (Collection<?>) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      SetUniqueList<LinkedList<Object>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedList<Object>>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.addAll((-1509), (Collection<? extends LinkedList<Object>>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1509, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.add(1, (Object) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      SetUniqueList<LinkedList<Object>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedList<Object>>) linkedList0);
      Iterator<LinkedList<Object>> iterator0 = setUniqueList0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      setUniqueList0.clear();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>(linkedHashSet0);
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      linkedHashSet0.add(linkedList0);
      SetUniqueList.SetListListIterator<Object> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<Object>(listIterator0, linkedHashSet0);
      setUniqueList_SetListListIterator0.add(linkedList0);
      assertFalse(setUniqueList_SetListListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Set<Object> set0 = setUniqueList0.createSetBasedOnList(linkedHashSet0, linkedList0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.add((Object) linkedList0);
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList((List<Integer>) linkedList0);
      boolean boolean0 = setUniqueList0.containsAll(linkedList1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      SetUniqueList<LinkedList<Object>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedList<Object>>) linkedList0);
      boolean boolean0 = setUniqueList0.contains(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      hashSet0.add(linkedList0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList1);
      SetUniqueList<Object> setUniqueList0 = new SetUniqueList<Object>(linkedList0, hashSet0);
      boolean boolean0 = setUniqueList0.retainAll(linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      SetUniqueList<Object> setUniqueList0 = new SetUniqueList<Object>(linkedList0, linkedHashSet0);
      boolean boolean0 = setUniqueList0.retainAll(setUniqueList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      hashSet0.add(linkedList0);
      SetUniqueList<Object> setUniqueList0 = new SetUniqueList<Object>(linkedList0, hashSet0);
      boolean boolean0 = setUniqueList0.retainAll(linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      hashSet0.add(linkedList0);
      SetUniqueList<Object> setUniqueList0 = new SetUniqueList<Object>(linkedList0, hashSet0);
      boolean boolean0 = setUniqueList0.removeAll(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      hashSet0.add(linkedList0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList1);
      SetUniqueList<Object> setUniqueList0 = new SetUniqueList<Object>(linkedList0, hashSet0);
      boolean boolean0 = setUniqueList0.removeAll(hashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      linkedList0.add((Object) linkedList0);
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.set(0, linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      SetUniqueList<LinkedList<Object>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedList<Object>>) linkedList0);
      linkedList0.add((LinkedList<Object>) null);
      linkedList0.add((LinkedList<Object>) null);
      boolean boolean0 = setUniqueList0.addAll((Collection<? extends LinkedList<Object>>) setUniqueList0);
      assertEquals(3, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = null;
      try {
        setUniqueList0 = new SetUniqueList<Object>(linkedList0, (Set<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Set must not be null
         //
         verifyException("org.apache.commons.collections4.list.SetUniqueList", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUniqueList.setUniqueList((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.list.SetUniqueList", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      List<Object> list0 = setUniqueList0.subList(0, 0);
      SetUniqueList<Object> setUniqueList1 = SetUniqueList.setUniqueList(list0);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) hashSet0);
      // Undeclared exception!
      try { 
        setUniqueList1.removeIf(predicate0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      Set<Object> set0 = setUniqueList0.asSet();
      SetUniqueList<Object> setUniqueList1 = new SetUniqueList<Object>(linkedList0, set0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      // Undeclared exception!
      try { 
        setUniqueList1.add(1812, (Object) linkedHashSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.UnmodifiableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      boolean boolean0 = setUniqueList0.containsAll(setUniqueList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) hashSet0);
      boolean boolean0 = setUniqueList0.removeIf(predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }
}
