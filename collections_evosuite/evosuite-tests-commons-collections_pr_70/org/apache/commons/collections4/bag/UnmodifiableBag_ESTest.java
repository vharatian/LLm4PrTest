/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 19:30:34 GMT 2025
 */

package org.apache.commons.collections4.bag;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.apache.commons.collections4.Bag;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.bag.CollectionSortedBag;
import org.apache.commons.collections4.bag.HashBag;
import org.apache.commons.collections4.bag.SynchronizedBag;
import org.apache.commons.collections4.bag.SynchronizedSortedBag;
import org.apache.commons.collections4.bag.TreeBag;
import org.apache.commons.collections4.bag.UnmodifiableBag;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.map.UnmodifiableMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class UnmodifiableBag_ESTest extends UnmodifiableBag_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnmodifiableBag.unmodifiableBag((Bag<? extends LinkedList<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashBag<Predicate<Object>> hashBag0 = new HashBag<Predicate<Object>>();
      Bag<Predicate<Object>> bag0 = UnmodifiableBag.unmodifiableBag((Bag<? extends Predicate<Object>>) hashBag0);
      Bag<Predicate<Object>> bag1 = UnmodifiableBag.unmodifiableBag((Bag<? extends Predicate<Object>>) bag0);
      assertSame(bag1, bag0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TreeBag<UnmodifiableMap<Integer, Object>> treeBag0 = new TreeBag<UnmodifiableMap<Integer, Object>>();
      Bag<Object> bag0 = UnmodifiableBag.unmodifiableBag((Bag<?>) treeBag0);
      boolean boolean0 = treeBag0.containsAll(bag0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashBag<Predicate<Object>> hashBag0 = new HashBag<Predicate<Object>>();
      Bag<Predicate<Object>> bag0 = UnmodifiableBag.unmodifiableBag((Bag<? extends Predicate<Object>>) hashBag0);
      TreeBag<Predicate<Object>> treeBag0 = new TreeBag<Predicate<Object>>(bag0);
      assertTrue(treeBag0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TreeBag<UnmodifiableMap<Integer, Object>> treeBag0 = new TreeBag<UnmodifiableMap<Integer, Object>>();
      Object object0 = new Object();
      Bag<Object> bag0 = UnmodifiableBag.unmodifiableBag((Bag<?>) treeBag0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Predicate<Predicate<Object>> predicate1 = OrPredicate.orPredicate((Predicate<? super Predicate<Object>>) predicate0, (Predicate<? super Predicate<Object>>) predicate0);
      SynchronizedSortedBag<Object> synchronizedSortedBag0 = new SynchronizedSortedBag<Object>(bag0, predicate1);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(synchronizedSortedBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.add(object0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.UnmodifiableBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HashBag<Predicate<Object>> hashBag0 = new HashBag<Predicate<Object>>();
      Bag<Predicate<Object>> bag0 = UnmodifiableBag.unmodifiableBag((Bag<? extends Predicate<Object>>) hashBag0);
      SynchronizedBag<Predicate<Object>> synchronizedBag0 = SynchronizedBag.synchronizedBag(bag0);
      // Undeclared exception!
      try { 
        synchronizedBag0.add((Predicate<Object>) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.UnmodifiableBag", e);
      }
  }
}
