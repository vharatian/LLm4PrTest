/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 19:48:46 GMT 2025
 */

package org.apache.commons.collections4.collection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.commons.collections4.Bag;
import org.apache.commons.collections4.BoundedCollection;
import org.apache.commons.collections4.bag.CollectionBag;
import org.apache.commons.collections4.bag.HashBag;
import org.apache.commons.collections4.bag.TreeBag;
import org.apache.commons.collections4.collection.SynchronizedCollection;
import org.apache.commons.collections4.collection.UnmodifiableBoundedCollection;
import org.apache.commons.collections4.list.FixedSizeList;
import org.apache.commons.collections4.queue.CircularFifoQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class UnmodifiableBoundedCollection_ESTest extends UnmodifiableBoundedCollection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      FixedSizeList<Locale.FilteringMode> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Locale.FilteringMode>) linkedList0);
      BoundedCollection<Locale.FilteringMode> boundedCollection0 = UnmodifiableBoundedCollection.unmodifiableBoundedCollection((BoundedCollection<? extends Locale.FilteringMode>) fixedSizeList0);
      assertTrue(boundedCollection0.isFull());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      FixedSizeList<Locale.FilteringMode> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Locale.FilteringMode>) linkedList0);
      BoundedCollection<Locale.FilteringMode> boundedCollection0 = UnmodifiableBoundedCollection.unmodifiableBoundedCollection((Collection<? extends Locale.FilteringMode>) fixedSizeList0);
      assertTrue(boundedCollection0.isFull());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnmodifiableBoundedCollection.unmodifiableBoundedCollection((BoundedCollection<? extends Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedHashSet<Locale.FilteringMode> linkedHashSet0 = new LinkedHashSet<Locale.FilteringMode>();
      SynchronizedCollection<Locale.FilteringMode> synchronizedCollection0 = new SynchronizedCollection<Locale.FilteringMode>(linkedHashSet0);
      // Undeclared exception!
      try { 
        UnmodifiableBoundedCollection.unmodifiableBoundedCollection((Collection<?>) synchronizedCollection0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Collection is not a bounded collection.
         //
         verifyException("org.apache.commons.collections4.collection.UnmodifiableBoundedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TreeBag<Locale.Category> treeBag0 = new TreeBag<Locale.Category>();
      Bag<Locale.Category> bag0 = CollectionBag.collectionBag((Bag<Locale.Category>) treeBag0);
      // Undeclared exception!
      try { 
        UnmodifiableBoundedCollection.unmodifiableBoundedCollection((Collection<? extends Locale.Category>) bag0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Collection is not a bounded collection.
         //
         verifyException("org.apache.commons.collections4.collection.UnmodifiableBoundedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CircularFifoQueue<Locale.Category> circularFifoQueue0 = new CircularFifoQueue<Locale.Category>();
      BoundedCollection<Locale.Category> boundedCollection0 = UnmodifiableBoundedCollection.unmodifiableBoundedCollection((Collection<? extends Locale.Category>) circularFifoQueue0);
      assertFalse(boundedCollection0.isFull());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnmodifiableBoundedCollection.unmodifiableBoundedCollection((Collection<? extends Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.UnmodifiableBoundedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>();
      BoundedCollection<Integer> boundedCollection0 = UnmodifiableBoundedCollection.unmodifiableBoundedCollection((BoundedCollection<? extends Integer>) circularFifoQueue0);
      BoundedCollection<Object> boundedCollection1 = UnmodifiableBoundedCollection.unmodifiableBoundedCollection((BoundedCollection<?>) boundedCollection0);
      assertFalse(boundedCollection1.isFull());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      CircularFifoQueue<Locale.FilteringMode> circularFifoQueue0 = new CircularFifoQueue<Locale.FilteringMode>(3806);
      BoundedCollection<Locale.FilteringMode> boundedCollection0 = UnmodifiableBoundedCollection.unmodifiableBoundedCollection((BoundedCollection<? extends Locale.FilteringMode>) circularFifoQueue0);
      HashBag<Locale.Category> hashBag0 = new HashBag<Locale.Category>();
      boolean boolean0 = hashBag0.retainAll(boundedCollection0);
      assertFalse(boolean0);
  }
}
