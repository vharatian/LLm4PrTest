/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 19:46:39 GMT 2025
 */

package org.apache.commons.collections4.collection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Predicate;
import org.apache.commons.collections4.collection.SynchronizedCollection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SynchronizedCollection_ESTest extends SynchronizedCollection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = new SynchronizedCollection<Object>(linkedList0);
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = synchronizedCollection0.toArray(integerArray0);
      assertSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1);
      linkedList0.add(integer0);
      SynchronizedCollection<Integer> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Integer>) linkedList0);
      Object[] objectArray0 = synchronizedCollection0.toArray();
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1);
      linkedList0.add(integer0);
      SynchronizedCollection<Integer> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Integer>) linkedList0);
      int int0 = synchronizedCollection0.size();
      assertTrue(synchronizedCollection0.contains(int0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(131);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      SynchronizedCollection<Integer> synchronizedCollection0 = new SynchronizedCollection<Integer>(linkedList1);
      synchronizedCollection0.add(integer0);
      boolean boolean0 = synchronizedCollection0.retainAll(linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SynchronizedCollection<Integer> synchronizedCollection0 = new SynchronizedCollection<Integer>(linkedList0);
      Integer integer0 = new Integer((-2898));
      synchronizedCollection0.add(integer0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) integer0);
      boolean boolean0 = synchronizedCollection0.removeIf(predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = new SynchronizedCollection<Object>(linkedList0);
      linkedList0.offerFirst(synchronizedCollection0);
      boolean boolean0 = synchronizedCollection0.removeAll(linkedList0);
      assertTrue(synchronizedCollection0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = new SynchronizedCollection<Object>(linkedList0, linkedList0);
      synchronizedCollection0.add(linkedList0);
      boolean boolean0 = synchronizedCollection0.remove(synchronizedCollection0);
      assertTrue(synchronizedCollection0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SynchronizedCollection<Integer> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Integer>) linkedList0);
      Object object0 = new Object();
      boolean boolean0 = synchronizedCollection0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Object>) linkedList0);
      Collection<Object> collection0 = synchronizedCollection0.decorated();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SynchronizedCollection<Integer> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Integer>) linkedList0);
      boolean boolean0 = linkedList0.add((Integer) null);
      boolean boolean1 = synchronizedCollection0.addAll(linkedList0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Object>) linkedList0);
      // Undeclared exception!
      try { 
        synchronizedCollection0.toArray((LinkedList<Object>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = new SynchronizedCollection<Object>(linkedList0, linkedList0);
      linkedList0.add((Object) synchronizedCollection0);
      LinkedList<Object>[] linkedListArray0 = (LinkedList<Object>[]) Array.newInstance(LinkedList.class, 1);
      // Undeclared exception!
      try { 
        synchronizedCollection0.toArray(linkedListArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // org.apache.commons.collections4.collection.SynchronizedCollection
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<LinkedList<Integer>> linkedList1 = new LinkedList<LinkedList<Integer>>();
      List<LinkedList<Integer>> list0 = linkedList1.subList(0, 0);
      SynchronizedCollection<LinkedList<Integer>> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<LinkedList<Integer>>) list0);
      linkedList1.add(linkedList0);
      // Undeclared exception!
      try { 
        synchronizedCollection0.toArray();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        SynchronizedCollection.synchronizedCollection((Collection<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.SynchronizedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.add((Object) linkedList0);
      linkedList0.add(linkedList1);
      SynchronizedCollection<LinkedList<Object>> synchronizedCollection0 = new SynchronizedCollection<LinkedList<Object>>(linkedList0, linkedList0);
      // Undeclared exception!
      try { 
        synchronizedCollection0.retainAll(linkedList1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = new SynchronizedCollection<Object>(linkedList0, linkedList0);
      // Undeclared exception!
      try { 
        synchronizedCollection0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.add((Object) linkedList0);
      linkedList0.add(linkedList1);
      SynchronizedCollection<LinkedList<Object>> synchronizedCollection0 = new SynchronizedCollection<LinkedList<Object>>(linkedList0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      // Undeclared exception!
      try { 
        synchronizedCollection0.removeIf(predicate0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = new SynchronizedCollection<Object>(linkedList0, linkedList0);
      // Undeclared exception!
      try { 
        synchronizedCollection0.removeIf((Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<LinkedList<String>> linkedList0 = new LinkedList<LinkedList<String>>();
      SynchronizedCollection<LinkedList<String>> synchronizedCollection0 = new SynchronizedCollection<LinkedList<String>>(linkedList0, linkedList0);
      // Undeclared exception!
      try { 
        synchronizedCollection0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<LinkedList<Object>> linkedList1 = new LinkedList<LinkedList<Object>>();
      SynchronizedCollection<LinkedList<Object>> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<LinkedList<Object>>) linkedList1);
      synchronizedCollection0.add(linkedList0);
      List<LinkedList<Object>> list0 = linkedList1.subList(0, 1);
      linkedList1.add(linkedList0);
      // Undeclared exception!
      try { 
        synchronizedCollection0.remove(list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = new SynchronizedCollection<Object>(linkedList0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.add((Object) linkedList0);
      linkedList0.add((Object) linkedList1);
      // Undeclared exception!
      try { 
        synchronizedCollection0.remove(synchronizedCollection0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Object>) linkedList0);
      synchronizedCollection0.add(linkedList0);
      // Undeclared exception!
      try { 
        synchronizedCollection0.hashCode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.add((Object) linkedList0);
      SynchronizedCollection<LinkedList<Object>> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<LinkedList<Object>>) linkedList0);
      synchronizedCollection0.add(linkedList1);
      // Undeclared exception!
      try { 
        synchronizedCollection0.equals(linkedList1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList1);
      linkedList1.offerLast(linkedList0);
      SynchronizedCollection<Object> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Object>) linkedList1);
      // Undeclared exception!
      try { 
        synchronizedCollection0.containsAll(linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Object>) linkedList0);
      // Undeclared exception!
      try { 
        synchronizedCollection0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      SynchronizedCollection<LinkedList<Object>> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<LinkedList<Object>>) linkedList0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.add((Object) linkedList0);
      Object[] objectArray0 = new Object[6];
      synchronizedCollection0.add(linkedList1);
      synchronizedCollection0.toArray(objectArray0);
      SynchronizedCollection<Object> synchronizedCollection1 = SynchronizedCollection.synchronizedCollection((Collection<Object>) linkedList1);
      // Undeclared exception!
      try { 
        synchronizedCollection1.contains(objectArray0[0]);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<LinkedList<Integer>> linkedList1 = new LinkedList<LinkedList<Integer>>();
      List<LinkedList<Integer>> list0 = linkedList1.subList(0, 0);
      SynchronizedCollection<LinkedList<Integer>> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<LinkedList<Integer>>) list0);
      linkedList1.add(linkedList0);
      // Undeclared exception!
      try { 
        synchronizedCollection0.clear();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = new SynchronizedCollection<Object>(linkedList0, linkedList0);
      // Undeclared exception!
      try { 
        synchronizedCollection0.addAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SynchronizedCollection<Integer> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Integer>) linkedList0);
      int int0 = synchronizedCollection0.size();
      assertFalse(linkedList0.contains(int0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SynchronizedCollection<Integer> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Integer>) linkedList0);
      Iterator<Integer> iterator0 = synchronizedCollection0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = new SynchronizedCollection<Object>(linkedList0, linkedList0);
      boolean boolean0 = synchronizedCollection0.equals(linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = new SynchronizedCollection<Object>(linkedList0);
      boolean boolean0 = synchronizedCollection0.equals(synchronizedCollection0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = new SynchronizedCollection<Object>(linkedList0);
      boolean boolean0 = synchronizedCollection0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) null);
      SynchronizedCollection<Object> synchronizedCollection0 = new SynchronizedCollection<Object>(linkedList0, linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      SynchronizedCollection<Integer> synchronizedCollection1 = new SynchronizedCollection<Integer>(linkedList1);
      boolean boolean0 = synchronizedCollection1.containsAll(synchronizedCollection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = new SynchronizedCollection<Object>(linkedList0);
      linkedList0.add((Object) linkedList0);
      boolean boolean0 = synchronizedCollection0.contains(linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      SynchronizedCollection<LinkedList<Object>> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<LinkedList<Object>>) linkedList0);
      boolean boolean0 = synchronizedCollection0.contains(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = null;
      try {
        synchronizedCollection0 = new SynchronizedCollection<Object>(linkedList0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Lock must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.SynchronizedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SynchronizedCollection<Object> synchronizedCollection0 = null;
      try {
        synchronizedCollection0 = new SynchronizedCollection<Object>((Collection<Object>) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.SynchronizedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SynchronizedCollection<LinkedList<Object>> synchronizedCollection0 = null;
      try {
        synchronizedCollection0 = new SynchronizedCollection<LinkedList<Object>>((Collection<LinkedList<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.SynchronizedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      SynchronizedCollection<LinkedList<Object>> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<LinkedList<Object>>) linkedList0);
      assertTrue(synchronizedCollection0.isEmpty());
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      synchronizedCollection0.add(linkedList1);
      boolean boolean0 = synchronizedCollection0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SynchronizedCollection<Integer> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Integer>) linkedList0);
      boolean boolean0 = synchronizedCollection0.addAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      SynchronizedCollection<LinkedList<Object>> synchronizedCollection0 = new SynchronizedCollection<LinkedList<Object>>(linkedList0);
      synchronizedCollection0.clear();
      assertTrue(synchronizedCollection0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SynchronizedCollection<Integer> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Integer>) linkedList0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection1 = SynchronizedCollection.synchronizedCollection((Collection<Object>) linkedList1);
      boolean boolean0 = synchronizedCollection0.containsAll(synchronizedCollection1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SynchronizedCollection<Integer> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Integer>) linkedList0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection1 = SynchronizedCollection.synchronizedCollection((Collection<Object>) linkedList1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) synchronizedCollection0);
      boolean boolean0 = synchronizedCollection1.removeIf(predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Object>) linkedList0);
      Object[] objectArray0 = synchronizedCollection0.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Object>) linkedList0);
      String string0 = synchronizedCollection0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SynchronizedCollection<Integer> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Integer>) linkedList0);
      synchronizedCollection0.hashCode();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      SynchronizedCollection<Integer> synchronizedCollection0 = new SynchronizedCollection<Integer>(linkedList1);
      boolean boolean0 = synchronizedCollection0.retainAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Object>) linkedList1);
      boolean boolean0 = synchronizedCollection0.removeAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SynchronizedCollection<Integer> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Integer>) linkedList0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      SynchronizedCollection<Object> synchronizedCollection1 = SynchronizedCollection.synchronizedCollection((Collection<Object>) linkedList1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) synchronizedCollection0);
      boolean boolean0 = synchronizedCollection1.remove(predicate0);
      assertFalse(boolean0);
  }
}
