/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 19:42:11 GMT 2025
 */

package org.apache.commons.collections4.collection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.apache.commons.collections4.collection.CompositeCollection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CompositeCollection_ESTest extends CompositeCollection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>((Collection<Integer>) null, (Collection<Integer>) null);
      compositeCollection0.size();
      compositeCollection0.addComposited((Collection<Integer>) null);
      compositeCollection0.size();
      Object object0 = new Object();
      compositeCollection0.contains(object0);
      compositeCollection0.contains(object0);
      CompositeCollection.CollectionMutator<Integer> compositeCollection_CollectionMutator0 = (CompositeCollection.CollectionMutator<Integer>) mock(CompositeCollection.CollectionMutator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(compositeCollection_CollectionMutator0).toString();
      doReturn(false).when(compositeCollection_CollectionMutator0).addAll(any(org.apache.commons.collections4.collection.CompositeCollection.class) , anyList() , anyCollection());
      compositeCollection0.setMutator(compositeCollection_CollectionMutator0);
      compositeCollection0.addAll((Collection<? extends Integer>) null);
      compositeCollection0.stream();
      Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 0);
      compositeCollection0.addComposited(collectionArray0);
      compositeCollection0.getMutator();
      compositeCollection0.toArray();
      compositeCollection0.size();
      CompositeCollection<CompositeCollection<Integer>> compositeCollection1 = new CompositeCollection<CompositeCollection<Integer>>();
      compositeCollection1.toCollection();
      compositeCollection0.toArray();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      CompositeCollection.CollectionMutator<Integer> compositeCollection_CollectionMutator0 = (CompositeCollection.CollectionMutator<Integer>) mock(CompositeCollection.CollectionMutator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(compositeCollection_CollectionMutator0).remove(any(org.apache.commons.collections4.collection.CompositeCollection.class) , anyList() , any());
      compositeCollection0.setMutator(compositeCollection_CollectionMutator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      compositeCollection0.retainAll(linkedList0);
      Object object0 = new Object();
      compositeCollection0.remove(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      CompositeCollection.CollectionMutator<Integer> compositeCollection_CollectionMutator0 = (CompositeCollection.CollectionMutator<Integer>) mock(CompositeCollection.CollectionMutator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(compositeCollection_CollectionMutator0).remove(any(org.apache.commons.collections4.collection.CompositeCollection.class) , anyList() , any());
      compositeCollection0.setMutator(compositeCollection_CollectionMutator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      compositeCollection0.retainAll(linkedList0);
      Object object0 = new Object();
      compositeCollection0.remove(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      Integer integer1 = new Integer(0);
      linkedList0.add(integer1);
      compositeCollection0.removeAll(linkedList0);
      compositeCollection0.getMutator();
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      integerArray0[3] = integer1;
      integerArray0[4] = integer1;
      integerArray0[5] = integer0;
      linkedList0.add((Integer) int0);
      integerArray0[6] = integer1;
      compositeCollection0.addComposited((Collection<Integer>) linkedList0, (Collection<Integer>) linkedList0);
      integerArray0[7] = integer0;
      compositeCollection0.toArray(integerArray0);
      CompositeCollection<LinkedList<Integer>> compositeCollection1 = new CompositeCollection<LinkedList<Integer>>();
      compositeCollection0.isEmpty();
      compositeCollection0.contains(int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.add((Integer) null);
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>(linkedList0, linkedList0);
      Object object0 = new Object();
      LinkedList<LinkedList<Integer>> linkedList1 = new LinkedList<LinkedList<Integer>>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      compositeCollection0.removeIf(predicate0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      Integer integer1 = new Integer((-4665));
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList1.add(integer0);
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>(linkedList1, linkedList0);
      compositeCollection0.removeAll(linkedList1);
      Integer integer2 = new Integer((-4665));
      compositeCollection0.retainAll(linkedList1);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      linkedList2.toArray();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 8);
      collectionArray0[0] = (Collection<Integer>) linkedList0;
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>(linkedList0);
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(compositeCollection0);
      collectionArray0[1] = (Collection<Integer>) compositeCollection1;
      collectionArray0[2] = (Collection<Integer>) linkedList0;
      collectionArray0[3] = (Collection<Integer>) linkedList0;
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      collectionArray0[4] = (Collection<Integer>) linkedList1;
      CompositeCollection<Integer> compositeCollection2 = new CompositeCollection<Integer>(collectionArray0[1]);
      collectionArray0[5] = (Collection<Integer>) compositeCollection2;
      collectionArray0[6] = (Collection<Integer>) linkedList0;
      collectionArray0[7] = (Collection<Integer>) linkedList0;
      CompositeCollection<Integer> compositeCollection3 = new CompositeCollection<Integer>(collectionArray0);
      CompositeCollection<Integer> compositeCollection4 = new CompositeCollection<Integer>(collectionArray0[5], compositeCollection3);
      CompositeCollection<Integer> compositeCollection5 = new CompositeCollection<Integer>(collectionArray0);
      Object object0 = new Object();
      compositeCollection2.addComposited(collectionArray0);
      LinkedList<LinkedList<Integer>> linkedList2 = new LinkedList<LinkedList<Integer>>();
      compositeCollection5.spliterator();
      Object object1 = new Object();
      Predicate<Integer> predicate0 = Predicate.isEqual(object1);
      // Undeclared exception!
      compositeCollection4.removeIf(predicate0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.add((Integer) null);
      Integer integer1 = new Integer((-4665));
      linkedList0.add(integer1);
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>(linkedList0, linkedList0);
      compositeCollection0.removeAll(linkedList0);
      Integer[] integerArray0 = new Integer[5];
      Integer integer2 = new Integer((-4665));
      linkedList0.add(integer2);
      integerArray0[0] = null;
      integerArray0[1] = null;
      integerArray0[2] = null;
      integerArray0[3] = integer0;
      integerArray0[4] = integer1;
      compositeCollection0.toArray(integerArray0);
      CompositeCollection<LinkedList<Integer>> compositeCollection1 = new CompositeCollection<LinkedList<Integer>>();
      compositeCollection0.retainAll(linkedList0);
      CompositeCollection<CompositeCollection<Integer>> compositeCollection2 = new CompositeCollection<CompositeCollection<Integer>>();
      LinkedList<CompositeCollection<Integer>> linkedList1 = new LinkedList<CompositeCollection<Integer>>();
      // Undeclared exception!
      try { 
        compositeCollection2.addAll(linkedList1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // addAll() is not supported on CompositeCollection without a CollectionMutator strategy
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      CompositeCollection<Object> compositeCollection1 = new CompositeCollection<Object>(linkedList1);
      compositeCollection1.removeAll(linkedList0);
      Integer integer1 = new Integer(0);
      compositeCollection1.contains(integer1);
      Collection<Object>[] collectionArray0 = (Collection<Object>[]) Array.newInstance(Collection.class, 9);
      collectionArray0[0] = (Collection<Object>) compositeCollection1;
      collectionArray0[1] = (Collection<Object>) compositeCollection1;
      collectionArray0[2] = (Collection<Object>) compositeCollection1;
      collectionArray0[3] = (Collection<Object>) compositeCollection1;
      collectionArray0[4] = (Collection<Object>) linkedList1;
      collectionArray0[5] = (Collection<Object>) compositeCollection1;
      collectionArray0[6] = (Collection<Object>) compositeCollection1;
      collectionArray0[7] = (Collection<Object>) linkedList1;
      collectionArray0[8] = (Collection<Object>) compositeCollection1;
      CompositeCollection<Object> compositeCollection2 = new CompositeCollection<Object>(collectionArray0);
      Collection<Object>[] collectionArray1 = (Collection<Object>[]) Array.newInstance(Collection.class, 7);
      collectionArray1[0] = (Collection<Object>) linkedList1;
      collectionArray1[1] = (Collection<Object>) linkedList1;
      collectionArray1[2] = (Collection<Object>) linkedList1;
      collectionArray1[3] = (Collection<Object>) compositeCollection1;
      collectionArray1[4] = (Collection<Object>) compositeCollection2;
      collectionArray1[5] = (Collection<Object>) compositeCollection1;
      CompositeCollection<Object> compositeCollection3 = new CompositeCollection<Object>();
      collectionArray1[6] = (Collection<Object>) compositeCollection3;
      compositeCollection2.addComposited(collectionArray1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CompositeCollection<CompositeCollection<Object>> compositeCollection0 = new CompositeCollection<CompositeCollection<Object>>();
      // Undeclared exception!
      try { 
        compositeCollection0.addComposited((Collection<CompositeCollection<Object>>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 3);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>(collectionArray0);
      compositeCollection0.addComposited((Collection<Integer>) null, (Collection<Integer>) linkedList0);
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer((-705));
      linkedList0.add(integer0);
      compositeCollection0.toArray(integerArray0);
      compositeCollection0.toArray();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      Integer integer1 = new Integer(0);
      linkedList0.add(integer1);
      compositeCollection0.removeAll(linkedList0);
      compositeCollection0.getMutator();
      Collection<Integer> collection0 = compositeCollection0.toCollection();
      Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 5);
      collectionArray0[0] = (Collection<Integer>) linkedList0;
      collectionArray0[1] = (Collection<Integer>) linkedList0;
      collectionArray0[2] = (Collection<Integer>) compositeCollection0;
      collectionArray0[3] = (Collection<Integer>) linkedList0;
      collectionArray0[4] = collection0;
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(collectionArray0);
      compositeCollection1.size();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      compositeCollection0.spliterator();
      compositeCollection0.isEmpty();
      compositeCollection0.spliterator();
      compositeCollection0.retainAll((Collection<?>) null);
      Collection<Integer> collection0 = compositeCollection0.toCollection();
      compositeCollection0.addComposited(collection0, (Collection<Integer>) null);
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1955);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1069);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(424);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(2273);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(1069);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(1069);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(384);
      integerArray0[8] = integer8;
      compositeCollection0.toArray(integerArray0);
      compositeCollection0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      compositeCollection0.spliterator();
      compositeCollection0.isEmpty();
      compositeCollection0.spliterator();
      Collection<LinkedList<Integer>>[] collectionArray0 = (Collection<LinkedList<Integer>>[]) Array.newInstance(Collection.class, 2);
      CompositeCollection<LinkedList<Integer>> compositeCollection1 = new CompositeCollection<LinkedList<Integer>>(collectionArray0);
      collectionArray0[0] = (Collection<LinkedList<Integer>>) compositeCollection1;
      CompositeCollection<LinkedList<Integer>> compositeCollection2 = new CompositeCollection<LinkedList<Integer>>();
      collectionArray0[1] = (Collection<LinkedList<Integer>>) compositeCollection2;
      CompositeCollection<LinkedList<Integer>> compositeCollection3 = new CompositeCollection<LinkedList<Integer>>(collectionArray0);
      compositeCollection3.getCollections();
      compositeCollection3.containsAll(compositeCollection0);
      compositeCollection0.addComposited((Collection<Integer>) null);
      compositeCollection0.toCollection();
      CompositeCollection<Integer> compositeCollection4 = new CompositeCollection<Integer>();
      compositeCollection0.clear();
      compositeCollection4.addComposited((Collection<Integer>) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 9);
      collectionArray0[0] = (Collection<Integer>) compositeCollection0;
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(collectionArray0[0], compositeCollection0);
      CompositeCollection<Integer> compositeCollection2 = new CompositeCollection<Integer>(collectionArray0[1]);
      CompositeCollection<Integer> compositeCollection3 = new CompositeCollection<Integer>(collectionArray0[1]);
      CompositeCollection<Integer> compositeCollection4 = new CompositeCollection<Integer>(compositeCollection3);
      CompositeCollection<Integer> compositeCollection5 = new CompositeCollection<Integer>(collectionArray0);
      compositeCollection5.addComposited(collectionArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      compositeCollection0.removeIf((Predicate<? super Integer>) null);
      compositeCollection0.getMutator();
      compositeCollection0.setMutator((CompositeCollection.CollectionMutator<Integer>) null);
      Collection<Integer> collection0 = compositeCollection0.toCollection();
      Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 2);
      collectionArray0[0] = (Collection<Integer>) compositeCollection0;
      collectionArray0[1] = (Collection<Integer>) compositeCollection0;
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(collectionArray0);
      compositeCollection0.setMutator((CompositeCollection.CollectionMutator<Integer>) null);
      CompositeCollection<Integer> compositeCollection2 = new CompositeCollection<Integer>(collectionArray0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      CompositeCollection<Integer> compositeCollection3 = new CompositeCollection<Integer>(linkedList1, compositeCollection0);
      CompositeCollection<Integer> compositeCollection4 = new CompositeCollection<Integer>(collectionArray0[1]);
      CompositeCollection<Integer> compositeCollection5 = new CompositeCollection<Integer>(linkedList1);
      compositeCollection0.addComposited(collection0, (Collection<Integer>) compositeCollection5);
      CompositeCollection<LinkedList<Integer>> compositeCollection6 = new CompositeCollection<LinkedList<Integer>>();
      CompositeCollection<LinkedList<Integer>> compositeCollection7 = new CompositeCollection<LinkedList<Integer>>();
      compositeCollection7.containsAll(compositeCollection5);
      // Undeclared exception!
      try { 
        compositeCollection7.toArray((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer(714);
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      compositeCollection0.removeIf((Predicate<? super Integer>) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 9);
      collectionArray0[0] = (Collection<Integer>) compositeCollection0;
      collectionArray0[1] = (Collection<Integer>) compositeCollection0;
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(collectionArray0[1], collectionArray0[0]);
      collectionArray0[2] = (Collection<Integer>) compositeCollection1;
      collectionArray0[3] = (Collection<Integer>) compositeCollection0;
      collectionArray0[4] = (Collection<Integer>) compositeCollection0;
      collectionArray0[5] = (Collection<Integer>) compositeCollection0;
      Collection<Integer> collection0 = compositeCollection1.toCollection();
      CompositeCollection<Integer> compositeCollection2 = new CompositeCollection<Integer>(collection0);
      collectionArray0[6] = (Collection<Integer>) compositeCollection2;
      CompositeCollection<Integer> compositeCollection3 = new CompositeCollection<Integer>(collectionArray0[3]);
      Integer[] integerArray0 = new Integer[0];
      compositeCollection3.toArray(integerArray0);
      collectionArray0[7] = (Collection<Integer>) compositeCollection3;
      compositeCollection1.addComposited((Collection<Integer>) null, collectionArray0[6]);
      CompositeCollection<LinkedList<Integer>> compositeCollection4 = new CompositeCollection<LinkedList<Integer>>();
      compositeCollection1.isEmpty();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>(linkedList0);
      Integer integer0 = new Integer(37);
      linkedList0.add(integer0);
      compositeCollection0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>((Collection<Integer>) null, (Collection<Integer>) null);
      compositeCollection0.retainAll((Collection<?>) null);
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>((Collection<Integer>) null, (Collection<Integer>) null);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 9);
      collectionArray0[0] = (Collection<Integer>) compositeCollection0;
      collectionArray0[1] = (Collection<Integer>) compositeCollection0;
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(collectionArray0[1], collectionArray0[0]);
      collectionArray0[2] = (Collection<Integer>) compositeCollection1;
      collectionArray0[3] = (Collection<Integer>) compositeCollection0;
      collectionArray0[4] = (Collection<Integer>) compositeCollection0;
      collectionArray0[5] = (Collection<Integer>) compositeCollection0;
      Collection<Integer> collection0 = compositeCollection1.toCollection();
      CompositeCollection<Integer> compositeCollection2 = new CompositeCollection<Integer>(collection0);
      collectionArray0[6] = (Collection<Integer>) compositeCollection2;
      CompositeCollection<Integer> compositeCollection3 = new CompositeCollection<Integer>(collectionArray0[3]);
      Integer[] integerArray0 = new Integer[0];
      compositeCollection3.toArray(integerArray0);
      collectionArray0[7] = (Collection<Integer>) compositeCollection3;
      collectionArray0[8] = (Collection<Integer>) compositeCollection0;
      CompositeCollection<Integer> compositeCollection4 = new CompositeCollection<Integer>(collectionArray0);
      compositeCollection4.setMutator((CompositeCollection.CollectionMutator<Integer>) null);
      compositeCollection0.retainAll(compositeCollection4);
      compositeCollection2.toCollection();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      compositeCollection1.addComposited((Collection<Integer>) linkedList0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = compositeCollection0.toArray(integerArray0);
      assertSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>((Collection<Integer>) null, (Collection<Integer>) null);
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>((Collection<Integer>) null, (Collection<Integer>) null);
      assertFalse(compositeCollection1.equals((Object)compositeCollection0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      compositeCollection0.spliterator();
      boolean boolean0 = compositeCollection0.isEmpty();
      assertTrue(boolean0);
      
      compositeCollection0.spliterator();
      boolean boolean1 = compositeCollection0.retainAll((Collection<?>) null);
      Object[] objectArray0 = compositeCollection0.toArray();
      assertEquals(0, objectArray0.length);
      
      Integer integer0 = new Integer((-315));
      Object object0 = new Object();
      LinkedList<LinkedList<Integer>> linkedList0 = new LinkedList<LinkedList<Integer>>();
      CompositeCollection<LinkedList<Integer>> compositeCollection1 = new CompositeCollection<LinkedList<Integer>>(linkedList0, linkedList0);
      boolean boolean2 = compositeCollection1.contains(object0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(compositeCollection0, compositeCollection0);
      boolean boolean0 = compositeCollection1.retainAll(compositeCollection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      boolean boolean0 = compositeCollection0.retainAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Collection<LinkedList<Integer>>[] collectionArray0 = (Collection<LinkedList<Integer>>[]) Array.newInstance(Collection.class, 2);
      CompositeCollection<LinkedList<Integer>> compositeCollection0 = new CompositeCollection<LinkedList<Integer>>();
      CompositeCollection<LinkedList<Integer>> compositeCollection1 = new CompositeCollection<LinkedList<Integer>>(compositeCollection0, compositeCollection0);
      collectionArray0[0] = (Collection<LinkedList<Integer>>) compositeCollection1;
      CompositeCollection<LinkedList<Integer>> compositeCollection2 = new CompositeCollection<LinkedList<Integer>>();
      Object[] objectArray0 = compositeCollection2.toArray();
      assertEquals(0, objectArray0.length);
      
      collectionArray0[1] = (Collection<LinkedList<Integer>>) compositeCollection2;
      CompositeCollection<LinkedList<Integer>> compositeCollection3 = new CompositeCollection<LinkedList<Integer>>(collectionArray0);
      CompositeCollection<LinkedList<Integer>> compositeCollection4 = new CompositeCollection<LinkedList<Integer>>(compositeCollection3, compositeCollection1);
      CompositeCollection<Integer> compositeCollection5 = new CompositeCollection<Integer>();
      boolean boolean0 = compositeCollection4.retainAll(compositeCollection5);
      compositeCollection4.setMutator((CompositeCollection.CollectionMutator<LinkedList<Integer>>) null);
      Collection<Integer> collection0 = compositeCollection5.toCollection();
      compositeCollection5.removeComposited(collection0);
      boolean boolean1 = compositeCollection4.isEmpty();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 7);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      collectionArray0[0] = (Collection<Integer>) linkedList0;
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>(collectionArray0);
      collectionArray0[1] = (Collection<Integer>) compositeCollection0;
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      collectionArray0[2] = (Collection<Integer>) linkedList1;
      Collection<Integer> collection0 = compositeCollection0.toCollection();
      collectionArray0[3] = collection0;
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(collection0, linkedList0);
      collectionArray0[4] = (Collection<Integer>) compositeCollection1;
      CompositeCollection<Integer> compositeCollection2 = new CompositeCollection<Integer>(collectionArray0);
      collectionArray0[5] = (Collection<Integer>) compositeCollection2;
      Integer integer0 = new Integer(1);
      linkedList0.offerLast(integer0);
      Collection<Integer> collection1 = compositeCollection0.toCollection();
      collectionArray0[6] = collection1;
      CompositeCollection<Integer> compositeCollection3 = new CompositeCollection<Integer>(collectionArray0);
      compositeCollection3.getMutator();
      compositeCollection3.setMutator((CompositeCollection.CollectionMutator<Integer>) null);
      compositeCollection0.getMutator();
      compositeCollection3.setMutator((CompositeCollection.CollectionMutator<Integer>) null);
      // Undeclared exception!
      try { 
        compositeCollection1.remove(integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove() is not supported on CompositeCollection without a CollectionMutator strategy
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      CompositeCollection<Object> compositeCollection0 = new CompositeCollection<Object>(linkedList0, linkedList0);
      linkedList0.add((Object) compositeCollection0);
      CompositeCollection<Object> compositeCollection1 = new CompositeCollection<Object>(compositeCollection0, linkedList0);
      CompositeCollection<Object> compositeCollection2 = new CompositeCollection<Object>(compositeCollection1, linkedList0);
      Object[] objectArray0 = compositeCollection2.toArray();
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(compositeCollection0, compositeCollection0);
      Object object0 = new Object();
      compositeCollection1.contains(object0);
      CompositeCollection<LinkedList<Integer>> compositeCollection2 = new CompositeCollection<LinkedList<Integer>>();
      CompositeCollection<Integer> compositeCollection3 = new CompositeCollection<Integer>(compositeCollection1, compositeCollection0);
      compositeCollection0.removeAll(compositeCollection3);
      Integer integer0 = new Integer(1995);
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      compositeCollection0.stream();
      compositeCollection2.toArray(integerArray0);
      compositeCollection2.contains(integer0);
      compositeCollection2.isEmpty();
      compositeCollection1.getCollections();
      compositeCollection1.size();
      Collection<LinkedList<Integer>> collection0 = compositeCollection2.toCollection();
      compositeCollection0.removeComposited(compositeCollection3);
      compositeCollection2.removeComposited(collection0);
      Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 3);
      collectionArray0[0] = (Collection<Integer>) compositeCollection3;
      CompositeCollection<Integer> compositeCollection4 = new CompositeCollection<Integer>(collectionArray0[0], compositeCollection0);
      collectionArray0[1] = (Collection<Integer>) compositeCollection4;
      collectionArray0[2] = (Collection<Integer>) compositeCollection1;
      compositeCollection1.addComposited(collectionArray0);
      compositeCollection4.toArray();
      compositeCollection4.containsAll(compositeCollection1);
      CompositeCollection.CollectionMutator<Integer> compositeCollection_CollectionMutator0 = compositeCollection1.getMutator();
      compositeCollection1.setMutator(compositeCollection_CollectionMutator0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(compositeCollection0, compositeCollection0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1786));
      linkedList0.add(integer0);
      Integer integer1 = new Integer((-2556));
      CompositeCollection<Integer> compositeCollection2 = new CompositeCollection<Integer>(linkedList0);
      CompositeCollection<Integer> compositeCollection3 = new CompositeCollection<Integer>(compositeCollection2, compositeCollection0);
      compositeCollection0.removeAll(linkedList0);
      compositeCollection3.isEmpty();
      CompositeCollection<Integer>[] compositeCollectionArray0 = (CompositeCollection<Integer>[]) Array.newInstance(CompositeCollection.class, 5);
      compositeCollectionArray0[0] = compositeCollection1;
      compositeCollectionArray0[1] = compositeCollection2;
      compositeCollectionArray0[2] = compositeCollection3;
      compositeCollectionArray0[3] = compositeCollection1;
      compositeCollectionArray0[4] = compositeCollection0;
      // Undeclared exception!
      try { 
        compositeCollection2.toArray(compositeCollectionArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Integer
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      // Undeclared exception!
      try { 
        compositeCollection0.toArray((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CompositeCollection<Object> compositeCollection0 = new CompositeCollection<Object>();
      compositeCollection0.getMutator();
      compositeCollection0.parallelStream();
      compositeCollection0.setMutator((CompositeCollection.CollectionMutator<Object>) null);
      CompositeCollection<Object> compositeCollection1 = new CompositeCollection<Object>(compositeCollection0);
      assertFalse(compositeCollection1.equals((Object)compositeCollection0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 4);
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>(collectionArray0);
      collectionArray0[0] = (Collection<Integer>) compositeCollection0;
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(collectionArray0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      compositeCollection0.removeIf(predicate0);
      collectionArray0[1] = (Collection<Integer>) compositeCollection1;
      compositeCollection1.getMutator();
      compositeCollection1.setMutator((CompositeCollection.CollectionMutator<Integer>) null);
      Collection<Integer> collection0 = compositeCollection1.toCollection();
      collectionArray0[2] = collection0;
      CompositeCollection<Integer> compositeCollection2 = new CompositeCollection<Integer>(collectionArray0);
      collectionArray0[3] = (Collection<Integer>) compositeCollection2;
      CompositeCollection<Integer> compositeCollection3 = new CompositeCollection<Integer>(collectionArray0);
      CompositeCollection<Integer> compositeCollection4 = new CompositeCollection<Integer>(compositeCollection3, compositeCollection1);
      CompositeCollection<Integer> compositeCollection5 = new CompositeCollection<Integer>(compositeCollection4);
      compositeCollection2.addComposited(collection0, (Collection<Integer>) compositeCollection5);
      CompositeCollection<LinkedList<Integer>> compositeCollection6 = new CompositeCollection<LinkedList<Integer>>();
      compositeCollection6.containsAll(collection0);
      // Undeclared exception!
      try { 
        compositeCollection6.toArray((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(compositeCollection0, compositeCollection0);
      boolean boolean0 = compositeCollection0.removeAll(compositeCollection1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      Integer integer1 = new Integer(0);
      linkedList0.add(integer1);
      boolean boolean0 = compositeCollection0.removeAll(linkedList0);
      compositeCollection0.getMutator();
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      integerArray0[3] = integer1;
      integerArray0[4] = integer1;
      integerArray0[5] = integer0;
      integerArray0[6] = integer1;
      compositeCollection0.addComposited((Collection<Integer>) linkedList0, (Collection<Integer>) linkedList0);
      integerArray0[7] = integer0;
      Integer[] integerArray1 = compositeCollection0.toArray(integerArray0);
      assertEquals(8, integerArray1.length);
      
      CompositeCollection<LinkedList<Integer>> compositeCollection1 = new CompositeCollection<LinkedList<Integer>>();
      boolean boolean1 = compositeCollection0.isEmpty();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CompositeCollection<Object> compositeCollection0 = new CompositeCollection<Object>();
      List<Collection<Object>> list0 = compositeCollection0.getCollections();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>(linkedList0);
      compositeCollection0.clear();
      Object[] objectArray0 = compositeCollection0.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      Integer integer1 = new Integer(0);
      linkedList0.add(integer1);
      compositeCollection0.removeAll(linkedList0);
      compositeCollection0.getMutator();
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      compositeCollection0.contains(int0);
      compositeCollection0.containsAll(linkedList0);
      Integer integer2 = new Integer(50);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) int0);
      compositeCollection0.iterator();
      compositeCollection0.removeIf(predicate0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        compositeCollection0.remove(object0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove() is not supported on CompositeCollection without a CollectionMutator strategy
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>((Collection<Integer>) null);
      compositeCollection0.clear();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      compositeCollection0.forEach(consumer0);
      compositeCollection0.removeComposited((Collection<Integer>) null);
      Consumer<Integer> consumer1 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      compositeCollection0.forEach(consumer1);
      compositeCollection0.containsAll((Collection<?>) null);
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(compositeCollection0);
      int int0 = 2443;
      Integer integer0 = new Integer(2443);
      // Undeclared exception!
      try { 
        compositeCollection1.remove(integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove() is not supported on CompositeCollection without a CollectionMutator strategy
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CompositeCollection<CompositeCollection<Object>> compositeCollection0 = new CompositeCollection<CompositeCollection<Object>>((Collection<CompositeCollection<Object>>) null);
      boolean boolean0 = compositeCollection0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CompositeCollection<Object> compositeCollection0 = new CompositeCollection<Object>();
      compositeCollection0.containsAll((Collection<?>) null);
      compositeCollection0.parallelStream();
      CompositeCollection<Object> compositeCollection1 = new CompositeCollection<Object>(compositeCollection0);
      CompositeCollection<Integer> compositeCollection2 = new CompositeCollection<Integer>();
      Integer integer0 = new Integer(2);
      // Undeclared exception!
      try { 
        compositeCollection2.add(integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is not supported on CompositeCollection without a CollectionMutator strategy
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>(linkedList0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) compositeCollection0);
      boolean boolean0 = compositeCollection0.removeIf(predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        compositeCollection0.remove(object0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove() is not supported on CompositeCollection without a CollectionMutator strategy
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) compositeCollection0);
      boolean boolean0 = compositeCollection0.removeIf(predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 3);
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      collectionArray0[0] = (Collection<Integer>) compositeCollection0;
      Collection<Integer> collection0 = compositeCollection0.toCollection();
      collectionArray0[1] = collection0;
      Collection<Integer> collection1 = compositeCollection0.toCollection();
      compositeCollection0.removeAll(collectionArray0[0]);
      collectionArray0[2] = collection1;
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(collectionArray0);
      int int0 = 0;
      Integer integer0 = new Integer(0);
      compositeCollection1.contains(integer0);
      compositeCollection0.contains(integer0);
      compositeCollection0.containsAll(compositeCollection1);
      Integer integer1 = new Integer(50);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) integer1);
      compositeCollection1.iterator();
      compositeCollection1.removeIf(predicate0);
      // Undeclared exception!
      try { 
        compositeCollection1.remove(integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove() is not supported on CompositeCollection without a CollectionMutator strategy
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      boolean boolean0 = compositeCollection0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      boolean boolean0 = compositeCollection0.removeAll(compositeCollection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CompositeCollection<CompositeCollection<Object>> compositeCollection0 = new CompositeCollection<CompositeCollection<Object>>();
      // Undeclared exception!
      try { 
        compositeCollection0.addAll(compositeCollection0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // addAll() is not supported on CompositeCollection without a CollectionMutator strategy
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      compositeCollection0.spliterator();
      Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 1);
      collectionArray0[0] = (Collection<Integer>) compositeCollection0;
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(collectionArray0);
      compositeCollection1.iterator();
      // Undeclared exception!
      try { 
        compositeCollection0.addAll(compositeCollection1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // addAll() is not supported on CompositeCollection without a CollectionMutator strategy
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Collection<LinkedList<Integer>>[] collectionArray0 = (Collection<LinkedList<Integer>>[]) Array.newInstance(Collection.class, 2);
      LinkedList<LinkedList<Integer>> linkedList0 = new LinkedList<LinkedList<Integer>>();
      CompositeCollection<LinkedList<Integer>> compositeCollection0 = new CompositeCollection<LinkedList<Integer>>(linkedList0, linkedList0);
      collectionArray0[0] = (Collection<LinkedList<Integer>>) compositeCollection0;
      LinkedList<Integer> linkedList1 = null;
      linkedList0.add((LinkedList<Integer>) null);
      CompositeCollection<LinkedList<Integer>> compositeCollection1 = new CompositeCollection<LinkedList<Integer>>(collectionArray0[0], collectionArray0[0]);
      collectionArray0[1] = (Collection<LinkedList<Integer>>) compositeCollection1;
      CompositeCollection<LinkedList<Integer>> compositeCollection2 = new CompositeCollection<LinkedList<Integer>>(collectionArray0);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      linkedList0.add(linkedList2);
      compositeCollection2.containsAll(linkedList0);
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        linkedList0.set(230, linkedList3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 230, Size: 2
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(21);
      linkedList0.add(integer0);
      Integer integer1 = new Integer(21);
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>(linkedList0, linkedList0);
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      Integer[] integerArray1 = compositeCollection0.toArray(integerArray0);
      assertEquals(2, integerArray1.length);
      
      int int0 = compositeCollection0.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(compositeCollection0, compositeCollection0);
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = compositeCollection1.toArray(integerArray0);
      assertSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      CompositeCollection.CollectionMutator<Integer> compositeCollection_CollectionMutator0 = compositeCollection0.getMutator();
      assertNull(compositeCollection_CollectionMutator0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 3);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      collectionArray0[0] = (Collection<Integer>) linkedList0;
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>(collectionArray0);
      compositeCollection0.addComposited((Collection<Integer>) null, (Collection<Integer>) linkedList0);
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer((-705));
      linkedList0.add(integer0);
      Integer[] integerArray1 = compositeCollection0.toArray(integerArray0);
      assertEquals(2, integerArray1.length);
      
      boolean boolean0 = compositeCollection0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CompositeCollection<Object> compositeCollection0 = new CompositeCollection<Object>();
      boolean boolean0 = compositeCollection0.contains(compositeCollection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = compositeCollection0.toArray(integerArray0);
      assertEquals(1, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(40);
      linkedList0.add(integer0);
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>(linkedList0, linkedList0);
      boolean boolean0 = compositeCollection0.removeAll(linkedList0);
      assertFalse(compositeCollection0.contains(40));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      Integer integer1 = new Integer(0);
      linkedList0.add(integer1);
      compositeCollection0.removeAll(linkedList0);
      compositeCollection0.getMutator();
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      integerArray0[3] = integer1;
      integerArray0[4] = integer1;
      integerArray0[5] = integer0;
      integerArray0[6] = integer1;
      compositeCollection0.addComposited((Collection<Integer>) linkedList0, (Collection<Integer>) linkedList0);
      integerArray0[7] = integer0;
      compositeCollection0.toArray(integerArray0);
      assertTrue(compositeCollection0.contains(0));
      
      CompositeCollection<LinkedList<Integer>> compositeCollection1 = new CompositeCollection<LinkedList<Integer>>();
      CompositeCollection<LinkedList<Integer>> compositeCollection2 = new CompositeCollection<LinkedList<Integer>>(compositeCollection1);
      Object object0 = new Object();
      boolean boolean0 = compositeCollection2.contains(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      CompositeCollection<Integer> compositeCollection1 = null;
      try {
        compositeCollection1 = new CompositeCollection<Integer>((Collection<Integer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(21);
      linkedList0.add(integer0);
      Integer integer1 = new Integer(21);
      Integer integer2 = new Integer(21);
      Integer integer3 = new Integer(0);
      linkedList0.add(integer3);
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>(linkedList0);
      boolean boolean0 = compositeCollection0.containsAll(linkedList0);
      boolean boolean1 = compositeCollection0.isEmpty();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-9));
      linkedList0.add(integer0);
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>(linkedList0);
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(compositeCollection0, compositeCollection0);
      boolean boolean0 = compositeCollection0.retainAll(compositeCollection1);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 1);
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>(collectionArray0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.offer(compositeCollection0);
      CompositeCollection<Object> compositeCollection1 = new CompositeCollection<Object>(linkedList0, linkedList0);
      compositeCollection0.containsAll(compositeCollection1);
      CompositeCollection<LinkedList<Integer>> compositeCollection2 = new CompositeCollection<LinkedList<Integer>>();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>(linkedList0);
      Collection<LinkedList<Integer>>[] collectionArray0 = (Collection<LinkedList<Integer>>[]) Array.newInstance(Collection.class, 5);
      CompositeCollection<LinkedList<Integer>> compositeCollection1 = new CompositeCollection<LinkedList<Integer>>();
      collectionArray0[0] = (Collection<LinkedList<Integer>>) compositeCollection1;
      CompositeCollection<LinkedList<Integer>> compositeCollection2 = new CompositeCollection<LinkedList<Integer>>(compositeCollection1);
      collectionArray0[1] = (Collection<LinkedList<Integer>>) compositeCollection2;
      CompositeCollection<LinkedList<Integer>> compositeCollection3 = new CompositeCollection<LinkedList<Integer>>(collectionArray0[0], compositeCollection2);
      collectionArray0[2] = (Collection<LinkedList<Integer>>) compositeCollection3;
      CompositeCollection<LinkedList<Integer>> compositeCollection4 = new CompositeCollection<LinkedList<Integer>>(compositeCollection1);
      collectionArray0[3] = (Collection<LinkedList<Integer>>) compositeCollection4;
      CompositeCollection<LinkedList<Integer>> compositeCollection5 = new CompositeCollection<LinkedList<Integer>>(compositeCollection1, collectionArray0[1]);
      collectionArray0[4] = (Collection<LinkedList<Integer>>) compositeCollection5;
      CompositeCollection<LinkedList<Integer>> compositeCollection6 = new CompositeCollection<LinkedList<Integer>>(collectionArray0);
      CompositeCollection<LinkedList<Integer>> compositeCollection7 = new CompositeCollection<LinkedList<Integer>>(compositeCollection6);
      CompositeCollection<LinkedList<Integer>> compositeCollection8 = new CompositeCollection<LinkedList<Integer>>(compositeCollection7, compositeCollection7);
      compositeCollection8.clear();
      assertFalse(compositeCollection8.equals((Object)compositeCollection7));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Integer integer0 = new Integer(721);
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      // Undeclared exception!
      try { 
        compositeCollection0.add(integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is not supported on CompositeCollection without a CollectionMutator strategy
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CompositeCollection<Object> compositeCollection0 = new CompositeCollection<Object>();
      CompositeCollection<Object> compositeCollection1 = new CompositeCollection<Object>(compositeCollection0);
      boolean boolean0 = compositeCollection1.removeAll(compositeCollection0);
      boolean boolean1 = compositeCollection1.contains(compositeCollection0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(compositeCollection0, compositeCollection0);
      boolean boolean0 = compositeCollection1.containsAll(compositeCollection0);
      boolean boolean1 = compositeCollection0.retainAll(compositeCollection1);
      assertFalse(boolean1 == boolean0);
      
      Object[] objectArray0 = compositeCollection0.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>(linkedList0);
      Integer integer0 = new Integer((-4815));
      linkedList0.add(integer0);
      compositeCollection0.containsAll(linkedList0);
      compositeCollection0.removeComposited(linkedList0);
      compositeCollection0.toArray();
      compositeCollection0.clear();
      compositeCollection0.addComposited((Collection<Integer>) linkedList0);
      compositeCollection0.addComposited((Collection<Integer>) linkedList0, (Collection<Integer>) linkedList0);
      Collection<LinkedList<Integer>>[] collectionArray0 = (Collection<LinkedList<Integer>>[]) Array.newInstance(Collection.class, 1);
      CompositeCollection<LinkedList<Integer>> compositeCollection1 = new CompositeCollection<LinkedList<Integer>>();
      CompositeCollection<LinkedList<Integer>> compositeCollection2 = new CompositeCollection<LinkedList<Integer>>(compositeCollection1, compositeCollection1);
      collectionArray0[0] = (Collection<LinkedList<Integer>>) compositeCollection2;
      compositeCollection2.containsAll(compositeCollection1);
      CompositeCollection<LinkedList<Integer>> compositeCollection3 = new CompositeCollection<LinkedList<Integer>>(collectionArray0);
      // Undeclared exception!
      try { 
        compositeCollection1.add(linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is not supported on CompositeCollection without a CollectionMutator strategy
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      compositeCollection0.clear();
      CompositeCollection<LinkedList<Integer>> compositeCollection1 = new CompositeCollection<LinkedList<Integer>>();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CompositeCollection<LinkedList<Integer>> compositeCollection0 = new CompositeCollection<LinkedList<Integer>>();
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>();
      Collection<Integer> collection0 = compositeCollection1.toCollection();
      compositeCollection1.removeComposited(collection0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Collection<LinkedList<Integer>>[] collectionArray0 = (Collection<LinkedList<Integer>>[]) Array.newInstance(Collection.class, 8);
      CompositeCollection<LinkedList<Integer>> compositeCollection0 = new CompositeCollection<LinkedList<Integer>>();
      CompositeCollection<LinkedList<Integer>> compositeCollection1 = new CompositeCollection<LinkedList<Integer>>();
      CompositeCollection<LinkedList<Integer>> compositeCollection2 = new CompositeCollection<LinkedList<Integer>>(compositeCollection0, compositeCollection1);
      CompositeCollection<LinkedList<Integer>> compositeCollection3 = new CompositeCollection<LinkedList<Integer>>(compositeCollection2, compositeCollection1);
      collectionArray0[0] = (Collection<LinkedList<Integer>>) compositeCollection3;
      CompositeCollection<LinkedList<Integer>> compositeCollection4 = new CompositeCollection<LinkedList<Integer>>(collectionArray0[0]);
      collectionArray0[1] = (Collection<LinkedList<Integer>>) compositeCollection4;
      CompositeCollection<LinkedList<Integer>> compositeCollection5 = new CompositeCollection<LinkedList<Integer>>(collectionArray0);
      collectionArray0[2] = (Collection<LinkedList<Integer>>) compositeCollection5;
      CompositeCollection<LinkedList<Integer>> compositeCollection6 = new CompositeCollection<LinkedList<Integer>>(collectionArray0[2], compositeCollection0);
      collectionArray0[3] = (Collection<LinkedList<Integer>>) compositeCollection6;
      CompositeCollection<LinkedList<Integer>> compositeCollection7 = new CompositeCollection<LinkedList<Integer>>(collectionArray0[0]);
      collectionArray0[4] = (Collection<LinkedList<Integer>>) compositeCollection7;
      LinkedList<LinkedList<Integer>> linkedList0 = new LinkedList<LinkedList<Integer>>();
      collectionArray0[5] = (Collection<LinkedList<Integer>>) linkedList0;
      CompositeCollection<LinkedList<Integer>> compositeCollection8 = new CompositeCollection<LinkedList<Integer>>(collectionArray0[3], collectionArray0[1]);
      collectionArray0[6] = (Collection<LinkedList<Integer>>) compositeCollection8;
      CompositeCollection<LinkedList<Integer>> compositeCollection9 = new CompositeCollection<LinkedList<Integer>>();
      collectionArray0[7] = (Collection<LinkedList<Integer>>) compositeCollection9;
      CompositeCollection<LinkedList<Integer>> compositeCollection10 = new CompositeCollection<LinkedList<Integer>>(collectionArray0);
      compositeCollection10.removeComposited(collectionArray0[3]);
      assertEquals(8, collectionArray0.length);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>(linkedList0);
      Object[] objectArray0 = compositeCollection0.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 1);
      collectionArray0[0] = (Collection<Integer>) compositeCollection0;
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(collectionArray0);
      assertFalse(compositeCollection1.equals((Object)compositeCollection0));
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CompositeCollection<CompositeCollection<Object>> compositeCollection0 = new CompositeCollection<CompositeCollection<Object>>();
      CompositeCollection<CompositeCollection<Object>> compositeCollection1 = new CompositeCollection<CompositeCollection<Object>>(compositeCollection0, compositeCollection0);
      assertFalse(compositeCollection1.equals((Object)compositeCollection0));
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      Collection<Integer> collection0 = compositeCollection0.toCollection();
      assertNotNull(collection0);
      
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(collection0);
      CompositeCollection<Integer> compositeCollection2 = new CompositeCollection<Integer>(compositeCollection1);
      CompositeCollection<Integer> compositeCollection3 = new CompositeCollection<Integer>(compositeCollection2, compositeCollection1);
      CompositeCollection<Integer> compositeCollection4 = new CompositeCollection<Integer>(compositeCollection3);
      Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 9);
      collectionArray0[0] = (Collection<Integer>) compositeCollection3;
      collectionArray0[1] = collection0;
      collectionArray0[2] = (Collection<Integer>) compositeCollection3;
      collectionArray0[3] = (Collection<Integer>) compositeCollection3;
      collectionArray0[4] = collection0;
      collectionArray0[5] = (Collection<Integer>) compositeCollection4;
      collectionArray0[6] = collection0;
      collectionArray0[7] = (Collection<Integer>) compositeCollection4;
      collectionArray0[8] = (Collection<Integer>) compositeCollection4;
      compositeCollection4.addComposited(collectionArray0);
      assertFalse(compositeCollection4.equals((Object)compositeCollection1));
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(compositeCollection0);
      assertFalse(compositeCollection1.equals((Object)compositeCollection0));
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      int int0 = compositeCollection0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      Object[] objectArray0 = compositeCollection0.toArray();
      assertEquals(0, objectArray0.length);
  }
}
