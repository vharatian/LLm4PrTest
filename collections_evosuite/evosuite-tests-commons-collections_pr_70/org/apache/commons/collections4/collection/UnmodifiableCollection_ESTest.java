/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 19:50:52 GMT 2025
 */

package org.apache.commons.collections4.collection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.bag.HashBag;
import org.apache.commons.collections4.collection.UnmodifiableCollection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class UnmodifiableCollection_ESTest extends UnmodifiableCollection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnmodifiableCollection.unmodifiableCollection((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashBag<Integer> hashBag0 = new HashBag<Integer>();
      Set<Integer> set0 = hashBag0.uniqueSet();
      Collection<Integer> collection0 = UnmodifiableCollection.unmodifiableCollection((Collection<? extends Integer>) set0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      Collection<Object> collection0 = UnmodifiableCollection.unmodifiableCollection((Collection<?>) stack0);
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      boolean boolean0 = priorityQueue0.containsAll(collection0);
      assertTrue(boolean0);
  }
}
