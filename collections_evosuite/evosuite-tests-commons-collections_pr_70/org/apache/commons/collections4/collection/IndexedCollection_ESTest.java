/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 19:44:23 GMT 2025
 */

package org.apache.commons.collections4.collection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.collection.IndexedCollection;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.CloneTransformer;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class IndexedCollection_ESTest extends IndexedCollection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Transformer<Predicate<Object>, Object> transformer0 = ConstantTransformer.constantTransformer((Object) linkedList0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      linkedList0.add((Predicate<Object>) uniquePredicate0);
      LinkedList<Predicate<Object>> linkedList1 = new LinkedList<Predicate<Object>>();
      linkedList0.add((Predicate<Object>) uniquePredicate0);
      IndexedCollection<Object, Predicate<Object>> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Predicate<Object>>) linkedList1, transformer0);
      boolean boolean0 = indexedCollection0.addAll(linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.offerLast((Object) null);
      InvokerTransformer<Object, Integer> invokerTransformer0 = new InvokerTransformer<Object, Integer>("K Pl2>e/1", (Class<?>[]) null, (Object[]) null);
      IndexedCollection<Integer, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, (Transformer<Object, Integer>) invokerTransformer0);
      Collection<Object> collection0 = indexedCollection0.values((Integer) null);
      assertFalse(collection0.contains("K Pl2>e/1"));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Transformer<Predicate<Object>, Object> transformer0 = ConstantTransformer.constantTransformer((Object) linkedList0);
      IndexedCollection<Object, Predicate<Object>> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Predicate<Object>>) linkedList0, transformer0);
      boolean boolean0 = indexedCollection0.removeAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      boolean boolean0 = linkedList0.add(predicateArray0[6]);
      ConstantTransformer<Predicate<Object>, Object> constantTransformer0 = new ConstantTransformer<Predicate<Object>, Object>(predicateArray0[2]);
      IndexedCollection<Object, Predicate<Object>> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Predicate<Object>>) linkedList0, (Transformer<Predicate<Object>, Object>) constantTransformer0);
      boolean boolean1 = indexedCollection0.contains((Object) null);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Transformer<Predicate<Object>, Object> transformer0 = ConstantTransformer.constantTransformer((Object) linkedList0);
      IndexedCollection<Object, Predicate<Object>> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Predicate<Object>>) linkedList0, transformer0);
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Transformer<Predicate<Object>, Integer> transformer1 = MapTransformer.mapTransformer((Map<? super Predicate<Object>, ? extends Integer>) hashMap0);
      IndexedCollection<Integer, Predicate<Object>> indexedCollection1 = IndexedCollection.uniqueIndexedCollection((Collection<Predicate<Object>>) indexedCollection0, transformer1);
      boolean boolean0 = indexedCollection1.contains(hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Integer, Object> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      indexedCollection0.add(linkedList0);
      ConstantTransformer<Object, Object> constantTransformer0 = new ConstantTransformer<Object, Object>((Object) null);
      IndexedCollection<Object, Object> indexedCollection1 = IndexedCollection.uniqueIndexedCollection((Collection<Object>) indexedCollection0, (Transformer<Object, Object>) constantTransformer0);
      // Undeclared exception!
      try { 
        indexedCollection1.values(linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      List<Integer> list0 = linkedList0.subList(0, 1);
      linkedList0.addLast(integer0);
      // Undeclared exception!
      try { 
        IndexedCollection.uniqueIndexedCollection((Collection<Integer>) list0, (Transformer<Integer, Object>) null);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Integer, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      indexedCollection0.add(linkedList0);
      Transformer<Object, Object> transformer1 = CloneTransformer.cloneTransformer();
      // Undeclared exception!
      try { 
        IndexedCollection.uniqueIndexedCollection((Collection<Object>) indexedCollection0, transformer1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      // Undeclared exception!
      try { 
        IndexedCollection.uniqueIndexedCollection((Collection<Object>) linkedList0, (Transformer<Object, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Transformer<Object, Object> transformer0 = CloneTransformer.cloneTransformer();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) transformer0);
      // Undeclared exception!
      try { 
        IndexedCollection.uniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The prototype must be cloneable via a public clone method
         //
         verifyException("org.apache.commons.collections4.functors.PrototypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(1213);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      linkedList0.add((Predicate<Object>) instanceofPredicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      predicateArray0[0] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[1] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[2] = predicate0;
      Transformer<Object, Integer>[] transformerArray0 = (Transformer<Object, Integer>[]) Array.newInstance(Transformer.class, 1);
      ConstantTransformer<Object, Integer> constantTransformer0 = new ConstantTransformer<Object, Integer>(integer0);
      SwitchTransformer<Predicate<Object>, Integer> switchTransformer0 = new SwitchTransformer<Predicate<Object>, Integer>(predicateArray0, transformerArray0, constantTransformer0);
      // Undeclared exception!
      try { 
        IndexedCollection.uniqueIndexedCollection((Collection<Predicate<Object>>) linkedList0, (Transformer<Predicate<Object>, Integer>) switchTransformer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transformer<Integer, Object> transformer0 = ExceptionTransformer.exceptionTransformer();
      IndexedCollection<Object, Integer> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Integer>) linkedList0, transformer0);
      // Undeclared exception!
      try { 
        indexedCollection0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      linkedList0.add((Predicate<Object>) uniquePredicate0);
      Integer integer0 = new Integer(4);
      ConstantTransformer<Object, Integer> constantTransformer0 = new ConstantTransformer<Object, Integer>(integer0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 7);
      InvokerTransformer<Object, Object> invokerTransformer0 = new InvokerTransformer<Object, Object>("org.apache.commons.collections4.collection.IndexedCollection", classArray0, classArray0);
      Transformer<Predicate<Object>, Object> transformer0 = IfTransformer.ifTransformer((Predicate<? super Predicate<Object>>) uniquePredicate0, (Transformer<? super Predicate<Object>, ?>) constantTransformer0, (Transformer<? super Predicate<Object>, ?>) invokerTransformer0);
      IndexedCollection<Object, Predicate<Object>> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Predicate<Object>>) linkedList0, transformer0);
      // Undeclared exception!
      try { 
        indexedCollection0.removeAll(linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'org.apache.commons.collections4.collection.IndexedCollection' on 'class org.apache.commons.collections4.functors.UniquePredicate' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicateArray0[0];
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      predicateArray0[2] = (Predicate<Object>) nonePredicate0;
      Integer integer0 = new Integer(443);
      predicateArray0[3] = predicate0;
      Predicate<Object> predicate1 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      ConstantTransformer<Object, Integer> constantTransformer0 = new ConstantTransformer<Object, Integer>(integer0);
      IfTransformer<Object, Integer> ifTransformer0 = new IfTransformer<Object, Integer>(predicate1, constantTransformer0, constantTransformer0);
      IndexedCollection<Integer, Object> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Object>) linkedList0, (Transformer<Object, Integer>) ifTransformer0);
      indexedCollection0.add(predicateArray0[2]);
      // Undeclared exception!
      indexedCollection0.removeAll(linkedList0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      linkedList0.add((Object) transformer0);
      IndexedCollection<Integer, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      indexedCollection0.add(linkedList0);
      indexedCollection0.add(linkedList0);
      // Undeclared exception!
      try { 
        indexedCollection0.removeAll(linkedList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Integer, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      // Undeclared exception!
      try { 
        indexedCollection0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IndexedCollection<Object, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, (Transformer<Object, Object>) null);
      Object object0 = new Object();
      linkedList0.add(object0);
      // Undeclared exception!
      try { 
        indexedCollection0.remove(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Predicate<Integer>> linkedList0 = new LinkedList<Predicate<Integer>>();
      Transformer<Predicate<Integer>, Object> transformer0 = InvokerTransformer.invokerTransformer("5<my&");
      IndexedCollection<Object, Predicate<Integer>> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Predicate<Integer>>) linkedList0, transformer0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      Predicate<Integer> predicate1 = AndPredicate.andPredicate((Predicate<? super Integer>) predicate0, (Predicate<? super Integer>) predicate0);
      NullIsExceptionPredicate<Integer> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Integer>(predicate1);
      linkedList0.add((Predicate<Integer>) nullIsExceptionPredicate0);
      // Undeclared exception!
      try { 
        indexedCollection0.reindex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '5<my&' on 'class org.apache.commons.collections4.functors.NullIsExceptionPredicate' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Transformer<Integer, Integer>> linkedList0 = new LinkedList<Transformer<Integer, Integer>>();
      linkedList0.add((Transformer<Integer, Integer>) null);
      Transformer<Transformer<Integer, Integer>, Transformer<Object, Object>> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IndexedCollection.nonUniqueIndexedCollection((Collection<Transformer<Integer, Integer>>) linkedList0, transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Transformer<Object, Object> transformer0 = CloneTransformer.cloneTransformer();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      linkedList0.add((Predicate<Object>) uniquePredicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      predicateArray0[0] = (Predicate<Object>) uniquePredicate0;
      predicateArray0[1] = (Predicate<Object>) uniquePredicate0;
      predicateArray0[2] = predicateArray0[0];
      predicateArray0[3] = (Predicate<Object>) uniquePredicate0;
      predicateArray0[4] = predicateArray0[1];
      predicateArray0[5] = (Predicate<Object>) uniquePredicate0;
      predicateArray0[6] = (Predicate<Object>) uniquePredicate0;
      predicateArray0[7] = (Predicate<Object>) uniquePredicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      predicateArray0[8] = (Predicate<Object>) nonePredicate0;
      Transformer<Object, Object>[] transformerArray0 = (Transformer<Object, Object>[]) Array.newInstance(Transformer.class, 2);
      transformerArray0[0] = transformer0;
      SwitchTransformer<Predicate<Object>, Object> switchTransformer0 = new SwitchTransformer<Predicate<Object>, Object>(predicateArray0, transformerArray0, transformer0);
      IndexedCollection.nonUniqueIndexedCollection((Collection<Predicate<Object>>) linkedList0, (Transformer<Predicate<Object>, Object>) switchTransformer0);
      // Undeclared exception!
      IndexedCollection.nonUniqueIndexedCollection((Collection<Predicate<Object>>) linkedList0, (Transformer<Predicate<Object>, Object>) switchTransformer0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) null);
      // Undeclared exception!
      try { 
        IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, (Transformer<Object, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Integer, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      indexedCollection0.add(transformer0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(transformer0, defaultEquator0);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      Transformer<Object, Predicate<Object>>[] transformerArray0 = (Transformer<Object, Predicate<Object>>[]) Array.newInstance(Transformer.class, 0);
      Transformer<Object, Predicate<Object>> transformer1 = ConstantTransformer.nullTransformer();
      SwitchTransformer<Object, Predicate<Object>> switchTransformer0 = new SwitchTransformer<Object, Predicate<Object>>(predicateArray0, transformerArray0, transformer1);
      // Undeclared exception!
      try { 
        IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) indexedCollection0, (Transformer<Object, Predicate<Object>>) switchTransformer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList1.add(integer0);
      Transformer<Object, Object> transformer0 = ExceptionTransformer.exceptionTransformer();
      IndexedCollection<Object, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      // Undeclared exception!
      try { 
        indexedCollection0.containsAll(linkedList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Transformer<Predicate<Object>, Object> transformer0 = ConstantTransformer.constantTransformer((Object) linkedList0);
      IndexedCollection<Object, Predicate<Object>> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Predicate<Object>>) linkedList0, transformer0);
      // Undeclared exception!
      try { 
        indexedCollection0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Transformer<Integer, Integer>> linkedList0 = new LinkedList<Transformer<Integer, Integer>>();
      Transformer<Transformer<Integer, Integer>, Transformer<Object, Object>> transformer0 = ExceptionTransformer.exceptionTransformer();
      IndexedCollection<Transformer<Object, Object>, Transformer<Integer, Integer>> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Transformer<Integer, Integer>>) linkedList0, transformer0);
      // Undeclared exception!
      try { 
        indexedCollection0.contains(transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IndexedCollection<Integer, Object> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Object>) linkedList0, (Transformer<Object, Integer>) null);
      // Undeclared exception!
      try { 
        indexedCollection0.contains(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transformer<Integer, Object> transformer0 = ExceptionTransformer.exceptionTransformer();
      IndexedCollection<Object, Integer> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Integer>) linkedList0, transformer0);
      Integer integer0 = new Integer((-2622));
      linkedList0.add(integer0);
      // Undeclared exception!
      try { 
        indexedCollection0.addAll(linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      IndexedCollection<Integer, Object> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      // Undeclared exception!
      try { 
        indexedCollection0.addAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      IndexedCollection<Integer, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      // Undeclared exception!
      try { 
        indexedCollection0.add(linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<LinkedList<Integer>, Integer> hashMap0 = new HashMap<LinkedList<Integer>, Integer>();
      Collection<Integer> collection0 = hashMap0.values();
      Integer integer0 = new Integer((-1));
      Factory<Integer> factory0 = ConstantFactory.constantFactory(integer0);
      Transformer<Integer, Integer> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Integer>) factory0);
      IndexedCollection<Integer, Integer> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection(collection0, transformer0);
      // Undeclared exception!
      try { 
        indexedCollection0.add(integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Transformer<Object, Object> transformer0 = CloneTransformer.cloneTransformer();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IndexedCollection<Object, Object> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      // Undeclared exception!
      try { 
        indexedCollection0.add(linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IndexedCollection<Integer, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, (Transformer<Object, Integer>) null);
      // Undeclared exception!
      try { 
        indexedCollection0.add((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      predicateArray0[0] = predicate0;
      Transformer<Object, Integer>[] transformerArray0 = (Transformer<Object, Integer>[]) Array.newInstance(Transformer.class, 0);
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Transformer<Object, Integer> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Integer>) hashMap0);
      SwitchTransformer<Object, Integer> switchTransformer0 = new SwitchTransformer<Object, Integer>(predicateArray0, transformerArray0, transformer0);
      IndexedCollection<Integer, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, (Transformer<Object, Integer>) switchTransformer0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        indexedCollection0.add(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Transformer<Object, Integer>> transformer0 = ConstantTransformer.nullTransformer();
      linkedList0.add((Object) transformer0);
      IndexedCollection<Transformer<Object, Integer>, Object> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      // Undeclared exception!
      try { 
        indexedCollection0.add(transformer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate key in uniquely indexed collection.
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Transformer<Predicate<Object>, Object> transformer0 = ConstantTransformer.constantTransformer((Object) linkedList0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      linkedList0.add((Predicate<Object>) uniquePredicate0);
      IndexedCollection<Object, Predicate<Object>> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Predicate<Object>>) linkedList0, transformer0);
      boolean boolean0 = indexedCollection0.remove(uniquePredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Transformer<Predicate<Object>, Object> transformer0 = ConstantTransformer.constantTransformer((Object) linkedList0);
      IndexedCollection<Object, Predicate<Object>> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Predicate<Object>>) linkedList0, transformer0);
      indexedCollection0.reindex();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IndexedCollection<Integer, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, (Transformer<Object, Integer>) null);
      Integer integer0 = new Integer(0);
      linkedList0.add((Object) integer0);
      // Undeclared exception!
      try { 
        indexedCollection0.reindex();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Transformer<Object, Object> transformer0 = CloneTransformer.cloneTransformer();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IndexedCollection<Object, Object> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        indexedCollection0.contains(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The prototype must be cloneable via a public clone method
         //
         verifyException("org.apache.commons.collections4.functors.PrototypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Integer, Object> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      indexedCollection0.add(transformer0);
      // Undeclared exception!
      try { 
        indexedCollection0.addAll(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate key in uniquely indexed collection.
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<Transformer<Integer, Integer>> linkedList0 = new LinkedList<Transformer<Integer, Integer>>();
      Transformer<Predicate<Object>, Object> transformer0 = ConstantTransformer.constantTransformer((Object) linkedList0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      LinkedList<Predicate<Object>> linkedList1 = new LinkedList<Predicate<Object>>();
      boolean boolean0 = linkedList1.add((Predicate<Object>) uniquePredicate0);
      IndexedCollection<Object, Predicate<Object>> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Predicate<Object>>) linkedList1, transformer0);
      boolean boolean1 = indexedCollection0.retainAll(linkedList0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Transformer<Predicate<Object>, Object> transformer0 = ConstantTransformer.constantTransformer((Object) linkedList0);
      IndexedCollection<Object, Predicate<Object>> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Predicate<Object>>) linkedList0, transformer0);
      boolean boolean0 = indexedCollection0.retainAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Transformer<Predicate<Object>, Object> transformer0 = ConstantTransformer.constantTransformer((Object) linkedList0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      linkedList0.add(predicate0);
      IndexedCollection<Object, Predicate<Object>> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Predicate<Object>>) linkedList0, transformer0);
      java.util.function.Predicate<Object> predicate1 = java.util.function.Predicate.isEqual((Object) predicate0);
      boolean boolean0 = indexedCollection0.removeIf(predicate1);
      assertFalse(linkedList0.contains(predicate0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Integer, Object> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      linkedList0.offerLast(transformer0);
      java.util.function.Predicate<Object> predicate0 = java.util.function.Predicate.isEqual((Object) linkedList0);
      boolean boolean0 = indexedCollection0.removeIf(predicate0);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Transformer<Predicate<Object>, Object> transformer0 = ConstantTransformer.constantTransformer((Object) linkedList0);
      IndexedCollection<Object, Predicate<Object>> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Predicate<Object>>) linkedList0, transformer0);
      boolean boolean0 = indexedCollection0.removeIf((java.util.function.Predicate<? super Predicate<Object>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<Transformer<Integer, Integer>> linkedList0 = new LinkedList<Transformer<Integer, Integer>>();
      Transformer<Transformer<Integer, Integer>, Transformer<Object, Object>> transformer0 = ExceptionTransformer.exceptionTransformer();
      IndexedCollection<Transformer<Object, Object>, Transformer<Integer, Integer>> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Transformer<Integer, Integer>>) linkedList0, transformer0);
      boolean boolean0 = indexedCollection0.remove(transformer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<Predicate<Integer>> linkedList0 = new LinkedList<Predicate<Integer>>();
      Transformer<Predicate<Integer>, Integer> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Integer, Predicate<Integer>> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Predicate<Integer>>) linkedList0, transformer0);
      Integer integer0 = new Integer(5);
      Predicate<Integer> predicate0 = indexedCollection0.get(integer0);
      assertNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Transformer<Predicate<Object>, Object> transformer0 = ConstantTransformer.constantTransformer((Object) linkedList0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      linkedList0.add((Predicate<Object>) uniquePredicate0);
      IndexedCollection<Object, Predicate<Object>> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Predicate<Object>>) linkedList0, transformer0);
      Predicate<Object> predicate0 = indexedCollection0.get(linkedList0);
      assertNotNull(predicate0);
      assertTrue(linkedList0.contains(predicate0));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transformer<Integer, Predicate<Object>> transformer0 = InvokerTransformer.invokerTransformer("");
      IndexedCollection<Predicate<Object>, Integer> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Integer>) linkedList0, transformer0);
      IndexedCollection<Integer, Integer> indexedCollection1 = IndexedCollection.uniqueIndexedCollection((Collection<Integer>) indexedCollection0, (Transformer<Integer, Integer>) null);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      ConstantTransformer<Integer, Predicate<Object>> constantTransformer0 = new ConstantTransformer<Integer, Predicate<Object>>(allPredicate0);
      IndexedCollection<Predicate<Object>, Integer> indexedCollection2 = IndexedCollection.nonUniqueIndexedCollection((Collection<Integer>) indexedCollection1, (Transformer<Integer, Predicate<Object>>) constantTransformer0);
      Integer integer0 = new Integer((-2023));
      linkedList0.add(integer0);
      boolean boolean0 = indexedCollection2.containsAll(indexedCollection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Integer, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      indexedCollection0.add(linkedList0);
      // Undeclared exception!
      try { 
        indexedCollection0.addAll(linkedList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Transformer<Predicate<Object>, Object> transformer0 = ConstantTransformer.constantTransformer((Object) linkedList0);
      IndexedCollection<Object, Predicate<Object>> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Predicate<Object>>) linkedList0, transformer0);
      boolean boolean0 = indexedCollection0.addAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Transformer<Predicate<Object>, Object> transformer0 = ConstantTransformer.constantTransformer((Object) linkedList0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IndexedCollection<Object, Predicate<Object>> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Predicate<Object>>) linkedList0, transformer0);
      indexedCollection0.add(uniquePredicate0);
      boolean boolean0 = indexedCollection0.containsAll(linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Object> transformer0 = ExceptionTransformer.exceptionTransformer();
      IndexedCollection<Object, Object> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      Collection<Object> collection0 = indexedCollection0.values(transformer0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Transformer<Predicate<Object>, Object> transformer0 = ConstantTransformer.constantTransformer((Object) linkedList0);
      IndexedCollection<Object, Predicate<Object>> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Predicate<Object>>) linkedList0, transformer0);
      indexedCollection0.clear();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Integer, Object> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      indexedCollection0.add(linkedList0);
      boolean boolean0 = indexedCollection0.removeAll(linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(boolean0);
  }
}
