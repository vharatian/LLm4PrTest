/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 19:37:07 GMT 2025
 */

package org.apache.commons.collections4.collection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.collection.AbstractCollectionDecorator;
import org.apache.commons.collections4.collection.IndexedCollection;
import org.apache.commons.collections4.collection.PredicatedCollection;
import org.apache.commons.collections4.collection.TransformedCollection;
import org.apache.commons.collections4.collection.UnmodifiableCollection;
import org.apache.commons.collections4.functors.ClosureTransformer;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.list.FixedSizeList;
import org.apache.commons.collections4.queue.CircularFifoQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AbstractCollectionDecorator_ESTest extends AbstractCollectionDecorator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      PredicatedCollection<InstanceofPredicate> predicatedCollection0 = PredicatedCollection.predicatedCollection((Collection<InstanceofPredicate>) linkedList0, (Predicate<? super InstanceofPredicate>) predicate0);
      predicatedCollection0.clear();
      assertTrue(predicatedCollection0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) linkedList0, (Equator<Object>) defaultEquator0);
      CircularFifoQueue<InstanceofPredicate> circularFifoQueue0 = new CircularFifoQueue<InstanceofPredicate>(4472);
      PredicatedCollection<InstanceofPredicate> predicatedCollection0 = PredicatedCollection.predicatedCollection((Collection<InstanceofPredicate>) circularFifoQueue0, (Predicate<? super InstanceofPredicate>) predicate0);
      Object[] objectArray0 = new Object[5];
      Object[] objectArray1 = predicatedCollection0.toArray(objectArray0);
      assertEquals(5, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      linkedList0.add(instanceofPredicate0);
      Transformer<Object, InstanceofPredicate> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformedCollection<InstanceofPredicate> transformedCollection0 = TransformedCollection.transformingCollection((Collection<InstanceofPredicate>) linkedList0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) transformer0);
      Object[] objectArray0 = transformedCollection0.toArray();
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CircularFifoQueue<LinkedList<Object>> circularFifoQueue0 = new CircularFifoQueue<LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, LinkedList<Object>> transformer0 = ConstantTransformer.constantTransformer(linkedList0);
      circularFifoQueue0.offer(linkedList0);
      TransformedCollection<LinkedList<Object>> transformedCollection0 = new TransformedCollection<LinkedList<Object>>(circularFifoQueue0, transformer0);
      boolean boolean0 = transformedCollection0.retainAll(linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<InstanceofPredicate> predicate0 = FalsePredicate.falsePredicate();
      PredicatedCollection<InstanceofPredicate> predicatedCollection0 = PredicatedCollection.predicatedCollection((Collection<InstanceofPredicate>) linkedList0, (Predicate<? super InstanceofPredicate>) predicate0);
      Transformer<Object, InstanceofPredicate> transformer0 = ConstantTransformer.nullTransformer();
      TransformedCollection<InstanceofPredicate> transformedCollection0 = new TransformedCollection<InstanceofPredicate>(predicatedCollection0, transformer0);
      CircularFifoQueue<TransformedCollection<InstanceofPredicate>> circularFifoQueue0 = new CircularFifoQueue<TransformedCollection<InstanceofPredicate>>();
      boolean boolean0 = circularFifoQueue0.add(transformedCollection0);
      ConstantTransformer<TransformedCollection<InstanceofPredicate>, Object> constantTransformer0 = new ConstantTransformer<TransformedCollection<InstanceofPredicate>, Object>(predicate0);
      IndexedCollection<Object, TransformedCollection<InstanceofPredicate>> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<TransformedCollection<InstanceofPredicate>>) circularFifoQueue0, (Transformer<TransformedCollection<InstanceofPredicate>, Object>) constantTransformer0);
      java.util.function.Predicate<Object> predicate1 = java.util.function.Predicate.isEqual((Object) transformedCollection0);
      boolean boolean1 = indexedCollection0.removeIf(predicate1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CircularFifoQueue<InstanceofPredicate> circularFifoQueue0 = new CircularFifoQueue<InstanceofPredicate>();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 5);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      boolean boolean0 = circularFifoQueue0.add(instanceofPredicate0);
      Transformer<Object, InstanceofPredicate> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      TransformedCollection<InstanceofPredicate> transformedCollection0 = new TransformedCollection<InstanceofPredicate>(circularFifoQueue0, transformer0);
      boolean boolean1 = transformedCollection0.removeAll(circularFifoQueue0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstantTransformer<Object, InstanceofPredicate> constantTransformer0 = new ConstantTransformer<Object, InstanceofPredicate>((InstanceofPredicate) null);
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      TransformedCollection<InstanceofPredicate> transformedCollection0 = TransformedCollection.transformingCollection((Collection<InstanceofPredicate>) linkedList0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) constantTransformer0);
      boolean boolean0 = transformedCollection0.add((InstanceofPredicate) null);
      boolean boolean1 = transformedCollection0.remove((Object) null);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<TruePredicate<Object>> linkedList0 = new LinkedList<TruePredicate<Object>>();
      FixedSizeList<TruePredicate<Object>> fixedSizeList0 = FixedSizeList.fixedSizeList((List<TruePredicate<Object>>) linkedList0);
      Iterator<TruePredicate<Object>> iterator0 = fixedSizeList0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      FixedSizeList<InstanceofPredicate> fixedSizeList0 = FixedSizeList.fixedSizeList((List<InstanceofPredicate>) linkedList0);
      Transformer<InstanceofPredicate, Object> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Object, InstanceofPredicate> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<InstanceofPredicate>) fixedSizeList0, transformer0);
      Collection<InstanceofPredicate> collection0 = indexedCollection0.decorated();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstantTransformer<Object, InstanceofPredicate> constantTransformer0 = new ConstantTransformer<Object, InstanceofPredicate>((InstanceofPredicate) null);
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      TransformedCollection<InstanceofPredicate> transformedCollection0 = TransformedCollection.transformingCollection((Collection<InstanceofPredicate>) linkedList0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) constantTransformer0);
      boolean boolean0 = transformedCollection0.add((InstanceofPredicate) null);
      boolean boolean1 = transformedCollection0.addAll(linkedList0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      PredicatedCollection<InstanceofPredicate> predicatedCollection0 = new PredicatedCollection<InstanceofPredicate>(linkedList0, predicate0);
      boolean boolean0 = predicatedCollection0.addAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      PredicatedCollection<InstanceofPredicate> predicatedCollection0 = PredicatedCollection.predicatedCollection((Collection<InstanceofPredicate>) linkedList0, (Predicate<? super InstanceofPredicate>) predicate0);
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      predicatedCollection0.add(instanceofPredicate0);
      int int0 = predicatedCollection0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CircularFifoQueue<LinkedList<Object>> circularFifoQueue0 = new CircularFifoQueue<LinkedList<Object>>();
      Transformer<Object, LinkedList<Object>> transformer0 = InvokerTransformer.invokerTransformer("O");
      TransformedCollection<LinkedList<Object>> transformedCollection0 = new TransformedCollection<LinkedList<Object>>(circularFifoQueue0, transformer0);
      // Undeclared exception!
      try { 
        transformedCollection0.toArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      linkedList0.add(instanceofPredicate0);
      ConstantTransformer<Object, InstanceofPredicate> constantTransformer0 = new ConstantTransformer<Object, InstanceofPredicate>(instanceofPredicate0);
      TransformedCollection<InstanceofPredicate> transformedCollection0 = TransformedCollection.transformingCollection((Collection<InstanceofPredicate>) linkedList0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) constantTransformer0);
      TransformedCollection<InstanceofPredicate>[] transformedCollectionArray0 = (TransformedCollection<InstanceofPredicate>[]) Array.newInstance(TransformedCollection.class, 3);
      // Undeclared exception!
      try { 
        transformedCollection0.toArray(transformedCollectionArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // org.apache.commons.collections4.functors.InstanceofPredicate
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FixedSizeList<Object> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Object>) linkedList0);
      // Undeclared exception!
      try { 
        fixedSizeList0.retainAll(linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // List is fixed size
         //
         verifyException("org.apache.commons.collections4.list.FixedSizeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      PredicatedCollection<InstanceofPredicate> predicatedCollection0 = PredicatedCollection.predicatedCollection((Collection<InstanceofPredicate>) linkedList0, (Predicate<? super InstanceofPredicate>) uniquePredicate0);
      // Undeclared exception!
      try { 
        predicatedCollection0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FixedSizeList<Object> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Object>) linkedList0);
      java.util.function.Predicate<Object> predicate0 = java.util.function.Predicate.isEqual((Object) linkedList0);
      // Undeclared exception!
      try { 
        fixedSizeList0.removeIf(predicate0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // List is fixed size
         //
         verifyException("org.apache.commons.collections4.list.FixedSizeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantTransformer<Object, InstanceofPredicate> constantTransformer0 = new ConstantTransformer<Object, InstanceofPredicate>((InstanceofPredicate) null);
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      TransformedCollection<InstanceofPredicate> transformedCollection0 = TransformedCollection.transformingCollection((Collection<InstanceofPredicate>) linkedList0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) constantTransformer0);
      // Undeclared exception!
      try { 
        transformedCollection0.removeIf((java.util.function.Predicate<? super InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FixedSizeList<Object> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Object>) linkedList0);
      // Undeclared exception!
      try { 
        fixedSizeList0.removeAll(linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // List is fixed size
         //
         verifyException("org.apache.commons.collections4.list.FixedSizeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FixedSizeList<Object> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Object>) linkedList0);
      // Undeclared exception!
      try { 
        fixedSizeList0.remove(linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // List is fixed size
         //
         verifyException("org.apache.commons.collections4.list.FixedSizeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<InstanceofPredicate> linkedList1 = new LinkedList<InstanceofPredicate>();
      Transformer<InstanceofPredicate, InstanceofPredicate> transformer0 = ConstantTransformer.nullTransformer();
      TransformedCollection<InstanceofPredicate> transformedCollection0 = TransformedCollection.transformingCollection((Collection<InstanceofPredicate>) linkedList1, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) transformer0);
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      transformedCollection0.add(instanceofPredicate0);
      Transformer<Object, InstanceofPredicate> transformer1 = ExceptionTransformer.exceptionTransformer();
      IndexedCollection<InstanceofPredicate, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, transformer1);
      // Undeclared exception!
      try { 
        indexedCollection0.containsAll(linkedList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FixedSizeList<Object> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Object>) linkedList0);
      // Undeclared exception!
      try { 
        fixedSizeList0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Collection<Object> collection0 = UnmodifiableCollection.unmodifiableCollection((Collection<?>) linkedList0);
      Class<InstanceofPredicate>[] classArray0 = (Class<InstanceofPredicate>[]) Array.newInstance(Class.class, 1);
      InvokerTransformer<Object, InstanceofPredicate> invokerTransformer0 = new InvokerTransformer<Object, InstanceofPredicate>("", classArray0, classArray0);
      IndexedCollection<InstanceofPredicate, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection(collection0, (Transformer<Object, InstanceofPredicate>) invokerTransformer0);
      // Undeclared exception!
      try { 
        indexedCollection0.contains(linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.util.LinkedList' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      FixedSizeList<Integer> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Integer>) linkedList0);
      IndexedCollection<InstanceofPredicate, Integer> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Integer>) fixedSizeList0, (Transformer<Integer, InstanceofPredicate>) null);
      // Undeclared exception!
      try { 
        indexedCollection0.contains(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FixedSizeList<Object> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Object>) linkedList0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      InvokerTransformer<Object, Object> invokerTransformer0 = new InvokerTransformer<Object, Object>("SWoB(\"R \"'>QBf0N@q@", classArray0, classArray0);
      IndexedCollection<Object, Object> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Object>) fixedSizeList0, (Transformer<Object, Object>) invokerTransformer0);
      ((AbstractCollectionDecorator)fixedSizeList0).setCollection(indexedCollection0);
      // Undeclared exception!
      try { 
        fixedSizeList0.contains(linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.collection.IndexedCollection cannot be cast to java.util.List
         //
         verifyException("org.apache.commons.collections4.list.AbstractListDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FixedSizeList<Object> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Object>) linkedList0);
      // Undeclared exception!
      try { 
        fixedSizeList0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // List is fixed size
         //
         verifyException("org.apache.commons.collections4.list.FixedSizeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Transformer<Object, InstanceofPredicate> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformedCollection<InstanceofPredicate> transformedCollection0 = TransformedCollection.transformingCollection((Collection<InstanceofPredicate>) linkedList0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) transformer0);
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      linkedList0.add(instanceofPredicate0);
      // Undeclared exception!
      try { 
        transformedCollection0.addAll(linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<LinkedList<InstanceofPredicate>> linkedList0 = new LinkedList<LinkedList<InstanceofPredicate>>();
      FixedSizeList<LinkedList<InstanceofPredicate>> fixedSizeList0 = FixedSizeList.fixedSizeList((List<LinkedList<InstanceofPredicate>>) linkedList0);
      // Undeclared exception!
      try { 
        fixedSizeList0.addAll(linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // List is fixed size
         //
         verifyException("org.apache.commons.collections4.list.FixedSizeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      linkedList0.push(instanceofPredicate0);
      PredicatedCollection<InstanceofPredicate> predicatedCollection0 = new PredicatedCollection<InstanceofPredicate>(linkedList0, uniquePredicate0);
      FixedSizeList<InstanceofPredicate> fixedSizeList0 = FixedSizeList.fixedSizeList((List<InstanceofPredicate>) linkedList0);
      // Undeclared exception!
      try { 
        predicatedCollection0.addAll(fixedSizeList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'org.apache.commons.collections4.functors.InstanceofPredicate@2' - Predicate 'org.apache.commons.collections4.functors.UniquePredicate@1' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Transformer<Object, InstanceofPredicate> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformedCollection<InstanceofPredicate> transformedCollection0 = TransformedCollection.transformingCollection((Collection<InstanceofPredicate>) linkedList0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) transformer0);
      // Undeclared exception!
      try { 
        transformedCollection0.add((InstanceofPredicate) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FixedSizeList<Object> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Object>) linkedList0);
      // Undeclared exception!
      try { 
        fixedSizeList0.add(linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // List is fixed size
         //
         verifyException("org.apache.commons.collections4.list.FixedSizeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CircularFifoQueue<InstanceofPredicate> circularFifoQueue0 = new CircularFifoQueue<InstanceofPredicate>();
      ClosureTransformer<InstanceofPredicate> closureTransformer0 = new ClosureTransformer<InstanceofPredicate>((Closure<? super InstanceofPredicate>) null);
      TransformedCollection<InstanceofPredicate> transformedCollection0 = TransformedCollection.transformingCollection((Collection<InstanceofPredicate>) circularFifoQueue0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) closureTransformer0);
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        transformedCollection0.add(instanceofPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.ClosureTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConstantTransformer<Object, InstanceofPredicate> constantTransformer0 = new ConstantTransformer<Object, InstanceofPredicate>((InstanceofPredicate) null);
      CircularFifoQueue<InstanceofPredicate> circularFifoQueue0 = new CircularFifoQueue<InstanceofPredicate>();
      TransformedCollection<InstanceofPredicate> transformedCollection0 = TransformedCollection.transformingCollection((Collection<InstanceofPredicate>) circularFifoQueue0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) constantTransformer0);
      // Undeclared exception!
      try { 
        transformedCollection0.add((InstanceofPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Attempted to add null object to queue
         //
         verifyException("org.apache.commons.collections4.queue.CircularFifoQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      PredicatedCollection<InstanceofPredicate> predicatedCollection0 = PredicatedCollection.predicatedCollection((Collection<InstanceofPredicate>) linkedList0, (Predicate<? super InstanceofPredicate>) predicate0);
      // Undeclared exception!
      try { 
        predicatedCollection0.add((InstanceofPredicate) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'null' - Predicate 'org.apache.commons.collections4.functors.FalsePredicate@2' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      PredicatedCollection<InstanceofPredicate> predicatedCollection0 = PredicatedCollection.predicatedCollection((Collection<InstanceofPredicate>) linkedList0, (Predicate<? super InstanceofPredicate>) predicate0);
      int int0 = predicatedCollection0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ConstantTransformer<Object, InstanceofPredicate> constantTransformer0 = new ConstantTransformer<Object, InstanceofPredicate>((InstanceofPredicate) null);
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      TransformedCollection<InstanceofPredicate> transformedCollection0 = TransformedCollection.transformingCollection((Collection<InstanceofPredicate>) linkedList0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) constantTransformer0);
      transformedCollection0.add((InstanceofPredicate) null);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      FixedSizeList<Object> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Object>) linkedList1);
      boolean boolean0 = fixedSizeList0.containsAll(transformedCollection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Transformer<Object, InstanceofPredicate> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformedCollection<InstanceofPredicate> transformedCollection0 = TransformedCollection.transformingCollection((Collection<InstanceofPredicate>) linkedList0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) transformer0);
      boolean boolean0 = transformedCollection0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Transformer<Object, InstanceofPredicate> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformedCollection<InstanceofPredicate> transformedCollection0 = TransformedCollection.transformingCollection((Collection<InstanceofPredicate>) linkedList0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) transformer0);
      assertTrue(transformedCollection0.isEmpty());
      
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      linkedList0.add(instanceofPredicate0);
      boolean boolean0 = transformedCollection0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) null);
      FixedSizeList<Object> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Object>) linkedList0);
      boolean boolean0 = fixedSizeList0.contains((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      PredicatedCollection<InstanceofPredicate> predicatedCollection0 = PredicatedCollection.predicatedCollection((Collection<InstanceofPredicate>) linkedList0, (Predicate<? super InstanceofPredicate>) predicate0);
      boolean boolean0 = predicatedCollection0.contains(predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) null, (Transformer<Object, UniquePredicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FixedSizeList<Object> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Object>) linkedList0);
      String string0 = fixedSizeList0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Transformer<Object, InstanceofPredicate> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformedCollection<InstanceofPredicate> transformedCollection0 = TransformedCollection.transformingCollection((Collection<InstanceofPredicate>) linkedList0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) transformer0);
      boolean boolean0 = transformedCollection0.remove(transformer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      PredicatedCollection<InstanceofPredicate> predicatedCollection0 = PredicatedCollection.predicatedCollection((Collection<InstanceofPredicate>) linkedList0, (Predicate<? super InstanceofPredicate>) uniquePredicate0);
      java.util.function.Predicate<Object> predicate0 = java.util.function.Predicate.isEqual((Object) uniquePredicate0);
      boolean boolean0 = predicatedCollection0.removeIf(predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FixedSizeList<Object> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Object>) linkedList0);
      Object[] objectArray0 = fixedSizeList0.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      PredicatedCollection<InstanceofPredicate> predicatedCollection0 = PredicatedCollection.predicatedCollection((Collection<InstanceofPredicate>) linkedList0, (Predicate<? super InstanceofPredicate>) predicate0);
      boolean boolean0 = predicatedCollection0.removeAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CircularFifoQueue<LinkedList<Object>> circularFifoQueue0 = new CircularFifoQueue<LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, LinkedList<Object>> transformer0 = ConstantTransformer.constantTransformer(linkedList0);
      TransformedCollection<LinkedList<Object>> transformedCollection0 = new TransformedCollection<LinkedList<Object>>(circularFifoQueue0, transformer0);
      boolean boolean0 = transformedCollection0.retainAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      Transformer<Object, InstanceofPredicate> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformedCollection<InstanceofPredicate> transformedCollection0 = TransformedCollection.transformingCollection((Collection<InstanceofPredicate>) linkedList0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) transformer0);
      PredicatedCollection<InstanceofPredicate> predicatedCollection0 = PredicatedCollection.predicatedCollection((Collection<InstanceofPredicate>) linkedList0, (Predicate<? super InstanceofPredicate>) predicate0);
      boolean boolean0 = transformedCollection0.containsAll(predicatedCollection0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FixedSizeList<Object> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Object>) linkedList0);
      Transformer<Object, InstanceofPredicate> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<InstanceofPredicate, Object> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Object>) fixedSizeList0, transformer0);
      // Undeclared exception!
      try { 
        indexedCollection0.add(fixedSizeList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // List is fixed size
         //
         verifyException("org.apache.commons.collections4.list.FixedSizeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FixedSizeList<Object> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Object>) linkedList0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[0];
      InstanceofPredicate[] instanceofPredicateArray1 = fixedSizeList0.toArray(instanceofPredicateArray0);
      assertEquals(0, instanceofPredicateArray1.length);
  }
}
