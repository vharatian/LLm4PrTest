/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 19:27:45 GMT 2025
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FilterInputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PipedInputStream;
import java.util.Locale;
import java.util.Map;
import org.apache.commons.collections4.map.AbstractHashedMap;
import org.apache.commons.collections4.map.AbstractLinkedMap;
import org.apache.commons.collections4.map.LRUMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class LRUMap_ESTest extends LRUMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LRUMap<Object, Object> lRUMap0 = new LRUMap<Object, Object>(1, true);
      // Undeclared exception!
      try { 
        lRUMap0.doWriteObject((ObjectOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LRUMap<Object, Object> lRUMap0 = new LRUMap<Object, Object>(3407, 1076.3629F);
      int int0 = lRUMap0.maxSize();
      assertEquals(3407, int0);
      assertFalse(lRUMap0.isScanUntilRemovable());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LRUMap<Object, Object> lRUMap0 = new LRUMap<Object, Object>();
      lRUMap0.size = 1119;
      // Undeclared exception!
      try { 
        lRUMap0.addMapping(10, 10, lRUMap0, (Object) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Entry.next=null, data[removeIndex]=null previous=null key={} value=null size=1119 maxSize=100 Please check that your keys are immutable, and that you have used synchronization properly. If so, then please report this to dev@commons.apache.org as a bug.
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LRUMap<Object, Locale.Category> lRUMap0 = new LRUMap<Object, Locale.Category>();
      AbstractLinkedMap.LinkEntry<Object, Locale.Category> abstractLinkedMap_LinkEntry0 = lRUMap0.header;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      // Undeclared exception!
      try { 
        lRUMap0.reuseMapping(abstractLinkedMap_LinkEntry0, 32, 32, lRUMap0, locale_Category0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Entry.next=null, data[removeIndex]=null previous=null key={} value=FORMAT size=0 maxSize=100 Please check that your keys are immutable, and that you have used synchronization properly. If so, then please report this to dev@commons.apache.org as a bug.
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LRUMap<Object, AbstractLinkedMap.LinkEntry<Object, Object>> lRUMap0 = new LRUMap<Object, AbstractLinkedMap.LinkEntry<Object, Object>>(1242, 1242);
      AbstractLinkedMap.LinkEntry<Object, AbstractLinkedMap.LinkEntry<Object, Object>> abstractLinkedMap_LinkEntry0 = lRUMap0.header;
      LRUMap<Object, AbstractLinkedMap.LinkEntry<Object, Object>> lRUMap1 = new LRUMap<Object, AbstractLinkedMap.LinkEntry<Object, Object>>(1242);
      lRUMap1.modCount = (-2116);
      lRUMap1.moveToMRU(abstractLinkedMap_LinkEntry0);
      assertFalse(lRUMap1.isScanUntilRemovable());
      assertEquals(1242, lRUMap1.maxSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LRUMap<Locale.Category, Object> lRUMap0 = new LRUMap<Locale.Category, Object>(25);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      lRUMap0.addMapping(25, 25, locale_Category0, (Object) null);
      AbstractLinkedMap.LinkEntry<Locale.Category, Object> abstractLinkedMap_LinkEntry0 = lRUMap0.header;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      lRUMap0.updateEntry(abstractLinkedMap_LinkEntry0, locale_Category1);
      assertFalse(lRUMap0.isScanUntilRemovable());
      assertEquals(25, lRUMap0.maxSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LRUMap<AbstractLinkedMap.LinkEntry<Object, Locale.Category>, Object> lRUMap0 = new LRUMap<AbstractLinkedMap.LinkEntry<Object, Locale.Category>, Object>(25, 25, 25);
      assertFalse(lRUMap0.isScanUntilRemovable());
      assertEquals(25, lRUMap0.maxSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LRUMap<Object, Locale.Category> lRUMap0 = new LRUMap<Object, Locale.Category>();
      AbstractLinkedMap.LinkEntry<Object, Locale.Category> abstractLinkedMap_LinkEntry0 = lRUMap0.header;
      boolean boolean0 = lRUMap0.removeLRU(abstractLinkedMap_LinkEntry0);
      assertEquals(100, lRUMap0.maxSize());
      assertTrue(boolean0);
      assertFalse(lRUMap0.isScanUntilRemovable());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LRUMap<AbstractLinkedMap.LinkEntry<Object, Locale.Category>, Object> lRUMap0 = new LRUMap<AbstractLinkedMap.LinkEntry<Object, Locale.Category>, Object>(2813, 1.0F, true);
      boolean boolean0 = lRUMap0.isScanUntilRemovable();
      assertTrue(boolean0);
      assertEquals(2813, lRUMap0.maxSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AbstractHashedMap<Locale.Category, Locale.Category> abstractHashedMap0 = new AbstractHashedMap<Locale.Category, Locale.Category>(1133, 1133, 1);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      abstractHashedMap0.put(locale_Category0, locale_Category0);
      LRUMap<Object, Locale.Category> lRUMap0 = new LRUMap<Object, Locale.Category>(abstractHashedMap0, true);
      LRUMap<Object, Locale.Category> lRUMap1 = lRUMap0.clone();
      assertTrue(lRUMap1.isScanUntilRemovable());
      assertTrue(lRUMap1.isFull());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LRUMap<Object, Locale.Category> lRUMap0 = new LRUMap<Object, Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      // Undeclared exception!
      try { 
        lRUMap0.updateEntry((AbstractHashedMap.HashEntry<Object, Locale.Category>) null, locale_Category0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LRUMap<Object, Locale.Category> lRUMap0 = new LRUMap<Object, Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      AbstractHashedMap.HashEntry<Object, Locale.Category> abstractHashedMap_HashEntry0 = new AbstractHashedMap.HashEntry<Object, Locale.Category>((AbstractHashedMap.HashEntry<Object, Locale.Category>) null, 1590, (Object) null, locale_Category0);
      // Undeclared exception!
      try { 
        lRUMap0.updateEntry(abstractHashedMap_HashEntry0, locale_Category0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.AbstractHashedMap$HashEntry cannot be cast to org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LRUMap<Object, Object> lRUMap0 = new LRUMap<Object, Object>();
      // Undeclared exception!
      try { 
        lRUMap0.moveToMRU((AbstractLinkedMap.LinkEntry<Object, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LRUMap<Object, AbstractLinkedMap.LinkEntry<Object, Object>> lRUMap0 = new LRUMap<Object, AbstractLinkedMap.LinkEntry<Object, Object>>(1242, 1242);
      AbstractLinkedMap.LinkEntry<Object, AbstractLinkedMap.LinkEntry<Object, Object>> abstractLinkedMap_LinkEntry0 = lRUMap0.header;
      // Undeclared exception!
      try { 
        lRUMap0.moveToMRU(abstractLinkedMap_LinkEntry0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't move header to MRU (please report this to dev@commons.apache.org)
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LRUMap<Object, Object> lRUMap0 = new LRUMap<Object, Object>();
      LRUMap<Object, Object> lRUMap1 = new LRUMap<Object, Object>(1, 1);
      // Undeclared exception!
      try { 
        lRUMap1.addMapping(1, 1, lRUMap0, lRUMap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LRUMap<Object, Locale.Category> lRUMap0 = null;
      try {
        lRUMap0 = new LRUMap<Object, Locale.Category>((Map<?, ? extends Locale.Category>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LRUMap<Locale.Category, Object> lRUMap0 = null;
      try {
        lRUMap0 = new LRUMap<Locale.Category, Object>((Map<? extends Locale.Category, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LRUMap<Object, FilterInputStream> lRUMap0 = null;
      try {
        lRUMap0 = new LRUMap<Object, FilterInputStream>((-2163), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Initial capacity must be a non negative number
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LRUMap<Locale.Category, Object> lRUMap0 = null;
      try {
        lRUMap0 = new LRUMap<Locale.Category, Object>((-1818), 12, 12, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // LRUMap max size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LRUMap<AbstractLinkedMap.LinkEntry<Object, Locale.Category>, AbstractLinkedMap.LinkEntry<Object, Object>> lRUMap0 = null;
      try {
        lRUMap0 = new LRUMap<AbstractLinkedMap.LinkEntry<Object, Locale.Category>, AbstractLinkedMap.LinkEntry<Object, Object>>((-2209), (-2209));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Initial capacity must be a non negative number
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LRUMap<Object, Locale.Category> lRUMap0 = null;
      try {
        lRUMap0 = new LRUMap<Object, Locale.Category>((-782), (-782), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Initial capacity must be a non negative number
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LRUMap<Object, AbstractLinkedMap.LinkEntry<Object, Object>> lRUMap0 = null;
      try {
        lRUMap0 = new LRUMap<Object, AbstractLinkedMap.LinkEntry<Object, Object>>(0, 0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LRUMap<Object, Object> lRUMap0 = null;
      try {
        lRUMap0 = new LRUMap<Object, Object>((-655));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Initial capacity must be a non negative number
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LRUMap<Object, Object> lRUMap0 = new LRUMap<Object, Object>();
      LRUMap<Object, Object> lRUMap1 = new LRUMap<Object, Object>(1, 1);
      assertFalse(lRUMap1.isFull());
      
      lRUMap1.put(lRUMap0, lRUMap0);
      boolean boolean0 = lRUMap1.isFull();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LRUMap<Object, Object> lRUMap0 = new LRUMap<Object, Object>();
      lRUMap0.isFull();
      assertEquals(100, lRUMap0.maxSize());
      assertFalse(lRUMap0.isScanUntilRemovable());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LRUMap<Object, Locale.Category> lRUMap0 = new LRUMap<Object, Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      lRUMap0.putIfAbsent((Object) null, locale_Category0);
      lRUMap0.get((Object) null, true);
      assertEquals(100, lRUMap0.maxSize());
      assertFalse(lRUMap0.isScanUntilRemovable());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LRUMap<Object, AbstractLinkedMap.LinkEntry<Object, Object>> lRUMap0 = new LRUMap<Object, AbstractLinkedMap.LinkEntry<Object, Object>>(2663, true);
      LRUMap<AbstractLinkedMap.LinkEntry<Object, Object>, AbstractLinkedMap.LinkEntry<Object, Object>> lRUMap1 = new LRUMap<AbstractLinkedMap.LinkEntry<Object, Object>, AbstractLinkedMap.LinkEntry<Object, Object>>(2663, 639, 2663, false);
      lRUMap1.get((Object) lRUMap0, false);
      assertEquals(2663, lRUMap1.maxSize());
      assertFalse(lRUMap1.isScanUntilRemovable());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LRUMap<Object, Object> lRUMap0 = new LRUMap<Object, Object>();
      lRUMap0.put(lRUMap0, lRUMap0);
      LRUMap<Object, Object> lRUMap1 = new LRUMap<Object, Object>(lRUMap0);
      assertFalse(lRUMap1.isScanUntilRemovable());
      assertEquals(100, lRUMap0.maxSize());
      assertTrue(lRUMap1.isFull());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LRUMap<Object, Locale.Category> lRUMap0 = new LRUMap<Object, Locale.Category>();
      lRUMap0.header = null;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      // Undeclared exception!
      try { 
        lRUMap0.reuseMapping((AbstractLinkedMap.LinkEntry<Object, Locale.Category>) null, 1238, 1238, (Object) null, locale_Category0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // NPE, entry=null entryIsHeader=true key=null value=DISPLAY size=0 maxSize=100 Please check that your keys are immutable, and that you have used synchronization properly. If so, then please report this to dev@commons.apache.org as a bug.
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LRUMap<Object, Locale.Category> lRUMap0 = new LRUMap<Object, Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      // Undeclared exception!
      try { 
        lRUMap0.reuseMapping((AbstractLinkedMap.LinkEntry<Object, Locale.Category>) null, 1228, 1228, (Object) null, locale_Category0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // NPE, entry=null entryIsHeader=false key=null value=DISPLAY size=0 maxSize=100 Please check that your keys are immutable, and that you have used synchronization properly. If so, then please report this to dev@commons.apache.org as a bug.
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LRUMap<Object, Object> lRUMap0 = new LRUMap<Object, Object>();
      lRUMap0.addMapping(1, 1, lRUMap0, (Object) null);
      AbstractLinkedMap.LinkEntry<Object, Object> abstractLinkedMap_LinkEntry0 = new AbstractLinkedMap.LinkEntry<Object, Object>((AbstractHashedMap.HashEntry<Object, Object>) null, 1, lRUMap0, (Object) null);
      LRUMap<AbstractLinkedMap.LinkEntry<PipedInputStream, PipedInputStream>, Object> lRUMap1 = new LRUMap<AbstractLinkedMap.LinkEntry<PipedInputStream, PipedInputStream>, Object>(1, 1, 1910.1F, false);
      Object object0 = lRUMap1.convertKey(lRUMap0);
      // Undeclared exception!
      try { 
        lRUMap0.reuseMapping(abstractLinkedMap_LinkEntry0, 1, 1, lRUMap0, object0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Entry.next=null, data[removeIndex]={(this Map)=null}=null previous={(this Map)=null}=null key={(this Map)=null} value={(this Map)=null} size=1 maxSize=100 Please check that your keys are immutable, and that you have used synchronization properly. If so, then please report this to dev@commons.apache.org as a bug.
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LRUMap<Object, Locale.Category> lRUMap0 = new LRUMap<Object, Locale.Category>(44, 333.0F, false);
      AbstractLinkedMap.LinkEntry<Object, Locale.Category> abstractLinkedMap_LinkEntry0 = lRUMap0.header;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      AbstractLinkedMap.LinkEntry<Object, Locale.Category> abstractLinkedMap_LinkEntry1 = new AbstractLinkedMap.LinkEntry<Object, Locale.Category>(abstractLinkedMap_LinkEntry0, 1163, (Object) null, locale_Category0);
      // Undeclared exception!
      try { 
        lRUMap0.updateEntry(abstractLinkedMap_LinkEntry1, locale_Category0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Entry.before is null. Please check that your keys are immutable, and that you have used synchronization properly. If so, then please report this to dev@commons.apache.org as a bug.
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LRUMap<Object, Object> lRUMap0 = new LRUMap<Object, Object>();
      LRUMap<Object, Object> lRUMap1 = new LRUMap<Object, Object>(1, 1);
      AbstractLinkedMap.LinkEntry<Object, Object> abstractLinkedMap_LinkEntry0 = lRUMap1.header;
      lRUMap0.updateEntry(abstractLinkedMap_LinkEntry0, lRUMap1);
      lRUMap1.put(lRUMap0, lRUMap0);
      // Undeclared exception!
      try { 
        lRUMap1.addMapping(1, 1, lRUMap0, (Object) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Entry.next=null, data[removeIndex]=null previous=null key={} value=null size=1 maxSize=1 Please check that your keys are immutable, and that you have used synchronization properly. If so, then please report this to dev@commons.apache.org as a bug.
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LRUMap<Object, Locale.Category> lRUMap0 = new LRUMap<Object, Locale.Category>();
      assertFalse(lRUMap0.isFull());
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      lRUMap0.putIfAbsent((Object) null, locale_Category0);
      lRUMap0.get((Object) null, false);
      assertFalse(lRUMap0.isScanUntilRemovable());
      assertEquals(100, lRUMap0.maxSize());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LRUMap<Locale.Category, AbstractLinkedMap.LinkEntry<Object, Object>> lRUMap0 = null;
      try {
        lRUMap0 = new LRUMap<Locale.Category, AbstractLinkedMap.LinkEntry<Object, Object>>(1, 337, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // LRUMap initial size must not be greather than max size
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LRUMap<Locale.Category, Locale.Category> lRUMap0 = new LRUMap<Locale.Category, Locale.Category>();
      MockFile mockFile0 = new MockFile((File) null, "mq-xu_]rd$Z]X'");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      lRUMap0.doWriteObject(objectOutputStream0);
      assertEquals(100, lRUMap0.maxSize());
      assertFalse(lRUMap0.isScanUntilRemovable());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AbstractHashedMap<Locale.Category, Locale.Category> abstractHashedMap0 = new AbstractHashedMap<Locale.Category, Locale.Category>(1133, 1133, 1);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      abstractHashedMap0.put(locale_Category0, locale_Category0);
      LRUMap<Object, Locale.Category> lRUMap0 = new LRUMap<Object, Locale.Category>(abstractHashedMap0, true);
      // Undeclared exception!
      try { 
        lRUMap0.doReadObject((ObjectInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LRUMap<AbstractLinkedMap.LinkEntry<Object, Object>, AbstractLinkedMap.LinkEntry<Object, Object>> lRUMap0 = new LRUMap<AbstractLinkedMap.LinkEntry<Object, Object>, AbstractLinkedMap.LinkEntry<Object, Object>>(25);
      boolean boolean0 = lRUMap0.isScanUntilRemovable();
      assertFalse(boolean0);
      assertEquals(25, lRUMap0.maxSize());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LRUMap<Object, Object> lRUMap0 = new LRUMap<Object, Object>();
      LRUMap<Object, Object> lRUMap1 = null;
      try {
        lRUMap1 = new LRUMap<Object, Object>(lRUMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // LRUMap max size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LRUMap<Object, Object> lRUMap0 = new LRUMap<Object, Object>();
      LRUMap<Object, Object> lRUMap1 = new LRUMap<Object, Object>(1, 1);
      lRUMap1.put(lRUMap0, lRUMap0);
      lRUMap1.addMapping(1, 1, lRUMap0, (Object) null);
      lRUMap0.addMapping(1, 1, (Object) null, lRUMap1);
      AbstractLinkedMap.LinkEntry<Object, Object> abstractLinkedMap_LinkEntry0 = lRUMap1.getEntry(lRUMap0);
      LRUMap<AbstractLinkedMap.LinkEntry<PipedInputStream, PipedInputStream>, Object> lRUMap2 = new LRUMap<AbstractLinkedMap.LinkEntry<PipedInputStream, PipedInputStream>, Object>(1, 1, 1910.1F, false);
      Object object0 = lRUMap2.convertKey(lRUMap0);
      // Undeclared exception!
      try { 
        lRUMap1.reuseMapping(abstractLinkedMap_LinkEntry0, 1, 1, lRUMap0, object0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LRUMap<Object, Locale.Category> lRUMap0 = new LRUMap<Object, Locale.Category>();
      LRUMap<Object, Object> lRUMap1 = null;
      try {
        lRUMap1 = new LRUMap<Object, Object>(lRUMap0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // LRUMap max size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LRUMap<Object, AbstractLinkedMap.LinkEntry<Object, Object>> lRUMap0 = new LRUMap<Object, AbstractLinkedMap.LinkEntry<Object, Object>>(791, false);
      LRUMap<Object, AbstractLinkedMap.LinkEntry<Object, Object>> lRUMap1 = lRUMap0.clone();
      assertEquals(791, lRUMap1.maxSize());
      assertFalse(lRUMap1.isScanUntilRemovable());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LRUMap<Object, Object> lRUMap0 = new LRUMap<Object, Object>();
      LRUMap<Locale.Category, AbstractLinkedMap.LinkEntry<Object, Object>> lRUMap1 = new LRUMap<Locale.Category, AbstractLinkedMap.LinkEntry<Object, Object>>();
      lRUMap1.get((Object) lRUMap0);
      assertEquals(100, lRUMap1.maxSize());
      assertFalse(lRUMap1.isScanUntilRemovable());
  }
}
