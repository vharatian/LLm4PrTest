/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 08:56:50 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter;
import org.apache.commons.collections4.bloomfilter.BitMapProducer;
import org.apache.commons.collections4.bloomfilter.BloomFilter;
import org.apache.commons.collections4.bloomfilter.EnhancedDoubleHasher;
import org.apache.commons.collections4.bloomfilter.Hasher;
import org.apache.commons.collections4.bloomfilter.IndexProducer;
import org.apache.commons.collections4.bloomfilter.Shape;
import org.apache.commons.collections4.bloomfilter.SimpleBloomFilter;
import org.apache.commons.collections4.bloomfilter.SparseBloomFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CountingBloomFilter_ESTest extends CountingBloomFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Shape shape0 = Shape.fromKM(868, 868);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(868, 868);
      IndexProducer indexProducer0 = enhancedDoubleHasher0.indices(shape0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)68;
      EnhancedDoubleHasher enhancedDoubleHasher1 = new EnhancedDoubleHasher(byteArray0);
      arrayCountingBloomFilter0.merge((Hasher) enhancedDoubleHasher1);
      arrayCountingBloomFilter0.merge(indexProducer0);
      int int0 = arrayCountingBloomFilter0.getMaxInsert((BitMapProducer) arrayCountingBloomFilter0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Shape shape0 = Shape.fromKM(955, 955);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      int[] intArray0 = new int[7];
      intArray0[3] = (-2147483647);
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.remove(indexProducer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Filter only accepts values in the [0,955) range
         //
         verifyException("org.apache.commons.collections4.bloomfilter.CountingBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Shape shape0 = Shape.fromKM(867, 867);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      int[] intArray0 = new int[6];
      intArray0[5] = (-1777);
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.merge(indexProducer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Filter only accepts values in the [0,867) range
         //
         verifyException("org.apache.commons.collections4.bloomfilter.CountingBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Shape shape0 = Shape.fromKM(868, 868);
      byte[] byteArray0 = new byte[3];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      boolean boolean1 = arrayCountingBloomFilter0.remove((IndexProducer) arrayCountingBloomFilter0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Shape shape0 = Shape.fromNM(31, 31);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(0L, 1L);
      arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      boolean boolean0 = arrayCountingBloomFilter0.remove((BloomFilter) arrayCountingBloomFilter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Shape shape0 = Shape.fromKM(868, 868);
      byte[] byteArray0 = new byte[3];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      boolean boolean1 = arrayCountingBloomFilter0.remove((BitMapProducer) simpleBloomFilter0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1597, 1597);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(4L, Integer.MAX_VALUE);
      arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      boolean boolean0 = arrayCountingBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Shape shape0 = Shape.fromNM(868, 868);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.merge((BloomFilter) simpleBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Shape shape0 = Shape.fromNM(868, 868);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      byte[] byteArray0 = new byte[7];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      boolean boolean0 = arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      boolean boolean1 = arrayCountingBloomFilter0.merge((BloomFilter) simpleBloomFilter0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Shape shape0 = Shape.fromNM(868, 868);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.merge((BitMapProducer) arrayCountingBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1597, 1597);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(0, (-1L));
      arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      boolean boolean0 = arrayCountingBloomFilter0.merge((BitMapProducer) sparseBloomFilter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Shape shape0 = Shape.fromKM(249, 249);
      byte[] byteArray0 = new byte[8];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      IndexProducer indexProducer0 = enhancedDoubleHasher0.indices(shape0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      arrayCountingBloomFilter0.merge(indexProducer0);
      int int0 = arrayCountingBloomFilter0.getMaxInsert(indexProducer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Shape shape0 = Shape.fromNM(853, 853);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      int int0 = arrayCountingBloomFilter0.getMaxInsert((IndexProducer) arrayCountingBloomFilter0);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Shape shape0 = Shape.fromNM(868, 868);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(673L, (-3200L));
      arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      int int0 = arrayCountingBloomFilter0.getMaxInsert((IndexProducer) arrayCountingBloomFilter0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Shape shape0 = Shape.fromNM(846, 846);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(846, 846);
      int int0 = arrayCountingBloomFilter0.getMaxInsert((Hasher) enhancedDoubleHasher0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Shape shape0 = Shape.fromKM(868, 868);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(868, 868);
      IndexProducer indexProducer0 = enhancedDoubleHasher0.indices(shape0);
      arrayCountingBloomFilter0.merge(indexProducer0);
      int int0 = arrayCountingBloomFilter0.getMaxInsert((Hasher) enhancedDoubleHasher0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Shape shape0 = Shape.fromKM(868, 868);
      byte[] byteArray0 = new byte[3];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      int int0 = arrayCountingBloomFilter0.getMaxInsert((Hasher) enhancedDoubleHasher0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1597, 1597);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      byte[] byteArray0 = new byte[1];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      int int0 = arrayCountingBloomFilter0.getMaxInsert((BloomFilter) sparseBloomFilter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Shape shape0 = Shape.fromKM(868, 868);
      byte[] byteArray0 = new byte[3];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      int int0 = arrayCountingBloomFilter0.getMaxInsert((BloomFilter) arrayCountingBloomFilter0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Shape shape0 = Shape.fromKM(868, 868);
      byte[] byteArray0 = new byte[3];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      int int0 = arrayCountingBloomFilter0.getMaxInsert((BitMapProducer) arrayCountingBloomFilter0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Shape shape0 = Shape.fromKM(853, 853);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.remove((IndexProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // indexProducer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1563, 1563);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.remove((Hasher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // hasher
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Shape shape0 = Shape.fromKM(853, 853);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.remove((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Shape shape0 = Shape.fromKM(881, 881);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      BitMapProducer bitMapProducer0 = BitMapProducer.fromIndexProducer(arrayCountingBloomFilter0, 1431655765);
      // Undeclared exception!
      arrayCountingBloomFilter0.remove(bitMapProducer0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Shape shape0 = Shape.fromKM(872, 872);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.remove((BitMapProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // bitMapProducer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1073741824, 64);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      long[] longArray0 = new long[5];
      longArray0[2] = (long) 64;
      BitMapProducer bitMapProducer0 = BitMapProducer.fromBitMapArray(longArray0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.remove(bitMapProducer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Filter only accepts values in the [0,64) range
         //
         verifyException("org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2147483631, 868);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(2147483631, 0L);
      IndexProducer indexProducer0 = enhancedDoubleHasher0.indices(shape0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      arrayCountingBloomFilter0.merge(indexProducer0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Shape shape0 = Shape.fromKM(868, 868);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.merge((IndexProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // indexProducer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Shape shape0 = Shape.fromKM(868, 868);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      BitMapProducer bitMapProducer0 = BitMapProducer.fromIndexProducer(arrayCountingBloomFilter0, 2147221535);
      // Undeclared exception!
      arrayCountingBloomFilter0.merge(bitMapProducer0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(36, 36, 36);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      long[] longArray0 = new long[5];
      longArray0[1] = (long) 36;
      BitMapProducer bitMapProducer0 = BitMapProducer.fromBitMapArray(longArray0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.merge(bitMapProducer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Filter only accepts values in the [0,36) range
         //
         verifyException("org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2143297520, 1867);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      byte[] byteArray0 = new byte[6];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      IndexProducer indexProducer0 = enhancedDoubleHasher0.indices(shape0);
      // Undeclared exception!
      arrayCountingBloomFilter0.getMaxInsert(indexProducer0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1376, 1376);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      int[] intArray0 = new int[3];
      intArray0[0] = 1376;
      intArray0[1] = 1376;
      intArray0[2] = 1376;
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.getMaxInsert(indexProducer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1376
         //
         verifyException("org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Shape shape0 = Shape.fromKM(868, 868);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.getMaxInsert((Hasher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.CountingBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Shape shape0 = Shape.fromKM(891, 891);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      Shape shape1 = Shape.fromKM(2147483520, 2147483520);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape1);
      // Undeclared exception!
      arrayCountingBloomFilter0.getMaxInsert((BloomFilter) sparseBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1379, 1379);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.getMaxInsert((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // producer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Shape shape0 = Shape.fromKM(868, 868);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      BitMapProducer bitMapProducer0 = BitMapProducer.fromIndexProducer(arrayCountingBloomFilter0, 2147483639);
      // Undeclared exception!
      arrayCountingBloomFilter0.getMaxInsert(bitMapProducer0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Shape shape0 = Shape.fromKM(868, 868);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.getMaxInsert((BitMapProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // producer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Shape shape0 = Shape.fromKM(868, 868);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(868, 868);
      IndexProducer indexProducer0 = enhancedDoubleHasher0.indices(shape0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      arrayCountingBloomFilter0.merge(indexProducer0);
      long[] longArray0 = new long[0];
      BitMapProducer bitMapProducer0 = BitMapProducer.fromBitMapArray(longArray0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.getMaxInsert(bitMapProducer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Shape shape0 = Shape.fromNM(919, 919);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.remove((IndexProducer) arrayCountingBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Shape shape0 = Shape.fromKM(881, 881);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.remove((BitMapProducer) arrayCountingBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Shape shape0 = Shape.fromKM(868, 868);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(868, 868);
      IndexProducer indexProducer0 = enhancedDoubleHasher0.indices(shape0);
      arrayCountingBloomFilter0.merge(indexProducer0);
      ArrayCountingBloomFilter arrayCountingBloomFilter1 = arrayCountingBloomFilter0.copy();
      arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      int int0 = arrayCountingBloomFilter1.getMaxInsert((BitMapProducer) arrayCountingBloomFilter0);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Shape shape0 = Shape.fromKM(891, 891);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 891;
      BitMapProducer bitMapProducer0 = BitMapProducer.fromBitMapArray(longArray0);
      int int0 = arrayCountingBloomFilter0.getMaxInsert(bitMapProducer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Shape shape0 = Shape.fromKM(853, 853);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.remove((BloomFilter) arrayCountingBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Shape shape0 = Shape.fromNM(151, 151);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.merge((BitMapProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // bitMapProducer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1379, 1379);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      int int0 = arrayCountingBloomFilter0.getMaxInsert((BloomFilter) arrayCountingBloomFilter0);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Shape shape0 = Shape.fromKM(Integer.MAX_VALUE, 1854);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      byte[] byteArray0 = new byte[8];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      // Undeclared exception!
      arrayCountingBloomFilter0.getMaxInsert((Hasher) enhancedDoubleHasher0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1373, 1373);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.merge((Hasher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // hasher
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Shape shape0 = Shape.fromKM(955, 955);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.merge((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1547, 1547);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.getMaxInsert((IndexProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.CountingBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1379, 1379);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      IndexProducer indexProducer0 = arrayCountingBloomFilter0.uniqueIndices();
      assertSame(arrayCountingBloomFilter0, indexProducer0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Shape shape0 = Shape.fromKM(Integer.MAX_VALUE, 966);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      byte[] byteArray0 = new byte[1];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      // Undeclared exception!
      arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
  }
}
