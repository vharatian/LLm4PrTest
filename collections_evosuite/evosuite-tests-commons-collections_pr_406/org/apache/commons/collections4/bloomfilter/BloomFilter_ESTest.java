/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 08:52:35 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter;
import org.apache.commons.collections4.bloomfilter.BitMapProducer;
import org.apache.commons.collections4.bloomfilter.BloomFilter;
import org.apache.commons.collections4.bloomfilter.EnhancedDoubleHasher;
import org.apache.commons.collections4.bloomfilter.Hasher;
import org.apache.commons.collections4.bloomfilter.IndexProducer;
import org.apache.commons.collections4.bloomfilter.Shape;
import org.apache.commons.collections4.bloomfilter.SimpleBloomFilter;
import org.apache.commons.collections4.bloomfilter.SparseBloomFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class BloomFilter_ESTest extends BloomFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Shape shape0 = Shape.fromKM(26, 26);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(23L, (-917L));
      sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      int int0 = sparseBloomFilter0.estimateIntersection(sparseBloomFilter0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(5, 5, 5);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      SparseBloomFilter sparseBloomFilter1 = sparseBloomFilter0.copy();
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(5, (-2719L));
      sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      int int0 = sparseBloomFilter0.estimateIntersection(sparseBloomFilter1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1, 1);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(2147483647L, 1);
      boolean boolean0 = sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1, 1);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.merge((BloomFilter) sparseBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1, 1);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      byte[] byteArray0 = new byte[1];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      int int0 = sparseBloomFilter0.estimateUnion(sparseBloomFilter0);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(1, 1, 1);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1, 1);
      sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      boolean boolean0 = sparseBloomFilter0.contains((Hasher) enhancedDoubleHasher0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Shape shape0 = Shape.fromKM(32, 32);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      long[] longArray0 = new long[2];
      longArray0[0] = (-144L);
      BitMapProducer bitMapProducer0 = BitMapProducer.fromBitMapArray(longArray0);
      boolean boolean0 = simpleBloomFilter0.contains(bitMapProducer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2147483637, 2147483637);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      byte[] byteArray0 = new byte[1];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      // Undeclared exception!
      sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(1, 1, 1);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.merge((Hasher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // hasher
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Shape shape0 = Shape.fromKM(40, 40);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.merge((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Shape shape0 = Shape.fromNM(Integer.MAX_VALUE, Integer.MAX_VALUE);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      sparseBloomFilter0.estimateUnion(simpleBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(1, 1, 1);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.estimateUnion((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Shape shape0 = Shape.fromKM(Integer.MAX_VALUE, Integer.MAX_VALUE);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      sparseBloomFilter0.estimateIntersection(simpleBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1, 1);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.estimateIntersection((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Shape shape0 = Shape.fromNM(23, 23);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.contains((Hasher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Hasher
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Shape shape0 = Shape.fromKM(Integer.MAX_VALUE, Integer.MAX_VALUE);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      simpleBloomFilter0.contains((BloomFilter) simpleBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Shape shape0 = Shape.fromNM(23, 23);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.contains((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Shape shape0 = Shape.fromKM(Integer.MAX_VALUE, Integer.MAX_VALUE);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      simpleBloomFilter0.contains((BitMapProducer) sparseBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Shape shape0 = Shape.fromNM(23, 23);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.contains((BitMapProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SimpleBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1, 1);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      int int0 = sparseBloomFilter0.estimateN();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2147483640, 2147483640);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      IndexProducer indexProducer0 = simpleBloomFilter0.uniqueIndices();
      assertSame(indexProducer0, simpleBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Shape shape0 = Shape.fromNM(743, 743);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher((-124442953304595633L), (-124442953304595633L));
      arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      int int0 = sparseBloomFilter0.estimateIntersection(arrayCountingBloomFilter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1, 1);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1, 1);
      sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      SparseBloomFilter sparseBloomFilter1 = new SparseBloomFilter(shape0);
      int int0 = sparseBloomFilter1.estimateIntersection(sparseBloomFilter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1, 1);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1, 1);
      sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      int int0 = sparseBloomFilter0.estimateIntersection(arrayCountingBloomFilter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(1, 1, 1);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      byte[] byteArray0 = new byte[1];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      int int0 = sparseBloomFilter0.estimateIntersection(sparseBloomFilter0);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1, 1);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1, 1);
      sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      int int0 = sparseBloomFilter0.estimateN();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(1, 1, 1);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      byte[] byteArray0 = new byte[1];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      boolean boolean0 = sparseBloomFilter0.isFull();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Shape shape0 = Shape.fromNM(9, (byte)85);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      boolean boolean0 = sparseBloomFilter0.isFull();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(1, 1, 1);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      byte[] byteArray0 = new byte[1];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      boolean boolean0 = simpleBloomFilter0.contains((BloomFilter) sparseBloomFilter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(5, 5, 5);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      boolean boolean0 = sparseBloomFilter0.contains((BloomFilter) arrayCountingBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(1, 1, 1);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1, 1);
      boolean boolean0 = sparseBloomFilter0.contains((Hasher) enhancedDoubleHasher0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(1, 1324, 1528);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      int int0 = arrayCountingBloomFilter0.estimateUnion(simpleBloomFilter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(1, 1324, 1528);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      boolean boolean0 = simpleBloomFilter0.contains((BitMapProducer) simpleBloomFilter0);
      assertTrue(boolean0);
  }
}
