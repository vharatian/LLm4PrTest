/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 09:01:09 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter;
import org.apache.commons.collections4.bloomfilter.BitMapProducer;
import org.apache.commons.collections4.bloomfilter.EnhancedDoubleHasher;
import org.apache.commons.collections4.bloomfilter.Hasher;
import org.apache.commons.collections4.bloomfilter.IndexProducer;
import org.apache.commons.collections4.bloomfilter.Shape;
import org.apache.commons.collections4.bloomfilter.SimpleBloomFilter;
import org.apache.commons.collections4.bloomfilter.SparseBloomFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class IndexProducer_ESTest extends IndexProducer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long[] longArray0 = new long[1];
      BitMapProducer bitMapProducer0 = BitMapProducer.fromBitMapArray(longArray0);
      IndexProducer indexProducer0 = IndexProducer.fromBitMapProducer(bitMapProducer0);
      int[] intArray0 = indexProducer0.asIndexArray();
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher((-728L), (-728L));
      Shape shape0 = Shape.fromKM(Integer.MAX_VALUE, Integer.MAX_VALUE);
      IndexProducer indexProducer0 = enhancedDoubleHasher0.indices(shape0);
      // Undeclared exception!
      indexProducer0.uniqueIndices();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray((int[]) null);
      // Undeclared exception!
      try { 
        indexProducer0.uniqueIndices();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.IndexProducer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-174);
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      // Undeclared exception!
      try { 
        indexProducer0.uniqueIndices();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -174
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        IndexProducer.fromBitMapProducer((BitMapProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // producer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1712, 1431655765);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      simpleBloomFilter0.asIndexArray();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[9];
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      IndexProducer indexProducer1 = indexProducer0.uniqueIndices();
      Shape shape0 = Shape.fromNM(255, 255);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      boolean boolean0 = simpleBloomFilter0.contains(indexProducer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      Shape shape0 = Shape.fromNMK((byte)9, (byte)9, (byte)9);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 1408L;
      longArray0[1] = 135L;
      longArray0[2] = (-2478L);
      BitMapProducer bitMapProducer0 = BitMapProducer.fromBitMapArray(longArray0);
      IndexProducer indexProducer0 = IndexProducer.fromBitMapProducer(bitMapProducer0);
      int[] intArray0 = indexProducer0.asIndexArray();
      assertEquals(64, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[3];
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      Shape shape0 = Shape.fromKM(32, 32);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      sparseBloomFilter0.merge(indexProducer0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.contains((BitMapProducer) sparseBloomFilter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Shape shape0 = Shape.fromNM(31, 31);
      int[] intArray0 = new int[2];
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      boolean boolean0 = sparseBloomFilter0.contains(indexProducer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[1];
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      IndexProducer indexProducer1 = indexProducer0.uniqueIndices();
      IndexProducer indexProducer2 = indexProducer1.uniqueIndices();
      assertSame(indexProducer1, indexProducer2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray((int[]) null);
      // Undeclared exception!
      try { 
        indexProducer0.asIndexArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.IndexProducer$1", e);
      }
  }
}
