/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 08:50:22 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter;
import org.apache.commons.collections4.bloomfilter.BitMapProducer;
import org.apache.commons.collections4.bloomfilter.BloomFilter;
import org.apache.commons.collections4.bloomfilter.CellProducer;
import org.apache.commons.collections4.bloomfilter.CountingLongPredicate;
import org.apache.commons.collections4.bloomfilter.EnhancedDoubleHasher;
import org.apache.commons.collections4.bloomfilter.Hasher;
import org.apache.commons.collections4.bloomfilter.IndexFilter;
import org.apache.commons.collections4.bloomfilter.IndexProducer;
import org.apache.commons.collections4.bloomfilter.LongBiPredicate;
import org.apache.commons.collections4.bloomfilter.Shape;
import org.apache.commons.collections4.bloomfilter.SparseBloomFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ArrayCountingBloomFilter_ESTest extends ArrayCountingBloomFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1753, 1753);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)92;
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      
      arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      ArrayCountingBloomFilter arrayCountingBloomFilter1 = arrayCountingBloomFilter0.copy();
      byte[] byteArray1 = new byte[8];
      EnhancedDoubleHasher enhancedDoubleHasher1 = new EnhancedDoubleHasher(byteArray1);
      arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher1);
      int int0 = arrayCountingBloomFilter0.getMaxInsert((CellProducer) arrayCountingBloomFilter1);
      assertFalse(arrayCountingBloomFilter0.isValid());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1777, 1777);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      
      byte[] byteArray0 = new byte[1];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      int int0 = arrayCountingBloomFilter0.getMaxInsert((CellProducer) arrayCountingBloomFilter0);
      assertFalse(arrayCountingBloomFilter0.isValid());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2210, 2210);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      
      byte[] byteArray0 = new byte[3];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      arrayCountingBloomFilter0.asIndexArray();
      assertFalse(arrayCountingBloomFilter0.isValid());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1753, 1753);
      byte[] byteArray0 = new byte[9];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      ArrayCountingBloomFilter arrayCountingBloomFilter1 = arrayCountingBloomFilter0.copy();
      arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      arrayCountingBloomFilter1.merge((Hasher) enhancedDoubleHasher0);
      boolean boolean0 = arrayCountingBloomFilter0.contains((BitMapProducer) arrayCountingBloomFilter1);
      assertTrue(arrayCountingBloomFilter1.isValid());
      assertFalse(arrayCountingBloomFilter0.isValid());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2210, 2210);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(2210, (-934L));
      boolean boolean0 = arrayCountingBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      CellProducer.CellConsumer cellProducer_CellConsumer0 = mock(CellProducer.CellConsumer.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(cellProducer_CellConsumer0).test(anyInt() , anyInt());
      boolean boolean1 = arrayCountingBloomFilter0.forEachCell(cellProducer_CellConsumer0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1753, 1753);
      byte[] byteArray0 = new byte[2];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      
      arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      int int0 = arrayCountingBloomFilter0.estimateN();
      assertFalse(arrayCountingBloomFilter0.isValid());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2286, 1247);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.subtract(arrayCountingBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2210, 2210);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      
      byte[] byteArray0 = new byte[3];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      boolean boolean0 = arrayCountingBloomFilter0.subtract(arrayCountingBloomFilter0);
      assertFalse(arrayCountingBloomFilter0.isValid());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1753, 1753);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      Shape shape1 = arrayCountingBloomFilter0.getShape();
      assertEquals(1753, shape1.getNumberOfHashFunctions());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2166, 2166);
      byte[] byteArray0 = new byte[1];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      
      arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      CellProducer cellProducer0 = CellProducer.from(arrayCountingBloomFilter0);
      int int0 = arrayCountingBloomFilter0.getMaxInsert(cellProducer0);
      assertFalse(arrayCountingBloomFilter0.isValid());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1, 1);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      long[] longArray0 = new long[6];
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(longBiPredicate0).test(anyLong() , anyLong());
      CountingLongPredicate countingLongPredicate0 = new CountingLongPredicate(longArray0, longBiPredicate0);
      LongPredicate longPredicate0 = countingLongPredicate0.negate();
      boolean boolean0 = arrayCountingBloomFilter0.forEachBitMap(longPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2140, 2140);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(2140, 2140);
      arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      ArrayCountingBloomFilter arrayCountingBloomFilter1 = new ArrayCountingBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter1.contains((BitMapProducer) arrayCountingBloomFilter0);
      assertFalse(arrayCountingBloomFilter0.isValid());
      assertTrue(arrayCountingBloomFilter1.isValid());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Shape shape0 = Shape.fromNM(3523, 3523);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      int int0 = arrayCountingBloomFilter0.cardinality();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1777, 1777);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.add(arrayCountingBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2210, 2210);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      
      byte[] byteArray0 = new byte[3];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      boolean boolean0 = arrayCountingBloomFilter0.add(arrayCountingBloomFilter0);
      assertFalse(arrayCountingBloomFilter0.isValid());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1541, 2613);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      CellProducer.CellConsumer cellProducer_CellConsumer0 = mock(CellProducer.CellConsumer.class, new ViolatedAssumptionAnswer());
      arrayCountingBloomFilter0.forEachCell(cellProducer_CellConsumer0);
      arrayCountingBloomFilter0.getMaxInsert((CellProducer) arrayCountingBloomFilter0);
      arrayCountingBloomFilter0.getMaxInsert((BloomFilter) arrayCountingBloomFilter0);
      // Undeclared exception!
      arrayCountingBloomFilter0.subtract(arrayCountingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2134, 2134);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.subtract((CellProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1541, 2613);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      CellProducer.CellConsumer cellProducer_CellConsumer0 = mock(CellProducer.CellConsumer.class, new ViolatedAssumptionAnswer());
      arrayCountingBloomFilter0.forEachCell(cellProducer_CellConsumer0);
      arrayCountingBloomFilter0.getMaxInsert((CellProducer) arrayCountingBloomFilter0);
      arrayCountingBloomFilter0.getMaxInsert((BloomFilter) arrayCountingBloomFilter0);
      // Undeclared exception!
      arrayCountingBloomFilter0.getMaxInsert((CellProducer) arrayCountingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1753, 1753);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.getMaxInsert((CellProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Shape shape0 = Shape.fromNM(887, 887);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      int[] intArray0 = new int[7];
      intArray0[1] = (-1379);
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      CellProducer cellProducer0 = CellProducer.from(indexProducer0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.getMaxInsert(cellProducer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1456, 1456);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1456, 1456);
      arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      IndexFilter.ArrayTracker indexFilter_ArrayTracker0 = new IndexFilter.ArrayTracker(shape0);
      // Undeclared exception!
      arrayCountingBloomFilter0.forEachIndex(indexFilter_ArrayTracker0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1753, 1753);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.forEachIndex((IntPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // consumer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2235, 2235);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(2235, 2235);
      arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      IndexFilter.ArrayTracker indexFilter_ArrayTracker0 = new IndexFilter.ArrayTracker(shape0);
      indexFilter_ArrayTracker0.test(2235);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.forEachIndex(indexFilter_ArrayTracker0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Shape shape0 = Shape.fromNM(3523, 3523);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      arrayCountingBloomFilter0.getMaxInsert((CellProducer) arrayCountingBloomFilter0);
      CellProducer.CellConsumer cellProducer_CellConsumer0 = mock(CellProducer.CellConsumer.class, new ViolatedAssumptionAnswer());
      arrayCountingBloomFilter0.forEachCell(cellProducer_CellConsumer0);
      CellProducer.CellConsumer cellProducer_CellConsumer1 = mock(CellProducer.CellConsumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      arrayCountingBloomFilter0.forEachCell(cellProducer_CellConsumer1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Shape shape0 = Shape.fromKM(3298, 3298);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.forEachCell((CellProducer.CellConsumer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // consumer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2524, 2524);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.forEachBitMap((LongPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // consumer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2167, 2167);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.contains((IndexProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2531, 2531);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      int[] intArray0 = new int[1];
      intArray0[0] = 2531;
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.contains(indexProducer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2531
         //
         verifyException("org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2210, 2210);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.contains((BitMapProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // producer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1426, 32);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      long[] longArray0 = new long[5];
      longArray0[1] = 2429L;
      BitMapProducer bitMapProducer0 = BitMapProducer.fromBitMapArray(longArray0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.contains(bitMapProducer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2157, 2157);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.add((CellProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1777, 1777);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      byte[] byteArray0 = new byte[1];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      Shape shape1 = Shape.fromNM(1263, 1263);
      ArrayCountingBloomFilter arrayCountingBloomFilter1 = new ArrayCountingBloomFilter(shape1);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter1.add(arrayCountingBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Filter only accepts values in the [0,1263) range
         //
         verifyException("org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = null;
      try {
        arrayCountingBloomFilter0 = new ArrayCountingBloomFilter((Shape) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // shape
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1777, 1777);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      
      byte[] byteArray0 = new byte[1];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(longBiPredicate0).test(anyLong() , anyLong());
      arrayCountingBloomFilter0.forEachBitMapPair(sparseBloomFilter0, longBiPredicate0);
      assertFalse(arrayCountingBloomFilter0.isValid());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2210, 2210);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(2210, (-934L));
      arrayCountingBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      long[] longArray0 = new long[8];
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(longBiPredicate0).test(anyLong() , anyLong());
      CountingLongPredicate countingLongPredicate0 = new CountingLongPredicate(longArray0, longBiPredicate0);
      boolean boolean0 = arrayCountingBloomFilter0.forEachBitMap(countingLongPredicate0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1753, 1753);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      
      byte[] byteArray0 = new byte[1];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      IndexFilter.BitMapTracker indexFilter_BitMapTracker0 = new IndexFilter.BitMapTracker(shape0);
      arrayCountingBloomFilter0.forEachIndex(indexFilter_BitMapTracker0);
      boolean boolean0 = arrayCountingBloomFilter0.forEachIndex(indexFilter_BitMapTracker0);
      assertFalse(arrayCountingBloomFilter0.isValid());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2524, 2524);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      BitMapProducer bitMapProducer0 = BitMapProducer.fromIndexProducer(arrayCountingBloomFilter0, Integer.MAX_VALUE);
      // Undeclared exception!
      arrayCountingBloomFilter0.contains(bitMapProducer0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1753, 1753);
      byte[] byteArray0 = new byte[9];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      
      arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      CellProducer.CellConsumer cellProducer_CellConsumer0 = mock(CellProducer.CellConsumer.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(cellProducer_CellConsumer0).test(anyInt() , anyInt());
      boolean boolean0 = arrayCountingBloomFilter0.forEachCell(cellProducer_CellConsumer0);
      assertFalse(arrayCountingBloomFilter0.isValid());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1753, 1753);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.isValid();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2210, 2210);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      
      byte[] byteArray0 = new byte[3];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      boolean boolean0 = arrayCountingBloomFilter0.isValid();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1753, 1753);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1753, (-952L));
      arrayCountingBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      int[] intArray0 = arrayCountingBloomFilter0.asIndexArray();
      assertEquals(1169, intArray0.length);
      assertTrue(arrayCountingBloomFilter0.isValid());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2125, 2125);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(2125, 2125);
      arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      ArrayCountingBloomFilter arrayCountingBloomFilter1 = new ArrayCountingBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter1.contains((IndexProducer) arrayCountingBloomFilter0);
      assertFalse(arrayCountingBloomFilter0.isValid());
      assertTrue(arrayCountingBloomFilter1.isValid());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2118, 2118);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      ArrayCountingBloomFilter arrayCountingBloomFilter1 = new ArrayCountingBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(2118, 2118);
      arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      int int0 = arrayCountingBloomFilter1.getMaxInsert((CellProducer) arrayCountingBloomFilter0);
      assertFalse(arrayCountingBloomFilter0.isValid());
      assertTrue(arrayCountingBloomFilter1.isValid());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1753, 1753);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1753, (-952L));
      arrayCountingBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      int int0 = arrayCountingBloomFilter0.cardinality();
      assertEquals(1169, int0);
      assertTrue(arrayCountingBloomFilter0.isValid());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Shape shape0 = Shape.fromNM(16, 16);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(16, 16);
      boolean boolean0 = arrayCountingBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      boolean boolean1 = arrayCountingBloomFilter0.contains((IndexProducer) arrayCountingBloomFilter0);
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayCountingBloomFilter0.isValid());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Shape shape0 = Shape.fromKM(236, 236);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      int int0 = arrayCountingBloomFilter0.characteristics();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2286, 1247);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      int int0 = arrayCountingBloomFilter0.getMaxCell();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1541, 2613);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      arrayCountingBloomFilter0.clear();
      assertEquals(Integer.MAX_VALUE, arrayCountingBloomFilter0.getMaxCell());
  }
}
