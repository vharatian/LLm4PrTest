/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 11:32:27 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter;
import org.apache.commons.collections4.bloomfilter.BitMapProducer;
import org.apache.commons.collections4.bloomfilter.BloomFilter;
import org.apache.commons.collections4.bloomfilter.Hasher;
import org.apache.commons.collections4.bloomfilter.IndexProducer;
import org.apache.commons.collections4.bloomfilter.LongBiPredicate;
import org.apache.commons.collections4.bloomfilter.Shape;
import org.apache.commons.collections4.bloomfilter.SimpleBloomFilter;
import org.apache.commons.collections4.bloomfilter.SimpleHasher;
import org.apache.commons.collections4.bloomfilter.SparseBloomFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SparseBloomFilter_ESTest extends SparseBloomFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1511, 823);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, (IndexProducer) arrayCountingBloomFilter0);
      assertTrue(sparseBloomFilter0.isSparse());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Shape shape0 = Shape.fromNM(27, 27);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      long[] longArray0 = new long[3];
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(longBiPredicate0).test(anyLong() , anyLong());
      BitMapProducer.CountingLongPredicate bitMapProducer_CountingLongPredicate0 = new BitMapProducer.CountingLongPredicate(longArray0, longBiPredicate0);
      LongPredicate longPredicate0 = bitMapProducer_CountingLongPredicate0.negate();
      boolean boolean0 = sparseBloomFilter0.forEachBitMap(longPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Shape shape0 = Shape.fromNM(27, 27);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      boolean boolean0 = sparseBloomFilter0.contains((IndexProducer) simpleBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(27, 27, 27);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      SimpleHasher simpleHasher0 = new SimpleHasher((-1L), 27);
      sparseBloomFilter0.merge((Hasher) simpleHasher0);
      int int0 = sparseBloomFilter0.cardinality();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Shape shape0 = Shape.fromKM(12301, 12301);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      SimpleHasher simpleHasher0 = new SimpleHasher(12301, 12301);
      // Undeclared exception!
      sparseBloomFilter0.merge((Hasher) simpleHasher0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Shape shape0 = Shape.fromNM(8192, 8192);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, (BitMapProducer) arrayCountingBloomFilter0);
      // Undeclared exception!
      sparseBloomFilter0.merge((BloomFilter) arrayCountingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Shape shape0 = Shape.fromNM(4801, 4801);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.merge((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Shape shape0 = Shape.fromKM(64, 64);
      SimpleHasher simpleHasher0 = new SimpleHasher(64, 64);
      Shape shape1 = Shape.fromKM(64, 2630);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, simpleHasher0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape1, simpleHasher0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.merge((BloomFilter) simpleBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value in list 2624 is greater than maximum value (64)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SparseBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Shape shape0 = Shape.fromNM(250, 250);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.forEachIndex((IntPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // consumer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Shape shape0 = Shape.fromNM(14, 14);
      SimpleHasher simpleHasher0 = new SimpleHasher(14, 14);
      Shape shape1 = Shape.fromNMK(14, 1388, 1388);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape1, simpleHasher0);
      Hasher.IndexFilter.ArrayTracker hasher_IndexFilter_ArrayTracker0 = new Hasher.IndexFilter.ArrayTracker(shape0);
      Hasher.IndexFilter.BitMapTracker hasher_IndexFilter_BitMapTracker0 = new Hasher.IndexFilter.BitMapTracker(shape1);
      IntPredicate intPredicate0 = hasher_IndexFilter_ArrayTracker0.or(hasher_IndexFilter_BitMapTracker0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.forEachIndex(intPredicate0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Shape shape0 = Shape.fromKM(33, 33);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.forEachBitMap((LongPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // consumer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Shape shape0 = Shape.fromKM(295, 295);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(simpleBloomFilter0);
      long[] longArray0 = new long[2];
      BitMapProducer.CountingLongPredicate bitMapProducer_CountingLongPredicate0 = new BitMapProducer.CountingLongPredicate(longArray0, (LongBiPredicate) null);
      bitMapProducer_CountingLongPredicate0.idx = 5;
      // Undeclared exception!
      try { 
        sparseBloomFilter0.forEachBitMap(bitMapProducer_CountingLongPredicate0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.collections4.bloomfilter.BitMapProducer$CountingLongPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Shape shape0 = Shape.fromKM(157, 157);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.contains((IndexProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SparseBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Shape shape0 = Shape.fromKM(12288, 12288);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      sparseBloomFilter0.contains((BitMapProducer) arrayCountingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1, 1);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.contains((BitMapProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // producer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Shape shape0 = Shape.fromKM(12301, 12301);
      SimpleHasher simpleHasher0 = new SimpleHasher(12301, 12301);
      IndexProducer indexProducer0 = simpleHasher0.indices(shape0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, indexProducer0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SparseBloomFilter sparseBloomFilter0 = null;
      try {
        sparseBloomFilter0 = new SparseBloomFilter((Shape) null, (Hasher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // shape
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1073741824, 1073741824);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      SparseBloomFilter sparseBloomFilter1 = new SparseBloomFilter(shape0, (BitMapProducer) sparseBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SparseBloomFilter sparseBloomFilter0 = null;
      try {
        sparseBloomFilter0 = new SparseBloomFilter((Shape) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // shape
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1073741824, 1073741824);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(simpleBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SparseBloomFilter sparseBloomFilter0 = null;
      try {
        sparseBloomFilter0 = new SparseBloomFilter((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Shape shape0 = Shape.fromNM(27, 27);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      long[] longArray0 = new long[1];
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(longBiPredicate0).test(anyLong() , anyLong());
      BitMapProducer.CountingLongPredicate bitMapProducer_CountingLongPredicate0 = new BitMapProducer.CountingLongPredicate(longArray0, longBiPredicate0);
      boolean boolean0 = sparseBloomFilter0.forEachBitMap(bitMapProducer_CountingLongPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Shape shape0 = Shape.fromKM(823, 65535);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      SimpleHasher simpleHasher0 = new SimpleHasher(1306L, 65535);
      sparseBloomFilter0.merge((Hasher) simpleHasher0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, (BitMapProducer) sparseBloomFilter0);
      assertFalse(simpleBloomFilter0.isSparse());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Shape shape0 = Shape.fromKM(157, 157);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      byte[] byteArray0 = new byte[8];
      SimpleHasher simpleHasher0 = new SimpleHasher(byteArray0);
      SparseBloomFilter sparseBloomFilter1 = new SparseBloomFilter(shape0, simpleHasher0);
      long[] longArray0 = sparseBloomFilter0.asBitMapArray();
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(longBiPredicate0).test(anyLong() , anyLong());
      BitMapProducer.CountingLongPredicate bitMapProducer_CountingLongPredicate0 = new BitMapProducer.CountingLongPredicate(longArray0, longBiPredicate0);
      boolean boolean0 = sparseBloomFilter1.forEachBitMap(bitMapProducer_CountingLongPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(27, 27, 27);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      SimpleHasher simpleHasher0 = new SimpleHasher(4, 27);
      boolean boolean0 = sparseBloomFilter0.merge((Hasher) simpleHasher0);
      Hasher.IndexFilter.ArrayTracker hasher_IndexFilter_ArrayTracker0 = new Hasher.IndexFilter.ArrayTracker(shape0);
      IntPredicate intPredicate0 = hasher_IndexFilter_ArrayTracker0.negate();
      boolean boolean1 = sparseBloomFilter0.forEachIndex(intPredicate0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(1, 4, 27);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      Hasher.IndexFilter.ArrayTracker hasher_IndexFilter_ArrayTracker0 = new Hasher.IndexFilter.ArrayTracker(shape0);
      boolean boolean0 = sparseBloomFilter0.forEachIndex(hasher_IndexFilter_ArrayTracker0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Shape shape0 = Shape.fromKM(295, 295);
      SimpleHasher simpleHasher0 = new SimpleHasher(295, 1412L);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, simpleHasher0);
      Hasher.IndexFilter.ArrayTracker hasher_IndexFilter_ArrayTracker0 = new Hasher.IndexFilter.ArrayTracker(shape0);
      // Undeclared exception!
      sparseBloomFilter0.forEachIndex(hasher_IndexFilter_ArrayTracker0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(27, 27, 27);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      boolean boolean0 = sparseBloomFilter0.isSparse();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(27, 27, 27);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      Shape shape1 = sparseBloomFilter0.getShape();
      assertSame(shape1, shape0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Shape shape0 = Shape.fromKM(149, 149);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      long[] longArray0 = sparseBloomFilter0.asBitMapArray();
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(longBiPredicate0).test(anyLong() , anyLong());
      BitMapProducer.CountingLongPredicate bitMapProducer_CountingLongPredicate0 = new BitMapProducer.CountingLongPredicate(longArray0, longBiPredicate0);
      boolean boolean0 = sparseBloomFilter0.forEachBitMap(bitMapProducer_CountingLongPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2, 2);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      SimpleHasher simpleHasher0 = new SimpleHasher(2, 2);
      SparseBloomFilter sparseBloomFilter1 = new SparseBloomFilter(shape0, simpleHasher0);
      boolean boolean0 = sparseBloomFilter0.contains((BitMapProducer) sparseBloomFilter1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Shape shape0 = Shape.fromKM(157, 157);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      SparseBloomFilter sparseBloomFilter1 = new SparseBloomFilter(shape0);
      SimpleHasher simpleHasher0 = new SimpleHasher(157, (-10L));
      boolean boolean0 = sparseBloomFilter0.merge((Hasher) simpleHasher0);
      boolean boolean1 = sparseBloomFilter1.contains((BitMapProducer) sparseBloomFilter0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Shape shape0 = Shape.fromNM(4787, 4787);
      SimpleHasher simpleHasher0 = new SimpleHasher(4787, 4787);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, simpleHasher0);
      SparseBloomFilter sparseBloomFilter1 = new SparseBloomFilter(shape0);
      boolean boolean0 = sparseBloomFilter1.contains((IndexProducer) sparseBloomFilter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Shape shape0 = Shape.fromNM(18, 18);
      SimpleHasher simpleHasher0 = new SimpleHasher(18, 18);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, simpleHasher0);
      SparseBloomFilter sparseBloomFilter1 = new SparseBloomFilter(sparseBloomFilter0);
      assertTrue(sparseBloomFilter1.isSparse());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Shape shape0 = Shape.fromKM(103, 103);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      boolean boolean0 = sparseBloomFilter0.merge((BloomFilter) sparseBloomFilter0);
      assertTrue(boolean0);
      assertTrue(sparseBloomFilter0.isSparse());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1, 1);
      SimpleHasher simpleHasher0 = new SimpleHasher(1, 1);
      Shape shape1 = Shape.fromNM(65, 65);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape1, simpleHasher0);
      SparseBloomFilter sparseBloomFilter1 = null;
      try {
        sparseBloomFilter1 = new SparseBloomFilter(shape0, (BitMapProducer) sparseBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value in list 1 is greater than maximum value (1)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SparseBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Shape shape0 = Shape.fromKM(83, 83);
      SimpleHasher simpleHasher0 = new SimpleHasher(83, 83);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, simpleHasher0);
      long[] longArray0 = sparseBloomFilter0.asBitMapArray();
      assertArrayEquals(new long[] {1L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(14, 14, 14);
      int[] intArray0 = new int[1];
      intArray0[0] = 14;
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      SparseBloomFilter sparseBloomFilter0 = null;
      try {
        sparseBloomFilter0 = new SparseBloomFilter(shape0, indexProducer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Filter only accepts values in the [0,14) range
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SparseBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1, 1);
      int[] intArray0 = new int[4];
      intArray0[1] = (-760);
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      SparseBloomFilter sparseBloomFilter0 = null;
      try {
        sparseBloomFilter0 = new SparseBloomFilter(shape0, indexProducer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Filter only accepts values in the [0,1) range
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SparseBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Shape shape0 = Shape.fromKM(12301, 12301);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      int int0 = sparseBloomFilter0.cardinality();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Shape shape0 = Shape.fromNM(111, 111);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.merge((Hasher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // hasher
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Shape shape0 = Shape.fromKM(12301, 12301);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      SparseBloomFilter sparseBloomFilter1 = sparseBloomFilter0.copy();
      assertFalse(sparseBloomFilter1.equals((Object)sparseBloomFilter0));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SparseBloomFilter sparseBloomFilter0 = null;
      try {
        sparseBloomFilter0 = new SparseBloomFilter((Shape) null, (IndexProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // shape
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SparseBloomFilter sparseBloomFilter0 = null;
      try {
        sparseBloomFilter0 = new SparseBloomFilter((Shape) null, (BitMapProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // shape
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Shape shape0 = Shape.fromKM(12301, 12301);
      SimpleHasher simpleHasher0 = new SimpleHasher(12301, 12301);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, simpleHasher0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(27, 27, 27);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      boolean boolean0 = sparseBloomFilter0.contains((BitMapProducer) sparseBloomFilter0);
      assertTrue(boolean0);
  }
}
