/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 11:30:14 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter;
import org.apache.commons.collections4.bloomfilter.BitMapProducer;
import org.apache.commons.collections4.bloomfilter.BloomFilter;
import org.apache.commons.collections4.bloomfilter.Hasher;
import org.apache.commons.collections4.bloomfilter.HasherCollection;
import org.apache.commons.collections4.bloomfilter.IndexProducer;
import org.apache.commons.collections4.bloomfilter.LongBiPredicate;
import org.apache.commons.collections4.bloomfilter.Shape;
import org.apache.commons.collections4.bloomfilter.SimpleBloomFilter;
import org.apache.commons.collections4.bloomfilter.SimpleHasher;
import org.apache.commons.collections4.bloomfilter.SparseBloomFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SimpleBloomFilter_ESTest extends SimpleBloomFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1, 1);
      SimpleHasher simpleHasher0 = new SimpleHasher(1, 600L);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, simpleHasher0);
      simpleBloomFilter0.isFull();
      int int0 = simpleBloomFilter0.cardinality();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Shape shape0 = Shape.fromNM(10, 10);
      long[] longArray0 = new long[1];
      longArray0[0] = (-934L);
      BitMapProducer bitMapProducer0 = BitMapProducer.fromBitMapArray(longArray0);
      SimpleBloomFilter simpleBloomFilter0 = null;
      try {
        simpleBloomFilter0 = new SimpleBloomFilter(shape0, bitMapProducer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BitMapProducer set a bit higher than the limit for the shape: 10
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SimpleBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(1, 1, 1);
      SimpleHasher simpleHasher0 = new SimpleHasher((-3303L), 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, simpleHasher0);
      boolean boolean0 = simpleBloomFilter0.merge((BloomFilter) simpleBloomFilter0);
      assertFalse(simpleBloomFilter0.isSparse());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1158, 1158);
      int[] intArray0 = new int[7];
      intArray0[0] = 4541;
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      SimpleBloomFilter simpleBloomFilter0 = null;
      try {
        simpleBloomFilter0 = new SimpleBloomFilter(shape0, indexProducer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // IndexProducer should only send values in the range[0,1157]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SimpleBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Shape shape0 = Shape.fromNM(4358, 4358);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      HasherCollection hasherCollection0 = new HasherCollection();
      boolean boolean0 = simpleBloomFilter0.merge((Hasher) hasherCollection0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Shape shape0 = Shape.fromNM(4358, 4358);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      boolean boolean0 = simpleBloomFilter0.isSparse();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Shape shape0 = Shape.fromNM(4358, 4358);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      Hasher.IndexFilter.ArrayTracker hasher_IndexFilter_ArrayTracker0 = new Hasher.IndexFilter.ArrayTracker(shape0);
      boolean boolean0 = simpleBloomFilter0.forEachIndex(hasher_IndexFilter_ArrayTracker0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1, 1);
      SimpleHasher simpleHasher0 = new SimpleHasher(1, 600L);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, simpleHasher0);
      Hasher.IndexFilter.ArrayTracker hasher_IndexFilter_ArrayTracker0 = new Hasher.IndexFilter.ArrayTracker(shape0);
      Hasher.IndexFilter hasher_IndexFilter0 = Hasher.IndexFilter.create(shape0, hasher_IndexFilter_ArrayTracker0);
      IntPredicate intPredicate0 = hasher_IndexFilter_ArrayTracker0.and(hasher_IndexFilter0);
      boolean boolean0 = simpleBloomFilter0.forEachIndex(intPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1, 1);
      SimpleHasher simpleHasher0 = new SimpleHasher(1, 600L);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, simpleHasher0);
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(longBiPredicate0).test(anyLong() , anyLong());
      boolean boolean0 = simpleBloomFilter0.forEachBitMapPair(simpleBloomFilter0, longBiPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1, 1);
      SimpleHasher simpleHasher0 = new SimpleHasher(1, 600L);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, simpleHasher0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      boolean boolean0 = simpleBloomFilter0.contains(indexProducer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Shape shape0 = Shape.fromKM(65557, 65557);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      SimpleHasher simpleHasher0 = new SimpleHasher(65557, 116186555L);
      // Undeclared exception!
      simpleBloomFilter0.merge((Hasher) simpleHasher0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Shape shape0 = Shape.fromNM(65535, 65535);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      simpleBloomFilter0.merge((BloomFilter) arrayCountingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2, 2);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.merge((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Shape shape0 = Shape.fromKM(11, 11);
      Shape shape1 = Shape.fromKM(11, 2983);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      SimpleHasher simpleHasher0 = new SimpleHasher(11, 11);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape1, simpleHasher0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.merge((BloomFilter) sparseBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // IndexProducer should only send values in the range[0,10]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SimpleBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Shape shape0 = Shape.fromKM(876, 1548);
      Shape shape1 = Shape.fromKM(876, 876);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape1);
      SimpleBloomFilter simpleBloomFilter1 = new SimpleBloomFilter(shape0, (IndexProducer) simpleBloomFilter0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.merge((BloomFilter) simpleBloomFilter1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BitMapProducer should send at most 14 maps
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SimpleBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(27, 1100, 574);
      Hasher.IndexFilter.ArrayTracker hasher_IndexFilter_ArrayTracker0 = new Hasher.IndexFilter.ArrayTracker(shape0);
      byte[] byteArray0 = new byte[1];
      SimpleHasher simpleHasher0 = new SimpleHasher(byteArray0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, simpleHasher0);
      // Undeclared exception!
      simpleBloomFilter0.forEachIndex(hasher_IndexFilter_ArrayTracker0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1400, 1400);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.forEachIndex((IntPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // consumer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1, 1);
      SimpleHasher simpleHasher0 = new SimpleHasher(1, (-1669L));
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, simpleHasher0);
      Hasher.IndexFilter.ArrayTracker hasher_IndexFilter_ArrayTracker0 = new Hasher.IndexFilter.ArrayTracker(shape0);
      hasher_IndexFilter_ArrayTracker0.test(1);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.forEachIndex(hasher_IndexFilter_ArrayTracker0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Shape shape0 = Shape.fromNM(12288, 12288);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      simpleBloomFilter0.forEachBitMapPair(arrayCountingBloomFilter0, longBiPredicate0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.forEachBitMapPair(simpleBloomFilter0, (LongBiPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.BitMapProducer$CountingLongPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2061, 2061);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.forEachBitMap((LongPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // consumer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1400, 1400);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      long[] longArray0 = new long[7];
      BitMapProducer.CountingLongPredicate bitMapProducer_CountingLongPredicate0 = new BitMapProducer.CountingLongPredicate(longArray0, (LongBiPredicate) null);
      bitMapProducer_CountingLongPredicate0.idx = 297;
      // Undeclared exception!
      try { 
        simpleBloomFilter0.forEachBitMap(bitMapProducer_CountingLongPredicate0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 297
         //
         verifyException("org.apache.commons.collections4.bloomfilter.BitMapProducer$CountingLongPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Shape shape0 = Shape.fromNP(2274, 0.03);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      simpleBloomFilter0.contains((IndexProducer) arrayCountingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Shape shape0 = Shape.fromKM(23, 23);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.contains((IndexProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SimpleBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Shape shape0 = Shape.fromNM(3088, 3088);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-2568);
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.contains(indexProducer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -41
         //
         verifyException("org.apache.commons.collections4.bloomfilter.BitMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Shape shape0 = Shape.fromNP(1083, 4.9E-324);
      HasherCollection hasherCollection0 = new HasherCollection();
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, hasherCollection0);
      // Undeclared exception!
      simpleBloomFilter0.cardinality();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Shape shape0 = Shape.fromKM(65535, 65535);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, (IndexProducer) arrayCountingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Shape shape0 = Shape.fromKM(59152, 59152);
      SimpleHasher simpleHasher0 = new SimpleHasher(59152, 59152);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, simpleHasher0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HasherCollection hasherCollection0 = new HasherCollection();
      SimpleBloomFilter simpleBloomFilter0 = null;
      try {
        simpleBloomFilter0 = new SimpleBloomFilter((Shape) null, hasherCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // shape
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Shape shape0 = Shape.fromNM(65535, 65535);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, (BitMapProducer) arrayCountingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleBloomFilter simpleBloomFilter0 = null;
      try {
        simpleBloomFilter0 = new SimpleBloomFilter((Shape) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // shape
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleBloomFilter simpleBloomFilter0 = null;
      try {
        simpleBloomFilter0 = new SimpleBloomFilter((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1, 1);
      SimpleHasher simpleHasher0 = new SimpleHasher(1, 600L);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, simpleHasher0);
      long[] longArray0 = new long[5];
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(longBiPredicate0).test(anyLong() , anyLong());
      BitMapProducer.CountingLongPredicate bitMapProducer_CountingLongPredicate0 = new BitMapProducer.CountingLongPredicate(longArray0, longBiPredicate0);
      boolean boolean0 = simpleBloomFilter0.forEachBitMap(bitMapProducer_CountingLongPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Shape shape0 = Shape.fromKM(751, 751);
      long[] longArray0 = new long[1];
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(longBiPredicate0).test(anyLong() , anyLong());
      BitMapProducer.CountingLongPredicate bitMapProducer_CountingLongPredicate0 = new BitMapProducer.CountingLongPredicate(longArray0, longBiPredicate0);
      LongPredicate longPredicate0 = bitMapProducer_CountingLongPredicate0.negate();
      BitMapProducer bitMapProducer0 = BitMapProducer.fromBitMapArray(longArray0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, bitMapProducer0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, (BitMapProducer) sparseBloomFilter0);
      boolean boolean0 = simpleBloomFilter0.forEachBitMap(longPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1051, 1051);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      Shape shape1 = simpleBloomFilter0.getShape();
      assertSame(shape0, shape1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Shape shape0 = Shape.fromKM(42, 42);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.merge((Hasher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // hasher
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      SimpleBloomFilter simpleBloomFilter1 = new SimpleBloomFilter(simpleBloomFilter0);
      int int0 = simpleBloomFilter1.cardinality();
      assertEquals(0, int0);
      assertFalse(simpleBloomFilter1.isSparse());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(1, 1, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      int int0 = simpleBloomFilter0.cardinality();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1, 1);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(arrayCountingBloomFilter0);
      boolean boolean0 = simpleBloomFilter0.merge((BloomFilter) arrayCountingBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Shape shape0 = Shape.fromNM(26, 26);
      int[] intArray0 = new int[1];
      intArray0[0] = 26;
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      BitMapProducer bitMapProducer0 = BitMapProducer.fromIndexProducer(indexProducer0, 26);
      SimpleBloomFilter simpleBloomFilter0 = null;
      try {
        simpleBloomFilter0 = new SimpleBloomFilter(shape0, bitMapProducer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BitMapProducer set a bit higher than the limit for the shape: 26
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SimpleBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Shape shape0 = Shape.fromKM(742, 742);
      int[] intArray0 = new int[3];
      intArray0[0] = (-4338);
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      SimpleBloomFilter simpleBloomFilter0 = null;
      try {
        simpleBloomFilter0 = new SimpleBloomFilter(shape0, indexProducer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // IndexProducer should only send values in the range[0,741]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SimpleBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Shape shape0 = Shape.fromNM(30, 30);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      BitMapProducer bitMapProducer0 = BitMapProducer.fromIndexProducer(simpleBloomFilter0, (-1));
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(longBiPredicate0).test(anyLong() , anyLong());
      boolean boolean0 = simpleBloomFilter0.forEachBitMapPair(bitMapProducer0, longBiPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Shape shape0 = Shape.fromKM(32, 32);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      SimpleHasher simpleHasher0 = new SimpleHasher(32, 32);
      SimpleBloomFilter simpleBloomFilter1 = new SimpleBloomFilter(shape0, simpleHasher0);
      boolean boolean0 = simpleBloomFilter0.contains((BloomFilter) simpleBloomFilter1);
      assertFalse(boolean0);
      assertFalse(simpleBloomFilter1.isSparse());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Shape shape0 = Shape.fromNM(12292, 12292);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(arrayCountingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Shape shape0 = Shape.fromNM(451, 451);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      long[] longArray0 = simpleBloomFilter0.asBitMapArray();
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Shape shape0 = Shape.fromKM(11, 64);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      SimpleBloomFilter simpleBloomFilter1 = new SimpleBloomFilter(simpleBloomFilter0);
      assertFalse(simpleBloomFilter1.isSparse());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleBloomFilter simpleBloomFilter0 = null;
      try {
        simpleBloomFilter0 = new SimpleBloomFilter((Shape) null, (BitMapProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // shape
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Shape shape0 = Shape.fromNM(4358, 4358);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      SimpleBloomFilter simpleBloomFilter1 = simpleBloomFilter0.copy();
      assertNotSame(simpleBloomFilter0, simpleBloomFilter1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Shape shape0 = Shape.fromKM(23, 23);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      boolean boolean0 = simpleBloomFilter0.contains((IndexProducer) simpleBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleBloomFilter simpleBloomFilter0 = null;
      try {
        simpleBloomFilter0 = new SimpleBloomFilter((Shape) null, (IndexProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // shape
         //
         verifyException("java.util.Objects", e);
      }
  }
}
