/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 11:28:00 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.PriorityQueue;
import org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter;
import org.apache.commons.collections4.bloomfilter.BitMapProducer;
import org.apache.commons.collections4.bloomfilter.BloomFilter;
import org.apache.commons.collections4.bloomfilter.Hasher;
import org.apache.commons.collections4.bloomfilter.HasherCollection;
import org.apache.commons.collections4.bloomfilter.IndexProducer;
import org.apache.commons.collections4.bloomfilter.Shape;
import org.apache.commons.collections4.bloomfilter.SimpleBloomFilter;
import org.apache.commons.collections4.bloomfilter.SimpleHasher;
import org.apache.commons.collections4.bloomfilter.SparseBloomFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class BloomFilter_ESTest extends BloomFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(26, 1976, 2676);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      byte[] byteArray0 = new byte[3];
      SimpleHasher simpleHasher0 = new SimpleHasher(byteArray0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, simpleHasher0);
      boolean boolean0 = simpleBloomFilter0.contains((BitMapProducer) sparseBloomFilter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1, 1);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, (IndexProducer) arrayCountingBloomFilter0);
      boolean boolean0 = simpleBloomFilter0.contains((BloomFilter) arrayCountingBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1, 1);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SimpleHasher simpleHasher0 = new SimpleHasher(1L, 1);
      boolean boolean0 = arrayCountingBloomFilter0.merge((Hasher) simpleHasher0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1, 1);
      SimpleHasher simpleHasher0 = new SimpleHasher(1, 1);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.remove((Hasher) simpleHasher0);
      boolean boolean1 = arrayCountingBloomFilter0.merge((Hasher) simpleHasher0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2676, 2676);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, (IndexProducer) simpleBloomFilter0);
      int int0 = sparseBloomFilter0.estimateUnion(simpleBloomFilter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2676, 2676);
      SimpleHasher simpleHasher0 = new SimpleHasher(2676, 0L);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, simpleHasher0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      int int0 = simpleBloomFilter0.estimateUnion(sparseBloomFilter0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1, 1);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SimpleHasher simpleHasher0 = new SimpleHasher(1L, 1);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, simpleHasher0);
      int int0 = sparseBloomFilter0.estimateUnion(arrayCountingBloomFilter0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2676, 2676);
      SimpleHasher simpleHasher0 = new SimpleHasher(2676, 0L);
      IndexProducer indexProducer0 = simpleHasher0.indices(shape0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, indexProducer0);
      int int0 = sparseBloomFilter0.estimateN();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1, 1);
      byte[] byteArray0 = new byte[8];
      SimpleHasher simpleHasher0 = new SimpleHasher(byteArray0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, simpleHasher0);
      int int0 = sparseBloomFilter0.estimateN();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2638, 2638);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      int int0 = sparseBloomFilter0.estimateIntersection(sparseBloomFilter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1, 1);
      SimpleHasher simpleHasher0 = new SimpleHasher(1, 1374L);
      IndexProducer indexProducer0 = simpleHasher0.indices(shape0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, simpleHasher0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, indexProducer0);
      int int0 = sparseBloomFilter0.estimateIntersection(simpleBloomFilter0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Shape shape0 = Shape.fromNP(1361, 0.08472180164906869);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SimpleHasher simpleHasher0 = new SimpleHasher(1, 1297L);
      boolean boolean0 = arrayCountingBloomFilter0.contains((Hasher) simpleHasher0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2676, 2676);
      SimpleHasher simpleHasher0 = new SimpleHasher(2676, 2676);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, simpleHasher0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(sparseBloomFilter0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.contains((BloomFilter) simpleBloomFilter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2676, 2676);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      boolean boolean0 = simpleBloomFilter0.contains((BitMapProducer) simpleBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1682554634, 1682554634);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      SimpleHasher simpleHasher0 = new SimpleHasher(1682554634, 1682554634);
      // Undeclared exception!
      sparseBloomFilter0.merge((Hasher) simpleHasher0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1456, 1456);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.merge((Hasher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // hasher
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Shape shape0 = Shape.fromKM(87855567, 87855567);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      sparseBloomFilter0.estimateUnion(arrayCountingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1, 1);
      SimpleHasher simpleHasher0 = new SimpleHasher(1, 1);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, simpleHasher0);
      Shape shape1 = Shape.fromNMK(16, 3181, 16);
      SparseBloomFilter sparseBloomFilter1 = new SparseBloomFilter(shape1, simpleHasher0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.estimateUnion(sparseBloomFilter1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value in list 16 is greater than maximum value (1)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SparseBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Shape shape0 = Shape.fromNM(87855567, 87855567);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      sparseBloomFilter0.estimateIntersection(arrayCountingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(1, 1, 1);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.estimateIntersection((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1, 1);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      Shape shape1 = Shape.fromNM(1, 2676);
      SimpleHasher simpleHasher0 = new SimpleHasher(2676, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape1, simpleHasher0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.estimateIntersection(simpleBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value in list 1854 is greater than maximum value (1)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SparseBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Shape shape0 = Shape.fromKM(15, 15);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      PriorityQueue<Hasher> priorityQueue0 = new PriorityQueue<Hasher>();
      HasherCollection hasherCollection0 = new HasherCollection(priorityQueue0);
      hasherCollection0.add((Hasher) hasherCollection0);
      // Undeclared exception!
      sparseBloomFilter0.contains((Hasher) hasherCollection0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(9, 9, 9);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.contains((Hasher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Hasher
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Shape shape0 = Shape.fromKM(87855567, 87855567);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      sparseBloomFilter0.contains((BloomFilter) simpleBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(9, 9, 9);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.contains((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Shape shape0 = Shape.fromNM(8287, 8287);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0, (IndexProducer) arrayCountingBloomFilter0);
      // Undeclared exception!
      simpleBloomFilter0.contains((BitMapProducer) arrayCountingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2676, 2676);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.contains((BitMapProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SimpleBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1, 1);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.estimateUnion((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2638, 2638);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      int int0 = sparseBloomFilter0.estimateN();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(26, 1976, 2676);
      byte[] byteArray0 = new byte[3];
      SimpleHasher simpleHasher0 = new SimpleHasher(byteArray0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, simpleHasher0);
      boolean boolean0 = sparseBloomFilter0.isFull();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2676, 2676);
      SimpleHasher simpleHasher0 = new SimpleHasher(2676, 0L);
      IndexProducer indexProducer0 = simpleHasher0.indices(shape0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, indexProducer0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(sparseBloomFilter0);
      boolean boolean0 = simpleBloomFilter0.isFull();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2676, 2676);
      SimpleHasher simpleHasher0 = new SimpleHasher(2676, 0L);
      IndexProducer indexProducer0 = simpleHasher0.indices(shape0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, indexProducer0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(sparseBloomFilter0);
      SimpleBloomFilter simpleBloomFilter1 = new SimpleBloomFilter(shape0);
      boolean boolean0 = simpleBloomFilter1.contains((BitMapProducer) simpleBloomFilter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Shape shape0 = Shape.fromKM(15, 15);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      PriorityQueue<Hasher> priorityQueue0 = new PriorityQueue<Hasher>();
      HasherCollection hasherCollection0 = new HasherCollection(priorityQueue0);
      boolean boolean0 = sparseBloomFilter0.contains((Hasher) hasherCollection0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2676, 2676);
      SimpleHasher simpleHasher0 = new SimpleHasher(2676, 0L);
      IndexProducer indexProducer0 = simpleHasher0.indices(shape0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0, indexProducer0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(sparseBloomFilter0);
      int int0 = simpleBloomFilter0.estimateIntersection(simpleBloomFilter0);
      assertEquals(1, int0);
  }
}
