/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 16:21:22 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter;
import org.apache.commons.collections4.bloomfilter.BitSetBloomFilter;
import org.apache.commons.collections4.bloomfilter.BloomFilter;
import org.apache.commons.collections4.bloomfilter.HasherBloomFilter;
import org.apache.commons.collections4.bloomfilter.hasher.DynamicHasher;
import org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentity;
import org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentityImpl;
import org.apache.commons.collections4.bloomfilter.hasher.Hasher;
import org.apache.commons.collections4.bloomfilter.hasher.Shape;
import org.apache.commons.collections4.bloomfilter.hasher.StaticHasher;
import org.apache.commons.collections4.bloomfilter.hasher.function.MD5Cyclic;
import org.apache.commons.collections4.bloomfilter.hasher.function.Murmur128x64Cyclic;
import org.apache.commons.collections4.bloomfilter.hasher.function.Murmur32x86Iterative;
import org.apache.commons.collections4.bloomfilter.hasher.function.ObjectsHashIterative;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class BitSetBloomFilter_ESTest extends BitSetBloomFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl(mD5Cyclic0);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 630, 630);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[7];
      linkedList0.offerFirst(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(mD5Cyclic0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      int int0 = bitSetBloomFilter0.xorCardinality(hasherBloomFilter0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl(mD5Cyclic0);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 643, 643);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[5];
      linkedList0.addFirst(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(mD5Cyclic0, linkedList0);
      bitSetBloomFilter0.merge((Hasher) dynamicHasher0);
      int int0 = bitSetBloomFilter0.orCardinality(bitSetBloomFilter0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl(mD5Cyclic0);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 643, 643);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[6];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(mD5Cyclic0, linkedList0);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(dynamicHasher0, shape0);
      StaticHasher staticHasher0 = bitSetBloomFilter0.getHasher();
      assertEquals(1, staticHasher0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      byte[] byteArray0 = HashFunctionIdentity.prepareSignatureBuffer(objectsHashIterative0);
      Shape shape0 = new Shape(objectsHashIterative0, 0.015625, 1, 27);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      bitSetBloomFilter0.merge((Hasher) dynamicHasher0);
      long[] longArray0 = bitSetBloomFilter0.getBits();
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl(mD5Cyclic0);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 643, 643);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[5];
      linkedList0.addFirst(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(mD5Cyclic0, linkedList0);
      bitSetBloomFilter0.merge((Hasher) dynamicHasher0);
      int int0 = bitSetBloomFilter0.cardinality();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      byte[] byteArray0 = HashFunctionIdentity.prepareSignatureBuffer(objectsHashIterative0);
      Shape shape0 = new Shape(objectsHashIterative0, 0.015625, 1, 27);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      bitSetBloomFilter0.merge((Hasher) dynamicHasher0);
      int int0 = bitSetBloomFilter0.andCardinality(bitSetBloomFilter0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 2585, 104729);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      bitSetBloomFilter0.xorCardinality(arrayCountingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        bitSetBloomFilter0.xorCardinality(bitSetBloomFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 12, 12);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        bitSetBloomFilter0.xorCardinality(hasherBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape null is not the same as Shape[ Murmur3_x86_32-SIGNED-ITERATIVE n=12 m=12 k=1 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        bitSetBloomFilter0.orCardinality((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) mD5Cyclic0, 385, 385);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      BitSetBloomFilter bitSetBloomFilter1 = new BitSetBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        bitSetBloomFilter0.orCardinality(bitSetBloomFilter1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape null is not the same as Shape[ MD5-SIGNED-CYCLIC n=385 m=385 k=1 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        bitSetBloomFilter0.merge((Hasher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) mD5Cyclic0, 1, 1);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      linkedList0.offer((byte[]) null);
      DynamicHasher dynamicHasher0 = new DynamicHasher(mD5Cyclic0, linkedList0);
      // Undeclared exception!
      try { 
        bitSetBloomFilter0.merge((Hasher) dynamicHasher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.security.MessageDigest", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter((Shape) null);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        bitSetBloomFilter0.merge((BloomFilter) hasherBloomFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 1, 1);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        bitSetBloomFilter0.merge((BloomFilter) hasherBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape null is not the same as Shape[ Objects32-SIGNED-ITERATIVE n=1 m=1 k=1 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        bitSetBloomFilter0.contains((Hasher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl(mD5Cyclic0);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 643, 643);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      linkedList0.offerFirst((byte[]) null);
      DynamicHasher dynamicHasher0 = new DynamicHasher(mD5Cyclic0, linkedList0);
      // Undeclared exception!
      try { 
        bitSetBloomFilter0.contains((Hasher) dynamicHasher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.security.MessageDigest", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Murmur128x64Cyclic murmur128x64Cyclic0 = new Murmur128x64Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x64Cyclic0, 1, 1);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      // Undeclared exception!
      try { 
        bitSetBloomFilter0.contains((Hasher) dynamicHasher0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hasher (Objects32-SIGNED-ITERATIVE) is not the hasher for shape (Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=1 m=1 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        bitSetBloomFilter0.andCardinality(bitSetBloomFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter((Shape) null);
      Murmur128x64Cyclic murmur128x64Cyclic0 = new Murmur128x64Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x64Cyclic0, 1901, 1901);
      BitSetBloomFilter bitSetBloomFilter1 = new BitSetBloomFilter(shape0);
      // Undeclared exception!
      try { 
        bitSetBloomFilter1.andCardinality(bitSetBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape null is not the same as Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=1901 m=1901 k=1 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BitSetBloomFilter bitSetBloomFilter0 = null;
      try {
        bitSetBloomFilter0 = new BitSetBloomFilter((Hasher) null, (Shape) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl(mD5Cyclic0);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 643, 643);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      linkedList0.offerFirst((byte[]) null);
      DynamicHasher dynamicHasher0 = new DynamicHasher(mD5Cyclic0, linkedList0);
      BitSetBloomFilter bitSetBloomFilter0 = null;
      try {
        bitSetBloomFilter0 = new BitSetBloomFilter(dynamicHasher0, shape0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.security.MessageDigest", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 27, 27, 27);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      StaticHasher staticHasher0 = bitSetBloomFilter0.getHasher();
      Shape shape1 = new Shape((HashFunctionIdentity) objectsHashIterative0, 27, 27);
      BitSetBloomFilter bitSetBloomFilter1 = null;
      try {
        bitSetBloomFilter1 = new BitSetBloomFilter(staticHasher0, shape1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // shape (Shape[ Objects32-SIGNED-ITERATIVE n=27 m=27 k=1 ]) does not match internal shape (Shape[ Objects32-SIGNED-ITERATIVE n=27 m=27 k=27 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.StaticHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape(objectsHashIterative0, 0.015625, 1, 27);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      int int0 = bitSetBloomFilter0.xorCardinality(bitSetBloomFilter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl(mD5Cyclic0);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 643, 643);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      int int0 = bitSetBloomFilter0.orCardinality(bitSetBloomFilter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 2556, 104729);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      bitSetBloomFilter0.orCardinality(arrayCountingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl(mD5Cyclic0);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 643, 643);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      boolean boolean0 = bitSetBloomFilter0.merge((BloomFilter) bitSetBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("IteratorChain cannot be changed after the first use of a method from the Iterator interface", "IteratorChain cannot be changed after the first use of a method from the Iterator interface", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, (-2427L));
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 2739, 2739, 4);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      StaticHasher staticHasher0 = arrayCountingBloomFilter0.getHasher();
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(staticHasher0, shape0);
      bitSetBloomFilter0.merge((BloomFilter) arrayCountingBloomFilter0);
      bitSetBloomFilter0.xorCardinality(arrayCountingBloomFilter0);
      bitSetBloomFilter0.merge((BloomFilter) arrayCountingBloomFilter0);
      // Undeclared exception!
      bitSetBloomFilter0.merge((BloomFilter) arrayCountingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl(mD5Cyclic0);
      byte[] byteArray0 = HashFunctionIdentity.prepareSignatureBuffer(mD5Cyclic0);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 630, 630);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      linkedList0.offerFirst(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(mD5Cyclic0, linkedList0);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(dynamicHasher0, shape0);
      boolean boolean0 = bitSetBloomFilter0.contains((Hasher) dynamicHasher0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl(mD5Cyclic0);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 643, 643);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[6];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(mD5Cyclic0, linkedList0);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      boolean boolean0 = bitSetBloomFilter0.contains((Hasher) dynamicHasher0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape(objectsHashIterative0, 0.015625, 1, 27);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      int int0 = bitSetBloomFilter0.andCardinality(bitSetBloomFilter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 2556, 104729);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      bitSetBloomFilter0.andCardinality(arrayCountingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape(objectsHashIterative0, 0.015625, 1, 27);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      int int0 = bitSetBloomFilter0.cardinality();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape(objectsHashIterative0, 0.015625, 1, 27);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      long[] longArray0 = bitSetBloomFilter0.getBits();
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) mD5Cyclic0, 3331, 3331);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur32x86Iterative0, linkedList0);
      // Undeclared exception!
      try { 
        bitSetBloomFilter0.merge((Hasher) dynamicHasher0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hasher (Murmur3_x86_32-SIGNED-ITERATIVE) is not the hasher for shape (Shape[ MD5-SIGNED-CYCLIC n=3331 m=3331 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }
}
