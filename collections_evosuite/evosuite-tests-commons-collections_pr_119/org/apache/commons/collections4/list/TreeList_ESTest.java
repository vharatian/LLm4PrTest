/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 18:17:12 GMT 2025
 */

package org.apache.commons.collections4.list;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.list.TreeList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class TreeList_ESTest extends TreeList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1625);
      linkedList0.add(integer0);
      linkedList0.add(integer0);
      treeList0.addAll((Collection<?>) linkedList0);
      TreeList.TreeListIterator<Object> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Object>(treeList0, 1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      treeList_TreeListIterator0.forEachRemaining(consumer0);
      treeList_TreeListIterator0.remove();
      assertFalse(treeList_TreeListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1625);
      linkedList0.add(integer0);
      linkedList0.add(integer0);
      linkedList0.add(integer0);
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      linkedList0.add(integer0);
      treeList0.addAll((Collection<?>) linkedList0);
      Object[] objectArray0 = treeList0.toArray();
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      TreeList<Object> treeList1 = new TreeList<Object>(treeList0);
      TreeList.TreeListIterator<Object> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Object>(treeList1, (-657));
      int int0 = treeList_TreeListIterator0.nextIndex();
      assertEquals((-657), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      TreeList.TreeListIterator<Integer> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Integer>(treeList0, 1879);
      boolean boolean0 = treeList_TreeListIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      TreeList.TreeListIterator<Integer> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Integer>(treeList0, 0);
      treeList_TreeListIterator0.checkModCount();
      assertFalse(treeList_TreeListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      int int0 = treeList0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      Integer integer0 = new Integer((-3576));
      treeList0.add(0, integer0);
      int int0 = treeList0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) treeList0);
      treeList0.addAll((Collection<?>) linkedList0);
      Integer integer0 = new Integer(2089);
      TreeList treeList1 = (TreeList)treeList0.set(0, integer0);
      assertEquals(1, treeList1.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      TreeList<Object> treeList1 = new TreeList<Object>(linkedList0);
      treeList1.add((Object) treeList0);
      assertEquals(2, treeList1.size());
      
      treeList1.remove(1);
      assertEquals(1, treeList1.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1625);
      linkedList0.add(integer0);
      linkedList0.add(integer0);
      TreeList<Integer> treeList0 = new TreeList<Integer>(linkedList0);
      ListIterator<Integer> listIterator0 = treeList0.listIterator(2);
      assertTrue(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      Integer integer0 = new Integer(0);
      treeList0.add(0, integer0);
      TreeList<Object> treeList1 = new TreeList<Object>(treeList0);
      treeList1.listIterator(0);
      assertEquals(1, treeList0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      ListIterator<Object> listIterator0 = treeList0.listIterator();
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1625);
      linkedList0.add(integer0);
      treeList0.addAll((Collection<?>) linkedList0);
      int int0 = treeList0.indexOf(integer0);
      assertEquals(1, treeList0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1850));
      linkedList0.add(integer0);
      Integer integer1 = new Integer(1625);
      linkedList0.add(integer1);
      Integer integer2 = new Integer(1625);
      treeList0.addAll((Collection<?>) linkedList0);
      int int0 = treeList0.indexOf(integer2);
      assertEquals(2, treeList0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.offerLast((Integer) null);
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      Object object0 = treeList0.get(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      // Undeclared exception!
      try { 
        treeList0.addAll((Collection<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      // Undeclared exception!
      try { 
        treeList0.add(2216, (Integer) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:2216, size=0
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TreeList<Object> treeList0 = null;
      try {
        treeList0 = new TreeList<Object>((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1625);
      linkedList0.add(integer0);
      linkedList0.add(integer0);
      linkedList0.add(integer0);
      TreeList<Integer> treeList0 = new TreeList<Integer>(linkedList0);
      treeList0.addAll((Collection<? extends Integer>) linkedList0);
      TreeList<Object> treeList1 = new TreeList<Object>();
      treeList0.retainAll(treeList1);
      assertFalse(treeList0.contains(1625));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      linkedList0.add((Integer) null);
      linkedList0.add((Integer) null);
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      linkedList0.pollLast();
      treeList0.addAll((Collection<?>) linkedList0);
      linkedList0.remove(1);
      treeList0.addAll(2, (Collection<?>) linkedList0);
      assertEquals(6, treeList0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(2401);
      linkedList0.add(integer0);
      Object object0 = new Object();
      treeList0.add(object0);
      linkedList0.add(integer0);
      linkedList0.add(integer0);
      treeList0.addAll((Collection<?>) linkedList0);
      boolean boolean0 = treeList0.contains(integer0);
      assertEquals(4, treeList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      int int0 = treeList0.indexOf((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      Iterator<Object> iterator0 = treeList0.iterator();
      TreeList.TreeListIterator<Object> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Object>(treeList0, 0);
      treeList_TreeListIterator0.add(iterator0);
      int int0 = treeList0.indexOf(treeList_TreeListIterator0);
      assertEquals(0, treeList_TreeListIterator0.previousIndex());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      // Undeclared exception!
      try { 
        treeList0.get(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:0, size=0
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      TreeList.TreeListIterator<Object> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Object>(treeList0, 2414);
      // Undeclared exception!
      try { 
        treeList_TreeListIterator0.set(treeList0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      treeList0.replaceAll(unaryOperator0);
      assertEquals(1, treeList0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      TreeList.TreeListIterator<Object> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Object>(treeList0, 1);
      treeList_TreeListIterator0.previous();
      treeList_TreeListIterator0.remove();
      assertEquals(0, treeList0.size());
      assertEquals((-1), treeList_TreeListIterator0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      TreeList.TreeListIterator<Object> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Object>(treeList0, 0);
      // Undeclared exception!
      try { 
        treeList_TreeListIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      TreeList.TreeListIterator<Integer> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Integer>(treeList0, (-1060));
      // Undeclared exception!
      try { 
        treeList_TreeListIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Already at start of list.
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      TreeList.TreeListIterator<Integer> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Integer>(treeList0, (-1));
      // Undeclared exception!
      try { 
        treeList_TreeListIterator0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      TreeList.TreeListIterator<Integer> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Integer>(treeList0, 2147483645);
      // Undeclared exception!
      try { 
        treeList_TreeListIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No element at index 2147483645.
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      Object object0 = new Object();
      treeList0.add(object0);
      // Undeclared exception!
      try { 
        treeList0.addAll(1, (Collection<?>) treeList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1625);
      linkedList0.add(integer0);
      linkedList0.add(integer0);
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      treeList0.addAll((Collection<?>) linkedList0);
      treeList0.addAll(0, (Collection<?>) linkedList0);
      assertEquals(6, treeList0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      linkedList0.add((Integer) null);
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      treeList0.add((Object) null);
      treeList0.addAll(1, (Collection<?>) linkedList0);
      treeList0.remove(1);
      assertEquals(4, treeList0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      linkedList0.add((Integer) null);
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      treeList0.add((Object) null);
      assertEquals(3, treeList0.size());
      
      treeList0.remove(1);
      assertEquals(2, treeList0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1625);
      linkedList0.add(integer0);
      linkedList0.add(integer0);
      linkedList0.add(integer0);
      linkedList0.add(integer0);
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      treeList0.addAll(1, (Collection<?>) linkedList0);
      treeList0.remove(1);
      assertEquals(7, treeList0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1625);
      linkedList0.add(integer0);
      linkedList0.add(integer0);
      linkedList0.add(integer0);
      linkedList0.add(integer0);
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      treeList0.remove(1);
      assertEquals(3, treeList0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      Integer integer0 = new Integer(1625);
      linkedList0.add(integer0);
      linkedList0.add(integer0);
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      linkedList0.add(integer0);
      treeList0.addAll(1, (Collection<?>) linkedList0);
      linkedList0.add(integer0);
      treeList0.addAll((Collection<?>) linkedList0);
      assertEquals(12, treeList0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      linkedList0.addFirst((Integer) null);
      linkedList0.add((Integer) null);
      linkedList0.add((Integer) null);
      TreeList<Integer> treeList0 = new TreeList<Integer>(linkedList0);
      treeList0.addAll((Collection<? extends Integer>) linkedList0);
      TreeList<Object> treeList1 = new TreeList<Object>(treeList0);
      boolean boolean0 = treeList1.addAll((Collection<?>) treeList0);
      assertEquals(8, treeList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      linkedList0.add((Integer) null);
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      treeList0.addAll((Collection<?>) linkedList0);
      TreeList<Object> treeList1 = new TreeList<Object>(linkedList0);
      boolean boolean0 = treeList1.addAll((Collection<?>) treeList0);
      assertEquals(6, treeList1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      linkedList0.add((Integer) null);
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      treeList0.addAll((Collection<?>) linkedList0);
      treeList0.remove(2);
      assertEquals(3, treeList0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      linkedList0.add((Integer) null);
      TreeList<Integer> treeList0 = new TreeList<Integer>(linkedList0);
      treeList0.add(0, (Integer) null);
      treeList0.add(0, (Integer) null);
      treeList0.remove(0);
      assertEquals(3, treeList0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      linkedList0.add((Integer) null);
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      treeList0.addAll((Collection<?>) linkedList0);
      treeList0.remove(1);
      assertEquals(3, treeList0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      linkedList0.add((Integer) null);
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      treeList0.addAll((Collection<?>) linkedList0);
      treeList0.addAll(2, (Collection<?>) linkedList0);
      treeList0.remove(2);
      assertEquals(5, treeList0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      linkedList0.add((Integer) null);
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      treeList0.addAll((Collection<?>) linkedList0);
      treeList0.lastIndexOf(linkedList0);
      assertEquals(4, treeList0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      treeList0.addAll((Collection<?>) linkedList0);
      int int0 = treeList0.lastIndexOf(linkedList0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      linkedList0.add((Integer) null);
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      treeList0.addAll((Collection<?>) linkedList0);
      boolean boolean0 = treeList0.contains(linkedList0);
      assertEquals(4, treeList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      linkedList0.add((Integer) null);
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      treeList0.addAll((Collection<?>) linkedList0);
      boolean boolean0 = treeList0.contains((Object) null);
      assertEquals(4, treeList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      // Undeclared exception!
      try { 
        treeList0.listIterator((-1615));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:-1615, size=0
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      Iterator<Object> iterator0 = treeList0.iterator();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.addFirst(iterator0);
      treeList0.addAll((Collection<?>) linkedList0);
      TreeList.TreeListIterator treeList_TreeListIterator0 = (TreeList.TreeListIterator)treeList0.get(0);
      assertTrue(treeList_TreeListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      boolean boolean0 = treeList0.addAll((Collection<? extends Integer>) treeList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      Object[] objectArray0 = treeList0.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      linkedList0.addFirst((Integer) null);
      linkedList0.add((Integer) null);
      linkedList0.add((Integer) null);
      TreeList<Integer> treeList0 = new TreeList<Integer>(linkedList0);
      treeList0.addAll((Collection<? extends Integer>) linkedList0);
      TreeList<Object> treeList1 = new TreeList<Object>(treeList0);
      Object object0 = treeList1.set(6, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      TreeList.TreeListIterator<Object> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Object>(treeList0, 2859);
      int int0 = treeList_TreeListIterator0.previousIndex();
      assertEquals(2858, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      treeList0.addAll(1, (Collection<?>) linkedList0);
      treeList0.remove(3);
      assertEquals(3, treeList0.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      treeList0.clear();
      assertEquals(0, treeList0.size());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      // Undeclared exception!
      try { 
        treeList0.remove(3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:3, size=0
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      TreeList<Integer> treeList0 = new TreeList<Integer>(linkedList0);
      TreeList<Object> treeList1 = new TreeList<Object>(treeList0);
      // Undeclared exception!
      try { 
        treeList1.set(6, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:6, size=0
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      ListIterator<Object> listIterator0 = treeList0.listIterator();
      assertEquals(0, treeList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
  }
}
