/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 13:52:12 GMT 2025
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.apache.commons.collections4.ComparatorUtils;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.CloneTransformer;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.junit.vintage.engine.support.UniqueIdStringifier;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ComparatorUtils_ESTest extends ComparatorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comparator<Integer> comparator0 = ComparatorUtils.naturalComparator();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(7);
      Integer integer2 = ComparatorUtils.max(integer0, integer1, comparator0);
      assertEquals(7, (int)integer2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparator<Integer> comparator0 = ComparatorUtils.naturalComparator();
      Comparator<Integer> comparator1 = ComparatorUtils.nullHighComparator(comparator0);
      Integer integer0 = new Integer(2115);
      Integer integer1 = ComparatorUtils.min((Integer) null, integer0, comparator1);
      assertEquals(2115, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Comparator<Integer>> linkedList0 = new LinkedList<Comparator<Integer>>();
      Comparator<Integer> comparator0 = ComparatorUtils.chainedComparator((Collection<Comparator<Integer>>) linkedList0);
      Comparator<Integer> comparator1 = ComparatorUtils.nullHighComparator(comparator0);
      assertFalse(comparator1.equals((Object)comparator0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparator<InstanceofPredicate>[] comparatorArray0 = (Comparator<InstanceofPredicate>[]) Array.newInstance(Comparator.class, 7);
      Comparator<InstanceofPredicate> comparator0 = ComparatorUtils.nullLowComparator(comparatorArray0[1]);
      InstanceofPredicate instanceofPredicate0 = ComparatorUtils.max((InstanceofPredicate) null, (InstanceofPredicate) null, comparator0);
      assertNull(instanceofPredicate0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      Comparator<Object> comparator0 = ComparatorUtils.chainedComparator((Collection<Comparator<Object>>) linkedList0);
      // Undeclared exception!
      try { 
        ComparatorUtils.min((Object) comparator0, (Object) linkedList0, comparator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ComparatorChains must contain at least one Comparator
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        ComparatorUtils.min((Comparator<Transformer>) null, (Comparator<Transformer>) null, (Comparator<Comparator<Transformer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(543);
      Predicate<Integer>[] predicateArray0 = (Predicate<Integer>[]) Array.newInstance(Predicate.class, 10);
      Predicate<Integer> predicate0 = NotNullPredicate.notNullPredicate();
      predicateArray0[0] = predicate0;
      Transformer<Integer, Integer>[] transformerArray0 = (Transformer<Integer, Integer>[]) Array.newInstance(Transformer.class, 0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Transformer<Integer, Integer> transformer0 = MapTransformer.mapTransformer((Map<? super Integer, ? extends Integer>) hashMap0);
      SwitchTransformer<Integer, Integer> switchTransformer0 = new SwitchTransformer<Integer, Integer>(predicateArray0, transformerArray0, transformer0);
      Comparator<Integer> comparator0 = ComparatorUtils.transformedComparator((Comparator<Integer>) null, (Transformer<? super Integer, ? extends Integer>) switchTransformer0);
      // Undeclared exception!
      try { 
        ComparatorUtils.min(integer0, integer0, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(5);
      IdentityPredicate<Integer> identityPredicate0 = new IdentityPredicate<Integer>(integer0);
      NotPredicate<Integer> notPredicate0 = new NotPredicate<Integer>(identityPredicate0);
      LinkedList<Comparator<Predicate<Integer>>> linkedList0 = new LinkedList<Comparator<Predicate<Integer>>>();
      Comparator<Predicate<Integer>> comparator0 = ComparatorUtils.chainedComparator((Collection<Comparator<Predicate<Integer>>>) linkedList0);
      // Undeclared exception!
      try { 
        ComparatorUtils.max((Predicate<Integer>) notPredicate0, (Predicate<Integer>) identityPredicate0, comparator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ComparatorChains must contain at least one Comparator
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UniqueIdStringifier uniqueIdStringifier0 = new UniqueIdStringifier();
      Transformer<UniqueIdStringifier, UniqueIdStringifier> transformer0 = CloneTransformer.cloneTransformer();
      Comparator<UniqueIdStringifier> comparator0 = ComparatorUtils.transformedComparator((Comparator<UniqueIdStringifier>) null, (Transformer<? super UniqueIdStringifier, ? extends UniqueIdStringifier>) transformer0);
      // Undeclared exception!
      try { 
        ComparatorUtils.max(uniqueIdStringifier0, uniqueIdStringifier0, comparator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The prototype must be cloneable via a public clone method
         //
         verifyException("org.apache.commons.collections4.functors.PrototypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparator<Boolean> comparator0 = ComparatorUtils.naturalComparator();
      // Undeclared exception!
      try { 
        ComparatorUtils.max(comparator0, comparator0, (Comparator<Comparator<Boolean>>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.comparators.ComparableComparator cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.collections4.comparators.ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        ComparatorUtils.chainedComparator((Collection<Comparator<Predicate<Integer>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ComparatorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comparator<Integer>[] comparatorArray0 = (Comparator<Integer>[]) Array.newInstance(Comparator.class, 7);
      Comparator<Integer> comparator0 = ComparatorUtils.nullLowComparator((Comparator<Integer>) null);
      comparatorArray0[0] = comparator0;
      comparatorArray0[1] = comparatorArray0[0];
      comparatorArray0[2] = comparatorArray0[0];
      comparatorArray0[3] = comparatorArray0[0];
      comparatorArray0[4] = comparatorArray0[2];
      comparatorArray0[5] = comparator0;
      comparatorArray0[6] = comparatorArray0[0];
      Comparator<Integer> comparator1 = ComparatorUtils.chainedComparator(comparatorArray0);
      assertFalse(comparator1.equals((Object)comparator0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean boolean1 = Boolean.FALSE;
      Boolean boolean2 = ComparatorUtils.max(boolean0, boolean1, (Comparator<Boolean>) null);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparable0).compareTo(any());
      doReturn((String) null).when(comparable0).toString();
      Comparable<Object> comparable1 = ComparatorUtils.max(comparable0, comparable0, (Comparator<Comparable<Object>>) null);
      assertSame(comparable1, comparable0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(4);
      Factory<Integer> factory0 = ConstantFactory.constantFactory(integer0);
      Transformer<Integer, Integer> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Integer>) factory0);
      Comparator<Integer> comparator0 = ComparatorUtils.transformedComparator((Comparator<Integer>) null, (Transformer<? super Integer, ? extends Integer>) transformer0);
      Comparator<Integer> comparator1 = ComparatorUtils.nullLowComparator(comparator0);
      Integer integer1 = ComparatorUtils.min((Integer) null, integer0, comparator1);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(4);
      Integer integer1 = ComparatorUtils.min(integer0, integer0, (Comparator<Integer>) null);
      assertEquals(4, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Comparator<Comparable<Object>> comparator0 = ComparatorUtils.naturalComparator();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparable0).compareTo(any());
      doReturn((String) null, (String) null).when(comparable0).toString();
      Comparable<Object> comparable1 = ComparatorUtils.max(comparable0, comparable0, comparator0);
      Comparable<Object> comparable2 = ComparatorUtils.min(comparable1, comparable1, comparator0);
      assertSame(comparable2, comparable1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Comparator<Object> comparator0 = ComparatorUtils.nullHighComparator((Comparator<Object>) null);
      assertNotNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Comparator<Integer>[] comparatorArray0 = (Comparator<Integer>[]) Array.newInstance(Comparator.class, 7);
      // Undeclared exception!
      try { 
        ComparatorUtils.chainedComparator(comparatorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // comparator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer(4);
      Factory<Integer> factory0 = ConstantFactory.constantFactory(integer0);
      Transformer<Integer, Integer> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Integer>) factory0);
      Comparator<Integer> comparator0 = ComparatorUtils.transformedComparator((Comparator<Integer>) null, (Transformer<? super Integer, ? extends Integer>) transformer0);
      Comparator<Integer> comparator1 = ComparatorUtils.reversedComparator(comparator0);
      assertFalse(comparator1.equals((Object)comparator0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      Comparator<Object> comparator0 = ComparatorUtils.chainedComparator((Collection<Comparator<Object>>) linkedList0);
      Transformer<Object, Object> transformer0 = CloneTransformer.cloneTransformer();
      Comparator<Object> comparator1 = ComparatorUtils.transformedComparator(comparator0, (Transformer<? super Object, ?>) transformer0);
      // Undeclared exception!
      try { 
        ComparatorUtils.min((Object) transformer0, (Object) linkedList0, comparator1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The prototype must be cloneable via a public clone method
         //
         verifyException("org.apache.commons.collections4.functors.PrototypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Comparator<Boolean> comparator0 = ComparatorUtils.booleanComparator(false);
      assertNotNull(comparator0);
  }
}
