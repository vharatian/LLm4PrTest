/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 14:31:40 GMT 2025
 */

package org.apache.commons.collections4.iterators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.FilterListIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FilterListIterator_ESTest extends FilterListIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FilterListIterator<Boolean> filterListIterator0 = new FilterListIterator<Boolean>();
      Object object0 = new Object();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.offerFirst(object0);
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      FilterListIterator<Object> filterListIterator1 = new FilterListIterator<Object>();
      filterListIterator1.hasPrevious();
      FilterListIterator<Object> filterListIterator2 = new FilterListIterator<Object>(listIterator0, predicate0);
      Object object1 = new Object();
      linkedList0.add(object1);
      // Undeclared exception!
      try { 
        filterListIterator2.next();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FilterListIterator<Boolean> filterListIterator0 = new FilterListIterator<Boolean>();
      Object object0 = new Object();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.offerFirst(object0);
      Integer integer0 = new Integer(0);
      linkedList0.add((Object) integer0);
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      FilterListIterator<Object> filterListIterator1 = new FilterListIterator<Object>(listIterator0, predicate0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      filterListIterator1.forEachRemaining(consumer0);
      filterListIterator1.hasNext();
      filterListIterator1.previous();
      FilterListIterator<Integer> filterListIterator2 = new FilterListIterator<Integer>();
      FilterListIterator<Integer> filterListIterator3 = new FilterListIterator<Integer>(filterListIterator2);
      FilterListIterator<Integer> filterListIterator4 = new FilterListIterator<Integer>(filterListIterator3, predicate0);
      // Undeclared exception!
      try { 
        filterListIterator4.add(integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FilterListIterator.add(Object) is not supported.
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.offerFirst(object0);
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      FilterListIterator<Object> filterListIterator0 = new FilterListIterator<Object>();
      filterListIterator0.hasPrevious();
      FilterListIterator<Object> filterListIterator1 = new FilterListIterator<Object>(listIterator0, predicate0);
      filterListIterator1.hasNext();
      // Undeclared exception!
      try { 
        filterListIterator1.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      ListIterator<Boolean> listIterator0 = linkedList0.listIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(predicate0);
      Object object0 = new Object();
      Boolean boolean0 = predicateTransformer0.transform(object0);
      linkedList0.add(boolean0);
      FilterListIterator<Boolean> filterListIterator0 = new FilterListIterator<Boolean>(listIterator0, predicate0);
      // Undeclared exception!
      try { 
        filterListIterator0.hasNext();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FilterListIterator<Boolean> filterListIterator0 = new FilterListIterator<Boolean>();
      Object object0 = new Object();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.offerFirst(object0);
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      FilterListIterator<Object> filterListIterator1 = new FilterListIterator<Object>();
      FilterListIterator<Object> filterListIterator2 = new FilterListIterator<Object>(listIterator0, predicate0);
      filterListIterator2.next();
      filterListIterator2.hasNext();
      assertEquals(0, filterListIterator2.previousIndex());
      
      filterListIterator2.previous();
      assertFalse(listIterator0.hasPrevious());
      assertEquals(0, filterListIterator2.nextIndex());
      
      int int0 = filterListIterator1.nextIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FilterListIterator<Boolean> filterListIterator0 = new FilterListIterator<Boolean>();
      Object object0 = new Object();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.offerFirst(object0);
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      FilterListIterator<Object> filterListIterator1 = new FilterListIterator<Object>(listIterator0, predicate0);
      filterListIterator1.hasPrevious();
      filterListIterator1.hasNext();
      // Undeclared exception!
      try { 
        filterListIterator1.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FilterListIterator<Boolean> filterListIterator0 = new FilterListIterator<Boolean>();
      Object object0 = new Object();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.offerFirst(object0);
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      Predicate<Object> predicate0 = new IdentityPredicate<Object>(filterListIterator0);
      FilterListIterator<Object> filterListIterator1 = new FilterListIterator<Object>(listIterator0, predicate0);
      filterListIterator1.hasNext();
      // Undeclared exception!
      try { 
        filterListIterator1.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FilterListIterator<Boolean> filterListIterator0 = new FilterListIterator<Boolean>();
      Object object0 = new Object();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.offerFirst(object0);
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      FilterListIterator<Object> filterListIterator1 = new FilterListIterator<Object>(listIterator0, predicate0);
      filterListIterator1.hasNext();
      // Undeclared exception!
      try { 
        filterListIterator1.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.offerFirst(object0);
      ListIterator<Object> listIterator0 = linkedList0.listIterator(0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      FilterListIterator<Object> filterListIterator0 = new FilterListIterator<Object>(listIterator0, predicate0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      filterListIterator0.forEachRemaining(consumer0);
      FilterListIterator<Object> filterListIterator1 = new FilterListIterator<Object>(listIterator0, predicate0);
      boolean boolean0 = filterListIterator0.hasNext();
      assertEquals(1, filterListIterator0.nextIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.offerFirst(object0);
      ListIterator<Object> listIterator0 = linkedList0.listIterator(0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      FilterListIterator<Object> filterListIterator0 = new FilterListIterator<Object>(listIterator0, predicate0);
      FilterListIterator<Object> filterListIterator1 = new FilterListIterator<Object>(listIterator0, predicate0);
      boolean boolean0 = filterListIterator0.hasNext();
      assertFalse(listIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FilterListIterator<Boolean> filterListIterator0 = new FilterListIterator<Boolean>();
      Object object0 = new Object();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.offerFirst(object0);
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      FilterListIterator<Object> filterListIterator1 = new FilterListIterator<Object>();
      FilterListIterator<Object> filterListIterator2 = new FilterListIterator<Object>(listIterator0, predicate0);
      filterListIterator2.hasNext();
      boolean boolean0 = filterListIterator2.hasNext();
      assertFalse(listIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FilterListIterator<Boolean> filterListIterator0 = new FilterListIterator<Boolean>();
      Object object0 = new Object();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.offerFirst(object0);
      ListIterator<Object> listIterator0 = linkedList0.listIterator(0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      FilterListIterator<Object> filterListIterator1 = new FilterListIterator<Object>(listIterator0, predicate0);
      FilterListIterator<Object> filterListIterator2 = new FilterListIterator<Object>(listIterator0, predicate0);
      filterListIterator2.next();
      assertEquals(0, filterListIterator2.previousIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.offerFirst(object0);
      ListIterator<Object> listIterator0 = linkedList0.listIterator(0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      FilterListIterator<Object> filterListIterator0 = new FilterListIterator<Object>(listIterator0, predicate0);
      FilterListIterator<Object> filterListIterator1 = new FilterListIterator<Object>(listIterator0, predicate0);
      filterListIterator1.next();
      assertEquals(0, filterListIterator1.previousIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FilterListIterator<Boolean> filterListIterator0 = new FilterListIterator<Boolean>();
      Object object0 = new Object();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.offerFirst(object0);
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      FilterListIterator<Object> filterListIterator1 = new FilterListIterator<Object>(listIterator0, predicate0);
      boolean boolean0 = filterListIterator1.hasNext();
      assertFalse(listIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FilterListIterator<Boolean> filterListIterator0 = new FilterListIterator<Boolean>();
      Object object0 = new Object();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.offerFirst(object0);
      ListIterator<Object> listIterator0 = linkedList0.listIterator(0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      FilterListIterator<Object> filterListIterator1 = new FilterListIterator<Object>(listIterator0, predicate0);
      FilterListIterator<Object> filterListIterator2 = new FilterListIterator<Object>(filterListIterator1);
      // Undeclared exception!
      try { 
        filterListIterator2.hasNext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.offerFirst(object0);
      ListIterator<Object> listIterator0 = linkedList0.listIterator(0);
      FilterListIterator<Object> filterListIterator0 = new FilterListIterator<Object>(listIterator0);
      // Undeclared exception!
      try { 
        filterListIterator0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.offerFirst(object0);
      ListIterator<Object> listIterator0 = linkedList0.listIterator(0);
      FilterListIterator<Object> filterListIterator0 = new FilterListIterator<Object>(listIterator0);
      // Undeclared exception!
      try { 
        filterListIterator0.hasNext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FilterListIterator<Object> filterListIterator0 = new FilterListIterator<Object>();
      assertEquals((-1), filterListIterator0.previousIndex());
      
      Class<Object> class0 = Object.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      FilterListIterator<Integer> filterListIterator1 = new FilterListIterator<Integer>(predicate0);
      Predicate<? super Integer> predicate1 = filterListIterator1.getPredicate();
      assertNotNull(predicate1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FilterListIterator<Boolean> filterListIterator0 = new FilterListIterator<Boolean>();
      int int0 = filterListIterator0.nextIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      ListIterator<Boolean> listIterator0 = linkedList0.listIterator();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(listIterator0);
      FilterListIterator<Object> filterListIterator0 = new FilterListIterator<Object>(listIterator0, identityPredicate0);
      filterListIterator0.nextIndex();
      // Undeclared exception!
      try { 
        filterListIterator0.set(identityPredicate0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FilterListIterator.set(Object) is not supported.
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FilterListIterator<Integer> filterListIterator0 = new FilterListIterator<Integer>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      FilterListIterator<Object> filterListIterator1 = new FilterListIterator<Object>(filterListIterator0, uniquePredicate0);
      assertEquals((-1), filterListIterator1.previousIndex());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ListIterator<Integer> listIterator0 = null;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) null, comparator0);
      FilterListIterator<Integer> filterListIterator0 = new FilterListIterator<Integer>((ListIterator<? extends Integer>) null, predicate0);
      FilterListIterator<Object> filterListIterator1 = new FilterListIterator<Object>(filterListIterator0);
      // Undeclared exception!
      try { 
        filterListIterator1.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FilterListIterator<Predicate<Integer>> filterListIterator0 = new FilterListIterator<Predicate<Integer>>();
      // Undeclared exception!
      try { 
        filterListIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FilterListIterator.remove() is not supported.
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FilterListIterator<Boolean> filterListIterator0 = new FilterListIterator<Boolean>();
      // Undeclared exception!
      try { 
        filterListIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FilterListIterator.remove() is not supported.
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FilterListIterator<Object> filterListIterator0 = new FilterListIterator<Object>();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        filterListIterator0.add(object0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FilterListIterator.add(Object) is not supported.
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FilterListIterator<Boolean> filterListIterator0 = new FilterListIterator<Boolean>((ListIterator<? extends Boolean>) null);
      filterListIterator0.hasNext();
      filterListIterator0.previousIndex();
      FilterListIterator<Object> filterListIterator1 = new FilterListIterator<Object>((ListIterator<?>) null);
      filterListIterator1.setListIterator(filterListIterator0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(filterListIterator1);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(equalPredicate0);
      Transformer<Integer, Boolean> transformer0 = PredicateTransformer.predicateTransformer((Predicate<? super Integer>) nullIsTruePredicate0);
      TransformerPredicate<Integer> transformerPredicate0 = new TransformerPredicate<Integer>(transformer0);
      FilterListIterator<Integer> filterListIterator2 = new FilterListIterator<Integer>(transformerPredicate0);
      Integer integer0 = new Integer((-1));
      // Undeclared exception!
      try { 
        filterListIterator2.add(integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FilterListIterator.add(Object) is not supported.
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FilterListIterator<Boolean> filterListIterator0 = new FilterListIterator<Boolean>();
      filterListIterator0.hasPrevious();
      FilterListIterator<Object> filterListIterator1 = new FilterListIterator<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      filterListIterator0.forEachRemaining(consumer0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(filterListIterator1, comparator0, comparatorPredicate_Criterion0);
      filterListIterator0.setPredicate(comparatorPredicate0);
      Integer integer0 = new Integer(2);
      comparatorPredicate0.evaluate(filterListIterator1);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FilterListIterator<Boolean> filterListIterator2 = new FilterListIterator<Boolean>(comparatorPredicate0);
      filterListIterator0.setListIterator(filterListIterator2);
      FilterListIterator<Boolean> filterListIterator3 = new FilterListIterator<Boolean>(comparatorPredicate0);
      filterListIterator0.setListIterator(filterListIterator3);
      filterListIterator2.hasPrevious();
      comparatorPredicate0.evaluate(filterListIterator1);
      ComparatorPredicate.comparatorPredicate(integer0, comparator1);
      // Undeclared exception!
      try { 
        filterListIterator1.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      ListIterator<Boolean> listIterator0 = linkedList0.listIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(linkedList0);
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(equalPredicate0);
      FilterListIterator<Object> filterListIterator0 = new FilterListIterator<Object>(listIterator0);
      // Undeclared exception!
      try { 
        filterListIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Object object0 = new Object();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.offerFirst((Object) null);
      ListIterator<Object> listIterator0 = linkedList0.listIterator(0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      FilterListIterator<Object> filterListIterator0 = new FilterListIterator<Object>(listIterator0, predicate0);
      FilterListIterator<Object> filterListIterator1 = new FilterListIterator<Object>(listIterator0, predicate0);
      boolean boolean0 = filterListIterator1.hasNext();
      assertTrue(listIterator0.hasPrevious());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FilterListIterator<Integer> filterListIterator0 = new FilterListIterator<Integer>();
      FilterListIterator<Integer> filterListIterator1 = new FilterListIterator<Integer>(filterListIterator0);
      assertEquals((-1), filterListIterator1.previousIndex());
      
      // Undeclared exception!
      try { 
        filterListIterator1.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FilterListIterator<Object> filterListIterator0 = new FilterListIterator<Object>();
      int int0 = filterListIterator0.previousIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FilterListIterator<Object> filterListIterator0 = new FilterListIterator<Object>((Predicate<? super Object>) null);
      assertEquals(0, filterListIterator0.nextIndex());
      
      filterListIterator0.setPredicate((Predicate<? super Object>) null);
      filterListIterator0.hasNext();
      filterListIterator0.getListIterator();
      filterListIterator0.previousIndex();
      FilterListIterator<Integer> filterListIterator1 = new FilterListIterator<Integer>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      filterListIterator1.forEachRemaining(consumer0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        filterListIterator1.set(integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FilterListIterator.set(Object) is not supported.
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FilterListIterator<Integer> filterListIterator0 = new FilterListIterator<Integer>();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      filterListIterator0.setPredicate(predicate0);
      boolean boolean0 = filterListIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FilterListIterator<Transformer<Integer, Object>> filterListIterator0 = new FilterListIterator<Transformer<Integer, Object>>();
      // Undeclared exception!
      try { 
        filterListIterator0.set((Transformer<Integer, Object>) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FilterListIterator.set(Object) is not supported.
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FilterListIterator<Integer> filterListIterator0 = new FilterListIterator<Integer>();
      FilterListIterator<Integer> filterListIterator1 = new FilterListIterator<Integer>(filterListIterator0);
      FilterListIterator<Object> filterListIterator2 = new FilterListIterator<Object>(filterListIterator0);
      // Undeclared exception!
      try { 
        filterListIterator2.set(filterListIterator1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FilterListIterator.set(Object) is not supported.
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Object object0 = new Object();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.offerFirst(object0);
      ListIterator<Object> listIterator0 = linkedList0.listIterator(0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      FilterListIterator<Object> filterListIterator0 = new FilterListIterator<Object>(listIterator0, predicate0);
      filterListIterator0.setPredicate(predicate0);
      FilterListIterator<Object> filterListIterator1 = new FilterListIterator<Object>(listIterator0, predicate0);
      filterListIterator0.hasNext();
      // Undeclared exception!
      try { 
        filterListIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FilterListIterator<Boolean> filterListIterator0 = new FilterListIterator<Boolean>();
      FilterListIterator<Object> filterListIterator1 = new FilterListIterator<Object>(filterListIterator0);
      boolean boolean0 = filterListIterator1.hasPrevious();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FilterListIterator<Integer> filterListIterator0 = new FilterListIterator<Integer>();
      // Undeclared exception!
      try { 
        filterListIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FilterListIterator<Boolean> filterListIterator0 = new FilterListIterator<Boolean>();
      ListIterator<? extends Boolean> listIterator0 = filterListIterator0.getListIterator();
      assertNull(listIterator0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FilterListIterator<Predicate<Boolean>> filterListIterator0 = new FilterListIterator<Predicate<Boolean>>();
      boolean boolean0 = filterListIterator0.hasPrevious();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Object object0 = new Object();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate(object0);
      FilterListIterator<Integer> filterListIterator0 = new FilterListIterator<Integer>(predicate0);
      filterListIterator0.getListIterator();
      FilterListIterator<Object> filterListIterator1 = new FilterListIterator<Object>();
      filterListIterator1.setListIterator(filterListIterator0);
      filterListIterator1.hasPrevious();
      // Undeclared exception!
      try { 
        filterListIterator1.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Predicate<Integer> predicate0 = UniquePredicate.uniquePredicate();
      FilterListIterator<Integer> filterListIterator0 = new FilterListIterator<Integer>(predicate0);
      FilterListIterator<Integer> filterListIterator1 = new FilterListIterator<Integer>(filterListIterator0);
      filterListIterator0.hasNext();
      filterListIterator1.setListIterator(filterListIterator0);
      filterListIterator1.getPredicate();
      FilterListIterator<Object> filterListIterator2 = new FilterListIterator<Object>();
      // Undeclared exception!
      try { 
        filterListIterator2.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FilterListIterator<Boolean> filterListIterator0 = new FilterListIterator<Boolean>();
      FilterListIterator<Object> filterListIterator1 = new FilterListIterator<Object>(filterListIterator0);
      filterListIterator1.setListIterator(filterListIterator0);
      boolean boolean0 = filterListIterator1.hasPrevious();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FilterListIterator<Object> filterListIterator0 = new FilterListIterator<Object>();
      filterListIterator0.getPredicate();
      FilterListIterator<Integer> filterListIterator1 = new FilterListIterator<Integer>();
      assertEquals(0, filterListIterator1.nextIndex());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FilterListIterator<Integer> filterListIterator0 = new FilterListIterator<Integer>();
      boolean boolean0 = filterListIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FilterListIterator<Integer> filterListIterator0 = new FilterListIterator<Integer>();
      // Undeclared exception!
      try { 
        filterListIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ListIterator<Integer> listIterator0 = null;
      FilterListIterator<Integer> filterListIterator0 = new FilterListIterator<Integer>((ListIterator<? extends Integer>) null);
      filterListIterator0.hasNext();
      filterListIterator0.getPredicate();
      // Undeclared exception!
      try { 
        filterListIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }
}
