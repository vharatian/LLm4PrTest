/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 14:23:56 GMT 2025
 */

package org.apache.commons.collections4.iterators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import org.apache.commons.collections4.iterators.CollatingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CollatingIterator_ESTest extends CollatingIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-986));
      linkedList0.add(integer0);
      Integer integer1 = new Integer((-986));
      linkedList0.offerLast(integer1);
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-986)).when(comparator0).compare(any() , any());
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>(comparator0, listIterator0, listIterator0);
      collatingIterator0.next();
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>(comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      collatingIterator0.setComparator(comparator1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 4);
      CollatingIterator<Integer> collatingIterator0 = new CollatingIterator<Integer>(comparator0, 0);
      iteratorArray0[0] = (Iterator<Integer>) collatingIterator0;
      iteratorArray0[1] = (Iterator<Integer>) collatingIterator0;
      iteratorArray0[2] = (Iterator<Integer>) collatingIterator0;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      iteratorArray0[3] = (Iterator<Integer>) listIterator0;
      CollatingIterator<Object> collatingIterator1 = new CollatingIterator<Object>(comparator0, iteratorArray0);
      collatingIterator1.setIterator(0, iteratorArray0[3]);
      assertEquals(4, iteratorArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.add((Object) linkedList0);
      ListIterator<Object> listIterator1 = linkedList1.listIterator(0);
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>(comparator0, listIterator1, listIterator0);
      LinkedList linkedList2 = (LinkedList)collatingIterator0.next();
      assertEquals(0, linkedList2.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CollatingIterator<Iterator<Integer>> collatingIterator0 = new CollatingIterator<Iterator<Integer>>();
      Integer integer0 = new Integer((-330));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add(integer0);
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      CollatingIterator<Object> collatingIterator1 = new CollatingIterator<Object>((Comparator<? super Object>) null, collatingIterator0, listIterator0);
      collatingIterator1.next();
      int int0 = collatingIterator1.getIteratorIndex();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CollatingIterator<Iterator<Integer>> collatingIterator0 = new CollatingIterator<Iterator<Integer>>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      CollatingIterator<Object> collatingIterator1 = new CollatingIterator<Object>(comparator0, collatingIterator0, collatingIterator0);
      Comparator<? super Object> comparator1 = collatingIterator1.getComparator();
      assertNotNull(comparator1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CollatingIterator<Integer> collatingIterator0 = new CollatingIterator<Integer>();
      // Undeclared exception!
      try { 
        collatingIterator0.setIterator(1, collatingIterator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CollatingIterator<Integer> collatingIterator0 = new CollatingIterator<Integer>();
      collatingIterator0.hasNext();
      // Undeclared exception!
      try { 
        collatingIterator0.setIterator(1, collatingIterator0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't do that after next or hasNext has been called.
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>();
      // Undeclared exception!
      try { 
        collatingIterator0.setIterator((-1), collatingIterator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(2);
      linkedList0.add(integer0);
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>((Comparator<? super Object>) null, listIterator0, listIterator0);
      collatingIterator0.next();
      linkedList0.add(integer0);
      // Undeclared exception!
      try { 
        collatingIterator0.remove();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>((Comparator<? super Object>) null, listIterator0, listIterator0);
      collatingIterator0.next();
      collatingIterator0.remove();
      // Undeclared exception!
      try { 
        collatingIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>();
      collatingIterator0.addIterator(collatingIterator0);
      // Undeclared exception!
      collatingIterator0.next();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      linkedList0.add((Integer) null);
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>((Comparator<? super Object>) null, listIterator0, listIterator0);
      // Undeclared exception!
      try { 
        collatingIterator0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // You must invoke setComparator() to set a comparator first.
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>();
      // Undeclared exception!
      try { 
        collatingIterator0.addIterator((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>();
      collatingIterator0.hasNext();
      // Undeclared exception!
      try { 
        collatingIterator0.addIterator(collatingIterator0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't do that after next or hasNext has been called.
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Iterator<Object>[] iteratorArray0 = (Iterator<Object>[]) Array.newInstance(Iterator.class, 1);
      CollatingIterator<Object> collatingIterator0 = null;
      try {
        collatingIterator0 = new CollatingIterator<Object>((Comparator<? super Object>) null, iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CollatingIterator<Integer> collatingIterator0 = null;
      try {
        collatingIterator0 = new CollatingIterator<Integer>((Comparator<? super Integer>) null, (Iterator<? extends Integer>) null, (Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CollatingIterator<Integer> collatingIterator0 = null;
      try {
        collatingIterator0 = new CollatingIterator<Integer>((Comparator<? super Integer>) null, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-986));
      linkedList0.add(integer0);
      linkedList0.offerLast(integer0);
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(3635).when(comparator0).compare(any() , any());
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>(comparator0, listIterator0, listIterator0);
      collatingIterator0.next();
      boolean boolean0 = collatingIterator0.hasNext();
      assertFalse(listIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 3);
      CollatingIterator<Integer> collatingIterator0 = new CollatingIterator<Integer>(comparator0, 33);
      iteratorArray0[0] = (Iterator<Integer>) collatingIterator0;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      iteratorArray0[1] = (Iterator<Integer>) listIterator0;
      iteratorArray0[2] = (Iterator<Integer>) collatingIterator0;
      Integer integer0 = new Integer(33);
      linkedList0.add(integer0);
      CollatingIterator<Integer> collatingIterator1 = new CollatingIterator<Integer>(comparator0, iteratorArray0);
      boolean boolean0 = collatingIterator1.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CollatingIterator<Integer> collatingIterator0 = new CollatingIterator<Integer>((Comparator<? super Integer>) null);
      collatingIterator0.addIterator(collatingIterator0);
      // Undeclared exception!
      collatingIterator0.hasNext();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CollatingIterator<Iterator<Integer>> collatingIterator0 = new CollatingIterator<Iterator<Integer>>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      CollatingIterator<Object> collatingIterator1 = new CollatingIterator<Object>((Comparator<? super Object>) null, collatingIterator0, listIterator0);
      try { 
        collatingIterator1.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>();
      collatingIterator0.hasNext();
      // Undeclared exception!
      try { 
        collatingIterator0.setComparator((Comparator<? super Object>) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't do that after next or hasNext has been called.
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(2);
      linkedList0.add(integer0);
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>((Comparator<? super Object>) null, listIterator0, listIterator0);
      collatingIterator0.next();
      int int0 = collatingIterator0.getIteratorIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CollatingIterator<Integer> collatingIterator0 = new CollatingIterator<Integer>();
      // Undeclared exception!
      try { 
        collatingIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No value can be removed at present
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      linkedList0.add((Integer) null);
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>(comparator0, listIterator0, listIterator0);
      collatingIterator0.next();
      collatingIterator0.next();
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CollatingIterator<Integer> collatingIterator0 = new CollatingIterator<Integer>();
      CollatingIterator<Integer> collatingIterator1 = new CollatingIterator<Integer>(comparator0, collatingIterator0, collatingIterator0);
      List<Iterator<? extends Integer>> list0 = collatingIterator1.getIterators();
      CollatingIterator<Integer> collatingIterator2 = new CollatingIterator<Integer>((Comparator<? super Integer>) null, list0);
      assertFalse(collatingIterator2.equals((Object)collatingIterator1));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>();
      Comparator<? super Object> comparator0 = collatingIterator0.getComparator();
      assertNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>((Comparator<? super Object>) null, listIterator0, listIterator0);
      linkedList0.add((Integer) null);
      // Undeclared exception!
      try { 
        collatingIterator0.next();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CollatingIterator<Integer> collatingIterator0 = new CollatingIterator<Integer>();
      // Undeclared exception!
      try { 
        collatingIterator0.setIterator(1, (Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }
}
