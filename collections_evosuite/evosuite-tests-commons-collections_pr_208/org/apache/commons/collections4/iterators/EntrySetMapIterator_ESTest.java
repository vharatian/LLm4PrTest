/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 14:26:02 GMT 2025
 */

package org.apache.commons.collections4.iterators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class EntrySetMapIterator_ESTest extends EntrySetMapIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(1);
      hashMap0.put((Integer) null, (Integer) null);
      EntrySetMapIterator<Integer, Integer> entrySetMapIterator0 = new EntrySetMapIterator<Integer, Integer>(hashMap0);
      entrySetMapIterator0.next();
      Integer integer1 = entrySetMapIterator0.setValue(integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer0, integer0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      hashMap0.put(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry0);
      EntrySetMapIterator<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> entrySetMapIterator0 = new EntrySetMapIterator<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(hashMap0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = entrySetMapIterator0.next();
      assertSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(717);
      hashMap0.put(integer0, integer0);
      EntrySetMapIterator<Integer, Integer> entrySetMapIterator0 = new EntrySetMapIterator<Integer, Integer>(hashMap0);
      boolean boolean0 = entrySetMapIterator0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> hashMap0 = new HashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      EntrySetMapIterator<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> entrySetMapIterator0 = new EntrySetMapIterator<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(hashMap0);
      boolean boolean0 = entrySetMapIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.put((Integer) null, (Integer) null);
      EntrySetMapIterator<Integer, Integer> entrySetMapIterator0 = new EntrySetMapIterator<Integer, Integer>(hashMap0);
      entrySetMapIterator0.next();
      Integer integer0 = entrySetMapIterator0.getValue();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.put((Integer) null, (Integer) null);
      EntrySetMapIterator<Integer, Integer> entrySetMapIterator0 = new EntrySetMapIterator<Integer, Integer>(hashMap0);
      entrySetMapIterator0.next();
      Integer integer0 = entrySetMapIterator0.getKey();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-1));
      hashMap0.put(integer0, integer0);
      EntrySetMapIterator<Integer, Integer> entrySetMapIterator0 = new EntrySetMapIterator<Integer, Integer>(hashMap0);
      entrySetMapIterator0.next();
      BiFunction<Integer, Integer, Integer> biFunction0 = (BiFunction<Integer, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyInt() , anyInt());
      hashMap0.compute(integer0, biFunction0);
      // Undeclared exception!
      try { 
        entrySetMapIterator0.remove();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      EntrySetMapIterator<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> entrySetMapIterator0 = new EntrySetMapIterator<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>(hashMap0);
      // Undeclared exception!
      try { 
        entrySetMapIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      EntrySetMapIterator<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> entrySetMapIterator0 = new EntrySetMapIterator<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>(hashMap0);
      hashMap0.clear();
      // Undeclared exception!
      try { 
        entrySetMapIterator0.next();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EntrySetMapIterator<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> entrySetMapIterator0 = null;
      try {
        entrySetMapIterator0 = new EntrySetMapIterator<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>((Map<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.EntrySetMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      Integer integer0 = new Integer(2008);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      hashMap0.put(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry0);
      EntrySetMapIterator<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> entrySetMapIterator0 = new EntrySetMapIterator<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(hashMap0);
      Consumer<AbstractMap.SimpleImmutableEntry<Integer, Integer>> consumer0 = (Consumer<AbstractMap.SimpleImmutableEntry<Integer, Integer>>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      entrySetMapIterator0.forEachRemaining(consumer0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = entrySetMapIterator0.getValue();
      assertSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      Integer integer0 = new Integer(2008);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      hashMap0.put(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry0);
      EntrySetMapIterator<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> entrySetMapIterator0 = new EntrySetMapIterator<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(hashMap0);
      Consumer<AbstractMap.SimpleImmutableEntry<Integer, Integer>> consumer0 = (Consumer<AbstractMap.SimpleImmutableEntry<Integer, Integer>>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      entrySetMapIterator0.forEachRemaining(consumer0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = entrySetMapIterator0.getKey();
      assertSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      EntrySetMapIterator<Integer, Integer> entrySetMapIterator0 = new EntrySetMapIterator<Integer, Integer>(hashMap0);
      String string0 = entrySetMapIterator0.toString();
      assertEquals("MapIterator[]", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer((-1216));
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      EntrySetMapIterator<Integer, Integer> entrySetMapIterator0 = new EntrySetMapIterator<Integer, Integer>(hashMap0);
      // Undeclared exception!
      try { 
        entrySetMapIterator0.setValue(integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator setValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.iterators.EntrySetMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      EntrySetMapIterator<Integer, Integer> entrySetMapIterator0 = new EntrySetMapIterator<Integer, Integer>(hashMap0);
      // Undeclared exception!
      try { 
        entrySetMapIterator0.getValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator getValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.iterators.EntrySetMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      EntrySetMapIterator<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> entrySetMapIterator0 = new EntrySetMapIterator<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(hashMap0);
      // Undeclared exception!
      try { 
        entrySetMapIterator0.getKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator getKey() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.iterators.EntrySetMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-1));
      hashMap0.put(integer0, integer0);
      EntrySetMapIterator<Integer, Integer> entrySetMapIterator0 = new EntrySetMapIterator<Integer, Integer>(hashMap0);
      entrySetMapIterator0.next();
      String string0 = entrySetMapIterator0.toString();
      assertEquals("MapIterator[-1=-1]", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      EntrySetMapIterator<Integer, Integer> entrySetMapIterator0 = new EntrySetMapIterator<Integer, Integer>(hashMap0);
      // Undeclared exception!
      try { 
        entrySetMapIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator remove() can only be called once after next()
         //
         verifyException("org.apache.commons.collections4.iterators.EntrySetMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-1));
      hashMap0.put(integer0, integer0);
      EntrySetMapIterator<Integer, Integer> entrySetMapIterator0 = new EntrySetMapIterator<Integer, Integer>(hashMap0);
      entrySetMapIterator0.next();
      entrySetMapIterator0.remove();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      EntrySetMapIterator<Integer, Integer> entrySetMapIterator0 = new EntrySetMapIterator<Integer, Integer>(hashMap0);
      entrySetMapIterator0.reset();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      Integer integer0 = new Integer(2008);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      hashMap0.put(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry0);
      EntrySetMapIterator<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> entrySetMapIterator0 = new EntrySetMapIterator<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(hashMap0);
      Consumer<AbstractMap.SimpleImmutableEntry<Integer, Integer>> consumer0 = (Consumer<AbstractMap.SimpleImmutableEntry<Integer, Integer>>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      entrySetMapIterator0.forEachRemaining(consumer0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = entrySetMapIterator0.setValue((AbstractMap.SimpleImmutableEntry<Integer, Integer>) null);
      assertSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry0);
  }
}
