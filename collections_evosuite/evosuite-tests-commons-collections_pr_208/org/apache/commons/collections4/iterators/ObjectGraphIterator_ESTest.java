/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 14:44:58 GMT 2025
 */

package org.apache.commons.collections4.iterators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.ChainedTransformer;
import org.apache.commons.collections4.functors.CloneTransformer;
import org.apache.commons.collections4.functors.ClosureTransformer;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.ObjectGraphIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ObjectGraphIterator_ESTest extends ObjectGraphIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(8);
      ConstantTransformer<Object, Integer> constantTransformer0 = new ConstantTransformer<Object, Integer>(integer0);
      ObjectGraphIterator<Integer> objectGraphIterator0 = new ObjectGraphIterator<Integer>(integer0, constantTransformer0);
      objectGraphIterator0.updateCurrentIterator();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      HashMap<InstanceofPredicate, Transformer<Object, InstanceofPredicate>> hashMap0 = new HashMap<InstanceofPredicate, Transformer<Object, InstanceofPredicate>>();
      Transformer<InstanceofPredicate, InstanceofPredicate> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super InstanceofPredicate>, ? extends Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>>) hashMap0);
      ObjectGraphIterator<InstanceofPredicate> objectGraphIterator0 = new ObjectGraphIterator<InstanceofPredicate>(instanceofPredicate0, transformer0);
      InstanceofPredicate instanceofPredicate1 = objectGraphIterator0.next();
      assertNull(instanceofPredicate1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ObjectGraphIterator<InstanceofPredicate> objectGraphIterator0 = new ObjectGraphIterator<InstanceofPredicate>(instanceofPredicate0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) null);
      Object object0 = objectGraphIterator0.next();
      assertSame(object0, instanceofPredicate0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-4535));
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Transformer<Object, Integer> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Integer>) hashMap0);
      ObjectGraphIterator<Integer> objectGraphIterator0 = new ObjectGraphIterator<Integer>(integer0, transformer0);
      boolean boolean0 = objectGraphIterator0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      ObjectGraphIterator<Integer> objectGraphIterator0 = new ObjectGraphIterator<Integer>(integer0, transformer0);
      // Undeclared exception!
      try { 
        objectGraphIterator0.updateCurrentIterator();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>((Predicate<? super Object>) null, (Closure<? super Object>) null, false);
      ClosureTransformer<Object> closureTransformer0 = new ClosureTransformer<Object>(whileClosure0);
      ObjectGraphIterator<Object> objectGraphIterator0 = new ObjectGraphIterator<Object>(object0, closureTransformer0);
      // Undeclared exception!
      try { 
        objectGraphIterator0.updateCurrentIterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.WhileClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<Object> iterator0 = linkedList0.iterator();
      ObjectGraphIterator<Object> objectGraphIterator0 = new ObjectGraphIterator<Object>(iterator0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      objectGraphIterator0.findNext(instanceofPredicate0);
      objectGraphIterator0.forEachRemaining(consumer0);
      // Undeclared exception!
      try { 
        objectGraphIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Factory<InstanceofPredicate> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, InstanceofPredicate> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends InstanceofPredicate>) factory0);
      ObjectGraphIterator<Object> objectGraphIterator0 = new ObjectGraphIterator<Object>(linkedList0, transformer0);
      // Undeclared exception!
      try { 
        objectGraphIterator0.next();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 3);
      InvokerTransformer<Object, InstanceofPredicate> invokerTransformer0 = new InvokerTransformer<Object, InstanceofPredicate>((String) null, classArray0, classArray0);
      ObjectGraphIterator<InstanceofPredicate> objectGraphIterator0 = new ObjectGraphIterator<InstanceofPredicate>(instanceofPredicate0, invokerTransformer0);
      // Undeclared exception!
      try { 
        objectGraphIterator0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer((-167));
      Transformer<Object, Object> transformer0 = ExceptionTransformer.exceptionTransformer();
      ObjectGraphIterator<Object> objectGraphIterator0 = new ObjectGraphIterator<Object>(integer0, transformer0);
      // Undeclared exception!
      try { 
        objectGraphIterator0.hasNext();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<Object> iterator0 = linkedList0.iterator();
      linkedList0.add((Object) iterator0);
      ObjectGraphIterator<Object> objectGraphIterator0 = new ObjectGraphIterator<Object>(iterator0);
      // Undeclared exception!
      try { 
        objectGraphIterator0.hasNext();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(2418);
      ChainedTransformer<Integer> chainedTransformer0 = new ChainedTransformer<Integer>((Transformer<? super Integer, ? extends Integer>[]) null);
      ObjectGraphIterator<Integer> objectGraphIterator0 = new ObjectGraphIterator<Integer>(integer0, chainedTransformer0);
      // Undeclared exception!
      try { 
        objectGraphIterator0.hasNext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.ChainedTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Transformer<Object, InstanceofPredicate> transformer0 = ExceptionTransformer.exceptionTransformer();
      IfTransformer<Object, InstanceofPredicate> ifTransformer0 = new IfTransformer<Object, InstanceofPredicate>(instanceofPredicate0, transformer0, transformer0);
      ObjectGraphIterator<InstanceofPredicate> objectGraphIterator0 = new ObjectGraphIterator<InstanceofPredicate>(instanceofPredicate0, ifTransformer0);
      ObjectGraphIterator<InstanceofPredicate> objectGraphIterator1 = new ObjectGraphIterator<InstanceofPredicate>(instanceofPredicate0, transformer0);
      // Undeclared exception!
      try { 
        objectGraphIterator0.findNextByIterator(objectGraphIterator1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<Object> iterator0 = linkedList0.iterator();
      ObjectGraphIterator<Object> objectGraphIterator0 = new ObjectGraphIterator<Object>(iterator0);
      Integer integer0 = new Integer(8);
      linkedList0.add((Object) iterator0);
      Transformer<Integer, Integer> transformer0 = ConstantTransformer.constantTransformer(integer0);
      ObjectGraphIterator<Integer> objectGraphIterator1 = new ObjectGraphIterator<Integer>((Integer) null, transformer0);
      // Undeclared exception!
      try { 
        objectGraphIterator0.findNextByIterator(objectGraphIterator1);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ObjectGraphIterator<Integer> objectGraphIterator0 = new ObjectGraphIterator<Integer>((Iterator<? extends Integer>) null);
      // Undeclared exception!
      try { 
        objectGraphIterator0.findNextByIterator((Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectGraphIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Factory<Integer> factory0 = ConstantFactory.constantFactory(integer0);
      Transformer<Object, Integer> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Integer>) factory0);
      ObjectGraphIterator<Integer> objectGraphIterator0 = new ObjectGraphIterator<Integer>(integer0, transformer0);
      // Undeclared exception!
      try { 
        objectGraphIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator remove() cannot be called at this time
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectGraphIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      ObjectGraphIterator<Object> objectGraphIterator0 = new ObjectGraphIterator<Object>(iterator0);
      Integer integer0 = new Integer(8);
      ConstantTransformer<Object, Integer> constantTransformer0 = new ConstantTransformer<Object, Integer>(integer0);
      ObjectGraphIterator<Integer> objectGraphIterator1 = new ObjectGraphIterator<Integer>(integer0, constantTransformer0);
      ObjectGraphIterator<Integer> objectGraphIterator2 = new ObjectGraphIterator<Integer>(objectGraphIterator1);
      objectGraphIterator0.findNextByIterator(objectGraphIterator2);
      // Undeclared exception!
      try { 
        objectGraphIterator2.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator remove() cannot be called at this time
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectGraphIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ObjectGraphIterator<InstanceofPredicate> objectGraphIterator0 = new ObjectGraphIterator<InstanceofPredicate>(instanceofPredicate0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      objectGraphIterator0.forEachRemaining(consumer0);
      // Undeclared exception!
      try { 
        objectGraphIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No more elements in the iteration
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectGraphIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      ObjectGraphIterator<Object> objectGraphIterator0 = new ObjectGraphIterator<Object>(iterator0);
      Integer integer0 = new Integer(8);
      ConstantTransformer<Object, Integer> constantTransformer0 = new ConstantTransformer<Object, Integer>(integer0);
      ObjectGraphIterator<Integer> objectGraphIterator1 = new ObjectGraphIterator<Integer>(integer0, constantTransformer0);
      ObjectGraphIterator<Object> objectGraphIterator2 = new ObjectGraphIterator<Object>(objectGraphIterator0, constantTransformer0);
      objectGraphIterator2.findNextByIterator(objectGraphIterator1);
      assertFalse(objectGraphIterator0.equals((Object)objectGraphIterator2));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer((-2834));
      Transformer<Integer, Integer> transformer0 = ConstantTransformer.constantTransformer(integer0);
      ObjectGraphIterator<Integer> objectGraphIterator0 = new ObjectGraphIterator<Integer>(integer0, transformer0);
      objectGraphIterator0.findNext(integer0);
      objectGraphIterator0.findNextByIterator(objectGraphIterator0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Transformer<Integer, Integer> transformer0 = CloneTransformer.cloneTransformer();
      ObjectGraphIterator<Integer> objectGraphIterator0 = new ObjectGraphIterator<Integer>((Integer) null, transformer0);
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Transformer<Object, InstanceofPredicate> transformer1 = ConstantTransformer.constantTransformer(instanceofPredicate0);
      ObjectGraphIterator<Object> objectGraphIterator1 = new ObjectGraphIterator<Object>(instanceofPredicate0, transformer1);
      objectGraphIterator1.findNext(objectGraphIterator0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      ObjectGraphIterator<Object> objectGraphIterator0 = new ObjectGraphIterator<Object>(iterator0);
      boolean boolean0 = objectGraphIterator0.hasNext();
      assertFalse(boolean0);
  }
}
