/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 14:08:08 GMT 2025
 */

package org.apache.commons.collections4.comparators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.comparators.ComparableComparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ComparableComparator_ESTest extends ComparableComparator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ComparableComparator<Integer> comparableComparator0 = new ComparableComparator<Integer>();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-1023));
      int int0 = comparableComparator0.compare(integer0, integer1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ComparableComparator<Integer> comparableComparator0 = ComparableComparator.comparableComparator();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1437);
      int int0 = comparableComparator0.compare(integer0, integer1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ComparableComparator<Integer> comparableComparator0 = new ComparableComparator<Integer>();
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        comparableComparator0.compare((Integer) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ComparableComparator<Integer> comparableComparator0 = ComparableComparator.comparableComparator();
      Object object0 = new Object();
      boolean boolean0 = comparableComparator0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ComparableComparator<Integer> comparableComparator0 = ComparableComparator.comparableComparator();
      boolean boolean0 = comparableComparator0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ComparableComparator<Integer> comparableComparator0 = new ComparableComparator<Integer>();
      ComparableComparator<Integer> comparableComparator1 = ComparableComparator.comparableComparator();
      boolean boolean0 = comparableComparator0.equals(comparableComparator1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ComparableComparator<Integer> comparableComparator0 = ComparableComparator.comparableComparator();
      ComparableComparator<Comparable<Object>> comparableComparator1 = ComparableComparator.comparableComparator();
      boolean boolean0 = comparableComparator1.equals(comparableComparator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ComparableComparator<Integer> comparableComparator0 = new ComparableComparator<Integer>();
      comparableComparator0.hashCode();
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ComparableComparator<Comparable<Object>> comparableComparator0 = ComparableComparator.comparableComparator();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparable0).compareTo(any());
      int int0 = comparableComparator0.compare(comparable0, comparable0);
      assertEquals(0, int0);
  }
}
