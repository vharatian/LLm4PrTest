/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 14:12:49 GMT 2025
 */

package org.apache.commons.collections4.comparators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.LongBuffer;
import java.util.BitSet;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.ToDoubleFunction;
import java.util.function.ToIntFunction;
import java.util.function.ToLongFunction;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.comparators.ComparatorChain;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ComparatorChain_ESTest extends ComparatorChain_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UnaryOperator.identity();
      BitSet bitSet0 = new BitSet();
      ComparatorChain<ByteBuffer> comparatorChain0 = new ComparatorChain<ByteBuffer>((List<Comparator<ByteBuffer>>) null, bitSet0);
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Comparator<ByteBuffer> comparator0 = Comparator.comparing((Function<? super ByteBuffer, ? extends Integer>) function0);
      // Undeclared exception!
      try { 
        comparatorChain0.addComparator(comparator0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ComparatorChain<ByteBuffer> comparatorChain0 = new ComparatorChain<ByteBuffer>();
      assertEquals(0, comparatorChain0.size());
      
      comparatorChain0.reversed();
      List<Comparator<Object>> list0 = null;
      BitSet bitSet0 = new BitSet();
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>((List<Comparator<Object>>) null, bitSet0);
      Comparator<Object> comparator0 = comparatorChain1.reversed();
      ComparatorChain<Object> comparatorChain2 = new ComparatorChain<Object>(comparator0);
      // Undeclared exception!
      try { 
        comparatorChain1.setComparator(0, (Comparator<Object>) comparatorChain2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      LinkedList<Comparator<ByteBuffer>> linkedList1 = new LinkedList<Comparator<ByteBuffer>>();
      byte[] byteArray0 = new byte[0];
      BitSet.valueOf(byteArray0);
      LinkedList<Comparator<ComparatorChain<Object>>> linkedList2 = new LinkedList<Comparator<ComparatorChain<Object>>>();
      ComparatorChain<ComparatorChain<Object>> comparatorChain0 = new ComparatorChain<ComparatorChain<Object>>(linkedList2, (BitSet) null);
      // Undeclared exception!
      try { 
        comparatorChain0.setForwardSort((-3832));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Comparator<Integer> comparator0 = Comparator.comparing((Function<? super Integer, ? extends Integer>) unaryOperator0);
      Comparator.comparing((Function<? super Integer, ? extends Integer>) unaryOperator0, (Comparator<? super Integer>) comparator0);
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>(comparator0, true);
      BitSet bitSet0 = new BitSet();
      ComparatorChain<ByteBuffer> comparatorChain1 = new ComparatorChain<ByteBuffer>((List<Comparator<ByteBuffer>>) null, bitSet0);
      Function<Object, ByteBuffer> function0 = (Function<Object, ByteBuffer>) mock(Function.class, new ViolatedAssumptionAnswer());
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      ComparatorChain<Object> comparatorChain2 = new ComparatorChain<Object>(linkedList0);
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator1 = comparatorChain2.thenComparingInt(toIntFunction0);
      Comparator<ByteBuffer> comparator2 = comparatorChain1.thenComparing((Function<? super ByteBuffer, ? extends ByteBuffer>) function0, (Comparator<? super ByteBuffer>) comparator1);
      LinkedList<Comparator<ComparatorChain<Object>>> linkedList1 = new LinkedList<Comparator<ComparatorChain<Object>>>();
      ComparatorChain<ComparatorChain<Object>> comparatorChain3 = new ComparatorChain<ComparatorChain<Object>>(linkedList1, bitSet0);
      comparatorChain3.setForwardSort(0);
      ComparatorChain<Object> comparatorChain4 = new ComparatorChain<Object>(linkedList0, bitSet0);
      comparatorChain3.equals(comparatorChain0);
      LinkedList<Comparator<ComparatorChain<LongBuffer>>> linkedList2 = new LinkedList<Comparator<ComparatorChain<LongBuffer>>>();
      ComparatorChain<ComparatorChain<LongBuffer>> comparatorChain5 = new ComparatorChain<ComparatorChain<LongBuffer>>();
      Comparator.nullsLast((Comparator<? super ComparatorChain<Integer>>) comparatorChain4);
      ComparatorChain<LongBuffer> comparatorChain6 = new ComparatorChain<LongBuffer>();
      comparatorChain1.equals(comparatorChain3);
      LinkedList<Comparator<Comparator<ByteBuffer>>> linkedList3 = new LinkedList<Comparator<Comparator<ByteBuffer>>>();
      ComparatorChain<Comparator<ByteBuffer>> comparatorChain7 = new ComparatorChain<Comparator<ByteBuffer>>(linkedList3);
      try { 
        comparatorChain7.compare(comparatorChain1, comparator2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ComparatorChains must contain at least one Comparator
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      ComparatorChain<ByteBuffer> comparatorChain0 = new ComparatorChain<ByteBuffer>((List<Comparator<ByteBuffer>>) null, bitSet0);
      ComparatorChain<ComparatorChain<Object>> comparatorChain1 = new ComparatorChain<ComparatorChain<Object>>();
      comparatorChain0.equals(comparatorChain1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator.comparingInt((ToIntFunction<? super ComparatorChain<ByteBuffer>>) toIntFunction0);
      ToIntFunction<Object> toIntFunction1 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      comparatorChain0.thenComparingInt(toIntFunction1);
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(toLongFunction0).applyAsLong(any());
      Comparator<Object> comparator0 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      comparatorChain0.addComparator(comparator0);
      Comparator.naturalOrder();
      Object object0 = new Object();
      Object object1 = new Object();
      comparatorChain0.compare(object0, object1);
      // Undeclared exception!
      try { 
        comparatorChain0.setComparator(0, (Comparator<Object>) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Comparator ordering cannot be changed after the first comparison is performed
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Comparator<Integer> comparator0 = Comparator.comparing((Function<? super Integer, ? extends Integer>) unaryOperator0);
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>(comparator0, false);
      comparatorChain0.setReverseSort(0);
      Integer integer0 = new Integer(0);
      int int0 = (-1);
      Integer integer1 = new Integer((-1));
      comparatorChain0.compare(integer0, integer1);
      comparatorChain0.equals(comparatorChain0);
      ComparatorChain<Integer> comparatorChain1 = new ComparatorChain<Integer>(comparator0, false);
      // Undeclared exception!
      try { 
        comparatorChain0.setReverseSort(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Comparator ordering cannot be changed after the first comparison is performed
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ComparatorChain<ComparatorChain<Integer>> comparatorChain0 = new ComparatorChain<ComparatorChain<Integer>>();
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>(linkedList0, (BitSet) null);
      Function<Object, ByteBuffer> function0 = (Function<Object, ByteBuffer>) mock(Function.class, new ViolatedAssumptionAnswer());
      comparatorChain1.thenComparing((Function<? super Object, ? extends ByteBuffer>) function0);
      comparatorChain1.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Comparator<ByteBuffer>> linkedList0 = new LinkedList<Comparator<ByteBuffer>>();
      ComparatorChain<ByteBuffer> comparatorChain0 = new ComparatorChain<ByteBuffer>(linkedList0, (BitSet) null);
      comparatorChain0.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      comparatorChain0.reversed();
      ComparatorChain<ByteBuffer> comparatorChain1 = new ComparatorChain<ByteBuffer>();
      comparatorChain1.equals(comparatorChain0);
      LinkedList<Comparator<Integer>> linkedList0 = new LinkedList<Comparator<Integer>>();
      ComparatorChain<Integer> comparatorChain2 = new ComparatorChain<Integer>(linkedList0, (BitSet) null);
      ComparatorChain<Object> comparatorChain3 = new ComparatorChain<Object>((List<Comparator<Object>>) null, (BitSet) null);
      comparatorChain2.equals(comparatorChain3);
      int int0 = comparatorChain2.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Comparator<Integer> comparator0 = Comparator.comparing((Function<? super Integer, ? extends Integer>) unaryOperator0);
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>(comparator0, false);
      comparatorChain0.setReverseSort(0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-1));
      comparatorChain0.compare(integer0, integer1);
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      comparatorChain0.equals(comparatorChain0);
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>();
      LinkedList<Comparator<ByteBuffer>> linkedList0 = new LinkedList<Comparator<ByteBuffer>>();
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(0);
      Integer integer4 = new Integer(0);
      comparatorChain0.compare(integer3, integer4);
      Comparator<ComparatorChain<ByteBuffer>> comparator1 = Comparator.nullsFirst((Comparator<? super ComparatorChain<ByteBuffer>>) comparatorChain1);
      ComparatorChain<ComparatorChain<ByteBuffer>> comparatorChain2 = new ComparatorChain<ComparatorChain<ByteBuffer>>(comparator1, false);
      int int0 = comparatorChain2.compare((ComparatorChain<ByteBuffer>) null, (ComparatorChain<ByteBuffer>) null);
      assertTrue(comparatorChain2.isLocked());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ComparatorChain<ComparatorChain<ByteBuffer>> comparatorChain0 = new ComparatorChain<ComparatorChain<ByteBuffer>>();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Comparator<Integer> comparator0 = Comparator.comparing((Function<? super Integer, ? extends Integer>) unaryOperator0);
      ComparatorChain<Integer> comparatorChain1 = new ComparatorChain<Integer>(comparator0, false);
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      comparatorChain1.thenComparingInt(toIntFunction0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-1));
      comparatorChain1.compare(integer0, integer1);
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      try { 
        comparatorChain0.compare((ComparatorChain<ByteBuffer>) null, (ComparatorChain<ByteBuffer>) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ComparatorChains must contain at least one Comparator
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      ComparatorChain<ByteBuffer> comparatorChain0 = new ComparatorChain<ByteBuffer>((List<Comparator<ByteBuffer>>) null, bitSet0);
      comparatorChain0.hashCode();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      ComparatorChain<ByteBuffer> comparatorChain0 = new ComparatorChain<ByteBuffer>((List<Comparator<ByteBuffer>>) null, (BitSet) null);
      ComparatorChain<ComparatorChain<Object>> comparatorChain1 = new ComparatorChain<ComparatorChain<Object>>();
      ComparatorChain<Object> comparatorChain2 = new ComparatorChain<Object>();
      boolean boolean0 = comparatorChain0.equals(comparatorChain2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Comparator<Comparator<Object>>> linkedList0 = new LinkedList<Comparator<Comparator<Object>>>();
      LinkedList<Comparator<Integer>> linkedList1 = new LinkedList<Comparator<Integer>>();
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>(linkedList1, (BitSet) null);
      ComparatorChain<Integer> comparatorChain1 = new ComparatorChain<Integer>(comparatorChain0, false);
      int int0 = 0;
      // Undeclared exception!
      try { 
        comparatorChain0.setReverseSort(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ComparatorChain<ComparatorChain<ByteBuffer>> comparatorChain0 = new ComparatorChain<ComparatorChain<ByteBuffer>>();
      UnaryOperator.identity();
      BitSet bitSet0 = new BitSet(0);
      LinkedList<Comparator<ByteBuffer>> linkedList0 = new LinkedList<Comparator<ByteBuffer>>();
      ComparatorChain<ByteBuffer> comparatorChain1 = new ComparatorChain<ByteBuffer>(linkedList0, bitSet0);
      linkedList0.add((Comparator<ByteBuffer>) comparatorChain1);
      ComparatorChain<ByteBuffer> comparatorChain2 = new ComparatorChain<ByteBuffer>();
      comparatorChain1.setComparator(0, (Comparator<ByteBuffer>) comparatorChain2, false);
      ComparatorChain<Comparable<Integer>> comparatorChain3 = new ComparatorChain<Comparable<Integer>>();
      ComparatorChain<ComparatorChain<Integer>> comparatorChain4 = new ComparatorChain<ComparatorChain<Integer>>((Comparator<ComparatorChain<Integer>>) null, true);
      Integer integer0 = new Integer((-1));
      ComparatorChain<ComparatorChain<Integer>> comparatorChain5 = new ComparatorChain<ComparatorChain<Integer>>(comparatorChain4, true);
      Object object0 = new Object();
      comparatorChain5.equals(object0);
      LinkedList<Comparator<Integer>> linkedList1 = new LinkedList<Comparator<Integer>>();
      ComparatorChain<Integer> comparatorChain6 = new ComparatorChain<Integer>(linkedList1);
      Function.identity();
      ByteBuffer byteBuffer0 = null;
      // Undeclared exception!
      try { 
        ByteBuffer.wrap((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Comparator<ComparatorChain<Integer>>> linkedList0 = new LinkedList<Comparator<ComparatorChain<Integer>>>();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)0;
      BitSet bitSet0 = BitSet.valueOf(byteArray0);
      ComparatorChain<ByteBuffer> comparatorChain0 = new ComparatorChain<ByteBuffer>((List<Comparator<ByteBuffer>>) null, bitSet0);
      LinkedList<Comparator<ByteBuffer>> linkedList1 = new LinkedList<Comparator<ByteBuffer>>();
      linkedList1.add((Comparator<ByteBuffer>) comparatorChain0);
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<ByteBuffer> comparator0 = Comparator.comparingInt((ToIntFunction<? super ByteBuffer>) toIntFunction0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        comparatorChain0.setComparator((-765), comparator0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Comparator<ByteBuffer>> linkedList0 = new LinkedList<Comparator<ByteBuffer>>();
      BitSet bitSet0 = new BitSet(0);
      ComparatorChain<ByteBuffer> comparatorChain0 = new ComparatorChain<ByteBuffer>(linkedList0, bitSet0);
      linkedList0.add((Comparator<ByteBuffer>) comparatorChain0);
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<ByteBuffer> comparator0 = Comparator.comparingInt((ToIntFunction<? super ByteBuffer>) toIntFunction0);
      comparatorChain0.setComparator(0, comparator0, true);
      ComparatorChain<Comparable<Integer>> comparatorChain1 = new ComparatorChain<Comparable<Integer>>();
      ComparatorChain<ComparatorChain<Integer>> comparatorChain2 = new ComparatorChain<ComparatorChain<Integer>>((Comparator<ComparatorChain<Integer>>) null, false);
      Integer integer0 = new Integer(608);
      LinkedList<Comparator<Object>> linkedList1 = new LinkedList<Comparator<Object>>();
      ComparatorChain<Object> comparatorChain3 = new ComparatorChain<Object>(linkedList1, bitSet0);
      comparatorChain2.equals(comparatorChain3);
      LinkedList<Comparator<Integer>> linkedList2 = new LinkedList<Comparator<Integer>>();
      ComparatorChain<Integer> comparatorChain4 = new ComparatorChain<Integer>(linkedList2);
      // Undeclared exception!
      try { 
        comparatorChain2.compare(comparatorChain4, comparatorChain4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ComparatorChain<ComparatorChain<Integer>> comparatorChain0 = new ComparatorChain<ComparatorChain<Integer>>();
      comparatorChain0.setReverseSort(0);
      ComparatorChain<ByteBuffer> comparatorChain1 = new ComparatorChain<ByteBuffer>();
      boolean boolean0 = comparatorChain1.equals(comparatorChain0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Comparator<Integer> comparator0 = Comparator.comparing((Function<? super Integer, ? extends Integer>) unaryOperator0);
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>(comparator0, false);
      Integer integer0 = new Integer((-32));
      Integer integer1 = new Integer((-481));
      int int0 = comparatorChain0.compare(integer0, integer1);
      assertTrue(comparatorChain0.isLocked());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ToIntFunction<Integer> toIntFunction0 = (ToIntFunction<Integer>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1, 1).when(toIntFunction0).applyAsInt(anyInt());
      Comparator<Integer> comparator0 = Comparator.comparingInt((ToIntFunction<? super Integer>) toIntFunction0);
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>(comparator0);
      ToLongFunction<ByteBuffer> toLongFunction0 = (ToLongFunction<ByteBuffer>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      comparatorChain0.thenComparingDouble(toDoubleFunction0);
      ToIntFunction<Object> toIntFunction1 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      comparatorChain0.thenComparingInt(toIntFunction1);
      comparatorChain0.setReverseSort(0);
      comparatorChain0.compare((Integer) null, (Integer) null);
      Comparator.comparingLong((ToLongFunction<? super ByteBuffer>) toLongFunction0);
      comparatorChain0.equals(comparator0);
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>();
      comparatorChain1.isLocked();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Comparator<ComparatorChain<Integer>> comparator1 = Comparator.comparing((Function<? super ComparatorChain<Integer>, ? extends Integer>) function0, (Comparator<? super Integer>) comparator0);
      ComparatorChain<ComparatorChain<Integer>> comparatorChain2 = new ComparatorChain<ComparatorChain<Integer>>(comparator1);
      comparatorChain2.reversed();
      comparatorChain2.hashCode();
      boolean boolean0 = comparatorChain0.isLocked();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ComparatorChain<ComparatorChain<Integer>> comparatorChain0 = new ComparatorChain<ComparatorChain<Integer>>();
      BitSet bitSet0 = new BitSet(175);
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>((List<Comparator<Object>>) null, bitSet0);
      // Undeclared exception!
      try { 
        comparatorChain1.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Comparator<Integer> comparator0 = Comparator.comparing((Function<? super Integer, ? extends Integer>) unaryOperator0);
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>(comparator0, true);
      Integer integer0 = new Integer((-32));
      Integer integer1 = new Integer((-481));
      int int0 = comparatorChain0.compare(integer0, integer1);
      assertTrue(comparatorChain0.isLocked());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ComparatorChain<ComparatorChain<ByteBuffer>> comparatorChain0 = new ComparatorChain<ComparatorChain<ByteBuffer>>();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Comparator<Integer> comparator0 = Comparator.comparing((Function<? super Integer, ? extends Integer>) unaryOperator0);
      ComparatorChain<Integer> comparatorChain1 = new ComparatorChain<Integer>(comparator0, false);
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      comparatorChain1.thenComparingInt(toIntFunction0);
      comparatorChain1.setReverseSort(0);
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer((-1));
      int int0 = comparatorChain1.compare(integer0, integer1);
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      comparatorChain1.equals(comparatorChain1);
      assertTrue(comparatorChain1.isLocked());
      
      ComparatorChain<Object> comparatorChain2 = new ComparatorChain<Object>();
      comparatorChain2.isLocked();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Comparator<ComparatorChain<Integer>> comparator1 = Comparator.comparing((Function<? super ComparatorChain<Integer>, ? extends Integer>) function0, (Comparator<? super Integer>) comparatorChain2);
      ComparatorChain<ComparatorChain<Integer>> comparatorChain3 = new ComparatorChain<ComparatorChain<Integer>>(comparator1);
      comparatorChain3.reversed();
      comparatorChain3.hashCode();
      Comparator<ComparatorChain<Object>> comparator2 = Comparator.nullsFirst((Comparator<? super ComparatorChain<Object>>) comparatorChain2);
      ComparatorChain<ComparatorChain<Object>> comparatorChain4 = new ComparatorChain<ComparatorChain<Object>>(comparator2, true);
      int int1 = comparatorChain4.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ComparatorChain<ComparatorChain<ByteBuffer>> comparatorChain0 = new ComparatorChain<ComparatorChain<ByteBuffer>>();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Comparator<Integer> comparator0 = Comparator.comparing((Function<? super Integer, ? extends Integer>) unaryOperator0);
      ComparatorChain<Integer> comparatorChain1 = new ComparatorChain<Integer>(comparator0, false);
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      comparatorChain1.thenComparingInt(toIntFunction0);
      comparatorChain1.setReverseSort(0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1);
      comparatorChain1.compare(integer0, integer1);
      Integer integer2 = new Integer(1);
      Integer integer3 = new Integer((-1));
      comparatorChain1.compare(integer2, integer3);
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      LinkedList<Comparator<ComparatorChain<Integer>>> linkedList0 = new LinkedList<Comparator<ComparatorChain<Integer>>>();
      ComparatorChain<ComparatorChain<Integer>> comparatorChain2 = new ComparatorChain<ComparatorChain<Integer>>();
      assertFalse(comparatorChain2.isLocked());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Comparator<Integer> comparator0 = Comparator.comparing((Function<? super Integer, ? extends Integer>) unaryOperator0);
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>(comparator0, true);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-488));
      int int0 = comparatorChain0.compare(integer1, integer0);
      assertTrue(comparatorChain0.isLocked());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ToIntFunction<Integer> toIntFunction0 = (ToIntFunction<Integer>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(toIntFunction0).applyAsInt(anyInt());
      Comparator<Integer> comparator0 = Comparator.comparingInt((ToIntFunction<? super Integer>) toIntFunction0);
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>(comparator0);
      ToLongFunction<ByteBuffer> toLongFunction0 = (ToLongFunction<ByteBuffer>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      ToIntFunction<Object> toIntFunction1 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      comparatorChain0.thenComparingInt(toIntFunction1);
      comparatorChain0.setReverseSort(0);
      comparatorChain0.compare((Integer) null, (Integer) null);
      Comparator.comparingLong((ToLongFunction<? super ByteBuffer>) toLongFunction0);
      comparatorChain0.equals(comparator0);
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>();
      comparatorChain1.isLocked();
      Integer integer0 = new Integer(0);
      comparatorChain1.equals(integer0);
      LinkedList<Comparator<ByteBuffer>> linkedList0 = new LinkedList<Comparator<ByteBuffer>>();
      ComparatorChain<ByteBuffer> comparatorChain2 = new ComparatorChain<ByteBuffer>(linkedList0);
      comparatorChain2.hashCode();
      Function<Object, ByteBuffer> function0 = (Function<Object, ByteBuffer>) mock(Function.class, new ViolatedAssumptionAnswer());
      ComparatorChain<Object> comparatorChain3 = new ComparatorChain<Object>(comparatorChain1, true);
      Comparator<Object> comparator1 = Comparator.comparing((Function<? super Object, ? extends ByteBuffer>) function0, (Comparator<? super ByteBuffer>) comparatorChain3);
      // Undeclared exception!
      try { 
        comparatorChain1.setComparator((-718), comparator1, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Comparator<Comparator<Object>> comparator0 = Comparator.nullsLast((Comparator<? super Comparator<Object>>) null);
      ComparatorChain<Comparator<Object>> comparatorChain0 = new ComparatorChain<Comparator<Object>>(comparator0, true);
      int int0 = comparatorChain0.compare((Comparator<Object>) null, (Comparator<Object>) null);
      assertTrue(comparatorChain0.isLocked());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Comparator<ByteBuffer>> linkedList0 = new LinkedList<Comparator<ByteBuffer>>();
      BitSet bitSet0 = new BitSet();
      ComparatorChain<ByteBuffer> comparatorChain0 = new ComparatorChain<ByteBuffer>(linkedList0, bitSet0);
      byte[] byteArray0 = new byte[0];
      BitSet bitSet1 = BitSet.valueOf(byteArray0);
      ComparatorChain<ByteBuffer> comparatorChain1 = new ComparatorChain<ByteBuffer>();
      ComparatorChain<ByteBuffer> comparatorChain2 = new ComparatorChain<ByteBuffer>(comparatorChain1, false);
      LinkedList<Comparator<ComparatorChain<Integer>>> linkedList1 = new LinkedList<Comparator<ComparatorChain<Integer>>>();
      ComparatorChain<ComparatorChain<Integer>> comparatorChain3 = new ComparatorChain<ComparatorChain<Integer>>(linkedList1, bitSet1);
      comparatorChain3.equals((Object) null);
      LinkedList<Comparator<Integer>> linkedList2 = new LinkedList<Comparator<Integer>>();
      ComparatorChain<Integer> comparatorChain4 = new ComparatorChain<Integer>(linkedList2);
      try { 
        comparatorChain3.compare(comparatorChain4, comparatorChain4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ComparatorChains must contain at least one Comparator
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ComparatorChain<ByteBuffer> comparatorChain0 = new ComparatorChain<ByteBuffer>();
      boolean boolean0 = comparatorChain0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Comparator<Object> comparator0 = Comparator.comparing((Function<? super Object, ?>) unaryOperator0, (Comparator<? super Object>) comparatorChain0);
      comparatorChain0.addComparator(comparator0, true);
      assertFalse(comparatorChain0.isLocked());
      
      // Undeclared exception!
      try { 
        comparatorChain0.compare(comparator0, unaryOperator0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UnaryOperator.identity();
      ByteBuffer byteBuffer0 = null;
      LinkedList<Comparator<ByteBuffer>> linkedList0 = new LinkedList<Comparator<ByteBuffer>>();
      ComparatorChain<ByteBuffer> comparatorChain0 = new ComparatorChain<ByteBuffer>(linkedList0);
      ComparatorChain<ByteBuffer> comparatorChain1 = new ComparatorChain<ByteBuffer>(comparatorChain0, true);
      comparatorChain0.addComparator((Comparator<ByteBuffer>) comparatorChain1, true);
      ComparatorChain<ByteBuffer> comparatorChain2 = new ComparatorChain<ByteBuffer>(comparatorChain0, true);
      comparatorChain2.compare(byteBuffer0, byteBuffer0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>((Comparator<Object>) null);
      // Undeclared exception!
      try { 
        comparatorChain0.compare((Object) null, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<Comparator<ComparatorChain<Integer>>> linkedList0 = new LinkedList<Comparator<ComparatorChain<Integer>>>();
      Function<Object, Object> function0 = Function.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function0.compose((Function<? super Comparable<Integer>, ?>) function1);
      long[] longArray0 = new long[5];
      longArray0[0] = (-776L);
      longArray0[1] = (-652L);
      longArray0[2] = 0L;
      longArray0[3] = (-676L);
      longArray0[4] = (-2053L);
      BitSet bitSet0 = BitSet.valueOf(longArray0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>((List<Comparator<Object>>) null, bitSet0);
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>(comparatorChain0);
      Comparator<Object> comparator0 = comparatorChain0.thenComparing((Comparator<? super Object>) comparatorChain1);
      Comparator.comparing((Function<? super Object, ?>) function0, (Comparator<? super Object>) comparator0);
      LinkedList<Comparator<Comparable<Object>>> linkedList1 = new LinkedList<Comparator<Comparable<Object>>>();
      ComparatorChain<Comparable<Object>> comparatorChain2 = new ComparatorChain<Comparable<Object>>(linkedList1);
      comparatorChain2.size();
      LinkedList<Comparator<ComparatorChain<Object>>> linkedList2 = new LinkedList<Comparator<ComparatorChain<Object>>>();
      ComparatorChain<Object> comparatorChain3 = new ComparatorChain<Object>();
      Comparator<ComparatorChain<Object>> comparator1 = Comparator.nullsLast((Comparator<? super ComparatorChain<Object>>) comparatorChain0);
      linkedList2.add(comparator1);
      ComparatorChain<ComparatorChain<Object>> comparatorChain4 = new ComparatorChain<ComparatorChain<Object>>(linkedList2);
      ComparatorChain<ComparatorChain<Object>> comparatorChain5 = new ComparatorChain<ComparatorChain<Object>>(linkedList2);
      // Undeclared exception!
      try { 
        comparatorChain5.compare(comparatorChain3, comparatorChain3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(linkedList0);
      linkedList0.add((Comparator<Object>) comparatorChain0);
      comparatorChain0.reversed();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) comparatorChain0);
      linkedList0.removeIf(predicate0);
      // Undeclared exception!
      try { 
        comparatorChain0.setForwardSort((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -1
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>();
      boolean boolean0 = comparatorChain0.equals(comparatorChain0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      LinkedList<Comparator<Comparable<Object>>> linkedList0 = new LinkedList<Comparator<Comparable<Object>>>();
      ComparatorChain<Comparable<Object>> comparatorChain1 = new ComparatorChain<Comparable<Object>>(linkedList0);
      Function<Object, Object> function0 = Function.identity();
      Function<Object, ByteBuffer> function1 = (Function<Object, ByteBuffer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function0.compose((Function<? super Comparable<Integer>, ?>) function1);
      Comparator.comparing((Function<? super Object, ?>) function0, (Comparator<? super Object>) comparatorChain0);
      comparatorChain1.size();
      LinkedList<Comparator<ComparatorChain<Object>>> linkedList1 = new LinkedList<Comparator<ComparatorChain<Object>>>();
      ComparatorChain<Object> comparatorChain2 = new ComparatorChain<Object>();
      Comparator<ComparatorChain<Object>> comparator0 = Comparator.nullsLast((Comparator<? super ComparatorChain<Object>>) comparatorChain2);
      linkedList1.add(comparator0);
      ComparatorChain<ComparatorChain<Object>> comparatorChain3 = new ComparatorChain<ComparatorChain<Object>>(linkedList1);
      try { 
        comparatorChain3.compare(comparatorChain0, comparatorChain0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ComparatorChains must contain at least one Comparator
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ComparatorChain<ByteBuffer> comparatorChain0 = new ComparatorChain<ByteBuffer>();
      int int0 = comparatorChain0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Comparator<Comparable<ByteBuffer>> comparator0 = Comparator.nullsLast((Comparator<? super Comparable<ByteBuffer>>) null);
      boolean boolean0 = true;
      ComparatorChain<Comparable<ByteBuffer>> comparatorChain0 = new ComparatorChain<Comparable<ByteBuffer>>(comparator0, true);
      comparatorChain0.size();
      LinkedList<Comparator<ByteBuffer>> linkedList0 = new LinkedList<Comparator<ByteBuffer>>();
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1;
      // Undeclared exception!
      try { 
        Comparator.comparingLong((ToLongFunction<? super Comparable<Comparable<Comparable>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ComparatorChain<ComparatorChain<ByteBuffer>> comparatorChain0 = new ComparatorChain<ComparatorChain<ByteBuffer>>();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Comparator<Integer> comparator0 = Comparator.comparing((Function<? super Integer, ? extends Integer>) unaryOperator0);
      ComparatorChain<Integer> comparatorChain1 = new ComparatorChain<Integer>(comparator0, false);
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      comparatorChain1.thenComparingInt(toIntFunction0);
      comparatorChain1.setReverseSort(0);
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer((-1));
      LinkedList<Comparator<ComparatorChain<Integer>>> linkedList0 = new LinkedList<Comparator<ComparatorChain<Integer>>>();
      ComparatorChain<ComparatorChain<Integer>> comparatorChain2 = new ComparatorChain<ComparatorChain<Integer>>(linkedList0, (BitSet) null);
      boolean boolean0 = comparatorChain2.equals(comparatorChain1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ComparatorChain<ByteBuffer> comparatorChain0 = new ComparatorChain<ByteBuffer>();
      ComparatorChain<ByteBuffer> comparatorChain1 = new ComparatorChain<ByteBuffer>();
      ComparatorChain<ByteBuffer> comparatorChain2 = new ComparatorChain<ByteBuffer>(comparatorChain0);
      boolean boolean0 = comparatorChain2.equals(comparatorChain0);
      assertTrue(comparatorChain0.equals((Object)comparatorChain1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ComparatorChain<ComparatorChain<ByteBuffer>> comparatorChain0 = new ComparatorChain<ComparatorChain<ByteBuffer>>();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Comparator<Integer> comparator0 = Comparator.comparing((Function<? super Integer, ? extends Integer>) unaryOperator0);
      ComparatorChain<Integer> comparatorChain1 = new ComparatorChain<Integer>(comparator0, false);
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      comparatorChain1.thenComparingInt(toIntFunction0);
      comparatorChain1.setReverseSort(0);
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer((-1));
      LinkedList<Comparator<ComparatorChain<Integer>>> linkedList0 = new LinkedList<Comparator<ComparatorChain<Integer>>>();
      ComparatorChain<ComparatorChain<Integer>> comparatorChain2 = new ComparatorChain<ComparatorChain<Integer>>(linkedList0, (BitSet) null);
      LinkedList<Comparator<ByteBuffer>> linkedList1 = new LinkedList<Comparator<ByteBuffer>>();
      ComparatorChain<ByteBuffer> comparatorChain3 = new ComparatorChain<ByteBuffer>(linkedList1, (BitSet) null);
      comparatorChain2.equals(comparatorChain3);
      ComparatorChain<Object> comparatorChain4 = new ComparatorChain<Object>();
      int int0 = comparatorChain4.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<Comparator<Integer>> linkedList0 = new LinkedList<Comparator<Integer>>();
      long[] longArray0 = new long[6];
      longArray0[0] = 139L;
      Function<Object, ComparatorChain<Object>> function0 = (Function<Object, ComparatorChain<Object>>) mock(Function.class, new ViolatedAssumptionAnswer());
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      Comparator<Integer> comparator1 = Comparator.comparing((Function<? super Integer, ? extends ComparatorChain<Object>>) function0, (Comparator<? super ComparatorChain<Object>>) comparator0);
      linkedList0.add(comparator1);
      longArray0[1] = 3253L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = 1934L;
      BitSet bitSet0 = BitSet.valueOf(longArray0);
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>(linkedList0, bitSet0);
      ComparatorChain<Integer> comparatorChain1 = new ComparatorChain<Integer>(comparatorChain0, false);
      Function<Object, ByteBuffer> function1 = (Function<Object, ByteBuffer>) mock(Function.class, new ViolatedAssumptionAnswer());
      comparatorChain1.thenComparing((Function<? super Integer, ? extends ByteBuffer>) function1);
      ComparatorChain<Comparable<Object>> comparatorChain2 = new ComparatorChain<Comparable<Object>>();
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<ByteBuffer> comparator2 = Comparator.comparingInt((ToIntFunction<? super ByteBuffer>) toIntFunction0);
      ComparatorChain<ByteBuffer> comparatorChain3 = new ComparatorChain<ByteBuffer>(comparator2, false);
      boolean boolean0 = comparatorChain2.equals(comparatorChain3);
      assertFalse(boolean0);
      
      comparatorChain3.setForwardSort(1);
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator3 = Comparator.comparing((Function<? super Object, ? extends Integer>) function2);
      ComparatorChain<Object> comparatorChain4 = new ComparatorChain<Object>(comparator3, false);
      comparatorChain4.isLocked();
      ComparatorChain<Comparable<Integer>> comparatorChain5 = new ComparatorChain<Comparable<Integer>>();
      boolean boolean1 = comparatorChain5.isLocked();
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ComparatorChain<ByteBuffer> comparatorChain0 = new ComparatorChain<ByteBuffer>();
      boolean boolean0 = comparatorChain0.isLocked();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ComparatorChain<ComparatorChain<Object>> comparatorChain0 = new ComparatorChain<ComparatorChain<Object>>();
      ComparatorChain<ByteBuffer> comparatorChain1 = new ComparatorChain<ByteBuffer>();
      boolean boolean0 = comparatorChain1.equals(comparatorChain0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ComparatorChain<ByteBuffer> comparatorChain0 = new ComparatorChain<ByteBuffer>();
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(toLongFunction0).applyAsLong(any());
      Comparator<ByteBuffer> comparator0 = Comparator.comparingLong((ToLongFunction<? super ByteBuffer>) toLongFunction0);
      ComparatorChain<ByteBuffer> comparatorChain1 = new ComparatorChain<ByteBuffer>(comparator0, true);
      comparatorChain1.setComparator(0, comparator0, true);
      comparatorChain1.compare((ByteBuffer) null, (ByteBuffer) null);
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      // Undeclared exception!
      try { 
        BitSet.valueOf((LongBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ComparatorChain<ComparatorChain<Integer>> comparatorChain0 = new ComparatorChain<ComparatorChain<Integer>>();
      ComparatorChain<ComparatorChain<Integer>> comparatorChain1 = new ComparatorChain<ComparatorChain<Integer>>(comparatorChain0);
      // Undeclared exception!
      try { 
        comparatorChain0.setComparator(2, (Comparator<ComparatorChain<Integer>>) comparatorChain1, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      Comparator<Object> comparator0 = Comparator.nullsLast((Comparator<? super Object>) comparatorChain0);
      // Undeclared exception!
      try { 
        comparatorChain0.setComparator((-454), comparator0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<Comparator<ByteBuffer>> linkedList0 = new LinkedList<Comparator<ByteBuffer>>();
      BitSet bitSet0 = new BitSet(0);
      ComparatorChain<ByteBuffer> comparatorChain0 = new ComparatorChain<ByteBuffer>(linkedList0, bitSet0);
      linkedList0.add((Comparator<ByteBuffer>) comparatorChain0);
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<ByteBuffer> comparator0 = Comparator.comparingInt((ToIntFunction<? super ByteBuffer>) toIntFunction0);
      comparatorChain0.setComparator(0, comparator0, true);
      ComparatorChain<Comparable<Integer>> comparatorChain1 = new ComparatorChain<Comparable<Integer>>();
      ComparatorChain<Comparable<Integer>> comparatorChain2 = new ComparatorChain<Comparable<Integer>>(comparatorChain1, false);
      comparatorChain1.addComparator((Comparator<Comparable<Integer>>) comparatorChain2, false);
      try { 
        comparatorChain2.setComparator(1262, (Comparator<Comparable<Integer>>) comparatorChain1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1262, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Comparator<Comparable<Object>> comparator0 = Comparator.naturalOrder();
      ComparatorChain<Comparable<Object>> comparatorChain0 = new ComparatorChain<Comparable<Object>>(comparator0);
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      comparatorChain0.thenComparing(comparator0);
      comparatorChain0.thenComparingLong(toLongFunction0);
      comparatorChain0.addComparator(comparator0, false);
      BitSet bitSet0 = new BitSet();
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>((List<Comparator<Object>>) null, bitSet0);
      Comparator<Object> comparator1 = Comparator.nullsLast((Comparator<? super Object>) comparatorChain1);
      ComparatorChain<Object> comparatorChain2 = new ComparatorChain<Object>(comparator1, false);
      Function<Object, ByteBuffer> function0 = (Function<Object, ByteBuffer>) mock(Function.class, new ViolatedAssumptionAnswer());
      comparatorChain2.addComparator((Comparator<Object>) comparatorChain1);
      Comparator<Object> comparator2 = comparatorChain2.thenComparing((Function<? super Object, ? extends ByteBuffer>) function0);
      ComparatorChain<Object> comparatorChain3 = new ComparatorChain<Object>(comparator2);
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Comparator.comparing((Function<? super ComparatorChain<Object>, ? extends Integer>) function1);
      comparatorChain3.setForwardSort(0);
      comparatorChain3.setReverseSort(0);
      // Undeclared exception!
      try { 
        comparatorChain2.setComparator((-2637), (Comparator<Object>) comparatorChain1, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedList<Comparator<ComparatorChain<Integer>>> linkedList0 = new LinkedList<Comparator<ComparatorChain<Integer>>>();
      ComparatorChain<ComparatorChain<Integer>> comparatorChain0 = new ComparatorChain<ComparatorChain<Integer>>(linkedList0);
      assertEquals(0, comparatorChain0.size());
      
      ComparatorChain<ComparatorChain<Integer>> comparatorChain1 = new ComparatorChain<ComparatorChain<Integer>>(comparatorChain0);
      try { 
        comparatorChain0.setComparator(0, (Comparator<ComparatorChain<Integer>>) comparatorChain1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedList<Comparator<ComparatorChain<Integer>>> linkedList0 = new LinkedList<Comparator<ComparatorChain<Integer>>>();
      ComparatorChain<ComparatorChain<Object>> comparatorChain0 = new ComparatorChain<ComparatorChain<Object>>();
      long[] longArray0 = new long[7];
      longArray0[0] = (-1126L);
      longArray0[1] = (-364L);
      longArray0[2] = (-1263L);
      longArray0[3] = 0L;
      longArray0[4] = (-1L);
      longArray0[5] = (-853L);
      longArray0[6] = (-25L);
      BitSet bitSet0 = BitSet.valueOf(longArray0);
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>((List<Comparator<Object>>) null, bitSet0);
      comparatorChain1.hashCode();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedList<Comparator<Integer>> linkedList0 = new LinkedList<Comparator<Integer>>();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte) (-90);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      BitSet bitSet0 = BitSet.valueOf(byteBuffer0);
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>(linkedList0, bitSet0);
      Function<Object, ByteBuffer> function0 = (Function<Object, ByteBuffer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Comparator<Integer> comparator0 = comparatorChain0.thenComparing((Function<? super Integer, ? extends ByteBuffer>) function0);
      ComparatorChain<Integer> comparatorChain1 = new ComparatorChain<Integer>(comparator0, false);
      comparatorChain1.addComparator(comparator0, true);
      comparatorChain1.hashCode();
      // Undeclared exception!
      try { 
        bitSet0.set((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -1
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ComparatorChain<ComparatorChain<Integer>> comparatorChain0 = new ComparatorChain<ComparatorChain<Integer>>();
      comparatorChain0.hashCode();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ComparatorChain<ComparatorChain<ByteBuffer>> comparatorChain0 = new ComparatorChain<ComparatorChain<ByteBuffer>>();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Comparator<Integer> comparator0 = Comparator.comparing((Function<? super Integer, ? extends Integer>) unaryOperator0);
      ComparatorChain<Integer> comparatorChain1 = new ComparatorChain<Integer>(comparator0, false);
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(19);
      int int0 = comparatorChain1.compare(integer0, integer1);
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      comparatorChain1.equals(comparatorChain1);
      assertTrue(comparatorChain1.isLocked());
      
      ComparatorChain<Object> comparatorChain2 = new ComparatorChain<Object>();
      comparatorChain2.isLocked();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Comparator.comparing((Function<? super ComparatorChain<Integer>, ? extends Integer>) function0, (Comparator<? super Integer>) comparatorChain2);
      Comparator<ComparatorChain<Object>> comparator1 = Comparator.nullsFirst((Comparator<? super ComparatorChain<Object>>) comparatorChain2);
      ComparatorChain<ComparatorChain<Object>> comparatorChain3 = new ComparatorChain<ComparatorChain<Object>>(comparator1, false);
      int int1 = comparatorChain3.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LinkedList<Comparator<Comparator<Integer>>> linkedList0 = new LinkedList<Comparator<Comparator<Integer>>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.removeAll(linkedList1);
      linkedList0.spliterator();
      ComparatorChain<Comparator<Integer>> comparatorChain0 = new ComparatorChain<Comparator<Integer>>(linkedList0);
      LinkedList<Comparator<Object>> linkedList2 = new LinkedList<Comparator<Object>>();
      BitSet bitSet0 = new BitSet();
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>(linkedList2, bitSet0);
      Comparator<Object> comparator0 = comparatorChain1.reversed();
      ComparatorChain<Object> comparatorChain2 = new ComparatorChain<Object>(comparator0);
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator1 = Comparator.comparing((Function<? super Object, ? extends Integer>) function0);
      ComparatorChain<Object> comparatorChain3 = new ComparatorChain<Object>(comparator1, true);
      Comparator.nullsFirst((Comparator<? super Object>) comparatorChain1);
      Object object0 = new Object();
      try { 
        comparatorChain2.compare(comparatorChain3, object0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ComparatorChains must contain at least one Comparator
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>();
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>();
      ComparatorChain<Object> comparatorChain2 = new ComparatorChain<Object>(comparatorChain1);
      try { 
        comparatorChain2.compare(comparatorChain1, comparatorChain1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ComparatorChains must contain at least one Comparator
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ComparatorChain<ComparatorChain<ByteBuffer>> comparatorChain0 = new ComparatorChain<ComparatorChain<ByteBuffer>>();
      ComparatorChain<ByteBuffer> comparatorChain1 = new ComparatorChain<ByteBuffer>();
      try { 
        comparatorChain0.compare(comparatorChain1, comparatorChain1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ComparatorChains must contain at least one Comparator
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>(comparator0);
      Comparator<Object> comparator1 = comparatorChain1.thenComparing(comparator0);
      comparatorChain0.addComparator(comparator1, false);
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Comparator.comparing((Function<? super ComparatorChain<Integer>, ? extends Comparable<Integer>>) function0, (Comparator<? super Comparable<Integer>>) comparatorChain0);
      Comparator.nullsFirst((Comparator<? super Object>) comparatorChain0);
      // Undeclared exception!
      try { 
        comparatorChain0.setForwardSort((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -1
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ComparatorChain<ComparatorChain<Integer>> comparatorChain0 = new ComparatorChain<ComparatorChain<Integer>>();
      // Undeclared exception!
      try { 
        comparatorChain0.setReverseSort((-2926));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -2926
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      ComparatorChain<ByteBuffer> comparatorChain0 = new ComparatorChain<ByteBuffer>((Comparator<ByteBuffer>) null, true);
      assertEquals(1, comparatorChain0.size());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ComparatorChain<ComparatorChain<Object>> comparatorChain0 = new ComparatorChain<ComparatorChain<Object>>();
      Comparator.nullsFirst((Comparator<? super Integer>) null);
      comparatorChain0.setReverseSort(401);
      assertEquals(0, comparatorChain0.size());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = (-821L);
      longArray0[2] = (-283L);
      longArray0[3] = (-1160L);
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      longArray0[6] = 0L;
      BitSet bitSet0 = BitSet.valueOf(longArray0);
      BitSet bitSet1 = bitSet0.get(1021, 1021);
      ComparatorChain<Comparable<Integer>> comparatorChain0 = new ComparatorChain<Comparable<Integer>>((List<Comparator<Comparable<Integer>>>) null, bitSet1);
      ComparatorChain<Comparable<Integer>> comparatorChain1 = new ComparatorChain<Comparable<Integer>>(comparatorChain0);
      // Undeclared exception!
      try { 
        comparatorChain0.addComparator((Comparator<Comparable<Integer>>) comparatorChain1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ComparatorChain<ComparatorChain<Integer>> comparatorChain0 = new ComparatorChain<ComparatorChain<Integer>>();
      ComparatorChain<ComparatorChain<Integer>> comparatorChain1 = new ComparatorChain<ComparatorChain<Integer>>();
      comparatorChain0.addComparator((Comparator<ComparatorChain<Integer>>) comparatorChain1);
      comparatorChain0.hashCode();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ComparatorChain<ComparatorChain<Integer>> comparatorChain0 = new ComparatorChain<ComparatorChain<Integer>>();
      LinkedList<Comparator<LongBuffer>> linkedList0 = new LinkedList<Comparator<LongBuffer>>();
      // Undeclared exception!
      try { 
        comparatorChain0.setForwardSort((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -1
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Comparator<Integer> comparator0 = null;
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>((Comparator<Integer>) null);
      Function<Integer, Comparable<Object>> function0 = (Function<Integer, Comparable<Object>>) mock(Function.class, new ViolatedAssumptionAnswer());
      Comparator<Integer> comparator1 = comparatorChain0.thenComparing((Function<? super Integer, ? extends Comparable<Object>>) function0);
      boolean boolean0 = true;
      ComparatorChain<Integer> comparatorChain1 = new ComparatorChain<Integer>(comparator1, true);
      int int0 = (-679);
      // Undeclared exception!
      try { 
        comparatorChain1.setReverseSort((-679));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -679
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ComparatorChain<ComparatorChain<Integer>> comparatorChain0 = new ComparatorChain<ComparatorChain<Integer>>();
      ComparatorChain<ComparatorChain<Integer>> comparatorChain1 = null;
      try {
        comparatorChain1 = new ComparatorChain<ComparatorChain<Integer>>((List<Comparator<ComparatorChain<Integer>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Comparator<Integer> comparator0 = Comparator.comparing((Function<? super Integer, ? extends Integer>) unaryOperator0);
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>(comparator0, false);
      comparatorChain0.setComparator(0, comparator0, false);
      Integer integer0 = new Integer((-32));
      Integer integer1 = new Integer((-481));
      int int0 = comparatorChain0.compare(integer0, integer1);
      assertTrue(comparatorChain0.isLocked());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ComparatorChain<ComparatorChain<Integer>> comparatorChain0 = new ComparatorChain<ComparatorChain<Integer>>();
      try { 
        comparatorChain0.setComparator((-1953), (Comparator<ComparatorChain<Integer>>) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ComparatorChain<ByteBuffer> comparatorChain0 = new ComparatorChain<ByteBuffer>();
      ComparatorChain<ByteBuffer> comparatorChain1 = new ComparatorChain<ByteBuffer>(comparatorChain0);
      assertEquals(1, comparatorChain1.size());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Function<Integer, Integer> function0 = Function.identity();
      Comparator<Integer> comparator0 = Comparator.comparing((Function<? super Integer, ? extends Integer>) function0);
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>(comparator0);
      comparatorChain0.setComparator(0, comparator0);
      ComparatorChain<Object> comparatorChain1 = null;
      try {
        comparatorChain1 = new ComparatorChain<Object>((List<Comparator<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      LinkedList<Comparator<ComparatorChain<Integer>>> linkedList0 = new LinkedList<Comparator<ComparatorChain<Integer>>>();
      ComparatorChain<ComparatorChain<Integer>> comparatorChain0 = new ComparatorChain<ComparatorChain<Integer>>(linkedList0);
      boolean boolean0 = comparatorChain0.equals(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ComparatorChain<ComparatorChain<Object>> comparatorChain0 = new ComparatorChain<ComparatorChain<Object>>();
      comparatorChain0.setReverseSort(401);
      assertFalse(comparatorChain0.isLocked());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-125);
      BitSet bitSet0 = BitSet.valueOf(byteArray0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(linkedList0, bitSet0);
      comparatorChain0.setForwardSort((byte)1);
      assertEquals(12, bitSet0.cardinality());
      assertEquals("{0, 8, 9, 10, 11, 12, 13, 14, 15, 48, 49, 55}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ComparatorChain<ByteBuffer> comparatorChain0 = new ComparatorChain<ByteBuffer>();
      comparatorChain0.setForwardSort(2791);
      comparatorChain0.hashCode();
  }
}
