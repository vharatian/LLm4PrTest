/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 14:15:01 GMT 2025
 */

package org.apache.commons.collections4.comparators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.collections4.comparators.FixedOrderComparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FixedOrderComparator_ESTest extends FixedOrderComparator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>();
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        fixedOrderComparator0.compare(fixedOrderComparator0, objectArray0[1]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attempting to compare unknown object org.apache.commons.collections4.comparators.FixedOrderComparator@27fddd3f
         //
         verifyException("org.apache.commons.collections4.comparators.FixedOrderComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FixedOrderComparator<Object> fixedOrderComparator1 = new FixedOrderComparator<Object>(linkedList0);
      // Undeclared exception!
      try { 
        fixedOrderComparator0.addAsEqual(fixedOrderComparator1, fixedOrderComparator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // org.apache.commons.collections4.comparators.FixedOrderComparator@27fddd40 not known to org.apache.commons.collections4.comparators.FixedOrderComparator@27fddd40
         //
         verifyException("org.apache.commons.collections4.comparators.FixedOrderComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FixedOrderComparator<FixedOrderComparator.UnknownObjectBehavior> fixedOrderComparator0 = new FixedOrderComparator<FixedOrderComparator.UnknownObjectBehavior>();
      fixedOrderComparator0.checkLocked();
      assertEquals(FixedOrderComparator.UnknownObjectBehavior.EXCEPTION, fixedOrderComparator0.getUnknownObjectBehavior());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FixedOrderComparator<FixedOrderComparator<Object>> fixedOrderComparator0 = new FixedOrderComparator<FixedOrderComparator<Object>>();
      FixedOrderComparator<Object> fixedOrderComparator1 = new FixedOrderComparator<Object>();
      fixedOrderComparator0.add(fixedOrderComparator1);
      fixedOrderComparator0.compare(fixedOrderComparator1, fixedOrderComparator1);
      boolean boolean0 = fixedOrderComparator0.isLocked();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>();
      FixedOrderComparator.UnknownObjectBehavior fixedOrderComparator_UnknownObjectBehavior0 = FixedOrderComparator.UnknownObjectBehavior.AFTER;
      fixedOrderComparator0.setUnknownObjectBehavior(fixedOrderComparator_UnknownObjectBehavior0);
      fixedOrderComparator0.compare(fixedOrderComparator_UnknownObjectBehavior0, fixedOrderComparator_UnknownObjectBehavior0);
      // Undeclared exception!
      try { 
        fixedOrderComparator0.setUnknownObjectBehavior(fixedOrderComparator_UnknownObjectBehavior0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot modify a FixedOrderComparator after a comparison
         //
         verifyException("org.apache.commons.collections4.comparators.FixedOrderComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>();
      // Undeclared exception!
      try { 
        fixedOrderComparator0.setUnknownObjectBehavior((FixedOrderComparator.UnknownObjectBehavior) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // unknownObjectBehavior
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>();
      FixedOrderComparator.UnknownObjectBehavior fixedOrderComparator_UnknownObjectBehavior0 = FixedOrderComparator.UnknownObjectBehavior.BEFORE;
      fixedOrderComparator0.setUnknownObjectBehavior(fixedOrderComparator_UnknownObjectBehavior0);
      fixedOrderComparator0.compare(fixedOrderComparator_UnknownObjectBehavior0, fixedOrderComparator_UnknownObjectBehavior0);
      // Undeclared exception!
      try { 
        fixedOrderComparator0.checkLocked();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot modify a FixedOrderComparator after a comparison
         //
         verifyException("org.apache.commons.collections4.comparators.FixedOrderComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>();
      FixedOrderComparator.UnknownObjectBehavior fixedOrderComparator_UnknownObjectBehavior0 = FixedOrderComparator.UnknownObjectBehavior.AFTER;
      fixedOrderComparator0.setUnknownObjectBehavior(fixedOrderComparator_UnknownObjectBehavior0);
      fixedOrderComparator0.compare(fixedOrderComparator_UnknownObjectBehavior0, fixedOrderComparator_UnknownObjectBehavior0);
      // Undeclared exception!
      try { 
        fixedOrderComparator0.add(fixedOrderComparator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot modify a FixedOrderComparator after a comparison
         //
         verifyException("org.apache.commons.collections4.comparators.FixedOrderComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object[] objectArray0 = new Object[4];
      objectArray0[2] = (Object) linkedList0;
      linkedList0.add(objectArray0[2]);
      FixedOrderComparator<Object> fixedOrderComparator0 = null;
      try {
        fixedOrderComparator0 = new FixedOrderComparator<Object>(objectArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FixedOrderComparator<Comparable<Object>> fixedOrderComparator0 = null;
      try {
        fixedOrderComparator0 = new FixedOrderComparator<Comparable<Object>>((Comparable<Object>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // items
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      FixedOrderComparator<Object> fixedOrderComparator0 = null;
      try {
        fixedOrderComparator0 = new FixedOrderComparator<Object>(linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FixedOrderComparator<Object> fixedOrderComparator0 = null;
      try {
        fixedOrderComparator0 = new FixedOrderComparator<Object>((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // items
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FixedOrderComparator<FixedOrderComparator.UnknownObjectBehavior> fixedOrderComparator0 = new FixedOrderComparator<FixedOrderComparator.UnknownObjectBehavior>();
      FixedOrderComparator<Object> fixedOrderComparator1 = new FixedOrderComparator<Object>();
      boolean boolean0 = fixedOrderComparator0.equals(fixedOrderComparator1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>();
      fixedOrderComparator0.hashCode();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>(objectArray0);
      boolean boolean0 = fixedOrderComparator0.add(objectArray0[0]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FixedOrderComparator<FixedOrderComparator<Object>> fixedOrderComparator0 = new FixedOrderComparator<FixedOrderComparator<Object>>();
      boolean boolean0 = fixedOrderComparator0.isLocked();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>();
      FixedOrderComparator<Object>[] fixedOrderComparatorArray0 = (FixedOrderComparator<Object>[]) Array.newInstance(FixedOrderComparator.class, 8);
      fixedOrderComparatorArray0[1] = fixedOrderComparator0;
      FixedOrderComparator<Object> fixedOrderComparator1 = new FixedOrderComparator<Object>(fixedOrderComparatorArray0);
      FixedOrderComparator<FixedOrderComparator<Object>> fixedOrderComparator2 = new FixedOrderComparator<FixedOrderComparator<Object>>(fixedOrderComparatorArray0);
      fixedOrderComparator2.compare(fixedOrderComparator0, fixedOrderComparator0);
      boolean boolean0 = fixedOrderComparator2.equals(fixedOrderComparator1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>();
      FixedOrderComparator.UnknownObjectBehavior fixedOrderComparator_UnknownObjectBehavior0 = FixedOrderComparator.UnknownObjectBehavior.AFTER;
      fixedOrderComparator0.setUnknownObjectBehavior(fixedOrderComparator_UnknownObjectBehavior0);
      FixedOrderComparator<FixedOrderComparator.UnknownObjectBehavior> fixedOrderComparator1 = new FixedOrderComparator<FixedOrderComparator.UnknownObjectBehavior>();
      boolean boolean0 = fixedOrderComparator1.equals(fixedOrderComparator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>();
      FixedOrderComparator<Object> fixedOrderComparator1 = new FixedOrderComparator<Object>();
      assertTrue(fixedOrderComparator1.equals((Object)fixedOrderComparator0));
      
      fixedOrderComparator1.add(fixedOrderComparator0);
      boolean boolean0 = fixedOrderComparator1.equals(fixedOrderComparator0);
      assertFalse(fixedOrderComparator1.equals((Object)fixedOrderComparator0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FixedOrderComparator<Object>[] fixedOrderComparatorArray0 = (FixedOrderComparator<Object>[]) Array.newInstance(FixedOrderComparator.class, 8);
      FixedOrderComparator<FixedOrderComparator<Object>> fixedOrderComparator0 = new FixedOrderComparator<FixedOrderComparator<Object>>(fixedOrderComparatorArray0);
      Object object0 = new Object();
      boolean boolean0 = fixedOrderComparator0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FixedOrderComparator<FixedOrderComparator.UnknownObjectBehavior> fixedOrderComparator0 = new FixedOrderComparator<FixedOrderComparator.UnknownObjectBehavior>();
      boolean boolean0 = fixedOrderComparator0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FixedOrderComparator<FixedOrderComparator.UnknownObjectBehavior> fixedOrderComparator0 = new FixedOrderComparator<FixedOrderComparator.UnknownObjectBehavior>();
      boolean boolean0 = fixedOrderComparator0.equals(fixedOrderComparator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>();
      FixedOrderComparator.UnknownObjectBehavior fixedOrderComparator_UnknownObjectBehavior0 = FixedOrderComparator.UnknownObjectBehavior.AFTER;
      fixedOrderComparator0.add(fixedOrderComparator_UnknownObjectBehavior0);
      fixedOrderComparator0.setUnknownObjectBehavior(fixedOrderComparator_UnknownObjectBehavior0);
      Object object0 = new Object();
      int int0 = fixedOrderComparator0.compare(object0, fixedOrderComparator_UnknownObjectBehavior0);
      assertTrue(fixedOrderComparator0.isLocked());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FixedOrderComparator<FixedOrderComparator.UnknownObjectBehavior> fixedOrderComparator0 = new FixedOrderComparator<FixedOrderComparator.UnknownObjectBehavior>();
      FixedOrderComparator.UnknownObjectBehavior fixedOrderComparator_UnknownObjectBehavior0 = FixedOrderComparator.UnknownObjectBehavior.AFTER;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) fixedOrderComparator0;
      FixedOrderComparator<Object> fixedOrderComparator1 = new FixedOrderComparator<Object>(objectArray0);
      fixedOrderComparator1.setUnknownObjectBehavior(fixedOrderComparator_UnknownObjectBehavior0);
      int int0 = fixedOrderComparator1.compare(fixedOrderComparator0, (Object) null);
      assertTrue(fixedOrderComparator1.isLocked());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FixedOrderComparator<FixedOrderComparator.UnknownObjectBehavior> fixedOrderComparator0 = new FixedOrderComparator<FixedOrderComparator.UnknownObjectBehavior>();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) fixedOrderComparator0;
      FixedOrderComparator<Object> fixedOrderComparator1 = new FixedOrderComparator<Object>(objectArray0);
      FixedOrderComparator.UnknownObjectBehavior fixedOrderComparator_UnknownObjectBehavior0 = FixedOrderComparator.UnknownObjectBehavior.BEFORE;
      fixedOrderComparator1.setUnknownObjectBehavior(fixedOrderComparator_UnknownObjectBehavior0);
      int int0 = fixedOrderComparator1.compare(fixedOrderComparator1, fixedOrderComparator0);
      assertTrue(fixedOrderComparator1.isLocked());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) fixedOrderComparator0;
      FixedOrderComparator<Object> fixedOrderComparator1 = new FixedOrderComparator<Object>(objectArray0);
      FixedOrderComparator.UnknownObjectBehavior fixedOrderComparator_UnknownObjectBehavior0 = FixedOrderComparator.UnknownObjectBehavior.BEFORE;
      fixedOrderComparator1.setUnknownObjectBehavior(fixedOrderComparator_UnknownObjectBehavior0);
      Object object0 = new Object();
      int int0 = fixedOrderComparator1.compare(fixedOrderComparator0, object0);
      assertTrue(fixedOrderComparator1.isLocked());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) fixedOrderComparator0;
      FixedOrderComparator<Object> fixedOrderComparator1 = new FixedOrderComparator<Object>(objectArray0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        fixedOrderComparator1.compare(fixedOrderComparator0, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attempting to compare unknown object java.lang.Object@44aeb1ea
         //
         verifyException("org.apache.commons.collections4.comparators.FixedOrderComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<Comparable<Object>> linkedList0 = new LinkedList<Comparable<Object>>();
      FixedOrderComparator<Comparable<Object>> fixedOrderComparator0 = new FixedOrderComparator<Comparable<Object>>(linkedList0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) fixedOrderComparator0;
      FixedOrderComparator<Object> fixedOrderComparator1 = new FixedOrderComparator<Object>(objectArray0);
      FixedOrderComparator<Object> fixedOrderComparator2 = new FixedOrderComparator<Object>();
      boolean boolean0 = fixedOrderComparator1.addAsEqual(objectArray0[1], fixedOrderComparator2);
      assertFalse(fixedOrderComparator2.equals((Object)fixedOrderComparator1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>();
      FixedOrderComparator<Object> fixedOrderComparator1 = new FixedOrderComparator<Object>();
      boolean boolean0 = fixedOrderComparator1.add(fixedOrderComparator0);
      Object object0 = new Object();
      boolean boolean1 = fixedOrderComparator1.addAsEqual(fixedOrderComparator0, object0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) null);
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>(linkedList0);
      assertEquals(FixedOrderComparator.UnknownObjectBehavior.EXCEPTION, fixedOrderComparator0.getUnknownObjectBehavior());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>(linkedList0);
      FixedOrderComparator<Object>[] fixedOrderComparatorArray0 = (FixedOrderComparator<Object>[]) Array.newInstance(FixedOrderComparator.class, 8);
      fixedOrderComparatorArray0[0] = fixedOrderComparator0;
      FixedOrderComparator<FixedOrderComparator<Object>> fixedOrderComparator1 = new FixedOrderComparator<FixedOrderComparator<Object>>(fixedOrderComparatorArray0);
      fixedOrderComparator1.compare(fixedOrderComparator0, fixedOrderComparator0);
      fixedOrderComparator1.hashCode();
      assertTrue(fixedOrderComparator1.isLocked());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FixedOrderComparator<Comparable<Object>> fixedOrderComparator0 = new FixedOrderComparator<Comparable<Object>>();
      FixedOrderComparator.UnknownObjectBehavior fixedOrderComparator_UnknownObjectBehavior0 = fixedOrderComparator0.getUnknownObjectBehavior();
      assertEquals(FixedOrderComparator.UnknownObjectBehavior.EXCEPTION, fixedOrderComparator_UnknownObjectBehavior0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>();
      FixedOrderComparator.UnknownObjectBehavior fixedOrderComparator_UnknownObjectBehavior0 = FixedOrderComparator.UnknownObjectBehavior.AFTER;
      fixedOrderComparator0.setUnknownObjectBehavior(fixedOrderComparator_UnknownObjectBehavior0);
      fixedOrderComparator0.compare(fixedOrderComparator_UnknownObjectBehavior0, fixedOrderComparator_UnknownObjectBehavior0);
      // Undeclared exception!
      try { 
        fixedOrderComparator0.addAsEqual(fixedOrderComparator_UnknownObjectBehavior0, fixedOrderComparator_UnknownObjectBehavior0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot modify a FixedOrderComparator after a comparison
         //
         verifyException("org.apache.commons.collections4.comparators.FixedOrderComparator", e);
      }
  }
}
