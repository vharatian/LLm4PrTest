/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 13:54:29 GMT 2025
 */

package org.apache.commons.collections4.bidimap;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.apache.commons.collections4.BidiMap;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.bidimap.AbstractDualBidiMap;
import org.apache.commons.collections4.bidimap.DualHashBidiMap;
import org.apache.commons.collections4.bidimap.DualLinkedHashBidiMap;
import org.apache.commons.collections4.bidimap.DualTreeBidiMap;
import org.apache.commons.collections4.bidimap.TreeBidiMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AbstractDualBidiMap_ESTest extends AbstractDualBidiMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Integer>(dualLinkedHashBidiMap0);
      Integer integer0 = new Integer((-1184));
      dualLinkedHashBidiMap0.put(integer0, integer0);
      Integer integer1 = new Integer((-1184));
      boolean boolean0 = abstractDualBidiMap_Values0.remove(integer1);
      assertEquals(0, dualLinkedHashBidiMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      AbstractDualBidiMap.KeySet<AbstractMap.SimpleImmutableEntry<Integer, Integer>> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<AbstractMap.SimpleImmutableEntry<Integer, Integer>>(dualLinkedHashBidiMap0);
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      Integer integer1 = dualHashBidiMap0.put((Integer) null, integer0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, integer0);
      dualLinkedHashBidiMap0.put(abstractMap_SimpleImmutableEntry0, integer0);
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap1 = new DualLinkedHashBidiMap<Integer, Integer>(dualHashBidiMap0);
      AbstractDualBidiMap.KeySet<Integer> abstractDualBidiMap_KeySet1 = new AbstractDualBidiMap.KeySet<Integer>(dualLinkedHashBidiMap1);
      boolean boolean0 = abstractDualBidiMap_KeySet1.retainAll(abstractDualBidiMap_KeySet0);
      assertEquals(0, dualLinkedHashBidiMap1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>();
      Integer integer0 = new Integer((-125));
      dualHashBidiMap0.put(integer0, integer0);
      Integer integer1 = new Integer((-125));
      dualHashBidiMap0.removeValue(integer1);
      assertEquals(0, dualHashBidiMap0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(anyInt() , anyInt());
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator1).compare(anyInt() , anyInt());
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>(comparator0, comparator1);
      Integer integer0 = new Integer(0);
      dualTreeBidiMap0.put(integer0, (Integer) null);
      dualTreeBidiMap0.remove((Object) integer0);
      assertTrue(dualTreeBidiMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      dualLinkedHashBidiMap0.put((Integer) null, (Integer) null);
      AbstractDualBidiMap.BidiMapIterator<Integer, Integer> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<Integer, Integer>(dualLinkedHashBidiMap0);
      AbstractDualBidiMap.ValuesIterator<Integer> abstractDualBidiMap_ValuesIterator0 = new AbstractDualBidiMap.ValuesIterator<Integer>(abstractDualBidiMap_BidiMapIterator0, dualLinkedHashBidiMap0);
      Integer integer0 = abstractDualBidiMap_ValuesIterator0.next();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      Integer integer0 = new Integer((-2143289342));
      dualLinkedHashBidiMap0.put(integer0, integer0);
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>(dualLinkedHashBidiMap0);
      AbstractDualBidiMap.BidiMapIterator<Integer, Integer> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<Integer, Integer>(dualTreeBidiMap0);
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      abstractDualBidiMap_BidiMapIterator0.forEachRemaining(consumer0);
      Integer integer1 = abstractDualBidiMap_BidiMapIterator0.getValue();
      assertEquals((-2143289342), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      Set<AbstractMap.SimpleImmutableEntry<Integer, Integer>> set0 = dualLinkedHashBidiMap0.values();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      dualLinkedHashBidiMap0.putAll(dualLinkedHashBidiMap0);
      assertEquals(0, dualLinkedHashBidiMap0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>();
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Integer>(dualHashBidiMap0);
      Iterator<Integer> iterator0 = abstractDualBidiMap_Values0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>(comparator0, comparator0);
      AbstractDualBidiMap.BidiMapIterator<Integer, Integer> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<Integer, Integer>(dualTreeBidiMap0);
      AbstractDualBidiMap.KeySetIterator<Integer> abstractDualBidiMap_KeySetIterator0 = new AbstractDualBidiMap.KeySetIterator<Integer>(abstractDualBidiMap_BidiMapIterator0, dualTreeBidiMap0);
      // Undeclared exception!
      try { 
        abstractDualBidiMap_KeySetIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap$PrivateEntryIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Integer>(dualLinkedHashBidiMap0);
      AbstractDualBidiMap.KeySet<Integer> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<Integer>(dualLinkedHashBidiMap0);
      boolean boolean0 = abstractDualBidiMap_KeySet0.remove(abstractDualBidiMap_Values0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      AbstractDualBidiMap.KeySet<Integer> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<Integer>(dualLinkedHashBidiMap0);
      Iterator<Integer> iterator0 = abstractDualBidiMap_KeySet0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(comparator0, (Comparator<? super AbstractMap.SimpleImmutableEntry<Integer, Integer>>) null);
      AbstractDualBidiMap.EntrySet<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> abstractDualBidiMap_EntrySet0 = new AbstractDualBidiMap.EntrySet<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(dualTreeBidiMap0);
      Iterator<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>> iterator0 = (Iterator<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>>)abstractDualBidiMap_EntrySet0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      AbstractDualBidiMap.BidiMapIterator<Integer, Integer> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<Integer, Integer>(dualLinkedHashBidiMap0);
      boolean boolean0 = abstractDualBidiMap_BidiMapIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DualHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> dualHashBidiMap0 = new DualHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      Set<AbstractMap.SimpleImmutableEntry<Integer, Integer>> set0 = dualHashBidiMap0.keySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      Iterator<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>> iterator0 = (Iterator<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      AbstractDualBidiMap.EntrySetIterator<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> abstractDualBidiMap_EntrySetIterator0 = new AbstractDualBidiMap.EntrySetIterator<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(iterator0, dualLinkedHashBidiMap0);
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer0, (Integer) null);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleImmutableEntry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(integer0, abstractMap_SimpleImmutableEntry0);
      abstractDualBidiMap_EntrySetIterator0.last = (Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>) abstractMap_SimpleImmutableEntry1;
      abstractDualBidiMap_EntrySetIterator0.canRemove = true;
      abstractDualBidiMap_EntrySetIterator0.remove();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer(2);
      DualHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> dualHashBidiMap0 = new DualHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      dualHashBidiMap0.put(abstractMap_SimpleImmutableEntry0, integer0);
      int int0 = dualHashBidiMap0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      DualLinkedHashBidiMap<Integer, AbstractDualBidiMap.Values<Integer>> dualLinkedHashBidiMap1 = new DualLinkedHashBidiMap<Integer, AbstractDualBidiMap.Values<Integer>>();
      Integer integer0 = new Integer((-2146345001));
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Integer>(dualLinkedHashBidiMap0);
      BiFunction<AbstractDualBidiMap.Values<Integer>, AbstractDualBidiMap.Values<Integer>, AbstractDualBidiMap.Values<Integer>> biFunction0 = (BiFunction<AbstractDualBidiMap.Values<Integer>, AbstractDualBidiMap.Values<Integer>, AbstractDualBidiMap.Values<Integer>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values1 = dualLinkedHashBidiMap1.merge(integer0, abstractDualBidiMap_Values0, biFunction0);
      dualLinkedHashBidiMap1.put(integer0, abstractDualBidiMap_Values1);
      assertEquals(1, dualLinkedHashBidiMap1.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      boolean boolean0 = dualTreeBidiMap0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>();
      Integer integer0 = new Integer((-3111));
      Integer integer1 = dualHashBidiMap0.put(integer0, integer0);
      assertNull(integer1);
      
      BidiMap<Integer, Integer> bidiMap0 = dualHashBidiMap0.inverseBidiMap();
      assertFalse(bidiMap0.isEmpty());
      assertNotNull(bidiMap0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>(comparator0, comparator0);
      Integer integer0 = dualTreeBidiMap0.getKey((Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      Integer integer1 = dualLinkedHashBidiMap0.get(integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>();
      boolean boolean0 = dualTreeBidiMap0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(dualLinkedHashBidiMap0);
      Set<Map.Entry<Integer, Integer>> set0 = (Set<Map.Entry<Integer, Integer>>)treeBidiMap0.entrySet();
      dualLinkedHashBidiMap0.entrySet = set0;
      Set<Map.Entry<Integer, Integer>> set1 = (Set<Map.Entry<Integer, Integer>>)dualLinkedHashBidiMap0.entrySet();
      assertEquals(0, set1.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedList0.iterator();
      Iterator<Integer> iterator1 = dualLinkedHashBidiMap0.createValuesIterator(iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>(1);
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>(hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListIterator<Integer> listIterator0 = linkedList0.listIterator(0);
      AbstractDualBidiMap.KeySetIterator<Integer> abstractDualBidiMap_KeySetIterator0 = new AbstractDualBidiMap.KeySetIterator<Integer>(listIterator0, dualTreeBidiMap0);
      Iterator<Integer> iterator0 = dualTreeBidiMap0.createKeySetIterator(abstractDualBidiMap_KeySetIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Comparator<AbstractMap.SimpleImmutableEntry<Integer, Integer>> comparator0 = (Comparator<AbstractMap.SimpleImmutableEntry<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(comparator0, comparator0);
      Iterator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>> iterator0 = (Iterator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      Iterator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>> iterator1 = (Iterator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>>)dualTreeBidiMap0.createEntrySetIterator(iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Integer>(dualLinkedHashBidiMap0);
      boolean boolean0 = dualLinkedHashBidiMap0.containsKey(abstractDualBidiMap_Values0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DualTreeBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>((Map<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>) null, dualTreeBidiMap0, dualTreeBidiMap0);
      // Undeclared exception!
      try { 
        dualLinkedHashBidiMap0.values();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$Values", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Integer integer0 = new Integer(0);
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>();
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>((Map<Integer, Integer>) null, (Map<Integer, Integer>) null, dualHashBidiMap0);
      // Undeclared exception!
      try { 
        dualLinkedHashBidiMap0.remove((Object) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DualLinkedHashBidiMap<AbstractDualBidiMap.Values<Integer>, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<AbstractDualBidiMap.Values<Integer>, Integer>();
      // Undeclared exception!
      try { 
        dualLinkedHashBidiMap0.putAll((Map<? extends AbstractDualBidiMap.Values<Integer>, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DualTreeBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) null, (Integer) null);
      // Undeclared exception!
      try { 
        dualTreeBidiMap0.put((Integer) null, abstractMap_SimpleImmutableEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>((Map<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>) null, (Map<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>) null, dualTreeBidiMap0);
      // Undeclared exception!
      try { 
        dualLinkedHashBidiMap0.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        dualTreeBidiMap0.getKey((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      DualHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualHashBidiMap0 = new DualHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>((Map<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>) null, dualTreeBidiMap0, dualTreeBidiMap0);
      // Undeclared exception!
      try { 
        dualHashBidiMap0.get((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DualTreeBidiMap<AbstractDualBidiMap.Values<Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<AbstractDualBidiMap.Values<Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) null, (Integer) null);
      // Undeclared exception!
      try { 
        dualTreeBidiMap0.get(abstractMap_SimpleImmutableEntry0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DualHashBidiMap<AbstractDualBidiMap.Values<Integer>, AbstractDualBidiMap.Values<Integer>> dualHashBidiMap0 = new DualHashBidiMap<AbstractDualBidiMap.Values<Integer>, AbstractDualBidiMap.Values<Integer>>();
      DualLinkedHashBidiMap<AbstractDualBidiMap.Values<Integer>, AbstractDualBidiMap.Values<Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<AbstractDualBidiMap.Values<Integer>, AbstractDualBidiMap.Values<Integer>>(dualHashBidiMap0, dualHashBidiMap0, dualHashBidiMap0);
      // Undeclared exception!
      try { 
        dualLinkedHashBidiMap0.createValuesIterator((Iterator<AbstractDualBidiMap.Values<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DualTreeBidiMap<DualLinkedHashBidiMap<Integer, Integer>, DualLinkedHashBidiMap<Integer, Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<DualLinkedHashBidiMap<Integer, Integer>, DualLinkedHashBidiMap<Integer, Integer>>();
      // Undeclared exception!
      try { 
        dualTreeBidiMap0.createKeySetIterator((Iterator<DualLinkedHashBidiMap<Integer, Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DualLinkedHashBidiMap<AbstractDualBidiMap.Values<Integer>, AbstractDualBidiMap.Values<Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<AbstractDualBidiMap.Values<Integer>, AbstractDualBidiMap.Values<Integer>>();
      // Undeclared exception!
      try { 
        dualLinkedHashBidiMap0.createEntrySetIterator((Iterator<Map.Entry<AbstractDualBidiMap.Values<Integer>, AbstractDualBidiMap.Values<Integer>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>(comparator0, comparator0);
      Integer integer0 = new Integer((-1713));
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap1 = dualTreeBidiMap0.createBidiMap(dualTreeBidiMap0, dualTreeBidiMap0, dualTreeBidiMap0);
      dualTreeBidiMap1.removeValue(integer0);
      AbstractDualBidiMap.KeySet<Integer> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<Integer>(dualTreeBidiMap1);
      assertFalse(abstractDualBidiMap_KeySet0.contains((-1713)));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      assertTrue(dualLinkedHashBidiMap0.isEmpty());
      
      Integer integer0 = new Integer((-4418));
      dualLinkedHashBidiMap0.put(integer0, integer0);
      boolean boolean0 = dualLinkedHashBidiMap0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      dualLinkedHashBidiMap0.clear();
      assertTrue(dualLinkedHashBidiMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>();
      AbstractDualBidiMap.BidiMapIterator<Integer, Integer> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<Integer, Integer>(dualTreeBidiMap0);
      String string0 = abstractDualBidiMap_BidiMapIterator0.toString();
      assertEquals("MapIterator[]", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(123);
      Integer integer1 = new Integer(123);
      dualLinkedHashBidiMap0.put(integer1, integer1);
      dualLinkedHashBidiMap0.put(integer0, integer0);
      AbstractDualBidiMap.BidiMapIterator<Integer, Integer> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<Integer, Integer>(dualLinkedHashBidiMap0);
      abstractDualBidiMap_BidiMapIterator0.next();
      // Undeclared exception!
      try { 
        abstractDualBidiMap_BidiMapIterator0.setValue(integer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot use setValue() when the object being set is already in the map
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(123);
      Integer integer1 = dualLinkedHashBidiMap0.put(integer0, integer0);
      AbstractDualBidiMap.BidiMapIterator<Integer, Integer> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<Integer, Integer>(dualLinkedHashBidiMap0);
      abstractDualBidiMap_BidiMapIterator0.next();
      abstractDualBidiMap_BidiMapIterator0.setValue(integer1);
      assertEquals(1, dualLinkedHashBidiMap0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(1);
      AbstractDualBidiMap.BidiMapIterator<Integer, Integer> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<Integer, Integer>(dualLinkedHashBidiMap0);
      // Undeclared exception!
      try { 
        abstractDualBidiMap_BidiMapIterator0.setValue(integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator setValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(2033);
      dualLinkedHashBidiMap0.put(integer0, integer0);
      AbstractDualBidiMap.BidiMapIterator<Integer, Integer> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<Integer, Integer>(dualLinkedHashBidiMap0);
      abstractDualBidiMap_BidiMapIterator0.next();
      Integer integer1 = abstractDualBidiMap_BidiMapIterator0.setValue(integer0);
      assertEquals(2033, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      AbstractDualBidiMap.BidiMapIterator<Integer, Integer> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<Integer, Integer>(dualLinkedHashBidiMap0);
      // Undeclared exception!
      try { 
        abstractDualBidiMap_BidiMapIterator0.getValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator getValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      AbstractDualBidiMap.BidiMapIterator<Integer, Integer> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<Integer, Integer>(dualLinkedHashBidiMap0);
      // Undeclared exception!
      try { 
        abstractDualBidiMap_BidiMapIterator0.getKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator getKey() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      AbstractDualBidiMap.MapEntry<Integer, Integer> abstractDualBidiMap_MapEntry0 = new AbstractDualBidiMap.MapEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0, dualHashBidiMap0);
      AbstractDualBidiMap.BidiMapIterator<Integer, Integer> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<Integer, Integer>(dualHashBidiMap0);
      abstractDualBidiMap_BidiMapIterator0.last = (Map.Entry<Integer, Integer>) abstractDualBidiMap_MapEntry0;
      String string0 = abstractDualBidiMap_BidiMapIterator0.toString();
      assertEquals("MapIterator[0=0]", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      AbstractDualBidiMap.BidiMapIterator<Integer, Integer> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<Integer, Integer>(dualLinkedHashBidiMap0);
      AbstractDualBidiMap.ValuesIterator<Integer> abstractDualBidiMap_ValuesIterator0 = new AbstractDualBidiMap.ValuesIterator<Integer>(abstractDualBidiMap_BidiMapIterator0, dualLinkedHashBidiMap0);
      abstractDualBidiMap_ValuesIterator0.canRemove = true;
      // Undeclared exception!
      try { 
        abstractDualBidiMap_ValuesIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator remove() can only be called once after next()
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(832);
      dualLinkedHashBidiMap0.put(integer0, integer0);
      AbstractDualBidiMap.BidiMapIterator<Integer, Integer> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<Integer, Integer>(dualLinkedHashBidiMap0);
      abstractDualBidiMap_BidiMapIterator0.next();
      abstractDualBidiMap_BidiMapIterator0.remove();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      Integer integer0 = new Integer((-2146601360));
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer0, integer0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      dualLinkedHashBidiMap0.put(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry0);
      dualLinkedHashBidiMap0.put((AbstractMap.SimpleImmutableEntry<Integer, Integer>) null, (AbstractMap.SimpleImmutableEntry<Integer, Integer>) null);
      BiFunction<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> biFunction0 = (BiFunction<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((AbstractMap.SimpleImmutableEntry<Integer, Integer>) null).when(biFunction0).apply(any(java.util.AbstractMap.SimpleImmutableEntry.class) , any(java.util.AbstractMap.SimpleImmutableEntry.class));
      // Undeclared exception!
      try { 
        dualLinkedHashBidiMap0.replaceAll(biFunction0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot use setValue() when the object being set is already in the map
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$MapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      dualLinkedHashBidiMap0.put((AbstractMap.SimpleImmutableEntry<Integer, Integer>) null, (AbstractMap.SimpleImmutableEntry<Integer, Integer>) null);
      BiFunction<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> biFunction0 = (BiFunction<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((AbstractMap.SimpleImmutableEntry<Integer, Integer>) null).when(biFunction0).apply(any(java.util.AbstractMap.SimpleImmutableEntry.class) , any(java.util.AbstractMap.SimpleImmutableEntry.class));
      dualLinkedHashBidiMap0.replaceAll(biFunction0);
      assertFalse(dualLinkedHashBidiMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(1262);
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Integer>(dualTreeBidiMap0);
      AbstractMap.SimpleImmutableEntry<AbstractDualBidiMap.Values<Integer>, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<AbstractDualBidiMap.Values<Integer>, Integer>(abstractDualBidiMap_Values0, integer0);
      AbstractMap.SimpleImmutableEntry<AbstractDualBidiMap.Values<Integer>, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<AbstractDualBidiMap.Values<Integer>, Integer>(abstractMap_SimpleImmutableEntry0);
      DualLinkedHashBidiMap<AbstractDualBidiMap.Values<Integer>, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<AbstractDualBidiMap.Values<Integer>, Integer>();
      AbstractDualBidiMap.MapEntry<AbstractDualBidiMap.Values<Integer>, Integer> abstractDualBidiMap_MapEntry0 = new AbstractDualBidiMap.MapEntry<AbstractDualBidiMap.Values<Integer>, Integer>(abstractMap_SimpleImmutableEntry1, dualLinkedHashBidiMap0);
      // Undeclared exception!
      try { 
        abstractDualBidiMap_MapEntry0.setValue(integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap$SimpleImmutableEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Iterator<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>> iterator0 = (Iterator<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      DualLinkedHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      AbstractDualBidiMap.EntrySetIterator<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> abstractDualBidiMap_EntrySetIterator0 = new AbstractDualBidiMap.EntrySetIterator<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(iterator0, dualLinkedHashBidiMap0);
      // Undeclared exception!
      try { 
        abstractDualBidiMap_EntrySetIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator remove() can only be called once after next()
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$EntrySetIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      AbstractDualBidiMap.EntrySet<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> abstractDualBidiMap_EntrySet0 = new AbstractDualBidiMap.EntrySet<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>(dualTreeBidiMap0);
      boolean boolean0 = abstractDualBidiMap_EntrySet0.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>();
      Integer integer0 = new Integer((-20));
      AbstractDualBidiMap.EntrySet<Integer, Integer> abstractDualBidiMap_EntrySet0 = new AbstractDualBidiMap.EntrySet<Integer, Integer>(dualTreeBidiMap0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      AbstractDualBidiMap.MapEntry<Integer, Integer> abstractDualBidiMap_MapEntry0 = new AbstractDualBidiMap.MapEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0, dualLinkedHashBidiMap0);
      boolean boolean0 = abstractDualBidiMap_EntrySet0.remove(abstractDualBidiMap_MapEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      AbstractDualBidiMap.BidiMapIterator<Integer, Integer> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<Integer, Integer>(dualLinkedHashBidiMap0);
      AbstractDualBidiMap.ValuesIterator<Integer> abstractDualBidiMap_ValuesIterator0 = new AbstractDualBidiMap.ValuesIterator<Integer>(abstractDualBidiMap_BidiMapIterator0, dualLinkedHashBidiMap0);
      // Undeclared exception!
      try { 
        abstractDualBidiMap_ValuesIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator remove() can only be called once after next()
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$ValuesIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Integer>(dualLinkedHashBidiMap0);
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values1 = new AbstractDualBidiMap.Values<Integer>(dualLinkedHashBidiMap0);
      boolean boolean0 = abstractDualBidiMap_Values0.remove(abstractDualBidiMap_Values1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(2033);
      dualLinkedHashBidiMap0.put(integer0, integer0);
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Integer>(dualLinkedHashBidiMap0);
      boolean boolean0 = abstractDualBidiMap_Values0.contains(integer0);
      assertFalse(dualLinkedHashBidiMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DualHashBidiMap<AbstractDualBidiMap.MapEntry<Integer, Integer>, AbstractDualBidiMap.MapEntry<Integer, Integer>> dualHashBidiMap0 = new DualHashBidiMap<AbstractDualBidiMap.MapEntry<Integer, Integer>, AbstractDualBidiMap.MapEntry<Integer, Integer>>();
      AbstractDualBidiMap.BidiMapIterator<AbstractDualBidiMap.MapEntry<Integer, Integer>, AbstractDualBidiMap.MapEntry<Integer, Integer>> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<AbstractDualBidiMap.MapEntry<Integer, Integer>, AbstractDualBidiMap.MapEntry<Integer, Integer>>(dualHashBidiMap0);
      AbstractDualBidiMap.KeySetIterator<AbstractDualBidiMap.MapEntry<Integer, Integer>> abstractDualBidiMap_KeySetIterator0 = new AbstractDualBidiMap.KeySetIterator<AbstractDualBidiMap.MapEntry<Integer, Integer>>(abstractDualBidiMap_BidiMapIterator0, dualHashBidiMap0);
      // Undeclared exception!
      try { 
        abstractDualBidiMap_KeySetIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator remove() can only be called once after next()
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$KeySetIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      AbstractDualBidiMap.KeySet<Integer> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<Integer>(dualLinkedHashBidiMap0);
      Integer integer0 = new Integer(2033);
      dualLinkedHashBidiMap0.put(integer0, (Integer) null);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(abstractDualBidiMap_KeySet0);
      assertEquals(1, dualLinkedHashBidiMap0.size());
      
      boolean boolean0 = abstractDualBidiMap_KeySet0.removeAll(linkedHashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>();
      Integer integer0 = new Integer((-17));
      dualHashBidiMap0.put(integer0, integer0);
      AbstractDualBidiMap.KeySet<Integer> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<Integer>(dualHashBidiMap0);
      boolean boolean0 = abstractDualBidiMap_KeySet0.contains(integer0);
      assertEquals(1, dualHashBidiMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Integer>(dualLinkedHashBidiMap0);
      AbstractDualBidiMap.KeySet<Integer> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<Integer>(dualLinkedHashBidiMap0);
      boolean boolean0 = abstractDualBidiMap_KeySet0.contains(abstractDualBidiMap_Values0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      AbstractDualBidiMap.KeySet<AbstractMap.SimpleImmutableEntry<Integer, Integer>> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<AbstractMap.SimpleImmutableEntry<Integer, Integer>>(dualLinkedHashBidiMap0);
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      dualHashBidiMap0.put(integer0, integer0);
      AbstractDualBidiMap.KeySet<Integer> abstractDualBidiMap_KeySet1 = new AbstractDualBidiMap.KeySet<Integer>(dualHashBidiMap0);
      assertEquals(1, dualHashBidiMap0.size());
      
      boolean boolean0 = abstractDualBidiMap_KeySet1.retainAll(abstractDualBidiMap_KeySet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      Set<Map.Entry<Integer, Integer>> set0 = (Set<Map.Entry<Integer, Integer>>)dualLinkedHashBidiMap0.entrySet();
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Integer>(dualLinkedHashBidiMap0);
      boolean boolean0 = abstractDualBidiMap_Values0.retainAll(set0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Integer>(dualLinkedHashBidiMap0);
      DualLinkedHashBidiMap<Integer, AbstractDualBidiMap.Values<Integer>> dualLinkedHashBidiMap1 = new DualLinkedHashBidiMap<Integer, AbstractDualBidiMap.Values<Integer>>();
      Integer integer0 = new Integer(1817);
      dualLinkedHashBidiMap1.put(integer0, abstractDualBidiMap_Values0);
      AbstractDualBidiMap.Values<AbstractDualBidiMap.Values<Integer>> abstractDualBidiMap_Values1 = new AbstractDualBidiMap.Values<AbstractDualBidiMap.Values<Integer>>(dualLinkedHashBidiMap1);
      boolean boolean0 = abstractDualBidiMap_Values1.removeAll(abstractDualBidiMap_Values0);
      assertEquals(1, dualLinkedHashBidiMap1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      AbstractDualBidiMap.KeySet<Integer> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<Integer>(dualLinkedHashBidiMap0);
      boolean boolean0 = abstractDualBidiMap_KeySet0.removeAll(abstractDualBidiMap_KeySet0);
      assertTrue(dualLinkedHashBidiMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Integer integer0 = new Integer((-4418));
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>();
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>(dualTreeBidiMap0);
      dualLinkedHashBidiMap0.put(integer0, integer0);
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Integer>(dualLinkedHashBidiMap0);
      assertEquals(1, dualLinkedHashBidiMap0.size());
      
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) integer0);
      boolean boolean0 = abstractDualBidiMap_Values0.removeIf(predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      Integer integer0 = new Integer((-4418));
      dualLinkedHashBidiMap0.put(integer0, integer0);
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Integer>(dualLinkedHashBidiMap0);
      boolean boolean0 = abstractDualBidiMap_Values0.removeIf((Predicate<? super Integer>) null);
      assertEquals(1, dualLinkedHashBidiMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Integer>(dualLinkedHashBidiMap0);
      boolean boolean0 = abstractDualBidiMap_Values0.removeIf((Predicate<? super Integer>) null);
      assertTrue(dualLinkedHashBidiMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Integer>(dualLinkedHashBidiMap0);
      DualLinkedHashBidiMap<Integer, AbstractDualBidiMap.Values<Integer>> dualLinkedHashBidiMap1 = new DualLinkedHashBidiMap<Integer, AbstractDualBidiMap.Values<Integer>>();
      Integer integer0 = new Integer(1817);
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values1 = dualLinkedHashBidiMap1.put(integer0, abstractDualBidiMap_Values0);
      AbstractDualBidiMap.Values<AbstractDualBidiMap.Values<Integer>> abstractDualBidiMap_Values2 = new AbstractDualBidiMap.Values<AbstractDualBidiMap.Values<Integer>>(dualLinkedHashBidiMap1);
      boolean boolean0 = abstractDualBidiMap_Values2.contains(abstractDualBidiMap_Values1);
      assertFalse(dualLinkedHashBidiMap1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>();
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>(dualHashBidiMap0, dualHashBidiMap0, dualHashBidiMap0);
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Integer>(dualLinkedHashBidiMap0);
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values1 = new AbstractDualBidiMap.Values<Integer>(dualLinkedHashBidiMap0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      DualTreeBidiMap<AbstractDualBidiMap.Values<Integer>, AbstractDualBidiMap.Values<Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<AbstractDualBidiMap.Values<Integer>, AbstractDualBidiMap.Values<Integer>>();
      DualTreeBidiMap<AbstractDualBidiMap.Values<Integer>, AbstractDualBidiMap.Values<Integer>> dualTreeBidiMap1 = new DualTreeBidiMap<AbstractDualBidiMap.Values<Integer>, AbstractDualBidiMap.Values<Integer>>(dualTreeBidiMap0, dualTreeBidiMap0, dualTreeBidiMap0);
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Integer>(dualLinkedHashBidiMap0);
      // Undeclared exception!
      try { 
        dualTreeBidiMap1.put(abstractDualBidiMap_Values0, abstractDualBidiMap_Values0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>();
      Integer integer0 = new Integer((-20));
      dualTreeBidiMap0.put(integer0, integer0);
      boolean boolean0 = dualTreeBidiMap0.containsValue(integer0);
      assertEquals(1, dualTreeBidiMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>();
      Integer integer0 = new Integer((-20));
      boolean boolean0 = dualTreeBidiMap0.containsValue(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Integer>(dualLinkedHashBidiMap0);
      Integer integer0 = dualLinkedHashBidiMap0.remove((Object) abstractDualBidiMap_Values0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      DualLinkedHashBidiMap<Integer, AbstractDualBidiMap.Values<Integer>> dualLinkedHashBidiMap1 = new DualLinkedHashBidiMap<Integer, AbstractDualBidiMap.Values<Integer>>();
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Integer>(dualLinkedHashBidiMap0);
      dualLinkedHashBidiMap1.put((Integer) null, abstractDualBidiMap_Values0);
      Integer integer0 = new Integer((-3757));
      dualLinkedHashBidiMap1.put(integer0, abstractDualBidiMap_Values0);
      assertFalse(dualLinkedHashBidiMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      dualLinkedHashBidiMap0.put((AbstractMap.SimpleImmutableEntry<Integer, Integer>) null, (AbstractMap.SimpleImmutableEntry<Integer, Integer>) null);
      dualLinkedHashBidiMap0.replace((AbstractMap.SimpleImmutableEntry<Integer, Integer>) null, (AbstractMap.SimpleImmutableEntry<Integer, Integer>) null);
      assertFalse(dualLinkedHashBidiMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      AbstractDualBidiMap.BidiMapIterator<Integer, Integer> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<Integer, Integer>(dualLinkedHashBidiMap0);
      abstractDualBidiMap_BidiMapIterator0.reset();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      AbstractDualBidiMap.KeySet<Integer> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<Integer>(dualLinkedHashBidiMap0);
      Integer integer0 = new Integer(2033);
      dualLinkedHashBidiMap0.put(integer0, integer0);
      AbstractDualBidiMap.KeySet<Integer> abstractDualBidiMap_KeySet1 = new AbstractDualBidiMap.KeySet<Integer>(dualLinkedHashBidiMap0);
      boolean boolean0 = abstractDualBidiMap_KeySet1.retainAll(abstractDualBidiMap_KeySet0);
      assertEquals(1, dualLinkedHashBidiMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      MapIterator<Integer, Integer> mapIterator0 = dualLinkedHashBidiMap0.mapIterator();
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      Integer integer0 = new Integer((-2143874429));
      DualLinkedHashBidiMap<Integer, AbstractDualBidiMap.Values<Integer>> dualLinkedHashBidiMap1 = new DualLinkedHashBidiMap<Integer, AbstractDualBidiMap.Values<Integer>>();
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Integer>(dualLinkedHashBidiMap0);
      dualLinkedHashBidiMap1.put(integer0, abstractDualBidiMap_Values0);
      AbstractDualBidiMap.Values<AbstractDualBidiMap.Values<Integer>> abstractDualBidiMap_Values1 = new AbstractDualBidiMap.Values<AbstractDualBidiMap.Values<Integer>>(dualLinkedHashBidiMap1);
      Predicate<AbstractDualBidiMap.Values<Integer>> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = abstractDualBidiMap_Values1.removeIf(predicate0);
      assertEquals(1, dualLinkedHashBidiMap1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      dualLinkedHashBidiMap0.hashCode();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      DualTreeBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      DualLinkedHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualLinkedHashBidiMap1 = new DualLinkedHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(dualTreeBidiMap0, dualLinkedHashBidiMap0, dualLinkedHashBidiMap0);
      DualHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> dualHashBidiMap0 = new DualHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>(dualLinkedHashBidiMap0, dualLinkedHashBidiMap1, dualLinkedHashBidiMap1);
      boolean boolean0 = dualHashBidiMap0.equals(dualTreeBidiMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Integer>(dualLinkedHashBidiMap0);
      abstractDualBidiMap_Values0.clear();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      DualLinkedHashBidiMap<AbstractDualBidiMap.MapEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<AbstractDualBidiMap.MapEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      int int0 = dualLinkedHashBidiMap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      DualTreeBidiMap<Integer, AbstractDualBidiMap.Values<Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, AbstractDualBidiMap.Values<Integer>>();
      DualTreeBidiMap<AbstractDualBidiMap.Values<Integer>, Integer> dualTreeBidiMap1 = new DualTreeBidiMap<AbstractDualBidiMap.Values<Integer>, Integer>();
      DualLinkedHashBidiMap<Integer, AbstractDualBidiMap.Values<Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, AbstractDualBidiMap.Values<Integer>>(dualTreeBidiMap0, dualTreeBidiMap1, dualTreeBidiMap1);
      BidiMap<AbstractDualBidiMap.Values<Integer>, Integer> bidiMap0 = dualLinkedHashBidiMap0.inverseBidiMap();
      assertTrue(bidiMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>();
      DualLinkedHashBidiMap<Integer, AbstractDualBidiMap.Values<Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, AbstractDualBidiMap.Values<Integer>>();
      DualTreeBidiMap<Integer, AbstractDualBidiMap.Values<Integer>> dualTreeBidiMap1 = new DualTreeBidiMap<Integer, AbstractDualBidiMap.Values<Integer>>(dualLinkedHashBidiMap0);
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Integer>(dualTreeBidiMap0);
      // Undeclared exception!
      try { 
        dualTreeBidiMap1.getKey(abstractDualBidiMap_Values0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      String string0 = dualLinkedHashBidiMap0.toString();
      assertNotNull(string0);
  }
}
