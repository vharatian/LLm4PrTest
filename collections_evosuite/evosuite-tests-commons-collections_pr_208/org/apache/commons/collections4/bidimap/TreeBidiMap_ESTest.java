/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 13:59:48 GMT 2025
 */

package org.apache.commons.collections4.bidimap;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.apache.commons.collections4.OrderedBidiMap;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.bidimap.TreeBidiMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class TreeBidiMap_ESTest extends TreeBidiMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = Integer.valueOf(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer integer2 = treeBidiMap0.put(integer0, integer1);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertNull(integer2);
      
      String string0 = treeBidiMap0.toString();
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertNotNull(string0);
      assertEquals("{0=0}", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap<Integer, Integer> treeBidiMap1 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap1.isEmpty());
      assertEquals(0, treeBidiMap1.size());
      assertTrue(treeBidiMap1.equals((Object)treeBidiMap0));
      assertNotNull(treeBidiMap1);
      
      Integer integer0 = new Integer((-3384));
      assertNotNull(integer0);
      assertEquals((-3384), (int)integer0);
      
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer1 = treeBidiMap1.merge(integer0, integer0, biFunction0);
      assertEquals(1, treeBidiMap1.size());
      assertFalse(treeBidiMap1.isEmpty());
      assertFalse(treeBidiMap1.equals((Object)treeBidiMap0));
      assertNotNull(integer1);
      assertNotSame(treeBidiMap1, treeBidiMap0);
      assertEquals((-3384), (int)integer1);
      
      boolean boolean0 = treeBidiMap1.equals(treeBidiMap0);
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap1.size());
      assertFalse(treeBidiMap1.isEmpty());
      assertFalse(treeBidiMap0.equals((Object)treeBidiMap1));
      assertFalse(treeBidiMap1.equals((Object)treeBidiMap0));
      assertNotSame(treeBidiMap0, treeBidiMap1);
      assertNotSame(treeBidiMap1, treeBidiMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer(3740);
      assertNotNull(integer0);
      assertEquals(3740, (int)integer0);
      
      Integer integer1 = treeBidiMap0.put(integer0, integer0);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertNull(integer1);
      
      Integer integer2 = new Integer(8);
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(8, (int)integer2);
      
      Integer integer3 = new Integer(0);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      
      Integer integer4 = treeBidiMap0.putIfAbsent(integer3, integer2);
      assertEquals(2, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNull(integer4);
      
      BiFunction<Integer, Object, Integer> biFunction0 = (BiFunction<Integer, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer5 = treeBidiMap0.merge(integer2, integer3, biFunction0);
      assertEquals(3, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      assertEquals(0, (int)integer5);
      
      Integer integer6 = new Integer(4);
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertNotNull(integer6);
      assertEquals(4, (int)integer6);
      
      Integer integer7 = treeBidiMap0.put(integer6, integer6);
      assertEquals(4, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertNull(integer7);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.DataElement treeBidiMap_DataElement0 = TreeBidiMap.DataElement.KEY;
      Integer integer0 = new Integer((-931));
      assertNotNull(integer0);
      assertEquals((-931), (int)integer0);
      
      Integer integer1 = treeBidiMap0.put(integer0, integer0);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertNull(integer1);
      
      TreeBidiMap.ViewMapIterator treeBidiMap_ViewMapIterator0 = treeBidiMap0.new ViewMapIterator(treeBidiMap_DataElement0);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap_ViewMapIterator0.hasPrevious());
      assertTrue(treeBidiMap_ViewMapIterator0.hasNext());
      assertNotNull(treeBidiMap_ViewMapIterator0);
      
      TreeBidiMap.Node<Integer, Integer> treeBidiMap_Node0 = treeBidiMap_ViewMapIterator0.navigateNext();
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap_ViewMapIterator0.hasNext());
      assertTrue(treeBidiMap_ViewMapIterator0.hasPrevious());
      assertNotNull(treeBidiMap_Node0);
      
      treeBidiMap_ViewMapIterator0.remove();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertFalse(treeBidiMap_ViewMapIterator0.hasNext());
      assertFalse(treeBidiMap_ViewMapIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer((-6));
      assertNotNull(integer0);
      assertEquals((-6), (int)integer0);
      
      Integer integer1 = treeBidiMap0.putIfAbsent(integer0, integer0);
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertNull(integer1);
      
      TreeBidiMap.InverseViewMapEntryIterator treeBidiMap_InverseViewMapEntryIterator0 = treeBidiMap0.new InverseViewMapEntryIterator();
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertFalse(treeBidiMap_InverseViewMapEntryIterator0.hasPrevious());
      assertTrue(treeBidiMap_InverseViewMapEntryIterator0.hasNext());
      assertNotNull(treeBidiMap_InverseViewMapEntryIterator0);
      
      Map.Entry<Integer, Integer> map_Entry0 = treeBidiMap_InverseViewMapEntryIterator0.next();
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertFalse(treeBidiMap_InverseViewMapEntryIterator0.hasNext());
      assertTrue(treeBidiMap_InverseViewMapEntryIterator0.hasPrevious());
      assertNotNull(map_Entry0);
      
      Map.Entry<Integer, Integer> map_Entry1 = treeBidiMap_InverseViewMapEntryIterator0.previous();
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertFalse(treeBidiMap_InverseViewMapEntryIterator0.hasPrevious());
      assertTrue(treeBidiMap_InverseViewMapEntryIterator0.hasNext());
      assertTrue(map_Entry1.equals((Object)map_Entry0));
      assertNotNull(map_Entry1);
      assertNotSame(map_Entry1, map_Entry0);
      
      // Undeclared exception!
      try { 
        treeBidiMap_InverseViewMapEntryIterator0.navigatePrevious();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer(61);
      assertNotNull(integer0);
      assertEquals(61, (int)integer0);
      
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertEquals(0, treeBidiMap_Inverse0.size());
      assertTrue(treeBidiMap_Inverse0.isEmpty());
      assertNotNull(treeBidiMap_Inverse0);
      
      boolean boolean0 = treeBidiMap_Inverse0.containsKey(integer0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertEquals(0, treeBidiMap_Inverse0.size());
      assertTrue(treeBidiMap_Inverse0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.DataElement treeBidiMap_DataElement0 = TreeBidiMap.DataElement.KEY;
      TreeBidiMap.ViewMapIterator treeBidiMap_ViewMapIterator0 = treeBidiMap0.new ViewMapIterator(treeBidiMap_DataElement0);
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertFalse(treeBidiMap_ViewMapIterator0.hasPrevious());
      assertFalse(treeBidiMap_ViewMapIterator0.hasNext());
      assertNotNull(treeBidiMap_ViewMapIterator0);
      
      // Undeclared exception!
      try { 
        treeBidiMap_ViewMapIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.ViewMapEntryIterator treeBidiMap_ViewMapEntryIterator0 = treeBidiMap0.new ViewMapEntryIterator();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertFalse(treeBidiMap_ViewMapEntryIterator0.hasNext());
      assertFalse(treeBidiMap_ViewMapEntryIterator0.hasPrevious());
      assertNotNull(treeBidiMap_ViewMapEntryIterator0);
      
      // Undeclared exception!
      try { 
        treeBidiMap_ViewMapEntryIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.DataElement treeBidiMap_DataElement0 = TreeBidiMap.DataElement.KEY;
      TreeBidiMap.ValueView treeBidiMap_ValueView0 = treeBidiMap0.new ValueView(treeBidiMap_DataElement0);
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap_ValueView0.size());
      assertNotNull(treeBidiMap_ValueView0);
      
      Iterator<Integer> iterator0 = treeBidiMap_ValueView0.iterator();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap_ValueView0.size());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.InverseEntryView treeBidiMap_InverseEntryView0 = treeBidiMap0.new InverseEntryView();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap_InverseEntryView0.size());
      assertNotNull(treeBidiMap_InverseEntryView0);
      
      Iterator<Map.Entry<Integer, Integer>> iterator0 = (Iterator<Map.Entry<Integer, Integer>>)treeBidiMap_InverseEntryView0.iterator();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap_InverseEntryView0.size());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap_Inverse0.isEmpty());
      assertEquals(0, treeBidiMap_Inverse0.size());
      assertNotNull(treeBidiMap_Inverse0);
      
      int int0 = treeBidiMap_Inverse0.size();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap_Inverse0.isEmpty());
      assertEquals(0, treeBidiMap_Inverse0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertTrue(treeBidiMap_Inverse0.isEmpty());
      assertEquals(0, treeBidiMap_Inverse0.size());
      assertNotNull(treeBidiMap_Inverse0);
      
      // Undeclared exception!
      try { 
        treeBidiMap_Inverse0.get((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // value
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap_Inverse0.size());
      assertTrue(treeBidiMap_Inverse0.isEmpty());
      assertNotNull(treeBidiMap_Inverse0);
      
      Set<Map.Entry<Integer, Integer>> set0 = (Set<Map.Entry<Integer, Integer>>)treeBidiMap_Inverse0.entrySet();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap_Inverse0.size());
      assertTrue(treeBidiMap_Inverse0.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer(4087);
      assertNotNull(integer0);
      assertEquals(4087, (int)integer0);
      
      Integer integer1 = hashMap0.put(integer0, integer0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer1);
      
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      Set<Integer> set0 = treeBidiMap0.values();
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertTrue(set0.contains(integer0));
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer((-5));
      assertNotNull(integer0);
      assertEquals((-5), (int)integer0);
      
      Integer integer1 = treeBidiMap0.putIfAbsent(integer0, integer0);
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertNull(integer1);
      
      int int0 = treeBidiMap0.size();
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = treeBidiMap0.get("{}");
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer(4087);
      assertNotNull(integer0);
      assertEquals(4087, (int)integer0);
      
      Integer integer1 = hashMap0.put(integer0, integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer1);
      
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      Set<Map.Entry<Integer, Integer>> set0 = (Set<Map.Entry<Integer, Integer>>)treeBidiMap0.entrySet();
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer((-5));
      assertNotNull(integer0);
      assertEquals((-5), (int)integer0);
      
      Integer integer1 = treeBidiMap0.putIfAbsent(integer0, integer0);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertNull(integer1);
      
      // Undeclared exception!
      try { 
        treeBidiMap0.removeValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer(4498);
      assertNotNull(integer0);
      assertEquals(4498, (int)integer0);
      
      Function<Integer, Integer> function0 = Function.identity();
      assertNotNull(function0);
      
      Integer integer1 = treeBidiMap0.computeIfAbsent(integer0, function0);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertNotNull(integer1);
      assertEquals(4498, (int)integer1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        treeBidiMap0.removeValue(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer((-5));
      assertNotNull(integer0);
      assertEquals((-5), (int)integer0);
      
      Integer integer1 = treeBidiMap0.putIfAbsent(integer0, integer0);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertNull(integer1);
      
      // Undeclared exception!
      try { 
        treeBidiMap0.remove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = treeBidiMap0.putIfAbsent(integer0, integer0);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertNull(integer1);
      
      TreeBidiMap.InverseViewMapEntryIterator treeBidiMap_InverseViewMapEntryIterator0 = treeBidiMap0.new InverseViewMapEntryIterator();
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertTrue(treeBidiMap_InverseViewMapEntryIterator0.hasNext());
      assertFalse(treeBidiMap_InverseViewMapEntryIterator0.hasPrevious());
      assertNotNull(treeBidiMap_InverseViewMapEntryIterator0);
      
      // Undeclared exception!
      try { 
        treeBidiMap0.remove((Object) treeBidiMap_InverseViewMapEntryIterator0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer(3740);
      assertNotNull(integer0);
      assertEquals(3740, (int)integer0);
      
      Integer integer1 = treeBidiMap0.put(integer0, integer0);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertNull(integer1);
      
      Integer integer2 = new Integer((-2));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-2), (int)integer2);
      
      Integer integer3 = new Integer(0);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      
      Integer integer4 = treeBidiMap0.putIfAbsent(integer3, integer2);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(2, treeBidiMap0.size());
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNull(integer4);
      
      // Undeclared exception!
      try { 
        treeBidiMap0.putAll(treeBidiMap0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      // Undeclared exception!
      try { 
        treeBidiMap0.putAll((Map<? extends Integer, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      // Undeclared exception!
      try { 
        treeBidiMap0.put((Integer) null, (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      // Undeclared exception!
      try { 
        treeBidiMap0.previousKey((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      // Undeclared exception!
      try { 
        treeBidiMap0.nextKey((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      // Undeclared exception!
      try { 
        treeBidiMap0.getKey((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // value
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = Integer.valueOf(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = treeBidiMap0.put(integer0, integer0);
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertNull(integer1);
      
      // Undeclared exception!
      try { 
        treeBidiMap0.getKey("{0=0}");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap_Inverse0.size());
      assertTrue(treeBidiMap_Inverse0.isEmpty());
      assertNotNull(treeBidiMap_Inverse0);
      
      // Undeclared exception!
      try { 
        treeBidiMap0.getKey(treeBidiMap_Inverse0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // value must be Comparable
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      // Undeclared exception!
      try { 
        treeBidiMap0.get((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = treeBidiMap0.putIfAbsent(integer0, integer0);
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertNull(integer1);
      
      // Undeclared exception!
      try { 
        treeBidiMap0.get("{0=0}");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      // Undeclared exception!
      try { 
        treeBidiMap0.get(treeBidiMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // key must be Comparable
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      // Undeclared exception!
      try { 
        treeBidiMap0.containsValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // value
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = Integer.getInteger("setValue() is not supported", 5);
      assertNotNull(integer0);
      assertEquals(5, (int)integer0);
      
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer1 = treeBidiMap0.merge(integer0, integer0, biFunction0);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertNotNull(integer1);
      assertEquals(5, (int)integer1);
      
      // Undeclared exception!
      try { 
        treeBidiMap0.containsValue("setValue() is not supported");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        treeBidiMap0.containsValue(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // value must be Comparable
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      // Undeclared exception!
      try { 
        treeBidiMap0.containsKey((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap_Inverse0.isEmpty());
      assertEquals(0, treeBidiMap_Inverse0.size());
      assertNotNull(treeBidiMap_Inverse0);
      
      // Undeclared exception!
      try { 
        treeBidiMap0.containsKey(treeBidiMap_Inverse0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // key must be Comparable
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = null;
      try {
        treeBidiMap0 = new TreeBidiMap<Integer, Integer>((Map<? extends Integer, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertTrue(treeBidiMap_Inverse0.isEmpty());
      assertEquals(0, treeBidiMap_Inverse0.size());
      assertNotNull(treeBidiMap_Inverse0);
      
      // Undeclared exception!
      try { 
        treeBidiMap_Inverse0.lastKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Map is empty
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap$Inverse", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer(3740);
      assertNotNull(integer0);
      assertEquals(3740, (int)integer0);
      
      Integer integer1 = treeBidiMap0.put(integer0, integer0);
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertNull(integer1);
      
      Integer integer2 = new Integer(2);
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(2, (int)integer2);
      
      Integer integer3 = new Integer(0);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      
      Integer integer4 = treeBidiMap0.putIfAbsent(integer3, integer2);
      assertEquals(2, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNull(integer4);
      
      BiFunction<Integer, Object, Integer> biFunction0 = (BiFunction<Integer, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer5 = treeBidiMap0.merge(integer2, integer3, biFunction0);
      assertEquals(3, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      assertEquals(0, (int)integer5);
      
      Integer integer6 = treeBidiMap0.put(integer2, integer2);
      assertEquals(2, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer5));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertNotNull(integer6);
      assertEquals(0, (int)integer6);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      Set<Map.Entry<Integer, Integer>> set0 = (Set<Map.Entry<Integer, Integer>>)treeBidiMap0.entrySet();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Set<Map.Entry<Integer, Integer>> set1 = (Set<Map.Entry<Integer, Integer>>)treeBidiMap0.entrySet();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertNotNull(set1);
      assertSame(set1, set0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer(3740);
      assertNotNull(integer0);
      assertEquals(3740, (int)integer0);
      
      Integer integer1 = treeBidiMap0.put(integer0, integer0);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertNull(integer1);
      
      Integer integer2 = treeBidiMap0.getKey(integer0);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertNotNull(integer2);
      assertEquals(3740, (int)integer2);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = treeBidiMap0.getKey("{}");
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer(3740);
      assertNotNull(integer0);
      assertEquals(3740, (int)integer0);
      
      Integer integer1 = treeBidiMap0.put(integer0, integer0);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertNull(integer1);
      
      treeBidiMap0.putAll(treeBidiMap0);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer(1744);
      assertNotNull(integer0);
      assertEquals(1744, (int)integer0);
      
      BiFunction<Integer, Object, Integer> biFunction0 = (BiFunction<Integer, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer1 = treeBidiMap0.merge(integer0, integer0, biFunction0);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertNotNull(integer1);
      assertEquals(1744, (int)integer1);
      
      boolean boolean0 = treeBidiMap0.containsKey(integer0);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = treeBidiMap0.putIfAbsent(integer0, integer0);
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertNull(integer1);
      
      boolean boolean0 = treeBidiMap0.isEmpty();
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      boolean boolean0 = treeBidiMap0.isEmpty();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      int int0 = treeBidiMap0.size();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      TreeBidiMap.Node<Integer, Integer> treeBidiMap_Node0 = new TreeBidiMap.Node<Integer, Integer>(integer0, integer0);
      assertNotNull(treeBidiMap_Node0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(treeBidiMap_Node0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap_Inverse0.isEmpty());
      assertEquals(0, treeBidiMap_Inverse0.size());
      assertNotNull(treeBidiMap_Inverse0);
      
      OrderedMapIterator<Integer, Integer> orderedMapIterator0 = treeBidiMap_Inverse0.mapIterator();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap_Inverse0.isEmpty());
      assertEquals(0, treeBidiMap_Inverse0.size());
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator0.hasNext());
      assertNotNull(orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      OrderedBidiMap<Integer, Integer> orderedBidiMap0 = treeBidiMap0.inverseBidiMap();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertTrue(orderedBidiMap0.isEmpty());
      assertTrue(orderedBidiMap0.isEmpty());
      assertEquals(0, orderedBidiMap0.size());
      assertEquals(0, orderedBidiMap0.size());
      assertNotNull(orderedBidiMap0);
      
      TreeBidiMap<Integer, Integer> treeBidiMap1 = new TreeBidiMap<Integer, Integer>(orderedBidiMap0);
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertTrue(orderedBidiMap0.isEmpty());
      assertTrue(orderedBidiMap0.isEmpty());
      assertEquals(0, orderedBidiMap0.size());
      assertEquals(0, orderedBidiMap0.size());
      assertTrue(treeBidiMap1.isEmpty());
      assertEquals(0, treeBidiMap1.size());
      assertTrue(treeBidiMap1.equals((Object)treeBidiMap0));
      assertNotNull(treeBidiMap1);
      
      TreeBidiMap<Integer, Integer> treeBidiMap2 = new TreeBidiMap<Integer, Integer>(orderedBidiMap0);
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertTrue(orderedBidiMap0.isEmpty());
      assertTrue(orderedBidiMap0.isEmpty());
      assertEquals(0, orderedBidiMap0.size());
      assertEquals(0, orderedBidiMap0.size());
      assertTrue(treeBidiMap2.isEmpty());
      assertEquals(0, treeBidiMap2.size());
      assertTrue(treeBidiMap0.equals((Object)treeBidiMap1));
      assertTrue(treeBidiMap2.equals((Object)treeBidiMap1));
      assertTrue(treeBidiMap2.equals((Object)treeBidiMap0));
      assertNotNull(treeBidiMap2);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertEquals(0, treeBidiMap_Inverse0.size());
      assertTrue(treeBidiMap_Inverse0.isEmpty());
      assertNotNull(treeBidiMap_Inverse0);
      
      Set<Integer> set0 = treeBidiMap_Inverse0.values();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertEquals(0, treeBidiMap_Inverse0.size());
      assertTrue(treeBidiMap_Inverse0.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Set<Integer> set1 = treeBidiMap_Inverse0.values();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertEquals(0, treeBidiMap_Inverse0.size());
      assertTrue(treeBidiMap_Inverse0.isEmpty());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertNotNull(set1);
      assertSame(set1, set0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertEquals(0, treeBidiMap_Inverse0.size());
      assertTrue(treeBidiMap_Inverse0.isEmpty());
      assertNotNull(treeBidiMap_Inverse0);
      
      Set<Integer> set0 = treeBidiMap_Inverse0.keySet();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertEquals(0, treeBidiMap_Inverse0.size());
      assertTrue(treeBidiMap_Inverse0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Set<Integer> set1 = treeBidiMap_Inverse0.keySet();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertEquals(0, treeBidiMap_Inverse0.size());
      assertTrue(treeBidiMap_Inverse0.isEmpty());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertNotNull(set1);
      assertSame(set1, set0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertEquals(0, treeBidiMap_Inverse0.size());
      assertTrue(treeBidiMap_Inverse0.isEmpty());
      assertNotNull(treeBidiMap_Inverse0);
      
      // Undeclared exception!
      try { 
        treeBidiMap_Inverse0.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Map is empty
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap$Inverse", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer((-1443));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1443), (int)integer1);
      
      Integer integer2 = Integer.getInteger("U22tXd`RI}(", integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-1443), (int)integer2);
      
      TreeBidiMap.Node<Integer, Integer> treeBidiMap_Node0 = new TreeBidiMap.Node<Integer, Integer>(integer2, integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(treeBidiMap_Node0);
      
      TreeBidiMap.Node<Integer, Integer> treeBidiMap_Node1 = new TreeBidiMap.Node<Integer, Integer>(integer1, integer0);
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(treeBidiMap_Node1.equals((Object)treeBidiMap_Node0));
      assertNotNull(treeBidiMap_Node1);
      
      boolean boolean0 = treeBidiMap_Node1.equals(treeBidiMap_Node0);
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(treeBidiMap_Node0.equals((Object)treeBidiMap_Node1));
      assertFalse(treeBidiMap_Node1.equals((Object)treeBidiMap_Node0));
      assertNotSame(treeBidiMap_Node0, treeBidiMap_Node1);
      assertNotSame(treeBidiMap_Node1, treeBidiMap_Node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Integer integer0 = new Integer(6);
      assertNotNull(integer0);
      assertEquals(6, (int)integer0);
      
      Integer integer1 = new Integer(1233);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1233, (int)integer1);
      
      TreeBidiMap.Node<Integer, Integer> treeBidiMap_Node0 = new TreeBidiMap.Node<Integer, Integer>(integer0, integer1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(treeBidiMap_Node0);
      
      TreeBidiMap.Node<Integer, Integer> treeBidiMap_Node1 = new TreeBidiMap.Node<Integer, Integer>(integer1, integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(treeBidiMap_Node1.equals((Object)treeBidiMap_Node0));
      assertNotNull(treeBidiMap_Node1);
      
      boolean boolean0 = treeBidiMap_Node0.equals(treeBidiMap_Node1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(treeBidiMap_Node0.equals((Object)treeBidiMap_Node1));
      assertFalse(treeBidiMap_Node1.equals((Object)treeBidiMap_Node0));
      assertNotSame(treeBidiMap_Node0, treeBidiMap_Node1);
      assertNotSame(treeBidiMap_Node1, treeBidiMap_Node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      TreeBidiMap.Node<Integer, Integer> treeBidiMap_Node0 = new TreeBidiMap.Node<Integer, Integer>(integer0, integer0);
      assertNotNull(treeBidiMap_Node0);
      
      boolean boolean0 = treeBidiMap_Node0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      TreeBidiMap.Node<Integer, Integer> treeBidiMap_Node0 = new TreeBidiMap.Node<Integer, Integer>(integer0, integer0);
      assertNotNull(treeBidiMap_Node0);
      
      boolean boolean0 = treeBidiMap_Node0.equals(treeBidiMap_Node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      TreeBidiMap.Node<Integer, Integer> treeBidiMap_Node0 = new TreeBidiMap.Node<Integer, Integer>(integer0, integer0);
      assertNotNull(treeBidiMap_Node0);
      
      TreeBidiMap.Node<Integer, Integer> treeBidiMap_Node1 = new TreeBidiMap.Node<Integer, Integer>(integer0, integer0);
      assertTrue(treeBidiMap_Node1.equals((Object)treeBidiMap_Node0));
      assertNotNull(treeBidiMap_Node1);
      
      boolean boolean0 = treeBidiMap_Node1.equals(treeBidiMap_Node0);
      assertTrue(treeBidiMap_Node0.equals((Object)treeBidiMap_Node1));
      assertTrue(treeBidiMap_Node1.equals((Object)treeBidiMap_Node0));
      assertNotSame(treeBidiMap_Node0, treeBidiMap_Node1);
      assertNotSame(treeBidiMap_Node1, treeBidiMap_Node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.DataElement treeBidiMap_DataElement0 = TreeBidiMap.DataElement.KEY;
      TreeBidiMap.InverseViewMapIterator treeBidiMap_InverseViewMapIterator0 = treeBidiMap0.new InverseViewMapIterator(treeBidiMap_DataElement0);
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertFalse(treeBidiMap_InverseViewMapIterator0.hasPrevious());
      assertFalse(treeBidiMap_InverseViewMapIterator0.hasNext());
      assertNotNull(treeBidiMap_InverseViewMapIterator0);
      
      // Undeclared exception!
      try { 
        treeBidiMap_InverseViewMapIterator0.getValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator getValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.DataElement treeBidiMap_DataElement0 = TreeBidiMap.DataElement.VALUE;
      TreeBidiMap.InverseViewMapIterator treeBidiMap_InverseViewMapIterator0 = treeBidiMap0.new InverseViewMapIterator(treeBidiMap_DataElement0);
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertFalse(treeBidiMap_InverseViewMapIterator0.hasNext());
      assertFalse(treeBidiMap_InverseViewMapIterator0.hasPrevious());
      assertNotNull(treeBidiMap_InverseViewMapIterator0);
      
      // Undeclared exception!
      try { 
        treeBidiMap_InverseViewMapIterator0.getKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator getKey() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.DataElement treeBidiMap_DataElement0 = TreeBidiMap.DataElement.KEY;
      TreeBidiMap.ViewMapIterator treeBidiMap_ViewMapIterator0 = treeBidiMap0.new ViewMapIterator(treeBidiMap_DataElement0);
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertFalse(treeBidiMap_ViewMapIterator0.hasNext());
      assertFalse(treeBidiMap_ViewMapIterator0.hasPrevious());
      assertNotNull(treeBidiMap_ViewMapIterator0);
      
      // Undeclared exception!
      try { 
        treeBidiMap_ViewMapIterator0.getValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator getValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.DataElement treeBidiMap_DataElement0 = TreeBidiMap.DataElement.KEY;
      TreeBidiMap.ViewMapIterator treeBidiMap_ViewMapIterator0 = treeBidiMap0.new ViewMapIterator(treeBidiMap_DataElement0);
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertFalse(treeBidiMap_ViewMapIterator0.hasPrevious());
      assertFalse(treeBidiMap_ViewMapIterator0.hasNext());
      assertNotNull(treeBidiMap_ViewMapIterator0);
      
      // Undeclared exception!
      try { 
        treeBidiMap_ViewMapIterator0.getKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator getKey() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.InverseViewMapEntryIterator treeBidiMap_InverseViewMapEntryIterator0 = treeBidiMap0.new InverseViewMapEntryIterator();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertFalse(treeBidiMap_InverseViewMapEntryIterator0.hasPrevious());
      assertFalse(treeBidiMap_InverseViewMapEntryIterator0.hasNext());
      assertNotNull(treeBidiMap_InverseViewMapEntryIterator0);
      
      // Undeclared exception!
      try { 
        treeBidiMap_InverseViewMapEntryIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = treeBidiMap0.putIfAbsent(integer0, integer0);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertNull(integer1);
      
      TreeBidiMap.InverseViewMapEntryIterator treeBidiMap_InverseViewMapEntryIterator0 = treeBidiMap0.new InverseViewMapEntryIterator();
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertTrue(treeBidiMap_InverseViewMapEntryIterator0.hasNext());
      assertFalse(treeBidiMap_InverseViewMapEntryIterator0.hasPrevious());
      assertNotNull(treeBidiMap_InverseViewMapEntryIterator0);
      
      Map.Entry<Integer, Integer> map_Entry0 = treeBidiMap_InverseViewMapEntryIterator0.next();
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap_InverseViewMapEntryIterator0.hasNext());
      assertTrue(treeBidiMap_InverseViewMapEntryIterator0.hasPrevious());
      assertNotNull(map_Entry0);
      
      boolean boolean0 = treeBidiMap_InverseViewMapEntryIterator0.hasPrevious();
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap_InverseViewMapEntryIterator0.hasNext());
      assertTrue(treeBidiMap_InverseViewMapEntryIterator0.hasPrevious());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = treeBidiMap0.putIfAbsent(integer0, integer0);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertNull(integer1);
      
      TreeBidiMap.InverseViewMapEntryIterator treeBidiMap_InverseViewMapEntryIterator0 = treeBidiMap0.new InverseViewMapEntryIterator();
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertTrue(treeBidiMap_InverseViewMapEntryIterator0.hasNext());
      assertFalse(treeBidiMap_InverseViewMapEntryIterator0.hasPrevious());
      assertNotNull(treeBidiMap_InverseViewMapEntryIterator0);
      
      Map.Entry<Integer, Integer> map_Entry0 = treeBidiMap_InverseViewMapEntryIterator0.next();
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertTrue(treeBidiMap_InverseViewMapEntryIterator0.hasPrevious());
      assertFalse(treeBidiMap_InverseViewMapEntryIterator0.hasNext());
      assertNotNull(map_Entry0);
      
      TreeBidiMap.Node<Integer, Integer> treeBidiMap_Node0 = treeBidiMap_InverseViewMapEntryIterator0.navigatePrevious();
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertTrue(treeBidiMap_InverseViewMapEntryIterator0.hasNext());
      assertFalse(treeBidiMap_InverseViewMapEntryIterator0.hasPrevious());
      assertNotNull(treeBidiMap_Node0);
      
      boolean boolean0 = treeBidiMap_InverseViewMapEntryIterator0.hasPrevious();
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertTrue(treeBidiMap_InverseViewMapEntryIterator0.hasNext());
      assertFalse(treeBidiMap_InverseViewMapEntryIterator0.hasPrevious());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer((-6));
      assertNotNull(integer0);
      assertEquals((-6), (int)integer0);
      
      Integer integer1 = treeBidiMap0.putIfAbsent(integer0, integer0);
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertNull(integer1);
      
      TreeBidiMap.Node<Integer, Integer> treeBidiMap_Node0 = new TreeBidiMap.Node<Integer, Integer>(integer0, (Integer) null);
      assertNotNull(treeBidiMap_Node0);
      
      TreeBidiMap.InverseEntryView treeBidiMap_InverseEntryView0 = treeBidiMap0.new InverseEntryView();
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap_InverseEntryView0.size());
      assertNotNull(treeBidiMap_InverseEntryView0);
      
      boolean boolean0 = treeBidiMap_InverseEntryView0.remove(treeBidiMap_Node0);
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap_InverseEntryView0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer((-6));
      assertNotNull(integer0);
      assertEquals((-6), (int)integer0);
      
      Integer integer1 = treeBidiMap0.putIfAbsent(integer0, integer0);
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertNull(integer1);
      
      TreeBidiMap.InverseViewMapEntryIterator treeBidiMap_InverseViewMapEntryIterator0 = treeBidiMap0.new InverseViewMapEntryIterator();
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertFalse(treeBidiMap_InverseViewMapEntryIterator0.hasPrevious());
      assertTrue(treeBidiMap_InverseViewMapEntryIterator0.hasNext());
      assertNotNull(treeBidiMap_InverseViewMapEntryIterator0);
      
      Map.Entry<Integer, Integer> map_Entry0 = treeBidiMap_InverseViewMapEntryIterator0.next();
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertFalse(treeBidiMap_InverseViewMapEntryIterator0.hasNext());
      assertTrue(treeBidiMap_InverseViewMapEntryIterator0.hasPrevious());
      assertNotNull(map_Entry0);
      
      TreeBidiMap.InverseEntryView treeBidiMap_InverseEntryView0 = treeBidiMap0.new InverseEntryView();
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap_InverseEntryView0.size());
      assertNotNull(treeBidiMap_InverseEntryView0);
      
      treeBidiMap_InverseEntryView0.clear();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertEquals(0, treeBidiMap_InverseEntryView0.size());
      
      boolean boolean0 = treeBidiMap_InverseEntryView0.remove(map_Entry0);
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertFalse(treeBidiMap_InverseViewMapEntryIterator0.hasNext());
      assertTrue(treeBidiMap_InverseViewMapEntryIterator0.hasPrevious());
      assertEquals(0, treeBidiMap_InverseEntryView0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.InverseEntryView treeBidiMap_InverseEntryView0 = treeBidiMap0.new InverseEntryView();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertEquals(0, treeBidiMap_InverseEntryView0.size());
      assertNotNull(treeBidiMap_InverseEntryView0);
      
      boolean boolean0 = treeBidiMap_InverseEntryView0.remove(treeBidiMap0);
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertEquals(0, treeBidiMap_InverseEntryView0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer((-6));
      assertNotNull(integer0);
      assertEquals((-6), (int)integer0);
      
      Integer integer1 = treeBidiMap0.putIfAbsent(integer0, integer0);
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertNull(integer1);
      
      TreeBidiMap.InverseViewMapEntryIterator treeBidiMap_InverseViewMapEntryIterator0 = treeBidiMap0.new InverseViewMapEntryIterator();
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertFalse(treeBidiMap_InverseViewMapEntryIterator0.hasPrevious());
      assertTrue(treeBidiMap_InverseViewMapEntryIterator0.hasNext());
      assertNotNull(treeBidiMap_InverseViewMapEntryIterator0);
      
      Map.Entry<Integer, Integer> map_Entry0 = treeBidiMap_InverseViewMapEntryIterator0.next();
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertFalse(treeBidiMap_InverseViewMapEntryIterator0.hasNext());
      assertTrue(treeBidiMap_InverseViewMapEntryIterator0.hasPrevious());
      assertNotNull(map_Entry0);
      
      TreeBidiMap.InverseEntryView treeBidiMap_InverseEntryView0 = treeBidiMap0.new InverseEntryView();
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap_InverseEntryView0.size());
      assertNotNull(treeBidiMap_InverseEntryView0);
      
      boolean boolean0 = treeBidiMap_InverseEntryView0.remove(map_Entry0);
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertFalse(treeBidiMap_InverseViewMapEntryIterator0.hasNext());
      assertTrue(treeBidiMap_InverseViewMapEntryIterator0.hasPrevious());
      assertEquals(0, treeBidiMap_InverseEntryView0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = treeBidiMap0.putIfAbsent(integer0, integer0);
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertNull(integer1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, (Integer) null);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      TreeBidiMap.InverseEntryView treeBidiMap_InverseEntryView0 = treeBidiMap0.new InverseEntryView();
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap_InverseEntryView0.size());
      assertNotNull(treeBidiMap_InverseEntryView0);
      
      boolean boolean0 = treeBidiMap_InverseEntryView0.contains(abstractMap_SimpleImmutableEntry0);
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap_InverseEntryView0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer0, integer0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      TreeBidiMap.InverseEntryView treeBidiMap_InverseEntryView0 = treeBidiMap0.new InverseEntryView();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap_InverseEntryView0.size());
      assertNotNull(treeBidiMap_InverseEntryView0);
      
      boolean boolean0 = treeBidiMap_InverseEntryView0.contains(abstractMap_SimpleEntry0);
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap_InverseEntryView0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = treeBidiMap0.putIfAbsent(integer0, integer0);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertNull(integer1);
      
      TreeBidiMap.InverseEntryView treeBidiMap_InverseEntryView0 = treeBidiMap0.new InverseEntryView();
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertEquals(1, treeBidiMap_InverseEntryView0.size());
      assertNotNull(treeBidiMap_InverseEntryView0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>(treeBidiMap_InverseEntryView0);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertEquals(1, treeBidiMap_InverseEntryView0.size());
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(0));
      assertNotNull(linkedList0);
      
      boolean boolean0 = treeBidiMap_InverseEntryView0.containsAll(linkedList0);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertEquals(1, treeBidiMap_InverseEntryView0.size());
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = treeBidiMap0.putIfAbsent(integer0, integer0);
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertNull(integer1);
      
      TreeBidiMap.InverseViewMapEntryIterator treeBidiMap_InverseViewMapEntryIterator0 = treeBidiMap0.new InverseViewMapEntryIterator();
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertTrue(treeBidiMap_InverseViewMapEntryIterator0.hasNext());
      assertFalse(treeBidiMap_InverseViewMapEntryIterator0.hasPrevious());
      assertNotNull(treeBidiMap_InverseViewMapEntryIterator0);
      
      Map.Entry<Integer, Integer> map_Entry0 = treeBidiMap_InverseViewMapEntryIterator0.next();
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertFalse(treeBidiMap_InverseViewMapEntryIterator0.hasNext());
      assertTrue(treeBidiMap_InverseViewMapEntryIterator0.hasPrevious());
      assertNotNull(map_Entry0);
      
      TreeBidiMap.EntryView treeBidiMap_EntryView0 = treeBidiMap0.new EntryView();
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap_EntryView0.size());
      assertNotNull(treeBidiMap_EntryView0);
      
      boolean boolean0 = treeBidiMap_EntryView0.remove(map_Entry0);
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertFalse(treeBidiMap_InverseViewMapEntryIterator0.hasNext());
      assertTrue(treeBidiMap_InverseViewMapEntryIterator0.hasPrevious());
      assertEquals(0, treeBidiMap_EntryView0.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        treeBidiMap_InverseViewMapEntryIterator0.navigatePrevious();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = treeBidiMap0.putIfAbsent(integer0, integer0);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertNull(integer1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, (Integer) null);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      TreeBidiMap.EntryView treeBidiMap_EntryView0 = treeBidiMap0.new EntryView();
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertEquals(1, treeBidiMap_EntryView0.size());
      assertNotNull(treeBidiMap_EntryView0);
      
      boolean boolean0 = treeBidiMap_EntryView0.remove(abstractMap_SimpleImmutableEntry0);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertEquals(1, treeBidiMap_EntryView0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.EntryView treeBidiMap_EntryView0 = treeBidiMap0.new EntryView();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertEquals(0, treeBidiMap_EntryView0.size());
      assertNotNull(treeBidiMap_EntryView0);
      
      boolean boolean0 = treeBidiMap_EntryView0.remove(treeBidiMap0);
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertEquals(0, treeBidiMap_EntryView0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) null, (Integer) null);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      TreeBidiMap.EntryView treeBidiMap_EntryView0 = treeBidiMap0.new EntryView();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap_EntryView0.size());
      assertNotNull(treeBidiMap_EntryView0);
      
      boolean boolean0 = treeBidiMap_EntryView0.remove(abstractMap_SimpleImmutableEntry0);
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap_EntryView0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = treeBidiMap0.putIfAbsent(integer0, integer0);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertNull(integer1);
      
      TreeBidiMap.InverseViewMapEntryIterator treeBidiMap_InverseViewMapEntryIterator0 = treeBidiMap0.new InverseViewMapEntryIterator();
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertTrue(treeBidiMap_InverseViewMapEntryIterator0.hasNext());
      assertFalse(treeBidiMap_InverseViewMapEntryIterator0.hasPrevious());
      assertNotNull(treeBidiMap_InverseViewMapEntryIterator0);
      
      Map.Entry<Integer, Integer> map_Entry0 = treeBidiMap_InverseViewMapEntryIterator0.next();
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertTrue(treeBidiMap_InverseViewMapEntryIterator0.hasPrevious());
      assertFalse(treeBidiMap_InverseViewMapEntryIterator0.hasNext());
      assertNotNull(map_Entry0);
      
      TreeBidiMap.EntryView treeBidiMap_EntryView0 = treeBidiMap0.new EntryView();
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertEquals(1, treeBidiMap_EntryView0.size());
      assertNotNull(treeBidiMap_EntryView0);
      
      boolean boolean0 = treeBidiMap_EntryView0.contains(map_Entry0);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertTrue(treeBidiMap_InverseViewMapEntryIterator0.hasPrevious());
      assertFalse(treeBidiMap_InverseViewMapEntryIterator0.hasNext());
      assertEquals(1, treeBidiMap_EntryView0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.EntryView treeBidiMap_EntryView0 = treeBidiMap0.new EntryView();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertEquals(0, treeBidiMap_EntryView0.size());
      assertNotNull(treeBidiMap_EntryView0);
      
      boolean boolean0 = treeBidiMap_EntryView0.contains(treeBidiMap0);
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertEquals(0, treeBidiMap_EntryView0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      TreeBidiMap.Node<Integer, Integer> treeBidiMap_Node0 = new TreeBidiMap.Node<Integer, Integer>(integer0, integer0);
      assertNotNull(treeBidiMap_Node0);
      
      TreeBidiMap.EntryView treeBidiMap_EntryView0 = treeBidiMap0.new EntryView();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap_EntryView0.size());
      assertNotNull(treeBidiMap_EntryView0);
      
      boolean boolean0 = treeBidiMap_EntryView0.contains(treeBidiMap_Node0);
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap_EntryView0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.DataElement treeBidiMap_DataElement0 = TreeBidiMap.DataElement.KEY;
      TreeBidiMap.ValueView treeBidiMap_ValueView0 = treeBidiMap0.new ValueView(treeBidiMap_DataElement0);
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertEquals(0, treeBidiMap_ValueView0.size());
      assertNotNull(treeBidiMap_ValueView0);
      
      boolean boolean0 = treeBidiMap_ValueView0.remove(treeBidiMap_DataElement0);
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertEquals(0, treeBidiMap_ValueView0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.DataElement treeBidiMap_DataElement0 = TreeBidiMap.DataElement.KEY;
      TreeBidiMap.ValueView treeBidiMap_ValueView0 = treeBidiMap0.new ValueView(treeBidiMap_DataElement0);
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap_ValueView0.size());
      assertNotNull(treeBidiMap_ValueView0);
      
      boolean boolean0 = treeBidiMap_ValueView0.contains(treeBidiMap_DataElement0);
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap_ValueView0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.DataElement treeBidiMap_DataElement0 = TreeBidiMap.DataElement.KEY;
      TreeBidiMap.KeyView treeBidiMap_KeyView0 = treeBidiMap0.new KeyView(treeBidiMap_DataElement0);
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertEquals(0, treeBidiMap_KeyView0.size());
      assertNotNull(treeBidiMap_KeyView0);
      
      boolean boolean0 = treeBidiMap_KeyView0.remove(treeBidiMap_DataElement0);
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertEquals(0, treeBidiMap_KeyView0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.DataElement treeBidiMap_DataElement0 = TreeBidiMap.DataElement.VALUE;
      Integer integer0 = Integer.valueOf(5);
      assertNotNull(integer0);
      assertEquals(5, (int)integer0);
      
      Integer integer1 = treeBidiMap0.putIfAbsent(integer0, integer0);
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertNull(integer1);
      
      TreeBidiMap.KeyView treeBidiMap_KeyView0 = treeBidiMap0.new KeyView(treeBidiMap_DataElement0);
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap_KeyView0.size());
      assertNotNull(treeBidiMap_KeyView0);
      
      boolean boolean0 = treeBidiMap_KeyView0.contains(integer0);
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap_KeyView0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      TreeBidiMap.DataElement treeBidiMap_DataElement0 = TreeBidiMap.DataElement.KEY;
      TreeBidiMap.KeyView treeBidiMap_KeyView0 = treeBidiMap0.new KeyView(treeBidiMap_DataElement0);
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertEquals(0, treeBidiMap_KeyView0.size());
      assertNotNull(treeBidiMap_KeyView0);
      
      boolean boolean0 = treeBidiMap_KeyView0.contains(integer0);
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertEquals(0, treeBidiMap_KeyView0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer(3740);
      assertNotNull(integer0);
      assertEquals(3740, (int)integer0);
      
      Integer integer1 = treeBidiMap0.put(integer0, integer0);
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertNull(integer1);
      
      Integer integer2 = new Integer((-2));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-2), (int)integer2);
      
      Integer integer3 = treeBidiMap0.putIfAbsent(integer2, integer2);
      assertEquals(2, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertFalse(integer2.equals((Object)integer0));
      assertNull(integer3);
      
      String string0 = treeBidiMap0.toString();
      assertEquals(2, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertNotNull(string0);
      assertEquals("{-2=-2, 3740=3740}", string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      TreeBidiMap<Integer, Integer> treeBidiMap1 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap1.isEmpty());
      assertEquals(0, treeBidiMap1.size());
      assertTrue(treeBidiMap1.equals((Object)treeBidiMap0));
      assertNotNull(treeBidiMap1);
      
      Integer integer1 = treeBidiMap0.put(integer0, integer0);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.equals((Object)treeBidiMap1));
      assertNull(integer1);
      assertNotSame(treeBidiMap0, treeBidiMap1);
      
      boolean boolean0 = treeBidiMap1.equals(treeBidiMap0);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertTrue(treeBidiMap1.isEmpty());
      assertEquals(0, treeBidiMap1.size());
      assertFalse(treeBidiMap0.equals((Object)treeBidiMap1));
      assertFalse(treeBidiMap1.equals((Object)treeBidiMap0));
      assertNotSame(treeBidiMap0, treeBidiMap1);
      assertNotSame(treeBidiMap1, treeBidiMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(3740);
      treeBidiMap0.put(integer0, integer0);
      Integer integer1 = new Integer(2);
      Integer integer2 = new Integer(0);
      treeBidiMap0.putIfAbsent(integer2, integer1);
      BiFunction<Integer, Object, Integer> biFunction0 = (BiFunction<Integer, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      treeBidiMap0.merge(integer1, integer2, biFunction0);
      Integer integer3 = new Integer(4);
      treeBidiMap0.put(integer3, integer3);
      treeBidiMap0.firstKey();
      assertEquals(4, treeBidiMap0.size());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(3744);
      Integer integer1 = new Integer(2);
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      treeBidiMap_Inverse0.put(integer0, integer1);
      treeBidiMap_Inverse0.putAll(treeBidiMap0);
      TreeBidiMap.InverseViewMapEntryIterator treeBidiMap_InverseViewMapEntryIterator0 = treeBidiMap0.new InverseViewMapEntryIterator();
      treeBidiMap_InverseViewMapEntryIterator0.next();
      treeBidiMap_InverseViewMapEntryIterator0.navigatePrevious();
      assertFalse(treeBidiMap0.isEmpty());
      assertFalse(treeBidiMap_InverseViewMapEntryIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(868);
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      Integer integer1 = new Integer(0);
      treeBidiMap_Inverse0.put(integer0, integer1);
      treeBidiMap_Inverse0.putAll(treeBidiMap0);
      TreeBidiMap.InverseViewMapEntryIterator treeBidiMap_InverseViewMapEntryIterator0 = treeBidiMap0.new InverseViewMapEntryIterator();
      treeBidiMap_InverseViewMapEntryIterator0.next();
      treeBidiMap_InverseViewMapEntryIterator0.next();
      treeBidiMap_InverseViewMapEntryIterator0.navigatePrevious();
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(2, treeBidiMap0.size());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      OrderedBidiMap<Integer, Integer> orderedBidiMap0 = treeBidiMap0.inverseBidiMap();
      OrderedBidiMap<Integer, Integer> orderedBidiMap1 = treeBidiMap0.inverseBidiMap();
      assertSame(orderedBidiMap1, orderedBidiMap0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      treeBidiMap0.mapIterator();
      assertTrue(treeBidiMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      Set<Integer> set0 = treeBidiMap0.values();
      Set<Integer> set1 = treeBidiMap0.values();
      assertSame(set1, set0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(1);
      Integer integer1 = treeBidiMap0.previousKey(integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(874);
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      Integer integer1 = new Integer(0);
      treeBidiMap_Inverse0.put(integer0, integer1);
      treeBidiMap_Inverse0.putAll(treeBidiMap0);
      treeBidiMap0.previousKey(integer0);
      assertFalse(treeBidiMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(1994);
      Integer integer1 = treeBidiMap0.nextKey(integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(3744);
      Integer integer1 = new Integer((-33));
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      treeBidiMap_Inverse0.put(integer0, integer1);
      treeBidiMap_Inverse0.putAll(treeBidiMap0);
      treeBidiMap0.nextKey(integer1);
      assertFalse(treeBidiMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        treeBidiMap0.lastKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Map is empty
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        treeBidiMap0.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Map is empty
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      Integer integer0 = new Integer((-2742));
      treeBidiMap0.put(integer0, integer0);
      boolean boolean0 = treeBidiMap0.containsValue(integer0);
      assertEquals(1, treeBidiMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(4);
      boolean boolean0 = treeBidiMap0.containsValue(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      Integer integer0 = new Integer((-3));
      treeBidiMap_Inverse0.put(integer0, integer0);
      Integer integer1 = new Integer((-3));
      boolean boolean0 = treeBidiMap_Inverse0.containsValue(integer1);
      assertFalse(treeBidiMap_Inverse0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = treeBidiMap0.containsKey(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      Integer integer0 = new Integer(1);
      treeBidiMap_Inverse0.put(integer0, integer0);
      treeBidiMap0.mapIterator();
      assertEquals(1, treeBidiMap0.size());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      TreeBidiMap.ViewMapEntryIterator treeBidiMap_ViewMapEntryIterator0 = treeBidiMap0.new ViewMapEntryIterator();
      // Undeclared exception!
      try { 
        treeBidiMap_ViewMapEntryIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Integer integer0 = new Integer(613);
      TreeBidiMap.Node<Integer, Integer> treeBidiMap_Node0 = new TreeBidiMap.Node<Integer, Integer>(integer0, integer0);
      try { 
        treeBidiMap_Node0.setValue(integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Map.Entry.setValue is not supported
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap$Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      boolean boolean0 = treeBidiMap_Inverse0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      boolean boolean0 = treeBidiMap0.equals(treeBidiMap_Inverse0);
      assertEquals(0, treeBidiMap_Inverse0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      OrderedBidiMap<Integer, Integer> orderedBidiMap0 = treeBidiMap_Inverse0.inverseBidiMap();
      assertTrue(orderedBidiMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      String string0 = treeBidiMap_Inverse0.toString();
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      treeBidiMap_Inverse0.clear();
      assertTrue(treeBidiMap_Inverse0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      // Undeclared exception!
      try { 
        treeBidiMap_Inverse0.getKey(treeBidiMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // key must be Comparable
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      boolean boolean0 = treeBidiMap_Inverse0.equals(treeBidiMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      TreeBidiMap.DataElement treeBidiMap_DataElement0 = TreeBidiMap.DataElement.KEY;
      TreeBidiMap.KeyView treeBidiMap_KeyView0 = treeBidiMap0.new KeyView(treeBidiMap_DataElement0);
      Iterator<Integer> iterator0 = treeBidiMap_KeyView0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      treeBidiMap0.keySet();
      Set<Integer> set0 = treeBidiMap0.keySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      TreeBidiMap.InverseEntryView treeBidiMap_InverseEntryView0 = treeBidiMap0.new InverseEntryView();
      LinkedList<Object> linkedList0 = new LinkedList<Object>(treeBidiMap_InverseEntryView0);
      linkedList0.add((Object) treeBidiMap_InverseEntryView0);
      boolean boolean0 = treeBidiMap_InverseEntryView0.containsAll(linkedList0);
      assertEquals(0, treeBidiMap_InverseEntryView0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      Object object0 = new Object();
      boolean boolean0 = treeBidiMap0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(3740);
      treeBidiMap0.put(integer0, integer0);
      Integer integer1 = new Integer((-2));
      Integer integer2 = new Integer(0);
      treeBidiMap0.putIfAbsent(integer2, integer1);
      BiFunction<Integer, Object, Integer> biFunction0 = (BiFunction<Integer, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      treeBidiMap0.merge(integer1, integer2, biFunction0);
      treeBidiMap0.put(integer2, integer2);
      assertEquals(2, treeBidiMap0.size());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(1);
      Integer integer1 = treeBidiMap0.remove((Object) integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      treeBidiMap0.hashCode();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(1);
      Integer integer1 = treeBidiMap0.removeValue(integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      treeBidiMap0.clear();
      assertTrue(treeBidiMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      TreeBidiMap.DataElement treeBidiMap_DataElement0 = TreeBidiMap.DataElement.VALUE;
      TreeBidiMap.InverseViewMapIterator treeBidiMap_InverseViewMapIterator0 = treeBidiMap0.new InverseViewMapIterator(treeBidiMap_DataElement0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        treeBidiMap_InverseViewMapIterator0.setValue(integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      TreeBidiMap.DataElement treeBidiMap_DataElement0 = TreeBidiMap.DataElement.KEY;
      TreeBidiMap.InverseViewMapIterator treeBidiMap_InverseViewMapIterator0 = treeBidiMap0.new InverseViewMapIterator(treeBidiMap_DataElement0);
      // Undeclared exception!
      try { 
        treeBidiMap_InverseViewMapIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      TreeBidiMap.DataElement treeBidiMap_DataElement0 = TreeBidiMap.DataElement.KEY;
      TreeBidiMap.ViewMapIterator treeBidiMap_ViewMapIterator0 = treeBidiMap0.new ViewMapIterator(treeBidiMap_DataElement0);
      // Undeclared exception!
      try { 
        treeBidiMap_ViewMapIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      TreeBidiMap.DataElement treeBidiMap_DataElement0 = TreeBidiMap.DataElement.VALUE;
      TreeBidiMap.ViewMapIterator treeBidiMap_ViewMapIterator0 = treeBidiMap0.new ViewMapIterator(treeBidiMap_DataElement0);
      Integer integer0 = new Integer(3015);
      // Undeclared exception!
      try { 
        treeBidiMap_ViewMapIterator0.setValue(integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapIterator", e);
      }
  }
}
