/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 13:56:41 GMT 2025
 */

package org.apache.commons.collections4.bidimap;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.SortedMap;
import org.apache.commons.collections4.KeyValue;
import org.apache.commons.collections4.OrderedBidiMap;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.SortedBidiMap;
import org.apache.commons.collections4.bidimap.DualHashBidiMap;
import org.apache.commons.collections4.bidimap.DualLinkedHashBidiMap;
import org.apache.commons.collections4.bidimap.DualTreeBidiMap;
import org.apache.commons.collections4.bidimap.TreeBidiMap;
import org.apache.commons.collections4.keyvalue.DefaultMapEntry;
import org.apache.commons.collections4.keyvalue.UnmodifiableMapEntry;
import org.apache.commons.collections4.map.FixedSizeSortedMap;
import org.apache.commons.collections4.map.LinkedMap;
import org.apache.commons.collections4.map.ListOrderedMap;
import org.apache.commons.collections4.map.SingletonMap;
import org.apache.commons.collections4.trie.PatriciaTrie;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class DualTreeBidiMap_ESTest extends DualTreeBidiMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(comparator0).toString();
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      Comparator<TreeBidiMap.Inverse> comparator1 = (Comparator<TreeBidiMap.Inverse>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<Integer, TreeBidiMap.Inverse> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, TreeBidiMap.Inverse>(comparator0, comparator1);
      DualTreeBidiMap.ViewMap<Integer, TreeBidiMap.Inverse> dualTreeBidiMap_ViewMap0 = new DualTreeBidiMap.ViewMap<Integer, TreeBidiMap.Inverse>(dualTreeBidiMap0, dualTreeBidiMap0);
      Integer integer0 = new Integer((-2387));
      Integer integer1 = new Integer((-1729));
      // Undeclared exception!
      try { 
        dualTreeBidiMap_ViewMap0.subMap(integer0, integer1);
       //  fail("Expecting exception: NoSuchElementException");
       // Unstable assertion
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(anyInt() , anyInt());
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>(comparator0, comparator0);
      Integer integer0 = new Integer((-2122));
      dualTreeBidiMap0.put(integer0, integer0);
      Integer integer1 = dualTreeBidiMap0.lastKey();
      assertEquals((-2122), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>(comparator0, comparator1);
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap1 = new DualTreeBidiMap<Integer, Integer>(dualTreeBidiMap0, dualTreeBidiMap0, dualTreeBidiMap0);
      assertTrue(dualTreeBidiMap1.equals((Object)dualTreeBidiMap0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>(comparator0, comparator0);
      DualTreeBidiMap.BidiOrderedMapIterator<Integer, Integer> dualTreeBidiMap_BidiOrderedMapIterator0 = new DualTreeBidiMap.BidiOrderedMapIterator<Integer, Integer>(dualTreeBidiMap0);
      boolean boolean0 = dualTreeBidiMap_BidiOrderedMapIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DualLinkedHashBidiMap<PatriciaTrie<Integer>, HashMap<Integer, Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<PatriciaTrie<Integer>, HashMap<Integer, Integer>>();
      DualLinkedHashBidiMap<String, Integer> dualLinkedHashBidiMap1 = new DualLinkedHashBidiMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(dualLinkedHashBidiMap1);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      dualLinkedHashBidiMap0.put(patriciaTrie0, hashMap0);
      DualTreeBidiMap.BidiOrderedMapIterator<PatriciaTrie<Integer>, HashMap<Integer, Integer>> dualTreeBidiMap_BidiOrderedMapIterator0 = new DualTreeBidiMap.BidiOrderedMapIterator<PatriciaTrie<Integer>, HashMap<Integer, Integer>>(dualLinkedHashBidiMap0);
      PatriciaTrie<Integer> patriciaTrie1 = dualTreeBidiMap_BidiOrderedMapIterator0.next();
      PatriciaTrie<Integer> patriciaTrie2 = dualTreeBidiMap_BidiOrderedMapIterator0.previous();
      assertSame(patriciaTrie2, patriciaTrie1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comparator<HashMap<Integer, Integer>> comparator0 = (Comparator<HashMap<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(comparator0).compare(any(java.util.HashMap.class) , any(java.util.HashMap.class));
      DualTreeBidiMap<HashMap<Integer, Integer>, PatriciaTrie<Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<HashMap<Integer, Integer>, PatriciaTrie<Integer>>(comparator0, (Comparator<? super PatriciaTrie<Integer>>) null);
      dualTreeBidiMap0.headMap((HashMap<Integer, Integer>) null);
      DualTreeBidiMap<PatriciaTrie<Integer>, PatriciaTrie<Integer>> dualTreeBidiMap1 = new DualTreeBidiMap<PatriciaTrie<Integer>, PatriciaTrie<Integer>>((Comparator<? super PatriciaTrie<Integer>>) null, (Comparator<? super PatriciaTrie<Integer>>) null);
      assertTrue(dualTreeBidiMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comparator<HashMap<Integer, Integer>> comparator0 = (Comparator<HashMap<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(comparator0).compare(any(java.util.HashMap.class) , any(java.util.HashMap.class));
      DualTreeBidiMap<HashMap<Integer, Integer>, PatriciaTrie<Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<HashMap<Integer, Integer>, PatriciaTrie<Integer>>(comparator0, (Comparator<? super PatriciaTrie<Integer>>) null);
      dualTreeBidiMap0.headMap((HashMap<Integer, Integer>) null);
      DualTreeBidiMap<PatriciaTrie<Integer>, PatriciaTrie<Integer>> dualTreeBidiMap1 = new DualTreeBidiMap<PatriciaTrie<Integer>, PatriciaTrie<Integer>>();
      assertTrue(dualTreeBidiMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DualLinkedHashBidiMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>();
      DualHashBidiMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> dualHashBidiMap0 = new DualHashBidiMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>(dualLinkedHashBidiMap0);
      DualTreeBidiMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>(dualHashBidiMap0);
      Comparator<? super HashMap<Integer, Integer>> comparator0 = dualTreeBidiMap0.valueComparator();
      assertNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Comparator<PatriciaTrie<Integer>> comparator0 = (Comparator<PatriciaTrie<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(org.apache.commons.collections4.trie.PatriciaTrie.class) , any(org.apache.commons.collections4.trie.PatriciaTrie.class));
      Comparator<HashMap<Integer, Integer>> comparator1 = (Comparator<HashMap<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<PatriciaTrie<Integer>, HashMap<Integer, Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<PatriciaTrie<Integer>, HashMap<Integer, Integer>>(comparator0, comparator1);
      SortedMap<PatriciaTrie<Integer>, HashMap<Integer, Integer>> sortedMap0 = dualTreeBidiMap0.tailMap(patriciaTrie0);
      assertEquals(0, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparator<HashMap<Integer, Integer>> comparator0 = (Comparator<HashMap<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.util.HashMap.class) , any(java.util.HashMap.class));
      DualTreeBidiMap<HashMap<Integer, Integer>, TreeBidiMap.Inverse> dualTreeBidiMap0 = new DualTreeBidiMap<HashMap<Integer, Integer>, TreeBidiMap.Inverse>(comparator0, (Comparator<? super TreeBidiMap.Inverse>) null);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      SortedMap<HashMap<Integer, Integer>, TreeBidiMap.Inverse> sortedMap0 = dualTreeBidiMap0.subMap(hashMap0, hashMap0);
      FixedSizeSortedMap<HashMap<Integer, Integer>, TreeBidiMap.Inverse> fixedSizeSortedMap0 = FixedSizeSortedMap.fixedSizeSortedMap(sortedMap0);
      DualTreeBidiMap<HashMap<Integer, Integer>, TreeBidiMap.Inverse> dualTreeBidiMap1 = new DualTreeBidiMap<HashMap<Integer, Integer>, TreeBidiMap.Inverse>(fixedSizeSortedMap0);
      assertEquals(0, dualTreeBidiMap1.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ListOrderedMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> listOrderedMap0 = new ListOrderedMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>();
      DualTreeBidiMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>(listOrderedMap0);
      DualTreeBidiMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> dualTreeBidiMap1 = dualTreeBidiMap0.createBidiMap(dualTreeBidiMap0, dualTreeBidiMap0, dualTreeBidiMap0);
      assertTrue(dualTreeBidiMap1.equals((Object)dualTreeBidiMap0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(anyInt() , anyInt());
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>(comparator0, comparator1);
      Integer integer0 = new Integer(0);
      dualTreeBidiMap0.put(integer0, integer0);
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap1 = dualTreeBidiMap0.createBidiMap(dualTreeBidiMap0, dualTreeBidiMap0, dualTreeBidiMap0);
      assertNotSame(dualTreeBidiMap1, dualTreeBidiMap0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>(comparator0, comparator0);
      Comparator<? super Integer> comparator1 = dualTreeBidiMap0.comparator();
      assertNotNull(comparator1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DualTreeBidiMap<HashMap<Integer, Integer>, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<HashMap<Integer, Integer>, Integer>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        dualTreeBidiMap0.tailMap(hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DualTreeBidiMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>();
      // Undeclared exception!
      try { 
        dualTreeBidiMap0.subMap((HashMap<Integer, Integer>) null, (HashMap<Integer, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comparator<TreeBidiMap.Inverse> comparator0 = (Comparator<TreeBidiMap.Inverse>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<TreeBidiMap.Inverse, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<TreeBidiMap.Inverse, Integer>(comparator0, comparator1);
      dualTreeBidiMap0.reverseMap = null;
      // Undeclared exception!
      try { 
        dualTreeBidiMap0.inverseBidiMap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.DualTreeBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      // Undeclared exception!
      try { 
        dualTreeBidiMap0.headMap((AbstractMap.SimpleImmutableEntry<Integer, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DualTreeBidiMap<PatriciaTrie<Integer>, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<PatriciaTrie<Integer>, Integer>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      // Undeclared exception!
      try { 
        dualTreeBidiMap0.headMap(patriciaTrie0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.trie.PatriciaTrie cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>((Comparator<? super Integer>) null, (Comparator<? super Integer>) null);
      // Undeclared exception!
      try { 
        dualTreeBidiMap0.createBidiMap((Map<Integer, Integer>) null, treeBidiMap0, treeBidiMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.DualTreeBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>();
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(dualTreeBidiMap0);
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>(dualTreeBidiMap0, linkedMap0, dualTreeBidiMap0);
      // Undeclared exception!
      try { 
        dualTreeBidiMap0.createBidiMap(linkedMap0, linkedMap0, dualLinkedHashBidiMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.LinkedMap cannot be cast to java.util.SortedMap
         //
         verifyException("org.apache.commons.collections4.bidimap.DualTreeBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DualTreeBidiMap<PatriciaTrie<Integer>, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<PatriciaTrie<Integer>, Integer>();
      DualTreeBidiMap<Integer, PatriciaTrie<Integer>> dualTreeBidiMap1 = null;
      try {
        dualTreeBidiMap1 = new DualTreeBidiMap<Integer, PatriciaTrie<Integer>>((Map<Integer, PatriciaTrie<Integer>>) null, dualTreeBidiMap0, dualTreeBidiMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.DualTreeBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DualTreeBidiMap<HashMap<Integer, Integer>, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<HashMap<Integer, Integer>, Integer>();
      DualHashBidiMap<Integer, HashMap<Integer, Integer>> dualHashBidiMap0 = new DualHashBidiMap<Integer, HashMap<Integer, Integer>>();
      DualTreeBidiMap<HashMap<Integer, Integer>, Integer> dualTreeBidiMap1 = null;
      try {
        dualTreeBidiMap1 = new DualTreeBidiMap<HashMap<Integer, Integer>, Integer>(dualTreeBidiMap0, dualHashBidiMap0, dualHashBidiMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.bidimap.DualHashBidiMap cannot be cast to java.util.SortedMap
         //
         verifyException("org.apache.commons.collections4.bidimap.DualTreeBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DualTreeBidiMap<PatriciaTrie<Integer>, PatriciaTrie<Integer>> dualTreeBidiMap0 = null;
      try {
        dualTreeBidiMap0 = new DualTreeBidiMap<PatriciaTrie<Integer>, PatriciaTrie<Integer>>((Map<? extends PatriciaTrie<Integer>, ? extends PatriciaTrie<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer integer0 = new Integer(392);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      DefaultMapEntry<Integer, PatriciaTrie<Integer>> defaultMapEntry0 = new DefaultMapEntry<Integer, PatriciaTrie<Integer>>(integer0, patriciaTrie0);
      SingletonMap<Integer, PatriciaTrie<Integer>> singletonMap0 = new SingletonMap<Integer, PatriciaTrie<Integer>>((Map.Entry<? extends Integer, ? extends PatriciaTrie<Integer>>) defaultMapEntry0);
      DualTreeBidiMap<Integer, PatriciaTrie<Integer>> dualTreeBidiMap0 = null;
      try {
        dualTreeBidiMap0 = new DualTreeBidiMap<Integer, PatriciaTrie<Integer>>(singletonMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.trie.PatriciaTrie cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DualTreeBidiMap<HashMap<Integer, Integer>, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<HashMap<Integer, Integer>, Integer>();
      HashMap<Integer, Integer> hashMap0 = dualTreeBidiMap0.previousKey((HashMap<Integer, Integer>) null);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<TreeBidiMap.Inverse> comparator1 = (Comparator<TreeBidiMap.Inverse>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<Integer, TreeBidiMap.Inverse> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, TreeBidiMap.Inverse>(comparator0, comparator1);
      Integer integer0 = new Integer(759);
      Integer integer1 = dualTreeBidiMap0.nextKey(integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DualTreeBidiMap<HashMap<Integer, Integer>, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<HashMap<Integer, Integer>, Integer>();
      SortedBidiMap<Integer, HashMap<Integer, Integer>> sortedBidiMap0 = dualTreeBidiMap0.inverseBidiMap();
      assertEquals(0, sortedBidiMap0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DualTreeBidiMap<HashMap<Integer, Integer>, PatriciaTrie<Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<HashMap<Integer, Integer>, PatriciaTrie<Integer>>();
      Comparator<? super HashMap<Integer, Integer>> comparator0 = dualTreeBidiMap0.comparator();
      assertNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, HashMap<Integer, Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, HashMap<Integer, Integer>>();
      // Undeclared exception!
      try { 
        dualTreeBidiMap0.tailMap((AbstractMap.SimpleImmutableEntry<Integer, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DualTreeBidiMap<PatriciaTrie<Integer>, HashMap<Integer, Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<PatriciaTrie<Integer>, HashMap<Integer, Integer>>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      // Undeclared exception!
      try { 
        dualTreeBidiMap0.subMap(patriciaTrie0, patriciaTrie0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.trie.PatriciaTrie cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<TreeBidiMap.Inverse> comparator1 = (Comparator<TreeBidiMap.Inverse>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<Integer, TreeBidiMap.Inverse> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, TreeBidiMap.Inverse>(comparator0, comparator1);
      DualTreeBidiMap.BidiOrderedMapIterator<Integer, TreeBidiMap.Inverse> dualTreeBidiMap_BidiOrderedMapIterator0 = new DualTreeBidiMap.BidiOrderedMapIterator<Integer, TreeBidiMap.Inverse>(dualTreeBidiMap0);
      String string0 = dualTreeBidiMap_BidiOrderedMapIterator0.toString();
      assertEquals("MapIterator[]", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DualTreeBidiMap<TreeBidiMap.Inverse, TreeBidiMap.Inverse> dualTreeBidiMap0 = new DualTreeBidiMap<TreeBidiMap.Inverse, TreeBidiMap.Inverse>();
      DualTreeBidiMap.BidiOrderedMapIterator<TreeBidiMap.Inverse, TreeBidiMap.Inverse> dualTreeBidiMap_BidiOrderedMapIterator0 = new DualTreeBidiMap.BidiOrderedMapIterator<TreeBidiMap.Inverse, TreeBidiMap.Inverse>(dualTreeBidiMap0);
      Integer integer0 = new Integer(0);
      UnmodifiableMapEntry<Integer, Integer> unmodifiableMapEntry0 = new UnmodifiableMapEntry<Integer, Integer>(integer0, integer0);
      SingletonMap<Integer, Integer> singletonMap0 = new SingletonMap<Integer, Integer>((KeyValue<Integer, Integer>) unmodifiableMapEntry0);
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(singletonMap0);
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      // Undeclared exception!
      try { 
        dualTreeBidiMap_BidiOrderedMapIterator0.setValue(treeBidiMap_Inverse0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator setValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DualTreeBidiMap<PatriciaTrie<Integer>, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<PatriciaTrie<Integer>, Integer>();
      DualTreeBidiMap.BidiOrderedMapIterator<PatriciaTrie<Integer>, Integer> dualTreeBidiMap_BidiOrderedMapIterator0 = new DualTreeBidiMap.BidiOrderedMapIterator<PatriciaTrie<Integer>, Integer>(dualTreeBidiMap0);
      // Undeclared exception!
      try { 
        dualTreeBidiMap_BidiOrderedMapIterator0.getValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator getValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DualTreeBidiMap<PatriciaTrie<Integer>, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<PatriciaTrie<Integer>, Integer>();
      DualTreeBidiMap.BidiOrderedMapIterator<PatriciaTrie<Integer>, Integer> dualTreeBidiMap_BidiOrderedMapIterator0 = new DualTreeBidiMap.BidiOrderedMapIterator<PatriciaTrie<Integer>, Integer>(dualTreeBidiMap0);
      // Undeclared exception!
      try { 
        dualTreeBidiMap_BidiOrderedMapIterator0.getKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator getKey() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, HashMap<Integer, Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, HashMap<Integer, Integer>>();
      Integer integer0 = new Integer(1138);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      dualLinkedHashBidiMap0.put(integer0, hashMap0);
      DualTreeBidiMap.BidiOrderedMapIterator<Integer, HashMap<Integer, Integer>> dualTreeBidiMap_BidiOrderedMapIterator0 = new DualTreeBidiMap.BidiOrderedMapIterator<Integer, HashMap<Integer, Integer>>(dualLinkedHashBidiMap0);
      dualTreeBidiMap_BidiOrderedMapIterator0.next();
      Integer integer1 = dualTreeBidiMap_BidiOrderedMapIterator0.getKey();
      assertEquals(1138, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      Comparator<PatriciaTrie<Integer>> comparator1 = (Comparator<PatriciaTrie<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<Integer, PatriciaTrie<Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, PatriciaTrie<Integer>>(comparator0, comparator1);
      DualTreeBidiMap.ViewMap<Integer, PatriciaTrie<Integer>> dualTreeBidiMap_ViewMap0 = new DualTreeBidiMap.ViewMap<Integer, PatriciaTrie<Integer>>(dualTreeBidiMap0, dualTreeBidiMap0);
      dualTreeBidiMap_ViewMap0.clear();
      assertEquals(0, dualTreeBidiMap_ViewMap0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("Iterator setValue() can only be called after next() and before remove()").when(comparator0).toString();
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      Comparator<PatriciaTrie<Integer>> comparator1 = (Comparator<PatriciaTrie<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator1).compare(any(org.apache.commons.collections4.trie.PatriciaTrie.class) , any(org.apache.commons.collections4.trie.PatriciaTrie.class));
      DualTreeBidiMap<Integer, PatriciaTrie<Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, PatriciaTrie<Integer>>(comparator0, comparator1);
      DualTreeBidiMap.ViewMap<Integer, PatriciaTrie<Integer>> dualTreeBidiMap_ViewMap0 = new DualTreeBidiMap.ViewMap<Integer, PatriciaTrie<Integer>>(dualTreeBidiMap0, dualTreeBidiMap0);
      Integer integer0 = new Integer(634);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      dualTreeBidiMap_ViewMap0.put(integer0, patriciaTrie0);
      boolean boolean0 = dualTreeBidiMap_ViewMap0.containsValue(patriciaTrie0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Comparator<PatriciaTrie<Integer>> comparator0 = (Comparator<PatriciaTrie<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator1).toString();
      DualTreeBidiMap<Integer, PatriciaTrie<Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, PatriciaTrie<Integer>>(comparator1, comparator0);
      DualTreeBidiMap.ViewMap<Integer, PatriciaTrie<Integer>> dualTreeBidiMap_ViewMap0 = new DualTreeBidiMap.ViewMap<Integer, PatriciaTrie<Integer>>(dualTreeBidiMap0, dualTreeBidiMap0);
      Integer integer0 = new Integer((-1079));
      boolean boolean0 = dualTreeBidiMap_ViewMap0.containsValue(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Comparator<PatriciaTrie<Integer>> comparator0 = (Comparator<PatriciaTrie<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any(org.apache.commons.collections4.trie.PatriciaTrie.class) , any(org.apache.commons.collections4.trie.PatriciaTrie.class));
      DualTreeBidiMap<PatriciaTrie<Integer>, PatriciaTrie<Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<PatriciaTrie<Integer>, PatriciaTrie<Integer>>(comparator0, comparator0);
      DualTreeBidiMap.ViewMap<PatriciaTrie<Integer>, PatriciaTrie<Integer>> dualTreeBidiMap_ViewMap0 = new DualTreeBidiMap.ViewMap<PatriciaTrie<Integer>, PatriciaTrie<Integer>>(dualTreeBidiMap0, dualTreeBidiMap0);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      dualTreeBidiMap_ViewMap0.put(patriciaTrie0, patriciaTrie0);
      PatriciaTrie<Integer> patriciaTrie1 = dualTreeBidiMap_ViewMap0.previousKey(patriciaTrie0);
      assertNull(patriciaTrie1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Comparator<PatriciaTrie<Integer>> comparator0 = (Comparator<PatriciaTrie<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("+!r3Cz-foYoorb38$u").when(comparator0).toString();
      doReturn(788, 0, 0, 61, (-695)).when(comparator0).compare(any(org.apache.commons.collections4.trie.PatriciaTrie.class) , any(org.apache.commons.collections4.trie.PatriciaTrie.class));
      DualTreeBidiMap<PatriciaTrie<Integer>, PatriciaTrie<Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<PatriciaTrie<Integer>, PatriciaTrie<Integer>>(comparator0, comparator0);
      DualTreeBidiMap.ViewMap<PatriciaTrie<Integer>, PatriciaTrie<Integer>> dualTreeBidiMap_ViewMap0 = new DualTreeBidiMap.ViewMap<PatriciaTrie<Integer>, PatriciaTrie<Integer>>(dualTreeBidiMap0, dualTreeBidiMap0);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      dualTreeBidiMap_ViewMap0.put(patriciaTrie0, patriciaTrie0);
      // Undeclared exception!
      try { 
        dualTreeBidiMap_ViewMap0.previousKey(patriciaTrie0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Comparator<HashMap<Integer, Integer>> comparator0 = (Comparator<HashMap<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<HashMap<Integer, Integer>, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<HashMap<Integer, Integer>, Integer>(comparator0, comparator1);
      // Undeclared exception!
      try { 
        dualTreeBidiMap0.lastKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedMap<HashMap<Integer, Integer>, PatriciaTrie<Integer>> linkedMap0 = new LinkedMap<HashMap<Integer, Integer>, PatriciaTrie<Integer>>();
      DualTreeBidiMap<HashMap<Integer, Integer>, PatriciaTrie<Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<HashMap<Integer, Integer>, PatriciaTrie<Integer>>(linkedMap0);
      OrderedBidiMap<PatriciaTrie<Integer>, HashMap<Integer, Integer>> orderedBidiMap0 = dualTreeBidiMap0.inverseOrderedBidiMap();
      assertTrue(orderedBidiMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DualTreeBidiMap<TreeBidiMap.Inverse, HashMap<Integer, Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<TreeBidiMap.Inverse, HashMap<Integer, Integer>>();
      // Undeclared exception!
      try { 
        dualTreeBidiMap0.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<PatriciaTrie<Integer>> comparator1 = (Comparator<PatriciaTrie<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator1).toString();
      DualTreeBidiMap<Integer, PatriciaTrie<Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, PatriciaTrie<Integer>>(comparator0, comparator1);
      Comparator<? super PatriciaTrie<Integer>> comparator2 = dualTreeBidiMap0.valueComparator();
      assertNotNull(comparator2);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DualTreeBidiMap<HashMap<Integer, Integer>, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<HashMap<Integer, Integer>, Integer>();
      OrderedMapIterator<HashMap<Integer, Integer>, Integer> orderedMapIterator0 = dualTreeBidiMap0.mapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DualTreeBidiMap<PatriciaTrie<Integer>, PatriciaTrie<Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<PatriciaTrie<Integer>, PatriciaTrie<Integer>>();
      SortedBidiMap<PatriciaTrie<Integer>, PatriciaTrie<Integer>> sortedBidiMap0 = dualTreeBidiMap0.inverseSortedBidiMap();
      assertTrue(sortedBidiMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DualTreeBidiMap<PatriciaTrie<Integer>, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<PatriciaTrie<Integer>, Integer>();
      DualTreeBidiMap.BidiOrderedMapIterator<PatriciaTrie<Integer>, Integer> dualTreeBidiMap_BidiOrderedMapIterator0 = new DualTreeBidiMap.BidiOrderedMapIterator<PatriciaTrie<Integer>, Integer>(dualTreeBidiMap0);
      // Undeclared exception!
      try { 
        dualTreeBidiMap_BidiOrderedMapIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DualTreeBidiMap<Integer, TreeBidiMap.Inverse> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, TreeBidiMap.Inverse>();
      DualTreeBidiMap.BidiOrderedMapIterator<Integer, TreeBidiMap.Inverse> dualTreeBidiMap_BidiOrderedMapIterator0 = new DualTreeBidiMap.BidiOrderedMapIterator<Integer, TreeBidiMap.Inverse>(dualTreeBidiMap0);
      dualTreeBidiMap_BidiOrderedMapIterator0.reset();
      assertFalse(dualTreeBidiMap_BidiOrderedMapIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Comparator<TreeBidiMap.Inverse> comparator0 = (Comparator<TreeBidiMap.Inverse>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<TreeBidiMap.Inverse, TreeBidiMap.Inverse> dualTreeBidiMap0 = new DualTreeBidiMap<TreeBidiMap.Inverse, TreeBidiMap.Inverse>(comparator0, comparator0);
      DualTreeBidiMap.BidiOrderedMapIterator<TreeBidiMap.Inverse, TreeBidiMap.Inverse> dualTreeBidiMap_BidiOrderedMapIterator0 = new DualTreeBidiMap.BidiOrderedMapIterator<TreeBidiMap.Inverse, TreeBidiMap.Inverse>(dualTreeBidiMap0);
      boolean boolean0 = dualTreeBidiMap_BidiOrderedMapIterator0.hasPrevious();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Comparator<PatriciaTrie<Integer>> comparator0 = (Comparator<PatriciaTrie<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<Integer, PatriciaTrie<Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, PatriciaTrie<Integer>>((Comparator<? super Integer>) null, comparator0);
      DualTreeBidiMap.ViewMap<Integer, PatriciaTrie<Integer>> dualTreeBidiMap_ViewMap0 = new DualTreeBidiMap.ViewMap<Integer, PatriciaTrie<Integer>>(dualTreeBidiMap0, dualTreeBidiMap0);
      // Undeclared exception!
      try { 
        dualTreeBidiMap_ViewMap0.headMap((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DualTreeBidiMap<TreeBidiMap.Inverse, HashMap<Integer, Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<TreeBidiMap.Inverse, HashMap<Integer, Integer>>();
      DualTreeBidiMap.ViewMap<TreeBidiMap.Inverse, HashMap<Integer, Integer>> dualTreeBidiMap_ViewMap0 = new DualTreeBidiMap.ViewMap<TreeBidiMap.Inverse, HashMap<Integer, Integer>>(dualTreeBidiMap0, dualTreeBidiMap0);
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      TreeBidiMap.Inverse treeBidiMap_Inverse1 = dualTreeBidiMap_ViewMap0.nextKey(treeBidiMap_Inverse0);
      assertNull(treeBidiMap_Inverse1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DualTreeBidiMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>();
      DualTreeBidiMap.ViewMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> dualTreeBidiMap_ViewMap0 = new DualTreeBidiMap.ViewMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>(dualTreeBidiMap0, dualTreeBidiMap0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        dualTreeBidiMap_ViewMap0.tailMap(hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }
}
