/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 14:17:07 GMT 2025
 */

package org.apache.commons.collections4.functors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.ChainedTransformer;
import org.apache.commons.collections4.functors.CloneTransformer;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ChainedTransformer_ESTest extends ChainedTransformer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Transformer<Object, Integer>[] transformerArray0 = (Transformer<Object, Integer>[]) Array.newInstance(Transformer.class, 0);
      ChainedTransformer<Integer> chainedTransformer0 = new ChainedTransformer<Integer>(transformerArray0);
      Integer integer0 = chainedTransformer0.transform((Integer) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Transformer<Object, Integer>[] transformerArray0 = (Transformer<Object, Integer>[]) Array.newInstance(Transformer.class, 0);
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      ChainedTransformer<Object> chainedTransformer0 = new ChainedTransformer<Object>(transformerArray0);
      Object object0 = chainedTransformer0.transform(transformer0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ChainedTransformer<Object> chainedTransformer0 = new ChainedTransformer<Object>((Transformer<? super Object, ?>[]) null);
      Transformer<? super Object, ?>[] transformerArray0 = chainedTransformer0.getTransformers();
      assertNull(transformerArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Transformer<Object, Integer>[] transformerArray0 = (Transformer<Object, Integer>[]) Array.newInstance(Transformer.class, 5);
      ChainedTransformer<Object> chainedTransformer0 = new ChainedTransformer<Object>(transformerArray0);
      Transformer<? super Object, ?>[] transformerArray1 = chainedTransformer0.getTransformers();
      assertEquals(5, transformerArray1.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Transformer<Object, Object>[] transformerArray0 = (Transformer<Object, Object>[]) Array.newInstance(Transformer.class, 1);
      Transformer<Object, Object> transformer0 = InvokerTransformer.invokerTransformer("criterion");
      transformerArray0[0] = transformer0;
      ChainedTransformer<Object> chainedTransformer0 = new ChainedTransformer<Object>(transformerArray0);
      // Undeclared exception!
      try { 
        chainedTransformer0.transform(transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'criterion' on 'class org.apache.commons.collections4.functors.InvokerTransformer' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Transformer<Object, Object>[] transformerArray0 = (Transformer<Object, Object>[]) Array.newInstance(Transformer.class, 3);
      Transformer<Object, Object> transformer0 = CloneTransformer.cloneTransformer();
      transformerArray0[0] = transformer0;
      ChainedTransformer<Object> chainedTransformer0 = new ChainedTransformer<Object>(transformerArray0);
      // Undeclared exception!
      try { 
        chainedTransformer0.transform(transformer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The prototype must be cloneable via a public clone method
         //
         verifyException("org.apache.commons.collections4.functors.PrototypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        ChainedTransformer.chainedTransformer((Transformer<? super Object, ?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformers
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Transformer<Object, Boolean>[] transformerArray0 = (Transformer<Object, Boolean>[]) Array.newInstance(Transformer.class, 1);
      // Undeclared exception!
      try { 
        ChainedTransformer.chainedTransformer((Transformer<? super Boolean, ? extends Boolean>[]) transformerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformers[0]
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Transformer<Object, Integer>> linkedList0 = new LinkedList<Transformer<Object, Integer>>();
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      List<Transformer<Object, Integer>> list0 = linkedList0.subList(0, 0);
      linkedList0.add(transformer0);
      // Undeclared exception!
      try { 
        ChainedTransformer.chainedTransformer((Collection<? extends Transformer<? super Object, ?>>) list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        ChainedTransformer.chainedTransformer((Collection<? extends Transformer<? super Object, ?>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformers
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Transformer<Object, Boolean>> linkedList0 = new LinkedList<Transformer<Object, Boolean>>();
      linkedList0.add((Transformer<Object, Boolean>) null);
      // Undeclared exception!
      try { 
        ChainedTransformer.chainedTransformer((Collection<? extends Transformer<? super Object, ?>>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformers[0]
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Transformer<Object, Integer>[] transformerArray0 = (Transformer<Object, Integer>[]) Array.newInstance(Transformer.class, 5);
      ChainedTransformer<Object> chainedTransformer0 = new ChainedTransformer<Object>(transformerArray0);
      // Undeclared exception!
      try { 
        chainedTransformer0.transform(transformerArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.ChainedTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Transformer<Object, Integer>> linkedList0 = new LinkedList<Transformer<Object, Integer>>();
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      linkedList0.add(transformer0);
      Transformer<Integer, Integer> transformer1 = ChainedTransformer.chainedTransformer((Collection<? extends Transformer<? super Integer, ? extends Integer>>) linkedList0);
      assertNotNull(transformer1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Transformer<Object, Integer>[] transformerArray0 = (Transformer<Object, Integer>[]) Array.newInstance(Transformer.class, 0);
      Transformer<Object, Object> transformer0 = ChainedTransformer.chainedTransformer((Transformer<? super Object, ?>[]) transformerArray0);
      assertNotNull(transformer0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Transformer<Object, Integer>[] transformerArray0 = (Transformer<Object, Integer>[]) Array.newInstance(Transformer.class, 0);
      LinkedList<Transformer<Object, Integer>> linkedList0 = new LinkedList<Transformer<Object, Integer>>();
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      Transformer<Object, Object> transformer1 = ChainedTransformer.chainedTransformer((Collection<? extends Transformer<? super Object, ?>>) linkedList0);
      ChainedTransformer<Object> chainedTransformer0 = new ChainedTransformer<Object>(transformerArray0);
      Transformer<Object, Object>[] transformerArray1 = (Transformer<Object, Object>[]) Array.newInstance(Transformer.class, 9);
      transformerArray1[0] = transformer1;
      transformerArray1[1] = transformer1;
      transformerArray1[2] = (Transformer<Object, Object>) chainedTransformer0;
      transformerArray1[3] = transformer1;
      transformerArray1[4] = transformer1;
      transformerArray1[5] = (Transformer<Object, Object>) chainedTransformer0;
      transformerArray1[6] = transformer1;
      transformerArray1[7] = transformer1;
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>(transformer0);
      FactoryTransformer<Object, Object> factoryTransformer0 = new FactoryTransformer<Object, Object>(constantFactory0);
      transformerArray1[8] = (Transformer<Object, Object>) factoryTransformer0;
      Transformer<Object, Object> transformer2 = ChainedTransformer.chainedTransformer((Transformer<? super Object, ?>[]) transformerArray1);
      assertFalse(transformer2.equals((Object)transformer1));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Transformer<Object, Integer>[] transformerArray0 = (Transformer<Object, Integer>[]) Array.newInstance(Transformer.class, 0);
      ChainedTransformer<Integer> chainedTransformer0 = new ChainedTransformer<Integer>(transformerArray0);
      Transformer<? super Integer, ? extends Integer>[] transformerArray1 = chainedTransformer0.getTransformers();
      assertEquals(0, transformerArray1.length);
  }
}
