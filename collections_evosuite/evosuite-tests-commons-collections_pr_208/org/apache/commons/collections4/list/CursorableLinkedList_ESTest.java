/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 14:53:32 GMT 2025
 */

package org.apache.commons.collections4.list;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.lang.ref.WeakReference;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.ListIterator;
import org.apache.commons.collections4.list.AbstractLinkedList;
import org.apache.commons.collections4.list.CursorableLinkedList;
import org.apache.commons.collections4.list.NodeCachingLinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CursorableLinkedList_ESTest extends CursorableLinkedList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      AbstractLinkedList.LinkedSubList<Integer> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Integer>(cursorableLinkedList0, 0, 0);
      CursorableLinkedList.SubCursor<Integer> cursorableLinkedList_SubCursor0 = new CursorableLinkedList.SubCursor<Integer>(abstractLinkedList_LinkedSubList0, 0);
      Integer integer0 = new Integer(2607);
      cursorableLinkedList_SubCursor0.add(integer0);
      cursorableLinkedList_SubCursor0.add(integer0);
      boolean boolean0 = cursorableLinkedList_SubCursor0.hasPrevious();
      assertTrue(abstractLinkedList_LinkedSubList0.contains(2607));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      CursorableLinkedList.Cursor<Object> cursorableLinkedList_Cursor0 = new CursorableLinkedList.Cursor<Object>(cursorableLinkedList0, 0);
      cursorableLinkedList_Cursor0.nodeRemoved((AbstractLinkedList.Node<Object>) null);
      cursorableLinkedList_Cursor0.nodeRemoved((AbstractLinkedList.Node<Object>) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CursorableLinkedList<InputStream> cursorableLinkedList0 = new CursorableLinkedList<InputStream>();
      AbstractLinkedList.Node<InputStream> abstractLinkedList_Node0 = new AbstractLinkedList.Node<InputStream>();
      cursorableLinkedList0.removeNode(abstractLinkedList_Node0);
      cursorableLinkedList0.removeAllNodes();
      assertEquals((-1), cursorableLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      CursorableLinkedList.Cursor<Integer> cursorableLinkedList_Cursor0 = cursorableLinkedList0.cursor();
      Integer integer0 = new Integer((-1));
      cursorableLinkedList_Cursor0.add(integer0);
      AbstractLinkedList.LinkedSubList<Integer> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Integer>(cursorableLinkedList0, 0, 1);
      ListIterator<Integer> listIterator0 = cursorableLinkedList0.createSubListListIterator(abstractLinkedList_LinkedSubList0, 0);
      assertTrue(abstractLinkedList_LinkedSubList0.contains((-1)));
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CursorableLinkedList<WeakReference<Integer>> cursorableLinkedList0 = new CursorableLinkedList<WeakReference<Integer>>();
      cursorableLinkedList0.broadcastNodeInserted((AbstractLinkedList.Node<WeakReference<Integer>>) null);
      assertTrue(cursorableLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CursorableLinkedList<InputStream> cursorableLinkedList0 = new CursorableLinkedList<InputStream>();
      AbstractLinkedList.Node<InputStream> abstractLinkedList_Node0 = cursorableLinkedList0.createHeaderNode();
      cursorableLinkedList0.addNode(abstractLinkedList_Node0, abstractLinkedList_Node0);
      assertFalse(cursorableLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      AbstractLinkedList.LinkedSubList<Integer> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Integer>(cursorableLinkedList0, 0, 0);
      CursorableLinkedList.Cursor<Integer> cursorableLinkedList_Cursor0 = cursorableLinkedList0.cursor();
      Integer integer0 = new Integer(1);
      cursorableLinkedList_Cursor0.add(integer0);
      CursorableLinkedList.SubCursor<Integer> cursorableLinkedList_SubCursor0 = new CursorableLinkedList.SubCursor<Integer>(abstractLinkedList_LinkedSubList0, 1);
      boolean boolean0 = cursorableLinkedList_SubCursor0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(cursorableLinkedList0, 0, 0);
      CursorableLinkedList.SubCursor<Object> cursorableLinkedList_SubCursor0 = new CursorableLinkedList.SubCursor<Object>(abstractLinkedList_LinkedSubList0, 0);
      Object object0 = new Object();
      cursorableLinkedList_SubCursor0.add(object0);
      assertTrue(abstractLinkedList_LinkedSubList0.contains(object0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      CursorableLinkedList.Cursor<Integer> cursorableLinkedList_Cursor0 = new CursorableLinkedList.Cursor<Integer>(cursorableLinkedList0, 0);
      Integer integer0 = new Integer(0);
      AbstractLinkedList.Node<Integer> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Integer>(integer0);
      cursorableLinkedList_Cursor0.nodeInserted(abstractLinkedList_Node0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      CursorableLinkedList.Cursor<Object> cursorableLinkedList_Cursor0 = cursorableLinkedList0.cursor();
      int int0 = cursorableLinkedList_Cursor0.nextIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CursorableLinkedList<WeakReference<Object>> cursorableLinkedList0 = new CursorableLinkedList<WeakReference<Object>>();
      cursorableLinkedList0.init();
      assertTrue(cursorableLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(1845);
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      AbstractLinkedList.Node<Object> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Object>();
      cursorableLinkedList0.updateNode(abstractLinkedList_Node0, integer0);
      assertTrue(cursorableLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      CursorableLinkedList.Cursor<Integer> cursorableLinkedList_Cursor0 = cursorableLinkedList0.cursor(0);
      assertNotNull(cursorableLinkedList_Cursor0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      CursorableLinkedList<Object> cursorableLinkedList1 = new CursorableLinkedList<Object>(cursorableLinkedList0);
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      AbstractLinkedList.Node<Object> abstractLinkedList_Node0 = nodeCachingLinkedList0.createNode(cursorableLinkedList0);
      // Undeclared exception!
      try { 
        cursorableLinkedList1.removeNode(abstractLinkedList_Node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(1, 1);
      Integer integer0 = new Integer(1);
      linkedHashSet0.add(integer0);
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>(linkedHashSet0);
      cursorableLinkedList0.header = null;
      // Undeclared exception!
      try { 
        cursorableLinkedList0.removeAllNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CursorableLinkedList<InputStream> cursorableLinkedList0 = new CursorableLinkedList<InputStream>();
      // Undeclared exception!
      try { 
        cursorableLinkedList0.listIterator(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (1) greater than the size of the list (0).
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      cursorableLinkedList0.size = (-2046);
      // Undeclared exception!
      try { 
        cursorableLinkedList0.listIterator();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (0) greater than the size of the list (-2046).
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      CursorableLinkedList<Object> cursorableLinkedList1 = new CursorableLinkedList<Object>(cursorableLinkedList0);
      cursorableLinkedList1.size = (-1);
      // Undeclared exception!
      try { 
        cursorableLinkedList1.iterator();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (0) greater than the size of the list (-1).
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(1, 1);
      Integer integer0 = new Integer(1);
      linkedHashSet0.add(integer0);
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>(linkedHashSet0);
      cursorableLinkedList0.header = null;
      // Undeclared exception!
      try { 
        cursorableLinkedList0.cursor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      cursorableLinkedList0.size = (-3209);
      // Undeclared exception!
      try { 
        cursorableLinkedList0.cursor();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (0) greater than the size of the list (-3209).
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      // Undeclared exception!
      try { 
        cursorableLinkedList0.createSubListListIterator((AbstractLinkedList.LinkedSubList<Integer>) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.CursorableLinkedList$SubCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      AbstractLinkedList.LinkedSubList<Integer> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Integer>(cursorableLinkedList0, 0, 0);
      // Undeclared exception!
      try { 
        cursorableLinkedList0.createSubListListIterator(abstractLinkedList_LinkedSubList0, 34);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (34) greater than the size of the list (0).
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NodeCachingLinkedList<WeakReference<Object>> nodeCachingLinkedList0 = new NodeCachingLinkedList<WeakReference<Object>>(0);
      AbstractLinkedList.LinkedSubList<WeakReference<Object>> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<WeakReference<Object>>(nodeCachingLinkedList0, 0, 0);
      CursorableLinkedList<WeakReference<Object>> cursorableLinkedList0 = new CursorableLinkedList<WeakReference<Object>>(abstractLinkedList_LinkedSubList0);
      // Undeclared exception!
      try { 
        cursorableLinkedList0.createSubListListIterator(abstractLinkedList_LinkedSubList0, 0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.list.NodeCachingLinkedList cannot be cast to org.apache.commons.collections4.list.CursorableLinkedList
         //
         verifyException("org.apache.commons.collections4.list.CursorableLinkedList$SubCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      CursorableLinkedList<Object> cursorableLinkedList1 = new CursorableLinkedList<Object>(cursorableLinkedList0);
      cursorableLinkedList1.cursor();
      // Undeclared exception!
      try { 
        cursorableLinkedList1.broadcastNodeInserted((AbstractLinkedList.Node<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.CursorableLinkedList$Cursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      // Undeclared exception!
      try { 
        cursorableLinkedList0.addNode((AbstractLinkedList.Node<Object>) null, (AbstractLinkedList.Node<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // nodeToInsert
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      List<Integer> list0 = cursorableLinkedList0.subList(0, 0);
      CursorableLinkedList.Cursor<Integer> cursorableLinkedList_Cursor0 = cursorableLinkedList0.cursor();
      Integer integer0 = new Integer(0);
      cursorableLinkedList_Cursor0.add(integer0);
      CursorableLinkedList<Object> cursorableLinkedList1 = null;
      try {
        cursorableLinkedList1 = new CursorableLinkedList<Object>(list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = null;
      try {
        cursorableLinkedList0 = new CursorableLinkedList<Integer>((Collection<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      cursorableLinkedList0.size = (-1614);
      CursorableLinkedList<Integer> cursorableLinkedList1 = null;
      try {
        cursorableLinkedList1 = new CursorableLinkedList<Integer>(cursorableLinkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (0) greater than the size of the list (-1614).
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      AbstractLinkedList.LinkedSubList<Integer> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Integer>(cursorableLinkedList0, 0, 0);
      CursorableLinkedList.SubCursor<Integer> cursorableLinkedList_SubCursor0 = new CursorableLinkedList.SubCursor<Integer>(abstractLinkedList_LinkedSubList0, 0);
      Integer integer0 = new Integer(441);
      AbstractLinkedList.Node<Integer> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Integer>(integer0);
      cursorableLinkedList_SubCursor0.nodeRemoved(abstractLinkedList_Node0);
      boolean boolean0 = cursorableLinkedList_SubCursor0.hasPrevious();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      Iterator<Object> iterator0 = cursorableLinkedList0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      // Undeclared exception!
      try { 
        cursorableLinkedList0.cursor((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (-1) less than zero.
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(1845, 1845);
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>(linkedHashSet0);
      CursorableLinkedList.Cursor<Integer> cursorableLinkedList_Cursor0 = cursorableLinkedList0.cursor();
      cursorableLinkedList_Cursor0.close();
      cursorableLinkedList_Cursor0.close();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      AbstractLinkedList.LinkedSubList<Integer> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Integer>(cursorableLinkedList0, 0, 0);
      CursorableLinkedList.SubCursor<Integer> cursorableLinkedList_SubCursor0 = new CursorableLinkedList.SubCursor<Integer>(abstractLinkedList_LinkedSubList0, 0);
      Integer integer0 = new Integer(0);
      cursorableLinkedList_SubCursor0.add(integer0);
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>(abstractLinkedList_LinkedSubList0);
      cursorableLinkedList_SubCursor0.add(integer0);
      assertTrue(abstractLinkedList_LinkedSubList0.contains(0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      AbstractLinkedList.LinkedSubList<Integer> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Integer>(cursorableLinkedList0, 0, 0);
      CursorableLinkedList.SubCursor<Integer> cursorableLinkedList_SubCursor0 = new CursorableLinkedList.SubCursor<Integer>(abstractLinkedList_LinkedSubList0, 0);
      Integer integer0 = new Integer(0);
      cursorableLinkedList_SubCursor0.add(integer0);
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>(abstractLinkedList_LinkedSubList0);
      cursorableLinkedList0.removeAllNodes();
      assertFalse(cursorableLinkedList0.contains(0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      AbstractLinkedList.LinkedSubList<Integer> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Integer>(cursorableLinkedList0, 0, 0);
      CursorableLinkedList.SubCursor<Integer> cursorableLinkedList_SubCursor0 = new CursorableLinkedList.SubCursor<Integer>(abstractLinkedList_LinkedSubList0, 0);
      Integer integer0 = new Integer(0);
      cursorableLinkedList_SubCursor0.add(integer0);
      cursorableLinkedList0.registerCursor(cursorableLinkedList_SubCursor0);
      cursorableLinkedList0.removeAllNodes();
      assertEquals(0, cursorableLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      AbstractLinkedList.LinkedSubList<Integer> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Integer>(cursorableLinkedList0, 0, 0);
      CursorableLinkedList.SubCursor<Integer> cursorableLinkedList_SubCursor0 = new CursorableLinkedList.SubCursor<Integer>(abstractLinkedList_LinkedSubList0, 0);
      Integer integer0 = new Integer(0);
      cursorableLinkedList_SubCursor0.add(integer0);
      cursorableLinkedList0.registerCursor(cursorableLinkedList_SubCursor0);
      cursorableLinkedList_SubCursor0.add(integer0);
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>(abstractLinkedList_LinkedSubList0);
      AbstractLinkedList.Node<Integer> abstractLinkedList_Node0 = nodeCachingLinkedList0.createNode(integer0);
      cursorableLinkedList_SubCursor0.nodeRemoved(abstractLinkedList_Node0);
      assertTrue(cursorableLinkedList0.contains(0));
      
      boolean boolean0 = cursorableLinkedList_SubCursor0.hasPrevious();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      AbstractLinkedList.LinkedSubList<Integer> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Integer>(cursorableLinkedList0, 0, 0);
      CursorableLinkedList.SubCursor<Integer> cursorableLinkedList_SubCursor0 = new CursorableLinkedList.SubCursor<Integer>(abstractLinkedList_LinkedSubList0, 0);
      cursorableLinkedList_SubCursor0.currentRemovedByAnother = true;
      cursorableLinkedList_SubCursor0.remove();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      CursorableLinkedList.Cursor<Object> cursorableLinkedList_Cursor0 = cursorableLinkedList0.cursor();
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(cursorableLinkedList0, 0, 0);
      CursorableLinkedList.SubCursor<Object> cursorableLinkedList_SubCursor0 = new CursorableLinkedList.SubCursor<Object>(abstractLinkedList_LinkedSubList0, 0);
      AbstractLinkedList.Node<Object> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Object>(cursorableLinkedList_Cursor0);
      cursorableLinkedList_SubCursor0.current = abstractLinkedList_Node0;
      // Undeclared exception!
      try { 
        cursorableLinkedList_SubCursor0.remove();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(1845, 1845);
      Integer integer0 = new Integer(1845);
      linkedHashSet0.add(integer0);
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>(linkedHashSet0);
      cursorableLinkedList0.registerCursor((CursorableLinkedList.Cursor<Integer>) null);
      cursorableLinkedList0.removeAllNodes();
      assertTrue(cursorableLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      cursorableLinkedList0.cursor();
      AbstractLinkedList.Node<Integer> abstractLinkedList_Node0 = cursorableLinkedList0.createHeaderNode();
      cursorableLinkedList0.broadcastNodeRemoved(abstractLinkedList_Node0);
      assertTrue(cursorableLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      cursorableLinkedList0.cursor();
      CursorableLinkedList.Cursor<Integer> cursorableLinkedList_Cursor0 = cursorableLinkedList0.cursor();
      cursorableLinkedList0.unregisterCursor(cursorableLinkedList_Cursor0);
      assertEquals(0, cursorableLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      CursorableLinkedList.Cursor<Integer> cursorableLinkedList_Cursor0 = new CursorableLinkedList.Cursor<Integer>(cursorableLinkedList0, 0);
      cursorableLinkedList_Cursor0.close();
      // Undeclared exception!
      try { 
        cursorableLinkedList_Cursor0.remove();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // Cursor closed
         //
         verifyException("org.apache.commons.collections4.list.CursorableLinkedList$Cursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      cursorableLinkedList0.registerCursor((CursorableLinkedList.Cursor<Integer>) null);
      CursorableLinkedList.Cursor<Integer> cursorableLinkedList_Cursor0 = cursorableLinkedList0.cursor();
      assertNotNull(cursorableLinkedList_Cursor0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      cursorableLinkedList0.removeAllNodes();
      assertTrue(cursorableLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      AbstractLinkedList.LinkedSubList<Integer> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Integer>(cursorableLinkedList0, 0, 0);
      CursorableLinkedList.SubCursor<Integer> cursorableLinkedList_SubCursor0 = new CursorableLinkedList.SubCursor<Integer>(abstractLinkedList_LinkedSubList0, 0);
      // Undeclared exception!
      try { 
        cursorableLinkedList_SubCursor0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      cursorableLinkedList0.cursor();
      AbstractLinkedList.Node<Object> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Object>();
      cursorableLinkedList0.broadcastNodeChanged(abstractLinkedList_Node0);
      assertEquals(0, cursorableLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CursorableLinkedList<InputStream> cursorableLinkedList0 = new CursorableLinkedList<InputStream>();
      ListIterator<InputStream> listIterator0 = cursorableLinkedList0.listIterator(0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CursorableLinkedList<WeakReference<Integer>> cursorableLinkedList0 = new CursorableLinkedList<WeakReference<Integer>>();
      CursorableLinkedList<WeakReference<Object>> cursorableLinkedList1 = new CursorableLinkedList<WeakReference<Object>>();
      WeakReference<Object> weakReference0 = new WeakReference<Object>(cursorableLinkedList0);
      // Undeclared exception!
      try { 
        cursorableLinkedList1.updateNode((AbstractLinkedList.Node<WeakReference<Object>>) null, weakReference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      cursorableLinkedList0.size = 3;
      List<Integer> list0 = cursorableLinkedList0.subList(2, 2);
      CursorableLinkedList<Integer> cursorableLinkedList1 = new CursorableLinkedList<Integer>(list0);
      assertEquals(0, cursorableLinkedList1.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      ListIterator<Integer> listIterator0 = cursorableLinkedList0.listIterator();
      assertFalse(listIterator0.hasNext());
  }
}
