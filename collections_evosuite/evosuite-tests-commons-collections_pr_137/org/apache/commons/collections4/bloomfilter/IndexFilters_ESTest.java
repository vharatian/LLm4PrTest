/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 17:01:44 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.IntSummaryStatistics;
import java.util.LinkedList;
import java.util.LongSummaryStatistics;
import org.apache.commons.collections4.bloomfilter.IndexFilters;
import org.apache.commons.collections4.bloomfilter.hasher.DynamicHasher;
import org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentity;
import org.apache.commons.collections4.bloomfilter.hasher.Hasher;
import org.apache.commons.collections4.bloomfilter.hasher.Shape;
import org.apache.commons.collections4.bloomfilter.hasher.function.MD5Cyclic;
import org.apache.commons.collections4.bloomfilter.hasher.function.ObjectsHashIterative;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class IndexFilters_ESTest extends IndexFilters_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LongSummaryStatistics longSummaryStatistics0 = new LongSummaryStatistics();
      // Undeclared exception!
      try { 
        IndexFilters.distinctIndexes((Hasher) null, (Shape) null, longSummaryStatistics0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // hasher
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LongSummaryStatistics longSummaryStatistics0 = new LongSummaryStatistics();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[7];
      linkedList0.add(byteArray0);
      linkedList0.add(byteArray0);
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, (int) (byte)3, (int) (byte)3);
      IndexFilters.distinctIndexes(dynamicHasher0, shape0, longSummaryStatistics0);
      assertEquals(1, shape0.getNumberOfHashFunctions());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) mD5Cyclic0, 18, 18, 18);
      IntSummaryStatistics intSummaryStatistics0 = new IntSummaryStatistics();
      // Undeclared exception!
      try { 
        IndexFilters.distinctIndexes(dynamicHasher0, shape0, intSummaryStatistics0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hash functions are not equal: (Objects32-SIGNED-ITERATIVE) != (MD5-SIGNED-CYCLIC)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.HashFunctionValidator", e);
      }
  }
}
