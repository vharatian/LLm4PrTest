/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 10:12:05 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter;
import org.apache.commons.collections4.bloomfilter.BitMapProducer;
import org.apache.commons.collections4.bloomfilter.IndexProducer;
import org.apache.commons.collections4.bloomfilter.Shape;
import org.apache.commons.collections4.bloomfilter.SparseBloomFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class IndexProducer_ESTest extends IndexProducer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-2754L);
      BitMapProducer bitMapProducer0 = BitMapProducer.fromBitMapArray(longArray0);
      IndexProducer indexProducer0 = IndexProducer.fromBitMapProducer(bitMapProducer0);
      BitMapProducer bitMapProducer1 = BitMapProducer.fromIndexProducer(indexProducer0, 17);
      assertNotSame(bitMapProducer0, bitMapProducer1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      long[] longArray0 = new long[1];
      BitMapProducer bitMapProducer0 = BitMapProducer.fromBitMapArray(longArray0);
      IndexProducer indexProducer0 = IndexProducer.fromBitMapProducer(bitMapProducer0);
      int[] intArray0 = indexProducer0.asIndexArray();
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        IndexProducer.fromBitMapProducer((BitMapProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // producer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      int[] intArray0 = new int[0];
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      BitMapProducer bitMapProducer0 = BitMapProducer.fromIndexProducer(indexProducer0, 1073741824);
      IndexProducer indexProducer1 = IndexProducer.fromBitMapProducer(bitMapProducer0);
      // Undeclared exception!
      indexProducer1.asIndexArray();
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray((int[]) null);
      // Undeclared exception!
      try { 
        indexProducer0.asIndexArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.IndexProducer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      int[] intArray0 = new int[14];
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      BitMapProducer bitMapProducer0 = BitMapProducer.fromIndexProducer(indexProducer0, 3);
      Shape shape0 = Shape.fromNMK(3, 3, 3);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.contains(bitMapProducer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      int[] intArray0 = new int[14];
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      Shape shape0 = Shape.fromKM(30, 30);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      boolean boolean0 = sparseBloomFilter0.contains(indexProducer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      int[] intArray0 = new int[1];
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      BitMapProducer bitMapProducer0 = BitMapProducer.fromIndexProducer(indexProducer0, 8);
      IndexProducer indexProducer1 = IndexProducer.fromBitMapProducer(bitMapProducer0);
      int[] intArray1 = indexProducer1.asIndexArray();
      assertArrayEquals(new int[] {0}, intArray1);
  }
}
