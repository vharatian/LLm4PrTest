/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 11:47:26 GMT 2025
 */

package org.apache.commons.collections4.comparators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.ToDoubleFunction;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.comparators.TransformingComparator;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.CloneTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class TransformingComparator_ESTest extends TransformingComparator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Transformer<Object, Object> transformer0 = NOPTransformer.nopTransformer();
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(toDoubleFunction0).applyAsDouble(any());
      Comparator<Object> comparator0 = Comparator.comparingDouble((ToDoubleFunction<? super Object>) toDoubleFunction0);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      TransformingComparator<Predicate<Object>, Object> transformingComparator0 = new TransformingComparator<Predicate<Object>, Object>(transformer0, comparator0);
      HashMap<Object, Predicate<Object>> hashMap0 = new HashMap<Object, Predicate<Object>>();
      Transformer<Object, Predicate<Object>> transformer1 = MapTransformer.mapTransformer((Map<? super Object, ? extends Predicate<Object>>) hashMap0);
      TransformingComparator<Predicate<Object>, Predicate<Object>> transformingComparator1 = new TransformingComparator<Predicate<Object>, Predicate<Object>>(transformer1, transformingComparator0);
      int int0 = transformingComparator1.compare(allPredicate0, predicate0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Transformer<Object, Object> transformer0 = NOPTransformer.nopTransformer();
      TransformingComparator<Object, Object> transformingComparator0 = new TransformingComparator<Object, Object>(transformer0);
      Comparator<Object> comparator0 = Comparator.nullsFirst((Comparator<? super Object>) transformingComparator0);
      TransformingComparator<Object, Object> transformingComparator1 = new TransformingComparator<Object, Object>(transformer0, comparator0);
      int int0 = transformingComparator1.compare(transformingComparator0, (Object) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      ConstantTransformer<Object, Object> constantTransformer0 = new ConstantTransformer<Object, Object>(object0);
      TransformingComparator<TruePredicate<Object>, Object> transformingComparator0 = new TransformingComparator<TruePredicate<Object>, Object>(constantTransformer0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) transformingComparator0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      Transformer<Object, Predicate<Object>> transformer0 = ExceptionTransformer.exceptionTransformer();
      IfTransformer<Object, Predicate<Object>> ifTransformer0 = new IfTransformer<Object, Predicate<Object>>(andPredicate0, transformer0, transformer0);
      TransformingComparator<Object, Predicate<Object>> transformingComparator1 = new TransformingComparator<Object, Predicate<Object>>(ifTransformer0);
      // Undeclared exception!
      try { 
        transformingComparator1.compare(transformingComparator0, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparator<Integer> comparator0 = Comparator.nullsFirst((Comparator<? super Integer>) null);
      TransformingComparator<Object, Integer> transformingComparator0 = new TransformingComparator<Object, Integer>((Transformer<? super Object, ? extends Integer>) null, comparator0);
      TransformingComparator<TransformingComparator<Object, Integer>, Integer> transformingComparator1 = new TransformingComparator<TransformingComparator<Object, Integer>, Integer>((Transformer<? super TransformingComparator<Object, Integer>, ? extends Integer>) null);
      // Undeclared exception!
      try { 
        transformingComparator1.compare(transformingComparator0, transformingComparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.TransformingComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Transformer<Object, Object> transformer0 = CloneTransformer.cloneTransformer();
      TransformingComparator<Object, Object> transformingComparator0 = new TransformingComparator<Object, Object>(transformer0);
      // Undeclared exception!
      try { 
        transformingComparator0.compare(transformer0, transformer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The prototype must be cloneable via a public clone method
         //
         verifyException("org.apache.commons.collections4.functors.PrototypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Transformer<Object, Predicate<Object>> transformer0 = ConstantTransformer.constantTransformer((Predicate<Object>) uniquePredicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      predicateArray0[0] = (Predicate<Object>) uniquePredicate0;
      Transformer<Object, Predicate<Object>>[] transformerArray0 = (Transformer<Object, Predicate<Object>>[]) Array.newInstance(Transformer.class, 0);
      SwitchTransformer<Object, Predicate<Object>> switchTransformer0 = new SwitchTransformer<Object, Predicate<Object>>(predicateArray0, transformerArray0, transformer0);
      TransformingComparator<Predicate<Object>, Predicate<Object>> transformingComparator0 = new TransformingComparator<Predicate<Object>, Predicate<Object>>(switchTransformer0);
      // Undeclared exception!
      try { 
        transformingComparator0.compare(predicateArray0[1], predicateArray0[3]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Transformer<ComparatorPredicate.Criterion, Predicate<Integer>> transformer0 = InvokerTransformer.invokerTransformer("]%T$hmEz");
      TransformingComparator<ComparatorPredicate.Criterion, Predicate<Integer>> transformingComparator0 = new TransformingComparator<ComparatorPredicate.Criterion, Predicate<Integer>>(transformer0);
      HashMap<TransformingComparator<Integer, Integer>, TransformingComparator<Integer, Integer>> hashMap0 = new HashMap<TransformingComparator<Integer, Integer>, TransformingComparator<Integer, Integer>>();
      Transformer<TransformingComparator<Integer, Integer>, TransformingComparator<Integer, Integer>> transformer1 = MapTransformer.mapTransformer((Map<? super TransformingComparator<Integer, Integer>, ? extends TransformingComparator<Integer, Integer>>) hashMap0);
      TransformingComparator<TransformingComparator<Integer, Integer>, TransformingComparator<Integer, Integer>> transformingComparator1 = new TransformingComparator<TransformingComparator<Integer, Integer>, TransformingComparator<Integer, Integer>>(transformer1);
      boolean boolean0 = transformingComparator1.equals(transformingComparator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Transformer<ComparatorPredicate.Criterion, Predicate<Integer>> transformer0 = InvokerTransformer.invokerTransformer("]%T$hmEz");
      TransformingComparator<ComparatorPredicate.Criterion, Predicate<Integer>> transformingComparator0 = new TransformingComparator<ComparatorPredicate.Criterion, Predicate<Integer>>(transformer0);
      Transformer<Object, Integer> transformer1 = ExceptionTransformer.exceptionTransformer();
      TransformingComparator<Object, Integer> transformingComparator1 = new TransformingComparator<Object, Integer>(transformer1, (Comparator<Integer>) null);
      boolean boolean0 = transformingComparator1.equals(transformingComparator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Transformer<Object, Object> transformer0 = NOPTransformer.nopTransformer();
      TransformingComparator<Object, Object> transformingComparator0 = new TransformingComparator<Object, Object>(transformer0);
      TransformingComparator<Object, Object> transformingComparator1 = new TransformingComparator<Object, Object>(transformer0);
      boolean boolean0 = transformingComparator0.equals(transformingComparator1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TransformingComparator<TruePredicate<Object>, Object> transformingComparator0 = new TransformingComparator<TruePredicate<Object>, Object>((Transformer<? super TruePredicate<Object>, ?>) null);
      boolean boolean0 = transformingComparator0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      ConstantTransformer<Object, Object> constantTransformer0 = new ConstantTransformer<Object, Object>(object0);
      TransformingComparator<TruePredicate<Object>, Object> transformingComparator0 = new TransformingComparator<TruePredicate<Object>, Object>(constantTransformer0);
      boolean boolean0 = transformingComparator0.equals(transformingComparator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      TransformingComparator<Object, Integer> transformingComparator0 = new TransformingComparator<Object, Integer>((Transformer<? super Object, ? extends Integer>) null);
      boolean boolean0 = transformingComparator0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TransformingComparator<Object, Integer> transformingComparator0 = new TransformingComparator<Object, Integer>((Transformer<? super Object, ? extends Integer>) null);
      transformingComparator0.hashCode();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Transformer<Object, Object> transformer0 = NOPTransformer.nopTransformer();
      TransformingComparator<TransformingComparator<Integer, Integer>, Object> transformingComparator0 = new TransformingComparator<TransformingComparator<Integer, Integer>, Object>(transformer0, (Comparator<Object>) null);
      transformingComparator0.hashCode();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      ConstantTransformer<Object, Predicate<Object>> constantTransformer0 = new ConstantTransformer<Object, Predicate<Object>>(predicate0);
      TransformingComparator<Predicate<Object>, Predicate<Object>> transformingComparator0 = new TransformingComparator<Predicate<Object>, Predicate<Object>>(constantTransformer0);
      // Undeclared exception!
      try { 
        transformingComparator0.compare(predicate0, predicate0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.FalsePredicate cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.collections4.comparators.ComparableComparator", e);
      }
  }
}
