/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 11:45:17 GMT 2025
 */

package org.apache.commons.collections4.comparators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.LongBuffer;
import java.util.BitSet;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.ToIntFunction;
import java.util.function.ToLongFunction;
import org.apache.commons.collections4.comparators.ComparatorChain;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ComparatorChain_ESTest extends ComparatorChain_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      Comparator<Object> comparator0 = Comparator.nullsLast((Comparator<? super Object>) comparatorChain0);
      comparatorChain0.addComparator(comparator0, true);
      comparatorChain0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      int int0 = comparatorChain0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      BitSet bitSet0 = new BitSet();
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(linkedList0, bitSet0);
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>(comparatorChain0, false);
      int int0 = comparatorChain1.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>();
      // Undeclared exception!
      try { 
        comparatorChain0.setReverseSort((-130));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -130
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(721);
      ToLongFunction<Integer> toLongFunction0 = (ToLongFunction<Integer>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(toLongFunction0).applyAsLong(anyInt());
      Comparator<Integer> comparator0 = Comparator.comparingLong((ToLongFunction<? super Integer>) toLongFunction0);
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>(comparator0, true);
      comparatorChain0.compare(integer0, (Integer) null);
      // Undeclared exception!
      try { 
        comparatorChain0.setForwardSort(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Comparator ordering cannot be changed after the first comparison is performed
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ComparatorChain<LongBuffer> comparatorChain0 = new ComparatorChain<LongBuffer>();
      // Undeclared exception!
      try { 
        comparatorChain0.setForwardSort((-2460));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -2460
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      Comparator<Integer> comparator0 = Comparator.nullsFirst((Comparator<? super Integer>) comparatorChain0);
      ComparatorChain<Integer> comparatorChain1 = new ComparatorChain<Integer>(comparator0, true);
      Integer integer0 = new Integer(3235);
      comparatorChain1.compare(integer0, (Integer) null);
      // Undeclared exception!
      try { 
        comparatorChain1.setComparator(3235, comparator0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Comparator ordering cannot be changed after the first comparison is performed
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      Comparator<Comparator<Object>> comparator0 = Comparator.nullsLast((Comparator<? super Comparator<Object>>) comparatorChain0);
      ComparatorChain<Comparator<Object>> comparatorChain1 = new ComparatorChain<Comparator<Object>>((List<Comparator<Comparator<Object>>>) null, (BitSet) null);
      // Undeclared exception!
      try { 
        comparatorChain1.setComparator(1, comparator0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ComparatorChain<LongBuffer> comparatorChain0 = new ComparatorChain<LongBuffer>();
      // Undeclared exception!
      try { 
        comparatorChain0.setComparator(1, (Comparator<LongBuffer>) comparatorChain0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      // Undeclared exception!
      try { 
        comparatorChain0.setComparator((-1), (Comparator<Object>) null, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      try { 
        comparatorChain0.setComparator(1, (Comparator<Object>) comparatorChain0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(linkedList0);
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>(comparatorChain0);
      try { 
        comparatorChain1.setComparator((-2478), (Comparator<Object>) comparatorChain0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(721);
      ToLongFunction<Integer> toLongFunction0 = (ToLongFunction<Integer>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(toLongFunction0).applyAsLong(anyInt());
      Comparator<Integer> comparator0 = Comparator.comparingLong((ToLongFunction<? super Integer>) toLongFunction0);
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>(comparator0, true);
      comparatorChain0.compare(integer0, (Integer) null);
      // Undeclared exception!
      try { 
        comparatorChain0.addComparator(comparator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Comparator ordering cannot be changed after the first comparison is performed
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BitSet bitSet0 = new BitSet(2147483645);
      ComparatorChain<ComparatorChain<Object>> comparatorChain0 = new ComparatorChain<ComparatorChain<Object>>((List<Comparator<ComparatorChain<Object>>>) null, bitSet0);
      // Undeclared exception!
      try { 
        comparatorChain0.addComparator((Comparator<ComparatorChain<Object>>) comparatorChain0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = null;
      try {
        comparatorChain0 = new ComparatorChain<Object>((List<Comparator<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-769), (-1), 0, 0).when(toIntFunction0).applyAsInt(any());
      Comparator<Integer> comparator0 = Comparator.comparingInt((ToIntFunction<? super Integer>) toIntFunction0);
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>(comparator0);
      Integer integer0 = new Integer((-908));
      comparatorChain0.compare(integer0, integer0);
      int int0 = comparatorChain0.compare(integer0, integer0);
      assertTrue(comparatorChain0.isLocked());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ComparatorChain<ComparatorChain<ByteBuffer>> comparatorChain0 = new ComparatorChain<ComparatorChain<ByteBuffer>>((Comparator<ComparatorChain<ByteBuffer>>) null);
      comparatorChain0.setComparator(0, (Comparator<ComparatorChain<ByteBuffer>>) null, false);
      assertFalse(comparatorChain0.isLocked());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      LinkedList<Comparator<ComparatorChain<ByteBuffer>>> linkedList0 = new LinkedList<Comparator<ComparatorChain<ByteBuffer>>>();
      ComparatorChain<ComparatorChain<ByteBuffer>> comparatorChain0 = new ComparatorChain<ComparatorChain<ByteBuffer>>(linkedList0, bitSet0);
      comparatorChain0.addComparator((Comparator<ComparatorChain<ByteBuffer>>) comparatorChain0, false);
      comparatorChain0.addComparator((Comparator<ComparatorChain<ByteBuffer>>) comparatorChain0, true);
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      ComparatorChain<Integer> comparatorChain1 = new ComparatorChain<Integer>();
      boolean boolean0 = comparatorChain1.equals(comparatorChain0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>(comparatorChain0);
      boolean boolean0 = comparatorChain0.equals(comparatorChain1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>(comparatorChain0, true);
      boolean boolean0 = comparatorChain1.equals(comparatorChain0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      boolean boolean0 = comparatorChain0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ComparatorChain<LongBuffer> comparatorChain0 = new ComparatorChain<LongBuffer>();
      boolean boolean0 = comparatorChain0.equals(comparatorChain0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ComparatorChain<Comparable<Object>> comparatorChain0 = new ComparatorChain<Comparable<Object>>();
      Object object0 = new Object();
      boolean boolean0 = comparatorChain0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>((List<Comparator<Object>>) null, (BitSet) null);
      comparatorChain0.hashCode();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      Integer integer0 = new Integer((-1));
      Comparator<Integer> comparator0 = Comparator.nullsFirst((Comparator<? super Integer>) comparatorChain0);
      ComparatorChain<Integer> comparatorChain1 = new ComparatorChain<Integer>(comparator0, true);
      comparatorChain1.compare((Integer) null, integer0);
      boolean boolean0 = comparatorChain1.isLocked();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      try { 
        comparatorChain0.compare(comparatorChain0, comparatorChain0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ComparatorChains must contain at least one Comparator
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      Integer integer0 = new Integer(721);
      Comparator<Integer> comparator0 = Comparator.nullsFirst((Comparator<? super Integer>) comparatorChain0);
      ComparatorChain<Integer> comparatorChain1 = new ComparatorChain<Integer>(comparator0, true);
      comparatorChain1.compare(integer0, (Integer) null);
      // Undeclared exception!
      try { 
        comparatorChain1.setComparator(0, comparator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Comparator ordering cannot be changed after the first comparison is performed
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>((Comparator<Integer>) null);
      comparatorChain0.setComparator(0, (Comparator<Integer>) null, true);
      assertEquals(1, comparatorChain0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      Comparator<Integer> comparator0 = Comparator.nullsFirst((Comparator<? super Integer>) comparatorChain0);
      ComparatorChain<Integer> comparatorChain1 = new ComparatorChain<Integer>(comparator0, true);
      comparatorChain1.setComparator(0, comparator0);
      assertFalse(comparatorChain1.isLocked());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ToLongFunction<Integer> toLongFunction0 = (ToLongFunction<Integer>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Integer> comparator0 = Comparator.comparingLong((ToLongFunction<? super Integer>) toLongFunction0);
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>(comparator0, true);
      comparatorChain0.setForwardSort(1);
      assertFalse(comparatorChain0.isLocked());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>((Comparator<Object>) null);
      // Undeclared exception!
      try { 
        comparatorChain0.compare((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      Comparator<Integer> comparator0 = Comparator.nullsFirst((Comparator<? super Integer>) comparatorChain0);
      ComparatorChain<Integer> comparatorChain1 = new ComparatorChain<Integer>(comparator0, true);
      comparatorChain1.addComparator(comparator0);
      assertEquals(2, comparatorChain1.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      Comparator<Integer> comparator0 = Comparator.nullsFirst((Comparator<? super Integer>) comparatorChain0);
      ComparatorChain<Integer> comparatorChain1 = new ComparatorChain<Integer>(comparator0, true);
      boolean boolean0 = comparatorChain1.isLocked();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BitSet bitSet0 = BitSet.valueOf(byteArray0);
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>((List<Comparator<Integer>>) null, bitSet0);
      // Undeclared exception!
      try { 
        comparatorChain0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      comparatorChain0.setReverseSort(1360);
      assertFalse(comparatorChain0.isLocked());
  }
}
