/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 11:55:20 GMT 2025
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.apache.commons.collections4.map.StaticBucketMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class StaticBucketMap_ESTest extends StaticBucketMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StaticBucketMap<MockThread, HashMap<MockThread, MockThread>> staticBucketMap0 = new StaticBucketMap<MockThread, HashMap<MockThread, MockThread>>();
      MockThread mockThread0 = new MockThread();
      HashMap<MockThread, MockThread> hashMap0 = staticBucketMap0.put(mockThread0, (HashMap<MockThread, MockThread>) null);
      BiFunction<MockThread, HashMap<MockThread, MockThread>, HashMap<MockThread, MockThread>> biFunction0 = (BiFunction<MockThread, HashMap<MockThread, MockThread>, HashMap<MockThread, MockThread>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(hashMap0).when(biFunction0).apply(any(org.evosuite.runtime.mock.java.lang.MockThread.class) , any(java.util.HashMap.class));
      staticBucketMap0.replaceAll(biFunction0);
      assertEquals(1, staticBucketMap0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StaticBucketMap<MockThread, MockThread> staticBucketMap0 = new StaticBucketMap<MockThread, MockThread>(96);
      MockThread mockThread0 = new MockThread("88JVL2|r&ZG|,fK+5");
      MockThread mockThread1 = new MockThread(mockThread0, "");
      staticBucketMap0.put(mockThread1, mockThread0);
      HashMap<MockThread, MockThread> hashMap0 = new HashMap<MockThread, MockThread>(staticBucketMap0);
      assertEquals(1, staticBucketMap0.size());
      assertFalse(staticBucketMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StaticBucketMap<MockThread, MockThread> staticBucketMap0 = new StaticBucketMap<MockThread, MockThread>((-1));
      MockThread mockThread0 = new MockThread("");
      StaticBucketMap<HashMap<MockThread, MockThread>, MockThread> staticBucketMap1 = new StaticBucketMap<HashMap<MockThread, MockThread>, MockThread>((-4746));
      HashMap<MockThread, MockThread> hashMap0 = new HashMap<MockThread, MockThread>();
      BiFunction<HashMap<MockThread, MockThread>, MockThread, MockThread> biFunction0 = (BiFunction<HashMap<MockThread, MockThread>, MockThread, MockThread>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any(java.util.HashMap.class) , any(org.evosuite.runtime.mock.java.lang.MockThread.class));
      staticBucketMap1.compute(hashMap0, biFunction0);
      StaticBucketMap<MockThread, HashMap<MockThread, MockThread>> staticBucketMap2 = new StaticBucketMap<MockThread, HashMap<MockThread, MockThread>>(0);
      StaticBucketMap<HashMap<MockThread, MockThread>, HashMap<MockThread, MockThread>> staticBucketMap3 = new StaticBucketMap<HashMap<MockThread, MockThread>, HashMap<MockThread, MockThread>>((-1));
      boolean boolean0 = staticBucketMap3.containsKey(mockThread0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StaticBucketMap<HashMap<MockThread, MockThread>, HashMap<MockThread, MockThread>> staticBucketMap0 = new StaticBucketMap<HashMap<MockThread, MockThread>, HashMap<MockThread, MockThread>>(233);
      Set<Map.Entry<HashMap<MockThread, MockThread>, HashMap<MockThread, MockThread>>> set0 = (Set<Map.Entry<HashMap<MockThread, MockThread>, HashMap<MockThread, MockThread>>>)staticBucketMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StaticBucketMap<MockThread, HashMap<MockThread, MockThread>> staticBucketMap0 = new StaticBucketMap<MockThread, HashMap<MockThread, MockThread>>();
      int int0 = staticBucketMap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      StaticBucketMap<MockThread, HashMap<MockThread, MockThread>> staticBucketMap0 = new StaticBucketMap<MockThread, HashMap<MockThread, MockThread>>(237);
      staticBucketMap0.put(mockThread0, (HashMap<MockThread, MockThread>) null);
      int int0 = staticBucketMap0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StaticBucketMap<MockThread, MockThread> staticBucketMap0 = new StaticBucketMap<MockThread, MockThread>();
      MockThread mockThread0 = new MockThread("Df\"`:3x.vF1h?I");
      staticBucketMap0.put(mockThread0, mockThread0);
      staticBucketMap0.remove((Object) mockThread0);
      assertTrue(staticBucketMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      StaticBucketMap<HashMap<MockThread, MockThread>, MockThread> staticBucketMap0 = new StaticBucketMap<HashMap<MockThread, MockThread>, MockThread>(214);
      staticBucketMap0.put((HashMap<MockThread, MockThread>) null, mockThread0);
      staticBucketMap0.put((HashMap<MockThread, MockThread>) null, (MockThread) null);
      assertFalse(staticBucketMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StaticBucketMap<HashMap<MockThread, MockThread>, MockThread> staticBucketMap0 = new StaticBucketMap<HashMap<MockThread, MockThread>, MockThread>();
      MockThread mockThread0 = staticBucketMap0.get((Object) null);
      assertNull(mockThread0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StaticBucketMap<MockThread, HashMap<MockThread, MockThread>> staticBucketMap0 = new StaticBucketMap<MockThread, HashMap<MockThread, MockThread>>();
      HashMap<MockThread, MockThread> hashMap0 = new HashMap<MockThread, MockThread>();
      staticBucketMap0.put((MockThread) null, hashMap0);
      staticBucketMap0.get((Object) null);
      assertEquals(1, staticBucketMap0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StaticBucketMap<MockThread, MockThread> staticBucketMap0 = new StaticBucketMap<MockThread, MockThread>();
      staticBucketMap0.put((MockThread) null, (MockThread) null);
      boolean boolean0 = staticBucketMap0.containsKey((Object) null);
      assertEquals(1, staticBucketMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StaticBucketMap<MockThread, MockThread> staticBucketMap0 = new StaticBucketMap<MockThread, MockThread>();
      // Undeclared exception!
      try { 
        staticBucketMap0.putAll((Map<? extends MockThread, ? extends MockThread>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.StaticBucketMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StaticBucketMap<MockThread, MockThread> staticBucketMap0 = new StaticBucketMap<MockThread, MockThread>();
      // Undeclared exception!
      try { 
        staticBucketMap0.atomic((Runnable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // runnable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StaticBucketMap<MockThread, HashMap<MockThread, MockThread>> staticBucketMap0 = new StaticBucketMap<MockThread, HashMap<MockThread, MockThread>>(3480);
      staticBucketMap0.values();
      StaticBucketMap<HashMap<MockThread, MockThread>, MockThread> staticBucketMap1 = new StaticBucketMap<HashMap<MockThread, MockThread>, MockThread>(3480);
      assertTrue(staticBucketMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StaticBucketMap<MockThread, HashMap<MockThread, MockThread>> staticBucketMap0 = new StaticBucketMap<MockThread, HashMap<MockThread, MockThread>>(2449);
      StaticBucketMap<MockThread, HashMap<MockThread, MockThread>> staticBucketMap1 = new StaticBucketMap<MockThread, HashMap<MockThread, MockThread>>(2449);
      staticBucketMap0.putAll(staticBucketMap1);
      StaticBucketMap<HashMap<MockThread, MockThread>, MockThread> staticBucketMap2 = new StaticBucketMap<HashMap<MockThread, MockThread>, MockThread>();
      assertEquals(0, staticBucketMap2.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      StaticBucketMap<MockThread, HashMap<MockThread, MockThread>> staticBucketMap0 = new StaticBucketMap<MockThread, HashMap<MockThread, MockThread>>(237);
      staticBucketMap0.put(mockThread0, (HashMap<MockThread, MockThread>) null);
      staticBucketMap0.hashCode();
      assertFalse(staticBucketMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StaticBucketMap<MockThread, MockThread> staticBucketMap0 = new StaticBucketMap<MockThread, MockThread>();
      StaticBucketMap<MockThread, HashMap<MockThread, MockThread>> staticBucketMap1 = new StaticBucketMap<MockThread, HashMap<MockThread, MockThread>>();
      HashMap<MockThread, MockThread> hashMap0 = new HashMap<MockThread, MockThread>(staticBucketMap0);
      staticBucketMap1.put((MockThread) null, hashMap0);
      staticBucketMap1.hashCode();
      assertEquals(1, staticBucketMap1.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StaticBucketMap<MockThread, MockThread> staticBucketMap0 = new StaticBucketMap<MockThread, MockThread>();
      MockThread mockThread0 = new MockThread();
      staticBucketMap0.put(mockThread0, mockThread0);
      staticBucketMap0.hashCode();
      assertEquals(1, staticBucketMap0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StaticBucketMap<MockThread, MockThread> staticBucketMap0 = new StaticBucketMap<MockThread, MockThread>();
      Object object0 = new Object();
      boolean boolean0 = staticBucketMap0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StaticBucketMap<MockThread, MockThread> staticBucketMap0 = new StaticBucketMap<MockThread, MockThread>();
      staticBucketMap0.clear();
      assertTrue(staticBucketMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StaticBucketMap<MockThread, MockThread> staticBucketMap0 = new StaticBucketMap<MockThread, MockThread>();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "");
      Function<MockThread, MockThread> function0 = Function.identity();
      staticBucketMap0.computeIfAbsent(mockThread0, function0);
      staticBucketMap0.putAll(staticBucketMap0);
      assertFalse(staticBucketMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StaticBucketMap<MockThread, HashMap<MockThread, MockThread>> staticBucketMap0 = new StaticBucketMap<MockThread, HashMap<MockThread, MockThread>>();
      MockThread mockThread0 = new MockThread();
      HashMap<MockThread, MockThread> hashMap0 = staticBucketMap0.remove((Object) mockThread0);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      StaticBucketMap<MockThread, HashMap<MockThread, MockThread>> staticBucketMap0 = new StaticBucketMap<MockThread, HashMap<MockThread, MockThread>>(237);
      staticBucketMap0.put(mockThread0, (HashMap<MockThread, MockThread>) null);
      staticBucketMap0.put(mockThread0, (HashMap<MockThread, MockThread>) null);
      assertFalse(staticBucketMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StaticBucketMap<MockThread, MockThread> staticBucketMap0 = new StaticBucketMap<MockThread, MockThread>();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "");
      MockThread mockThread1 = staticBucketMap0.put(mockThread0, mockThread0);
      boolean boolean0 = staticBucketMap0.containsValue(mockThread1);
      assertEquals(1, staticBucketMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StaticBucketMap<MockThread, HashMap<MockThread, MockThread>> staticBucketMap0 = new StaticBucketMap<MockThread, HashMap<MockThread, MockThread>>();
      MockThread mockThread0 = new MockThread();
      staticBucketMap0.put(mockThread0, (HashMap<MockThread, MockThread>) null);
      boolean boolean0 = staticBucketMap0.containsValue((Object) null);
      assertFalse(staticBucketMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StaticBucketMap<MockThread, MockThread> staticBucketMap0 = new StaticBucketMap<MockThread, MockThread>();
      boolean boolean0 = staticBucketMap0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StaticBucketMap<MockThread, MockThread> staticBucketMap0 = new StaticBucketMap<MockThread, MockThread>(96);
      MockThread mockThread0 = new MockThread("88JVL2|r&ZG|,fK+5");
      staticBucketMap0.put(mockThread0, mockThread0);
      boolean boolean0 = staticBucketMap0.isEmpty();
      assertEquals(1, staticBucketMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StaticBucketMap<MockThread, MockThread> staticBucketMap0 = new StaticBucketMap<MockThread, MockThread>(400);
      MockThread mockThread0 = new MockThread();
      boolean boolean0 = staticBucketMap0.containsKey(mockThread0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<MockThread, MockThread> hashMap0 = new HashMap<MockThread, MockThread>();
      StaticBucketMap<MockThread, MockThread> staticBucketMap0 = new StaticBucketMap<MockThread, MockThread>((-532));
      boolean boolean0 = staticBucketMap0.equals(hashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      StaticBucketMap<MockThread, MockThread> staticBucketMap0 = new StaticBucketMap<MockThread, MockThread>();
      Function<MockThread, MockThread> function0 = Function.identity();
      staticBucketMap0.computeIfAbsent(mockThread0, function0);
      BiFunction<MockThread, MockThread, MockThread> biFunction0 = (BiFunction<MockThread, MockThread, MockThread>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any(org.evosuite.runtime.mock.java.lang.MockThread.class) , any(org.evosuite.runtime.mock.java.lang.MockThread.class));
      staticBucketMap0.replaceAll(biFunction0);
      assertFalse(staticBucketMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      StaticBucketMap<MockThread, MockThread> staticBucketMap0 = new StaticBucketMap<MockThread, MockThread>();
      staticBucketMap0.atomic(mockThread0);
      assertTrue(staticBucketMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StaticBucketMap<MockThread, MockThread> staticBucketMap0 = new StaticBucketMap<MockThread, MockThread>();
      Set<MockThread> set0 = staticBucketMap0.keySet();
      assertEquals(0, set0.size());
  }
}
