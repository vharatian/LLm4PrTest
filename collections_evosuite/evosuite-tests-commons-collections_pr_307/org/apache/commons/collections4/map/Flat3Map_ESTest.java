/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 11:51:58 GMT 2025
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.map.AbstractHashedMap;
import org.apache.commons.collections4.map.Flat3Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Flat3Map_ESTest extends Flat3Map_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>();
      Flat3Map<Object, Object> flat3Map1 = new Flat3Map<Object, Object>();
      flat3Map1.put(flat3Map0, flat3Map0);
      boolean boolean0 = flat3Map1.equals(flat3Map0);
      assertEquals(1, flat3Map1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(344);
      Integer integer1 = new Integer(0);
      hashMap0.put(integer1, integer1);
      hashMap0.put(integer0, (Integer) null);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      Flat3Map.Values<Integer> flat3Map_Values0 = new Flat3Map.Values<Integer>(flat3Map0);
      Flat3Map<Object, Object> flat3Map1 = new Flat3Map<Object, Object>(hashMap0);
      Flat3Map.KeySet<Object> flat3Map_KeySet0 = new Flat3Map.KeySet<Object>(flat3Map1);
      boolean boolean0 = flat3Map_Values0.retainAll(flat3Map_KeySet0);
      assertEquals(1, flat3Map_Values0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>();
      Flat3Map.FlatMapEntry<Integer, Integer> flat3Map_FlatMapEntry0 = new Flat3Map.FlatMapEntry<Integer, Integer>(flat3Map0, 3);
      String string0 = flat3Map_FlatMapEntry0.toString();
      assertEquals("null=null", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(354);
      hashMap0.put(integer0, integer0);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      flat3Map0.putIfAbsent((Integer) null, (Integer) null);
      Flat3Map<Object, Object> flat3Map1 = new Flat3Map<Object, Object>(flat3Map0);
      Flat3Map.FlatMapIterator<Object, Object> flat3Map_FlatMapIterator0 = new Flat3Map.FlatMapIterator<Object, Object>(flat3Map1);
      flat3Map_FlatMapIterator0.next();
      flat3Map_FlatMapIterator0.next();
      flat3Map_FlatMapIterator0.remove();
      assertEquals(2, flat3Map0.size());
      assertFalse(flat3Map_FlatMapIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(344);
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer(0);
      hashMap0.put(integer1, integer1);
      hashMap0.put((Integer) null, integer1);
      Flat3Map<Object, Object> flat3Map0 = new Flat3Map<Object, Object>(hashMap0);
      Object object0 = flat3Map0.remove((Object) null);
      assertNotNull(object0);
      assertEquals(2, flat3Map0.size());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(12);
      Integer integer1 = new Integer(2);
      hashMap0.put(integer0, integer1);
      hashMap0.put(integer1, integer1);
      Integer integer2 = new Integer((-11));
      hashMap0.put(integer2, integer2);
      hashMap0.put((Integer) null, (Integer) null);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      Integer integer3 = new Integer((-11));
      flat3Map0.put(integer3, (Integer) null);
      Flat3Map<Object, Object> flat3Map1 = new Flat3Map<Object, Object>(flat3Map0);
      assertEquals(5, flat3Map0.size());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(353);
      hashMap0.put(integer0, integer0);
      hashMap0.put((Integer) null, integer0);
      Flat3Map<Object, Object> flat3Map0 = new Flat3Map<Object, Object>(hashMap0);
      flat3Map0.putIfAbsent(hashMap0, integer0);
      flat3Map0.putAll(flat3Map0);
      assertEquals(3, flat3Map0.size());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(308);
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer((-2058));
      hashMap0.put(integer1, (Integer) null);
      hashMap0.put((Integer) null, integer0);
      Flat3Map<Object, Object> flat3Map0 = new Flat3Map<Object, Object>(hashMap0);
      Object object0 = flat3Map0.replace((Object) integer0, (Object) null);
      assertNotNull(object0);
      assertEquals(3, flat3Map0.size());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer(344);
      hashMap0.put((Integer) null, integer1);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      flat3Map0.putAll(hashMap0);
      assertEquals(2, flat3Map0.size());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, integer0);
      hashMap0.put((Integer) null, (Integer) null);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      Integer integer1 = new Integer(796);
      Integer integer2 = flat3Map0.putIfAbsent((Integer) null, integer1);
      assertEquals(2, flat3Map0.size());
      assertNull(integer2);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(354);
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer(0);
      hashMap0.put(integer1, integer1);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      Integer integer2 = new Integer((-1293));
      flat3Map0.putIfAbsent((Integer) null, integer2);
      flat3Map0.replace((Integer) null, integer0);
      assertEquals(3, flat3Map0.size());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>();
      Flat3Map<Integer, Integer> flat3Map1 = new Flat3Map<Integer, Integer>(flat3Map0);
      Integer integer0 = new Integer(128);
      flat3Map1.putIfAbsent(integer0, integer0);
      Integer integer1 = new Integer((-370));
      flat3Map0.putIfAbsent(integer1, integer0);
      Flat3Map.Values<Integer> flat3Map_Values0 = new Flat3Map.Values<Integer>(flat3Map0);
      Flat3Map<Object, Object> flat3Map2 = new Flat3Map<Object, Object>(flat3Map0);
      Flat3Map.KeySet<Object> flat3Map_KeySet0 = new Flat3Map.KeySet<Object>(flat3Map2);
      boolean boolean0 = flat3Map_Values0.retainAll(flat3Map_KeySet0);
      assertFalse(flat3Map_Values0.contains(128));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(61);
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer((-41));
      hashMap0.put(integer1, integer1);
      hashMap0.put((Integer) null, (Integer) null);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      Integer integer2 = new Integer(61);
      boolean boolean0 = flat3Map0.replace(integer2, (Integer) null, (Integer) null);
      assertEquals(3, flat3Map0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Flat3Map<HashMap<Integer, Integer>, Object> flat3Map0 = new Flat3Map<HashMap<Integer, Integer>, Object>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      flat3Map0.computeIfAbsent(hashMap0, unaryOperator0);
      Object object0 = flat3Map0.get(flat3Map0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(354);
      hashMap0.put(integer0, integer0);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      Integer integer1 = new Integer(354);
      flat3Map0.put(integer1, (Integer) null);
      Integer integer2 = flat3Map0.getOrDefault(flat3Map0, integer0);
      assertTrue(integer2.equals((Object)integer1));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(354);
      hashMap0.put(integer0, integer0);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      Flat3Map.ValuesIterator<Integer> flat3Map_ValuesIterator0 = new Flat3Map.ValuesIterator<Integer>(flat3Map0);
      Object object0 = flat3Map_ValuesIterator0.next();
      assertEquals(354, object0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(373);
      hashMap0.put(integer0, integer0);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      Flat3Map<Object, Object> flat3Map1 = new Flat3Map<Object, Object>(flat3Map0);
      Flat3Map.KeySetIterator<Object> flat3Map_KeySetIterator0 = new Flat3Map.KeySetIterator<Object>(flat3Map1);
      assertTrue(flat3Map_KeySetIterator0.hasNext());
      
      flat3Map_KeySetIterator0.next();
      assertEquals(1, flat3Map0.size());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, integer0);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      Flat3Map.ValuesIterator<Integer> flat3Map_ValuesIterator0 = new Flat3Map.ValuesIterator<Integer>(flat3Map0);
      Map.Entry<Object, Integer> map_Entry0 = flat3Map_ValuesIterator0.nextEntry();
      assertNotNull(map_Entry0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>();
      Flat3Map.Values<Integer> flat3Map_Values0 = new Flat3Map.Values<Integer>(flat3Map0);
      flat3Map_Values0.iterator();
      assertTrue(flat3Map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Flat3Map<Integer, Object> flat3Map0 = new Flat3Map<Integer, Object>();
      Flat3Map.Values<Object> flat3Map_Values0 = new Flat3Map.Values<Object>(flat3Map0);
      boolean boolean0 = flat3Map_Values0.contains(flat3Map0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Flat3Map<Object, Integer> flat3Map0 = new Flat3Map<Object, Integer>(hashMap0);
      Flat3Map.KeySetIterator<Object> flat3Map_KeySetIterator0 = new Flat3Map.KeySetIterator<Object>(flat3Map0);
      // Undeclared exception!
      try { 
        flat3Map_KeySetIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No next() entry in the iteration
         //
         verifyException("org.apache.commons.collections4.map.Flat3Map$EntryIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>();
      Flat3Map.KeySet<Integer> flat3Map_KeySet0 = new Flat3Map.KeySet<Integer>(flat3Map0);
      Integer integer0 = new Integer(1);
      boolean boolean0 = flat3Map_KeySet0.contains(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      Flat3Map.FlatMapIterator<Integer, Integer> flat3Map_FlatMapIterator0 = new Flat3Map.FlatMapIterator<Integer, Integer>(flat3Map0);
      boolean boolean0 = flat3Map_FlatMapIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Flat3Map<Integer, Object> flat3Map0 = new Flat3Map<Integer, Object>();
      Flat3Map.FlatMapEntry<Integer, Object> flat3Map_FlatMapEntry0 = new Flat3Map.FlatMapEntry<Integer, Object>(flat3Map0, 3);
      Integer integer0 = flat3Map_FlatMapEntry0.getKey();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Flat3Map<Comparable<Object>, Integer> flat3Map0 = new Flat3Map<Comparable<Object>, Integer>();
      Flat3Map<Comparable<Object>, Object> flat3Map1 = new Flat3Map<Comparable<Object>, Object>(flat3Map0);
      Flat3Map.EntrySet<Comparable<Object>, Object> flat3Map_EntrySet0 = new Flat3Map.EntrySet<Comparable<Object>, Object>(flat3Map1);
      int int0 = flat3Map_EntrySet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Flat3Map<Map.Entry<Integer, Object>, Integer> flat3Map0 = new Flat3Map<Map.Entry<Integer, Object>, Integer>();
      Flat3Map.EntrySetIterator<Map.Entry<Integer, Object>, Integer> flat3Map_EntrySetIterator0 = new Flat3Map.EntrySetIterator<Map.Entry<Integer, Object>, Integer>(flat3Map0);
      boolean boolean0 = flat3Map_EntrySetIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      Flat3Map.EntrySet<Integer, Integer> flat3Map_EntrySet0 = new Flat3Map.EntrySet<Integer, Integer>(flat3Map0);
      flat3Map_EntrySet0.clear();
      assertEquals(0, flat3Map_EntrySet0.size());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      AbstractHashedMap<Integer, Integer> abstractHashedMap0 = flat3Map0.createDelegateMap();
      Flat3Map<Comparable<Integer>, Comparable<Integer>> flat3Map1 = new Flat3Map<Comparable<Integer>, Comparable<Integer>>(abstractHashedMap0);
      int int0 = flat3Map1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Flat3Map<HashMap<Integer, Integer>, Object> flat3Map0 = new Flat3Map<HashMap<Integer, Integer>, Object>();
      Object object0 = flat3Map0.get((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Flat3Map<Object, Object> flat3Map0 = new Flat3Map<Object, Object>();
      flat3Map0.put(hashMap0, hashMap0);
      HashMap hashMap1 = (HashMap)flat3Map0.get(hashMap0);
      assertEquals(0, hashMap1.size());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>();
      // Undeclared exception!
      try { 
        flat3Map0.putAll((Map<? extends Integer, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.Flat3Map", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Flat3Map<Integer, Integer> flat3Map0 = null;
      try {
        flat3Map0 = new Flat3Map<Integer, Integer>((Map<? extends Integer, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.Flat3Map", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Flat3Map<Object, Object> flat3Map0 = new Flat3Map<Object, Object>();
      boolean boolean0 = flat3Map0.equals(flat3Map0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Flat3Map<Integer, HashMap<Integer, Integer>> flat3Map0 = new Flat3Map<Integer, HashMap<Integer, Integer>>();
      Set<Integer> set0 = flat3Map0.keySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Flat3Map<Integer, Map.Entry<Integer, Object>> flat3Map0 = new Flat3Map<Integer, Map.Entry<Integer, Object>>();
      Flat3Map.FlatMapEntry<Integer, Map.Entry<Integer, Object>> flat3Map_FlatMapEntry0 = new Flat3Map.FlatMapEntry<Integer, Map.Entry<Integer, Object>>(flat3Map0, (-1));
      boolean boolean0 = flat3Map_FlatMapEntry0.equals(flat3Map0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(373);
      Integer integer1 = hashMap0.put(integer0, integer0);
      Integer integer2 = new Integer((-9));
      Integer integer3 = new Integer(32);
      hashMap0.put(integer3, integer1);
      Integer integer4 = hashMap0.put(integer2, integer3);
      hashMap0.put(integer4, (Integer) null);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      Set<Map.Entry<Integer, Integer>> set0 = (Set<Map.Entry<Integer, Integer>>)flat3Map0.entrySet();
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Flat3Map<HashMap<Integer, Integer>, Integer> flat3Map0 = new Flat3Map<HashMap<Integer, Integer>, Integer>();
      Set<Map.Entry<HashMap<Integer, Integer>, Integer>> set0 = (Set<Map.Entry<HashMap<Integer, Integer>, Integer>>)flat3Map0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Flat3Map<HashMap<Integer, Integer>, Object> flat3Map0 = new Flat3Map<HashMap<Integer, Integer>, Object>();
      flat3Map0.clear();
      assertTrue(flat3Map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Flat3Map<Object, Object> flat3Map0 = new Flat3Map<Object, Object>();
      Object object0 = flat3Map0.remove((Object) flat3Map0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>();
      flat3Map0.putAll(flat3Map0);
      assertTrue(flat3Map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Flat3Map<HashMap<Object, Integer>, HashMap<Object, Integer>> flat3Map0 = new Flat3Map<HashMap<Object, Integer>, HashMap<Object, Integer>>();
      Flat3Map<Object, Object> flat3Map1 = new Flat3Map<Object, Object>();
      flat3Map1.put(flat3Map0, flat3Map0);
      flat3Map1.put(flat3Map0, flat3Map0);
      assertEquals(1, flat3Map1.size());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(354);
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer(0);
      hashMap0.put(integer1, integer1);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      Integer integer2 = new Integer(1067);
      flat3Map0.putIfAbsent(integer2, integer0);
      boolean boolean0 = flat3Map0.containsValue(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, integer0);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      boolean boolean0 = flat3Map0.containsValue(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(354);
      Integer integer1 = hashMap0.put(integer0, integer0);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      flat3Map0.putIfAbsent(integer1, (Integer) null);
      boolean boolean0 = flat3Map0.containsValue((Object) null);
      assertEquals(2, flat3Map0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Flat3Map<Comparable<Integer>, HashMap<Integer, Integer>> flat3Map0 = new Flat3Map<Comparable<Integer>, HashMap<Integer, Integer>>();
      boolean boolean0 = flat3Map0.containsKey(flat3Map0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(344);
      hashMap0.put(integer0, integer0);
      Flat3Map<Object, Object> flat3Map0 = new Flat3Map<Object, Object>(hashMap0);
      boolean boolean0 = flat3Map0.isEmpty();
      assertEquals(1, flat3Map0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Flat3Map<Object, Integer> flat3Map0 = new Flat3Map<Object, Integer>();
      boolean boolean0 = flat3Map0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(354);
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer(0);
      hashMap0.put(integer1, integer1);
      Integer integer2 = hashMap0.put((Integer) null, (Integer) null);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      Integer integer3 = new Integer(354);
      flat3Map0.putIfAbsent(integer3, integer2);
      Flat3Map<Comparable<Integer>, Comparable<Integer>> flat3Map1 = new Flat3Map<Comparable<Integer>, Comparable<Integer>>(flat3Map0);
      int int0 = flat3Map1.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(3228);
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer(344);
      hashMap0.put(integer1, integer1);
      Integer integer2 = new Integer(0);
      hashMap0.put(integer2, integer2);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      String string0 = flat3Map0.toString();
      assertEquals("{3228=3228,344=344,0=0}", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(3228);
      Integer integer1 = hashMap0.put(integer0, integer0);
      hashMap0.put(integer1, integer1);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      String string0 = flat3Map0.toString();
      assertEquals("{3228=3228,null=null}", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, integer0);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      String string0 = flat3Map0.toString();
      assertEquals("{0=0}", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(1);
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer((-11));
      hashMap0.put(integer1, integer1);
      hashMap0.put((Integer) null, (Integer) null);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      Integer integer2 = new Integer((-11));
      flat3Map0.put(integer2, (Integer) null);
      flat3Map0.toString();
      assertEquals(4, flat3Map0.size());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      String string0 = flat3Map0.toString();
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(354);
      hashMap0.put(integer0, integer0);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      Integer integer1 = new Integer(354);
      flat3Map0.put(integer1, (Integer) null);
      Flat3Map<Comparable<Integer>, Comparable<Integer>> flat3Map1 = new Flat3Map<Comparable<Integer>, Comparable<Integer>>(flat3Map0);
      flat3Map1.hashCode();
      assertEquals(2, flat3Map0.size());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-3975));
      hashMap0.put(integer0, integer0);
      hashMap0.put((Integer) null, (Integer) null);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      Integer integer1 = new Integer((-3975));
      flat3Map0.put(integer1, (Integer) null);
      flat3Map0.hashCode();
      assertEquals(3, flat3Map0.size());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(358);
      hashMap0.put(integer0, integer0);
      hashMap0.put((Integer) null, integer0);
      Flat3Map<Object, Object> flat3Map0 = new Flat3Map<Object, Object>(hashMap0);
      flat3Map0.putIfAbsent(hashMap0, integer0);
      flat3Map0.hashCode();
      assertEquals(3, flat3Map0.size());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, integer0);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      flat3Map0.hashCode();
      assertEquals(1, flat3Map0.size());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-1570));
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer(367);
      hashMap0.put(integer1, integer1);
      Integer integer2 = new Integer(0);
      hashMap0.put(integer2, integer2);
      hashMap0.put((Integer) null, integer1);
      Flat3Map<Object, Object> flat3Map0 = new Flat3Map<Object, Object>(hashMap0);
      flat3Map0.hashCode();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      flat3Map0.hashCode();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.put((Integer) null, (Integer) null);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      Integer integer0 = new Integer((-41));
      Flat3Map<Object, Object> flat3Map1 = new Flat3Map<Object, Object>(hashMap0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      flat3Map1.merge((Object) null, integer0, biFunction0);
      boolean boolean0 = flat3Map1.equals(flat3Map0);
      assertFalse(boolean0);
      assertEquals(1, flat3Map1.size());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-1));
      hashMap0.put(integer0, integer0);
      Flat3Map<Object, Object> flat3Map0 = new Flat3Map<Object, Object>();
      flat3Map0.put(hashMap0, hashMap0);
      boolean boolean0 = flat3Map0.equals(hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(1);
      Integer integer1 = hashMap0.put(integer0, integer0);
      Integer integer2 = new Integer(844);
      hashMap0.put(integer2, integer0);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      hashMap1.put(integer2, (Integer) null);
      hashMap1.put((Integer) null, integer1);
      Flat3Map<Object, Object> flat3Map0 = new Flat3Map<Object, Object>(hashMap1);
      boolean boolean0 = flat3Map0.equals(hashMap0);
      assertFalse(boolean0);
      assertEquals(2, flat3Map0.size());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(608);
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer(14);
      hashMap0.put(integer1, integer1);
      hashMap0.put((Integer) null, (Integer) null);
      Flat3Map<Object, Object> flat3Map0 = new Flat3Map<Object, Object>(hashMap0);
      Flat3Map<Object, Object> flat3Map1 = flat3Map0.clone();
      boolean boolean0 = flat3Map0.equals(flat3Map1);
      assertEquals(3, flat3Map1.size());
      assertTrue(boolean0);
      assertNotSame(flat3Map1, flat3Map0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Flat3Map<Object, Object> flat3Map0 = new Flat3Map<Object, Object>();
      Flat3Map<Object, Object> flat3Map1 = new Flat3Map<Object, Object>();
      boolean boolean0 = flat3Map1.equals(flat3Map0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Integer integer0 = new Integer((-2416));
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.put(integer0, integer0);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      Flat3Map<Object, Map.Entry<Object, Integer>> flat3Map1 = new Flat3Map<Object, Map.Entry<Object, Integer>>();
      boolean boolean0 = flat3Map1.equals(flat3Map0);
      assertEquals(1, flat3Map0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Flat3Map<Object, Object> flat3Map0 = new Flat3Map<Object, Object>();
      boolean boolean0 = flat3Map0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(344);
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer((-22));
      hashMap0.put(integer1, integer1);
      hashMap0.put((Integer) null, (Integer) null);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      Integer integer2 = new Integer((-22));
      flat3Map0.put(integer2, (Integer) null);
      Flat3Map<Object, Object> flat3Map1 = new Flat3Map<Object, Object>(flat3Map0);
      boolean boolean0 = flat3Map1.equals(flat3Map0);
      assertEquals(4, flat3Map0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(340);
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer(3);
      hashMap0.put(integer1, integer1);
      hashMap0.put((Integer) null, (Integer) null);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      Integer integer2 = new Integer(3);
      flat3Map0.put(integer2, (Integer) null);
      Flat3Map<Object, Integer> flat3Map1 = new Flat3Map<Object, Integer>(flat3Map0);
      Flat3Map<Object, Integer> flat3Map2 = flat3Map1.clone();
      assertEquals(4, flat3Map0.size());
      assertNotSame(flat3Map1, flat3Map2);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      Flat3Map<Integer, Integer> flat3Map1 = flat3Map0.clone();
      assertNotSame(flat3Map1, flat3Map0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(318);
      Integer integer1 = new Integer(1945);
      hashMap0.put(integer1, integer0);
      hashMap0.put(integer0, integer0);
      Integer integer2 = new Integer(0);
      hashMap0.put(integer2, integer2);
      hashMap0.put((Integer) null, (Integer) null);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      Flat3Map.Values<Integer> flat3Map_Values0 = new Flat3Map.Values<Integer>(flat3Map0);
      Flat3Map.KeySet<Integer> flat3Map_KeySet0 = new Flat3Map.KeySet<Integer>(flat3Map0);
      boolean boolean0 = flat3Map_Values0.retainAll(flat3Map_KeySet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(340);
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer(3);
      hashMap0.put(integer1, integer1);
      hashMap0.put((Integer) null, (Integer) null);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      Integer integer2 = new Integer(3);
      flat3Map0.put(integer2, (Integer) null);
      Flat3Map<Object, Integer> flat3Map1 = new Flat3Map<Object, Integer>(flat3Map0);
      flat3Map1.values();
      assertEquals(4, flat3Map0.size());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Flat3Map<Object, Map.Entry<Object, Object>> flat3Map0 = new Flat3Map<Object, Map.Entry<Object, Object>>();
      Collection<Map.Entry<Object, Object>> collection0 = flat3Map0.values();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Flat3Map<HashMap<Integer, Object>, Integer> flat3Map0 = new Flat3Map<HashMap<Integer, Object>, Integer>();
      Flat3Map.KeySet<HashMap<Integer, Object>> flat3Map_KeySet0 = new Flat3Map.KeySet<HashMap<Integer, Object>>(flat3Map0);
      flat3Map_KeySet0.iterator();
      assertTrue(flat3Map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(318);
      Integer integer1 = new Integer(1945);
      hashMap0.put(integer1, integer0);
      hashMap0.put(integer0, integer0);
      Integer integer2 = new Integer(0);
      hashMap0.put(integer2, integer2);
      hashMap0.put((Integer) null, (Integer) null);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      Flat3Map.Values<Integer> flat3Map_Values0 = new Flat3Map.Values<Integer>(flat3Map0);
      Flat3Map.KeySet<Integer> flat3Map_KeySet0 = new Flat3Map.KeySet<Integer>(flat3Map0);
      boolean boolean0 = flat3Map_Values0.containsAll(flat3Map_KeySet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(12);
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer(1);
      hashMap0.put(integer1, integer1);
      Integer integer2 = new Integer((-11));
      hashMap0.put(integer2, integer2);
      hashMap0.put((Integer) null, (Integer) null);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      Set<Integer> set0 = flat3Map0.keySet();
      assertEquals(4, set0.size());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Flat3Map<Map.Entry<Integer, Object>, Integer> flat3Map0 = new Flat3Map<Map.Entry<Integer, Object>, Integer>();
      Flat3Map.EntrySetIterator<Map.Entry<Integer, Object>, Integer> flat3Map_EntrySetIterator0 = new Flat3Map.EntrySetIterator<Map.Entry<Integer, Object>, Integer>(flat3Map0);
      // Undeclared exception!
      try { 
        flat3Map_EntrySetIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // remove() can only be called once after next()
         //
         verifyException("org.apache.commons.collections4.map.Flat3Map$EntryIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(318);
      hashMap0.put(integer0, integer0);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      Flat3Map.Values<Integer> flat3Map_Values0 = new Flat3Map.Values<Integer>(flat3Map0);
      Flat3Map.KeySet<Integer> flat3Map_KeySet0 = new Flat3Map.KeySet<Integer>(flat3Map0);
      boolean boolean0 = flat3Map_KeySet0.removeAll(flat3Map_Values0);
      assertTrue(boolean0);
      assertEquals(0, flat3Map_KeySet0.size());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>();
      Flat3Map.FlatMapEntry<Integer, Integer> flat3Map_FlatMapEntry0 = new Flat3Map.FlatMapEntry<Integer, Integer>(flat3Map0, 1269);
      flat3Map_FlatMapEntry0.setRemoved(true);
      String string0 = flat3Map_FlatMapEntry0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Flat3Map<HashMap<Object, Object>, HashMap<Integer, Object>> flat3Map0 = new Flat3Map<HashMap<Object, Object>, HashMap<Integer, Object>>();
      Flat3Map.FlatMapEntry<HashMap<Object, Object>, HashMap<Integer, Object>> flat3Map_FlatMapEntry0 = new Flat3Map.FlatMapEntry<HashMap<Object, Object>, HashMap<Integer, Object>>(flat3Map0, 3);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      HashMap<Integer, Object> hashMap1 = flat3Map_FlatMapEntry0.setValue(hashMap0);
      assertNull(hashMap1);
      
      Flat3Map<Flat3Map<Object, Integer>, Object> flat3Map1 = new Flat3Map<Flat3Map<Object, Integer>, Object>();
      Flat3Map.FlatMapEntry<Flat3Map<Object, Integer>, Object> flat3Map_FlatMapEntry1 = new Flat3Map.FlatMapEntry<Flat3Map<Object, Integer>, Object>(flat3Map1, 2);
      boolean boolean0 = flat3Map_FlatMapEntry1.equals(flat3Map_FlatMapEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Flat3Map<HashMap<Object, Object>, HashMap<Integer, Object>> flat3Map0 = new Flat3Map<HashMap<Object, Object>, HashMap<Integer, Object>>();
      Flat3Map.FlatMapEntry<HashMap<Object, Object>, HashMap<Integer, Object>> flat3Map_FlatMapEntry0 = new Flat3Map.FlatMapEntry<HashMap<Object, Object>, HashMap<Integer, Object>>(flat3Map0, 3);
      Flat3Map<Flat3Map<Object, Integer>, Object> flat3Map1 = new Flat3Map<Flat3Map<Object, Integer>, Object>();
      Flat3Map.FlatMapEntry<Flat3Map<Object, Integer>, Object> flat3Map_FlatMapEntry1 = new Flat3Map.FlatMapEntry<Flat3Map<Object, Integer>, Object>(flat3Map1, 3);
      Object object0 = flat3Map_FlatMapEntry1.setValue(flat3Map_FlatMapEntry0);
      assertNull(object0);
      
      boolean boolean0 = flat3Map_FlatMapEntry1.equals(flat3Map_FlatMapEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Flat3Map<Integer, Object> flat3Map0 = new Flat3Map<Integer, Object>();
      Flat3Map.FlatMapEntry<Integer, Integer> flat3Map_FlatMapEntry0 = new Flat3Map.FlatMapEntry<Integer, Integer>((Flat3Map<Integer, Integer>) null, (-2594));
      flat3Map_FlatMapEntry0.setRemoved(true);
      boolean boolean0 = flat3Map_FlatMapEntry0.equals(flat3Map0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Flat3Map<HashMap<Object, Object>, HashMap<Integer, Object>> flat3Map0 = new Flat3Map<HashMap<Object, Object>, HashMap<Integer, Object>>();
      Flat3Map.FlatMapEntry<HashMap<Object, Object>, HashMap<Integer, Object>> flat3Map_FlatMapEntry0 = new Flat3Map.FlatMapEntry<HashMap<Object, Object>, HashMap<Integer, Object>>(flat3Map0, 3);
      Flat3Map<Flat3Map<Object, Integer>, Object> flat3Map1 = new Flat3Map<Flat3Map<Object, Integer>, Object>();
      Flat3Map.FlatMapEntry<Flat3Map<Object, Integer>, Object> flat3Map_FlatMapEntry1 = new Flat3Map.FlatMapEntry<Flat3Map<Object, Integer>, Object>(flat3Map1, 3);
      boolean boolean0 = flat3Map_FlatMapEntry1.equals(flat3Map_FlatMapEntry0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Flat3Map<HashMap<Object, Object>, HashMap<Integer, Object>> flat3Map0 = new Flat3Map<HashMap<Object, Object>, HashMap<Integer, Object>>();
      Flat3Map.FlatMapEntry<HashMap<Object, Object>, HashMap<Integer, Object>> flat3Map_FlatMapEntry0 = new Flat3Map.FlatMapEntry<HashMap<Object, Object>, HashMap<Integer, Object>>(flat3Map0, 3);
      Flat3Map<Flat3Map<Object, Integer>, Object> flat3Map1 = new Flat3Map<Flat3Map<Object, Integer>, Object>();
      Flat3Map.FlatMapEntry<Flat3Map<Object, Integer>, Object> flat3Map_FlatMapEntry1 = new Flat3Map.FlatMapEntry<Flat3Map<Object, Integer>, Object>(flat3Map1, 2);
      Object object0 = flat3Map_FlatMapEntry1.setValue(flat3Map_FlatMapEntry0);
      assertNull(object0);
      
      Flat3Map.FlatMapEntry<HashMap<Object, Object>, HashMap<Integer, Object>> flat3Map_FlatMapEntry2 = new Flat3Map.FlatMapEntry<HashMap<Object, Object>, HashMap<Integer, Object>>(flat3Map0, 3);
      boolean boolean0 = flat3Map_FlatMapEntry1.equals(flat3Map_FlatMapEntry2);
      assertTrue(flat3Map_FlatMapEntry2.equals((Object)flat3Map_FlatMapEntry0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Flat3Map<HashMap<Object, Object>, HashMap<Integer, Object>> flat3Map0 = new Flat3Map<HashMap<Object, Object>, HashMap<Integer, Object>>();
      Flat3Map.FlatMapEntry<HashMap<Object, Object>, HashMap<Integer, Object>> flat3Map_FlatMapEntry0 = new Flat3Map.FlatMapEntry<HashMap<Object, Object>, HashMap<Integer, Object>>(flat3Map0, 1);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      HashMap<Integer, Object> hashMap1 = flat3Map_FlatMapEntry0.setValue(hashMap0);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Flat3Map.FlatMapEntry<HashMap<Integer, Object>, Comparable<Object>> flat3Map_FlatMapEntry0 = new Flat3Map.FlatMapEntry<HashMap<Integer, Object>, Comparable<Object>>((Flat3Map<HashMap<Integer, Object>, Comparable<Object>>) null, 367);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        flat3Map_FlatMapEntry0.setValue(comparable0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid map index: 367
         //
         verifyException("org.apache.commons.collections4.map.Flat3Map$FlatMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Flat3Map<Integer, Object> flat3Map0 = new Flat3Map<Integer, Object>();
      Flat3Map.FlatMapEntry<Integer, Object> flat3Map_FlatMapEntry0 = new Flat3Map.FlatMapEntry<Integer, Object>(flat3Map0, 14);
      flat3Map_FlatMapEntry0.setRemoved(true);
      // Undeclared exception!
      try { 
        flat3Map_FlatMapEntry0.getValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.map.Flat3Map$FlatMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Flat3Map<Object, Object> flat3Map0 = new Flat3Map<Object, Object>(hashMap0);
      Flat3Map.FlatMapEntry<Object, Object> flat3Map_FlatMapEntry0 = new Flat3Map.FlatMapEntry<Object, Object>(flat3Map0, (-1));
      // Undeclared exception!
      try { 
        flat3Map_FlatMapEntry0.toString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid map index: -1
         //
         verifyException("org.apache.commons.collections4.map.Flat3Map$FlatMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Flat3Map<Object, Integer> flat3Map0 = new Flat3Map<Object, Integer>();
      Flat3Map.FlatMapEntry<Object, Integer> flat3Map_FlatMapEntry0 = new Flat3Map.FlatMapEntry<Object, Integer>(flat3Map0, 416);
      flat3Map_FlatMapEntry0.setRemoved(true);
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = null;
      try {
        abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(flat3Map_FlatMapEntry0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getKey() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.map.Flat3Map$FlatMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-1570));
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer(367);
      hashMap0.put(integer1, integer1);
      Integer integer2 = new Integer(0);
      hashMap0.put(integer2, integer2);
      hashMap0.put((Integer) null, integer1);
      Flat3Map<Comparable<Integer>, Comparable<Integer>> flat3Map0 = new Flat3Map<Comparable<Integer>, Comparable<Integer>>(hashMap0);
      Flat3Map.EntrySet<Comparable<Integer>, Comparable<Integer>> flat3Map_EntrySet0 = new Flat3Map.EntrySet<Comparable<Integer>, Comparable<Integer>>(flat3Map0);
      Iterator<Map.Entry<Comparable<Integer>, Comparable<Integer>>> iterator0 = (Iterator<Map.Entry<Comparable<Integer>, Comparable<Integer>>>)flat3Map_EntrySet0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Flat3Map.EntrySet<HashMap<Integer, Integer>, Object> flat3Map_EntrySet0 = new Flat3Map.EntrySet<HashMap<Integer, Integer>, Object>((Flat3Map<HashMap<Integer, Integer>, Object>) null);
      Integer integer0 = new Integer(5816);
      boolean boolean0 = flat3Map_EntrySet0.remove(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Flat3Map<HashMap<Object, Object>, HashMap<Integer, Object>> flat3Map0 = new Flat3Map<HashMap<Object, Object>, HashMap<Integer, Object>>();
      Flat3Map.FlatMapEntry<HashMap<Object, Object>, HashMap<Integer, Object>> flat3Map_FlatMapEntry0 = new Flat3Map.FlatMapEntry<HashMap<Object, Object>, HashMap<Integer, Object>>(flat3Map0, 1);
      Flat3Map<Map.Entry<Object, Object>, HashMap<Integer, Object>> flat3Map1 = new Flat3Map<Map.Entry<Object, Object>, HashMap<Integer, Object>>();
      Flat3Map.EntrySet<Map.Entry<Object, Object>, HashMap<Integer, Object>> flat3Map_EntrySet0 = new Flat3Map.EntrySet<Map.Entry<Object, Object>, HashMap<Integer, Object>>(flat3Map1);
      boolean boolean0 = flat3Map_EntrySet0.remove(flat3Map_FlatMapEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Flat3Map<Comparable<Object>, HashMap<Object, Integer>> flat3Map0 = new Flat3Map<Comparable<Object>, HashMap<Object, Integer>>();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(comparable0).toString();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      flat3Map0.putIfAbsent(comparable0, hashMap0);
      Flat3Map.FlatMapIterator<Comparable<Object>, HashMap<Object, Integer>> flat3Map_FlatMapIterator0 = new Flat3Map.FlatMapIterator<Comparable<Object>, HashMap<Object, Integer>>(flat3Map0);
      flat3Map_FlatMapIterator0.next();
      flat3Map_FlatMapIterator0.toString();
      assertFalse(flat3Map_FlatMapIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Flat3Map<Integer, HashMap<Object, Integer>> flat3Map0 = new Flat3Map<Integer, HashMap<Object, Integer>>();
      Flat3Map.FlatMapIterator<Integer, HashMap<Object, Integer>> flat3Map_FlatMapIterator0 = new Flat3Map.FlatMapIterator<Integer, HashMap<Object, Integer>>(flat3Map0);
      String string0 = flat3Map_FlatMapIterator0.toString();
      assertEquals("Iterator[]", string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Flat3Map.FlatMapIterator<Integer, Object> flat3Map_FlatMapIterator0 = new Flat3Map.FlatMapIterator<Integer, Object>((Flat3Map<Integer, Object>) null);
      // Undeclared exception!
      try { 
        flat3Map_FlatMapIterator0.setValue((Object) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // setValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.map.Flat3Map$FlatMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer(344);
      hashMap0.put(integer1, integer1);
      hashMap0.put((Integer) null, integer0);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      Flat3Map<Integer, Object> flat3Map1 = new Flat3Map<Integer, Object>(flat3Map0);
      Flat3Map.FlatMapIterator<Integer, Object> flat3Map_FlatMapIterator0 = new Flat3Map.FlatMapIterator<Integer, Object>(flat3Map1);
      flat3Map_FlatMapIterator0.next();
      flat3Map_FlatMapIterator0.next();
      assertTrue(flat3Map_FlatMapIterator0.hasNext());
      
      flat3Map_FlatMapIterator0.next();
      flat3Map_FlatMapIterator0.getValue();
      assertFalse(flat3Map_FlatMapIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Flat3Map<Integer, Object> flat3Map0 = new Flat3Map<Integer, Object>();
      Flat3Map.FlatMapIterator<Integer, Object> flat3Map_FlatMapIterator0 = new Flat3Map.FlatMapIterator<Integer, Object>(flat3Map0);
      // Undeclared exception!
      try { 
        flat3Map_FlatMapIterator0.getValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.map.Flat3Map$FlatMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Flat3Map<Map.Entry<Object, Object>, HashMap<Integer, Object>> flat3Map0 = new Flat3Map<Map.Entry<Object, Object>, HashMap<Integer, Object>>();
      Flat3Map.EntrySet<Map.Entry<Object, Object>, HashMap<Integer, Object>> flat3Map_EntrySet0 = new Flat3Map.EntrySet<Map.Entry<Object, Object>, HashMap<Integer, Object>>(flat3Map0);
      Flat3Map<Object, Object> flat3Map1 = new Flat3Map<Object, Object>();
      flat3Map1.put(flat3Map_EntrySet0, flat3Map0);
      Flat3Map.FlatMapIterator<Object, Object> flat3Map_FlatMapIterator0 = new Flat3Map.FlatMapIterator<Object, Object>(flat3Map1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      flat3Map_FlatMapIterator0.forEachRemaining(consumer0);
      Flat3Map flat3Map2 = (Flat3Map)flat3Map_FlatMapIterator0.setValue((Object) null);
      assertTrue(flat3Map2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Flat3Map<Map.Entry<Object, Object>, HashMap<Integer, Object>> flat3Map0 = new Flat3Map<Map.Entry<Object, Object>, HashMap<Integer, Object>>();
      Flat3Map.EntrySet<Map.Entry<Object, Object>, HashMap<Integer, Object>> flat3Map_EntrySet0 = new Flat3Map.EntrySet<Map.Entry<Object, Object>, HashMap<Integer, Object>>(flat3Map0);
      Flat3Map<Object, Object> flat3Map1 = new Flat3Map<Object, Object>();
      Integer integer0 = new Integer(943);
      Object object0 = new Object();
      flat3Map1.put(integer0, object0);
      flat3Map1.put(flat3Map_EntrySet0, flat3Map0);
      Flat3Map.FlatMapIterator<Object, Object> flat3Map_FlatMapIterator0 = new Flat3Map.FlatMapIterator<Object, Object>(flat3Map1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      flat3Map_FlatMapIterator0.forEachRemaining(consumer0);
      Flat3Map flat3Map2 = (Flat3Map)flat3Map_FlatMapIterator0.setValue((Object) null);
      assertTrue(flat3Map2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Flat3Map<Comparable<Object>, Map.Entry<Integer, Object>> flat3Map0 = new Flat3Map<Comparable<Object>, Map.Entry<Integer, Object>>();
      Flat3Map.FlatMapIterator<Comparable<Object>, Map.Entry<Integer, Object>> flat3Map_FlatMapIterator0 = new Flat3Map.FlatMapIterator<Comparable<Object>, Map.Entry<Integer, Object>>(flat3Map0);
      // Undeclared exception!
      try { 
        flat3Map_FlatMapIterator0.getKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getKey() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.map.Flat3Map$FlatMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Flat3Map<Object, Object> flat3Map0 = new Flat3Map<Object, Object>();
      Flat3Map.FlatMapIterator<Object, Object> flat3Map_FlatMapIterator0 = new Flat3Map.FlatMapIterator<Object, Object>(flat3Map0);
      // Undeclared exception!
      try { 
        flat3Map_FlatMapIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // remove() can only be called once after next()
         //
         verifyException("org.apache.commons.collections4.map.Flat3Map$FlatMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Flat3Map<Map.Entry<Integer, Integer>, HashMap<Object, Object>> flat3Map0 = new Flat3Map<Map.Entry<Integer, Integer>, HashMap<Object, Object>>();
      Flat3Map.FlatMapIterator<Map.Entry<Integer, Integer>, HashMap<Object, Object>> flat3Map_FlatMapIterator0 = new Flat3Map.FlatMapIterator<Map.Entry<Integer, Integer>, HashMap<Object, Object>>(flat3Map0);
      // Undeclared exception!
      try { 
        flat3Map_FlatMapIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No next() entry in the iteration
         //
         verifyException("org.apache.commons.collections4.map.Flat3Map$FlatMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Flat3Map<Object, Object> flat3Map0 = new Flat3Map<Object, Object>(hashMap0);
      flat3Map0.put(hashMap0, hashMap0);
      Flat3Map.FlatMapIterator<Object, Object> flat3Map_FlatMapIterator0 = new Flat3Map.FlatMapIterator<Object, Object>(flat3Map0);
      assertTrue(flat3Map_FlatMapIterator0.hasNext());
      
      flat3Map_FlatMapIterator0.next();
      flat3Map_FlatMapIterator0.getKey();
      assertFalse(flat3Map_FlatMapIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(5);
      hashMap0.put(integer0, (Object) null);
      Flat3Map<Integer, Object> flat3Map0 = new Flat3Map<Integer, Object>(hashMap0);
      MapIterator<Integer, Object> mapIterator0 = flat3Map0.mapIterator();
      assertTrue(mapIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(1);
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer((-6));
      hashMap0.put(integer1, integer1);
      hashMap0.put((Integer) null, (Integer) null);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      Integer integer2 = new Integer((-6));
      flat3Map0.put(integer2, (Integer) null);
      Flat3Map<Object, Object> flat3Map1 = new Flat3Map<Object, Object>(flat3Map0);
      flat3Map1.mapIterator();
      assertEquals(4, flat3Map0.size());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Flat3Map<Integer, Object> flat3Map0 = new Flat3Map<Integer, Object>(hashMap0);
      MapIterator<Integer, Object> mapIterator0 = flat3Map0.mapIterator();
      assertFalse(mapIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(61);
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer(326);
      hashMap0.put(integer1, integer1);
      Integer integer2 = new Integer((-1139));
      hashMap0.put(integer2, integer2);
      hashMap0.put((Integer) null, integer1);
      Flat3Map<Object, Object> flat3Map0 = new Flat3Map<Object, Object>(hashMap0);
      assertEquals(4, flat3Map0.size());
      
      flat3Map0.clear();
      assertTrue(flat3Map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>();
      Flat3Map<Object, Object> flat3Map1 = new Flat3Map<Object, Object>();
      flat3Map1.put(flat3Map0, flat3Map0);
      flat3Map1.remove((Object) flat3Map0);
      assertTrue(flat3Map1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Flat3Map<HashMap<Object, Object>, HashMap<Integer, Object>> flat3Map0 = new Flat3Map<HashMap<Object, Object>, HashMap<Integer, Object>>();
      Flat3Map<Object, Object> flat3Map1 = new Flat3Map<Object, Object>();
      flat3Map1.put(flat3Map0, flat3Map0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      flat3Map1.put((Object) null, hashMap0);
      flat3Map1.remove((Object) hashMap0);
      assertEquals(2, flat3Map1.size());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(326);
      hashMap0.put(integer0, integer0);
      hashMap0.put((Integer) null, integer0);
      Flat3Map<Object, Object> flat3Map0 = new Flat3Map<Object, Object>(hashMap0);
      flat3Map0.remove((Object) integer0);
      assertEquals(1, flat3Map0.size());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(344);
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer(0);
      hashMap0.put(integer1, integer1);
      hashMap0.put((Integer) null, (Integer) null);
      Flat3Map<Object, Object> flat3Map0 = new Flat3Map<Object, Object>(hashMap0);
      flat3Map0.remove((Object) integer1);
      assertEquals(2, flat3Map0.size());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(326);
      hashMap0.put(integer0, integer0);
      hashMap0.put((Integer) null, integer0);
      Flat3Map<Object, Object> flat3Map0 = new Flat3Map<Object, Object>(hashMap0);
      flat3Map0.put(hashMap0, hashMap0);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      flat3Map0.remove((Object) hashMap1);
      assertEquals(3, flat3Map0.size());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(353);
      hashMap0.put(integer0, integer0);
      hashMap0.put((Integer) null, integer0);
      Flat3Map<Object, Object> flat3Map0 = new Flat3Map<Object, Object>(hashMap0);
      flat3Map0.putIfAbsent(hashMap0, integer0);
      flat3Map0.remove((Object) hashMap0);
      assertEquals(2, flat3Map0.size());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(326);
      hashMap0.put(integer0, integer0);
      hashMap0.put((Integer) null, integer0);
      Flat3Map<Object, Object> flat3Map0 = new Flat3Map<Object, Object>(hashMap0);
      flat3Map0.putIfAbsent(hashMap0, integer0);
      flat3Map0.remove((Object) integer0);
      assertEquals(2, flat3Map0.size());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Flat3Map<Object, Object> flat3Map0 = new Flat3Map<Object, Object>();
      flat3Map0.put(hashMap0, hashMap0);
      flat3Map0.put((Object) null, (Object) null);
      flat3Map0.remove((Object) hashMap0);
      assertFalse(flat3Map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Flat3Map<Object, Object> flat3Map0 = new Flat3Map<Object, Object>();
      Flat3Map<HashMap<Integer, Integer>, Map.Entry<Object, Integer>> flat3Map1 = new Flat3Map<HashMap<Integer, Integer>, Map.Entry<Object, Integer>>();
      flat3Map0.put((Object) null, flat3Map1);
      assertEquals(1, flat3Map0.size());
      
      flat3Map0.remove((Object) null);
      assertTrue(flat3Map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(18);
      hashMap0.put(integer0, integer0);
      hashMap0.put((Integer) null, (Integer) null);
      Flat3Map<Object, Object> flat3Map0 = new Flat3Map<Object, Object>(hashMap0);
      assertEquals(2, flat3Map0.size());
      
      flat3Map0.remove((Object) null);
      assertEquals(1, flat3Map0.size());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Flat3Map<Map.Entry<Object, Object>, HashMap<Integer, Object>> flat3Map0 = new Flat3Map<Map.Entry<Object, Object>, HashMap<Integer, Object>>();
      Flat3Map<Object, Object> flat3Map1 = new Flat3Map<Object, Object>();
      Object object0 = new Object();
      flat3Map1.put(object0, object0);
      flat3Map1.put(flat3Map0, (Object) null);
      Object object1 = flat3Map1.remove((Object) null);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(608);
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer(14);
      hashMap0.put(integer1, integer1);
      Flat3Map<Object, Object> flat3Map0 = new Flat3Map<Object, Object>(hashMap0);
      flat3Map0.put(hashMap0, integer0);
      flat3Map0.remove((Object) null);
      assertEquals(3, flat3Map0.size());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(1);
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer(123);
      hashMap0.put(integer1, (Integer) null);
      Flat3Map<Object, Object> flat3Map1 = new Flat3Map<Object, Object>(hashMap0);
      flat3Map1.putIfAbsent((Object) null, flat3Map0);
      assertEquals(3, flat3Map1.size());
      
      flat3Map1.remove((Object) null);
      assertEquals(2, flat3Map1.size());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(326);
      hashMap0.put(integer0, integer0);
      hashMap0.put((Integer) null, integer0);
      Flat3Map<Object, Object> flat3Map0 = new Flat3Map<Object, Object>(hashMap0);
      flat3Map0.putIfAbsent(hashMap0, integer0);
      flat3Map0.remove((Object) null);
      assertEquals(2, flat3Map0.size());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Flat3Map<Integer, Object> flat3Map0 = new Flat3Map<Integer, Object>();
      Flat3Map<Object, Object> flat3Map1 = new Flat3Map<Object, Object>();
      flat3Map1.put(flat3Map0, flat3Map0);
      flat3Map1.put((Object) null, (Object) null);
      flat3Map1.remove((Object) null);
      assertEquals(1, flat3Map1.size());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, integer0);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      Flat3Map<Integer, Object> flat3Map1 = new Flat3Map<Integer, Object>(flat3Map0);
      flat3Map1.remove((Object) null);
      assertEquals(1, flat3Map1.size());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Integer integer0 = new Integer((-2416));
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.put(integer0, integer0);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      Flat3Map.ValuesIterator<Integer> flat3Map_ValuesIterator0 = new Flat3Map.ValuesIterator<Integer>(flat3Map0);
      Flat3Map<Integer, Object> flat3Map1 = new Flat3Map<Integer, Object>(flat3Map0);
      flat3Map1.remove((Object) flat3Map_ValuesIterator0);
      assertEquals(1, flat3Map1.size());
      assertTrue(flat3Map_ValuesIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(344);
      hashMap0.put(integer0, integer0);
      hashMap0.put((Integer) null, (Integer) null);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      Integer integer1 = new Integer(0);
      flat3Map0.put(integer1, (Integer) null);
      Integer integer2 = new Integer(0);
      flat3Map0.put(integer2, (Integer) null);
      Flat3Map<Object, Object> flat3Map1 = new Flat3Map<Object, Object>(hashMap0);
      flat3Map1.putAll(flat3Map0);
      assertEquals(4, flat3Map1.size());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(3228);
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer(344);
      hashMap0.put(integer1, integer1);
      Integer integer2 = new Integer(0);
      hashMap0.put(integer2, integer2);
      hashMap0.put((Integer) null, (Integer) null);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      flat3Map0.putAll(hashMap0);
      assertEquals(4, flat3Map0.size());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-3975));
      hashMap0.put(integer0, integer0);
      hashMap0.put((Integer) null, (Integer) null);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      boolean boolean0 = flat3Map0.containsValue(integer0);
      assertTrue(boolean0);
      assertEquals(2, flat3Map0.size());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(318);
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer(0);
      hashMap0.put(integer1, integer1);
      hashMap0.put((Integer) null, (Integer) null);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      Flat3Map.Values<Integer> flat3Map_Values0 = new Flat3Map.Values<Integer>(flat3Map0);
      Flat3Map.KeySet<Integer> flat3Map_KeySet0 = new Flat3Map.KeySet<Integer>(flat3Map0);
      boolean boolean0 = flat3Map_Values0.containsAll(flat3Map_KeySet0);
      assertEquals(3, flat3Map_KeySet0.size());
      assertFalse(flat3Map0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Flat3Map<Object, Integer> flat3Map0 = new Flat3Map<Object, Integer>();
      Flat3Map<Map.Entry<Integer, Object>, Integer> flat3Map1 = new Flat3Map<Map.Entry<Integer, Object>, Integer>();
      boolean boolean0 = flat3Map1.containsValue(flat3Map0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(329);
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer((-1139));
      hashMap0.put(integer1, integer1);
      hashMap0.put((Integer) null, integer0);
      Flat3Map<Object, Object> flat3Map0 = new Flat3Map<Object, Object>(hashMap0);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      boolean boolean0 = flat3Map0.containsValue(hashMap1);
      assertEquals(3, flat3Map0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(338);
      Integer integer1 = new Integer(1438);
      hashMap0.put(integer0, integer1);
      hashMap0.put(integer1, (Integer) null);
      hashMap0.put((Integer) null, integer1);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      boolean boolean0 = flat3Map0.containsValue((Object) null);
      assertTrue(boolean0);
      assertEquals(3, flat3Map0.size());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(344);
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer(10);
      hashMap0.put(integer1, integer1);
      hashMap0.put((Integer) null, (Integer) null);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      boolean boolean0 = flat3Map0.containsValue((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, integer0);
      hashMap0.put((Integer) null, integer0);
      Flat3Map<Object, Object> flat3Map0 = new Flat3Map<Object, Object>(hashMap0);
      boolean boolean0 = flat3Map0.containsValue((Object) null);
      assertEquals(2, flat3Map0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, integer0);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      Flat3Map<Comparable<Integer>, Integer> flat3Map1 = new Flat3Map<Comparable<Integer>, Integer>(flat3Map0);
      boolean boolean0 = flat3Map1.containsValue((Object) null);
      assertEquals(1, flat3Map1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      Flat3Map<Comparable<Integer>, Integer> flat3Map1 = new Flat3Map<Comparable<Integer>, Integer>(flat3Map0);
      boolean boolean0 = flat3Map1.containsValue((Object) null);
      assertEquals(0, flat3Map1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(326);
      hashMap0.put(integer0, integer0);
      Flat3Map<Comparable<Integer>, Integer> flat3Map0 = new Flat3Map<Comparable<Integer>, Integer>(hashMap0);
      flat3Map0.containsKey(hashMap0);
      assertEquals(1, flat3Map0.size());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(326);
      hashMap0.put(integer0, integer0);
      hashMap0.put((Integer) null, integer0);
      Flat3Map<Comparable<Integer>, Integer> flat3Map0 = new Flat3Map<Comparable<Integer>, Integer>(hashMap0);
      boolean boolean0 = flat3Map0.containsKey(integer0);
      assertTrue(boolean0);
      assertEquals(2, flat3Map0.size());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(344);
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer(0);
      hashMap0.put(integer1, integer1);
      hashMap0.put((Integer) null, (Integer) null);
      Flat3Map<Comparable<Integer>, Integer> flat3Map0 = new Flat3Map<Comparable<Integer>, Integer>(hashMap0);
      boolean boolean0 = flat3Map0.containsKey(integer1);
      assertTrue(boolean0);
      assertEquals(3, flat3Map0.size());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(344);
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer(10);
      hashMap0.put(integer1, integer1);
      hashMap0.put((Integer) null, (Integer) null);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      boolean boolean0 = flat3Map0.replace((Integer) null, (Integer) null, integer1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Flat3Map<Object, Integer> flat3Map0 = new Flat3Map<Object, Integer>();
      boolean boolean0 = flat3Map0.containsKey((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, integer0);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      boolean boolean0 = flat3Map0.replace((Integer) null, (Integer) null, (Integer) null);
      assertEquals(1, flat3Map0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(340);
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer(3);
      hashMap0.put(integer1, integer1);
      hashMap0.put((Integer) null, (Integer) null);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      Integer integer2 = new Integer(3);
      flat3Map0.put(integer2, (Integer) null);
      Flat3Map<Object, Object> flat3Map1 = new Flat3Map<Object, Object>(flat3Map0);
      boolean boolean0 = flat3Map1.containsValue(integer1);
      assertEquals(4, flat3Map0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-3975));
      hashMap0.put(integer0, integer0);
      hashMap0.put((Integer) null, (Integer) null);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      Integer integer1 = new Integer((-3975));
      flat3Map0.put(integer1, (Integer) null);
      boolean boolean0 = flat3Map0.replace(integer1, (Integer) null, integer1);
      assertEquals(3, flat3Map0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Flat3Map.EntrySet<HashMap<Integer, Integer>, Object> flat3Map_EntrySet0 = new Flat3Map.EntrySet<HashMap<Integer, Integer>, Object>((Flat3Map<HashMap<Integer, Integer>, Object>) null);
      Integer integer0 = new Integer(5816);
      Flat3Map<Integer, Object> flat3Map0 = new Flat3Map<Integer, Object>();
      flat3Map0.putIfAbsent(integer0, flat3Map_EntrySet0);
      // Undeclared exception!
      try { 
        flat3Map0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.Flat3Map", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(354);
      hashMap0.put(integer0, integer0);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      flat3Map0.put((Integer) null, (Integer) null);
      boolean boolean0 = flat3Map0.replace((Integer) null, (Integer) null, (Integer) null);
      assertEquals(2, flat3Map0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-3971));
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer(354);
      hashMap0.put(integer1, integer1);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      flat3Map0.put((Integer) null, (Integer) null);
      boolean boolean0 = flat3Map0.replace((Integer) null, (Integer) null, (Integer) null);
      assertEquals(3, flat3Map0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(1743);
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer((-3975));
      hashMap0.put(integer1, integer1);
      hashMap0.put((Integer) null, (Integer) null);
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      Integer integer2 = new Integer((-3975));
      flat3Map0.put(integer2, (Integer) null);
      boolean boolean0 = flat3Map0.replace(integer2, (Integer) null, integer2);
      assertEquals(4, flat3Map0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>(hashMap0);
      Flat3Map.KeySet<Integer> flat3Map_KeySet0 = new Flat3Map.KeySet<Integer>(flat3Map0);
      int int0 = flat3Map_KeySet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Flat3Map<Integer, Object> flat3Map0 = new Flat3Map<Integer, Object>();
      Flat3Map.KeySet<Integer> flat3Map_KeySet0 = new Flat3Map.KeySet<Integer>(flat3Map0);
      boolean boolean0 = flat3Map_KeySet0.remove(flat3Map0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Flat3Map<Map.Entry<Integer, Integer>, Integer> flat3Map0 = new Flat3Map<Map.Entry<Integer, Integer>, Integer>();
      Flat3Map.KeySet<Map.Entry<Integer, Integer>> flat3Map_KeySet0 = new Flat3Map.KeySet<Map.Entry<Integer, Integer>>(flat3Map0);
      flat3Map_KeySet0.clear();
      assertEquals(0, flat3Map_KeySet0.size());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Flat3Map<HashMap<Object, Object>, HashMap<Integer, Object>> flat3Map0 = new Flat3Map<HashMap<Object, Object>, HashMap<Integer, Object>>();
      Flat3Map.FlatMapEntry<HashMap<Object, Object>, HashMap<Integer, Object>> flat3Map_FlatMapEntry0 = new Flat3Map.FlatMapEntry<HashMap<Object, Object>, HashMap<Integer, Object>>(flat3Map0, 1);
      flat3Map_FlatMapEntry0.setRemoved(true);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        flat3Map_FlatMapEntry0.setValue(hashMap0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // setValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.map.Flat3Map$FlatMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Flat3Map<Integer, Integer> flat3Map0 = new Flat3Map<Integer, Integer>();
      AbstractHashedMap<Integer, Integer> abstractHashedMap0 = flat3Map0.createDelegateMap();
      Flat3Map<Integer, Object> flat3Map1 = new Flat3Map<Integer, Object>(abstractHashedMap0);
      Flat3Map.Values<Object> flat3Map_Values0 = new Flat3Map.Values<Object>(flat3Map1);
      flat3Map_Values0.clear();
      assertEquals(0, flat3Map_Values0.size());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Flat3Map.Values<Integer> flat3Map_Values0 = new Flat3Map.Values<Integer>((Flat3Map<?, Integer>) null);
      // Undeclared exception!
      try { 
        flat3Map_Values0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.Flat3Map$Values", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Flat3Map<Map.Entry<Object, Object>, HashMap<Integer, Object>> flat3Map0 = new Flat3Map<Map.Entry<Object, Object>, HashMap<Integer, Object>>();
      Flat3Map.EntrySet<Map.Entry<Object, Object>, HashMap<Integer, Object>> flat3Map_EntrySet0 = new Flat3Map.EntrySet<Map.Entry<Object, Object>, HashMap<Integer, Object>>(flat3Map0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      flat3Map_EntrySet0.removeAll(linkedList0);
      assertTrue(flat3Map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Flat3Map<Comparable<Object>, Map.Entry<Integer, Object>> flat3Map0 = new Flat3Map<Comparable<Object>, Map.Entry<Integer, Object>>();
      Flat3Map.FlatMapIterator<Comparable<Object>, Map.Entry<Integer, Object>> flat3Map_FlatMapIterator0 = new Flat3Map.FlatMapIterator<Comparable<Object>, Map.Entry<Integer, Object>>(flat3Map0);
      flat3Map_FlatMapIterator0.reset();
      assertFalse(flat3Map_FlatMapIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-3311));
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer(347);
      hashMap0.put(integer1, integer1);
      hashMap0.put((Integer) null, integer1);
      Flat3Map<Object, Object> flat3Map0 = new Flat3Map<Object, Object>(hashMap0);
      flat3Map0.putIfAbsent(hashMap0, integer1);
      assertEquals(4, flat3Map0.size());
      
      flat3Map0.remove((Object) null);
      assertEquals(3, flat3Map0.size());
  }
}
