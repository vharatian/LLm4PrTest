/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 11:59:38 GMT 2025
 */

package org.apache.commons.collections4.trie;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.HashMap;
import org.apache.commons.collections4.trie.AbstractBitwiseTrie;
import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
import org.apache.commons.collections4.trie.KeyAnalyzer;
import org.apache.commons.collections4.trie.PatriciaTrie;
import org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AbstractBitwiseTrie_ESTest extends AbstractBitwiseTrie_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PatriciaTrie<StringKeyAnalyzer> patriciaTrie0 = new PatriciaTrie<StringKeyAnalyzer>();
      StringKeyAnalyzer stringKeyAnalyzer0 = StringKeyAnalyzer.INSTANCE;
      Object object0 = patriciaTrie0.put("", stringKeyAnalyzer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("%`STBW#", "%`STBW#");
      String string0 = patriciaTrie0.put("-p`as:J/S", "-p`as:J/S");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = new StringKeyAnalyzer();
      AbstractPatriciaTrie.TrieEntry<StringKeyAnalyzer, StringKeyAnalyzer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<StringKeyAnalyzer, StringKeyAnalyzer>(stringKeyAnalyzer0, stringKeyAnalyzer0, (-3));
      abstractPatriciaTrie_TrieEntry0.toString();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = StringKeyAnalyzer.INSTANCE;
      AbstractPatriciaTrie.TrieEntry<StringKeyAnalyzer, StringKeyAnalyzer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<StringKeyAnalyzer, StringKeyAnalyzer>(stringKeyAnalyzer0, stringKeyAnalyzer0, (-1));
      StringKeyAnalyzer stringKeyAnalyzer1 = abstractPatriciaTrie_TrieEntry0.setValue(stringKeyAnalyzer0);
      assertNotNull(stringKeyAnalyzer1);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = StringKeyAnalyzer.INSTANCE;
      AbstractPatriciaTrie.TrieEntry<StringKeyAnalyzer, StringKeyAnalyzer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<StringKeyAnalyzer, StringKeyAnalyzer>(stringKeyAnalyzer0, stringKeyAnalyzer0, 0);
      StringKeyAnalyzer stringKeyAnalyzer1 = abstractPatriciaTrie_TrieEntry0.setKeyValue(stringKeyAnalyzer0, stringKeyAnalyzer0);
      assertEquals((-3), KeyAnalyzer.OUT_OF_BOUNDS_BIT_KEY);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      StringKeyAnalyzer stringKeyAnalyzer0 = StringKeyAnalyzer.INSTANCE;
      AbstractPatriciaTrie.TrieEntry<Comparable<String>, StringKeyAnalyzer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Comparable<String>, StringKeyAnalyzer>(comparable0, stringKeyAnalyzer0, 676);
      StringKeyAnalyzer stringKeyAnalyzer1 = abstractPatriciaTrie_TrieEntry0.getValue();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(stringKeyAnalyzer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("", "");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleImmutableEntry<String, String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleImmutableEntry<String, String>>(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry1, (-1));
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry2 = abstractPatriciaTrie_TrieEntry0.getKey();
      assertSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PatriciaTrie<StringKeyAnalyzer> patriciaTrie0 = new PatriciaTrie<StringKeyAnalyzer>();
      int int0 = patriciaTrie0.lengthInBits("e[tREf+^");
      assertEquals(128, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      boolean boolean0 = patriciaTrie0.isBitSet("&ex4", 14, 33);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = new StringKeyAnalyzer();
      boolean boolean0 = AbstractBitwiseTrie.compare(stringKeyAnalyzer0, stringKeyAnalyzer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = new StringKeyAnalyzer();
      boolean boolean0 = AbstractBitwiseTrie.compare(stringKeyAnalyzer0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PatriciaTrie<StringKeyAnalyzer> patriciaTrie0 = new PatriciaTrie<StringKeyAnalyzer>();
      String string0 = patriciaTrie0.castKey("]={\n");
      assertEquals("]={\n", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      int int0 = patriciaTrie0.bitIndex("  ", "");
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PatriciaTrie<Comparable<StringKeyAnalyzer>> patriciaTrie0 = new PatriciaTrie<Comparable<StringKeyAnalyzer>>();
      int int0 = patriciaTrie0.bitIndex("t!Xsg", "t!Xsg");
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PatriciaTrie<StringKeyAnalyzer> patriciaTrie0 = new PatriciaTrie<StringKeyAnalyzer>();
      // Undeclared exception!
      try { 
        patriciaTrie0.isBitSet("&y_ehNn", 2254, 2999);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      int int0 = patriciaTrie0.lengthInBits((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<StringKeyAnalyzer, StringKeyAnalyzer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<StringKeyAnalyzer, StringKeyAnalyzer>((StringKeyAnalyzer) null, (StringKeyAnalyzer) null);
      AbstractPatriciaTrie.TrieEntry<StringKeyAnalyzer, AbstractMap.SimpleImmutableEntry<StringKeyAnalyzer, StringKeyAnalyzer>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<StringKeyAnalyzer, AbstractMap.SimpleImmutableEntry<StringKeyAnalyzer, StringKeyAnalyzer>>((StringKeyAnalyzer) null, abstractMap_SimpleImmutableEntry0, (-2));
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals(abstractMap_SimpleImmutableEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<StringKeyAnalyzer, StringKeyAnalyzer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<StringKeyAnalyzer, StringKeyAnalyzer>((StringKeyAnalyzer) null, (StringKeyAnalyzer) null);
      AbstractPatriciaTrie.TrieEntry<StringKeyAnalyzer, AbstractMap.SimpleImmutableEntry<StringKeyAnalyzer, StringKeyAnalyzer>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<StringKeyAnalyzer, AbstractMap.SimpleImmutableEntry<StringKeyAnalyzer, StringKeyAnalyzer>>((StringKeyAnalyzer) null, abstractMap_SimpleImmutableEntry0, (-1));
      AbstractPatriciaTrie.TrieEntry<StringKeyAnalyzer, AbstractMap.SimpleImmutableEntry<StringKeyAnalyzer, StringKeyAnalyzer>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<StringKeyAnalyzer, AbstractMap.SimpleImmutableEntry<StringKeyAnalyzer, StringKeyAnalyzer>>((StringKeyAnalyzer) null, abstractMap_SimpleImmutableEntry0, (-1));
      boolean boolean0 = abstractPatriciaTrie_TrieEntry1.equals(abstractPatriciaTrie_TrieEntry0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Comparable<StringKeyAnalyzer> comparable0 = (Comparable<StringKeyAnalyzer>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      AbstractPatriciaTrie.TrieEntry<Comparable<StringKeyAnalyzer>, Comparable<StringKeyAnalyzer>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Comparable<StringKeyAnalyzer>, Comparable<StringKeyAnalyzer>>(comparable0, comparable0, 2202);
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<StringKeyAnalyzer, StringKeyAnalyzer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<StringKeyAnalyzer, StringKeyAnalyzer>((StringKeyAnalyzer) null, (StringKeyAnalyzer) null);
      Comparable<StringKeyAnalyzer> comparable0 = (Comparable<StringKeyAnalyzer>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      AbstractMap.SimpleImmutableEntry<Object, StringKeyAnalyzer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, StringKeyAnalyzer>(abstractMap_SimpleImmutableEntry0);
      AbstractPatriciaTrie.TrieEntry<Comparable<StringKeyAnalyzer>, AbstractMap.SimpleImmutableEntry<Object, StringKeyAnalyzer>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Comparable<StringKeyAnalyzer>, AbstractMap.SimpleImmutableEntry<Object, StringKeyAnalyzer>>(comparable0, abstractMap_SimpleImmutableEntry1, 2);
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PatriciaTrie<Comparable<StringKeyAnalyzer>> patriciaTrie0 = new PatriciaTrie<Comparable<StringKeyAnalyzer>>();
      Comparable<StringKeyAnalyzer> comparable0 = (Comparable<StringKeyAnalyzer>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      patriciaTrie0.put("predecessor=", comparable0);
      Comparable<StringKeyAnalyzer> comparable1 = (Comparable<StringKeyAnalyzer>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Object object0 = patriciaTrie0.put("aqSFh,g5L$W?", comparable1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      boolean boolean0 = patriciaTrie0.compareKeys("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>();
      boolean boolean0 = patriciaTrie0.compareKeys((String) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<String, Comparable<StringKeyAnalyzer>> hashMap0 = new HashMap<String, Comparable<StringKeyAnalyzer>>(2202, 2202);
      PatriciaTrie<Comparable<StringKeyAnalyzer>> patriciaTrie0 = new PatriciaTrie<Comparable<StringKeyAnalyzer>>(hashMap0);
      boolean boolean0 = patriciaTrie0.compareKeys((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      boolean boolean0 = patriciaTrie0.isBitSet((String) null, 2, 2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PatriciaTrie<StringKeyAnalyzer> patriciaTrie0 = new PatriciaTrie<StringKeyAnalyzer>();
      int int0 = patriciaTrie0.bitsPerElement();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      KeyAnalyzer<? super String> keyAnalyzer0 = patriciaTrie0.getKeyAnalyzer();
      assertEquals((-3), KeyAnalyzer.OUT_OF_BOUNDS_BIT_KEY);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = new StringKeyAnalyzer();
      AbstractMap.SimpleImmutableEntry<StringKeyAnalyzer, StringKeyAnalyzer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<StringKeyAnalyzer, StringKeyAnalyzer>((StringKeyAnalyzer) null, stringKeyAnalyzer0);
      AbstractPatriciaTrie.TrieEntry<StringKeyAnalyzer, AbstractMap.SimpleImmutableEntry<StringKeyAnalyzer, StringKeyAnalyzer>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<StringKeyAnalyzer, AbstractMap.SimpleImmutableEntry<StringKeyAnalyzer, StringKeyAnalyzer>>(stringKeyAnalyzer0, abstractMap_SimpleImmutableEntry0, (-2));
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals(abstractMap_SimpleImmutableEntry0);
      assertFalse(boolean0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PatriciaTrie<StringKeyAnalyzer> patriciaTrie0 = new PatriciaTrie<StringKeyAnalyzer>();
      String string0 = patriciaTrie0.castKey((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      String string0 = patriciaTrie0.put("", "");
      assertNull(string0);
      
      String string1 = patriciaTrie0.toString();
      assertEquals("Trie[1]={\n  RootEntry(key= [-1], value=, parent=null, left=ROOT, right=null, predecessor=ROOT)\n}\n", string1);
  }
}
