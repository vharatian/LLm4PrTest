/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 11:40:29 GMT 2025
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.nio.file.LinkOption;
import java.nio.file.StandardCopyOption;
import java.time.Month;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.HijrahEra;
import java.time.chrono.IsoEra;
import java.time.chrono.MinguoEra;
import java.time.chrono.ThaiBuddhistEra;
import java.time.format.ResolverStyle;
import java.time.format.TextStyle;
import java.time.temporal.ChronoField;
import java.time.temporal.ChronoUnit;
import java.util.AbstractMap;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.list.FixedSizeList;
import org.apache.commons.collections4.queue.CircularFifoQueue;
import org.apache.commons.io.file.StandardDeleteOption;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CollectionUtils_ESTest extends CollectionUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Vector<Stack<Integer>> vector0 = new Vector<Stack<Integer>>();
      Collection<Stack<Integer>> collection0 = CollectionUtils.synchronizedCollection((Collection<Stack<Integer>>) vector0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ArrayList<Stack<Integer>> arrayList0 = new ArrayList<Stack<Integer>>();
      FixedSizeList<Stack<Integer>> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Stack<Integer>>) arrayList0);
      // Undeclared exception!
      try { 
        CollectionUtils.removeCount((Collection<Stack<Integer>>) fixedSizeList0, 503, 2578);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The sum of start index and count can't be greater than the size of collection.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ArrayList<Stack<Integer>> arrayList0 = new ArrayList<Stack<Integer>>();
      // Undeclared exception!
      try { 
        CollectionUtils.removeRange((Collection<Stack<Integer>>) arrayList0, (-657), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The start index can't be less than 0.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>();
      // Undeclared exception!
      try { 
        CollectionUtils.removeRange((Collection<Integer>) circularFifoQueue0, 6, 365);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The end index can't be greater than the size of collection.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<TextStyle> class0 = TextStyle.class;
      EnumSet<TextStyle> enumSet0 = EnumSet.allOf(class0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>(78, comparator0);
      Collection<Predicate<Object>> collection0 = CollectionUtils.retainAll((Collection<Predicate<Object>>) priorityQueue0, (Collection<?>) enumSet0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(arrayList0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Integer> list0 = CollectionUtils.collate((Iterable<? extends Integer>) arrayList0, (Iterable<? extends Integer>) linkedHashSet0, (Comparator<? super Integer>) comparator0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TreeSet<MockFile> treeSet0 = new TreeSet<MockFile>();
      PriorityQueue<MockFile> priorityQueue0 = new PriorityQueue<MockFile>((SortedSet<? extends MockFile>) treeSet0);
      Class<MockFile> class0 = MockFile.class;
      ServiceLoader<MockFile> serviceLoader0 = ServiceLoader.load(class0);
      List<MockFile> list0 = CollectionUtils.collate((Iterable<? extends MockFile>) priorityQueue0, (Iterable<? extends MockFile>) serviceLoader0, false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Collection<Integer> collection0 = CollectionUtils.intersection((Iterable<? extends Integer>) linkedHashSet0, (Iterable<? extends Integer>) linkedHashSet0);
      List<Integer> list0 = CollectionUtils.collate((Iterable<? extends Integer>) collection0, (Iterable<? extends Integer>) linkedHashSet0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      CollectionUtils.reverseArray(objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        CollectionUtils.get(object0, (-1201));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -1201
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      MinguoEra minguoEra0 = MinguoEra.ROC;
      MinguoEra minguoEra1 = MinguoEra.BEFORE_ROC;
      EnumSet<MinguoEra> enumSet0 = EnumSet.of(minguoEra0, minguoEra0, minguoEra1);
      List<MinguoEra> list0 = CollectionUtils.collate((Iterable<? extends MinguoEra>) enumSet0, (Iterable<? extends MinguoEra>) enumSet0);
      FixedSizeList<MinguoEra> fixedSizeList0 = FixedSizeList.fixedSizeList(list0);
      Iterator<MinguoEra> iterator0 = fixedSizeList0.iterator();
      boolean boolean0 = CollectionUtils.addAll((Collection<Object>) linkedHashSet0, (Iterator<?>) iterator0);
      assertEquals(4, list0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DefaultEquator<Integer> defaultEquator0 = DefaultEquator.defaultEquator();
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>();
      circularFifoQueue0.add((Integer) defaultEquator0.HASHCODE_NULL);
      circularFifoQueue0.add((Integer) (-1));
      CollectionUtils.hashCode((Collection<? extends Integer>) circularFifoQueue0, (Equator<? super Integer>) defaultEquator0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Collection<Integer> collection0 = CollectionUtils.emptyCollection();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Integer> list0 = CollectionUtils.collate((Iterable<? extends Integer>) collection0, (Iterable<? extends Integer>) collection0, (Comparator<? super Integer>) comparator0, false);
      DefaultEquator<Integer> defaultEquator0 = DefaultEquator.defaultEquator();
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<? extends Integer>) collection0, (Collection<? extends Integer>) list0, (Equator<? super Integer>) defaultEquator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      IsoEra isoEra0 = IsoEra.BCE;
      linkedHashSet0.add(isoEra0);
      Stack<StandardCopyOption> stack0 = new Stack<StandardCopyOption>();
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<?>) stack0, (Collection<?>) linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(31).when(comparator0).compare(any() , any());
      TreeSet<Stack<Integer>> treeSet0 = new TreeSet<Stack<Integer>>(comparator0);
      Stack<Integer> stack0 = new Stack<Integer>();
      treeSet0.add(stack0);
      TreeSet treeSet1 = (TreeSet)treeSet0.clone();
      CircularFifoQueue<ChronoUnit> circularFifoQueue0 = new CircularFifoQueue<ChronoUnit>(1810);
      boolean boolean0 = CollectionUtils.isProperSubCollection(treeSet1, circularFifoQueue0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSet0.add(stack0);
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) linkedHashSet0, (Collection<?>) stack0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Collection<Integer> collection0 = CollectionUtils.emptyCollection();
      Integer integer0 = new Integer((-37));
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      priorityQueue0.add(integer0);
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>(priorityQueue0);
      Collection<Integer> collection1 = CollectionUtils.disjunction((Iterable<? extends Integer>) treeSet0, (Iterable<? extends Integer>) collection0);
      assertTrue(collection1.contains((-37)));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      FixedSizeList<Integer> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Integer>) vector0);
      Collection<Integer> collection0 = CollectionUtils.union((Iterable<? extends Integer>) vector0, (Iterable<? extends Integer>) fixedSizeList0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Collection<Object> collection0 = CollectionUtils.emptyCollection();
      Collection<Object> collection1 = CollectionUtils.selectRejected((Iterable<?>) collection0, (Predicate<? super Object>) null);
      Collection<Object> collection2 = CollectionUtils.emptyIfNull(collection1);
      assertSame(collection2, collection1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CollectionUtils.checkIndexBounds(31);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Vector<Integer> vector0 = new Vector<Integer>();
      Collection<Integer> collection0 = CollectionUtils.predicatedCollection((Collection<Integer>) vector0, (Predicate<? super Integer>) uniquePredicate0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ArrayDeque<Collection<Integer>> arrayDeque0 = new ArrayDeque<Collection<Integer>>();
      Map<Collection<Integer>, Integer> map0 = CollectionUtils.getCardinalityMap((Iterable<? extends Collection<Integer>>) arrayDeque0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      arrayList0.add(locale_Category0);
      ListIterator<Locale.Category> listIterator0 = arrayList0.listIterator();
      Locale.Category locale_Category1 = CollectionUtils.get((Iterator<Locale.Category>) listIterator0, 0);
      assertTrue(arrayList0.contains(locale_Category1));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Stack<IsoEra> stack0 = new Stack<IsoEra>();
      IsoEra isoEra0 = IsoEra.BCE;
      stack0.add(isoEra0);
      Object object0 = CollectionUtils.get((Object) stack0, 0);
      assertSame(object0, isoEra0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CircularFifoQueue<LinkOption> circularFifoQueue0 = new CircularFifoQueue<LinkOption>(1);
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      circularFifoQueue0.add(linkOption0);
      LinkOption linkOption1 = CollectionUtils.get((Iterable<LinkOption>) circularFifoQueue0, 0);
      assertSame(linkOption1, linkOption0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      Stack<Integer> stack1 = new Stack<Integer>();
      stack0.addElement(stack1);
      NOPClosure<Object> nOPClosure0 = (NOPClosure<Object>) mock(NOPClosure.class, new ViolatedAssumptionAnswer());
      Stack stack2 = (Stack)CollectionUtils.forAllButLastDo((Iterable<Object>) stack0, nOPClosure0);
      assertEquals(0, stack2.size());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Vector<TextStyle> vector0 = new Vector<TextStyle>();
      TextStyle textStyle0 = TextStyle.FULL_STANDALONE;
      vector0.add(textStyle0);
      Predicate<TextStyle> predicate0 = UniquePredicate.uniquePredicate();
      TextStyle textStyle1 = CollectionUtils.find((Iterable<TextStyle>) vector0, (Predicate<? super TextStyle>) predicate0);
      assertEquals(TextStyle.FULL_STANDALONE, textStyle1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      Stack<Integer> stack1 = new Stack<Integer>();
      stack0.addElement(stack1);
      Stack stack2 = (Stack)CollectionUtils.extractSingleton((Collection<Object>) stack0);
      assertEquals(10, stack2.capacity());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashSet<IsoEra> hashSet0 = new HashSet<IsoEra>();
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      Collection<Integer> collection0 = CollectionUtils.collect((Iterable<?>) hashSet0, (Transformer<? super Object, ? extends Integer>) transformer0, (Collection<Integer>) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<TextStyle> class0 = TextStyle.class;
      EnumSet<TextStyle> enumSet0 = EnumSet.allOf(class0);
      Comparator<TextStyle> comparator0 = (Comparator<TextStyle>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any(java.time.format.TextStyle.class) , any(java.time.format.TextStyle.class));
      List<TextStyle> list0 = CollectionUtils.collate((Iterable<? extends TextStyle>) enumSet0, (Iterable<? extends TextStyle>) enumSet0, (Comparator<? super TextStyle>) comparator0);
      assertEquals(12, list0.size());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(0);
      Integer integer0 = new Integer(0);
      linkedHashSet0.add(integer0);
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      Collection<Object> collection0 = CollectionUtils.subtract((Iterable<?>) linkedHashSet0, (Iterable<?>) hashSet0);
      int int0 = CollectionUtils.cardinality((Object) integer0, (Iterable<? super Object>) collection0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TreeSet<Locale.FilteringMode> treeSet0 = new TreeSet<Locale.FilteringMode>();
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[0];
      boolean boolean0 = CollectionUtils.addAll((Collection<Locale.FilteringMode>) treeSet0, locale_FilteringModeArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PriorityQueue<Stack<Object>> priorityQueue0 = new PriorityQueue<Stack<Object>>();
      LinkedHashSet<Stack<Object>> linkedHashSet0 = new LinkedHashSet<Stack<Object>>();
      Iterator<Stack<Object>> iterator0 = linkedHashSet0.iterator();
      boolean boolean0 = CollectionUtils.addAll((Collection<Stack<Object>>) priorityQueue0, (Iterator<? extends Stack<Object>>) iterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ArrayList<StandardDeleteOption> arrayList0 = new ArrayList<StandardDeleteOption>();
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      arrayList0.add(standardDeleteOption0);
      boolean boolean0 = CollectionUtils.addAll((Collection<StandardDeleteOption>) arrayList0, (Iterable<? extends StandardDeleteOption>) arrayList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.unmodifiableCollection((Collection<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.union((Iterable<? extends Stack<Integer>>) null, (Iterable<? extends Stack<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // a
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LinkedHashSet<Locale.Category> linkedHashSet0 = new LinkedHashSet<Locale.Category>();
      // Undeclared exception!
      try { 
        CollectionUtils.transformingCollection((Collection<Locale.Category>) linkedHashSet0, (Transformer<? super Locale.Category, ? extends Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Integer integer0 = new Integer((-37));
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      priorityQueue0.add(integer0);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 9);
      InvokerTransformer<Object, Integer> invokerTransformer0 = new InvokerTransformer<Object, Integer>("C[4gx2z", classArray0, classArray0);
      // Undeclared exception!
      try { 
        CollectionUtils.transform((Collection<Integer>) priorityQueue0, (Transformer<? super Integer, ? extends Integer>) invokerTransformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'C[4gx2z' on 'class java.lang.Integer' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      Collection<Locale.Category> collection0 = CollectionUtils.unmodifiableCollection((Collection<? extends Locale.Category>) arrayList0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ConstantTransformer<Locale.Category, Locale.Category> constantTransformer0 = new ConstantTransformer<Locale.Category, Locale.Category>(locale_Category0);
      // Undeclared exception!
      try { 
        CollectionUtils.transform(collection0, (Transformer<? super Locale.Category, ? extends Locale.Category>) constantTransformer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TreeSet<Locale.Category> treeSet0 = new TreeSet<Locale.Category>();
      HashMap<Locale.Category, Locale.Category> hashMap0 = new HashMap<Locale.Category, Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      treeSet0.add(locale_Category0);
      Transformer<Locale.Category, Locale.Category> transformer0 = MapTransformer.mapTransformer((Map<? super Locale.Category, ? extends Locale.Category>) hashMap0);
      // Undeclared exception!
      try { 
        CollectionUtils.transform((Collection<Locale.Category>) treeSet0, (Transformer<? super Locale.Category, ? extends Locale.Category>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      // Undeclared exception!
      try { 
        CollectionUtils.subtract((Iterable<? extends Integer>) stack0, (Iterable<? extends Integer>) stack0, (Predicate<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // p
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      Comparator<LinkOption> comparator0 = (Comparator<LinkOption>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<LinkOption> predicate0 = ComparatorPredicate.comparatorPredicate(linkOption0, comparator0);
      Collection<LinkOption> collection0 = CollectionUtils.select((Iterable<? extends LinkOption>) null, (Predicate<? super LinkOption>) predicate0);
      // Undeclared exception!
      try { 
        CollectionUtils.subtract((Iterable<?>) null, (Iterable<?>) collection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // a
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<TextStyle> class0 = TextStyle.class;
      EnumSet<TextStyle> enumSet0 = EnumSet.allOf(class0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        CollectionUtils.selectRejected((Iterable<?>) enumSet0, (Predicate<? super Object>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>(32);
      circularFifoQueue0.add((Integer) (-1));
      UniquePredicate<Integer> uniquePredicate0 = new UniquePredicate<Integer>();
      // Undeclared exception!
      CollectionUtils.select((Iterable<? extends Integer>) circularFifoQueue0, (Predicate<? super Integer>) uniquePredicate0, (Collection<Integer>) circularFifoQueue0, (Collection<Integer>) circularFifoQueue0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      UniquePredicate<Integer> uniquePredicate0 = new UniquePredicate<Integer>();
      Integer integer0 = new Integer(20);
      stack0.add(integer0);
      stack0.add(integer0);
      Collection<Integer> collection0 = CollectionUtils.select((Iterable<? extends Integer>) null, (Predicate<? super Integer>) uniquePredicate0);
      // Undeclared exception!
      try { 
        CollectionUtils.select((Iterable<? extends Integer>) stack0, (Predicate<? super Integer>) uniquePredicate0, collection0, (Collection<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      Integer integer0 = new Integer((-34));
      hashSet0.add(integer0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      CircularFifoQueue<Object> circularFifoQueue0 = new CircularFifoQueue<Object>();
      // Undeclared exception!
      try { 
        CollectionUtils.select((Iterable<? extends Integer>) hashSet0, (Predicate<? super Integer>) predicate0, (Collection<Object>) circularFifoQueue0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      Integer integer0 = new Integer(65535);
      priorityQueue0.add(integer0);
      Predicate<Integer> predicate0 = NotNullPredicate.notNullPredicate();
      // Undeclared exception!
      try { 
        CollectionUtils.select((Iterable<? extends Integer>) priorityQueue0, (Predicate<? super Integer>) predicate0, (Collection<Integer>) priorityQueue0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Integer integer0 = new Integer((-37));
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      priorityQueue0.add(integer0);
      NonePredicate<Integer> nonePredicate0 = new NonePredicate<Integer>((Predicate<? super Integer>[]) null);
      // Undeclared exception!
      try { 
        CollectionUtils.select((Iterable<? extends Integer>) priorityQueue0, (Predicate<? super Integer>) nonePredicate0, (Collection<Integer>) priorityQueue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NonePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Integer integer0 = new Integer((-37));
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      priorityQueue0.add(integer0);
      Transformer<Integer, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      Predicate<Integer> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Integer, Boolean>) transformer0);
      // Undeclared exception!
      try { 
        CollectionUtils.select((Iterable<? extends Integer>) priorityQueue0, (Predicate<? super Integer>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.reverseArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // array
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.retainAll((Collection<Object>) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      // Undeclared exception!
      try { 
        CollectionUtils.retainAll((Iterable<Object>) null, (Iterable<?>) null, (Equator<? super Object>) defaultEquator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.removeRange((Collection<Integer>) null, (-3682), 1191);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.removeCount((Collection<ThaiBuddhistEra>) null, (-375), (-375));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.removeAll((Collection<Locale.Category>) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TreeSet<Comparable<Object>> treeSet0 = new TreeSet<Comparable<Object>>();
      ArrayList<Stack<Integer>> arrayList0 = new ArrayList<Stack<Integer>>();
      Stack<Integer> stack0 = new Stack<Integer>();
      arrayList0.add(stack0);
      // Undeclared exception!
      try { 
        CollectionUtils.removeAll((Collection<Stack<Integer>>) arrayList0, (Collection<?>) treeSet0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      // Undeclared exception!
      try { 
        CollectionUtils.removeAll((Iterable<Integer>) stack0, (Iterable<? extends Integer>) stack0, (Equator<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // equator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<TextStyle> class0 = TextStyle.class;
      EnumSet<TextStyle> enumSet0 = EnumSet.allOf(class0);
      Transformer<Object, TextStyle> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.PredicateUtils");
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, nullIsExceptionPredicate0);
      // Undeclared exception!
      try { 
        CollectionUtils.predicatedCollection((Collection<TextStyle>) enumSet0, (Predicate<? super TextStyle>) transformedPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'org.apache.commons.collections4.PredicateUtils' on 'class java.time.format.TextStyle' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = new Integer(19);
      stack0.add(integer0);
      Stack<Object> stack1 = new Stack<Object>();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) stack1, (Equator<Object>) defaultEquator0);
      // Undeclared exception!
      try { 
        CollectionUtils.predicatedCollection((Collection<Integer>) stack0, (Predicate<? super Integer>) predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object '19' - Predicate 'org.apache.commons.collections4.functors.EqualPredicate@1' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.permutations((Collection<Stack<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.maxSize((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.isSubCollection((Collection<?>) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // a
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.isProperSubCollection((Collection<?>) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // a
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.isFull((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DefaultEquator<Integer> defaultEquator0 = DefaultEquator.defaultEquator();
      // Undeclared exception!
      try { 
        CollectionUtils.isEqualCollection((Collection<? extends Integer>) null, (Collection<? extends Integer>) null, (Equator<? super Integer>) defaultEquator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // a
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<TextStyle> class0 = TextStyle.class;
      EnumSet<TextStyle> enumSet0 = EnumSet.allOf(class0);
      // Undeclared exception!
      try { 
        CollectionUtils.isEqualCollection((Collection<?>) enumSet0, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // b
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<TextStyle> class0 = TextStyle.class;
      EnumSet<TextStyle> enumSet0 = EnumSet.allOf(class0);
      // Undeclared exception!
      try { 
        CollectionUtils.intersection((Iterable<? extends TextStyle>) enumSet0, (Iterable<? extends TextStyle>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // b
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      // Undeclared exception!
      try { 
        CollectionUtils.hashCode((Collection<?>) stack0, (Equator<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // equator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.getCardinalityMap((Iterable<? extends Collection<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coll
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.get((Map<Integer, Comparable<Comparable>>) null, (-868));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.get((Iterator<Stack<Integer>>) null, (-738));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ArrayList<ThaiBuddhistEra> arrayList0 = new ArrayList<ThaiBuddhistEra>();
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) arrayList0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        CollectionUtils.get((Iterable<Integer>) linkedList0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Collection<Stack<Object>> collection0 = CollectionUtils.emptyCollection();
      // Undeclared exception!
      try { 
        CollectionUtils.get((Iterable<Stack<Object>>) collection0, (-1103));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -1103
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      // Undeclared exception!
      try { 
        CollectionUtils.get((Iterable<Integer>) stack0, 1829);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1829
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Iterator<Collection<Stack<Integer>>> iterator0 = (Iterator<Collection<Stack<Integer>>>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) iterator0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate0, closure0, true);
      WhileClosure<Object> whileClosure1 = CollectionUtils.forAllDo(iterator0, whileClosure0);
      assertTrue(whileClosure1.isDoLoop());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ArrayList<ThaiBuddhistEra> arrayList0 = new ArrayList<ThaiBuddhistEra>();
      Iterator<ThaiBuddhistEra> iterator0 = arrayList0.iterator();
      ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BEFORE_BE;
      arrayList0.add(thaiBuddhistEra0);
      NOPClosure<ThaiBuddhistEra> nOPClosure0 = (NOPClosure<ThaiBuddhistEra>) mock(NOPClosure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CollectionUtils.forAllDo(iterator0, nOPClosure0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = new Integer(4);
      stack0.add(integer0);
      Predicate<Integer> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        CollectionUtils.find((Iterable<Integer>) stack0, (Predicate<? super Integer>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>(1806);
      priorityQueue0.add((Integer) defaultEquator0.HASHCODE_NULL);
      // Undeclared exception!
      try { 
        CollectionUtils.filterInverse((Iterable<Integer>) priorityQueue0, (Predicate<? super Integer>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      UniquePredicate<Integer> uniquePredicate0 = new UniquePredicate<Integer>();
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      Integer integer0 = new Integer((-2700));
      priorityQueue0.add(integer0);
      Collection<Integer> collection0 = CollectionUtils.unmodifiableCollection((Collection<? extends Integer>) priorityQueue0);
      // Undeclared exception!
      try { 
        CollectionUtils.filterInverse((Iterable<Integer>) collection0, (Predicate<? super Integer>) uniquePredicate0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove() is not supported
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      Integer integer0 = new Integer((-1));
      priorityQueue0.add(integer0);
      Predicate<Integer>[] predicateArray0 = (Predicate<Integer>[]) Array.newInstance(Predicate.class, 1);
      OnePredicate<Integer> onePredicate0 = new OnePredicate<Integer>(predicateArray0);
      // Undeclared exception!
      try { 
        CollectionUtils.filterInverse((Iterable<Integer>) priorityQueue0, (Predicate<? super Integer>) onePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.OnePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.extractSingleton((Collection<Comparable<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Stack<ResolverStyle> stack0 = new Stack<ResolverStyle>();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(stack0, defaultEquator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Transformer<Object, Integer> transformer0 = InvokerTransformer.invokerTransformer("vUl]{I");
      IfTransformer<Object, Integer> ifTransformer0 = new IfTransformer<Object, Integer>(uniquePredicate0, transformer0, transformer0);
      LinkedList<HijrahEra> linkedList0 = new LinkedList<HijrahEra>();
      PriorityQueue<LinkedList<HijrahEra>> priorityQueue0 = new PriorityQueue<LinkedList<HijrahEra>>();
      priorityQueue0.add(linkedList0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(ifTransformer0, equalPredicate0);
      // Undeclared exception!
      try { 
        CollectionUtils.exists((Iterable<LinkedList<HijrahEra>>) priorityQueue0, (Predicate<? super LinkedList<HijrahEra>>) transformedPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'vUl]{I' on 'class java.util.LinkedList' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.disjunction((Iterable<? extends Integer>) null, (Iterable<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // a
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      // Undeclared exception!
      try { 
        CollectionUtils.containsAny((Collection<?>) null, integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coll1
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      // Undeclared exception!
      try { 
        CollectionUtils.containsAny((Collection<?>) null, (Collection<?>) stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coll1
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<ResolverStyle> class0 = ResolverStyle.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<ResolverStyle> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      Collection<ResolverStyle> collection0 = CollectionUtils.intersection((Iterable<? extends ResolverStyle>) serviceLoader0, (Iterable<? extends ResolverStyle>) serviceLoader0);
      // Undeclared exception!
      try { 
        CollectionUtils.containsAll((Collection<?>) null, collection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coll1
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.NARROW_STANDALONE;
      EnumSet<TextStyle> enumSet0 = EnumSet.range(textStyle0, textStyle0);
      Iterator<TextStyle> iterator0 = enumSet0.iterator();
      Transformer<TextStyle, TextStyle> transformer0 = InvokerTransformer.invokerTransformer(")6/oM9=@`MR&Wf");
      // Undeclared exception!
      try { 
        CollectionUtils.collect(iterator0, (Transformer<? super TextStyle, ? extends TextStyle>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method ')6/oM9=@`MR&Wf' on 'class java.time.format.TextStyle' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Stack<IsoEra> stack0 = new Stack<IsoEra>();
      FixedSizeList<IsoEra> fixedSizeList0 = FixedSizeList.fixedSizeList((List<IsoEra>) stack0);
      ListIterator<IsoEra> listIterator0 = fixedSizeList0.listIterator();
      IsoEra isoEra0 = IsoEra.CE;
      ConstantTransformer<Object, IsoEra> constantTransformer0 = new ConstantTransformer<Object, IsoEra>(isoEra0);
      stack0.add(isoEra0);
      // Undeclared exception!
      try { 
        CollectionUtils.collect((Iterator<IsoEra>) listIterator0, (Transformer<? super IsoEra, ?>) constantTransformer0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.collate((Iterable<? extends ChronoLocalDate>) null, (Iterable<? extends ChronoLocalDate>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterableA
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>(1763, (Comparator<? super Integer>) null);
      // Undeclared exception!
      try { 
        CollectionUtils.collate((Iterable<? extends Integer>) priorityQueue0, (Iterable<? extends Integer>) priorityQueue0, (Comparator<? super Integer>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // comparator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CollectionUtils.collate((Iterable<? extends Integer>) null, (Iterable<? extends Integer>) null, (Comparator<? super Integer>) comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterableA
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.collate((Iterable<? extends TextStyle>) null, (Iterable<? extends TextStyle>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterableA
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.checkIndexBounds((-43));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -43
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Integer integer0 = new Integer((-1201));
      // Undeclared exception!
      try { 
        CollectionUtils.cardinality((Object) integer0, (Iterable<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Vector<Stack<Object>> vector0 = new Vector<Stack<Object>>();
      Collection<Stack<Object>> collection0 = CollectionUtils.unmodifiableCollection((Collection<? extends Stack<Object>>) vector0);
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        CollectionUtils.addIgnoreNull(collection0, stack0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Stack<ChronoField> stack0 = new Stack<ChronoField>();
      // Undeclared exception!
      try { 
        CollectionUtils.addIgnoreNull((Collection<Stack<ChronoField>>) null, stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Collection<Locale.FilteringMode> collection0 = CollectionUtils.emptyCollection();
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[1];
      // Undeclared exception!
      try { 
        CollectionUtils.addAll(collection0, locale_FilteringModeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>();
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[1];
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<Locale.FilteringMode>) priorityQueue0, locale_FilteringModeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TreeSet<Stack<Integer>> treeSet0 = new TreeSet<Stack<Integer>>();
      Stack<Integer>[] stackArray0 = (Stack<Integer>[]) Array.newInstance(Stack.class, 3);
      Stack<Integer> stack0 = new Stack<Integer>();
      stackArray0[0] = stack0;
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<Stack<Integer>>) treeSet0, stackArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Stack cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = new Integer(0);
      stack0.add(integer0);
      ListIterator<Integer> listIterator0 = stack0.listIterator();
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<Integer>) stack0, (Iterator<? extends Integer>) listIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Stack<LinkOption> stack0 = new Stack<LinkOption>();
      ListIterator<LinkOption> listIterator0 = stack0.listIterator();
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<Object>) null, (Iterator<?>) listIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Enumeration<Integer> enumeration0 = (Enumeration<Integer>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<Integer>) null, (Enumeration<? extends Integer>) enumeration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<AbstractMap.SimpleImmutableEntry<Integer, Integer>>) null, (Iterable<? extends AbstractMap.SimpleImmutableEntry<Integer, Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PriorityQueue<AbstractMap.SimpleImmutableEntry<Integer, Integer>> priorityQueue0 = new PriorityQueue<AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<AbstractMap.SimpleImmutableEntry<Integer, Integer>>) priorityQueue0, (Iterable<? extends AbstractMap.SimpleImmutableEntry<Integer, Integer>>) priorityQueue0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Vector<Transformer<Integer, Integer>> vector0 = new Vector<Transformer<Integer, Integer>>();
      // Undeclared exception!
      try { 
        CollectionUtils.removeCount((Collection<Transformer<Integer, Integer>>) vector0, (-1408), 32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The start index can't be less than 0.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer(65);
      linkedHashSet0.add(integer0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      List<Integer> list0 = CollectionUtils.collate((Iterable<? extends Integer>) linkedHashSet0, (Iterable<? extends Integer>) linkedHashSet0, (Comparator<? super Integer>) comparator0, false);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(65));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = CollectionUtils.isEmpty((Collection<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<ResolverStyle> class0 = ResolverStyle.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<ResolverStyle> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      Collection<ResolverStyle> collection0 = CollectionUtils.intersection((Iterable<? extends ResolverStyle>) serviceLoader0, (Iterable<? extends ResolverStyle>) serviceLoader0);
      boolean boolean0 = CollectionUtils.addAll(collection0, (Iterable<? extends ResolverStyle>) serviceLoader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Transformer<Object, Integer> transformer0 = InvokerTransformer.invokerTransformer("?M4L");
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      Integer integer0 = new Integer(599);
      priorityQueue0.add(integer0);
      Iterator<Integer> iterator0 = priorityQueue0.iterator();
      // Undeclared exception!
      try { 
        CollectionUtils.collect((Iterator<? extends Comparable<Integer>>) iterator0, (Transformer<? super Comparable<Integer>, ? extends Integer>) transformer0, (Collection<Integer>) priorityQueue0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '?M4L' on 'class java.lang.Integer' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      Iterator<Integer> iterator0 = hashSet0.iterator();
      Transformer<Object, Integer> transformer0 = InvokerTransformer.invokerTransformer("N'j5KP~&Dy?CehSeKI");
      Collection<Integer> collection0 = CollectionUtils.collect((Iterator<? extends Comparable<Integer>>) iterator0, (Transformer<? super Comparable<Integer>, ? extends Integer>) transformer0, (Collection<Integer>) hashSet0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>();
      Integer integer0 = new Integer((-1779));
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      FactoryTransformer<Object, Integer> factoryTransformer0 = new FactoryTransformer<Object, Integer>(constantFactory0);
      Collection<Integer> collection0 = CollectionUtils.collect((Iterable<?>) circularFifoQueue0, (Transformer<? super Object, ? extends Integer>) factoryTransformer0, (Collection<Integer>) circularFifoQueue0);
      assertFalse(collection0.contains(integer0));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Vector<TextStyle> vector0 = new Vector<TextStyle>();
      TextStyle textStyle0 = TextStyle.FULL_STANDALONE;
      vector0.add(textStyle0);
      Transformer<TextStyle, Stack<Integer>> transformer0 = ConstantTransformer.nullTransformer();
      Collection<Stack<Integer>> collection0 = CollectionUtils.collect((Iterable<TextStyle>) vector0, (Transformer<? super TextStyle, ? extends Stack<Integer>>) transformer0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ResolverStyle resolverStyle0 = ResolverStyle.SMART;
      ResolverStyle[] resolverStyleArray0 = new ResolverStyle[5];
      resolverStyleArray0[0] = resolverStyle0;
      resolverStyleArray0[1] = resolverStyle0;
      resolverStyleArray0[2] = resolverStyle0;
      resolverStyleArray0[3] = resolverStyle0;
      resolverStyleArray0[4] = resolverStyle0;
      EnumSet<ResolverStyle> enumSet0 = EnumSet.of(resolverStyle0, resolverStyleArray0);
      Comparator<ResolverStyle> comparator0 = (Comparator<ResolverStyle>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.time.format.ResolverStyle.class) , any(java.time.format.ResolverStyle.class));
      List<ResolverStyle> list0 = CollectionUtils.collate((Iterable<? extends ResolverStyle>) enumSet0, (Iterable<? extends ResolverStyle>) enumSet0, (Comparator<? super ResolverStyle>) comparator0, true);
      Collection<ResolverStyle> collection0 = CollectionUtils.selectRejected((Iterable<? extends ResolverStyle>) null, (Predicate<? super ResolverStyle>) null, (Collection<ResolverStyle>) list0);
      assertTrue(collection0.contains(resolverStyle0));
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Collection<Integer> collection0 = CollectionUtils.emptyCollection();
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      Collection<Integer> collection1 = CollectionUtils.selectRejected((Iterable<? extends Integer>) collection0, (Predicate<? super Integer>) null, (Collection<Integer>) priorityQueue0);
      assertFalse(collection1.equals((Object)collection0));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Collection<Integer> collection0 = CollectionUtils.emptyCollection();
      Integer integer0 = new Integer(0);
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      priorityQueue0.add(integer0);
      Predicate<Integer> predicate0 = NotNullPredicate.notNullPredicate();
      // Undeclared exception!
      try { 
        CollectionUtils.select((Iterable<? extends Integer>) priorityQueue0, (Predicate<? super Integer>) predicate0, collection0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      CircularFifoQueue<Object> circularFifoQueue0 = new CircularFifoQueue<Object>();
      Collection<Object> collection0 = CollectionUtils.select((Iterable<? extends Integer>) null, (Predicate<? super Integer>) predicate0, (Collection<Object>) circularFifoQueue0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>(32);
      Collection<Integer> collection0 = CollectionUtils.select((Iterable<? extends Integer>) priorityQueue0, (Predicate<? super Integer>) null, (Collection<Integer>) priorityQueue0);
      assertFalse(collection0.contains(32));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      TreeSet<Stack<Integer>> treeSet0 = new TreeSet<Stack<Integer>>(comparator0);
      Stack<Integer> stack0 = new Stack<Integer>();
      treeSet0.add(stack0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) treeSet0, comparator1);
      boolean boolean0 = CollectionUtils.filter((Iterable<Stack<Integer>>) treeSet0, (Predicate<? super Stack<Integer>>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(31).when(comparator0).compare(any() , any());
      TreeSet<Stack<Integer>> treeSet0 = new TreeSet<Stack<Integer>>(comparator0);
      Stack<Integer> stack0 = new Stack<Integer>();
      treeSet0.add(stack0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(comparator1).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) treeSet0, comparator1);
      boolean boolean0 = CollectionUtils.filter((Iterable<Stack<Integer>>) treeSet0, (Predicate<? super Stack<Integer>>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) "!]DJYTD`#Asr7`Ac", comparator0);
      boolean boolean0 = CollectionUtils.filter((Iterable<Stack<Integer>>) null, (Predicate<? super Stack<Integer>>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.get((Iterable<Transformer<Object, Stack<LinkOption>>>) null, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Integer integer0 = new Integer(6);
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>(6);
      priorityQueue0.add(integer0);
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      DefaultEquator<Integer> defaultEquator0 = DefaultEquator.defaultEquator();
      Collection<Integer> collection0 = CollectionUtils.removeAll((Iterable<Integer>) priorityQueue0, (Iterable<? extends Integer>) treeSet0, (Equator<? super Integer>) defaultEquator0);
      assertTrue(collection0.contains(6));
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TreeSet<AbstractMap.SimpleImmutableEntry<Integer, Object>> treeSet0 = new TreeSet<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      Collection<AbstractMap.SimpleImmutableEntry<Integer, Object>> collection0 = CollectionUtils.removeCount((Collection<AbstractMap.SimpleImmutableEntry<Integer, Object>>) treeSet0, 0, 0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TreeSet<Locale.FilteringMode> treeSet0 = new TreeSet<Locale.FilteringMode>();
      // Undeclared exception!
      try { 
        CollectionUtils.removeCount((Collection<Locale.FilteringMode>) treeSet0, 42, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The count can't be less than 0.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PriorityQueue<LinkOption> priorityQueue0 = new PriorityQueue<LinkOption>();
      // Undeclared exception!
      try { 
        CollectionUtils.removeRange((Collection<LinkOption>) priorityQueue0, (-2680), (-2680));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The start index can't be less than 0.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Collection<TextStyle> collection0 = CollectionUtils.emptyCollection();
      // Undeclared exception!
      try { 
        CollectionUtils.removeRange(collection0, 3, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end index can't be less than the start index.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>();
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[2];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      locale_FilteringModeArray0[1] = locale_FilteringModeArray0[0];
      CollectionUtils.addAll((Collection<Locale.FilteringMode>) priorityQueue0, locale_FilteringModeArray0);
      DefaultEquator<Locale.FilteringMode> defaultEquator0 = DefaultEquator.defaultEquator();
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      ServiceLoader<Locale.FilteringMode> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      Collection<Locale.FilteringMode> collection0 = CollectionUtils.retainAll((Iterable<Locale.FilteringMode>) priorityQueue0, (Iterable<? extends Locale.FilteringMode>) serviceLoader0, (Equator<? super Locale.FilteringMode>) defaultEquator0);
      assertEquals(2, priorityQueue0.size());
      assertFalse(collection0.contains(locale_FilteringMode0));
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>();
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[1];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      CollectionUtils.addAll((Collection<Locale.FilteringMode>) priorityQueue0, locale_FilteringModeArray0);
      DefaultEquator<Locale.FilteringMode> defaultEquator0 = DefaultEquator.defaultEquator();
      Collection<Locale.FilteringMode> collection0 = CollectionUtils.retainAll((Iterable<Locale.FilteringMode>) priorityQueue0, (Iterable<? extends Locale.FilteringMode>) priorityQueue0, (Equator<? super Locale.FilteringMode>) defaultEquator0);
      assertEquals(1, priorityQueue0.size());
      assertTrue(collection0.contains(locale_FilteringMode0));
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      CollectionUtils.permutations((Collection<Object>) linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(0);
      Integer integer0 = new Integer(0);
      linkedHashSet0.add(integer0);
      Integer integer1 = new Integer(2);
      linkedHashSet0.add(integer1);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(anyInt() , anyInt());
      List<Integer> list0 = CollectionUtils.collate((Iterable<? extends Integer>) linkedHashSet0, (Iterable<? extends Integer>) linkedHashSet0, (Comparator<? super Integer>) comparator0, false);
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>(1);
      Integer integer0 = new Integer((-4));
      priorityQueue0.add(integer0);
      List<Integer> list0 = CollectionUtils.collate((Iterable<? extends Integer>) priorityQueue0, (Iterable<? extends Integer>) priorityQueue0, false);
      assertTrue(list0.contains((-4)));
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Integer> list0 = CollectionUtils.collate((Iterable<? extends Integer>) serviceLoader0, (Iterable<? extends Integer>) serviceLoader0, (Comparator<? super Integer>) comparator0, true);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ArrayList<ThaiBuddhistEra> arrayList0 = new ArrayList<ThaiBuddhistEra>();
      int int0 = CollectionUtils.maxSize(arrayList0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      FixedSizeList<Integer> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Integer>) vector0);
      boolean boolean0 = CollectionUtils.isFull(fixedSizeList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>();
      boolean boolean0 = CollectionUtils.isFull(priorityQueue0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      CollectionUtils.reverseArray(objectArray0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      IsoEra isoEra0 = IsoEra.BCE;
      linkedHashSet0.add(isoEra0);
      boolean boolean0 = CollectionUtils.isNotEmpty(linkedHashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      IsoEra isoEra0 = IsoEra.BCE;
      linkedHashSet0.add(isoEra0);
      boolean boolean0 = CollectionUtils.isEmpty(linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      boolean boolean0 = CollectionUtils.isEmpty(linkedHashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = CollectionUtils.isNotEmpty((Collection<?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ArrayList<ThaiBuddhistEra> arrayList0 = new ArrayList<ThaiBuddhistEra>();
      Iterator<ThaiBuddhistEra> iterator0 = arrayList0.iterator();
      ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BEFORE_BE;
      arrayList0.add(thaiBuddhistEra0);
      boolean boolean0 = CollectionUtils.sizeIsEmpty(iterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ArrayList<ThaiBuddhistEra> arrayList0 = new ArrayList<ThaiBuddhistEra>();
      Iterator<ThaiBuddhistEra> iterator0 = arrayList0.iterator();
      boolean boolean0 = CollectionUtils.sizeIsEmpty(iterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<TextStyle> class0 = TextStyle.class;
      EnumSet<TextStyle> enumSet0 = EnumSet.allOf(class0);
      boolean boolean0 = CollectionUtils.sizeIsEmpty(enumSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      boolean boolean0 = CollectionUtils.sizeIsEmpty(priorityQueue0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = CollectionUtils.sizeIsEmpty((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<TextStyle> class0 = TextStyle.class;
      // Undeclared exception!
      try { 
        CollectionUtils.sizeIsEmpty(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.Class
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      Iterator<Integer> iterator0 = hashSet0.iterator();
      int int0 = CollectionUtils.size(iterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      int int0 = CollectionUtils.size(serviceLoader0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = CollectionUtils.size((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<TextStyle> class0 = TextStyle.class;
      // Undeclared exception!
      try { 
        CollectionUtils.size(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.Class
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) null, 2605);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: null
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) stack0, 1298);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1298
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) hashMap0, 31);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 31
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Integer integer0 = new Integer(4712);
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) integer0, 4712);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.Integer
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = new Integer(0);
      stack0.add(integer0);
      Enumeration<Integer> enumeration0 = stack0.elements();
      // Undeclared exception!
      CollectionUtils.addAll((Collection<Integer>) stack0, (Enumeration<? extends Integer>) enumeration0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      CircularFifoQueue<Comparable<Integer>> circularFifoQueue0 = new CircularFifoQueue<Comparable<Integer>>();
      Stack<Integer> stack0 = new Stack<Integer>();
      Enumeration<Integer> enumeration0 = stack0.elements();
      boolean boolean0 = CollectionUtils.addAll((Collection<Comparable<Integer>>) circularFifoQueue0, (Enumeration<? extends Comparable<Integer>>) enumeration0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      Collection<Integer> collection0 = CollectionUtils.disjunction((Iterable<? extends Integer>) serviceLoader0, (Iterable<? extends Integer>) serviceLoader0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Integer> list0 = CollectionUtils.collate((Iterable<? extends Integer>) collection0, (Iterable<? extends Integer>) serviceLoader0, (Comparator<? super Integer>) comparator0, true);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      Collection<Locale.FilteringMode> collection0 = CollectionUtils.collect((Iterable<Integer>) priorityQueue0, (Transformer<? super Integer, ? extends Locale.FilteringMode>) null);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Collection<Integer> collection0 = CollectionUtils.emptyCollection();
      Transformer<Object, Integer> transformer0 = InvokerTransformer.invokerTransformer("");
      Collection<Integer> collection1 = CollectionUtils.collect((Iterator<? extends Comparable<Integer>>) null, (Transformer<? super Comparable<Integer>, ? extends Integer>) transformer0, collection0);
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      Integer integer0 = new Integer((-3117));
      priorityQueue0.add(integer0);
      DefaultEquator<Integer> defaultEquator0 = DefaultEquator.defaultEquator();
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<? extends Integer>) priorityQueue0, (Collection<? extends Integer>) priorityQueue0, (Equator<? super Integer>) defaultEquator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Transformer<Object, Integer> transformer0 = InvokerTransformer.invokerTransformer("N'j5KP~&Dy?CehSeKI");
      Collection<Integer> collection0 = CollectionUtils.collect((Iterable<LinkOption>) null, (Transformer<? super LinkOption, ? extends Integer>) transformer0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Integer integer0 = new Integer((-3111));
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add(integer0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-3111)).when(comparator0).compare(anyInt() , anyInt());
      Predicate<Integer> predicate0 = ComparatorPredicate.comparatorPredicate(integer0, comparator0);
      Collection<Integer> collection0 = CollectionUtils.selectRejected((Iterable<? extends Integer>) linkedHashSet0, (Predicate<? super Integer>) predicate0, (Collection<Integer>) linkedHashSet0);
      assertTrue(collection0.contains((-3111)));
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer(65);
      linkedHashSet0.add(integer0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      OrPredicate<Integer> orPredicate0 = new OrPredicate<Integer>(predicate0, predicate0);
      AndPredicate<Integer> andPredicate0 = new AndPredicate<Integer>(predicate0, orPredicate0);
      Collection<Integer> collection0 = CollectionUtils.selectRejected((Iterable<? extends Integer>) linkedHashSet0, (Predicate<? super Integer>) andPredicate0, (Collection<Integer>) linkedHashSet0);
      assertTrue(collection0.contains(65));
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>((Predicate<? super Object>[]) null);
      IsoEra isoEra0 = IsoEra.CE;
      IsoEra[] isoEraArray0 = new IsoEra[6];
      isoEraArray0[0] = isoEra0;
      isoEraArray0[1] = isoEra0;
      isoEraArray0[2] = isoEra0;
      isoEraArray0[3] = isoEra0;
      isoEraArray0[4] = isoEra0;
      isoEraArray0[5] = isoEra0;
      EnumSet<IsoEra> enumSet0 = EnumSet.of(isoEra0, isoEraArray0);
      // Undeclared exception!
      try { 
        CollectionUtils.selectRejected((Iterable<? extends IsoEra>) enumSet0, (Predicate<? super IsoEra>) nonePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NonePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<TextStyle> class0 = TextStyle.class;
      EnumSet<TextStyle> enumSet0 = EnumSet.allOf(class0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(enumSet0);
      Collection<IsoEra> collection0 = CollectionUtils.selectRejected((Iterable<? extends IsoEra>) null, (Predicate<? super IsoEra>) equalPredicate0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      PriorityQueue<MinguoEra> priorityQueue0 = new PriorityQueue<MinguoEra>();
      PriorityQueue<Integer> priorityQueue1 = new PriorityQueue<Integer>();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      priorityQueue1.add((Integer) (-1));
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) priorityQueue0, (Equator<Object>) defaultEquator0);
      // Undeclared exception!
      try { 
        CollectionUtils.select((Iterable<? extends Integer>) priorityQueue1, (Predicate<? super Integer>) predicate0, (Collection<Integer>) priorityQueue1, (Collection<Integer>) priorityQueue1);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      UniquePredicate<Integer> uniquePredicate0 = new UniquePredicate<Integer>();
      Collection<Integer> collection0 = CollectionUtils.select((Iterable<? extends Integer>) priorityQueue0, (Predicate<? super Integer>) uniquePredicate0, (Collection<Integer>) priorityQueue0, (Collection<Integer>) priorityQueue0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>();
      Collection<Integer> collection0 = CollectionUtils.select((Iterable<? extends Integer>) circularFifoQueue0, (Predicate<? super Integer>) null, (Collection<Integer>) circularFifoQueue0, (Collection<Integer>) null);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      UniquePredicate<Integer> uniquePredicate0 = new UniquePredicate<Integer>();
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Collection<Integer> collection0 = CollectionUtils.select((Iterable<? extends Integer>) null, (Predicate<? super Integer>) uniquePredicate0, (Collection<Integer>) null, (Collection<Integer>) arrayDeque0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      priorityQueue0.add(locale_FilteringMode0);
      Predicate<Locale.FilteringMode> predicate0 = TruePredicate.truePredicate();
      Collection<Locale.FilteringMode> collection0 = CollectionUtils.select((Iterable<? extends Locale.FilteringMode>) priorityQueue0, (Predicate<? super Locale.FilteringMode>) predicate0);
      assertTrue(collection0.contains(locale_FilteringMode0));
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Integer integer0 = new Integer((-37));
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      priorityQueue0.add(integer0);
      Integer integer1 = new Integer((-37));
      IdentityPredicate<Integer> identityPredicate0 = new IdentityPredicate<Integer>(integer1);
      Collection<Integer> collection0 = CollectionUtils.select((Iterable<? extends Integer>) priorityQueue0, (Predicate<? super Integer>) identityPredicate0, (Collection<Integer>) priorityQueue0);
      assertTrue(collection0.contains((-37)));
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      NullIsTruePredicate<Locale.FilteringMode> nullIsTruePredicate0 = new NullIsTruePredicate<Locale.FilteringMode>((Predicate<? super Locale.FilteringMode>) null);
      TreeSet<Locale.FilteringMode> treeSet0 = new TreeSet<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      treeSet0.add(locale_FilteringMode0);
      // Undeclared exception!
      try { 
        CollectionUtils.select((Iterable<? extends Locale.FilteringMode>) treeSet0, (Predicate<? super Locale.FilteringMode>) nullIsTruePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NullIsTruePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      UniquePredicate<Integer> uniquePredicate0 = new UniquePredicate<Integer>();
      Collection<Integer> collection0 = CollectionUtils.select((Iterable<? extends Integer>) serviceLoader0, (Predicate<? super Integer>) uniquePredicate0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Integer integer0 = new Integer(236);
      Integer integer1 = new Integer((-1434));
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      priorityQueue0.add(integer1);
      IdentityPredicate<Integer> identityPredicate0 = new IdentityPredicate<Integer>(integer0);
      boolean boolean0 = CollectionUtils.matchesAll((Iterable<Integer>) priorityQueue0, (Predicate<? super Integer>) identityPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Stack<Stack<Integer>> stack0 = new Stack<Stack<Integer>>();
      Predicate<Stack<Integer>> predicate0 = TruePredicate.truePredicate();
      boolean boolean0 = CollectionUtils.matchesAll((Iterable<Stack<Integer>>) stack0, (Predicate<? super Stack<Integer>>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      Collection<Integer> collection0 = CollectionUtils.selectRejected((Iterable<? extends Integer>) serviceLoader0, (Predicate<? super Integer>) null);
      boolean boolean0 = CollectionUtils.matchesAll((Iterable<Integer>) collection0, (Predicate<? super Integer>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      LinkedList<HijrahEra> linkedList0 = new LinkedList<HijrahEra>();
      PriorityQueue<LinkedList<HijrahEra>> priorityQueue0 = new PriorityQueue<LinkedList<HijrahEra>>();
      priorityQueue0.add(linkedList0);
      boolean boolean0 = CollectionUtils.exists((Iterable<LinkedList<HijrahEra>>) priorityQueue0, (Predicate<? super LinkedList<HijrahEra>>) uniquePredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      ArrayList<Stack<Integer>> arrayList0 = new ArrayList<Stack<Integer>>();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(priorityQueue0);
      boolean boolean0 = CollectionUtils.exists((Iterable<Stack<Integer>>) arrayList0, (Predicate<? super Stack<Integer>>) identityPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ArrayDeque<Month> arrayDeque0 = new ArrayDeque<Month>();
      boolean boolean0 = CollectionUtils.exists((Iterable<Month>) arrayDeque0, (Predicate<? super Month>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      int int0 = CollectionUtils.countMatches((Iterable<Integer>) treeSet0, (Predicate<? super Integer>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ArrayDeque<ChronoLocalDate> arrayDeque0 = new ArrayDeque<ChronoLocalDate>();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(arrayDeque0, defaultEquator0);
      int int0 = CollectionUtils.countMatches((Iterable<ChronoLocalDate>) arrayDeque0, (Predicate<? super ChronoLocalDate>) equalPredicate0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer(342);
      linkedHashSet0.add(integer0);
      Factory<Integer> factory0 = ConstantFactory.constantFactory(integer0);
      FactoryTransformer<Object, Integer> factoryTransformer0 = new FactoryTransformer<Object, Integer>(factory0);
      Collection<Integer> collection0 = CollectionUtils.intersection((Iterable<? extends Integer>) linkedHashSet0, (Iterable<? extends Integer>) linkedHashSet0);
      CollectionUtils.transform(collection0, (Transformer<? super Integer, ? extends Integer>) factoryTransformer0);
      assertTrue(collection0.contains(342));
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      LinkedHashSet<Stack<Integer>> linkedHashSet0 = new LinkedHashSet<Stack<Integer>>();
      CollectionUtils.transform((Collection<Stack<Integer>>) linkedHashSet0, (Transformer<? super Stack<Integer>, ? extends Stack<Integer>>) null);
      assertEquals(0, linkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      CollectionUtils.transform((Collection<Locale.Category>) null, (Transformer<? super Locale.Category, ? extends Locale.Category>) null);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Integer integer0 = new Integer((-37));
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      priorityQueue0.add(integer0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) priorityQueue0);
      boolean boolean0 = CollectionUtils.filterInverse((Iterable<Integer>) priorityQueue0, (Predicate<? super Integer>) predicate0);
      assertTrue(priorityQueue0.contains((-37)));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = new Integer(0);
      stack0.add(integer0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(integer0);
      boolean boolean0 = CollectionUtils.filterInverse((Iterable<Integer>) stack0, (Predicate<? super Integer>) identityPredicate0);
      assertFalse(stack0.contains(0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      boolean boolean0 = CollectionUtils.filterInverse((Iterable<Integer>) priorityQueue0, (Predicate<? super Integer>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Stack<Stack<Integer>> stack0 = new Stack<Stack<Integer>>();
      Iterator<Stack<Integer>> iterator0 = stack0.iterator();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Transformer<Object, Integer> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Integer>) hashMap0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      Stack<Integer> stack1 = CollectionUtils.forAllButLastDo(iterator0, transformerClosure0);
      assertNull(stack1);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      Object object0 = CollectionUtils.forAllButLastDo(iterator0, (IfClosure<Object>) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedList0.iterator();
      WhileClosure<Integer> whileClosure0 = CollectionUtils.forAllDo(iterator0, (WhileClosure<Integer>) null);
      assertNull(whileClosure0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ExceptionClosure<Integer> exceptionClosure0 = (ExceptionClosure<Integer>) mock(ExceptionClosure.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exceptionClosure0).toString();
      ExceptionClosure<Integer> exceptionClosure1 = CollectionUtils.forAllDo((Iterable<Integer>) null, exceptionClosure0);
      assertSame(exceptionClosure1, exceptionClosure0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      ExceptionClosure<Integer> exceptionClosure0 = CollectionUtils.forAllDo((Iterable<Integer>) stack0, (ExceptionClosure<Integer>) null);
      assertNull(exceptionClosure0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Collection<Integer> collection0 = CollectionUtils.emptyCollection();
      Predicate<Integer> predicate0 = ExceptionPredicate.exceptionPredicate();
      Integer integer0 = CollectionUtils.find((Iterable<Integer>) collection0, (Predicate<? super Integer>) predicate0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Object object0 = CollectionUtils.find((Iterable<Object>) vector0, (Predicate<? super Object>) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      DefaultEquator<Integer> defaultEquator0 = DefaultEquator.defaultEquator();
      CollectionUtils.hashCode((Collection<? extends Integer>) null, (Equator<? super Integer>) defaultEquator0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<TextStyle> class0 = TextStyle.class;
      EnumSet<TextStyle> enumSet0 = EnumSet.allOf(class0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<?>) enumSet0, (Collection<?>) linkedList0, (Equator<? super Object>) defaultEquator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Integer integer0 = new Integer((-37));
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      priorityQueue0.add(integer0);
      ArrayList<Stack<Integer>> arrayList0 = new ArrayList<Stack<Integer>>();
      Stack<Integer> stack0 = new Stack<Integer>();
      arrayList0.add(stack0);
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<?>) priorityQueue0, (Collection<?>) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Class<TextStyle> class0 = TextStyle.class;
      EnumSet<TextStyle> enumSet0 = EnumSet.allOf(class0);
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<?>) enumSet0, (Collection<?>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<TextStyle> class0 = TextStyle.class;
      EnumSet<TextStyle> enumSet0 = EnumSet.allOf(class0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer((-455));
      linkedHashSet0.add(integer0);
      boolean boolean0 = CollectionUtils.isProperSubCollection(linkedHashSet0, enumSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      PriorityQueue<MinguoEra> priorityQueue0 = new PriorityQueue<MinguoEra>();
      boolean boolean0 = CollectionUtils.isProperSubCollection(priorityQueue0, priorityQueue0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<TextStyle> class0 = TextStyle.class;
      EnumSet<TextStyle> enumSet0 = EnumSet.allOf(class0);
      Stack<IsoEra> stack0 = new Stack<IsoEra>();
      boolean boolean0 = CollectionUtils.isSubCollection(enumSet0, stack0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<TextStyle> class0 = TextStyle.class;
      EnumSet<TextStyle> enumSet0 = EnumSet.allOf(class0);
      boolean boolean0 = CollectionUtils.isSubCollection(enumSet0, enumSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Integer integer0 = new Integer(10);
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>(10);
      priorityQueue0.add(integer0);
      priorityQueue0.add(integer0);
      Map<Integer, Integer> map0 = CollectionUtils.getCardinalityMap((Iterable<? extends Integer>) priorityQueue0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Integer integer0 = new Integer(674);
      Stack<Integer> stack0 = new Stack<Integer>();
      stack0.add(integer0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSet0.add(stack0);
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) linkedHashSet0, (Collection<?>) stack0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      IsoEra isoEra0 = IsoEra.CE;
      linkedHashSet0.add(isoEra0);
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) linkedHashSet0, (Collection<?>) linkedHashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = new Integer(0);
      stack0.add(integer0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSet0.add(integer0);
      linkedHashSet0.add(stack0);
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) stack0, (Collection<?>) linkedHashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Class<TextStyle> class0 = TextStyle.class;
      EnumSet<TextStyle> enumSet0 = EnumSet.allOf(class0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Integer integer0 = new Integer((-2756));
      linkedHashSet0.add(integer0);
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) linkedHashSet0, (Collection<?>) enumSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<TextStyle> class0 = TextStyle.class;
      EnumSet<TextStyle> enumSet0 = EnumSet.allOf(class0);
      Integer[] integerArray0 = new Integer[4];
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) enumSet0, integerArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSet0.add((Object) null);
      ThaiBuddhistEra[] thaiBuddhistEraArray0 = new ThaiBuddhistEra[3];
      ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BE;
      thaiBuddhistEraArray0[0] = thaiBuddhistEra0;
      thaiBuddhistEraArray0[1] = thaiBuddhistEra0;
      thaiBuddhistEraArray0[2] = thaiBuddhistEra0;
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) linkedHashSet0, thaiBuddhistEraArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSet0.add((Object) null);
      ThaiBuddhistEra[] thaiBuddhistEraArray0 = new ThaiBuddhistEra[3];
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) linkedHashSet0, thaiBuddhistEraArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Collection<Object> collection0 = CollectionUtils.emptyCollection();
      LinkedList<Stack<ChronoField>>[] linkedListArray0 = (LinkedList<Stack<ChronoField>>[]) Array.newInstance(LinkedList.class, 0);
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) collection0, linkedListArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Class<TextStyle> class0 = TextStyle.class;
      EnumSet<TextStyle> enumSet0 = EnumSet.allOf(class0);
      ArrayList<Stack<Integer>> arrayList0 = new ArrayList<Stack<Integer>>();
      Stack<Integer> stack0 = new Stack<Integer>();
      arrayList0.add(stack0);
      boolean boolean0 = CollectionUtils.containsAll(arrayList0, enumSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Class<TextStyle> class0 = TextStyle.class;
      EnumSet<TextStyle> enumSet0 = EnumSet.allOf(class0);
      boolean boolean0 = CollectionUtils.containsAll(enumSet0, enumSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Class<TextStyle> class0 = TextStyle.class;
      EnumSet<TextStyle> enumSet0 = EnumSet.noneOf(class0);
      Predicate<TextStyle>[] predicateArray0 = (Predicate<TextStyle>[]) Array.newInstance(Predicate.class, 2);
      TextStyle textStyle0 = TextStyle.SHORT;
      Predicate<TextStyle> predicate0 = EqualPredicate.equalPredicate(textStyle0);
      TextStyle textStyle1 = TextStyle.NARROW;
      enumSet0.add(textStyle1);
      predicateArray0[0] = predicate0;
      Comparator<TextStyle> comparator0 = (Comparator<TextStyle>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.time.format.TextStyle.class) , any(java.time.format.TextStyle.class));
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<TextStyle> comparatorPredicate0 = new ComparatorPredicate<TextStyle>(textStyle0, comparator0, comparatorPredicate_Criterion0);
      predicateArray0[1] = (Predicate<TextStyle>) comparatorPredicate0;
      AnyPredicate<TextStyle> anyPredicate0 = new AnyPredicate<TextStyle>(predicateArray0);
      Collection<TextStyle> collection0 = CollectionUtils.subtract((Iterable<? extends TextStyle>) enumSet0, (Iterable<? extends TextStyle>) enumSet0, (Predicate<TextStyle>) anyPredicate0);
      assertTrue(collection0.contains(textStyle1));
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      IsoEra isoEra0 = IsoEra.BCE;
      EnumSet<IsoEra> enumSet0 = EnumSet.of(isoEra0);
      Collection<IsoEra> collection0 = CollectionUtils.union((Iterable<? extends IsoEra>) enumSet0, (Iterable<? extends IsoEra>) enumSet0);
      assertTrue(collection0.contains(isoEra0));
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Collection<Collection<Integer>> collection0 = CollectionUtils.emptyIfNull((Collection<Collection<Integer>>) null);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Class<TextStyle> class0 = TextStyle.class;
      EnumSet<TextStyle> enumSet0 = EnumSet.allOf(class0);
      LinkedList<TextStyle> linkedList0 = new LinkedList<TextStyle>();
      Collection<TextStyle> collection0 = CollectionUtils.intersection((Iterable<? extends TextStyle>) linkedList0, (Iterable<? extends TextStyle>) enumSet0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      Integer integer0 = new Integer((-3117));
      priorityQueue0.add(integer0);
      DefaultEquator<Integer> defaultEquator0 = DefaultEquator.defaultEquator();
      Collection<Integer> collection0 = CollectionUtils.removeAll((Iterable<Integer>) priorityQueue0, (Iterable<? extends Integer>) priorityQueue0, (Equator<? super Integer>) defaultEquator0);
      assertFalse(collection0.contains((-3117)));
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>();
      Collection<Object> collection0 = CollectionUtils.subtract((Iterable<?>) priorityQueue0, (Iterable<?>) priorityQueue0);
      boolean boolean0 = CollectionUtils.containsAll(priorityQueue0, collection0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Collection<Integer> collection0 = CollectionUtils.emptyCollection();
      Class<TextStyle> class0 = TextStyle.class;
      EnumSet<TextStyle> enumSet0 = EnumSet.allOf(class0);
      boolean boolean0 = CollectionUtils.isProperSubCollection(collection0, enumSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      int int0 = CollectionUtils.cardinality(arrayList0, (Iterable<? super ArrayList<Object>>) arrayList0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      HashMap<Stack<Object>, Stack<MinguoEra>> hashMap0 = new HashMap<Stack<Object>, Stack<MinguoEra>>();
      // Undeclared exception!
      try { 
        CollectionUtils.get((Map<Stack<Object>, Stack<MinguoEra>>) hashMap0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      ArrayList<Stack<Integer>> arrayList0 = new ArrayList<Stack<Integer>>();
      Collection<Stack<Integer>> collection0 = CollectionUtils.removeAll((Collection<Stack<Integer>>) arrayList0, (Collection<?>) arrayList0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      // Undeclared exception!
      try { 
        CollectionUtils.predicatedCollection((Collection<Integer>) vector0, (Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Iterator<Integer> iterator0 = stack0.iterator();
      // Undeclared exception!
      try { 
        CollectionUtils.get(iterator0, (-1588));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -1588
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Vector<Stack<Integer>> vector0 = new Vector<Stack<Integer>>();
      Transformer<Stack<Integer>, Stack<Integer>> transformer0 = ExceptionTransformer.exceptionTransformer();
      Collection<Stack<Integer>> collection0 = CollectionUtils.transformingCollection((Collection<Stack<Integer>>) vector0, (Transformer<? super Stack<Integer>, ? extends Stack<Integer>>) transformer0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ListIterator<Object> listIterator0 = arrayList0.listIterator();
      Transformer<Object, MinguoEra> transformer0 = ExceptionTransformer.exceptionTransformer();
      Collection<MinguoEra> collection0 = CollectionUtils.collect((Iterator<Object>) listIterator0, (Transformer<? super Object, ? extends MinguoEra>) transformer0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.synchronizedCollection((Collection<Stack<Month>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Class<TextStyle> class0 = TextStyle.class;
      EnumSet<TextStyle> enumSet0 = EnumSet.allOf(class0);
      Collection<TextStyle> collection0 = CollectionUtils.disjunction((Iterable<? extends TextStyle>) enumSet0, (Iterable<? extends TextStyle>) enumSet0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Class<TextStyle> class0 = TextStyle.class;
      EnumSet<TextStyle> enumSet0 = EnumSet.allOf(class0);
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<?>) enumSet0, (Collection<?>) enumSet0);
      assertTrue(boolean0);
  }
}
