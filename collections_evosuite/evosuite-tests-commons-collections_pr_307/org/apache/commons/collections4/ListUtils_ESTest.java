/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 11:42:46 GMT 2025
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.ListUtils;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ListUtils_ESTest extends ListUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        ListUtils.partition((List<Object>) linkedList0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      List<Character> list0 = ListUtils.selectRejected((Collection<? extends Character>) linkedList0, (Predicate<? super Character>) uniquePredicate0);
      Character character0 = new Character('$');
      linkedList0.add(character0);
      boolean boolean0 = ListUtils.isEqualList(linkedList0, list0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      Character character0 = Character.valueOf('5');
      linkedList0.add(character0);
      List<Character> list0 = ListUtils.removeAll((Collection<Character>) linkedList0, (Collection<?>) linkedList0);
      List<Character> list1 = ListUtils.intersection((List<? extends Character>) list0, (List<? extends Character>) linkedList0);
      assertNotSame(list1, list0);
      assertFalse(list1.contains('5'));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      Character character0 = Character.valueOf('Y');
      linkedList0.add((Object) listIterator0);
      linkedList0.offerFirst(character0);
      int int0 = ListUtils.hashCodeForList(linkedList0);
      assertEquals(994, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      List<Character> list0 = ListUtils.defaultIfNull((List<Character>) null, (List<Character>) linkedList0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      Object object0 = new Object();
      linkedList0.add(object0);
      List<List<Object>> list0 = ListUtils.partition((List<Object>) linkedList0, 1);
      // Undeclared exception!
      try { 
        ListUtils.sum((List<?>) linkedList0, (List<?>) list0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, InstanceofPredicate> transformer0 = ConstantTransformer.nullTransformer();
      List<Object> list0 = ListUtils.transformedList((List<Object>) linkedList0, (Transformer<? super Object, ?>) transformer0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      List<Boolean> list0 = ListUtils.synchronizedList((List<Boolean>) linkedList0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      List<Object> list0 = ListUtils.predicatedList((List<Object>) linkedList0, (Predicate<Object>) uniquePredicate0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      List<Predicate<Object>> list0 = ListUtils.fixedSizeList((List<Predicate<Object>>) linkedList0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      List<Object> list0 = ListUtils.union((List<?>) linkedList0, (List<?>) linkedList0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      Character character0 = Character.valueOf('f');
      linkedList0.add(character0);
      List<Character> list0 = ListUtils.selectRejected((Collection<? extends Character>) linkedList0, (Predicate<? super Character>) predicate0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      Class<Object> class0 = Object.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      List<Character> list0 = ListUtils.select((Collection<? extends Character>) linkedList0, (Predicate<? super Character>) predicate0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Character character0 = new Character('5');
      linkedList0.add(character0);
      List<Object> list0 = ListUtils.select((Collection<?>) linkedList0, (Predicate<? super Object>) uniquePredicate0);
      assertTrue(list0.contains('5'));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      Character character0 = Character.valueOf('$');
      linkedList0.add(character0);
      DefaultEquator<Character> defaultEquator0 = DefaultEquator.defaultEquator();
      List<Character> list0 = ListUtils.longestCommonSubsequence((List<Character>) linkedList0, (List<Character>) linkedList0, (Equator<? super Character>) defaultEquator0);
      assertTrue(list0.contains(character0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Character character0 = Character.valueOf('x');
      linkedList0.add((Object) character0);
      List<Object> list0 = ListUtils.longestCommonSubsequence((List<Object>) linkedList0, (List<Object>) linkedList0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.allocate(0);
      String string0 = ListUtils.longestCommonSubsequence((CharSequence) charBuffer0, (CharSequence) charBuffer1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) null);
      Object object0 = ListUtils.getLast((List<Object>) linkedList0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.addLast(object0);
      Object object1 = ListUtils.getLast((List<Object>) linkedList0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      Transformer<Integer, Character> transformer0 = ConstantTransformer.nullTransformer();
      List<Character> list0 = ListUtils.lazyList((List<Character>) linkedList0, (Transformer<Integer, ? extends Character>) transformer0);
      Character character0 = ListUtils.getFirst(list0);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DefaultEquator<Character> defaultEquator0 = DefaultEquator.defaultEquator();
      linkedList0.add((Object) defaultEquator0);
      DefaultEquator defaultEquator1 = (DefaultEquator)ListUtils.getFirst((List<Object>) linkedList0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      List<Object> list0 = ListUtils.selectRejected((Collection<?>) linkedList0, (Predicate<? super Object>) null);
      List<Object> list1 = ListUtils.emptyIfNull(list0);
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      Character character0 = new Character('*');
      linkedList0.add(character0);
      List<Object> list0 = ListUtils.intersection((List<?>) linkedList0, (List<?>) linkedList0);
      List<Object> list1 = ListUtils.emptyIfNull(list0);
      assertTrue(list1.contains('*'));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      List<Character> list0 = ListUtils.removeAll((Collection<Character>) linkedList0, (Collection<?>) linkedList0);
      List<Character> list1 = ListUtils.defaultIfNull(list0, list0);
      assertSame(list0, list1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      Character character0 = Character.valueOf('$');
      linkedList0.add(character0);
      List<Character> list0 = ListUtils.intersection((List<? extends Character>) linkedList0, (List<? extends Character>) linkedList0);
      List<Character> list1 = ListUtils.defaultIfNull(list0, (List<Character>) linkedList0);
      assertTrue(list1.contains('$'));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtils.unmodifiableList((List<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtils.union((List<? extends Character>) null, (List<? extends Character>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      // Undeclared exception!
      try { 
        ListUtils.subtract((List<Object>) linkedList0, (List<?>) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtils.subtract((List<Predicate<Object>>) null, (List<? extends Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.AbstractMapBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Transformer<Object, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) null);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      predicateArray0[0] = predicate0;
      // Undeclared exception!
      try { 
        ListUtils.selectRejected((Collection<?>) linkedList0, (Predicate<? super Object>) predicateArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      // Undeclared exception!
      try { 
        ListUtils.selectRejected((Collection<?>) linkedList0, (Predicate<? super Object>) predicate0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      // Undeclared exception!
      try { 
        ListUtils.select((Collection<?>) linkedList0, (Predicate<? super Object>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      // Undeclared exception!
      try { 
        ListUtils.select((Collection<?>) linkedList0, (Predicate<? super Object>) predicate0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.add((Object) linkedList0);
      linkedList0.add((Object) linkedList1);
      // Undeclared exception!
      try { 
        ListUtils.retainAll((Collection<Object>) linkedList1, (Collection<?>) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtils.retainAll((Collection<Transformer<Object, Predicate<Object>>>) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.offerFirst(linkedList1);
      linkedList1.add((Object) linkedList0);
      // Undeclared exception!
      try { 
        ListUtils.removeAll((Collection<Object>) linkedList0, (Collection<?>) linkedList1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtils.removeAll((Collection<Character>) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Object> transformer0 = InvokerTransformer.invokerTransformer("s]O6&=}.]wD*C[P>");
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, uniquePredicate0);
      linkedList0.add((Object) transformedPredicate0);
      // Undeclared exception!
      try { 
        ListUtils.predicatedList((List<Object>) linkedList0, (Predicate<Object>) transformedPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 's]O6&=}.]wD*C[P>' on 'class org.apache.commons.collections4.functors.TransformedPredicate' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      // Undeclared exception!
      try { 
        ListUtils.predicatedList((List<Object>) linkedList0, predicate0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      // Undeclared exception!
      try { 
        ListUtils.predicatedList((List<Object>) linkedList0, predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object '[(this Collection)]' - Predicate 'org.apache.commons.collections4.functors.NullPredicate@2' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtils.partition((List<Character>) null, (-3366));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // list
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) null);
      Factory<Character> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Integer, Object> transformer0 = FactoryTransformer.factoryTransformer((Factory<?>) factory0);
      List<Object> list0 = ListUtils.lazyList((List<Object>) linkedList0, (Transformer<Integer, ?>) transformer0);
      // Undeclared exception!
      try { 
        ListUtils.longestCommonSubsequence(list0, (List<Object>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtils.longestCommonSubsequence((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charSequenceA
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtils.lazyList((List<Object>) null, (Factory<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      // Undeclared exception!
      try { 
        ListUtils.intersection((List<?>) linkedList0, (List<?>) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtils.intersection((List<? extends Character>) null, (List<? extends Character>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        ListUtils.indexOf((List<Object>) linkedList0, predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      // Undeclared exception!
      try { 
        ListUtils.indexOf((List<Object>) linkedList0, predicate0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>((Predicate<? super Object>) null);
      // Undeclared exception!
      try { 
        ListUtils.indexOf((List<Object>) linkedList0, (Predicate<Object>) nullIsFalsePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NullIsFalsePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      // Undeclared exception!
      try { 
        ListUtils.getLast((List<Predicate<Object>>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Transformer<Object, Character> transformer0 = ExceptionTransformer.exceptionTransformer();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate0);
      NullIsFalsePredicate<Character> nullIsFalsePredicate0 = new NullIsFalsePredicate<Character>(transformedPredicate0);
      PredicateTransformer<Character> predicateTransformer0 = new PredicateTransformer<Character>(nullIsFalsePredicate0);
      Boolean boolean0 = predicateTransformer0.transform((Character) null);
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>(boolean0);
      List<Object> list0 = ListUtils.unmodifiableList((List<?>) linkedList0);
      List<Object> list1 = ListUtils.lazyList(list0, (Factory<?>) constantFactory0);
      // Undeclared exception!
      try { 
        ListUtils.getFirst(list1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        ListUtils.getFirst((List<Object>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      Character character0 = Character.valueOf('f');
      LinkedList<Character> linkedList1 = new LinkedList<Character>();
      linkedList1.add(character0);
      List<Character> list0 = ListUtils.subtract((List<Character>) linkedList1, (List<? extends Character>) linkedList0);
      assertTrue(list0.contains('f'));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      Class<Object> class0 = Object.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      List<Character> list0 = ListUtils.selectRejected((Collection<? extends Character>) linkedList0, (Predicate<? super Character>) predicate0);
      Character character0 = new Character('$');
      linkedList0.add(character0);
      List<Object> list1 = ListUtils.intersection((List<?>) linkedList0, (List<?>) list0);
      assertFalse(list1.contains('$'));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      List<Boolean> list0 = ListUtils.union((List<? extends Boolean>) linkedList0, (List<? extends Boolean>) linkedList0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtils.longestCommonSubsequence((List<Character>) null, (List<Character>) null, (Equator<? super Character>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // listA
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DefaultEquator<Character> defaultEquator0 = DefaultEquator.defaultEquator();
      linkedList0.add((Object) defaultEquator0);
      List<Object> list0 = ListUtils.subtract((List<Object>) linkedList0, (List<?>) linkedList0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.offerFirst(linkedList1);
      List<Object> list0 = ListUtils.retainAll((Collection<Object>) linkedList0, (Collection<?>) linkedList1);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.offerFirst(linkedList0);
      List<Object> list0 = ListUtils.removeAll((Collection<Object>) linkedList1, (Collection<?>) linkedList0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      List<Object> list0 = ListUtils.unmodifiableList((List<?>) linkedList0);
      // Undeclared exception!
      try { 
        ListUtils.partition(list0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      LinkedList<Character> linkedList2 = new LinkedList<Character>();
      linkedList1.add((Object) linkedList2);
      linkedList0.add((Object) linkedList1);
      boolean boolean0 = ListUtils.isEqualList(linkedList1, linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      List<Object> list0 = ListUtils.retainAll((Collection<Object>) linkedList0, (Collection<?>) linkedList0);
      boolean boolean0 = ListUtils.isEqualList(linkedList0, list0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.add((Object) linkedList0);
      boolean boolean0 = ListUtils.isEqualList(linkedList0, linkedList1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = ListUtils.isEqualList(linkedList0, (Collection<?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = ListUtils.isEqualList(linkedList0, linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      boolean boolean0 = ListUtils.isEqualList((Collection<?>) null, linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList1);
      List<Object> list0 = ListUtils.sum((List<?>) linkedList0, (List<?>) linkedList1);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      int int0 = ListUtils.indexOf((List<Object>) linkedList0, predicate0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      linkedList0.offerFirst(uniquePredicate0);
      int int0 = ListUtils.indexOf((List<Object>) linkedList0, (Predicate<Object>) uniquePredicate0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      int int0 = ListUtils.indexOf((List<Object>) linkedList0, (Predicate<Object>) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int int0 = ListUtils.indexOf((List<Predicate<Object>>) null, (Predicate<Predicate<Object>>) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) null);
      int int0 = ListUtils.hashCodeForList(linkedList0);
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int int0 = ListUtils.hashCodeForList((Collection<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      List<Character> list0 = ListUtils.defaultIfNull((List<Character>) null, (List<Character>) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      List<List<Object>> list0 = ListUtils.partition((List<Object>) linkedList0, 1710);
      // Undeclared exception!
      try { 
        ListUtils.sum((List<?>) list0, (List<?>) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      List<Object> list0 = ListUtils.removeAll((Collection<Object>) linkedList0, (Collection<?>) linkedList0);
      List<Object> list1 = ListUtils.longestCommonSubsequence(list0, (List<Object>) linkedList0);
      assertTrue(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(766);
      String string0 = ListUtils.longestCommonSubsequence((CharSequence) charBuffer0, (CharSequence) charBuffer0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1938);
      // Undeclared exception!
      ListUtils.longestCommonSubsequence((CharSequence) charBuffer0, (CharSequence) charBuffer0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtils.getLast((List<Transformer<Predicate<Object>, Character>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // list
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        ListUtils.transformedList((List<Object>) linkedList0, (Transformer<? super Object, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtils.sum((List<?>) null, (List<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Predicate<Character> predicate0 = NotNullPredicate.notNullPredicate();
      // Undeclared exception!
      try { 
        ListUtils.selectRejected((Collection<? extends Character>) null, (Predicate<? super Character>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtils.synchronizedList((List<LinkedList<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      // Undeclared exception!
      try { 
        ListUtils.select((Collection<? extends Predicate<Object>>) null, (Predicate<? super Predicate<Object>>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        ListUtils.predicatedList((List<Object>) linkedList0, (Predicate<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtils.fixedSizeList((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtils.longestCommonSubsequence((List<LinkedList<Character>>) null, (List<LinkedList<Character>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // listA
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtils.lazyList((List<LinkedList<Character>>) null, (Transformer<Integer, ? extends LinkedList<Character>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Factory<Character> factory0 = ExceptionFactory.exceptionFactory();
      List<Object> list0 = ListUtils.lazyList((List<Object>) linkedList0, (Factory<?>) factory0);
      // Undeclared exception!
      try { 
        ListUtils.getFirst(list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtils.getFirst((List<InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // list
         //
         verifyException("java.util.Objects", e);
      }
  }
}
