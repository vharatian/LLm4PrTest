/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 11:57:30 GMT 2025
 */

package org.apache.commons.collections4.multiset;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Set;
import org.apache.commons.collections4.MultiSet;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.multiset.AbstractMapMultiSet;
import org.apache.commons.collections4.multiset.AbstractMultiSet;
import org.apache.commons.collections4.multiset.HashMultiSet;
import org.apache.commons.collections4.multiset.UnmodifiableMultiSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AbstractMultiSet_ESTest extends AbstractMultiSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      AbstractMultiSet.EntrySet<Integer> abstractMultiSet_EntrySet0 = new AbstractMultiSet.EntrySet<Integer>(hashMultiSet0);
      Integer integer0 = new Integer(0);
      hashMultiSet0.add(integer0);
      HashMultiSet<Integer> hashMultiSet1 = new HashMultiSet<Integer>();
      boolean boolean0 = hashMultiSet1.removeAll(abstractMultiSet_EntrySet0);
      assertEquals(1, hashMultiSet0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMultiSet<UnmodifiableMultiSet<Object>> hashMultiSet0 = new HashMultiSet<UnmodifiableMultiSet<Object>>();
      hashMultiSet0.add((UnmodifiableMultiSet<Object>) null);
      int int0 = hashMultiSet0.setCount((UnmodifiableMultiSet<Object>) null, 2);
      assertEquals(2, hashMultiSet0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMultiSet<Object> hashMultiSet0 = new HashMultiSet<Object>(linkedList0);
      Integer integer0 = new Integer(0);
      hashMultiSet0.add((Object) integer0);
      assertFalse(hashMultiSet0.isEmpty());
      
      int int0 = hashMultiSet0.setCount(integer0, 0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMultiSet<UnmodifiableMultiSet<Object>> hashMultiSet0 = new HashMultiSet<UnmodifiableMultiSet<Object>>();
      int int0 = hashMultiSet0.setCount((UnmodifiableMultiSet<Object>) null, 0);
      assertEquals(0, int0);
      assertTrue(hashMultiSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      AbstractMultiSet.EntrySet<Integer> abstractMultiSet_EntrySet0 = new AbstractMultiSet.EntrySet<Integer>(hashMultiSet0);
      HashMultiSet<UnmodifiableMultiSet<Object>> hashMultiSet1 = new HashMultiSet<UnmodifiableMultiSet<Object>>();
      AbstractMultiSet.UniqueSet<UnmodifiableMultiSet<Object>> abstractMultiSet_UniqueSet0 = new AbstractMultiSet.UniqueSet<UnmodifiableMultiSet<Object>>(hashMultiSet1);
      boolean boolean0 = abstractMultiSet_UniqueSet0.contains(abstractMultiSet_EntrySet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMultiSet<Object> hashMultiSet0 = new HashMultiSet<Object>();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      hashMultiSet0.doWriteObject(objectOutputStream0);
      assertEquals(0, hashMultiSet0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMultiSet<Object> hashMultiSet0 = new HashMultiSet<Object>();
      AbstractMultiSet.UniqueSet<Object> abstractMultiSet_UniqueSet0 = new AbstractMultiSet.UniqueSet<Object>(hashMultiSet0);
      Iterator<Object> iterator0 = abstractMultiSet_UniqueSet0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      AbstractMultiSet.EntrySet<Integer> abstractMultiSet_EntrySet0 = new AbstractMultiSet.EntrySet<Integer>(hashMultiSet0);
      int int0 = abstractMultiSet_EntrySet0.size();
      assertFalse(abstractMultiSet_EntrySet0.contains(int0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      AbstractMultiSet.EntrySet<Integer> abstractMultiSet_EntrySet0 = new AbstractMultiSet.EntrySet<Integer>(hashMultiSet0);
      Iterator<MultiSet.Entry<Integer>> iterator0 = (Iterator<MultiSet.Entry<Integer>>)abstractMultiSet_EntrySet0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMultiSet<Object> hashMultiSet0 = new HashMultiSet<Object>();
      hashMultiSet0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMultiSet<UnmodifiableMultiSet<Object>> hashMultiSet0 = new HashMultiSet<UnmodifiableMultiSet<Object>>();
      Set<MultiSet.Entry<UnmodifiableMultiSet<Object>>> set0 = (Set<MultiSet.Entry<UnmodifiableMultiSet<Object>>>)hashMultiSet0.createEntrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMultiSet<AbstractMapMultiSet.MutableInteger> hashMultiSet0 = new HashMultiSet<AbstractMapMultiSet.MutableInteger>();
      hashMultiSet0.clear();
      assertTrue(hashMultiSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      int int0 = hashMultiSet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      Integer integer0 = new Integer(745);
      int int0 = hashMultiSet0.add(integer0, 395);
      int int1 = hashMultiSet0.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      Object object0 = new Object();
      int int0 = hashMultiSet0.remove(object0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      HashMultiSet<UnmodifiableMultiSet<Object>> hashMultiSet1 = new HashMultiSet<UnmodifiableMultiSet<Object>>();
      HashMultiSet<Object> hashMultiSet2 = new HashMultiSet<Object>(hashMultiSet1);
      hashMultiSet2.add((Object) hashMultiSet1, 5);
      int int0 = hashMultiSet2.remove((Object) hashMultiSet0, 0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMultiSet<InstanceofPredicate> hashMultiSet0 = new HashMultiSet<InstanceofPredicate>();
      Set<InstanceofPredicate> set0 = hashMultiSet0.createUniqueSet();
      HashMultiSet<Object> hashMultiSet1 = new HashMultiSet<Object>(set0);
      Iterator<Object> iterator0 = hashMultiSet1.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMultiSet<UnmodifiableMultiSet<Integer>> hashMultiSet0 = new HashMultiSet<UnmodifiableMultiSet<Integer>>();
      Object object0 = new Object();
      int int0 = hashMultiSet0.getCount(object0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMultiSet<UnmodifiableMultiSet<Object>> hashMultiSet0 = new HashMultiSet<UnmodifiableMultiSet<Object>>();
      hashMultiSet0.add((UnmodifiableMultiSet<Object>) null);
      HashMultiSet<Object> hashMultiSet1 = new HashMultiSet<Object>(hashMultiSet0);
      int int0 = hashMultiSet1.getCount((Object) null);
      assertEquals(1, hashMultiSet0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMultiSet<Object> hashMultiSet0 = new HashMultiSet<Object>();
      boolean boolean0 = hashMultiSet0.equals(hashMultiSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object object0 = new Object();
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      boolean boolean0 = hashMultiSet0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMultiSet<Object> hashMultiSet0 = new HashMultiSet<Object>();
      Iterator<Object> iterator0 = hashMultiSet0.createUniqueSetIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      Integer integer0 = new Integer((-4));
      hashMultiSet0.add(integer0);
      HashMultiSet<Object> hashMultiSet1 = new HashMultiSet<Object>(hashMultiSet0);
      boolean boolean0 = hashMultiSet1.contains(integer0);
      assertFalse(hashMultiSet0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMultiSet<Object> hashMultiSet0 = new HashMultiSet<Object>();
      boolean boolean0 = hashMultiSet0.contains(hashMultiSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMultiSet<UnmodifiableMultiSet<Object>> hashMultiSet0 = new HashMultiSet<UnmodifiableMultiSet<Object>>();
      hashMultiSet0.add((UnmodifiableMultiSet<Object>) null);
      int int0 = hashMultiSet0.add((UnmodifiableMultiSet<Object>) null, 2604);
      assertEquals(2605, hashMultiSet0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      hashMultiSet0.add((Integer) null);
      hashMultiSet0.add((Integer) null);
      // Undeclared exception!
      try { 
        hashMultiSet0.removeAll(hashMultiSet0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multiset.AbstractMapMultiSet$MapBasedMultiSetIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      // Undeclared exception!
      try { 
        hashMultiSet0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multiset.AbstractMultiSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      AbstractMultiSet.EntrySet<Predicate<Integer>> abstractMultiSet_EntrySet0 = new AbstractMultiSet.EntrySet<Predicate<Integer>>((AbstractMultiSet<Predicate<Integer>>) null);
      // Undeclared exception!
      try { 
        hashMultiSet0.remove((Object) abstractMultiSet_EntrySet0, 37);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multiset.AbstractMultiSet$EntrySet", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        hashMultiSet0.remove(object0, (-2571));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Occurrences must not be negative.
         //
         verifyException("org.apache.commons.collections4.multiset.AbstractMapMultiSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      AbstractMultiSet.EntrySet<Object> abstractMultiSet_EntrySet0 = new AbstractMultiSet.EntrySet<Object>((AbstractMultiSet<Object>) null);
      // Undeclared exception!
      try { 
        hashMultiSet0.remove((Object) abstractMultiSet_EntrySet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multiset.AbstractMultiSet$EntrySet", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AbstractMultiSet.EntrySet<Object> abstractMultiSet_EntrySet0 = new AbstractMultiSet.EntrySet<Object>((AbstractMultiSet<Object>) null);
      HashMultiSet<AbstractMapMultiSet.MutableInteger> hashMultiSet0 = new HashMultiSet<AbstractMapMultiSet.MutableInteger>();
      // Undeclared exception!
      try { 
        hashMultiSet0.getCount(abstractMultiSet_EntrySet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multiset.AbstractMultiSet$EntrySet", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      // Undeclared exception!
      try { 
        hashMultiSet0.doWriteObject((ObjectOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multiset.AbstractMapMultiSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      HashMultiSet<Predicate<Integer>> hashMultiSet0 = new HashMultiSet<Predicate<Integer>>();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("6-BZ-r;<*3O", false);
      Predicate<Integer> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Integer>) predicate0);
      hashMultiSet0.add(predicate1);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      try { 
        hashMultiSet0.doWriteObject(objectOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMultiSet<AbstractMapMultiSet.MutableInteger> hashMultiSet0 = new HashMultiSet<AbstractMapMultiSet.MutableInteger>();
      // Undeclared exception!
      try { 
        hashMultiSet0.doReadObject((ObjectInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multiset.AbstractMapMultiSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      AbstractMultiSet.EntrySet<Predicate<Integer>> abstractMultiSet_EntrySet0 = new AbstractMultiSet.EntrySet<Predicate<Integer>>((AbstractMultiSet<Predicate<Integer>>) null);
      // Undeclared exception!
      try { 
        hashMultiSet0.contains(abstractMultiSet_EntrySet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multiset.AbstractMultiSet$EntrySet", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      HashMultiSet<Object> hashMultiSet1 = new HashMultiSet<Object>(hashMultiSet0);
      // Undeclared exception!
      try { 
        hashMultiSet1.add((Object) hashMultiSet0, (-1949));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Occurrences must not be negative.
         //
         verifyException("org.apache.commons.collections4.multiset.AbstractMapMultiSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMultiSet<Object> hashMultiSet0 = new HashMultiSet<Object>();
      AbstractMultiSet.UniqueSet<UnmodifiableMultiSet<Object>> abstractMultiSet_UniqueSet0 = new AbstractMultiSet.UniqueSet<UnmodifiableMultiSet<Object>>((AbstractMultiSet<UnmodifiableMultiSet<Object>>) null);
      // Undeclared exception!
      try { 
        hashMultiSet0.add((Object) abstractMultiSet_UniqueSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multiset.AbstractMultiSet$UniqueSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashMultiSet<UnmodifiableMultiSet<Object>> hashMultiSet0 = new HashMultiSet<UnmodifiableMultiSet<Object>>();
      hashMultiSet0.add((UnmodifiableMultiSet<Object>) null);
      AbstractMultiSet.EntrySet<UnmodifiableMultiSet<Object>> abstractMultiSet_EntrySet0 = new AbstractMultiSet.EntrySet<UnmodifiableMultiSet<Object>>(hashMultiSet0);
      AbstractMultiSet.UniqueSet<UnmodifiableMultiSet<Object>> abstractMultiSet_UniqueSet0 = new AbstractMultiSet.UniqueSet<UnmodifiableMultiSet<Object>>(hashMultiSet0);
      boolean boolean0 = abstractMultiSet_UniqueSet0.remove(abstractMultiSet_EntrySet0);
      assertFalse(hashMultiSet0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMultiSet<Object> hashMultiSet0 = new HashMultiSet<Object>();
      AbstractMultiSet.EntrySet<Object> abstractMultiSet_EntrySet0 = new AbstractMultiSet.EntrySet<Object>(hashMultiSet0);
      boolean boolean0 = abstractMultiSet_EntrySet0.remove(hashMultiSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      AbstractMultiSet.EntrySet<Predicate<Integer>> abstractMultiSet_EntrySet0 = new AbstractMultiSet.EntrySet<Predicate<Integer>>((AbstractMultiSet<Predicate<Integer>>) null);
      boolean boolean0 = abstractMultiSet_EntrySet0.contains(hashMultiSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMultiSet<AbstractMapMultiSet.MutableInteger> hashMultiSet0 = new HashMultiSet<AbstractMapMultiSet.MutableInteger>();
      AbstractMapMultiSet.MutableInteger abstractMapMultiSet_MutableInteger0 = new AbstractMapMultiSet.MutableInteger(37);
      hashMultiSet0.add(abstractMapMultiSet_MutableInteger0);
      AbstractMultiSet.UniqueSet<AbstractMapMultiSet.MutableInteger> abstractMultiSet_UniqueSet0 = new AbstractMultiSet.UniqueSet<AbstractMapMultiSet.MutableInteger>(hashMultiSet0);
      assertTrue(abstractMultiSet_UniqueSet0.contains(abstractMapMultiSet_MutableInteger0));
      
      boolean boolean0 = abstractMultiSet_UniqueSet0.remove(abstractMapMultiSet_MutableInteger0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      hashMultiSet0.entrySet();
      Set<MultiSet.Entry<Integer>> set0 = (Set<MultiSet.Entry<Integer>>)hashMultiSet0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMultiSet<Object> hashMultiSet0 = new HashMultiSet<Object>();
      Set<Object> set0 = hashMultiSet0.uniqueSet();
      Set<Object> set1 = hashMultiSet0.uniqueSet();
      assertSame(set1, set0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      hashMultiSet0.add((Integer) null);
      Integer integer0 = new Integer((-660));
      hashMultiSet0.add(integer0);
      HashMultiSet<Integer> hashMultiSet1 = new HashMultiSet<Integer>();
      hashMultiSet1.add((Integer) null);
      boolean boolean0 = hashMultiSet1.removeAll(hashMultiSet0);
      assertEquals(2, hashMultiSet0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      hashMultiSet0.add((Integer) null);
      assertFalse(hashMultiSet0.isEmpty());
      
      boolean boolean0 = hashMultiSet0.remove((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      Integer integer0 = new Integer((-13));
      hashMultiSet0.add(integer0);
      int int0 = hashMultiSet0.setCount(integer0, 1);
      assertFalse(hashMultiSet0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Integer integer0 = new Integer((-2230));
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      // Undeclared exception!
      try { 
        hashMultiSet0.setCount(integer0, (-2230));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Count must not be negative.
         //
         verifyException("org.apache.commons.collections4.multiset.AbstractMultiSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      String string0 = hashMultiSet0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashMultiSet<AbstractMapMultiSet.MutableInteger> hashMultiSet0 = new HashMultiSet<AbstractMapMultiSet.MutableInteger>();
      AbstractMultiSet.UniqueSet<AbstractMapMultiSet.MutableInteger> abstractMultiSet_UniqueSet0 = new AbstractMultiSet.UniqueSet<AbstractMapMultiSet.MutableInteger>(hashMultiSet0);
      abstractMultiSet_UniqueSet0.clear();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      AbstractMultiSet.UniqueSet<UnmodifiableMultiSet<InstanceofPredicate>> abstractMultiSet_UniqueSet0 = new AbstractMultiSet.UniqueSet<UnmodifiableMultiSet<InstanceofPredicate>>((AbstractMultiSet<UnmodifiableMultiSet<InstanceofPredicate>>) null);
      // Undeclared exception!
      try { 
        abstractMultiSet_UniqueSet0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multiset.AbstractMultiSet$UniqueSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HashMultiSet<AbstractMapMultiSet.MutableInteger> hashMultiSet0 = new HashMultiSet<AbstractMapMultiSet.MutableInteger>();
      AbstractMultiSet.UniqueSet<AbstractMapMultiSet.MutableInteger> abstractMultiSet_UniqueSet0 = new AbstractMultiSet.UniqueSet<AbstractMapMultiSet.MutableInteger>(hashMultiSet0);
      boolean boolean0 = abstractMultiSet_UniqueSet0.containsAll(hashMultiSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      HashMultiSet<Object> hashMultiSet1 = new HashMultiSet<Object>();
      AbstractMultiSet.UniqueSet<Object> abstractMultiSet_UniqueSet0 = new AbstractMultiSet.UniqueSet<Object>(hashMultiSet1);
      boolean boolean0 = hashMultiSet0.remove((Object) abstractMultiSet_UniqueSet0);
      assertFalse(boolean0);
  }
}
