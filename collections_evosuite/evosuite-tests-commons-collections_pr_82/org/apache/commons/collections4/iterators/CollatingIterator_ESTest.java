/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 19:12:27 GMT 2025
 */

package org.apache.commons.collections4.iterators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.apache.commons.collections4.iterators.CollatingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CollatingIterator_ESTest extends CollatingIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer((-13));
      linkedList0.add((Object) integer0);
      Object object0 = new Object();
      linkedList0.add(object0);
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>(comparator0, iterator0, iterator0);
      Object object1 = collatingIterator0.next();
      //  // Unstable assertion: assertEquals((-13), object1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      linkedList0.add(object0);
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(50).when(comparator0).compare(any() , any());
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>(comparator0, iterator0, iterator0);
      Object object1 = collatingIterator0.next();
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CollatingIterator<Integer> collatingIterator0 = new CollatingIterator<Integer>((Comparator<? super Integer>) null);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<Object> iterator0 = linkedList0.iterator();
      CollatingIterator<Object> collatingIterator1 = new CollatingIterator<Object>((Comparator<? super Object>) null, iterator0, collatingIterator0);
      collatingIterator1.setComparator((Comparator<? super Object>) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>((Comparator<? super Object>) null, 32);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CollatingIterator<Integer> collatingIterator0 = new CollatingIterator<Integer>();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 7);
      iteratorArray0[0] = (Iterator<Integer>) collatingIterator0;
      iteratorArray0[1] = (Iterator<Integer>) collatingIterator0;
      iteratorArray0[2] = (Iterator<Integer>) collatingIterator0;
      iteratorArray0[3] = (Iterator<Integer>) collatingIterator0;
      iteratorArray0[4] = (Iterator<Integer>) collatingIterator0;
      iteratorArray0[5] = (Iterator<Integer>) collatingIterator0;
      iteratorArray0[6] = (Iterator<Integer>) collatingIterator0;
      CollatingIterator<Integer> collatingIterator1 = new CollatingIterator<Integer>(comparator0, iteratorArray0);
      collatingIterator1.setIterator(1, iteratorArray0[0]);
      assertEquals(7, iteratorArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) null);
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>(comparator0, iterator0, iterator0);
      Object object0 = collatingIterator0.next();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>();
      Comparator<? super Object> comparator0 = collatingIterator0.getComparator();
      assertNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CollatingIterator<Integer> collatingIterator0 = new CollatingIterator<Integer>();
      collatingIterator0.hasNext();
      // Undeclared exception!
      try { 
        collatingIterator0.setIterator((-954), collatingIterator0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't do that after next or hasNext has been called.
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CollatingIterator<Integer> collatingIterator0 = new CollatingIterator<Integer>();
      // Undeclared exception!
      try { 
        collatingIterator0.setIterator((-954), collatingIterator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add(object0);
      Iterator<Object> iterator0 = linkedList0.iterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>(comparator0, iterator0, iterator0);
      Object object1 = collatingIterator0.next();
      linkedList0.add(object1);
      // Undeclared exception!
      try { 
        collatingIterator0.remove();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>((Comparator<? super Object>) null, iterator0, iterator0);
      collatingIterator0.next();
      collatingIterator0.remove();
      // Undeclared exception!
      try { 
        collatingIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>();
      collatingIterator0.addIterator(collatingIterator0);
      // Undeclared exception!
      collatingIterator0.next();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      linkedList0.add((Object) iterator0);
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>((Comparator<? super Object>) null, iterator0, iterator0);
      // Undeclared exception!
      try { 
        collatingIterator0.next();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CollatingIterator<Integer> collatingIterator0 = new CollatingIterator<Integer>();
      collatingIterator0.addIterator(collatingIterator0);
      // Undeclared exception!
      collatingIterator0.hasNext();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>();
      collatingIterator0.hasNext();
      // Undeclared exception!
      try { 
        collatingIterator0.addIterator((Iterator<?>) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't do that after next or hasNext has been called.
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CollatingIterator<Integer> collatingIterator0 = null;
      try {
        collatingIterator0 = new CollatingIterator<Integer>((Comparator<? super Integer>) null, (Iterator<? extends Integer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CollatingIterator<Integer> collatingIterator0 = null;
      try {
        collatingIterator0 = new CollatingIterator<Integer>((Comparator<? super Integer>) null, (Iterator<? extends Integer>) null, (Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CollatingIterator<Integer> collatingIterator0 = null;
      try {
        collatingIterator0 = new CollatingIterator<Integer>((Comparator<? super Integer>) null, (-31));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -31
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CollatingIterator<Integer> collatingIterator0 = new CollatingIterator<Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer((-1307));
      linkedList0.add((Object) integer0);
      linkedList0.add((Object) collatingIterator0);
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      CollatingIterator<Object> collatingIterator1 = new CollatingIterator<Object>(comparator0, iterator0, iterator0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      collatingIterator1.forEachRemaining(consumer0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Iterator<Object>[] iteratorArray0 = (Iterator<Object>[]) Array.newInstance(Iterator.class, 1);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      Integer integer0 = new Integer((-15));
      linkedList0.add((Object) integer0);
      iteratorArray0[0] = (Iterator<Object>) listIterator0;
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>((Comparator<? super Object>) null, iteratorArray0);
      boolean boolean0 = collatingIterator0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CollatingIterator<Integer> collatingIterator0 = new CollatingIterator<Integer>();
      // Undeclared exception!
      try { 
        collatingIterator0.addIterator((Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      Iterator<Object> iterator1 = linkedList0.iterator();
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>((Comparator<? super Object>) null, iterator0, iterator1);
      // Undeclared exception!
      try { 
        collatingIterator0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // You must invoke setComparator() to set a comparator first.
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>();
      collatingIterator0.hasNext();
      // Undeclared exception!
      try { 
        collatingIterator0.setComparator((Comparator<? super Object>) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't do that after next or hasNext has been called.
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CollatingIterator<Integer> collatingIterator0 = new CollatingIterator<Integer>();
      // Undeclared exception!
      try { 
        collatingIterator0.getIteratorIndex();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No value has been returned yet
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object object0 = new Object();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add(object0);
      Iterator<Object> iterator0 = linkedList0.iterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>(comparator0, iterator0, iterator0);
      collatingIterator0.next();
      int int0 = collatingIterator0.getIteratorIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CollatingIterator<Integer> collatingIterator0 = new CollatingIterator<Integer>();
      // Undeclared exception!
      try { 
        collatingIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No value can be removed at present
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CollatingIterator<Integer> collatingIterator0 = new CollatingIterator<Integer>();
      try { 
        collatingIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CollatingIterator<Integer> collatingIterator0 = new CollatingIterator<Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      linkedList0.add((Object) listIterator0);
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      Iterator<Object> iterator1 = linkedList0.descendingIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      CollatingIterator<Object> collatingIterator1 = new CollatingIterator<Object>(comparator0, iterator1, collatingIterator0);
      collatingIterator1.addIterator(iterator0);
      Object object0 = collatingIterator1.next();
      assertNotNull(object0);
      
      collatingIterator1.next();
      int int0 = collatingIterator1.getIteratorIndex();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>();
      // Undeclared exception!
      try { 
        collatingIterator0.setIterator(39, (Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Iterator<Object>[] iteratorArray0 = (Iterator<Object>[]) Array.newInstance(Iterator.class, 1);
      CollatingIterator<Object> collatingIterator0 = null;
      try {
        collatingIterator0 = new CollatingIterator<Object>((Comparator<? super Object>) null, iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>(comparator0);
      Comparator<? super Object> comparator1 = collatingIterator0.getComparator();
      assertNotNull(comparator1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<Object> iterator0 = linkedList0.iterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CollatingIterator<Object> collatingIterator0 = new CollatingIterator<Object>(comparator0, iterator0, iterator0);
      List<Iterator<?>> list0 = collatingIterator0.getIterators();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CollatingIterator<Integer> collatingIterator0 = new CollatingIterator<Integer>();
      // Undeclared exception!
      try { 
        collatingIterator0.setIterator(1, collatingIterator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
