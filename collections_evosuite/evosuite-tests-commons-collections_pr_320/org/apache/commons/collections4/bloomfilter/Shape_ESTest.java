/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 11:14:37 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.bloomfilter.Shape;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Shape_ESTest extends Shape_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        Shape.fromPMK(1, 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Probability must be greater than 0 and less than 1: 1.0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        Shape.fromPMK(0.0, 809, 2182);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Probability must be greater than 0 and less than 1: 0.0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Shape shape0 = Shape.fromPMK(2.113988894374681E-19, 5435, 2);
      assertEquals(5435, shape0.getNumberOfBits());
      assertEquals(2, shape0.getNumberOfHashFunctions());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Shape shape0 = Shape.fromPMK(2.113988894374681E-19, 2647, 2647);
      double double0 = shape0.estimateN(5435);
      assertEquals(2647, shape0.getNumberOfHashFunctions());
      assertEquals(2647, shape0.getNumberOfBits());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(1, 1, 1);
      boolean boolean0 = shape0.isSparse(2);
      assertEquals(1, shape0.getNumberOfHashFunctions());
      assertEquals(1, shape0.getNumberOfBits());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Shape shape0 = Shape.fromNM(5435, 5435);
      Shape shape1 = Shape.fromKM(1935, 5435);
      boolean boolean0 = shape1.equals(shape0);
      assertEquals(5435, shape0.getNumberOfBits());
      assertEquals(1935, shape1.getNumberOfHashFunctions());
      assertEquals(5435, shape1.getNumberOfBits());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1, 1);
      double double0 = shape0.getProbability(1);
      assertEquals(0.6321205588285577, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2663, 2663);
      double double0 = shape0.estimateN(0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2663, shape0.getNumberOfBits());
      assertEquals(1, shape0.getNumberOfHashFunctions());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2663, 2663);
      double double0 = shape0.estimateN((-36));
      assertEquals((-35.75883644444487), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1, 6);
      Shape shape1 = Shape.fromNMK(6, 1, 6);
      int int0 = shape0.compareTo(shape1);
      assertEquals(1, int0);
      assertEquals(6, shape0.getNumberOfBits());
      assertEquals(4, shape0.getNumberOfHashFunctions());
      assertEquals(1, shape1.getNumberOfBits());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1728, 1728);
      // Undeclared exception!
      try { 
        shape0.compareTo((Shape) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Shape shape0 = Shape.fromNM(5405, 2129300351);
      double double0 = shape0.getProbability(2240);
      assertEquals(0.0, double0, 0.01);
      assertEquals(273065, shape0.getNumberOfHashFunctions());
      assertEquals(2129300351, shape0.getNumberOfBits());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Shape shape0 = Shape.fromNM(5435, 5435);
      int int0 = shape0.compareTo(shape0);
      assertEquals(1, shape0.getNumberOfHashFunctions());
      assertEquals(5435, shape0.getNumberOfBits());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Shape shape0 = Shape.fromNM(5435, 5435);
      int int0 = shape0.getNumberOfBits();
      assertEquals(1, shape0.getNumberOfHashFunctions());
      assertEquals(5435, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        Shape.fromNM(5424, 2437);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Filter too small: Calculated number of hash functions (0) was less than 1
         //
         verifyException("org.apache.commons.collections4.bloomfilter.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        Shape.fromNMK(1011, 5435, 1935);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Calculated probability is greater than or equal to 1: 1.0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Shape.fromNP(1935, 1935);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Probability must be greater than 0 and less than 1: 1935.0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        Shape.fromPMK((-1252), (-1252), (-1252));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Probability must be greater than 0 and less than 1: -1252.0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Shape.fromKM((-38), (-38));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of hash functions must be greater than 0: -38
         //
         verifyException("org.apache.commons.collections4.bloomfilter.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        Shape.fromNMK(30, (-12), 30);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be greater than 0: -12
         //
         verifyException("org.apache.commons.collections4.bloomfilter.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        Shape.fromNM((-577547305), (-577547305));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of items must be greater than 0: -577547305
         //
         verifyException("org.apache.commons.collections4.bloomfilter.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        Shape.fromNP(2146374410, 0.3934693402873666);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Resulting filter has more than 2147483647 bits: 4.166974176E9
         //
         verifyException("org.apache.commons.collections4.bloomfilter.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Shape shape0 = Shape.fromNP(1935, 0.3934693402873666);
      assertEquals(1, shape0.getNumberOfHashFunctions());
      assertEquals(3757, shape0.getNumberOfBits());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Shape shape0 = Shape.fromKM(329, 329);
      // Undeclared exception!
      try { 
        shape0.getProbability((-433));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of items must be greater than or equal to 0: -433
         //
         verifyException("org.apache.commons.collections4.bloomfilter.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Shape shape0 = Shape.fromNM(5435, 5435);
      Shape shape1 = Shape.fromKM(1935, 5435);
      boolean boolean0 = shape0.equals(shape1);
      assertEquals(1935, shape1.getNumberOfHashFunctions());
      assertEquals(5435, shape0.getNumberOfBits());
      assertEquals(5435, shape1.getNumberOfBits());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Shape shape0 = Shape.fromNM(5405, 2129300351);
      boolean boolean0 = shape0.equals((Object) null);
      assertEquals(273065, shape0.getNumberOfHashFunctions());
      assertFalse(boolean0);
      assertEquals(2129300351, shape0.getNumberOfBits());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Shape shape0 = Shape.fromNM(5435, 5435);
      boolean boolean0 = shape0.equals(shape0);
      assertTrue(boolean0);
      assertEquals(5435, shape0.getNumberOfBits());
      assertEquals(1, shape0.getNumberOfHashFunctions());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(1, 1, 1);
      Shape shape1 = Shape.fromNM(425, 425);
      int int0 = shape0.compareTo(shape1);
      assertEquals((-1), int0);
      assertEquals(1, shape0.getNumberOfHashFunctions());
      assertEquals(1, shape0.getNumberOfBits());
      assertEquals(1, shape1.getNumberOfHashFunctions());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1728, 149);
      double double0 = shape0.getProbability(0);
      assertEquals(1728, shape0.getNumberOfHashFunctions());
      assertEquals(0.0, double0, 0.01);
      assertEquals(149, shape0.getNumberOfBits());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2663, 2663);
      shape0.hashCode();
      assertEquals(2663, shape0.getNumberOfBits());
      assertEquals(1, shape0.getNumberOfHashFunctions());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(1, 1, 1);
      boolean boolean0 = shape0.isSparse(1);
      assertEquals(1, shape0.getNumberOfHashFunctions());
      assertTrue(boolean0);
      assertEquals(1, shape0.getNumberOfBits());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Shape shape0 = Shape.fromNM(5435, 5435);
      double double0 = shape0.estimateN(5435);
      assertEquals(1, shape0.getNumberOfHashFunctions());
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Shape shape0 = Shape.fromNM(5405, 2129300351);
      String string0 = shape0.toString();
      assertEquals("Shape[k=273065 m=2129300351]", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Shape shape0 = Shape.fromPMK(2.113988894374681E-19, 2647, 2647);
      boolean boolean0 = shape0.isSparse(5435);
      assertEquals(2647, shape0.getNumberOfHashFunctions());
      assertEquals(2647, shape0.getNumberOfBits());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1, 1);
      int int0 = shape0.getNumberOfHashFunctions();
      assertEquals(1, shape0.getNumberOfBits());
      assertEquals(1, int0);
  }
}
