/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 20:52:32 GMT 2025
 */

package org.apache.commons.collections4.comparators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.collections4.comparators.FixedOrderComparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FixedOrderComparator_ESTest extends FixedOrderComparator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>(linkedList0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        fixedOrderComparator0.compare(linkedList0, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attempting to compare unknown object []
         //
         verifyException("org.apache.commons.collections4.comparators.FixedOrderComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>(linkedList0);
      fixedOrderComparator0.checkLocked();
      assertFalse(fixedOrderComparator0.isLocked());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FixedOrderComparator.UnknownObjectBehavior[] fixedOrderComparator_UnknownObjectBehaviorArray0 = FixedOrderComparator.UnknownObjectBehavior.values();
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>(fixedOrderComparator_UnknownObjectBehaviorArray0);
      FixedOrderComparator.UnknownObjectBehavior fixedOrderComparator_UnknownObjectBehavior0 = FixedOrderComparator.UnknownObjectBehavior.BEFORE;
      fixedOrderComparator0.setUnknownObjectBehavior(fixedOrderComparator_UnknownObjectBehavior0);
      fixedOrderComparator0.compare((Object) null, fixedOrderComparator0);
      boolean boolean0 = fixedOrderComparator0.isLocked();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FixedOrderComparator.UnknownObjectBehavior[] fixedOrderComparator_UnknownObjectBehaviorArray0 = FixedOrderComparator.UnknownObjectBehavior.values();
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>(fixedOrderComparator_UnknownObjectBehaviorArray0);
      FixedOrderComparator.UnknownObjectBehavior fixedOrderComparator_UnknownObjectBehavior0 = FixedOrderComparator.UnknownObjectBehavior.BEFORE;
      fixedOrderComparator0.setUnknownObjectBehavior(fixedOrderComparator_UnknownObjectBehavior0);
      fixedOrderComparator0.compare((Object) null, fixedOrderComparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      FixedOrderComparator<Comparable<Object>> fixedOrderComparator1 = new FixedOrderComparator<Comparable<Object>>();
      // Undeclared exception!
      try { 
        fixedOrderComparator0.addAsEqual(linkedList0, fixedOrderComparator1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot modify a FixedOrderComparator after a comparison
         //
         verifyException("org.apache.commons.collections4.comparators.FixedOrderComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>(linkedList0);
      linkedList0.add((Object) fixedOrderComparator0);
      Object[] objectArray0 = new Object[6];
      objectArray0[2] = (Object) linkedList0;
      linkedList0.add(objectArray0[2]);
      FixedOrderComparator<Object> fixedOrderComparator1 = new FixedOrderComparator<Object>(objectArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object[] objectArray0 = new Object[21];
      objectArray0[2] = (Object) linkedList0;
      linkedList0.add(objectArray0[2]);
      FixedOrderComparator<Object> fixedOrderComparator0 = null;
      try {
        fixedOrderComparator0 = new FixedOrderComparator<Object>(objectArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>(objectArray0);
      fixedOrderComparator0.compare((Object) null, objectArray0[1]);
      fixedOrderComparator0.hashCode();
      assertTrue(fixedOrderComparator0.isLocked());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>(linkedList0);
      fixedOrderComparator0.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = Integer.valueOf(1);
      linkedList0.add((Object) integer0);
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>(linkedList0);
      boolean boolean0 = fixedOrderComparator0.add(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>(linkedList0);
      assertFalse(fixedOrderComparator0.isLocked());
      
      boolean boolean0 = fixedOrderComparator0.add(linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FixedOrderComparator.UnknownObjectBehavior[] fixedOrderComparator_UnknownObjectBehaviorArray0 = FixedOrderComparator.UnknownObjectBehavior.values();
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>(fixedOrderComparator_UnknownObjectBehaviorArray0);
      boolean boolean0 = fixedOrderComparator0.isLocked();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 6);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      comparableArray0[0] = comparable0;
      FixedOrderComparator<Comparable<Object>> fixedOrderComparator0 = new FixedOrderComparator<Comparable<Object>>(comparableArray0);
      FixedOrderComparator<Object> fixedOrderComparator1 = new FixedOrderComparator<Object>(comparableArray0);
      fixedOrderComparator1.compare(comparable0, comparable0);
      boolean boolean0 = fixedOrderComparator1.equals(fixedOrderComparator0);
      assertTrue(fixedOrderComparator1.isLocked());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FixedOrderComparator<Comparable<Object>> fixedOrderComparator0 = new FixedOrderComparator<Comparable<Object>>();
      FixedOrderComparator<Comparable<Object>> fixedOrderComparator1 = new FixedOrderComparator<Comparable<Object>>();
      assertTrue(fixedOrderComparator1.equals((Object)fixedOrderComparator0));
      
      FixedOrderComparator.UnknownObjectBehavior fixedOrderComparator_UnknownObjectBehavior0 = FixedOrderComparator.UnknownObjectBehavior.AFTER;
      fixedOrderComparator1.setUnknownObjectBehavior(fixedOrderComparator_UnknownObjectBehavior0);
      boolean boolean0 = fixedOrderComparator1.equals(fixedOrderComparator0);
      assertFalse(fixedOrderComparator1.equals((Object)fixedOrderComparator0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>(objectArray0);
      FixedOrderComparator<Comparable<Object>> fixedOrderComparator1 = new FixedOrderComparator<Comparable<Object>>();
      boolean boolean0 = fixedOrderComparator1.equals(fixedOrderComparator0);
      assertFalse(fixedOrderComparator1.isLocked());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = new Object();
      Integer[] integerArray0 = new Integer[1];
      FixedOrderComparator<Integer> fixedOrderComparator0 = new FixedOrderComparator<Integer>(integerArray0);
      boolean boolean0 = fixedOrderComparator0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FixedOrderComparator<Comparable<Object>> fixedOrderComparator0 = new FixedOrderComparator<Comparable<Object>>();
      boolean boolean0 = fixedOrderComparator0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(fixedOrderComparator0.isLocked());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FixedOrderComparator<Comparable<Object>> fixedOrderComparator0 = new FixedOrderComparator<Comparable<Object>>();
      boolean boolean0 = fixedOrderComparator0.equals(fixedOrderComparator0);
      assertFalse(fixedOrderComparator0.isLocked());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>(objectArray0);
      FixedOrderComparator.UnknownObjectBehavior fixedOrderComparator_UnknownObjectBehavior0 = FixedOrderComparator.UnknownObjectBehavior.AFTER;
      fixedOrderComparator0.setUnknownObjectBehavior(fixedOrderComparator_UnknownObjectBehavior0);
      int int0 = fixedOrderComparator0.compare(fixedOrderComparator_UnknownObjectBehavior0, objectArray0[0]);
      assertTrue(fixedOrderComparator0.isLocked());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>(objectArray0);
      FixedOrderComparator.UnknownObjectBehavior fixedOrderComparator_UnknownObjectBehavior0 = FixedOrderComparator.UnknownObjectBehavior.AFTER;
      fixedOrderComparator0.setUnknownObjectBehavior(fixedOrderComparator_UnknownObjectBehavior0);
      Object object0 = new Object();
      int int0 = fixedOrderComparator0.compare(objectArray0[1], object0);
      assertTrue(fixedOrderComparator0.isLocked());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FixedOrderComparator.UnknownObjectBehavior[] fixedOrderComparator_UnknownObjectBehaviorArray0 = FixedOrderComparator.UnknownObjectBehavior.values();
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>(fixedOrderComparator_UnknownObjectBehaviorArray0);
      FixedOrderComparator.UnknownObjectBehavior fixedOrderComparator_UnknownObjectBehavior0 = FixedOrderComparator.UnknownObjectBehavior.BEFORE;
      fixedOrderComparator0.setUnknownObjectBehavior(fixedOrderComparator_UnknownObjectBehavior0);
      fixedOrderComparator0.compare((Object) null, fixedOrderComparator0);
      // Undeclared exception!
      try { 
        fixedOrderComparator0.setUnknownObjectBehavior(fixedOrderComparator_UnknownObjectBehavior0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot modify a FixedOrderComparator after a comparison
         //
         verifyException("org.apache.commons.collections4.comparators.FixedOrderComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FixedOrderComparator.UnknownObjectBehavior[] fixedOrderComparator_UnknownObjectBehaviorArray0 = FixedOrderComparator.UnknownObjectBehavior.values();
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>(fixedOrderComparator_UnknownObjectBehaviorArray0);
      FixedOrderComparator.UnknownObjectBehavior fixedOrderComparator_UnknownObjectBehavior0 = FixedOrderComparator.UnknownObjectBehavior.BEFORE;
      fixedOrderComparator0.setUnknownObjectBehavior(fixedOrderComparator_UnknownObjectBehavior0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      FixedOrderComparator<Integer> fixedOrderComparator1 = new FixedOrderComparator<Integer>(linkedList0);
      fixedOrderComparator0.compare(fixedOrderComparator_UnknownObjectBehavior0, fixedOrderComparator1);
      // Undeclared exception!
      try { 
        fixedOrderComparator0.add(fixedOrderComparator_UnknownObjectBehavior0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot modify a FixedOrderComparator after a comparison
         //
         verifyException("org.apache.commons.collections4.comparators.FixedOrderComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>(objectArray0);
      FixedOrderComparator.UnknownObjectBehavior fixedOrderComparator_UnknownObjectBehavior0 = FixedOrderComparator.UnknownObjectBehavior.BEFORE;
      fixedOrderComparator0.setUnknownObjectBehavior(fixedOrderComparator_UnknownObjectBehavior0);
      Integer integer0 = new Integer(2);
      int int0 = fixedOrderComparator0.compare(integer0, objectArray0[0]);
      assertTrue(fixedOrderComparator0.isLocked());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FixedOrderComparator.UnknownObjectBehavior[] fixedOrderComparator_UnknownObjectBehaviorArray0 = FixedOrderComparator.UnknownObjectBehavior.values();
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>(fixedOrderComparator_UnknownObjectBehaviorArray0);
      FixedOrderComparator.UnknownObjectBehavior fixedOrderComparator_UnknownObjectBehavior0 = FixedOrderComparator.UnknownObjectBehavior.BEFORE;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      FixedOrderComparator<Integer> fixedOrderComparator1 = new FixedOrderComparator<Integer>(linkedList0);
      // Undeclared exception!
      try { 
        fixedOrderComparator0.compare(fixedOrderComparator_UnknownObjectBehavior0, fixedOrderComparator1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attempting to compare unknown object org.apache.commons.collections4.comparators.FixedOrderComparator@ef4bb60
         //
         verifyException("org.apache.commons.collections4.comparators.FixedOrderComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object[] objectArray0 = new Object[19];
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>(objectArray0);
      FixedOrderComparator.UnknownObjectBehavior fixedOrderComparator_UnknownObjectBehavior0 = FixedOrderComparator.UnknownObjectBehavior.BEFORE;
      boolean boolean0 = fixedOrderComparator0.addAsEqual(objectArray0[1], fixedOrderComparator_UnknownObjectBehavior0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FixedOrderComparator<Comparable<Object>> fixedOrderComparator0 = new FixedOrderComparator<Comparable<Object>>();
      FixedOrderComparator<Object> fixedOrderComparator1 = new FixedOrderComparator<Object>();
      // Undeclared exception!
      try { 
        fixedOrderComparator1.addAsEqual(fixedOrderComparator1, fixedOrderComparator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // org.apache.commons.collections4.comparators.FixedOrderComparator@ef4bb60 not known to org.apache.commons.collections4.comparators.FixedOrderComparator@ef4bb60
         //
         verifyException("org.apache.commons.collections4.comparators.FixedOrderComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>(integerArray0);
      boolean boolean0 = fixedOrderComparator0.addAsEqual((Object) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FixedOrderComparator<Integer> fixedOrderComparator0 = new FixedOrderComparator<Integer>();
      // Undeclared exception!
      try { 
        fixedOrderComparator0.setUnknownObjectBehavior((FixedOrderComparator.UnknownObjectBehavior) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Unknown object behavior must not be null
         //
         verifyException("org.apache.commons.collections4.comparators.FixedOrderComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>();
      FixedOrderComparator.UnknownObjectBehavior fixedOrderComparator_UnknownObjectBehavior0 = FixedOrderComparator.UnknownObjectBehavior.AFTER;
      fixedOrderComparator0.setUnknownObjectBehavior(fixedOrderComparator_UnknownObjectBehavior0);
      fixedOrderComparator0.compare(fixedOrderComparator0, fixedOrderComparator0);
      // Undeclared exception!
      try { 
        fixedOrderComparator0.checkLocked();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot modify a FixedOrderComparator after a comparison
         //
         verifyException("org.apache.commons.collections4.comparators.FixedOrderComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FixedOrderComparator<Integer> fixedOrderComparator0 = null;
      try {
        fixedOrderComparator0 = new FixedOrderComparator<Integer>((List<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The list of items must not be null
         //
         verifyException("org.apache.commons.collections4.comparators.FixedOrderComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FixedOrderComparator<Integer> fixedOrderComparator0 = null;
      try {
        fixedOrderComparator0 = new FixedOrderComparator<Integer>((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The list of items must not be null
         //
         verifyException("org.apache.commons.collections4.comparators.FixedOrderComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 6);
      FixedOrderComparator<Comparable<Object>> fixedOrderComparator0 = new FixedOrderComparator<Comparable<Object>>(comparableArray0);
      FixedOrderComparator<Object> fixedOrderComparator1 = new FixedOrderComparator<Object>(comparableArray0);
      boolean boolean0 = fixedOrderComparator1.equals(fixedOrderComparator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<FixedOrderComparator<Integer>> linkedList0 = new LinkedList<FixedOrderComparator<Integer>>();
      FixedOrderComparator<FixedOrderComparator<Integer>> fixedOrderComparator0 = new FixedOrderComparator<FixedOrderComparator<Integer>>(linkedList0);
      fixedOrderComparator0.getUnknownObjectBehavior();
      assertFalse(fixedOrderComparator0.isLocked());
  }
}
