/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 13:40:01 GMT 2025
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.time.DayOfWeek;
import java.time.Month;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.HijrahEra;
import java.time.chrono.IsoEra;
import java.time.chrono.MinguoEra;
import java.time.chrono.ThaiBuddhistEra;
import java.time.format.FormatStyle;
import java.time.temporal.ChronoField;
import java.time.temporal.ChronoUnit;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import org.apache.commons.collections4.BoundedCollection;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.collection.UnmodifiableBoundedCollection;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NOPTransformer;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.list.FixedSizeList;
import org.apache.commons.collections4.queue.CircularFifoQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CollectionUtils_ESTest extends CollectionUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Transformer<Integer, Integer> transformer0 = NOPTransformer.nopTransformer();
      Collection<Integer> collection0 = CollectionUtils.transformingCollection((Collection<Integer>) stack0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      // Undeclared exception!
      try { 
        CollectionUtils.removeCount((Collection<Integer>) treeSet0, 0, 31);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The sum of start index and count can't be greater than the size of collection.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PriorityQueue<ChronoField> priorityQueue0 = new PriorityQueue<ChronoField>();
      // Undeclared exception!
      try { 
        CollectionUtils.removeRange((Collection<ChronoField>) priorityQueue0, (-30), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The start index can't be less than 0.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      CircularFifoQueue<Month> circularFifoQueue0 = new CircularFifoQueue<Month>(46);
      Collection<Month> collection0 = CollectionUtils.retainAll((Collection<Month>) circularFifoQueue0, (Collection<?>) stack0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CircularFifoQueue<Month> circularFifoQueue0 = new CircularFifoQueue<Month>(46);
      BoundedCollection<Month> boundedCollection0 = UnmodifiableBoundedCollection.unmodifiableBoundedCollection((BoundedCollection<? extends Month>) circularFifoQueue0);
      Comparator<Month> comparator0 = (Comparator<Month>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Month> list0 = CollectionUtils.collate((Iterable<? extends Month>) circularFifoQueue0, (Iterable<? extends Month>) boundedCollection0, (Comparator<? super Month>) comparator0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Collection<HijrahEra> collection0 = CollectionUtils.emptyCollection();
      List<HijrahEra> list0 = CollectionUtils.collate((Iterable<? extends HijrahEra>) collection0, (Iterable<? extends HijrahEra>) collection0);
      List<HijrahEra> list1 = CollectionUtils.collate((Iterable<? extends HijrahEra>) collection0, (Iterable<? extends HijrahEra>) list0, false);
      assertTrue(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      List<Integer> list0 = CollectionUtils.collate((Iterable<? extends Integer>) arrayList0, (Iterable<? extends Integer>) stack0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: null
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("lP^b$t'k$2;f]pV", "WOp?>huYz$wt");
      boolean boolean0 = CollectionUtils.addAll((Collection<Object>) stack0, (Enumeration<?>) stringTokenizer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BEFORE_BE;
      EnumSet<ThaiBuddhistEra> enumSet0 = EnumSet.of(thaiBuddhistEra0);
      Predicate<ThaiBuddhistEra> predicate0 = IdentityPredicate.identityPredicate(thaiBuddhistEra0);
      Predicate<ThaiBuddhistEra>[] predicateArray0 = (Predicate<ThaiBuddhistEra>[]) Array.newInstance(Predicate.class, 9);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      OnePredicate<ThaiBuddhistEra> onePredicate0 = new OnePredicate<ThaiBuddhistEra>(predicateArray0);
      predicateArray0[4] = (Predicate<ThaiBuddhistEra>) onePredicate0;
      LinkedList<ThaiBuddhistEra> linkedList0 = new LinkedList<ThaiBuddhistEra>();
      CollectionUtils.select((Iterable<? extends ThaiBuddhistEra>) enumSet0, (Predicate<? super ThaiBuddhistEra>) predicateArray0[4], (LinkedList<ThaiBuddhistEra>) null, linkedList0);
      assertTrue(linkedList0.contains(thaiBuddhistEra0));
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ArrayDeque<FormatStyle> arrayDeque0 = new ArrayDeque<FormatStyle>();
      FormatStyle formatStyle0 = FormatStyle.MEDIUM;
      arrayDeque0.add(formatStyle0);
      arrayDeque0.add(formatStyle0);
      DefaultEquator<FormatStyle> defaultEquator0 = DefaultEquator.defaultEquator();
      CollectionUtils.hashCode((Collection<? extends FormatStyle>) arrayDeque0, (Equator<? super FormatStyle>) defaultEquator0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Stack<ThaiBuddhistEra> stack0 = new Stack<ThaiBuddhistEra>();
      FixedSizeList<ThaiBuddhistEra> fixedSizeList0 = FixedSizeList.fixedSizeList((List<ThaiBuddhistEra>) stack0);
      Collection<ThaiBuddhistEra> collection0 = CollectionUtils.unmodifiableCollection((Collection<? extends ThaiBuddhistEra>) fixedSizeList0);
      DefaultEquator<ThaiBuddhistEra> defaultEquator0 = DefaultEquator.defaultEquator();
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<? extends ThaiBuddhistEra>) collection0, (Collection<? extends ThaiBuddhistEra>) stack0, (Equator<? super ThaiBuddhistEra>) defaultEquator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<ChronoField> class0 = ChronoField.class;
      EnumSet<ChronoField> enumSet0 = EnumSet.allOf(class0);
      DefaultEquator<ChronoField> defaultEquator0 = DefaultEquator.defaultEquator();
      HashSet<ChronoField> hashSet0 = new HashSet<ChronoField>();
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<? extends ChronoField>) hashSet0, (Collection<? extends ChronoField>) enumSet0, (Equator<? super ChronoField>) defaultEquator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      UniquePredicate<Integer> uniquePredicate0 = new UniquePredicate<Integer>();
      ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BEFORE_BE;
      ConstantTransformer<Integer, ThaiBuddhistEra> constantTransformer0 = new ConstantTransformer<Integer, ThaiBuddhistEra>(thaiBuddhistEra0);
      IfTransformer<Integer, ThaiBuddhistEra> ifTransformer0 = new IfTransformer<Integer, ThaiBuddhistEra>(uniquePredicate0, constantTransformer0, constantTransformer0);
      Collection<ThaiBuddhistEra> collection0 = CollectionUtils.collect((Iterable<Integer>) priorityQueue0, (Transformer<? super Integer, ? extends ThaiBuddhistEra>) ifTransformer0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(4);
      linkedList0.push(integer0);
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<?>) collection0, (Collection<?>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      IsoEra isoEra0 = IsoEra.BCE;
      EnumSet<IsoEra> enumSet0 = EnumSet.of(isoEra0, isoEra0);
      boolean boolean0 = CollectionUtils.isProperSubCollection(enumSet0, treeSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<MinguoEra> class0 = MinguoEra.class;
      EnumSet<MinguoEra> enumSet0 = EnumSet.allOf(class0);
      Collection<ChronoField> collection0 = CollectionUtils.emptyCollection();
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) enumSet0, (Collection<?>) collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<MinguoEra> class0 = MinguoEra.class;
      EnumSet<MinguoEra> enumSet0 = EnumSet.allOf(class0);
      ChronoUnit[] chronoUnitArray0 = new ChronoUnit[0];
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) enumSet0, chronoUnitArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Stack<ChronoField> stack0 = new Stack<ChronoField>();
      LinkedList<Month> linkedList0 = new LinkedList<Month>();
      Collection<Object> collection0 = CollectionUtils.subtract((Iterable<?>) linkedList0, (Iterable<?>) stack0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      DefaultEquator<Integer> defaultEquator0 = DefaultEquator.defaultEquator();
      Collection<Integer> collection0 = CollectionUtils.removeAll((Iterable<Integer>) priorityQueue0, (Iterable<? extends Integer>) priorityQueue0, (Equator<? super Integer>) defaultEquator0);
      Collection<Integer> collection1 = CollectionUtils.intersection((Iterable<? extends Integer>) collection0, (Iterable<? extends Integer>) priorityQueue0);
      assertNotSame(collection0, collection1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CollectionUtils.checkIndexBounds(1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<MinguoEra> class0 = MinguoEra.class;
      EnumSet<MinguoEra> enumSet0 = EnumSet.allOf(class0);
      int int0 = CollectionUtils.size(enumSet0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Stack<HijrahEra> stack0 = new Stack<HijrahEra>();
      FixedSizeList<HijrahEra> fixedSizeList0 = FixedSizeList.fixedSizeList((List<HijrahEra>) stack0);
      int int0 = CollectionUtils.maxSize(fixedSizeList0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Stack<HijrahEra> stack0 = new Stack<HijrahEra>();
      FixedSizeList<HijrahEra> fixedSizeList0 = FixedSizeList.fixedSizeList((List<HijrahEra>) stack0);
      boolean boolean0 = CollectionUtils.isFull(fixedSizeList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<DayOfWeek> class0 = DayOfWeek.class;
      EnumSet<DayOfWeek> enumSet0 = EnumSet.allOf(class0);
      Iterator<DayOfWeek> iterator0 = enumSet0.iterator();
      NOPClosure<Object> nOPClosure0 = (NOPClosure<Object>) mock(NOPClosure.class, new ViolatedAssumptionAnswer());
      DayOfWeek dayOfWeek0 = CollectionUtils.forAllButLastDo(iterator0, nOPClosure0);
      assertTrue(enumSet0.contains(dayOfWeek0));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ArrayDeque<Collection<Integer>> arrayDeque0 = new ArrayDeque<Collection<Integer>>();
      Vector<Integer> vector0 = new Vector<Integer>();
      arrayDeque0.add(vector0);
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Transformer<Object, Integer> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Integer>) hashMap0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      Collection<Integer> collection0 = CollectionUtils.forAllButLastDo((Iterable<Collection<Integer>>) arrayDeque0, transformerClosure0);
      assertTrue(arrayDeque0.contains(collection0));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<LinkedList<ChronoField>> priorityQueue0 = new PriorityQueue<LinkedList<ChronoField>>(803, comparator0);
      LinkedList<ChronoField> linkedList0 = new LinkedList<ChronoField>();
      priorityQueue0.add(linkedList0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      LinkedList<ChronoField> linkedList1 = CollectionUtils.find((Iterable<LinkedList<ChronoField>>) priorityQueue0, (Predicate<? super LinkedList<ChronoField>>) predicate0);
      assertTrue(priorityQueue0.contains(linkedList1));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DefaultEquator<HijrahEra> defaultEquator0 = DefaultEquator.defaultEquator();
      HijrahEra hijrahEra0 = HijrahEra.AH;
      EqualPredicate<HijrahEra> equalPredicate0 = new EqualPredicate<HijrahEra>(hijrahEra0, defaultEquator0);
      EnumSet<HijrahEra> enumSet0 = EnumSet.of(hijrahEra0, hijrahEra0, hijrahEra0, hijrahEra0);
      int int0 = CollectionUtils.countMatches((Iterable<HijrahEra>) enumSet0, (Predicate<? super HijrahEra>) equalPredicate0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      Iterator<Object> iterator0 = serviceLoader0.iterator();
      LinkedList<Object> linkedList0 = CollectionUtils.collect((Iterator<?>) iterator0, (Transformer<? super Object, ? extends DayOfWeek>) null, (LinkedList<Object>) null);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Integer integer0 = new Integer((-436));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add(integer0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      List<Integer> list0 = CollectionUtils.collate((Iterable<? extends Integer>) linkedList0, (Iterable<? extends Integer>) linkedList0, (Comparator<? super Integer>) comparator0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      UniquePredicate<Integer> uniquePredicate0 = new UniquePredicate<Integer>();
      ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BEFORE_BE;
      ConstantTransformer<Integer, ThaiBuddhistEra> constantTransformer0 = new ConstantTransformer<Integer, ThaiBuddhistEra>(thaiBuddhistEra0);
      IfTransformer<Integer, ThaiBuddhistEra> ifTransformer0 = new IfTransformer<Integer, ThaiBuddhistEra>(uniquePredicate0, constantTransformer0, constantTransformer0);
      Collection<ThaiBuddhistEra> collection0 = CollectionUtils.collect((Iterable<Integer>) priorityQueue0, (Transformer<? super Integer, ? extends ThaiBuddhistEra>) ifTransformer0);
      int int0 = CollectionUtils.cardinality(thaiBuddhistEra0, (Iterable<? super ThaiBuddhistEra>) collection0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      stack0.add((Integer) null);
      int int0 = CollectionUtils.cardinality((Integer) null, (Iterable<? super Integer>) stack0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<MinguoEra> class0 = MinguoEra.class;
      EnumSet<MinguoEra> enumSet0 = EnumSet.allOf(class0);
      MinguoEra[] minguoEraArray0 = new MinguoEra[0];
      boolean boolean0 = CollectionUtils.addAll((Collection<MinguoEra>) enumSet0, minguoEraArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      boolean boolean0 = CollectionUtils.addAll((Collection<Object>) arrayList0, (Enumeration<?>) stringTokenizer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.union((Iterable<?>) null, (Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // a
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.synchronizedCollection((Collection<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.subtract((Iterable<? extends Integer>) null, (Iterable<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // a
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MinguoEra minguoEra0 = MinguoEra.ROC;
      MinguoEra[] minguoEraArray0 = new MinguoEra[1];
      minguoEraArray0[0] = minguoEra0;
      EnumSet<MinguoEra> enumSet0 = EnumSet.of(minguoEra0, minguoEraArray0);
      Predicate<MinguoEra> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        CollectionUtils.selectRejected((Iterable<? extends MinguoEra>) enumSet0, (Predicate<? super MinguoEra>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      CircularFifoQueue<DayOfWeek> circularFifoQueue0 = new CircularFifoQueue<DayOfWeek>();
      DayOfWeek dayOfWeek0 = DayOfWeek.SATURDAY;
      circularFifoQueue0.add(dayOfWeek0);
      Collection<DayOfWeek> collection0 = CollectionUtils.unmodifiableCollection((Collection<? extends DayOfWeek>) circularFifoQueue0);
      // Undeclared exception!
      try { 
        CollectionUtils.select((Iterable<? extends DayOfWeek>) collection0, (Predicate<? super DayOfWeek>) uniquePredicate0, collection0, (Collection<DayOfWeek>) circularFifoQueue0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BE;
      EnumSet<ThaiBuddhistEra> enumSet0 = EnumSet.of(thaiBuddhistEra0);
      Predicate<ThaiBuddhistEra> predicate0 = IdentityPredicate.identityPredicate(thaiBuddhistEra0);
      LinkedList<ThaiBuddhistEra> linkedList0 = new LinkedList<ThaiBuddhistEra>();
      // Undeclared exception!
      try { 
        CollectionUtils.select((Iterable<? extends ThaiBuddhistEra>) enumSet0, (Predicate<? super ThaiBuddhistEra>) predicate0, (LinkedList<ThaiBuddhistEra>) null, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      DayOfWeek dayOfWeek0 = DayOfWeek.SUNDAY;
      DayOfWeek[] dayOfWeekArray0 = new DayOfWeek[3];
      dayOfWeekArray0[0] = dayOfWeek0;
      dayOfWeekArray0[1] = dayOfWeek0;
      dayOfWeekArray0[2] = dayOfWeek0;
      EnumSet<DayOfWeek> enumSet0 = EnumSet.of(dayOfWeek0, dayOfWeekArray0);
      // Undeclared exception!
      try { 
        CollectionUtils.select((Iterable<? extends DayOfWeek>) enumSet0, (Predicate<? super DayOfWeek>) predicate0, (Collection<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DayOfWeek dayOfWeek0 = DayOfWeek.TUESDAY;
      EnumSet<DayOfWeek> enumSet0 = EnumSet.of(dayOfWeek0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>((Transformer<? super Object, Boolean>) null);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(transformerPredicate0);
      // Undeclared exception!
      try { 
        CollectionUtils.select((Iterable<?>) enumSet0, (Predicate<? super Object>) nullIsExceptionPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.retainAll((Collection<LinkedList<DayOfWeek>>) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>(567);
      // Undeclared exception!
      try { 
        CollectionUtils.retainAll((Iterable<Object>) vector0, (Iterable<?>) vector0, (Equator<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // equator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.removeRange((Collection<Locale.FilteringMode>) null, (-1165), (-1165));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.removeCount((Collection<Object>) null, 191, 191);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      // Undeclared exception!
      try { 
        CollectionUtils.removeAll((Collection<DayOfWeek>) null, (Collection<?>) stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      // Undeclared exception!
      try { 
        CollectionUtils.removeAll((Iterable<Predicate<Integer>>) null, (Iterable<? extends Predicate<Integer>>) null, (Equator<? super Predicate<Integer>>) defaultEquator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
      try { 
        CollectionUtils.predicatedCollection((Collection<Integer>) null, (Predicate<? super Integer>) uniquePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.permutations((Collection<DayOfWeek>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.maxSize((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DefaultEquator<DayOfWeek> defaultEquator0 = DefaultEquator.defaultEquator();
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      hashSet0.add((Integer) defaultEquator0.HASHCODE_NULL);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      List<Integer> list0 = CollectionUtils.collate((Iterable<? extends Integer>) hashSet0, (Iterable<? extends Integer>) hashSet0, (Comparator<? super Integer>) comparator0, true);
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Transformer<Integer, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super Integer, ? extends Boolean>) hashMap0);
      Predicate<Integer> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Integer, Boolean>) transformer0);
      // Undeclared exception!
      try { 
        CollectionUtils.matchesAll((Iterable<Integer>) list0, (Predicate<? super Integer>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.isSubCollection((Collection<?>) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // a
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      // Undeclared exception!
      try { 
        CollectionUtils.isProperSubCollection(stack0, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // b
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.isFull((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.isEqualCollection((Collection<?>) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // a
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Vector<ChronoField> vector0 = new Vector<ChronoField>(983, 2749);
      // Undeclared exception!
      try { 
        CollectionUtils.intersection((Iterable<? extends ChronoField>) vector0, (Iterable<? extends ChronoField>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // b
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      // Undeclared exception!
      try { 
        CollectionUtils.hashCode((Collection<? extends Integer>) linkedHashSet0, (Equator<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // equator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.getCardinalityMap((Iterable<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coll
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.get((Map<DayOfWeek, Collection<DayOfWeek>>) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.get((Iterator<Comparable<Comparable>>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) linkedList0, 31);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 31, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) stack0, 31);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 31
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ArrayDeque<DayOfWeek> arrayDeque0 = new ArrayDeque<DayOfWeek>();
      List<DayOfWeek> list0 = CollectionUtils.collate((Iterable<? extends DayOfWeek>) arrayDeque0, (Iterable<? extends DayOfWeek>) arrayDeque0);
      // Undeclared exception!
      try { 
        CollectionUtils.get((Iterable<DayOfWeek>) list0, 31);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 31, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      // Undeclared exception!
      try { 
        CollectionUtils.get((Iterable<Integer>) priorityQueue0, 27);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 27
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Integer integer0 = new Integer(0);
      arrayDeque0.addLast(integer0);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 7);
      Transformer<Object, Object> transformer0 = InvokerTransformer.invokerTransformer("iterableA", (Class<?>[]) classArray0, (Object[]) classArray0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      // Undeclared exception!
      try { 
        CollectionUtils.forAllDo((Iterable<Integer>) arrayDeque0, transformerClosure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'iterableA' on 'class java.lang.Integer' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.extractSingleton((Collection<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PriorityQueue<HijrahEra> priorityQueue0 = new PriorityQueue<HijrahEra>();
      HijrahEra hijrahEra0 = HijrahEra.AH;
      priorityQueue0.add(hijrahEra0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        CollectionUtils.exists((Iterable<HijrahEra>) priorityQueue0, (Predicate<? super HijrahEra>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = new Integer(47);
      stack0.push(integer0);
      NotPredicate<Integer> notPredicate0 = new NotPredicate<Integer>((Predicate<? super Integer>) null);
      // Undeclared exception!
      try { 
        CollectionUtils.exists((Iterable<Integer>) stack0, (Predicate<? super Integer>) notPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NotPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.disjunction((Iterable<?>) null, (Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // a
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      // Undeclared exception!
      try { 
        CollectionUtils.containsAny((Collection<?>) treeSet0, (ChronoUnit[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coll2
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        CollectionUtils.containsAny((Collection<?>) linkedList0, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coll2
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) linkedList0;
      CollectionUtils.addAll((Collection<Object>) linkedList0, objectArray0);
      // Undeclared exception!
      try { 
        CollectionUtils.containsAll(linkedList0, linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.containsAll((Collection<?>) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coll1
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      FixedSizeList<Integer> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Integer>) linkedList0);
      Iterator<Integer> iterator0 = fixedSizeList0.iterator();
      Integer integer0 = new Integer(2972);
      linkedList0.add(integer0);
      Transformer<Integer, Integer> transformer0 = NOPTransformer.nopTransformer();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        CollectionUtils.collect((Iterator<? extends Integer>) iterator0, (Transformer<? super Integer, ?>) transformer0, linkedList1);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DayOfWeek dayOfWeek0 = DayOfWeek.SATURDAY;
      EnumSet<DayOfWeek> enumSet0 = EnumSet.of(dayOfWeek0, dayOfWeek0, dayOfWeek0);
      FactoryTransformer<DayOfWeek, Object> factoryTransformer0 = new FactoryTransformer<DayOfWeek, Object>((Factory<?>) null);
      // Undeclared exception!
      try { 
        CollectionUtils.collect((Iterable<DayOfWeek>) enumSet0, (Transformer<? super DayOfWeek, ?>) factoryTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.FactoryTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      stack0.setSize(156);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      // Undeclared exception!
      CollectionUtils.collate((Iterable<? extends Integer>) stack0, (Iterable<? extends Integer>) stack0, (Comparator<? super Integer>) comparator0, false);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Stack<HijrahEra> stack0 = new Stack<HijrahEra>();
      // Undeclared exception!
      try { 
        CollectionUtils.collate((Iterable<?>) stack0, (Iterable<?>) stack0, (Comparator<? super Object>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // comparator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.checkIndexBounds((-1178));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -1178
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Collection<DayOfWeek> collection0 = CollectionUtils.emptyCollection();
      DayOfWeek dayOfWeek0 = DayOfWeek.FRIDAY;
      // Undeclared exception!
      try { 
        CollectionUtils.addIgnoreNull(collection0, dayOfWeek0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Collection<Object> collection0 = CollectionUtils.unmodifiableCollection((Collection<?>) stack0);
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        CollectionUtils.addAll(collection0, objectArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<Object>) linkedList0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // elements
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<Object>) arrayDeque0, (Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Collection<Object> collection0 = CollectionUtils.collect((Iterable<Object>) null, (Transformer<? super Object, ?>) null);
      // Undeclared exception!
      try { 
        CollectionUtils.addAll(collection0, (Enumeration<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // enumeration
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<Object>) null, (Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FormatStyle formatStyle0 = FormatStyle.FULL;
      EnumSet<FormatStyle> enumSet0 = EnumSet.of(formatStyle0);
      List<FormatStyle> list0 = CollectionUtils.collate((Iterable<? extends FormatStyle>) enumSet0, (Iterable<? extends FormatStyle>) enumSet0, false);
      // Undeclared exception!
      try { 
        CollectionUtils.removeCount((Collection<FormatStyle>) list0, (-2138), 1715);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The start index can't be less than 0.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.load(class0);
      Collection<Object> collection0 = CollectionUtils.union((Iterable<?>) serviceLoader0, (Iterable<?>) serviceLoader0);
      ChronoField chronoField0 = ChronoField.HOUR_OF_DAY;
      ChronoField chronoField1 = ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH;
      EnumSet<ChronoField> enumSet0 = EnumSet.of(chronoField0, chronoField1, chronoField0, chronoField0, chronoField0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Object> list0 = CollectionUtils.collate((Iterable<?>) collection0, (Iterable<?>) enumSet0, (Comparator<? super Object>) comparator0, false);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<DayOfWeek> class0 = DayOfWeek.class;
      ServiceLoader<DayOfWeek> serviceLoader0 = ServiceLoader.load(class0);
      Comparator<DayOfWeek> comparator0 = (Comparator<DayOfWeek>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<DayOfWeek> list0 = CollectionUtils.collate((Iterable<? extends DayOfWeek>) serviceLoader0, (Iterable<? extends DayOfWeek>) serviceLoader0, (Comparator<? super DayOfWeek>) comparator0, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = new Integer(173);
      stack0.add(integer0);
      boolean boolean0 = CollectionUtils.isEmpty(stack0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = CollectionUtils.isEmpty(linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Collection<Object> collection0 = CollectionUtils.collect((Iterable<Object>) null, (Transformer<? super Object, ?>) null);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Iterator<Object> iterator0 = treeSet0.descendingIterator();
      boolean boolean0 = CollectionUtils.addAll(collection0, (Iterator<?>) iterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Object> list0 = CollectionUtils.collate((Iterable<?>) serviceLoader0, (Iterable<?>) serviceLoader0, (Comparator<? super Object>) comparator0);
      boolean boolean0 = CollectionUtils.addAll((Collection<Object>) list0, (Iterable<?>) serviceLoader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Collection<Object> collection0 = CollectionUtils.disjunction((Iterable<?>) stack0, (Iterable<?>) stack0);
      boolean boolean0 = CollectionUtils.addAll(collection0, (Iterable<?>) collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      stack0.add((Integer) null);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FixedSizeList<Integer> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Integer>) stack0);
      Iterator<Integer> iterator0 = fixedSizeList0.iterator();
      ConstantTransformer<Integer, Integer> constantTransformer0 = new ConstantTransformer<Integer, Integer>((Integer) null);
      CollectionUtils.collect((Iterator<? extends Integer>) iterator0, (Transformer<? super Integer, ?>) constantTransformer0, linkedList0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Factory<Integer> factory0 = ConstantFactory.constantFactory((Integer) (-1));
      Transformer<Integer, Integer> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Integer>) factory0);
      LinkedList<Object> linkedList1 = CollectionUtils.collect((Iterator<? extends Integer>) null, (Transformer<? super Integer, ?>) transformer0, linkedList0);
      assertFalse(linkedList1.contains((-1)));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Class<IsoEra>[] classArray0 = (Class<IsoEra>[]) Array.newInstance(Class.class, 5);
      Transformer<Object, Integer> transformer0 = InvokerTransformer.invokerTransformer("Can extract singleton only when collection size == 1", (Class<?>[]) classArray0, (Object[]) classArray0);
      LinkedList<Integer> linkedList1 = CollectionUtils.collect((Iterable<? extends ThaiBuddhistEra>) null, (Transformer<? super ThaiBuddhistEra, ? extends Integer>) transformer0, linkedList0);
      assertSame(linkedList1, linkedList0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashSet<ThaiBuddhistEra> hashSet0 = new HashSet<ThaiBuddhistEra>();
      Transformer<ThaiBuddhistEra, Integer> transformer0 = ConstantTransformer.nullTransformer();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = CollectionUtils.collect((Iterable<? extends ThaiBuddhistEra>) hashSet0, (Transformer<? super ThaiBuddhistEra, ? extends Integer>) transformer0, linkedList0);
      assertEquals(0, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DayOfWeek dayOfWeek0 = DayOfWeek.SUNDAY;
      EnumSet<DayOfWeek> enumSet0 = EnumSet.of(dayOfWeek0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Collection<Object> collection0 = CollectionUtils.intersection((Iterable<?>) enumSet0, (Iterable<?>) enumSet0);
      // Undeclared exception!
      try { 
        CollectionUtils.selectRejected((Iterable<? extends DayOfWeek>) enumSet0, (Predicate<? super DayOfWeek>) predicate0, collection0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      LinkedList<Integer> linkedList0 = CollectionUtils.selectRejected((Iterable<? extends Integer>) vector0, (Predicate<? super Integer>) null, (LinkedList<Integer>) null);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Predicate<Integer> predicate0 = FalsePredicate.falsePredicate();
      Predicate<Integer> predicate1 = NotPredicate.notPredicate((Predicate<? super Integer>) predicate0);
      Integer integer0 = new Integer((-1));
      arrayList0.add(integer0);
      // Undeclared exception!
      try { 
        CollectionUtils.select((Iterable<? extends Integer>) arrayList0, (Predicate<? super Integer>) predicate1, (Collection<Integer>) arrayList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Predicate<Integer> predicate0 = FalsePredicate.falsePredicate();
      Integer integer0 = new Integer((-1));
      arrayList0.add(integer0);
      Collection<Integer> collection0 = CollectionUtils.select((Iterable<? extends Integer>) arrayList0, (Predicate<? super Integer>) predicate0, (Collection<Integer>) arrayList0);
      assertTrue(collection0.contains((-1)));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      Collection<Locale.Category> collection0 = CollectionUtils.select((Iterable<? extends Locale.Category>) null, (Predicate<? super Locale.Category>) predicate0, (Collection<Locale.Category>) linkedList0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Stack<DayOfWeek> stack0 = new Stack<DayOfWeek>();
      DayOfWeek dayOfWeek0 = DayOfWeek.FRIDAY;
      Comparator<DayOfWeek> comparator0 = (Comparator<DayOfWeek>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<DayOfWeek> comparatorPredicate0 = new ComparatorPredicate<DayOfWeek>(dayOfWeek0, comparator0, comparatorPredicate_Criterion0);
      NotPredicate<DayOfWeek> notPredicate0 = new NotPredicate<DayOfWeek>(comparatorPredicate0);
      LinkedList<DayOfWeek> linkedList0 = CollectionUtils.select((Iterable<? extends DayOfWeek>) stack0, (Predicate<? super DayOfWeek>) notPredicate0, (LinkedList<DayOfWeek>) null);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PriorityQueue<HijrahEra> priorityQueue0 = new PriorityQueue<HijrahEra>();
      Collection<HijrahEra> collection0 = CollectionUtils.select((Iterable<? extends HijrahEra>) priorityQueue0, (Predicate<? super HijrahEra>) null, (Collection<HijrahEra>) priorityQueue0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = new Integer(47);
      stack0.push(integer0);
      stack0.push(integer0);
      Map<Integer, Integer> map0 = CollectionUtils.getCardinalityMap((Iterable<? extends Integer>) stack0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Map<Integer, Integer> map0 = CollectionUtils.getCardinalityMap((Iterable<? extends Integer>) stack0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.get((Iterable<FormatStyle>) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Collection<LinkedList<ChronoLocalDate>> collection0 = CollectionUtils.emptyCollection();
      // Undeclared exception!
      try { 
        CollectionUtils.extractSingleton(collection0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can extract singleton only when collection size == 1
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      MinguoEra minguoEra0 = MinguoEra.BEFORE_ROC;
      EnumSet<MinguoEra> enumSet0 = EnumSet.of(minguoEra0, minguoEra0, minguoEra0, minguoEra0);
      Collection<Object> collection0 = CollectionUtils.union((Iterable<?>) enumSet0, (Iterable<?>) priorityQueue0);
      Object object0 = CollectionUtils.extractSingleton(collection0);
      assertEquals(MinguoEra.BEFORE_ROC, object0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = Integer.valueOf(3650);
      stack0.add(integer0);
      DefaultEquator<Integer> defaultEquator0 = DefaultEquator.defaultEquator();
      Collection<Integer> collection0 = CollectionUtils.removeAll((Iterable<Integer>) stack0, (Iterable<? extends Integer>) linkedList0, (Equator<? super Integer>) defaultEquator0);
      assertTrue(collection0.contains(3650));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      stack0.add((Integer) null);
      DefaultEquator<Integer> defaultEquator0 = DefaultEquator.defaultEquator();
      Collection<Integer> collection0 = CollectionUtils.removeAll((Iterable<Integer>) stack0, (Iterable<? extends Integer>) stack0, (Equator<? super Integer>) defaultEquator0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Collection<Integer> collection0 = CollectionUtils.removeCount((Collection<Integer>) treeSet0, 0, 0);
      assertFalse(collection0.contains(0));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Collection<Transformer<DayOfWeek, Object>> collection0 = CollectionUtils.emptyCollection();
      // Undeclared exception!
      try { 
        CollectionUtils.removeCount(collection0, 5, (-4));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The count can't be less than 0.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Collection<DayOfWeek> collection0 = CollectionUtils.emptyCollection();
      Collection<Object> collection1 = CollectionUtils.subtract((Iterable<?>) collection0, (Iterable<?>) collection0);
      // Undeclared exception!
      try { 
        CollectionUtils.removeRange(collection1, 2416, (-1150));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end index can't be less than the start index.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      // Undeclared exception!
      try { 
        CollectionUtils.removeRange((Collection<Integer>) hashSet0, (-2892), (-2892));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The start index can't be less than 0.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      stack0.add((Integer) null);
      Stack<Integer> stack1 = new Stack<Integer>();
      DefaultEquator<Integer> defaultEquator0 = DefaultEquator.defaultEquator();
      Collection<Integer> collection0 = CollectionUtils.retainAll((Iterable<Integer>) stack0, (Iterable<? extends Integer>) stack1, (Equator<? super Integer>) defaultEquator0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      CollectionUtils.permutations((Collection<Integer>) stack0);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = new Integer((-436));
      stack0.push(integer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      List<Object> list0 = CollectionUtils.collate((Iterable<?>) stack0, (Iterable<?>) stack0, (Comparator<? super Object>) comparator0, false);
      CollectionUtils.addAll((Collection<Object>) list0, (Iterable<?>) stack0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      stack0.add((Integer) null);
      // Undeclared exception!
      try { 
        CollectionUtils.collate((Iterable<? extends Integer>) stack0, (Iterable<? extends Integer>) stack0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<DayOfWeek> class0 = DayOfWeek.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<DayOfWeek> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      DefaultEquator<DayOfWeek> defaultEquator0 = DefaultEquator.defaultEquator();
      Collection<DayOfWeek> collection0 = CollectionUtils.retainAll((Iterable<DayOfWeek>) serviceLoader0, (Iterable<? extends DayOfWeek>) serviceLoader0, (Equator<? super DayOfWeek>) defaultEquator0);
      Comparator<DayOfWeek> comparator0 = (Comparator<DayOfWeek>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<DayOfWeek> list0 = CollectionUtils.collate((Iterable<? extends DayOfWeek>) collection0, (Iterable<? extends DayOfWeek>) serviceLoader0, (Comparator<? super DayOfWeek>) comparator0, true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CircularFifoQueue<Object> circularFifoQueue0 = new CircularFifoQueue<Object>();
      int int0 = CollectionUtils.maxSize(circularFifoQueue0);
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ArrayDeque<FormatStyle> arrayDeque0 = new ArrayDeque<FormatStyle>();
      int int0 = CollectionUtils.maxSize(arrayDeque0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CircularFifoQueue<HijrahEra> circularFifoQueue0 = new CircularFifoQueue<HijrahEra>();
      boolean boolean0 = CollectionUtils.isFull(circularFifoQueue0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      boolean boolean0 = CollectionUtils.isFull(hashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      CollectionUtils.reverseArray(objectArray0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      CollectionUtils.reverseArray(objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DayOfWeek dayOfWeek0 = DayOfWeek.SATURDAY;
      EnumSet<DayOfWeek> enumSet0 = EnumSet.of(dayOfWeek0);
      boolean boolean0 = CollectionUtils.isNotEmpty(enumSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CircularFifoQueue<HijrahEra> circularFifoQueue0 = new CircularFifoQueue<HijrahEra>();
      boolean boolean0 = CollectionUtils.isNotEmpty(circularFifoQueue0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = CollectionUtils.isEmpty((Collection<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.load(class0);
      boolean boolean0 = CollectionUtils.sizeIsEmpty(serviceLoader0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DayOfWeek dayOfWeek0 = DayOfWeek.SUNDAY;
      EnumSet<DayOfWeek> enumSet0 = EnumSet.of(dayOfWeek0);
      boolean boolean0 = CollectionUtils.sizeIsEmpty(enumSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Transformer<Month, Month> transformer0 = InvokerTransformer.invokerTransformer("colb4l2");
      // Undeclared exception!
      try { 
        CollectionUtils.sizeIsEmpty(transformer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: org.apache.commons.collections4.functors.InvokerTransformer
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = CollectionUtils.sizeIsEmpty((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      boolean boolean0 = CollectionUtils.sizeIsEmpty(arrayDeque0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BE;
      // Undeclared exception!
      try { 
        CollectionUtils.size(thaiBuddhistEra0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.time.chrono.ThaiBuddhistEra
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = CollectionUtils.size((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ChronoField chronoField0 = ChronoField.ALIGNED_WEEK_OF_MONTH;
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) chronoField0, 1501);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.time.temporal.ChronoField
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CircularFifoQueue<HijrahEra> circularFifoQueue0 = new CircularFifoQueue<HijrahEra>();
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) circularFifoQueue0, 31);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 31
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        CollectionUtils.get(object0, (-1086));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -1086
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ArrayList<Stack<DayOfWeek>> arrayList0 = new ArrayList<Stack<DayOfWeek>>();
      Iterator<Stack<DayOfWeek>> iterator0 = arrayList0.iterator();
      // Undeclared exception!
      try { 
        CollectionUtils.get(iterator0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -1
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Collection<Object> collection0 = CollectionUtils.collect((Iterator<Integer>) null, (Transformer<? super Integer, ?>) null);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      HijrahEra hijrahEra0 = HijrahEra.AH;
      ConstantTransformer<Object, HijrahEra> constantTransformer0 = new ConstantTransformer<Object, HijrahEra>(hijrahEra0);
      Collection<HijrahEra> collection0 = CollectionUtils.collect((Iterable<Object>) serviceLoader0, (Transformer<? super Object, ? extends HijrahEra>) constantTransformer0);
      assertFalse(collection0.contains(hijrahEra0));
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DayOfWeek dayOfWeek0 = DayOfWeek.SUNDAY;
      EnumSet<DayOfWeek> enumSet0 = EnumSet.of(dayOfWeek0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) defaultEquator0, (Equator<Object>) defaultEquator0);
      Collection<Object> collection0 = CollectionUtils.selectRejected((Iterable<?>) enumSet0, (Predicate<? super Object>) predicate0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Collection<Object> collection0 = CollectionUtils.selectRejected((Iterable<?>) linkedList0, (Predicate<? super Object>) null);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0);
      Collection<Object> collection0 = CollectionUtils.selectRejected((Iterable<?>) serviceLoader0, (Predicate<? super Object>) uniquePredicate0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Collection<Object> collection0 = CollectionUtils.selectRejected((Iterable<?>) null, (Predicate<? super Object>) predicate0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<ChronoField> class0 = ChronoField.class;
      EnumSet<ChronoField> enumSet0 = EnumSet.allOf(class0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(uniquePredicate0);
      LinkedList<ChronoField> linkedList0 = new LinkedList<ChronoField>();
      CollectionUtils.select((Iterable<? extends ChronoField>) enumSet0, (Predicate<? super ChronoField>) nullIsExceptionPredicate0, linkedList0, linkedList0);
      assertEquals(30, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      LinkedList<Integer> linkedList0 = CollectionUtils.select((Iterable<? extends Integer>) stack0, (Predicate<? super Integer>) null, (LinkedList<Integer>) null, (LinkedList<Integer>) null);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Predicate<ThaiBuddhistEra>[] predicateArray0 = (Predicate<ThaiBuddhistEra>[]) Array.newInstance(Predicate.class, 0);
      Predicate<ThaiBuddhistEra> predicate0 = AnyPredicate.anyPredicate((Predicate<? super ThaiBuddhistEra>[]) predicateArray0);
      LinkedList<ThaiBuddhistEra> linkedList0 = CollectionUtils.select((Iterable<? extends ThaiBuddhistEra>) null, (Predicate<? super ThaiBuddhistEra>) predicate0, (LinkedList<ThaiBuddhistEra>) null, (LinkedList<ThaiBuddhistEra>) null);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      CircularFifoQueue<HijrahEra> circularFifoQueue0 = new CircularFifoQueue<HijrahEra>();
      HijrahEra hijrahEra0 = HijrahEra.AH;
      circularFifoQueue0.add(hijrahEra0);
      Collection<Object> collection0 = CollectionUtils.select((Iterable<?>) circularFifoQueue0, (Predicate<? super Object>) uniquePredicate0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Collection<Object> collection0 = CollectionUtils.select((Iterable<?>) serviceLoader0, (Predicate<? super Object>) predicate0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Collection<DayOfWeek> collection0 = CollectionUtils.select((Iterable<? extends DayOfWeek>) null, (Predicate<? super DayOfWeek>) predicate0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = new Integer(586);
      stack0.add(integer0);
      Predicate<Integer> predicate0 = NullPredicate.nullPredicate();
      boolean boolean0 = CollectionUtils.matchesAll((Iterable<Integer>) stack0, (Predicate<? super Integer>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Predicate<Integer> predicate0 = NullPredicate.nullPredicate();
      boolean boolean0 = CollectionUtils.matchesAll((Iterable<Integer>) stack0, (Predicate<? super Integer>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      boolean boolean0 = CollectionUtils.matchesAll((Iterable<Integer>) hashSet0, (Predicate<? super Integer>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      CircularFifoQueue<HijrahEra> circularFifoQueue0 = new CircularFifoQueue<HijrahEra>();
      HijrahEra hijrahEra0 = HijrahEra.AH;
      circularFifoQueue0.add(hijrahEra0);
      boolean boolean0 = CollectionUtils.exists((Iterable<HijrahEra>) circularFifoQueue0, (Predicate<? super HijrahEra>) uniquePredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      CircularFifoQueue<HijrahEra> circularFifoQueue0 = new CircularFifoQueue<HijrahEra>();
      boolean boolean0 = CollectionUtils.exists((Iterable<HijrahEra>) circularFifoQueue0, (Predicate<? super HijrahEra>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      TreeSet<MinguoEra> treeSet0 = new TreeSet<MinguoEra>();
      boolean boolean0 = CollectionUtils.exists((Iterable<MinguoEra>) treeSet0, (Predicate<? super MinguoEra>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int int0 = CollectionUtils.countMatches((Iterable<DayOfWeek>) null, (Predicate<? super DayOfWeek>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      arrayList0.add((Integer) (-1));
      Transformer<Integer, Integer> transformer0 = NOPTransformer.nopTransformer();
      CollectionUtils.transform((Collection<Integer>) arrayList0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Transformer<Integer, Integer> transformer0 = NOPTransformer.nopTransformer();
      CollectionUtils.transform((Collection<Integer>) treeSet0, (Transformer<? super Integer, ? extends Integer>) transformer0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DayOfWeek dayOfWeek0 = DayOfWeek.FRIDAY;
      EnumSet<DayOfWeek> enumSet0 = EnumSet.of(dayOfWeek0, dayOfWeek0);
      CollectionUtils.transform((Collection<DayOfWeek>) enumSet0, (Transformer<? super DayOfWeek, ? extends DayOfWeek>) null);
      assertTrue(enumSet0.contains(dayOfWeek0));
      assertEquals(1, enumSet0.size());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HijrahEra hijrahEra0 = HijrahEra.AH;
      Transformer<HijrahEra, HijrahEra> transformer0 = ConstantTransformer.constantTransformer(hijrahEra0);
      CollectionUtils.transform((Collection<HijrahEra>) null, (Transformer<? super HijrahEra, ? extends HijrahEra>) transformer0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      boolean boolean0 = CollectionUtils.filterInverse((Iterable<Object>) null, (Predicate<? super Object>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Integer integer0 = new Integer((-436));
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) integer0);
      TreeSet<ChronoField> treeSet0 = new TreeSet<ChronoField>();
      ChronoField chronoField0 = ChronoField.MILLI_OF_DAY;
      treeSet0.add(chronoField0);
      boolean boolean0 = CollectionUtils.filter((Iterable<ChronoField>) treeSet0, (Predicate<? super ChronoField>) predicate0);
      assertFalse(treeSet0.contains(chronoField0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ArrayList<ChronoField> arrayList0 = new ArrayList<ChronoField>();
      boolean boolean0 = CollectionUtils.filter((Iterable<ChronoField>) arrayList0, (Predicate<? super ChronoField>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<ChronoField> class0 = ChronoField.class;
      EnumSet<ChronoField> enumSet0 = EnumSet.allOf(class0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      boolean boolean0 = CollectionUtils.filter((Iterable<ChronoField>) enumSet0, (Predicate<? super ChronoField>) uniquePredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      NullIsFalsePredicate<ChronoField> nullIsFalsePredicate0 = new NullIsFalsePredicate<ChronoField>((Predicate<? super ChronoField>) null);
      boolean boolean0 = CollectionUtils.filter((Iterable<ChronoField>) null, (Predicate<? super ChronoField>) nullIsFalsePredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      Iterator<Object> iterator0 = serviceLoader0.iterator();
      CircularFifoQueue<Closure<Object>> circularFifoQueue0 = new CircularFifoQueue<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) circularFifoQueue0);
      Object object0 = CollectionUtils.forAllButLastDo(iterator0, closure0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.range(locale_FilteringMode0, locale_FilteringMode0);
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      CollectionUtils.forAllButLastDo(iterator0, (TransformerClosure<Locale.FilteringMode>) null);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Transformer<Collection, LinkedList<Object>> transformer0 = CollectionUtils.forAllButLastDo((Iterable<Transformer<Collection, LinkedList<Object>>>) null, (WhileClosure<Object>) null);
      assertNull(transformer0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Closure<DayOfWeek>[] closureArray0 = (Closure<DayOfWeek>[]) Array.newInstance(Closure.class, 0);
      ChainedClosure<DayOfWeek> chainedClosure0 = new ChainedClosure<DayOfWeek>(closureArray0);
      ChainedClosure<DayOfWeek> chainedClosure1 = CollectionUtils.forAllDo((Iterable<DayOfWeek>) null, chainedClosure0);
      assertSame(chainedClosure1, chainedClosure0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      LinkedList<Comparable<LinkedList<Integer>>> linkedList0 = new LinkedList<Comparable<LinkedList<Integer>>>();
      Closure<Object> closure0 = CollectionUtils.forAllDo((Iterable<Comparable<LinkedList<Integer>>>) linkedList0, (Closure<Object>) null);
      assertNull(closure0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      Object object0 = CollectionUtils.find((Iterable<Object>) arrayDeque0, (Predicate<? super Object>) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      DefaultEquator<FormatStyle> defaultEquator0 = DefaultEquator.defaultEquator();
      CollectionUtils.hashCode((Collection<? extends FormatStyle>) null, (Equator<? super FormatStyle>) defaultEquator0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      DayOfWeek dayOfWeek0 = DayOfWeek.SATURDAY;
      EnumSet<DayOfWeek> enumSet0 = EnumSet.of(dayOfWeek0);
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = new Integer(44);
      stack0.add(integer0);
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<?>) stack0, (Collection<?>) enumSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      DayOfWeek dayOfWeek0 = DayOfWeek.FRIDAY;
      EnumSet<DayOfWeek> enumSet0 = EnumSet.of(dayOfWeek0);
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<?>) enumSet0, (Collection<?>) enumSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      Class<ChronoField> class0 = ChronoField.class;
      EnumSet<ChronoField> enumSet0 = EnumSet.allOf(class0);
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<?>) enumSet0, (Collection<?>) arrayDeque0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      Class<ChronoField> class0 = ChronoField.class;
      EnumSet<ChronoField> enumSet0 = EnumSet.allOf(class0);
      boolean boolean0 = CollectionUtils.isProperSubCollection(arrayDeque0, enumSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = CollectionUtils.isProperSubCollection(linkedList0, linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      arrayDeque0.add(stack0);
      boolean boolean0 = CollectionUtils.isSubCollection(arrayDeque0, stack0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      DayOfWeek dayOfWeek0 = DayOfWeek.SATURDAY;
      EnumSet<DayOfWeek> enumSet0 = EnumSet.of(dayOfWeek0);
      Collection<Object> collection0 = CollectionUtils.union((Iterable<?>) enumSet0, (Iterable<?>) enumSet0);
      boolean boolean0 = CollectionUtils.isSubCollection(enumSet0, collection0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      DayOfWeek dayOfWeek0 = DayOfWeek.FRIDAY;
      EnumSet<DayOfWeek> enumSet0 = EnumSet.of(dayOfWeek0);
      List<DayOfWeek> list0 = CollectionUtils.collate((Iterable<? extends DayOfWeek>) enumSet0, (Iterable<? extends DayOfWeek>) enumSet0);
      CollectionUtils.union((Iterable<?>) list0, (Iterable<?>) list0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = new Integer(1284);
      Stack<Integer> stack1 = new Stack<Integer>();
      stack1.add(integer0);
      stack0.push((Integer) null);
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) stack0, (Collection<?>) stack1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      IsoEra isoEra0 = IsoEra.BCE;
      EnumSet<IsoEra> enumSet0 = EnumSet.of(isoEra0, isoEra0);
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) enumSet0, (Collection<?>) enumSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = new Integer(2808);
      stack0.add(integer0);
      Stack<Integer> stack1 = new Stack<Integer>();
      stack1.add(integer0);
      stack1.push(integer0);
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) stack0, (Collection<?>) stack1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<ChronoField> class0 = ChronoField.class;
      EnumSet<ChronoField> enumSet0 = EnumSet.allOf(class0);
      Integer integer0 = new Integer(31);
      Stack<Integer> stack0 = new Stack<Integer>();
      stack0.add(integer0);
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) stack0, (Collection<?>) enumSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      CircularFifoQueue<HijrahEra> circularFifoQueue0 = new CircularFifoQueue<HijrahEra>();
      HijrahEra hijrahEra0 = HijrahEra.AH;
      circularFifoQueue0.add(hijrahEra0);
      LinkedList<Integer>[] linkedListArray0 = (LinkedList<Integer>[]) Array.newInstance(LinkedList.class, 1);
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) circularFifoQueue0, linkedListArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      ChronoUnit[] chronoUnitArray0 = new ChronoUnit[1];
      stack0.add((Integer) null);
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) stack0, chronoUnitArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      stack0.add((Integer) null);
      Object[] objectArray0 = new Object[3];
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) stack0, objectArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ChronoUnit[] chronoUnitArray0 = new ChronoUnit[4];
      Integer integer0 = new Integer(63);
      Stack<Integer> stack0 = new Stack<Integer>();
      stack0.add(integer0);
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) stack0, chronoUnitArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      DayOfWeek dayOfWeek0 = DayOfWeek.SUNDAY;
      EnumSet<DayOfWeek> enumSet0 = EnumSet.of(dayOfWeek0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object[] objectArray0 = new Object[10];
      objectArray0[0] = (Object) enumSet0;
      CollectionUtils.addAll((Collection<Object>) linkedList0, objectArray0);
      boolean boolean0 = CollectionUtils.containsAll(enumSet0, linkedList0);
      assertEquals(10, linkedList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<ChronoField> class0 = ChronoField.class;
      EnumSet<ChronoField> enumSet0 = EnumSet.allOf(class0);
      boolean boolean0 = CollectionUtils.containsAll(enumSet0, enumSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      boolean boolean0 = CollectionUtils.containsAll(priorityQueue0, priorityQueue0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ChronoUnit[] chronoUnitArray0 = new ChronoUnit[4];
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      CollectionUtils.addAll((Collection<Object>) linkedList0, (Object[]) chronoUnitArray0);
      boolean boolean0 = CollectionUtils.containsAll(linkedList0, linkedList0);
      assertEquals(4, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<ChronoField> class0 = ChronoField.class;
      EnumSet<ChronoField> enumSet0 = EnumSet.allOf(class0);
      DefaultEquator<ChronoField> defaultEquator0 = DefaultEquator.defaultEquator();
      ChronoField chronoField0 = ChronoField.EPOCH_DAY;
      Predicate<ChronoField> predicate0 = EqualPredicate.equalPredicate(chronoField0, (Equator<ChronoField>) defaultEquator0);
      Collection<ChronoField> collection0 = CollectionUtils.subtract((Iterable<? extends ChronoField>) enumSet0, (Iterable<? extends ChronoField>) enumSet0, predicate0);
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<? extends ChronoField>) enumSet0, (Collection<? extends ChronoField>) collection0, (Equator<? super ChronoField>) defaultEquator0);
      assertFalse(boolean0);
      assertFalse(collection0.contains(chronoField0));
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Collection<Object> collection0 = CollectionUtils.emptyIfNull((Collection<Object>) null);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Stack<DayOfWeek> stack0 = new Stack<DayOfWeek>();
      Collection<DayOfWeek> collection0 = CollectionUtils.emptyIfNull((Collection<DayOfWeek>) stack0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      Class<ChronoField> class0 = ChronoField.class;
      EnumSet<ChronoField> enumSet0 = EnumSet.allOf(class0);
      Collection<Object> collection0 = CollectionUtils.disjunction((Iterable<?>) enumSet0, (Iterable<?>) arrayDeque0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      DayOfWeek dayOfWeek0 = DayOfWeek.SUNDAY;
      EnumSet<DayOfWeek> enumSet0 = EnumSet.of(dayOfWeek0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Collection<DayOfWeek> collection0 = CollectionUtils.retainAll((Iterable<DayOfWeek>) enumSet0, (Iterable<? extends DayOfWeek>) enumSet0, (Equator<? super DayOfWeek>) defaultEquator0);
      assertTrue(collection0.contains(dayOfWeek0));
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Collection<Integer> collection0 = CollectionUtils.emptyCollection();
      // Undeclared exception!
      try { 
        CollectionUtils.collate((Iterable<? extends Integer>) collection0, (Iterable<? extends Integer>) collection0, (Comparator<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // comparator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.collate((Iterable<? extends Integer>) null, (Iterable<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterableA
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      DayOfWeek dayOfWeek0 = DayOfWeek.WEDNESDAY;
      // Undeclared exception!
      try { 
        CollectionUtils.cardinality((Object) dayOfWeek0, (Iterable<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      HashMap<Comparable<FormatStyle>, Transformer<Integer, LinkedList<Integer>>> hashMap0 = new HashMap<Comparable<FormatStyle>, Transformer<Integer, LinkedList<Integer>>>();
      // Undeclared exception!
      try { 
        CollectionUtils.get((Map<Comparable<FormatStyle>, Transformer<Integer, LinkedList<Integer>>>) hashMap0, 5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 5
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Collection<DayOfWeek> collection0 = CollectionUtils.emptyCollection();
      Collection<DayOfWeek> collection1 = CollectionUtils.removeAll(collection0, (Collection<?>) collection0);
      assertTrue(collection1.equals((Object)collection0));
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.unmodifiableCollection((Collection<? extends Stack<DayOfWeek>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      // Undeclared exception!
      try { 
        CollectionUtils.transformingCollection((Collection<Integer>) stack0, (Transformer<? super Integer, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      CircularFifoQueue<Locale.Category> circularFifoQueue0 = new CircularFifoQueue<Locale.Category>();
      Collection<Locale.Category> collection0 = CollectionUtils.synchronizedCollection((Collection<Locale.Category>) circularFifoQueue0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Class<ChronoField> class0 = ChronoField.class;
      EnumSet<ChronoField> enumSet0 = EnumSet.allOf(class0);
      Collection<Object> collection0 = CollectionUtils.disjunction((Iterable<?>) enumSet0, (Iterable<?>) enumSet0);
      assertNotNull(collection0);
  }
}
