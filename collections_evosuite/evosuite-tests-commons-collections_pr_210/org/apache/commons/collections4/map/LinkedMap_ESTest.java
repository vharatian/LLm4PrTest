/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 13:49:12 GMT 2025
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectInputStream;
import java.time.format.ResolverStyle;
import java.time.temporal.ChronoUnit;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.function.Function;
import java.util.function.Predicate;
import org.apache.commons.collections4.map.AbstractHashedMap;
import org.apache.commons.collections4.map.LinkedMap;
import org.apache.commons.io.IOCase;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class LinkedMap_ESTest extends LinkedMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedMap<LinkedMap<Object, Object>, Object> linkedMap0 = new LinkedMap<LinkedMap<Object, Object>, Object>(0, 0.75F);
      LinkedMap.LinkedMapList<LinkedMap<Object, Object>> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<LinkedMap<Object, Object>>(linkedMap0);
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.subList(1337, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1337) > toIndex(0)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>((LinkedMap<Object, ?>) null);
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.toArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LinkedMap$LinkedMapList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      linkedMap0.size = 5;
      Object object0 = linkedMap0.remove(1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedMap<Object, IOCase> linkedMap0 = new LinkedMap<Object, IOCase>();
      LinkedMap<IOCase, Object> linkedMap1 = new LinkedMap<IOCase, Object>(1147, 0.75F);
      IOCase iOCase0 = IOCase.INSENSITIVE;
      linkedMap1.put(iOCase0, linkedMap0);
      LinkedMap<IOCase, Object> linkedMap2 = linkedMap1.clone();
      assertNotSame(linkedMap1, linkedMap2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<IOCase, Object> linkedMap1 = new LinkedMap<IOCase, Object>(974, 974);
      Function<Object, Object> function0 = Function.identity();
      linkedMap0.computeIfAbsent(linkedMap1, function0);
      List<Object> list0 = linkedMap0.asList();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      linkedMap0.data = null;
      // Undeclared exception!
      try { 
        linkedMap0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = null;
      try {
        linkedMap0 = new LinkedMap<Object, Object>((-1838));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Initial capacity must be a non negative number
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>(linkedMap0);
      assertEquals(0, linkedMap1.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      // Undeclared exception!
      try { 
        linkedMap0.get(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index 0 is invalid for size 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSet0.add(linkedMap0);
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      Object object0 = AbstractHashedMap.NULL;
      IOCase iOCase0 = IOCase.SENSITIVE;
      linkedMap0.put(object0, iOCase0);
      int int0 = linkedMap0.indexOf(linkedMap0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<LinkedMap<Object, Object>, ResolverStyle> linkedMap1 = new LinkedMap<LinkedMap<Object, Object>, ResolverStyle>();
      ResolverStyle resolverStyle0 = ResolverStyle.SMART;
      linkedMap1.put(linkedMap0, resolverStyle0);
      int int0 = linkedMap1.indexOf(linkedMap0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      LinkedHashSet<IOCase> linkedHashSet0 = new LinkedHashSet<IOCase>();
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.retainAll(linkedHashSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LinkedMap$LinkedMapList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.removeAll(linkedMap_LinkedMapList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LinkedMap$LinkedMapList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      ListIterator<Object> listIterator0 = linkedMap_LinkedMapList0.listIterator();
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(linkedMap_LinkedMapList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.remove((-394));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LinkedMap$LinkedMapList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      int int0 = linkedMap_LinkedMapList0.indexOf((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedMap<LinkedMap<Object, Object>, Object> linkedMap0 = new LinkedMap<LinkedMap<Object, Object>, Object>();
      LinkedMap.LinkedMapList<LinkedMap<Object, Object>> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<LinkedMap<Object, Object>>(linkedMap0);
      LinkedMap.LinkedMapList<LinkedMap<Object, Object>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<Object, Object>>(linkedMap0);
      int int0 = linkedMap_LinkedMapList1.lastIndexOf(linkedMap_LinkedMapList0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedMap<LinkedMap<Object, Object>, Object> linkedMap0 = new LinkedMap<LinkedMap<Object, Object>, Object>();
      LinkedMap.LinkedMapList<LinkedMap<Object, Object>> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<LinkedMap<Object, Object>>(linkedMap0);
      boolean boolean0 = linkedMap_LinkedMapList0.contains(linkedMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      ObjectInputStream[] objectInputStreamArray0 = new ObjectInputStream[0];
      ObjectInputStream[] objectInputStreamArray1 = linkedMap_LinkedMapList0.toArray(objectInputStreamArray0);
      assertSame(objectInputStreamArray0, objectInputStreamArray1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.removeIf((Predicate<? super Object>) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LinkedMap$LinkedMapList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LinkedMap$LinkedMapList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>((LinkedMap<Object, ?>) null);
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.get(14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LinkedMap$LinkedMapList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.remove((Object) linkedMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LinkedMap$LinkedMapList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      // Undeclared exception!
      try { 
        linkedMap0.remove(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index 1 is invalid for size 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedMap<IOCase, Object> linkedMap0 = new LinkedMap<IOCase, Object>(0);
      List<IOCase> list0 = linkedMap0.asList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedMap<LinkedMap<Object, Object>, ChronoUnit> linkedMap0 = null;
      try {
        linkedMap0 = new LinkedMap<LinkedMap<Object, Object>, ChronoUnit>(1, (-2752.7F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      // Undeclared exception!
      try { 
        linkedMap0.getValue(9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index 9 is invalid for size 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedMap<Object, IOCase> linkedMap0 = null;
      try {
        linkedMap0 = new LinkedMap<Object, IOCase>((Map<?, ? extends IOCase>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      assertTrue(linkedMap1.equals((Object)linkedMap0));
  }
}
