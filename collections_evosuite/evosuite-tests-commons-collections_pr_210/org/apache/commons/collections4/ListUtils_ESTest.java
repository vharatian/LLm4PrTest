/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 13:44:42 GMT 2025
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.ListUtils;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ListUtils_ESTest extends ListUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      linkedList0.add((Character) null);
      Character character0 = Character.valueOf('}');
      linkedList0.add(character0);
      List<List<Character>> list0 = ListUtils.partition((List<Character>) linkedList0, 1);
      List<Object> list1 = ListUtils.intersection((List<?>) linkedList0, (List<?>) list0);
      assertEquals(2, list0.size());
      assertTrue(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      // Undeclared exception!
      try { 
        ListUtils.partition((List<Character>) linkedList0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2647);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 2647, 2647);
      String string0 = ListUtils.longestCommonSubsequence((CharSequence) charBuffer0, (CharSequence) charBuffer1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      Character character0 = new Character('g');
      linkedList0.add(character0);
      linkedList0.add(character0);
      int int0 = ListUtils.hashCodeForList(linkedList0);
      assertEquals(993, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Character character0 = new Character('`');
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      linkedList0.add(character0);
      List<Character> list0 = ListUtils.sum((List<? extends Character>) linkedList0, (List<? extends Character>) linkedList0);
      linkedList0.clear();
      boolean boolean0 = ListUtils.isEqualList(list0, linkedList0);
      assertEquals(1, list0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.add((Object) linkedList0);
      List<Object> list0 = ListUtils.sum((List<?>) linkedList0, (List<?>) linkedList1);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      List<Character> list0 = ListUtils.defaultIfNull((List<Character>) null, (List<Character>) linkedList0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Character character0 = new Character('`');
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      ConstantTransformer<Object, Character> constantTransformer0 = new ConstantTransformer<Object, Character>(character0);
      List<Character> list0 = ListUtils.transformedList((List<Character>) linkedList0, (Transformer<? super Character, ? extends Character>) constantTransformer0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      List<Object> list0 = ListUtils.predicatedList((List<Object>) linkedList0, predicate0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      List<Predicate<Object>> list0 = ListUtils.union((List<? extends Predicate<Object>>) linkedList0, (List<? extends Predicate<Object>>) linkedList0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      linkedList0.add(instanceofPredicate0);
      List<Predicate<Object>> list0 = ListUtils.union((List<? extends Predicate<Object>>) linkedList0, (List<? extends Predicate<Object>>) linkedList0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      linkedList0.add((Character) null);
      LinkedList<InstanceofPredicate> linkedList1 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList1);
      List<Object> list0 = ListUtils.select((Collection<?>) linkedList0, (Predicate<? super Object>) predicate0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      List<Boolean> list0 = ListUtils.longestCommonSubsequence((List<Boolean>) linkedList0, (List<Boolean>) linkedList0, (Equator<? super Boolean>) defaultEquator0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Character character0 = new Character('`');
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      linkedList0.add(character0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null);
      List<Object> list0 = ListUtils.selectRejected((Collection<?>) linkedList0, (Predicate<? super Object>) predicate0);
      List<Object> list1 = ListUtils.longestCommonSubsequence(list0, list0);
      assertNotSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Character character0 = new Character('`');
      Character character1 = Character.valueOf('T');
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      linkedList0.add(character1);
      Character character2 = Character.valueOf('`');
      linkedList0.add(character2);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) character0);
      AndPredicate<Character> andPredicate0 = new AndPredicate<Character>(predicate0, predicate0);
      int int0 = ListUtils.indexOf((List<Character>) linkedList0, (Predicate<Character>) andPredicate0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      List<Boolean> list0 = ListUtils.sum((List<? extends Boolean>) linkedList0, (List<? extends Boolean>) linkedList0);
      List<Boolean> list1 = ListUtils.emptyIfNull(list0);
      assertEquals(0, list1.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Character character0 = new Character('N');
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      linkedList0.add(character0);
      List<Character> list0 = ListUtils.sum((List<? extends Character>) linkedList0, (List<? extends Character>) linkedList0);
      List<Character> list1 = ListUtils.emptyIfNull(list0);
      assertEquals(1, list1.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      List<Character> list0 = ListUtils.subtract((List<Character>) linkedList0, (List<? extends Character>) linkedList0);
      List<Character> list1 = ListUtils.defaultIfNull(list0, (List<Character>) null);
      assertSame(list0, list1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      Character character0 = new Character('g');
      linkedList0.add(character0);
      List<Character> list0 = ListUtils.sum((List<? extends Character>) linkedList0, (List<? extends Character>) linkedList0);
      List<Character> list1 = ListUtils.defaultIfNull(list0, (List<Character>) linkedList0);
      assertEquals(1, list1.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtils.subtract((List<Character>) null, (List<? extends Character>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.AbstractMapBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      linkedList0.add((Character) null);
      Predicate<Character> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        ListUtils.selectRejected((Collection<? extends Character>) linkedList0, (Predicate<? super Character>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      // Undeclared exception!
      try { 
        ListUtils.selectRejected((Collection<?>) null, (Predicate<? super Object>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      linkedList0.add((Object) orPredicate0);
      // Undeclared exception!
      try { 
        ListUtils.select((Collection<?>) linkedList0, (Predicate<? super Object>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null, defaultEquator0);
      // Undeclared exception!
      try { 
        ListUtils.select((Collection<?>) null, (Predicate<? super Object>) equalPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtils.retainAll((Collection<Character>) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtils.removeAll((Collection<Predicate<Predicate>>) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Character character0 = new Character('d');
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      linkedList0.add(character0);
      Predicate<Character> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        ListUtils.predicatedList((List<Character>) linkedList0, predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtils.partition((List<InstanceofPredicate>) null, (-2223));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // list
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      linkedList0.add((Character) null);
      Factory<Character> factory0 = ExceptionFactory.exceptionFactory();
      List<Character> list0 = ListUtils.lazyList((List<Character>) linkedList0, (Factory<? extends Character>) factory0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      // Undeclared exception!
      try { 
        ListUtils.longestCommonSubsequence(list0, (List<Character>) linkedList0, (Equator<? super Character>) defaultEquator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      linkedList0.add((Character) null);
      List<Object> list0 = ListUtils.unmodifiableList((List<?>) linkedList0);
      Class<Object> class0 = Object.class;
      InstantiateFactory<Object> instantiateFactory0 = new InstantiateFactory<Object>(class0);
      List<Object> list1 = ListUtils.lazyList(list0, (Factory<?>) instantiateFactory0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      // Undeclared exception!
      try { 
        ListUtils.longestCommonSubsequence(list1, list1, (Equator<? super Object>) defaultEquator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      linkedList0.add((Character) null);
      InvokerTransformer<Integer, Character> invokerTransformer0 = new InvokerTransformer<Integer, Character>("org.apache.commons.collections4.ListUtils$LcsVisitor", (Class<?>[]) null, (Object[]) null);
      List<Character> list0 = ListUtils.lazyList((List<Character>) linkedList0, (Transformer<Integer, ? extends Character>) invokerTransformer0);
      // Undeclared exception!
      try { 
        ListUtils.longestCommonSubsequence((List<Character>) linkedList0, list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'org.apache.commons.collections4.ListUtils$LcsVisitor' on 'class java.lang.Integer' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtils.longestCommonSubsequence((List<LinkedList<Transformer>>) null, (List<LinkedList<Transformer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // listA
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(3563);
      // Undeclared exception!
      ListUtils.longestCommonSubsequence((CharSequence) charBuffer0, (CharSequence) charBuffer0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtils.longestCommonSubsequence((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charSequenceA
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtils.intersection((List<? extends Character>) null, (List<? extends Character>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      linkedList0.add((Character) null);
      EqualPredicate<Character> equalPredicate0 = new EqualPredicate<Character>((Character) null);
      // Undeclared exception!
      try { 
        ListUtils.indexOf((List<Character>) linkedList0, (Predicate<Character>) equalPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.EqualPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtils.fixedSizeList((List<LinkedList<Character>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      Character character0 = Character.valueOf('}');
      LinkedList<Character> linkedList1 = new LinkedList<Character>();
      linkedList1.add(character0);
      List<Character> list0 = ListUtils.subtract((List<Character>) linkedList1, (List<? extends Character>) linkedList0);
      assertTrue(list0.contains('}'));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      linkedList0.add(instanceofPredicate0);
      List<InstanceofPredicate> list0 = ListUtils.subtract((List<InstanceofPredicate>) linkedList0, (List<? extends InstanceofPredicate>) linkedList0);
      assertFalse(list0.contains(instanceofPredicate0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      linkedList0.add((Object) orPredicate0);
      List<Object> list0 = ListUtils.intersection((List<?>) linkedList0, (List<?>) linkedList0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtils.union((List<?>) null, (List<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtils.longestCommonSubsequence((List<Boolean>) null, (List<Boolean>) null, (Equator<? super Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // listA
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      // Undeclared exception!
      try { 
        ListUtils.partition((List<Character>) linkedList0, (-88));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      linkedList0.add((Character) null);
      Predicate<Character> predicate0 = NotNullPredicate.notNullPredicate();
      int int0 = ListUtils.indexOf((List<Character>) linkedList0, predicate0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      linkedList0.add((Character) null);
      Predicate<Character> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        ListUtils.indexOf((List<Character>) linkedList0, predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      int int0 = ListUtils.indexOf((List<Object>) linkedList0, (Predicate<Object>) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = ListUtils.indexOf((List<Object>) null, (Predicate<Object>) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      linkedList0.add((Character) null);
      LinkedList<Character> linkedList1 = new LinkedList<Character>();
      List<Character> list0 = ListUtils.removeAll((Collection<Character>) linkedList0, (Collection<?>) linkedList1);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      linkedList0.add((Character) null);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      List<Character> list0 = ListUtils.retainAll((Collection<Character>) linkedList0, (Collection<?>) linkedList1);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      linkedList0.add((Character) null);
      List<Character> list0 = ListUtils.retainAll((Collection<Character>) linkedList0, (Collection<?>) linkedList0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      linkedList0.add((Character) null);
      int int0 = ListUtils.hashCodeForList(linkedList0);
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = ListUtils.hashCodeForList((Collection<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      Character character0 = Character.valueOf('M');
      linkedList0.add(character0);
      List<Character> list0 = ListUtils.synchronizedList((List<Character>) linkedList0);
      boolean boolean0 = ListUtils.isEqualList(list0, linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      linkedList0.add((Character) null);
      List<List<Character>> list0 = ListUtils.partition((List<Character>) linkedList0, 651);
      boolean boolean0 = ListUtils.isEqualList(linkedList0, list0);
      assertEquals(1, list0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      linkedList0.add((Character) null);
      List<List<Character>> list0 = ListUtils.partition((List<Character>) linkedList0, 669);
      boolean boolean0 = ListUtils.isEqualList(list0, linkedList0);
      assertFalse(boolean0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      linkedList0.add((Character) null);
      List<Character> list0 = ListUtils.synchronizedList((List<Character>) linkedList0);
      boolean boolean0 = ListUtils.isEqualList(list0, linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.add((Object) linkedList0);
      boolean boolean0 = ListUtils.isEqualList(linkedList0, linkedList1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      boolean boolean0 = ListUtils.isEqualList(linkedList0, (Collection<?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      boolean boolean0 = ListUtils.isEqualList((Collection<?>) null, linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      boolean boolean0 = ListUtils.isEqualList((Collection<?>) null, (Collection<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      linkedList0.add((Character) null);
      LinkedList<Character> linkedList1 = new LinkedList<Character>();
      List<Object> list0 = ListUtils.intersection((List<?>) linkedList0, (List<?>) linkedList1);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      List<UniquePredicate<Object>> list0 = ListUtils.defaultIfNull((List<UniquePredicate<Object>>) null, (List<UniquePredicate<Object>>) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      List<Object> list0 = ListUtils.emptyIfNull((List<Object>) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      linkedList0.add((Character) null);
      List<Character> list0 = ListUtils.removeAll((Collection<Character>) linkedList0, (Collection<?>) linkedList0);
      List<Character> list1 = ListUtils.longestCommonSubsequence(list0, (List<Character>) linkedList0);
      assertEquals(0, list1.size());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      // Undeclared exception!
      try { 
        ListUtils.transformedList((List<Character>) linkedList0, (Transformer<? super Character, ? extends Character>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtils.unmodifiableList((List<? extends LinkedList<Character>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtils.sum((List<? extends Character>) null, (List<? extends Character>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      List<Predicate<Object>> list0 = ListUtils.selectRejected((Collection<? extends Predicate<Object>>) linkedList0, (Predicate<? super Predicate<Object>>) predicate0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtils.synchronizedList((List<NotNullPredicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      List<Character> list0 = ListUtils.select((Collection<? extends Character>) linkedList0, (Predicate<? super Character>) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      List<Boolean> list0 = ListUtils.fixedSizeList((List<Boolean>) linkedList0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
      try { 
        ListUtils.predicatedList((List<Object>) null, (Predicate<Object>) uniquePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1197);
      String string0 = ListUtils.longestCommonSubsequence((CharSequence) charBuffer0, (CharSequence) charBuffer0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Transformer<Integer, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        ListUtils.lazyList((List<Boolean>) null, (Transformer<Integer, ? extends Boolean>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtils.lazyList((List<Object>) null, (Factory<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }
}
