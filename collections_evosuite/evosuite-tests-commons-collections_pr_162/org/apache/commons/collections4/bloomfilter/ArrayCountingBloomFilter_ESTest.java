/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 16:02:22 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter;
import org.apache.commons.collections4.bloomfilter.BitSetBloomFilter;
import org.apache.commons.collections4.bloomfilter.BloomFilter;
import org.apache.commons.collections4.bloomfilter.CountingBloomFilter;
import org.apache.commons.collections4.bloomfilter.HasherBloomFilter;
import org.apache.commons.collections4.bloomfilter.hasher.DynamicHasher;
import org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentity;
import org.apache.commons.collections4.bloomfilter.hasher.Hasher;
import org.apache.commons.collections4.bloomfilter.hasher.Shape;
import org.apache.commons.collections4.bloomfilter.hasher.StaticHasher;
import org.apache.commons.collections4.bloomfilter.hasher.function.MD5Cyclic;
import org.apache.commons.collections4.bloomfilter.hasher.function.Murmur128x64Cyclic;
import org.apache.commons.collections4.bloomfilter.hasher.function.Murmur32x86Iterative;
import org.apache.commons.collections4.bloomfilter.hasher.function.ObjectsHashIterative;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ArrayCountingBloomFilter_ESTest extends ArrayCountingBloomFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 16, 3761);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[9];
      linkedList0.addLast(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      ArrayCountingBloomFilter arrayCountingBloomFilter1 = new ArrayCountingBloomFilter(shape0);
      arrayCountingBloomFilter0.merge((Hasher) dynamicHasher0);
      boolean boolean0 = arrayCountingBloomFilter1.subtract(arrayCountingBloomFilter0);
      assertEquals(10, arrayCountingBloomFilter1.cardinality());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 3456, 3456);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[5];
      linkedList0.add(byteArray0);
      linkedList0.add((byte[]) null);
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.remove((Hasher) dynamicHasher0);
      assertEquals(2, arrayCountingBloomFilter0.cardinality());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 31, 31);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      linkedList0.addLast((byte[]) null);
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      arrayCountingBloomFilter0.merge((Hasher) dynamicHasher0);
      arrayCountingBloomFilter0.getBits();
      assertEquals(1, arrayCountingBloomFilter0.cardinality());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 3456, 3456);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      linkedList0.add((byte[]) null);
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      arrayCountingBloomFilter0.remove((Hasher) dynamicHasher0);
      arrayCountingBloomFilter0.isFull();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) mD5Cyclic0, 885, 2374);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      StaticHasher staticHasher0 = arrayCountingBloomFilter0.getHasher();
      boolean boolean0 = arrayCountingBloomFilter0.remove((Hasher) staticHasher0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 16, 16);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[4];
      linkedList0.addLast(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      arrayCountingBloomFilter0.merge((Hasher) dynamicHasher0);
      ArrayCountingBloomFilter arrayCountingBloomFilter1 = new ArrayCountingBloomFilter(shape0);
      arrayCountingBloomFilter1.remove((BloomFilter) arrayCountingBloomFilter0);
      assertEquals(1, arrayCountingBloomFilter0.cardinality());
      
      boolean boolean0 = arrayCountingBloomFilter1.merge((Hasher) dynamicHasher0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 3456, 3456);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[5];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      arrayCountingBloomFilter0.remove((Hasher) dynamicHasher0);
      assertEquals(1, arrayCountingBloomFilter0.cardinality());
      
      boolean boolean0 = arrayCountingBloomFilter0.merge((BloomFilter) arrayCountingBloomFilter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 593, 593);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[1];
      linkedList0.addLast(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      boolean boolean0 = arrayCountingBloomFilter0.contains((BloomFilter) hasherBloomFilter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 16, 16);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[9];
      linkedList0.addLast(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      arrayCountingBloomFilter0.merge((Hasher) dynamicHasher0);
      int int0 = arrayCountingBloomFilter0.cardinality();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 1, 1);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.add(arrayCountingBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 3456, 3456);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      arrayCountingBloomFilter0.subtract(arrayCountingBloomFilter0);
      arrayCountingBloomFilter0.subtract(arrayCountingBloomFilter0);
      // Undeclared exception!
      arrayCountingBloomFilter0.subtract(arrayCountingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 25, 25);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      Shape shape1 = new Shape((HashFunctionIdentity) objectsHashIterative0, 25, 25, 25);
      ArrayCountingBloomFilter arrayCountingBloomFilter1 = new ArrayCountingBloomFilter(shape1);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.subtract(arrayCountingBloomFilter1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape Shape[ Objects32-SIGNED-ITERATIVE n=25 m=25 k=25 ] is not the same as Shape[ Objects32-SIGNED-ITERATIVE n=25 m=25 k=1 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 3456, 3456);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.remove((Hasher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) mD5Cyclic0, 3089, 3089);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      linkedList0.addLast((byte[]) null);
      DynamicHasher dynamicHasher0 = new DynamicHasher(mD5Cyclic0, linkedList0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.remove((Hasher) dynamicHasher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.security.MessageDigest", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 233, 233);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      Murmur128x64Cyclic murmur128x64Cyclic0 = new Murmur128x64Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x64Cyclic0, linkedList0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.remove((Hasher) dynamicHasher0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hasher (Murmur3_x64_128-SIGNED-CYCLIC) is not the hasher for shape (Shape[ Objects32-SIGNED-ITERATIVE n=233 m=233 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 234, 104729);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      arrayCountingBloomFilter0.remove((BloomFilter) arrayCountingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 1872, 1872);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.remove((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 9, 9);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.remove((BloomFilter) bitSetBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape null is not the same as Shape[ Objects32-SIGNED-ITERATIVE n=9 m=9 k=1 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 1, 2447);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[1];
      linkedList0.addLast(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      arrayCountingBloomFilter0.merge((Hasher) dynamicHasher0);
      linkedList0.addLast(byteArray0);
      DynamicHasher dynamicHasher1 = new DynamicHasher(objectsHashIterative0, linkedList0);
      // Undeclared exception!
      arrayCountingBloomFilter0.merge((Hasher) dynamicHasher1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 8, 8);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.merge((Hasher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      linkedList0.addLast((byte[]) null);
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      DynamicHasher dynamicHasher0 = new DynamicHasher(mD5Cyclic0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) mD5Cyclic0, 1891, 2171);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.merge((Hasher) dynamicHasher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.security.MessageDigest", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Murmur128x64Cyclic murmur128x64Cyclic0 = new Murmur128x64Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 3486, 3486);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x64Cyclic0, linkedList0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.merge((Hasher) dynamicHasher0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hasher (Murmur3_x64_128-SIGNED-CYCLIC) is not the hasher for shape (Shape[ Objects32-SIGNED-ITERATIVE n=3486 m=3486 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 23, 23);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.merge((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 22, 22);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      Shape shape1 = new Shape((HashFunctionIdentity) objectsHashIterative0, 19, 19);
      ArrayCountingBloomFilter arrayCountingBloomFilter1 = new ArrayCountingBloomFilter(shape1);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.merge((BloomFilter) arrayCountingBloomFilter1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape Shape[ Objects32-SIGNED-ITERATIVE n=19 m=19 k=1 ] is not the same as Shape[ Objects32-SIGNED-ITERATIVE n=22 m=22 k=1 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 1432, 104729);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      arrayCountingBloomFilter0.getHasher();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 65280, 65280);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      arrayCountingBloomFilter0.getBits();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 255, 104729);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      CountingBloomFilter.BitCountConsumer countingBloomFilter_BitCountConsumer0 = mock(CountingBloomFilter.BitCountConsumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      arrayCountingBloomFilter0.forEachCount(countingBloomFilter_BitCountConsumer0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 1, 2447);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[1];
      linkedList0.addLast(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      arrayCountingBloomFilter0.merge((Hasher) dynamicHasher0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      hasherBloomFilter0.contains((Hasher) dynamicHasher0);
      // Undeclared exception!
      arrayCountingBloomFilter0.contains((Hasher) dynamicHasher0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 1872, 1872);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.contains((Hasher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      linkedList0.addLast((byte[]) null);
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      DynamicHasher dynamicHasher0 = new DynamicHasher(mD5Cyclic0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) mD5Cyclic0, 1891, 2171);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.contains((Hasher) dynamicHasher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.security.MessageDigest", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 827, 827);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur32x86Iterative0, linkedList0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.contains((Hasher) dynamicHasher0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hasher (Murmur3_x86_32-SIGNED-ITERATIVE) is not the hasher for shape (Shape[ Objects32-SIGNED-ITERATIVE n=827 m=827 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 16, 3761);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      arrayCountingBloomFilter0.contains((BloomFilter) arrayCountingBloomFilter0);
      arrayCountingBloomFilter0.contains((BloomFilter) arrayCountingBloomFilter0);
      // Undeclared exception!
      arrayCountingBloomFilter0.contains((BloomFilter) arrayCountingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 3429, 3429);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.contains((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 591, 591);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      Shape shape1 = new Shape((HashFunctionIdentity) objectsHashIterative0, 15, 15);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape1);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.contains((BloomFilter) hasherBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // shape (Shape[ Objects32-SIGNED-ITERATIVE n=591 m=591 k=1 ]) does not match internal shape (Shape[ Objects32-SIGNED-ITERATIVE n=15 m=15 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.StaticHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 3072, 65280);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      arrayCountingBloomFilter0.cardinality();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 247, 247);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.add((CountingBloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 22, 22);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      Shape shape1 = new Shape((HashFunctionIdentity) objectsHashIterative0, 22, 148);
      ArrayCountingBloomFilter arrayCountingBloomFilter1 = new ArrayCountingBloomFilter(shape1);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.add(arrayCountingBloomFilter1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape Shape[ Objects32-SIGNED-ITERATIVE n=22 m=148 k=5 ] is not the same as Shape[ Objects32-SIGNED-ITERATIVE n=22 m=22 k=1 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = null;
      try {
        arrayCountingBloomFilter0 = new ArrayCountingBloomFilter((Shape) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 209, 209);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      linkedList0.addLast((byte[]) null);
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      arrayCountingBloomFilter0.merge((Hasher) dynamicHasher0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.forEachCount((CountingBloomFilter.BitCountConsumer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) mD5Cyclic0, 885, 2374);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      CountingBloomFilter.BitCountConsumer countingBloomFilter_BitCountConsumer0 = mock(CountingBloomFilter.BitCountConsumer.class, new ViolatedAssumptionAnswer());
      arrayCountingBloomFilter0.forEachCount(countingBloomFilter_BitCountConsumer0);
      assertTrue(arrayCountingBloomFilter0.isValid());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 3456, 3456);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[5];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      arrayCountingBloomFilter0.remove((Hasher) dynamicHasher0);
      assertEquals(1, arrayCountingBloomFilter0.cardinality());
      
      boolean boolean0 = arrayCountingBloomFilter0.isValid();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 255, 104729);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.isValid();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 16, 16);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[0];
      linkedList0.addLast(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      arrayCountingBloomFilter0.remove((Hasher) dynamicHasher0);
      boolean boolean0 = arrayCountingBloomFilter0.contains((BloomFilter) arrayCountingBloomFilter0);
      assertEquals(1, arrayCountingBloomFilter0.cardinality());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      linkedList0.addLast((byte[]) null);
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 29, 29);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      arrayCountingBloomFilter0.merge((Hasher) dynamicHasher0);
      assertEquals(1, arrayCountingBloomFilter0.cardinality());
      
      boolean boolean0 = arrayCountingBloomFilter0.remove((BloomFilter) arrayCountingBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 1872, 1872);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.remove((BloomFilter) bitSetBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 3456, 3456);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      long[] longArray0 = arrayCountingBloomFilter0.getBits();
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 592, 592);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[0];
      linkedList0.addLast(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      arrayCountingBloomFilter0.merge((Hasher) dynamicHasher0);
      boolean boolean0 = arrayCountingBloomFilter0.contains((Hasher) dynamicHasher0);
      assertEquals(1, arrayCountingBloomFilter0.cardinality());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      linkedList0.addLast((byte[]) null);
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 29, 29);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.contains((Hasher) dynamicHasher0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 22, 22);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      int int0 = arrayCountingBloomFilter0.cardinality();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 16, 16);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[6];
      linkedList0.addLast(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      arrayCountingBloomFilter0.merge((Hasher) dynamicHasher0);
      arrayCountingBloomFilter0.getHasher();
      assertEquals(1, arrayCountingBloomFilter0.cardinality());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 3479, 3479);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.merge((BloomFilter) arrayCountingBloomFilter0);
      assertEquals(0, arrayCountingBloomFilter0.cardinality());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 4579, 4579);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[4];
      linkedList0.addLast(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      arrayCountingBloomFilter0.remove((Hasher) dynamicHasher0);
      assertEquals(1, arrayCountingBloomFilter0.cardinality());
      
      boolean boolean0 = arrayCountingBloomFilter0.add(arrayCountingBloomFilter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 3456, 3456);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[5];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      arrayCountingBloomFilter0.remove((Hasher) dynamicHasher0);
      assertEquals(1, arrayCountingBloomFilter0.cardinality());
      
      long[] longArray0 = arrayCountingBloomFilter0.getBits();
      assertEquals(10, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 3486, 3486);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.subtract((CountingBloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }
}
