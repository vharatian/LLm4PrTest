/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 12:37:27 GMT 2025
 */

package org.apache.commons.collections4.comparators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.LongBuffer;
import java.util.BitSet;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.ToDoubleFunction;
import java.util.function.ToIntFunction;
import java.util.function.ToLongFunction;
import org.apache.commons.collections4.comparators.ComparatorChain;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ComparatorChain_ESTest extends ComparatorChain_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2L, 1369L).when(toLongFunction0).applyAsLong(any());
      Comparator<Object> comparator0 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(comparator0, true);
      comparatorChain0.compare(comparator0, comparator0);
      ToIntFunction<Integer> toIntFunction0 = (ToIntFunction<Integer>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator.comparingInt((ToIntFunction<? super Integer>) toIntFunction0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        comparatorChain0.setReverseSort(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Comparator ordering cannot be changed after the first comparison is performed
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 1348L).when(toLongFunction0).applyAsLong(any());
      Comparator<Object> comparator0 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(comparator0, true);
      long[] longArray0 = new long[1];
      longArray0[0] = (-1153L);
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      comparatorChain0.equals(longBuffer0);
      Comparator<Object> comparator1 = Comparator.nullsLast((Comparator<? super Object>) comparator0);
      Comparator<ComparatorChain<LongBuffer>> comparator2 = Comparator.nullsFirst((Comparator<? super ComparatorChain<LongBuffer>>) comparator1);
      ComparatorChain<ComparatorChain<LongBuffer>> comparatorChain1 = new ComparatorChain<ComparatorChain<LongBuffer>>(comparator2);
      ComparatorChain<ComparatorChain<LongBuffer>> comparatorChain2 = new ComparatorChain<ComparatorChain<LongBuffer>>(comparatorChain1, false);
      comparatorChain2.hashCode();
      comparatorChain0.hashCode();
      comparatorChain0.compare(comparator1, comparator1);
      LinkedList<Comparator<Integer>> linkedList0 = new LinkedList<Comparator<Integer>>();
      ComparatorChain<Integer> comparatorChain3 = new ComparatorChain<Integer>(linkedList0);
      Function<Object, Object> function0 = Function.identity();
      Comparator<LongBuffer> comparator3 = Comparator.comparing((Function<? super LongBuffer, ?>) function0, (Comparator<? super Object>) comparatorChain0);
      ComparatorChain<LongBuffer> comparatorChain4 = new ComparatorChain<LongBuffer>(comparator3);
      ComparatorChain<ByteBuffer> comparatorChain5 = new ComparatorChain<ByteBuffer>((Comparator<ByteBuffer>) null, false);
      ComparatorChain<Object> comparatorChain6 = new ComparatorChain<Object>();
      // Undeclared exception!
      try { 
        comparatorChain0.setComparator(1, comparator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Comparator ordering cannot be changed after the first comparison is performed
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(comparator0, true);
      long[] longArray0 = new long[1];
      longArray0[0] = (-1153L);
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      comparatorChain0.equals(longBuffer0);
      Comparator.nullsLast((Comparator<? super Object>) comparator0);
      ComparatorChain<ComparatorChain<LongBuffer>> comparatorChain1 = new ComparatorChain<ComparatorChain<LongBuffer>>((List<Comparator<ComparatorChain<LongBuffer>>>) null, (BitSet) null);
      // Undeclared exception!
      try { 
        comparatorChain1.setReverseSort(30);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 1348L).when(toLongFunction0).applyAsLong(any());
      Comparator<Object> comparator0 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      boolean boolean0 = true;
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(comparator0, true);
      long[] longArray0 = new long[9];
      longArray0[0] = (-1153L);
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      comparatorChain0.equals(longBuffer0);
      Comparator.nullsLast((Comparator<? super Object>) comparator0);
      ComparatorChain<ComparatorChain<LongBuffer>> comparatorChain1 = new ComparatorChain<ComparatorChain<LongBuffer>>((List<Comparator<ComparatorChain<LongBuffer>>>) null, (BitSet) null);
      ComparatorChain<ComparatorChain<LongBuffer>> comparatorChain2 = new ComparatorChain<ComparatorChain<LongBuffer>>(comparatorChain1);
      ComparatorChain<ComparatorChain<LongBuffer>> comparatorChain3 = new ComparatorChain<ComparatorChain<LongBuffer>>(comparatorChain2, true);
      comparatorChain0.hashCode();
      LinkedList<Comparator<ByteBuffer>> linkedList0 = new LinkedList<Comparator<ByteBuffer>>();
      LinkedList<Comparator<ByteBuffer>> linkedList1 = new LinkedList<Comparator<ByteBuffer>>();
      ComparatorChain<ByteBuffer> comparatorChain4 = new ComparatorChain<ByteBuffer>(linkedList1);
      Object object0 = new Object();
      comparatorChain0.compare(object0, comparatorChain2);
      ToLongFunction<Object> toLongFunction1 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator<ComparatorChain<LongBuffer>> comparator1 = Comparator.comparingLong((ToLongFunction<? super ComparatorChain<LongBuffer>>) toLongFunction1);
      ComparatorChain<ComparatorChain<LongBuffer>> comparatorChain5 = new ComparatorChain<ComparatorChain<LongBuffer>>(comparator1, false);
      // Undeclared exception!
      try { 
        comparatorChain1.addComparator((Comparator<ComparatorChain<LongBuffer>>) comparatorChain5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 1348L).when(toLongFunction0).applyAsLong(any());
      Comparator<Object> comparator0 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      boolean boolean0 = true;
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(comparator0, true);
      comparatorChain0.compare(comparatorChain0, comparatorChain0);
      // Undeclared exception!
      try { 
        comparatorChain0.addComparator(comparator0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Comparator ordering cannot be changed after the first comparison is performed
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(linkedList0);
      assertEquals(0, comparatorChain0.size());
      
      Comparator.nullsLast((Comparator<? super Object>) comparatorChain0);
      comparatorChain0.reversed();
      ComparatorChain<ByteBuffer> comparatorChain1 = new ComparatorChain<ByteBuffer>((List<Comparator<ByteBuffer>>) null, (BitSet) null);
      ComparatorChain<ByteBuffer> comparatorChain2 = new ComparatorChain<ByteBuffer>(comparatorChain1, false);
      // Undeclared exception!
      try { 
        comparatorChain1.setComparator(0, (Comparator<ByteBuffer>) comparatorChain2, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 1348L, 1348L, (-1746L)).when(toLongFunction0).applyAsLong(any());
      Comparator<Object> comparator0 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(comparator0, true);
      long[] longArray0 = new long[1];
      longArray0[0] = (-1153L);
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      comparatorChain0.equals(longBuffer0);
      Comparator<Object> comparator1 = Comparator.nullsLast((Comparator<? super Object>) comparator0);
      ComparatorChain<ComparatorChain<LongBuffer>> comparatorChain1 = new ComparatorChain<ComparatorChain<LongBuffer>>((List<Comparator<ComparatorChain<LongBuffer>>>) null, (BitSet) null);
      ComparatorChain<ComparatorChain<LongBuffer>> comparatorChain2 = new ComparatorChain<ComparatorChain<LongBuffer>>(comparatorChain1);
      ComparatorChain<ComparatorChain<LongBuffer>> comparatorChain3 = new ComparatorChain<ComparatorChain<LongBuffer>>(comparatorChain2, true);
      comparatorChain2.hashCode();
      comparatorChain0.hashCode();
      LinkedList<Comparator<ByteBuffer>> linkedList0 = new LinkedList<Comparator<ByteBuffer>>();
      ComparatorChain<ByteBuffer> comparatorChain4 = new ComparatorChain<ByteBuffer>(linkedList0);
      Object object0 = new Object();
      comparatorChain0.compare(object0, comparatorChain2);
      Function<Object, Object> function0 = Function.identity();
      Comparator<LongBuffer> comparator2 = Comparator.comparing((Function<? super LongBuffer, ?>) function0, (Comparator<? super Object>) comparator0);
      ComparatorChain<LongBuffer> comparatorChain5 = new ComparatorChain<LongBuffer>(comparator2);
      ComparatorChain<ByteBuffer> comparatorChain6 = new ComparatorChain<ByteBuffer>(comparatorChain4, true);
      ComparatorChain<Object> comparatorChain7 = new ComparatorChain<Object>();
      ComparatorChain<Object> comparatorChain8 = new ComparatorChain<Object>(comparator0, true);
      ComparatorChain<Object> comparatorChain9 = new ComparatorChain<Object>();
      ComparatorChain<Object> comparatorChain10 = new ComparatorChain<Object>(comparator1, true);
      int int0 = comparatorChain10.compare(comparator2, comparatorChain4);
      assertTrue(comparatorChain10.isLocked());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Comparator<Integer>> linkedList0 = new LinkedList<Comparator<Integer>>();
      Function<Object, ByteBuffer> function0 = (Function<Object, ByteBuffer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = new ComparatorChain<Object>((List<Comparator<Object>>) null, (BitSet) null);
      Comparator.nullsLast((Comparator<? super ComparatorChain<Integer>>) comparator0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>((List<Comparator<Object>>) null, (BitSet) null);
      LinkedList<Comparator<ByteBuffer>> linkedList1 = new LinkedList<Comparator<ByteBuffer>>();
      ComparatorChain<ByteBuffer> comparatorChain1 = new ComparatorChain<ByteBuffer>((List<Comparator<ByteBuffer>>) null, (BitSet) null);
      comparatorChain0.equals(comparatorChain1);
      ComparatorChain<ByteBuffer> comparatorChain2 = new ComparatorChain<ByteBuffer>(linkedList1);
      ComparatorChain<Object> comparatorChain3 = new ComparatorChain<Object>(comparator0, true);
      ComparatorChain<Object> comparatorChain4 = new ComparatorChain<Object>();
      Comparator.naturalOrder();
      Comparator<ComparatorChain<LongBuffer>> comparator1 = Comparator.nullsFirst((Comparator<? super ComparatorChain<LongBuffer>>) comparatorChain3);
      ComparatorChain<ComparatorChain<LongBuffer>> comparatorChain5 = new ComparatorChain<ComparatorChain<LongBuffer>>(comparator1);
      ComparatorChain<Object> comparatorChain6 = null;
      try {
        comparatorChain6 = new ComparatorChain<Object>((List<Comparator<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Comparator<Integer>> linkedList0 = new LinkedList<Comparator<Integer>>();
      BitSet bitSet0 = null;
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>((List<Comparator<Object>>) null, (BitSet) null);
      LinkedList<Comparator<ByteBuffer>> linkedList1 = new LinkedList<Comparator<ByteBuffer>>();
      // Undeclared exception!
      try { 
        comparatorChain0.setForwardSort(2217);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Comparator<Integer>> linkedList0 = new LinkedList<Comparator<Integer>>();
      Function<Object, ByteBuffer> function0 = (Function<Object, ByteBuffer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Comparator.comparing((Function<? super Object, ? extends ByteBuffer>) function0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>((List<Comparator<Object>>) null, (BitSet) null);
      LinkedList<Comparator<ByteBuffer>> linkedList1 = new LinkedList<Comparator<ByteBuffer>>();
      ComparatorChain<ByteBuffer> comparatorChain1 = new ComparatorChain<ByteBuffer>(linkedList1, (BitSet) null);
      comparatorChain0.equals(comparatorChain1);
      ComparatorChain<Object> comparatorChain2 = null;
      try {
        comparatorChain2 = new ComparatorChain<Object>((List<Comparator<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Comparator<Integer>> linkedList0 = new LinkedList<Comparator<Integer>>();
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>((List<Comparator<Object>>) null, (BitSet) null);
      Comparator.nullsLast((Comparator<? super ComparatorChain<Integer>>) comparatorChain0);
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>((List<Comparator<Object>>) null, (BitSet) null);
      ComparatorChain<ByteBuffer> comparatorChain2 = new ComparatorChain<ByteBuffer>((List<Comparator<ByteBuffer>>) null, (BitSet) null);
      boolean boolean0 = comparatorChain1.equals(comparatorChain2);
      assertTrue(boolean0);
      
      ComparatorChain<Object> comparatorChain3 = new ComparatorChain<Object>(comparatorChain0, true);
      ComparatorChain<Object> comparatorChain4 = new ComparatorChain<Object>();
      ComparatorChain<Comparable<Object>> comparatorChain5 = new ComparatorChain<Comparable<Object>>();
      Comparator.nullsFirst((Comparator<? super ComparatorChain<LongBuffer>>) comparatorChain3);
      ComparatorChain<Object> comparatorChain6 = new ComparatorChain<Object>();
      assertFalse(comparatorChain6.equals((Object)comparatorChain3));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0L, (-959L)).when(toLongFunction0).applyAsLong(any());
      Comparator<Object> comparator0 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(comparator0, true);
      int int0 = comparatorChain0.compare(comparator0, comparator0);
      assertTrue(comparatorChain0.isLocked());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>();
      int int0 = 30;
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(30).when(comparable0).compareTo(any());
      Function<Object, Comparable<Object>> function0 = (Function<Object, Comparable<Object>>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(comparable0, comparable0).when(function0).apply(any());
      Comparator<Integer> comparator0 = Comparator.comparing((Function<? super Integer, ? extends Comparable<Object>>) function0);
      comparatorChain0.addComparator(comparator0, true);
      ComparatorChain<ComparatorChain<Object>> comparatorChain1 = new ComparatorChain<ComparatorChain<Object>>();
      Comparator<Comparable<Object>> comparator1 = Comparator.reverseOrder();
      Comparator<Comparable<Object>> comparator2 = Comparator.naturalOrder();
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator.comparingLong((ToLongFunction<? super Integer>) toLongFunction0);
      comparatorChain1.size();
      ComparatorChain<Comparable<Object>> comparatorChain2 = new ComparatorChain<Comparable<Object>>(comparator2);
      ComparatorChain<Comparable<Object>> comparatorChain3 = new ComparatorChain<Comparable<Object>>(comparatorChain2);
      comparatorChain3.setComparator(0, comparator2, true);
      comparatorChain0.equals(comparator1);
      Comparator<Object> comparator3 = null;
      ComparatorChain<Object> comparatorChain4 = new ComparatorChain<Object>((Comparator<Object>) null, false);
      comparatorChain0.size();
      ComparatorChain<Integer> comparatorChain5 = new ComparatorChain<Integer>(comparatorChain0, true);
      comparatorChain5.isLocked();
      int int1 = (-1);
      Integer integer0 = new Integer((-1));
      comparatorChain5.compare(integer0, integer0);
      int int2 = (-1);
      // Undeclared exception!
      try { 
        Comparator.comparingInt((ToIntFunction<? super LongBuffer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>();
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>((List<Comparator<Object>>) null, (BitSet) null);
      comparatorChain1.equals(comparatorChain0);
      ComparatorChain<ByteBuffer> comparatorChain2 = null;
      try {
        comparatorChain2 = new ComparatorChain<ByteBuffer>((List<Comparator<ByteBuffer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparable0).compareTo(any());
      Function<Object, Comparable<Object>> function0 = (Function<Object, Comparable<Object>>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(comparable0, comparable0, (Object) null, (Object) null).when(function0).apply(any());
      Comparator<Integer> comparator0 = Comparator.comparing((Function<? super Integer, ? extends Comparable<Object>>) function0);
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>(comparator0);
      comparatorChain0.equals(comparator0);
      int int0 = 1;
      comparatorChain0.addComparator(comparator0, false);
      comparatorChain0.setComparator(1, comparator0);
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>((Comparator<Object>) null);
      comparatorChain1.equals(comparatorChain0);
      int int1 = 0;
      comparatorChain1.setComparator(0, (Comparator<Object>) null, false);
      int int2 = 1;
      Integer integer0 = new Integer(1);
      int int3 = (-793);
      Integer integer1 = new Integer((-793));
      // Undeclared exception!
      try { 
        comparatorChain0.compare(integer0, integer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Comparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(toLongFunction0).applyAsLong(any());
      Comparator<Object> comparator0 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(comparator0, true);
      int int0 = comparatorChain0.compare(comparatorChain0, comparatorChain0);
      //  // Unstable assertion: assertTrue(comparatorChain0.isLocked());
      //  // Unstable assertion: assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparable0).compareTo(any());
      Function<Object, Comparable<Object>> function0 = (Function<Object, Comparable<Object>>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(comparable0, comparable0).when(function0).apply(any());
      Comparator<Integer> comparator0 = Comparator.comparing((Function<? super Integer, ? extends Comparable<Object>>) function0);
      comparatorChain0.addComparator(comparator0, true);
      Comparator<Comparable<Object>> comparator1 = Comparator.reverseOrder();
      Comparator<Comparable<Object>> comparator2 = Comparator.naturalOrder();
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator.comparingLong((ToLongFunction<? super Integer>) toLongFunction0);
      ComparatorChain<Comparable<Object>> comparatorChain1 = new ComparatorChain<Comparable<Object>>(comparator2);
      ComparatorChain<Comparable<Object>> comparatorChain2 = new ComparatorChain<Comparable<Object>>(comparatorChain1);
      comparatorChain0.equals(comparator1);
      ComparatorChain<Object> comparatorChain3 = new ComparatorChain<Object>((Comparator<Object>) null, false);
      comparatorChain0.size();
      ComparatorChain<Integer> comparatorChain4 = new ComparatorChain<Integer>(comparatorChain0, true);
      comparatorChain4.isLocked();
      Integer integer0 = new Integer(4);
      comparatorChain4.compare(integer0, integer0);
      // Undeclared exception!
      try { 
        comparatorChain4.setForwardSort((-1));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Comparator ordering cannot be changed after the first comparison is performed
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      ComparatorChain<Comparable<Integer>> comparatorChain0 = new ComparatorChain<Comparable<Integer>>((List<Comparator<Comparable<Integer>>>) null, bitSet0);
      // Undeclared exception!
      try { 
        comparatorChain0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(linkedList0, (BitSet) null);
      comparatorChain0.hashCode();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      boolean boolean0 = comparatorChain0.equals(comparatorChain0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(toLongFunction0).applyAsLong(any());
      Comparator<Object> comparator0 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      Comparator<ByteBuffer> comparator1 = Comparator.nullsFirst((Comparator<? super ByteBuffer>) comparator0);
      ComparatorChain<ByteBuffer> comparatorChain0 = new ComparatorChain<ByteBuffer>(comparator1);
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<ByteBuffer> comparator2 = Comparator.comparingDouble((ToDoubleFunction<? super ByteBuffer>) toDoubleFunction0);
      ToLongFunction<Object> toLongFunction1 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      comparatorChain0.thenComparingLong(toLongFunction1);
      comparatorChain0.hashCode();
      comparatorChain0.equals(comparator2);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-98);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      comparatorChain0.compare(byteBuffer0, byteBuffer0);
      // Undeclared exception!
      try { 
        comparatorChain0.setComparator((int) (byte) (-98), comparator1, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Comparator ordering cannot be changed after the first comparison is performed
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Comparator<ByteBuffer> comparator0 = Comparator.nullsLast((Comparator<? super ByteBuffer>) null);
      Comparator<ByteBuffer> comparator1 = Comparator.nullsFirst((Comparator<? super ByteBuffer>) comparator0);
      ComparatorChain<ByteBuffer> comparatorChain0 = new ComparatorChain<ByteBuffer>(comparator1, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-3);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      comparatorChain0.compare(byteBuffer0, byteBuffer0);
      // Undeclared exception!
      try { 
        comparatorChain0.setComparator(4030, comparator0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Comparator ordering cannot be changed after the first comparison is performed
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      ComparatorChain<Comparator<Object>> comparatorChain1 = new ComparatorChain<Comparator<Object>>();
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      ComparatorChain<Object> comparatorChain2 = new ComparatorChain<Object>(linkedList0);
      boolean boolean0 = comparatorChain2.equals(comparatorChain0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      // Undeclared exception!
      try { 
        comparatorChain0.setComparator((-1), (Comparator<Object>) comparatorChain0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>();
      ComparatorChain<Object> comparatorChain1 = null;
      try {
        comparatorChain1 = new ComparatorChain<Object>((List<Comparator<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>();
      Function<Object, Comparable<Object>> function0 = (Function<Object, Comparable<Object>>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function0).apply(any());
      Comparator<Integer> comparator0 = Comparator.comparing((Function<? super Integer, ? extends Comparable<Object>>) function0);
      comparatorChain0.addComparator(comparator0, true);
      ComparatorChain<ComparatorChain<Object>> comparatorChain1 = new ComparatorChain<ComparatorChain<Object>>();
      Comparator<Comparable<Object>> comparator1 = Comparator.reverseOrder();
      Comparator<Comparable<Object>> comparator2 = Comparator.naturalOrder();
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator.comparingLong((ToLongFunction<? super Integer>) toLongFunction0);
      comparatorChain1.size();
      ComparatorChain<Comparable<Object>> comparatorChain2 = new ComparatorChain<Comparable<Object>>(comparator2);
      ComparatorChain<Comparable<Object>> comparatorChain3 = new ComparatorChain<Comparable<Object>>(comparatorChain2);
      comparatorChain3.setComparator(0, comparator2, true);
      comparatorChain0.equals(comparator1);
      ComparatorChain<Object> comparatorChain4 = new ComparatorChain<Object>((Comparator<Object>) null, false);
      comparatorChain0.size();
      ComparatorChain<Integer> comparatorChain5 = new ComparatorChain<Integer>(comparatorChain0, true);
      comparatorChain5.isLocked();
      Integer integer0 = new Integer((-1));
      // Undeclared exception!
      try { 
        comparatorChain5.compare(integer0, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Comparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ComparatorChain<ComparatorChain<Object>> comparatorChain0 = new ComparatorChain<ComparatorChain<Object>>((Comparator<ComparatorChain<Object>>) null, true);
      comparatorChain0.setComparator(0, (Comparator<ComparatorChain<Object>>) null, true);
      assertFalse(comparatorChain0.isLocked());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1.0, 0.0).when(toDoubleFunction0).applyAsDouble(any());
      Comparator<Object> comparator0 = Comparator.comparingDouble((ToDoubleFunction<? super Object>) toDoubleFunction0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(comparator0, true);
      comparatorChain0.setComparator(0, comparator0);
      comparatorChain0.equals(comparator0);
      ToDoubleFunction<Object> toDoubleFunction1 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<ComparatorChain<Integer>> comparator1 = Comparator.comparingDouble((ToDoubleFunction<? super ComparatorChain<Integer>>) toDoubleFunction1);
      ComparatorChain<ComparatorChain<Integer>> comparatorChain1 = new ComparatorChain<ComparatorChain<Integer>>(comparator1, false);
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      comparatorChain1.setForwardSort(0);
      comparatorChain1.equals(comparatorChain0);
      comparatorChain1.equals(comparator1);
      LinkedList<Comparator<Comparable<Integer>>> linkedList0 = new LinkedList<Comparator<Comparable<Integer>>>();
      BitSet bitSet0 = new BitSet();
      ComparatorChain<Comparable<Integer>> comparatorChain2 = new ComparatorChain<Comparable<Integer>>(linkedList0, bitSet0);
      linkedList0.add((Comparator<Comparable<Integer>>) comparatorChain2);
      ComparatorChain<Comparable<Integer>> comparatorChain3 = new ComparatorChain<Comparable<Integer>>(comparatorChain2, true);
      comparatorChain3.setReverseSort(0);
      comparatorChain2.addComparator((Comparator<Comparable<Integer>>) comparatorChain3, false);
      Comparator<Object> comparator2 = Comparator.nullsFirst((Comparator<? super Object>) comparator0);
      comparatorChain0.addComparator(comparator2);
      ComparatorChain<Integer> comparatorChain4 = new ComparatorChain<Integer>((Comparator<Integer>) null, false);
      comparatorChain4.setReverseSort(0);
      Object object0 = new Object();
      Object object1 = new Object();
      comparatorChain0.compare(object0, object1);
      boolean boolean0 = comparatorChain0.isLocked();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparingInt((ToIntFunction<? super Object>) toIntFunction0);
      Comparator<Object> comparator1 = Comparator.nullsFirst((Comparator<? super Object>) comparator0);
      boolean boolean0 = true;
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(comparator1, true);
      comparatorChain0.hashCode();
      int int0 = 3639;
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator2 = comparatorChain0.thenComparingLong(toLongFunction0);
      // Undeclared exception!
      try { 
        comparatorChain0.setComparator(3639, comparator2, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3639, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1.0, 0.0).when(toDoubleFunction0).applyAsDouble(any());
      Comparator<Object> comparator0 = Comparator.comparingDouble((ToDoubleFunction<? super Object>) toDoubleFunction0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(comparator0, true);
      comparatorChain0.setComparator(0, comparator0);
      comparatorChain0.equals(comparator0);
      ToDoubleFunction<Object> toDoubleFunction1 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<ComparatorChain<Integer>> comparator1 = Comparator.comparingDouble((ToDoubleFunction<? super ComparatorChain<Integer>>) toDoubleFunction1);
      ComparatorChain<ComparatorChain<Integer>> comparatorChain1 = new ComparatorChain<ComparatorChain<Integer>>(comparator1, false);
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      comparatorChain1.setForwardSort(0);
      comparatorChain1.equals(comparatorChain0);
      comparatorChain1.equals(comparator1);
      LinkedList<Comparator<Comparable<Integer>>> linkedList0 = new LinkedList<Comparator<Comparable<Integer>>>();
      BitSet bitSet0 = new BitSet();
      ComparatorChain<Comparable<Integer>> comparatorChain2 = new ComparatorChain<Comparable<Integer>>(linkedList0, bitSet0);
      linkedList0.add((Comparator<Comparable<Integer>>) comparatorChain2);
      ComparatorChain<Comparable<Integer>> comparatorChain3 = new ComparatorChain<Comparable<Integer>>(comparatorChain2, true);
      comparatorChain3.setReverseSort(0);
      comparatorChain2.addComparator((Comparator<Comparable<Integer>>) comparatorChain3, false);
      Comparator<Object> comparator2 = Comparator.nullsFirst((Comparator<? super Object>) comparator0);
      comparatorChain0.addComparator(comparator2);
      ComparatorChain<Integer> comparatorChain4 = new ComparatorChain<Integer>((Comparator<Integer>) null, false);
      comparatorChain4.setReverseSort(0);
      comparatorChain4.equals(comparatorChain0);
      LinkedList<Comparator<Object>> linkedList1 = new LinkedList<Comparator<Object>>();
      linkedList1.stream();
      ComparatorChain<Object> comparatorChain5 = new ComparatorChain<Object>(linkedList1, bitSet0);
      int int0 = comparatorChain0.compare(comparatorChain3, comparatorChain5);
      assertTrue(comparatorChain0.isLocked());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(toDoubleFunction0).applyAsDouble(any());
      Comparator<Object> comparator0 = Comparator.comparingDouble((ToDoubleFunction<? super Object>) toDoubleFunction0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(comparator0, true);
      comparatorChain0.setComparator(0, comparator0);
      comparatorChain0.equals(comparator0);
      ToDoubleFunction<Object> toDoubleFunction1 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<ComparatorChain<Integer>> comparator1 = Comparator.comparingDouble((ToDoubleFunction<? super ComparatorChain<Integer>>) toDoubleFunction1);
      ComparatorChain<ComparatorChain<Integer>> comparatorChain1 = new ComparatorChain<ComparatorChain<Integer>>(comparator1, false);
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator2 = Comparator.comparingInt((ToIntFunction<? super Object>) toIntFunction0);
      comparatorChain1.setForwardSort(0);
      comparatorChain1.equals(comparatorChain0);
      comparatorChain1.equals(comparator1);
      LinkedList<Comparator<Comparable<Integer>>> linkedList0 = new LinkedList<Comparator<Comparable<Integer>>>();
      BitSet bitSet0 = new BitSet();
      ComparatorChain<Comparable<Integer>> comparatorChain2 = new ComparatorChain<Comparable<Integer>>(linkedList0, bitSet0);
      ComparatorChain<Comparable<Integer>> comparatorChain3 = new ComparatorChain<Comparable<Integer>>(comparatorChain2, true);
      comparatorChain3.setReverseSort(0);
      comparatorChain2.addComparator((Comparator<Comparable<Integer>>) comparatorChain3, false);
      Comparator<Object> comparator3 = Comparator.nullsFirst((Comparator<? super Object>) comparator0);
      comparatorChain0.addComparator(comparator3);
      ComparatorChain<Integer> comparatorChain4 = new ComparatorChain<Integer>((Comparator<Integer>) null, false);
      comparatorChain4.setReverseSort(0);
      comparatorChain4.equals(comparatorChain0);
      LinkedList<Comparator<Object>> linkedList1 = new LinkedList<Comparator<Object>>();
      ComparatorChain<Object> comparatorChain5 = new ComparatorChain<Object>(linkedList1, bitSet0);
      comparatorChain0.compare(comparatorChain3, comparatorChain5);
      comparatorChain0.compare(comparator2, comparator1);
      assertTrue(comparatorChain0.isLocked());
      
      Integer integer0 = new Integer(0);
      boolean boolean0 = comparatorChain2.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      ComparatorChain<Comparator<Object>> comparatorChain1 = new ComparatorChain<Comparator<Object>>((List<Comparator<Comparator<Object>>>) null, (BitSet) null);
      comparatorChain1.hashCode();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<Comparator<Integer>> linkedList0 = new LinkedList<Comparator<Integer>>();
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>(linkedList0);
      LinkedList<Comparator<Object>> linkedList1 = new LinkedList<Comparator<Object>>();
      BitSet bitSet0 = new BitSet();
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>(linkedList1, bitSet0);
      Comparator.nullsFirst((Comparator<? super Object>) comparatorChain1);
      comparatorChain0.size();
      comparatorChain0.hashCode();
      LinkedList<Comparator<ComparatorChain<Object>>> linkedList2 = new LinkedList<Comparator<ComparatorChain<Object>>>();
      ComparatorChain<ComparatorChain<Object>> comparatorChain2 = new ComparatorChain<ComparatorChain<Object>>(linkedList2, bitSet0);
      ComparatorChain<ComparatorChain<Object>> comparatorChain3 = new ComparatorChain<ComparatorChain<Object>>(linkedList2, bitSet0);
      Comparator.naturalOrder();
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator.comparingInt((ToIntFunction<? super Integer>) toIntFunction0);
      // Undeclared exception!
      try { 
        comparatorChain2.setComparator(0, (Comparator<ComparatorChain<Object>>) comparatorChain3, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ComparatorChain<Comparator<Object>> comparatorChain0 = new ComparatorChain<Comparator<Object>>();
      assertEquals(0, comparatorChain0.size());
      
      comparatorChain0.hashCode();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>(comparatorChain0, true);
      assertFalse(comparatorChain1.equals((Object)comparatorChain0));
      
      try { 
        comparatorChain0.setComparator(1, (Comparator<Object>) comparatorChain1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>();
      comparatorChain0.isLocked();
      ComparatorChain<ComparatorChain<Integer>> comparatorChain1 = new ComparatorChain<ComparatorChain<Integer>>();
      Comparator.reverseOrder();
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator.comparingLong((ToLongFunction<? super Comparable<Object>>) toLongFunction0);
      Comparator<Integer> comparator0 = Comparator.nullsLast((Comparator<? super Integer>) comparatorChain0);
      comparatorChain0.addComparator(comparator0);
      comparatorChain1.isLocked();
      ComparatorChain<Object> comparatorChain2 = new ComparatorChain<Object>();
      comparatorChain2.addComparator((Comparator<Object>) null, false);
      ComparatorChain<Object> comparatorChain3 = new ComparatorChain<Object>(comparatorChain2);
      comparatorChain3.thenComparing((Comparator<? super Object>) comparatorChain2);
      comparatorChain3.setComparator(0, (Comparator<Object>) comparatorChain2);
      Integer integer0 = new Integer(0);
      comparatorChain0.compare(integer0, (Integer) null);
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator1 = Comparator.comparingDouble((ToDoubleFunction<? super Object>) toDoubleFunction0);
      comparatorChain3.addComparator(comparator1, false);
      comparatorChain2.isLocked();
      ComparatorChain<ComparatorChain<Object>> comparatorChain4 = new ComparatorChain<ComparatorChain<Object>>();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Comparator<ComparatorChain<Object>> comparator2 = Comparator.comparing((Function<? super ComparatorChain<Object>, ? extends Integer>) function0, (Comparator<? super Integer>) comparator1);
      try { 
        comparatorChain4.setComparator(0, comparator2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-13L), 22L).when(toLongFunction0).applyAsLong(any());
      Comparator<Object> comparator0 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(comparator0);
      int int0 = comparatorChain0.compare(comparator0, comparator0);
      assertTrue(comparatorChain0.isLocked());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ComparatorChain<Comparator<Object>> comparatorChain0 = new ComparatorChain<Comparator<Object>>();
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>();
      ComparatorChain<Object> comparatorChain2 = new ComparatorChain<Object>(comparatorChain1, true);
      boolean boolean0 = comparatorChain1.equals(comparatorChain2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      Comparator<ComparatorChain<ByteBuffer>> comparator0 = Comparator.nullsLast((Comparator<? super ComparatorChain<ByteBuffer>>) comparatorChain0);
      ComparatorChain<ComparatorChain<ByteBuffer>> comparatorChain1 = new ComparatorChain<ComparatorChain<ByteBuffer>>(comparator0);
      int int0 = comparatorChain1.compare((ComparatorChain<ByteBuffer>) null, (ComparatorChain<ByteBuffer>) null);
      assertTrue(comparatorChain1.isLocked());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      ComparatorChain<ComparatorChain<Object>> comparatorChain1 = new ComparatorChain<ComparatorChain<Object>>((Comparator<ComparatorChain<Object>>) null);
      // Undeclared exception!
      try { 
        comparatorChain1.compare(comparatorChain0, comparatorChain0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      Object object0 = new Object();
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>(comparatorChain0);
      boolean boolean0 = comparatorChain0.equals(comparatorChain1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<Comparator<Integer>> linkedList0 = new LinkedList<Comparator<Integer>>();
      Function<Object, ByteBuffer> function0 = (Function<Object, ByteBuffer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparing((Function<? super Object, ? extends ByteBuffer>) function0);
      Comparator.nullsLast((Comparator<? super ComparatorChain<Integer>>) comparator0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>((List<Comparator<Object>>) null, (BitSet) null);
      LinkedList<Comparator<ByteBuffer>> linkedList1 = new LinkedList<Comparator<ByteBuffer>>();
      ComparatorChain<ByteBuffer> comparatorChain1 = new ComparatorChain<ByteBuffer>(linkedList1, (BitSet) null);
      comparatorChain0.equals(comparatorChain1);
      ComparatorChain<ByteBuffer> comparatorChain2 = null;
      try {
        comparatorChain2 = new ComparatorChain<ByteBuffer>((List<Comparator<ByteBuffer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(toDoubleFunction0).applyAsDouble(any());
      Comparator<Object> comparator0 = Comparator.comparingDouble((ToDoubleFunction<? super Object>) toDoubleFunction0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(comparator0, true);
      comparatorChain0.setComparator(0, comparator0);
      comparatorChain0.equals(comparator0);
      ToDoubleFunction<Object> toDoubleFunction1 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<ComparatorChain<Integer>> comparator1 = Comparator.comparingDouble((ToDoubleFunction<? super ComparatorChain<Integer>>) toDoubleFunction1);
      ComparatorChain<ComparatorChain<Integer>> comparatorChain1 = new ComparatorChain<ComparatorChain<Integer>>(comparator1, false);
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator.comparingInt((ToIntFunction<? super Object>) toIntFunction0);
      comparatorChain1.setForwardSort(0);
      comparatorChain1.equals(comparatorChain0);
      comparatorChain1.equals(comparator1);
      LinkedList<Comparator<Comparable<Integer>>> linkedList0 = new LinkedList<Comparator<Comparable<Integer>>>();
      BitSet bitSet0 = new BitSet();
      ComparatorChain<Comparable<Integer>> comparatorChain2 = new ComparatorChain<Comparable<Integer>>(linkedList0, bitSet0);
      ComparatorChain<Comparable<Integer>> comparatorChain3 = new ComparatorChain<Comparable<Integer>>(comparatorChain2, true);
      comparatorChain3.setReverseSort(0);
      comparatorChain2.addComparator((Comparator<Comparable<Integer>>) comparatorChain3, false);
      Comparator<Object> comparator2 = Comparator.nullsFirst((Comparator<? super Object>) comparator0);
      comparatorChain0.addComparator(comparator2);
      ComparatorChain<Integer> comparatorChain4 = new ComparatorChain<Integer>((Comparator<Integer>) null, false);
      comparatorChain4.setReverseSort(0);
      comparatorChain4.equals(comparatorChain0);
      LinkedList<Comparator<Object>> linkedList1 = new LinkedList<Comparator<Object>>();
      ComparatorChain<Object> comparatorChain5 = new ComparatorChain<Object>(linkedList1, bitSet0);
      int int0 = comparatorChain0.compare(comparatorChain3, comparatorChain5);
      assertTrue(comparatorChain0.isLocked());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      Comparator<Object> comparator0 = Comparator.nullsFirst((Comparator<? super Object>) comparatorChain0);
      try { 
        comparatorChain0.setComparator((-3794), comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Function<Object, Comparable<Object>> function0 = (Function<Object, Comparable<Object>>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function0).apply(any());
      Comparator<Integer> comparator0 = Comparator.comparing((Function<? super Integer, ? extends Comparable<Object>>) function0);
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>(comparator0);
      comparatorChain0.equals(comparator0);
      int int0 = 1;
      comparatorChain0.addComparator(comparator0, false);
      comparatorChain0.setComparator(1, comparator0);
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>((Comparator<Object>) null);
      comparatorChain1.equals(comparatorChain0);
      int int1 = 0;
      comparatorChain1.setComparator(0, (Comparator<Object>) null, false);
      int int2 = 1;
      Integer integer0 = new Integer(1);
      int int3 = (-793);
      Integer integer1 = new Integer((-793));
      // Undeclared exception!
      try { 
        comparatorChain0.compare(integer0, integer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Comparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>(comparatorChain0, true);
      try { 
        comparatorChain1.compare(comparatorChain1, comparatorChain0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ComparatorChains must contain at least one Comparator
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 1348L).when(toLongFunction0).applyAsLong(any());
      Comparator<Object> comparator0 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(comparator0, true);
      long[] longArray0 = new long[1];
      longArray0[0] = (-1153L);
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      comparatorChain0.equals(longBuffer0);
      Comparator<Object> comparator1 = Comparator.nullsLast((Comparator<? super Object>) comparator0);
      Comparator<ComparatorChain<LongBuffer>> comparator2 = Comparator.nullsFirst((Comparator<? super ComparatorChain<LongBuffer>>) comparator1);
      ComparatorChain<ComparatorChain<LongBuffer>> comparatorChain1 = new ComparatorChain<ComparatorChain<LongBuffer>>(comparator2);
      ComparatorChain<ComparatorChain<LongBuffer>> comparatorChain2 = new ComparatorChain<ComparatorChain<LongBuffer>>(comparatorChain1, false);
      comparatorChain2.hashCode();
      comparatorChain0.hashCode();
      comparatorChain0.compare(comparator1, comparator1);
      Function<Object, Object> function0 = Function.identity();
      Comparator<LongBuffer> comparator3 = Comparator.comparing((Function<? super LongBuffer, ?>) function0, (Comparator<? super Object>) comparator1);
      ComparatorChain<LongBuffer> comparatorChain3 = new ComparatorChain<LongBuffer>(comparator3);
      boolean boolean0 = comparatorChain3.equals(comparatorChain0);
      assertTrue(comparatorChain0.isLocked());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<Comparator<Integer>> linkedList0 = new LinkedList<Comparator<Integer>>();
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>(linkedList0);
      ComparatorChain<Integer> comparatorChain1 = new ComparatorChain<Integer>(comparatorChain0);
      comparatorChain1.addComparator((Comparator<Integer>) comparatorChain0, true);
      ComparatorChain<ComparatorChain<Object>> comparatorChain2 = new ComparatorChain<ComparatorChain<Object>>();
      Comparator<Comparable<Object>> comparator0 = Comparator.reverseOrder();
      Comparator<Comparable<Object>> comparator1 = Comparator.naturalOrder();
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator.comparingLong((ToLongFunction<? super Integer>) toLongFunction0);
      comparatorChain2.size();
      ComparatorChain<Comparable<Object>> comparatorChain3 = new ComparatorChain<Comparable<Object>>(comparator0);
      comparatorChain3.setComparator(0, comparator1, false);
      comparatorChain1.equals((Object) null);
      ComparatorChain<Object> comparatorChain4 = new ComparatorChain<Object>((Comparator<Object>) null, false);
      comparatorChain0.size();
      comparatorChain1.isLocked();
      Integer integer0 = new Integer(0);
      try { 
        comparatorChain0.compare(integer0, integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ComparatorChains must contain at least one Comparator
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      try { 
        comparatorChain0.compare(comparatorChain0, comparatorChain0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ComparatorChains must contain at least one Comparator
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedList<Comparator<Integer>> linkedList0 = new LinkedList<Comparator<Integer>>();
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      boolean boolean0 = comparatorChain0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ComparatorChain<ByteBuffer> comparatorChain0 = new ComparatorChain<ByteBuffer>();
      comparatorChain0.addComparator((Comparator<ByteBuffer>) null, true);
      comparatorChain0.hashCode();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator<ComparatorChain<Object>> comparator0 = Comparator.comparingLong((ToLongFunction<? super ComparatorChain<Object>>) toLongFunction0);
      ComparatorChain<ComparatorChain<Object>> comparatorChain0 = new ComparatorChain<ComparatorChain<Object>>(comparator0);
      comparatorChain0.addComparator(comparator0);
      assertFalse(comparatorChain0.isLocked());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ComparatorChain<ComparatorChain<ByteBuffer>> comparatorChain0 = new ComparatorChain<ComparatorChain<ByteBuffer>>();
      Comparator<ComparatorChain<ByteBuffer>> comparator0 = Comparator.nullsLast((Comparator<? super ComparatorChain<ByteBuffer>>) comparatorChain0);
      comparatorChain0.addComparator(comparator0);
      comparatorChain0.hashCode();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      int int0 = comparatorChain0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ComparatorChain<Comparable<Integer>> comparatorChain0 = new ComparatorChain<Comparable<Integer>>();
      boolean boolean0 = comparatorChain0.isLocked();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LinkedList<Comparator<Integer>> linkedList0 = new LinkedList<Comparator<Integer>>();
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Integer> comparator0 = Comparator.comparingInt((ToIntFunction<? super Integer>) toIntFunction0);
      linkedList0.add(comparator0);
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>(linkedList0);
      comparatorChain0.equals(linkedList0);
      linkedList0.iterator();
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      comparatorChain0.thenComparingDouble(toDoubleFunction0);
      LinkedList<Comparator<Object>> linkedList1 = new LinkedList<Comparator<Object>>();
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>(linkedList1);
      ComparatorChain<Object> comparatorChain2 = new ComparatorChain<Object>(comparatorChain1, false);
      comparatorChain2.size();
      comparatorChain1.isLocked();
      int int0 = (-2959);
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      predicate0.negate();
      linkedList1.removeIf(predicate0);
      // Undeclared exception!
      try { 
        comparatorChain1.setReverseSort((-2959));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -2959
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ComparatorChain<ComparatorChain<ByteBuffer>> comparatorChain0 = new ComparatorChain<ComparatorChain<ByteBuffer>>();
      // Undeclared exception!
      try { 
        comparatorChain0.setReverseSort((-508));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -508
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Comparable<Object>> comparator0 = Comparator.comparingInt((ToIntFunction<? super Comparable<Object>>) toIntFunction0);
      ComparatorChain<Comparable<Object>> comparatorChain0 = new ComparatorChain<Comparable<Object>>(comparator0);
      comparatorChain0.setComparator(0, comparator0, false);
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      comparatorChain0.thenComparingLong(toLongFunction0);
      comparatorChain0.reversed();
      Comparator.naturalOrder();
      int int0 = 1687;
      comparatorChain0.setForwardSort(1687);
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      ToLongFunction<Object> toLongFunction1 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator1 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction1);
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>(comparator1, true);
      Comparator<Object> comparator2 = Comparator.nullsLast((Comparator<? super Object>) comparatorChain1);
      linkedList0.addFirst(comparator2);
      ComparatorChain<Object> comparatorChain2 = new ComparatorChain<Object>(linkedList0);
      LinkedList<Comparator<Integer>> linkedList1 = new LinkedList<Comparator<Integer>>();
      int int1 = (-2228);
      // Undeclared exception!
      try { 
        LongBuffer.allocate((-2228));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.LongBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ComparatorChain<Comparator<Object>> comparatorChain0 = new ComparatorChain<Comparator<Object>>();
      // Undeclared exception!
      try { 
        comparatorChain0.setForwardSort((-582));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -582
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LinkedList<Comparator<Integer>> linkedList0 = new LinkedList<Comparator<Integer>>();
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      boolean boolean0 = comparatorChain0.equals(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      ComparatorChain<Comparator<Object>> comparatorChain1 = new ComparatorChain<Comparator<Object>>();
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      boolean boolean0 = comparatorChain0.equals(comparatorChain0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ComparatorChain<Comparator<Object>> comparatorChain0 = new ComparatorChain<Comparator<Object>>();
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>();
      boolean boolean0 = comparatorChain1.equals(comparatorChain0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ComparatorChain<ComparatorChain<Object>> comparatorChain0 = new ComparatorChain<ComparatorChain<Object>>((Comparator<ComparatorChain<Object>>) null, true);
      comparatorChain0.setComparator(0, (Comparator<ComparatorChain<Object>>) null, false);
      assertEquals(1, comparatorChain0.size());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>();
      Function<Object, ByteBuffer> function0 = (Function<Object, ByteBuffer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparing((Function<? super Object, ? extends ByteBuffer>) function0);
      Comparator.nullsLast((Comparator<? super ComparatorChain<Integer>>) comparator0);
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>((List<Comparator<Object>>) null, (BitSet) null);
      comparatorChain1.equals(comparatorChain0);
      ComparatorChain<ByteBuffer> comparatorChain2 = null;
      try {
        comparatorChain2 = new ComparatorChain<ByteBuffer>((List<Comparator<ByteBuffer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>(comparatorChain0);
      assertFalse(comparatorChain1.equals((Object)comparatorChain0));
      
      comparatorChain0.addComparator((Comparator<Object>) comparatorChain1, false);
      assertEquals(1, comparatorChain1.size());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LinkedList<Comparator<ComparatorChain<Integer>>> linkedList0 = new LinkedList<Comparator<ComparatorChain<Integer>>>();
      BitSet bitSet0 = new BitSet();
      ComparatorChain<ComparatorChain<Integer>> comparatorChain0 = new ComparatorChain<ComparatorChain<Integer>>(linkedList0, bitSet0);
      linkedList0.add((Comparator<ComparatorChain<Integer>>) comparatorChain0);
      ComparatorChain<ComparatorChain<Integer>> comparatorChain1 = new ComparatorChain<ComparatorChain<Integer>>(linkedList0);
      linkedList0.add((Comparator<ComparatorChain<Integer>>) comparatorChain1);
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparingInt((ToIntFunction<? super Object>) toIntFunction0);
      ComparatorChain<ComparatorChain<Integer>> comparatorChain2 = new ComparatorChain<ComparatorChain<Integer>>(comparatorChain1);
      comparatorChain2.reversed();
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Function<Object, Comparable<Object>> function0 = (Function<Object, Comparable<Object>>) mock(Function.class, new ViolatedAssumptionAnswer());
      comparatorChain2.addComparator((Comparator<ComparatorChain<Integer>>) comparatorChain0, false);
      comparatorChain0.thenComparing((Function<? super ComparatorChain<Integer>, ? extends Comparable<Object>>) function0);
      Comparator<Object> comparator1 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      ComparatorChain<ComparatorChain<Integer>> comparatorChain3 = new ComparatorChain<ComparatorChain<Integer>>(comparatorChain2, true);
      assertTrue(comparatorChain2.equals((Object)comparatorChain1));
      
      Comparator<ComparatorChain<Object>> comparator2 = Comparator.nullsFirst((Comparator<? super ComparatorChain<Object>>) comparator1);
      ComparatorChain<ComparatorChain<Object>> comparatorChain4 = new ComparatorChain<ComparatorChain<Object>>(comparator2, true);
      comparatorChain4.setComparator(0, comparator2, false);
      boolean boolean0 = comparatorChain4.equals(comparator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ComparatorChain<ComparatorChain<Object>> comparatorChain0 = new ComparatorChain<ComparatorChain<Object>>();
      ComparatorChain<Comparable<Object>> comparatorChain1 = new ComparatorChain<Comparable<Object>>();
      LinkedList<Comparator<Comparable<Object>>> linkedList0 = new LinkedList<Comparator<Comparable<Object>>>();
      ComparatorChain<Comparable<Object>> comparatorChain2 = new ComparatorChain<Comparable<Object>>(linkedList0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        comparatorChain1.setComparator(941, (Comparator<Comparable<Object>>) comparatorChain2, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 941, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      // Undeclared exception!
      try { 
        comparatorChain0.setComparator(1, (Comparator<Object>) null, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(linkedList0, (BitSet) null);
      Comparator<Object> comparator0 = Comparator.nullsFirst((Comparator<? super Object>) comparatorChain0);
      // Undeclared exception!
      try { 
        comparatorChain0.setComparator(0, comparator0, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }
}
