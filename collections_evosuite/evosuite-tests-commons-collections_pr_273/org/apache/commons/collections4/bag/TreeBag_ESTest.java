/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 12:22:47 GMT 2025
 */

package org.apache.commons.collections4.bag;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.SortedMap;
import java.util.TreeMap;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.bag.AbstractMapBag;
import org.apache.commons.collections4.bag.CollectionBag;
import org.apache.commons.collections4.bag.TreeBag;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class TreeBag_ESTest extends TreeBag_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      CollectionBag<Object> collectionBag0 = new CollectionBag<Object>(treeBag0);
      collectionBag0.add((Object) null);
      Object object0 = treeBag0.last();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      doReturn(0).when(comparator0).compare(any() , any());
      TreeBag<AbstractMapBag.MutableInteger> treeBag0 = new TreeBag<AbstractMapBag.MutableInteger>(comparator0);
      AbstractMapBag.MutableInteger abstractMapBag_MutableInteger0 = new AbstractMapBag.MutableInteger((-1588));
      treeBag0.add(abstractMapBag_MutableInteger0);
      AbstractMapBag.MutableInteger abstractMapBag_MutableInteger1 = treeBag0.last();
      assertSame(abstractMapBag_MutableInteger1, abstractMapBag_MutableInteger0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TreeBag<Object> treeBag0 = new TreeBag<Object>();
      SortedMap<Object, AbstractMapBag.MutableInteger> sortedMap0 = (SortedMap<Object, AbstractMapBag.MutableInteger>)treeBag0.getMap();
      assertEquals(0, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      doReturn(0).when(comparator0).compare(any() , any());
      TreeBag<AbstractMapBag.MutableInteger> treeBag0 = new TreeBag<AbstractMapBag.MutableInteger>(comparator0);
      AbstractMapBag.MutableInteger abstractMapBag_MutableInteger0 = new AbstractMapBag.MutableInteger(0);
      treeBag0.add(abstractMapBag_MutableInteger0);
      SortedMap<AbstractMapBag.MutableInteger, AbstractMapBag.MutableInteger> sortedMap0 = (SortedMap<AbstractMapBag.MutableInteger, AbstractMapBag.MutableInteger>)treeBag0.getMap();
      assertEquals(1, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      doReturn(0).when(comparator0).compare(any() , any());
      TreeBag<AbstractMapBag.MutableInteger> treeBag0 = new TreeBag<AbstractMapBag.MutableInteger>(comparator0);
      treeBag0.add((AbstractMapBag.MutableInteger) null);
      AbstractMapBag.MutableInteger abstractMapBag_MutableInteger0 = treeBag0.first();
      assertNull(abstractMapBag_MutableInteger0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      doReturn(0).when(comparator0).compare(any() , any());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      treeBag0.add((Object) pushbackInputStream0);
      Object object0 = treeBag0.first();
      assertSame(object0, pushbackInputStream0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TreeBag<TreeMap<Object, Object>> treeBag0 = new TreeBag<TreeMap<Object, Object>>();
      Comparator<? super TreeMap<Object, Object>> comparator0 = treeBag0.comparator();
      assertNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      doReturn(0, 0).when(comparator0).compare(any() , any());
      TreeBag<TreeMap<Boolean, Boolean>> treeBag0 = new TreeBag<TreeMap<Boolean, Boolean>>(comparator0);
      TreeMap<Boolean, Boolean> treeMap0 = new TreeMap<Boolean, Boolean>();
      treeBag0.add(treeMap0);
      boolean boolean0 = treeBag0.add(treeMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TreeBag<AbstractMapBag.MutableInteger> treeBag0 = new TreeBag<AbstractMapBag.MutableInteger>();
      TreeBag<Object> treeBag1 = new TreeBag<Object>(treeBag0);
      // Undeclared exception!
      try { 
        treeBag1.add((Object) treeBag0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Objects of type class org.apache.commons.collections4.bag.TreeBag cannot be added to a naturally ordered TreeBag as it does not implement Comparable
         //
         verifyException("org.apache.commons.collections4.bag.TreeBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TreeBag<Boolean> treeBag0 = null;
      try {
        treeBag0 = new TreeBag<Boolean>((Collection<? extends Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.AbstractMapBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TreeBag<Object> treeBag0 = new TreeBag<Object>((Comparator<? super Object>) null);
      // Undeclared exception!
      try { 
        treeBag0.add((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // object
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      TreeBag<AbstractMapBag.MutableInteger> treeBag0 = new TreeBag<AbstractMapBag.MutableInteger>(comparator0);
      Comparator<? super AbstractMapBag.MutableInteger> comparator1 = treeBag0.comparator();
      assertNotNull(comparator1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      linkedList0.push(instanceofPredicate0);
      TreeBag<InstanceofPredicate> treeBag0 = null;
      try {
        treeBag0 = new TreeBag<InstanceofPredicate>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Objects of type class org.apache.commons.collections4.functors.InstanceofPredicate cannot be added to a naturally ordered TreeBag as it does not implement Comparable
         //
         verifyException("org.apache.commons.collections4.bag.TreeBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TreeBag<Predicate<InstanceofPredicate>> treeBag0 = new TreeBag<Predicate<InstanceofPredicate>>();
      TreeBag<Object> treeBag1 = new TreeBag<Object>(treeBag0);
      boolean boolean0 = treeBag1.add((Object) "MoieoB2dWe");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      // Undeclared exception!
      try { 
        treeBag0.last();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<AbstractMapBag.MutableInteger> linkedList0 = new LinkedList<AbstractMapBag.MutableInteger>();
      TreeBag<AbstractMapBag.MutableInteger> treeBag0 = new TreeBag<AbstractMapBag.MutableInteger>(linkedList0);
      // Undeclared exception!
      try { 
        treeBag0.first();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }
}
