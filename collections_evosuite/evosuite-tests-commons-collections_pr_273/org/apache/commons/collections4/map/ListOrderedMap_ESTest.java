/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 12:46:47 GMT 2025
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.map.ListOrderedMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ListOrderedMap_ESTest extends ListOrderedMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ListOrderedMap<Integer, Integer> listOrderedMap0 = new ListOrderedMap<Integer, Integer>();
      Integer integer0 = new Integer((-2515));
      listOrderedMap0.putIfAbsent(integer0, integer0);
      Integer integer1 = new Integer((-864));
      listOrderedMap0.putIfAbsent(integer1, (Integer) null);
      listOrderedMap0.put((Integer) null, (Integer) null);
      listOrderedMap0.previousKey((Object) null);
      assertEquals(3, listOrderedMap0.size());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ListOrderedMap<Integer, Integer> listOrderedMap0 = new ListOrderedMap<Integer, Integer>();
      listOrderedMap0.put((Integer) null, (Integer) null);
      Integer integer0 = listOrderedMap0.previousKey((Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<HashMap<Integer, Integer>, Integer> hashMap0 = new HashMap<HashMap<Integer, Integer>, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(13);
      hashMap0.put(hashMap1, integer0);
      ListOrderedMap<HashMap<Integer, Integer>, Integer> listOrderedMap0 = new ListOrderedMap<HashMap<Integer, Integer>, Integer>(hashMap0);
      BiFunction<Integer, Integer, Integer> biFunction0 = (BiFunction<Integer, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyInt() , anyInt());
      hashMap0.merge(hashMap1, integer0, biFunction0);
      HashMap<Integer, Integer> hashMap2 = listOrderedMap0.nextKey(hashMap1);
      assertNull(hashMap2);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ListOrderedMap<ListOrderedMap<Object, Integer>, ListOrderedMap<Object, Integer>> listOrderedMap0 = new ListOrderedMap<ListOrderedMap<Object, Integer>, ListOrderedMap<Object, Integer>>();
      ListOrderedMap.ValuesView<ListOrderedMap<Object, Integer>> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<ListOrderedMap<Object, Integer>>(listOrderedMap0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put(listOrderedMap0, listOrderedMap_ValuesView0);
      ListOrderedMap<LinkedList<Object>, Integer> listOrderedMap1 = new ListOrderedMap<LinkedList<Object>, Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListOrderedMap.ListOrderedMapEntry<LinkedList<Object>, Integer> listOrderedMap_ListOrderedMapEntry0 = new ListOrderedMap.ListOrderedMapEntry<LinkedList<Object>, Integer>(listOrderedMap1, linkedList0);
      Object object0 = listOrderedMap_ListOrderedMapEntry0.getKey();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      hashMap0.put(object0, linkedList1);
      ListOrderedMap<Object, Object> listOrderedMap2 = new ListOrderedMap<Object, Object>(hashMap0);
      Object object1 = listOrderedMap2.nextKey(listOrderedMap_ValuesView0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Integer integer0 = new Integer(2625);
      ListOrderedMap<Integer, Integer> listOrderedMap0 = new ListOrderedMap<Integer, Integer>();
      listOrderedMap0.putIfAbsent((Integer) null, (Integer) null);
      listOrderedMap0.put(integer0, integer0);
      Integer integer1 = listOrderedMap0.lastKey();
      assertEquals(2625, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Integer integer0 = new Integer(123);
      ListOrderedMap<Integer, Integer> listOrderedMap0 = new ListOrderedMap<Integer, Integer>();
      Integer integer1 = listOrderedMap0.putIfAbsent(integer0, integer0);
      listOrderedMap0.put(integer1, integer0);
      listOrderedMap0.get(1);
      assertEquals(2, listOrderedMap0.size());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ListOrderedMap<Integer, Integer> listOrderedMap0 = new ListOrderedMap<Integer, Integer>(hashMap0);
      ListOrderedMap.ValuesView<Integer> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<Integer>(listOrderedMap0);
      Iterator<Integer> iterator0 = listOrderedMap_ValuesView0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ListOrderedMap<Object, HashMap<Object, Integer>> listOrderedMap0 = new ListOrderedMap<Object, HashMap<Object, Integer>>();
      ListOrderedMap.ListOrderedMapEntry<Object, HashMap<Object, Integer>> listOrderedMap_ListOrderedMapEntry0 = new ListOrderedMap.ListOrderedMapEntry<Object, HashMap<Object, Integer>>(listOrderedMap0, listOrderedMap0);
      HashMap<Object, Integer> hashMap0 = listOrderedMap_ListOrderedMapEntry0.getValue();
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ListOrderedMap<Object, Integer> listOrderedMap0 = new ListOrderedMap<Object, Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListOrderedMap.EntrySetView<Object, Integer> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<Object, Integer>(listOrderedMap0, linkedList0);
      int int0 = listOrderedMap_EntrySetView0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ListOrderedMap<Integer, Integer> listOrderedMap0 = ListOrderedMap.listOrderedMap((Map<Integer, Integer>) hashMap0);
      List<Integer> list0 = listOrderedMap0.asList();
      ListOrderedMap.EntrySetView<Integer, Integer> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<Integer, Integer>(listOrderedMap0, list0);
      Iterator<Map.Entry<Integer, Integer>> iterator0 = (Iterator<Map.Entry<Integer, Integer>>)listOrderedMap_EntrySetView0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ListOrderedMap<Integer, HashMap<Integer, Integer>> listOrderedMap0 = new ListOrderedMap<Integer, HashMap<Integer, Integer>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      ListOrderedMap<Object, Object> listOrderedMap1 = new ListOrderedMap<Object, Object>();
      listOrderedMap1.put((Object) hashMap0, (Object) listOrderedMap0);
      ListOrderedMap.ListOrderedMapIterator<Object, Object> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<Object, Object>(listOrderedMap1);
      listOrderedMap_ListOrderedMapIterator0.next();
      listOrderedMap_ListOrderedMapIterator0.remove();
      assertFalse(listOrderedMap_ListOrderedMapIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ListOrderedMap<Integer, Integer> listOrderedMap0 = new ListOrderedMap<Integer, Integer>();
      Integer integer0 = new Integer(763);
      listOrderedMap0.put(integer0, integer0);
      ListOrderedMap.ListOrderedMapIterator<Integer, Integer> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<Integer, Integer>(listOrderedMap0);
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      listOrderedMap_ListOrderedMapIterator0.forEachRemaining(consumer0);
      Integer integer1 = listOrderedMap_ListOrderedMapIterator0.previous();
      assertEquals(763, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ListOrderedMap<Integer, Integer> listOrderedMap0 = new ListOrderedMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      listOrderedMap0.putIfAbsent(integer0, integer0);
      listOrderedMap0.setValue(0, (Integer) null);
      assertEquals(1, listOrderedMap0.size());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put((Object) null, (Object) null);
      ListOrderedMap<Object, Object> listOrderedMap0 = new ListOrderedMap<Object, Object>(hashMap0);
      listOrderedMap0.remove(0);
      assertEquals(0, listOrderedMap0.size());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ListOrderedMap<Integer, Integer> listOrderedMap0 = new ListOrderedMap<Integer, Integer>();
      ListOrderedMap.KeySetView<Integer> listOrderedMap_KeySetView0 = new ListOrderedMap.KeySetView<Integer>(listOrderedMap0);
      ListOrderedMap<HashMap<Integer, Integer>, ListOrderedMap.KeySetView<Integer>> listOrderedMap1 = new ListOrderedMap<HashMap<Integer, Integer>, ListOrderedMap.KeySetView<Integer>>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      listOrderedMap1.putIfAbsent(hashMap0, listOrderedMap_KeySetView0);
      listOrderedMap1.put(hashMap0, listOrderedMap_KeySetView0);
      assertEquals(1, listOrderedMap1.size());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<HashMap<Integer, Integer>, Integer> hashMap0 = new HashMap<HashMap<Integer, Integer>, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-1));
      hashMap0.put(hashMap1, integer0);
      ListOrderedMap<HashMap<Integer, Integer>, Integer> listOrderedMap0 = ListOrderedMap.listOrderedMap((Map<HashMap<Integer, Integer>, Integer>) hashMap0);
      OrderedMapIterator<HashMap<Integer, Integer>, Integer> orderedMapIterator0 = listOrderedMap0.mapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ListOrderedMap<Integer, Integer> listOrderedMap0 = new ListOrderedMap<Integer, Integer>();
      listOrderedMap0.putIfAbsent((Integer) null, (Integer) null);
      Integer integer0 = listOrderedMap0.lastKey();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ListOrderedMap<Integer, Integer> listOrderedMap0 = new ListOrderedMap<Integer, Integer>();
      ListOrderedMap.KeySetView<Integer> listOrderedMap_KeySetView0 = new ListOrderedMap.KeySetView<Integer>(listOrderedMap0);
      ListOrderedMap<HashMap<Integer, Integer>, ListOrderedMap.KeySetView<Integer>> listOrderedMap1 = new ListOrderedMap<HashMap<Integer, Integer>, ListOrderedMap.KeySetView<Integer>>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ListOrderedMap.KeySetView<Integer> listOrderedMap_KeySetView1 = listOrderedMap1.putIfAbsent(hashMap0, listOrderedMap_KeySetView0);
      assertNull(listOrderedMap_KeySetView1);
      
      Set<HashMap<Integer, Integer>> set0 = listOrderedMap1.keySet();
      assertTrue(set0.contains(hashMap0));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ListOrderedMap<Object, ListOrderedMap.ValuesView<Integer>> listOrderedMap0 = new ListOrderedMap<Object, ListOrderedMap.ValuesView<Integer>>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      ListOrderedMap<Object, Integer> listOrderedMap1 = new ListOrderedMap<Object, Integer>(hashMap0);
      ListOrderedMap.ValuesView<Integer> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<Integer>(listOrderedMap1);
      listOrderedMap0.putIfAbsent(listOrderedMap0, listOrderedMap_ValuesView0);
      int int0 = listOrderedMap0.indexOf(listOrderedMap0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ListOrderedMap<Integer, ListOrderedMap.ValuesView<Integer>> listOrderedMap0 = new ListOrderedMap<Integer, ListOrderedMap.ValuesView<Integer>>();
      HashMap<ListOrderedMap.ValuesView<Integer>, Integer> hashMap0 = new HashMap<ListOrderedMap.ValuesView<Integer>, Integer>();
      ListOrderedMap<ListOrderedMap.ValuesView<Integer>, Integer> listOrderedMap1 = ListOrderedMap.listOrderedMap((Map<ListOrderedMap.ValuesView<Integer>, Integer>) hashMap0);
      Integer integer0 = new Integer(983);
      ListOrderedMap.ValuesView<Integer> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<Integer>(listOrderedMap1);
      listOrderedMap0.put(integer0, listOrderedMap_ValuesView0);
      ListOrderedMap.ValuesView<Integer> listOrderedMap_ValuesView1 = listOrderedMap0.getValue(0);
      assertSame(listOrderedMap_ValuesView1, listOrderedMap_ValuesView0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ListOrderedMap<Integer, Object> listOrderedMap0 = new ListOrderedMap<Integer, Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put(listOrderedMap0, linkedList0);
      ListOrderedMap<Object, Object> listOrderedMap1 = new ListOrderedMap<Object, Object>(hashMap0);
      ListOrderedMap listOrderedMap2 = (ListOrderedMap)listOrderedMap1.firstKey();
      assertTrue(listOrderedMap2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ListOrderedMap<Integer, HashMap<Integer, Integer>> listOrderedMap0 = new ListOrderedMap<Integer, HashMap<Integer, Integer>>();
      Integer integer0 = new Integer(0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      listOrderedMap0.put(0, integer0, hashMap0);
      Set<Map.Entry<Integer, HashMap<Integer, Integer>>> set0 = (Set<Map.Entry<Integer, HashMap<Integer, Integer>>>)listOrderedMap0.entrySet();
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ListOrderedMap<Integer, Integer> listOrderedMap0 = new ListOrderedMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        listOrderedMap0.setValue((-234), (Integer) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ListOrderedMap<Integer, Integer> listOrderedMap0 = new ListOrderedMap<Integer, Integer>();
      listOrderedMap0.map = (Map<Integer, Integer>) listOrderedMap0;
      ListOrderedMap.ValuesView<Integer> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<Integer>(listOrderedMap0);
      // Undeclared exception!
      try { 
        listOrderedMap0.remove((Object) listOrderedMap_ValuesView0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ListOrderedMap<ListOrderedMap.ValuesView<Integer>, Object> listOrderedMap0 = new ListOrderedMap<ListOrderedMap.ValuesView<Integer>, Object>();
      // Undeclared exception!
      try { 
        listOrderedMap0.remove(29);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 29, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ListOrderedMap<Object, Object> listOrderedMap0 = new ListOrderedMap<Object, Object>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ListOrderedMap<Integer, Integer> listOrderedMap1 = new ListOrderedMap<Integer, Integer>(hashMap0);
      ListOrderedMap.ValuesView<Integer> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<Integer>(listOrderedMap1);
      listOrderedMap0.putIfAbsent(listOrderedMap0, listOrderedMap_ValuesView0);
      // Undeclared exception!
      try { 
        listOrderedMap0.putAll((Map<?, ?>) listOrderedMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ListOrderedMap<Object, Object> listOrderedMap0 = new ListOrderedMap<Object, Object>();
      // Undeclared exception!
      try { 
        listOrderedMap0.putAll((Map<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Integer integer0 = new Integer(0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ListOrderedMap<Integer, HashMap<Integer, Integer>> listOrderedMap0 = new ListOrderedMap<Integer, HashMap<Integer, Integer>>();
      Integer integer1 = new Integer(182);
      listOrderedMap0.put(0, integer0, hashMap0);
      listOrderedMap0.putIfAbsent(integer1, (HashMap<Integer, Integer>) null);
      // Undeclared exception!
      try { 
        listOrderedMap0.putAll(0, (Map<? extends Integer, ? extends HashMap<Integer, Integer>>) listOrderedMap0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Integer integer0 = new Integer(0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ListOrderedMap<Integer, Integer> listOrderedMap0 = new ListOrderedMap<Integer, Integer>(hashMap0);
      hashMap0.put(integer0, integer0);
      // Undeclared exception!
      try { 
        listOrderedMap0.putAll(0, (Map<? extends Integer, ? extends Integer>) hashMap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<ListOrderedMap.ValuesView<Integer>, ListOrderedMap.ValuesView<Integer>> hashMap0 = new HashMap<ListOrderedMap.ValuesView<Integer>, ListOrderedMap.ValuesView<Integer>>();
      ListOrderedMap<ListOrderedMap.ValuesView<Integer>, ListOrderedMap.ValuesView<Integer>> listOrderedMap0 = ListOrderedMap.listOrderedMap((Map<ListOrderedMap.ValuesView<Integer>, ListOrderedMap.ValuesView<Integer>>) hashMap0);
      ListOrderedMap.ValuesView<Integer> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<Integer>((ListOrderedMap<?, Integer>) null);
      ListOrderedMap.ValuesView<Integer> listOrderedMap_ValuesView1 = new ListOrderedMap.ValuesView<Integer>((ListOrderedMap<?, Integer>) null);
      // Undeclared exception!
      try { 
        listOrderedMap0.put(listOrderedMap_ValuesView0, listOrderedMap_ValuesView1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap$ValuesView", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ListOrderedMap<Integer, HashMap<Integer, Integer>> listOrderedMap0 = new ListOrderedMap<Integer, HashMap<Integer, Integer>>();
      Integer integer0 = new Integer(0);
      listOrderedMap0.map = (Map<Integer, HashMap<Integer, Integer>>) listOrderedMap0;
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        listOrderedMap0.put(0, integer0, hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ListOrderedMap<Object, Object> listOrderedMap0 = new ListOrderedMap<Object, Object>();
      listOrderedMap0.map = (Map<Object, Object>) listOrderedMap0;
      // Undeclared exception!
      try { 
        ListOrderedMap.listOrderedMap((Map<Object, Object>) listOrderedMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListOrderedMap.listOrderedMap((Map<ListOrderedMap.ValuesView<Object>, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ListOrderedMap<Object, Object> listOrderedMap0 = new ListOrderedMap<Object, Object>();
      listOrderedMap0.map = (Map<Object, Object>) listOrderedMap0;
      // Undeclared exception!
      try { 
        listOrderedMap0.lastKey();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Integer integer0 = new Integer((-2193));
      ListOrderedMap<Integer, Integer> listOrderedMap0 = new ListOrderedMap<Integer, Integer>();
      ListOrderedMap<Integer, Integer> listOrderedMap1 = ListOrderedMap.listOrderedMap((Map<Integer, Integer>) listOrderedMap0);
      listOrderedMap0.putIfAbsent(integer0, integer0);
      // Undeclared exception!
      try { 
        listOrderedMap1.lastKey();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ListOrderedMap<Object, LinkedList<Object>> listOrderedMap0 = new ListOrderedMap<Object, LinkedList<Object>>();
      // Undeclared exception!
      try { 
        listOrderedMap0.getValue(534);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 534, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ListOrderedMap<Object, ListOrderedMap.ValuesView<Object>> listOrderedMap0 = new ListOrderedMap<Object, ListOrderedMap.ValuesView<Object>>();
      // Undeclared exception!
      try { 
        listOrderedMap0.get((-1088));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>(0);
      ListOrderedMap<Object, Object> listOrderedMap0 = new ListOrderedMap<Object, Object>(hashMap0);
      Integer integer0 = new Integer((-1381));
      hashMap0.put(integer0, integer0);
      // Undeclared exception!
      try { 
        listOrderedMap0.firstKey();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ListOrderedMap<Integer, ListOrderedMap<Integer, Integer>> listOrderedMap0 = new ListOrderedMap<Integer, ListOrderedMap<Integer, Integer>>();
      ListOrderedMap<Integer, ListOrderedMap<Integer, Integer>> listOrderedMap1 = ListOrderedMap.listOrderedMap((Map<Integer, ListOrderedMap<Integer, Integer>>) listOrderedMap0);
      listOrderedMap1.map = (Map<Integer, ListOrderedMap<Integer, Integer>>) listOrderedMap1;
      ListOrderedMap<Integer, ListOrderedMap<Integer, Integer>> listOrderedMap2 = null;
      try {
        listOrderedMap2 = new ListOrderedMap<Integer, ListOrderedMap<Integer, Integer>>(listOrderedMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ListOrderedMap<Object, Object> listOrderedMap0 = null;
      try {
        listOrderedMap0 = new ListOrderedMap<Object, Object>((Map<Object, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ListOrderedMap<Integer, Integer> listOrderedMap0 = new ListOrderedMap<Integer, Integer>(hashMap0);
      ListOrderedMap.ValuesView<Integer> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<Integer>(listOrderedMap0);
      ListOrderedMap<Integer, Object> listOrderedMap1 = new ListOrderedMap<Integer, Object>();
      ListOrderedMap<Integer, Object> listOrderedMap2 = new ListOrderedMap<Integer, Object>(listOrderedMap1);
      ListOrderedMap.EntrySetView<Integer, Object> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<Integer, Object>(listOrderedMap2, listOrderedMap_ValuesView0);
      ListOrderedMap<Object, Object> listOrderedMap3 = new ListOrderedMap<Object, Object>();
      boolean boolean0 = listOrderedMap_EntrySetView0.equals(listOrderedMap3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ListOrderedMap<Integer, Integer> listOrderedMap0 = new ListOrderedMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      Integer integer1 = listOrderedMap0.putIfAbsent((Integer) null, integer0);
      listOrderedMap0.put(0, (Integer) null, integer1);
      assertEquals(1, listOrderedMap0.size());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ListOrderedMap<Integer, Integer> listOrderedMap0 = new ListOrderedMap<Integer, Integer>();
      listOrderedMap0.put((Integer) null, (Integer) null);
      listOrderedMap0.remove((Object) null);
      assertTrue(listOrderedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ListOrderedMap<ListOrderedMap.ValuesView<Object>, Integer> listOrderedMap0 = new ListOrderedMap<ListOrderedMap.ValuesView<Object>, Integer>();
      // Undeclared exception!
      try { 
        listOrderedMap0.get(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ListOrderedMap<ListOrderedMap.ValuesView<Object>, Object> listOrderedMap0 = new ListOrderedMap<ListOrderedMap.ValuesView<Object>, Object>();
      Set<ListOrderedMap.ValuesView<Object>> set0 = listOrderedMap0.keySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ListOrderedMap<Object, HashMap<Integer, Integer>> listOrderedMap0 = new ListOrderedMap<Object, HashMap<Integer, Integer>>();
      List<Object> list0 = listOrderedMap0.keyList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ListOrderedMap<ListOrderedMap.KeySetView<Object>, Object> listOrderedMap0 = new ListOrderedMap<ListOrderedMap.KeySetView<Object>, Object>();
      int int0 = listOrderedMap0.indexOf(listOrderedMap0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ListOrderedMap<HashMap<Integer, Integer>, Integer> listOrderedMap0 = new ListOrderedMap<HashMap<Integer, Integer>, Integer>();
      listOrderedMap0.clear();
      assertTrue(listOrderedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ListOrderedMap<Integer, HashMap<Object, Object>> listOrderedMap0 = new ListOrderedMap<Integer, HashMap<Object, Object>>();
      // Undeclared exception!
      try { 
        listOrderedMap0.remove((-453));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ListOrderedMap<HashMap<Object, Integer>, HashMap<Integer, Integer>> listOrderedMap0 = new ListOrderedMap<HashMap<Object, Integer>, HashMap<Integer, Integer>>();
      ListOrderedMap.ListOrderedMapIterator<HashMap<Object, Integer>, HashMap<Integer, Integer>> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<HashMap<Object, Integer>, HashMap<Integer, Integer>>(listOrderedMap0);
      String string0 = listOrderedMap_ListOrderedMapIterator0.toString();
      assertEquals("Iterator[]", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ListOrderedMap<ListOrderedMap<Integer, Integer>, ListOrderedMap.ValuesView<Object>> listOrderedMap0 = new ListOrderedMap<ListOrderedMap<Integer, Integer>, ListOrderedMap.ValuesView<Object>>();
      ListOrderedMap.ListOrderedMapIterator<ListOrderedMap<Integer, Integer>, ListOrderedMap.ValuesView<Object>> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<ListOrderedMap<Integer, Integer>, ListOrderedMap.ValuesView<Object>>(listOrderedMap0);
      // Undeclared exception!
      try { 
        listOrderedMap_ListOrderedMapIterator0.setValue((ListOrderedMap.ValuesView<Object>) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // setValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ListOrderedMap<Integer, Object> listOrderedMap0 = new ListOrderedMap<Integer, Object>();
      ListOrderedMap.ListOrderedMapIterator<Integer, Object> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<Integer, Object>(listOrderedMap0);
      // Undeclared exception!
      try { 
        listOrderedMap_ListOrderedMapIterator0.getValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, integer0);
      ListOrderedMap<Integer, Integer> listOrderedMap0 = ListOrderedMap.listOrderedMap((Map<Integer, Integer>) hashMap0);
      ListOrderedMap.ListOrderedMapIterator<Integer, Integer> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<Integer, Integer>(listOrderedMap0);
      listOrderedMap_ListOrderedMapIterator0.next();
      Integer integer1 = listOrderedMap_ListOrderedMapIterator0.getValue();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ListOrderedMap<Integer, Integer> listOrderedMap0 = new ListOrderedMap<Integer, Integer>();
      ListOrderedMap.ListOrderedMapIterator<Integer, Integer> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<Integer, Integer>(listOrderedMap0);
      // Undeclared exception!
      try { 
        listOrderedMap_ListOrderedMapIterator0.getKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getKey() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ListOrderedMap<Object, Object> listOrderedMap0 = new ListOrderedMap<Object, Object>();
      ListOrderedMap.ListOrderedMapIterator<Object, Object> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<Object, Object>(listOrderedMap0);
      // Undeclared exception!
      try { 
        listOrderedMap_ListOrderedMapIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // remove() can only be called once after next()
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LinkedList<ListOrderedMap.KeySetView<Integer>> linkedList0 = new LinkedList<ListOrderedMap.KeySetView<Integer>>();
      ListOrderedMap<ListOrderedMap.KeySetView<Integer>, Object> listOrderedMap0 = new ListOrderedMap<ListOrderedMap.KeySetView<Integer>, Object>();
      ListOrderedMap.EntrySetView<ListOrderedMap.KeySetView<Integer>, Object> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<ListOrderedMap.KeySetView<Integer>, Object>(listOrderedMap0, linkedList0);
      boolean boolean0 = listOrderedMap_EntrySetView0.equals(listOrderedMap_EntrySetView0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ListOrderedMap<ListOrderedMap.KeySetView<Integer>, Object> listOrderedMap0 = new ListOrderedMap<ListOrderedMap.KeySetView<Integer>, Object>();
      LinkedList<ListOrderedMap.KeySetView<Integer>> linkedList0 = new LinkedList<ListOrderedMap.KeySetView<Integer>>();
      ListOrderedMap.EntrySetView<ListOrderedMap.KeySetView<Integer>, Object> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<ListOrderedMap.KeySetView<Integer>, Object>(listOrderedMap0, linkedList0);
      boolean boolean0 = listOrderedMap_EntrySetView0.equals(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ListOrderedMap<Integer, ListOrderedMap<Integer, Integer>> listOrderedMap0 = new ListOrderedMap<Integer, ListOrderedMap<Integer, Integer>>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListOrderedMap.EntrySetView<Integer, ListOrderedMap<Integer, Integer>> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<Integer, ListOrderedMap<Integer, Integer>>(listOrderedMap0, linkedList0);
      boolean boolean0 = listOrderedMap_EntrySetView0.remove(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Integer integer0 = new Integer((-199));
      ListOrderedMap<Integer, Object> listOrderedMap0 = new ListOrderedMap<Integer, Object>();
      ListOrderedMap.ListOrderedMapEntry<Integer, Object> listOrderedMap_ListOrderedMapEntry0 = new ListOrderedMap.ListOrderedMapEntry<Integer, Object>(listOrderedMap0, integer0);
      ListOrderedMap<Integer, ListOrderedMap<Integer, Integer>> listOrderedMap1 = new ListOrderedMap<Integer, ListOrderedMap<Integer, Integer>>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListOrderedMap.EntrySetView<Integer, ListOrderedMap<Integer, Integer>> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<Integer, ListOrderedMap<Integer, Integer>>(listOrderedMap1, linkedList0);
      boolean boolean0 = listOrderedMap_EntrySetView0.remove(listOrderedMap_ListOrderedMapEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ListOrderedMap<ListOrderedMap<Object, Integer>, ListOrderedMap<Object, Integer>> listOrderedMap0 = new ListOrderedMap<ListOrderedMap<Object, Integer>, ListOrderedMap<Object, Integer>>();
      listOrderedMap0.put((ListOrderedMap<Object, Integer>) null, (ListOrderedMap<Object, Integer>) null);
      ListOrderedMap.ValuesView<ListOrderedMap<Object, Integer>> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<ListOrderedMap<Object, Integer>>(listOrderedMap0);
      ListOrderedMap.EntrySetView<ListOrderedMap<Object, Integer>, ListOrderedMap<Object, Integer>> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<ListOrderedMap<Object, Integer>, ListOrderedMap<Object, Integer>>(listOrderedMap0, listOrderedMap_ValuesView0);
      boolean boolean0 = listOrderedMap_EntrySetView0.containsAll(listOrderedMap_ValuesView0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ListOrderedMap<ListOrderedMap<Object, Integer>, ListOrderedMap<Object, Integer>> listOrderedMap0 = new ListOrderedMap<ListOrderedMap<Object, Integer>, ListOrderedMap<Object, Integer>>();
      ListOrderedMap.ValuesView<ListOrderedMap<Object, Integer>> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<ListOrderedMap<Object, Integer>>(listOrderedMap0);
      ListOrderedMap.EntrySetView<ListOrderedMap<Object, Integer>, ListOrderedMap<Object, Integer>> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<ListOrderedMap<Object, Integer>, ListOrderedMap<Object, Integer>>(listOrderedMap0, listOrderedMap_ValuesView0);
      boolean boolean0 = listOrderedMap_EntrySetView0.contains(listOrderedMap0);
      boolean boolean1 = listOrderedMap_EntrySetView0.containsAll(listOrderedMap_ValuesView0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ListOrderedMap<Integer, Integer> listOrderedMap0 = new ListOrderedMap<Integer, Integer>();
      Integer integer0 = new Integer((-2146676321));
      listOrderedMap0.putIfAbsent(integer0, integer0);
      Integer integer1 = listOrderedMap0.put(1, integer0, (Integer) null);
      assertEquals((-2146676321), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Integer integer0 = new Integer(833);
      ListOrderedMap<Integer, Integer> listOrderedMap0 = new ListOrderedMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        listOrderedMap0.put(833, integer0, integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 833, Size: 0
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ListOrderedMap<ListOrderedMap.ValuesView<Object>, ListOrderedMap<Object, Integer>> listOrderedMap0 = new ListOrderedMap<ListOrderedMap.ValuesView<Object>, ListOrderedMap<Object, Integer>>();
      ListOrderedMap<Object, Integer> listOrderedMap1 = new ListOrderedMap<Object, Integer>();
      // Undeclared exception!
      try { 
        listOrderedMap0.put((-1261), (ListOrderedMap.ValuesView<Object>) null, listOrderedMap1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1261, Size: 0
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ListOrderedMap<Integer, Integer> listOrderedMap0 = new ListOrderedMap<Integer, Integer>();
      Integer integer0 = new Integer((-865));
      listOrderedMap0.putIfAbsent(integer0, (Integer) null);
      listOrderedMap0.put((Integer) null, (Integer) null);
      listOrderedMap0.toString();
      assertEquals(2, listOrderedMap0.size());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ListOrderedMap<Object, Integer> listOrderedMap0 = new ListOrderedMap<Object, Integer>();
      String string0 = listOrderedMap0.toString();
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ListOrderedMap<Integer, Integer> listOrderedMap0 = new ListOrderedMap<Integer, Integer>();
      Integer integer0 = listOrderedMap0.remove((Object) listOrderedMap0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ListOrderedMap<Integer, HashMap<Integer, Integer>> listOrderedMap0 = new ListOrderedMap<Integer, HashMap<Integer, Integer>>();
      Integer integer0 = new Integer(0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      listOrderedMap0.put(0, integer0, hashMap0);
      ListOrderedMap<Integer, HashMap<Integer, Integer>> listOrderedMap1 = new ListOrderedMap<Integer, HashMap<Integer, Integer>>();
      listOrderedMap1.putAll(0, (Map<? extends Integer, ? extends HashMap<Integer, Integer>>) listOrderedMap0);
      assertEquals(1, listOrderedMap1.size());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ListOrderedMap<ListOrderedMap<Object, Object>, LinkedList<Object>> listOrderedMap0 = new ListOrderedMap<ListOrderedMap<Object, Object>, LinkedList<Object>>();
      // Undeclared exception!
      try { 
        listOrderedMap0.putAll(1317, (Map<? extends ListOrderedMap<Object, Object>, ? extends LinkedList<Object>>) listOrderedMap0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1317, Size: 0
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<Integer, HashMap<Integer, Integer>> hashMap0 = new HashMap<Integer, HashMap<Integer, Integer>>();
      ListOrderedMap<Integer, HashMap<Integer, Integer>> listOrderedMap0 = new ListOrderedMap<Integer, HashMap<Integer, Integer>>(hashMap0);
      // Undeclared exception!
      try { 
        listOrderedMap0.putAll((-2145344718), (Map<? extends Integer, ? extends HashMap<Integer, Integer>>) hashMap0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2145344718, Size: 0
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ListOrderedMap<Integer, Integer> listOrderedMap0 = new ListOrderedMap<Integer, Integer>();
      listOrderedMap0.putIfAbsent((Integer) null, (Integer) null);
      listOrderedMap0.putAll((Map<? extends Integer, ? extends Integer>) listOrderedMap0);
      assertEquals(1, listOrderedMap0.size());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ListOrderedMap<Integer, Integer> listOrderedMap0 = new ListOrderedMap<Integer, Integer>();
      Integer integer0 = listOrderedMap0.previousKey((Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ListOrderedMap<Integer, Integer> listOrderedMap0 = new ListOrderedMap<Integer, Integer>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put(listOrderedMap0, listOrderedMap0);
      ListOrderedMap<Object, Object> listOrderedMap1 = new ListOrderedMap<Object, Object>(hashMap0);
      listOrderedMap1.putIfAbsent(hashMap0, hashMap0);
      HashMap hashMap1 = (HashMap)listOrderedMap1.nextKey(listOrderedMap0);
      assertFalse(hashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Integer integer0 = new Integer((-2146676321));
      ListOrderedMap<ListOrderedMap.ValuesView<Object>, ListOrderedMap<Object, Integer>> listOrderedMap0 = new ListOrderedMap<ListOrderedMap.ValuesView<Object>, ListOrderedMap<Object, Integer>>();
      ListOrderedMap.ValuesView<Object> listOrderedMap_ValuesView0 = listOrderedMap0.nextKey(integer0);
      assertNull(listOrderedMap_ValuesView0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ListOrderedMap<LinkedList<Object>, ListOrderedMap.KeySetView<Object>> listOrderedMap0 = new ListOrderedMap<LinkedList<Object>, ListOrderedMap.KeySetView<Object>>();
      // Undeclared exception!
      try { 
        listOrderedMap0.lastKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Map is empty
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<ListOrderedMap<Integer, Integer>, ListOrderedMap<Integer, Integer>> hashMap0 = new HashMap<ListOrderedMap<Integer, Integer>, ListOrderedMap<Integer, Integer>>();
      ListOrderedMap<ListOrderedMap<Integer, Integer>, ListOrderedMap<Integer, Integer>> listOrderedMap0 = new ListOrderedMap<ListOrderedMap<Integer, Integer>, ListOrderedMap<Integer, Integer>>(hashMap0);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      ListOrderedMap<Integer, Integer> listOrderedMap1 = ListOrderedMap.listOrderedMap((Map<Integer, Integer>) hashMap1);
      listOrderedMap0.put(listOrderedMap1, listOrderedMap1);
      ListOrderedMap<Integer, Integer> listOrderedMap2 = listOrderedMap0.lastKey();
      assertEquals(0, listOrderedMap2.size());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ListOrderedMap<Integer, HashMap<Object, Integer>> listOrderedMap0 = new ListOrderedMap<Integer, HashMap<Object, Integer>>();
      // Undeclared exception!
      try { 
        listOrderedMap0.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Map is empty
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ListOrderedMap<Integer, Integer> listOrderedMap0 = new ListOrderedMap<Integer, Integer>();
      listOrderedMap0.put((Integer) null, (Integer) null);
      Integer integer0 = listOrderedMap0.firstKey();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ListOrderedMap<HashMap<Integer, Integer>, Object> listOrderedMap0 = new ListOrderedMap<HashMap<Integer, Integer>, Object>();
      ListOrderedMap.KeySetView<HashMap<Integer, Integer>> listOrderedMap_KeySetView0 = new ListOrderedMap.KeySetView<HashMap<Integer, Integer>>(listOrderedMap0);
      listOrderedMap_KeySetView0.clear();
      assertEquals(0, listOrderedMap_KeySetView0.size());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      ListOrderedMap<Integer, Object> listOrderedMap0 = ListOrderedMap.listOrderedMap((Map<Integer, Object>) hashMap0);
      ListOrderedMap.KeySetView<Integer> listOrderedMap_KeySetView0 = new ListOrderedMap.KeySetView<Integer>(listOrderedMap0);
      boolean boolean0 = listOrderedMap_KeySetView0.contains(listOrderedMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Integer integer0 = new Integer(0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ListOrderedMap<Integer, HashMap<Integer, Integer>> listOrderedMap0 = new ListOrderedMap<Integer, HashMap<Integer, Integer>>();
      listOrderedMap0.put(0, integer0, hashMap0);
      ListOrderedMap<Integer, HashMap<Integer, Integer>> listOrderedMap1 = new ListOrderedMap<Integer, HashMap<Integer, Integer>>(listOrderedMap0);
      listOrderedMap1.putAll(0, (Map<? extends Integer, ? extends HashMap<Integer, Integer>>) listOrderedMap0);
      assertFalse(listOrderedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ListOrderedMap<Integer, Integer> listOrderedMap0 = new ListOrderedMap<Integer, Integer>();
      ListOrderedMap.ValuesView<Integer> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<Integer>(listOrderedMap0);
      listOrderedMap_ValuesView0.clear();
      assertEquals(0, listOrderedMap_ValuesView0.size());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ListOrderedMap.ValuesView<Object> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<Object>((ListOrderedMap<?, Object>) null);
      // Undeclared exception!
      try { 
        listOrderedMap_ValuesView0.get((-2146907140));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap$ValuesView", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ListOrderedMap<ListOrderedMap<Object, Integer>, ListOrderedMap<Object, Integer>> listOrderedMap0 = new ListOrderedMap<ListOrderedMap<Object, Integer>, ListOrderedMap<Object, Integer>>();
      ListOrderedMap.ValuesView<ListOrderedMap<Object, Integer>> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<ListOrderedMap<Object, Integer>>(listOrderedMap0);
      ListOrderedMap<Object, Integer> listOrderedMap1 = new ListOrderedMap<Object, Integer>();
      // Undeclared exception!
      try { 
        listOrderedMap_ValuesView0.set(125, listOrderedMap1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 125, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      ListOrderedMap<Object, Integer> listOrderedMap0 = ListOrderedMap.listOrderedMap((Map<Object, Integer>) hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      ListOrderedMap.ValuesView<Integer> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<Integer>(listOrderedMap0);
      boolean boolean0 = listOrderedMap_ValuesView0.contains(hashMap1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ListOrderedMap<Integer, Object> listOrderedMap0 = new ListOrderedMap<Integer, Object>();
      Integer integer0 = new Integer(0);
      ListOrderedMap.ListOrderedMapEntry<Integer, Object> listOrderedMap_ListOrderedMapEntry0 = new ListOrderedMap.ListOrderedMapEntry<Integer, Object>(listOrderedMap0, integer0);
      Object object0 = listOrderedMap_ListOrderedMapEntry0.setValue((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ListOrderedMap<Integer, Integer> listOrderedMap0 = new ListOrderedMap<Integer, Integer>();
      Integer integer0 = new Integer((-1));
      listOrderedMap0.putIfAbsent(integer0, integer0);
      List<Integer> list0 = listOrderedMap0.valueList();
      ListOrderedMap.ListOrderedIterator<Integer, HashMap<Integer, Integer>> listOrderedMap_ListOrderedIterator0 = new ListOrderedMap.ListOrderedIterator<Integer, HashMap<Integer, Integer>>((ListOrderedMap<Integer, HashMap<Integer, Integer>>) null, list0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      listOrderedMap_ListOrderedIterator0.forEachRemaining(consumer0);
      // Undeclared exception!
      try { 
        listOrderedMap_ListOrderedIterator0.remove();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap$ListOrderedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ListOrderedMap<Integer, Integer> listOrderedMap0 = new ListOrderedMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        listOrderedMap0.setValue(0, (Integer) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ListOrderedMap<Integer, Integer> listOrderedMap0 = new ListOrderedMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        listOrderedMap0.getValue((-106));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ListOrderedMap<Integer, Integer> listOrderedMap0 = new ListOrderedMap<Integer, Integer>();
      Collection<Integer> collection0 = listOrderedMap0.values();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ListOrderedMap<Integer, Integer> listOrderedMap0 = new ListOrderedMap<Integer, Integer>();
      List<Integer> list0 = listOrderedMap0.valueList();
      ListOrderedMap.ListOrderedIterator<Integer, HashMap<Integer, Integer>> listOrderedMap_ListOrderedIterator0 = new ListOrderedMap.ListOrderedIterator<Integer, HashMap<Integer, Integer>>((ListOrderedMap<Integer, HashMap<Integer, Integer>>) null, list0);
      // Undeclared exception!
      try { 
        listOrderedMap_ListOrderedIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ListOrderedMap<Integer, Integer> listOrderedMap0 = new ListOrderedMap<Integer, Integer>();
      ListOrderedMap.ValuesView<Integer> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<Integer>(listOrderedMap0);
      // Undeclared exception!
      try { 
        listOrderedMap_ValuesView0.remove((-6348));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ListOrderedMap<Integer, ListOrderedMap.ValuesView<Object>> listOrderedMap0 = new ListOrderedMap<Integer, ListOrderedMap.ValuesView<Object>>();
      OrderedMapIterator<Integer, ListOrderedMap.ValuesView<Object>> orderedMapIterator0 = listOrderedMap0.mapIterator();
      assertFalse(orderedMapIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ListOrderedMap<Integer, Object> listOrderedMap0 = new ListOrderedMap<Integer, Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListOrderedMap.EntrySetView<Integer, Object> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<Integer, Object>(listOrderedMap0, linkedList0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Object object0 = hashMap0.put(listOrderedMap_EntrySetView0, listOrderedMap_EntrySetView0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ListOrderedMap<HashMap<Integer, Integer>, HashMap<Object, Integer>> listOrderedMap0 = new ListOrderedMap<HashMap<Integer, Integer>, HashMap<Object, Integer>>();
      HashMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> hashMap0 = new HashMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>();
      ListOrderedMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> listOrderedMap1 = ListOrderedMap.listOrderedMap((Map<HashMap<Integer, Integer>, HashMap<Integer, Integer>>) hashMap0);
      List<HashMap<Integer, Integer>> list0 = listOrderedMap1.asList();
      ListOrderedMap.EntrySetView<HashMap<Integer, Integer>, HashMap<Object, Integer>> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<HashMap<Integer, Integer>, HashMap<Object, Integer>>(listOrderedMap0, list0);
      boolean boolean0 = listOrderedMap_EntrySetView0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ListOrderedMap<Integer, Integer> listOrderedMap0 = new ListOrderedMap<Integer, Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListOrderedMap.EntrySetView<Integer, Integer> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<Integer, Integer>(listOrderedMap0, linkedList0);
      String string0 = listOrderedMap_EntrySetView0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ListOrderedMap<Integer, HashMap<Integer, Integer>> listOrderedMap0 = new ListOrderedMap<Integer, HashMap<Integer, Integer>>();
      Set<Map.Entry<Integer, HashMap<Integer, Integer>>> set0 = (Set<Map.Entry<Integer, HashMap<Integer, Integer>>>)listOrderedMap0.entrySet();
      HashMap<ListOrderedMap<Object, Integer>, ListOrderedMap<Object, Integer>> hashMap0 = new HashMap<ListOrderedMap<Object, Integer>, ListOrderedMap<Object, Integer>>();
      ListOrderedMap<ListOrderedMap<Object, Integer>, ListOrderedMap<Object, Integer>> listOrderedMap1 = new ListOrderedMap<ListOrderedMap<Object, Integer>, ListOrderedMap<Object, Integer>>(hashMap0);
      ListOrderedMap.ValuesView<ListOrderedMap<Object, Integer>> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<ListOrderedMap<Object, Integer>>(listOrderedMap1);
      ListOrderedMap.EntrySetView<ListOrderedMap<Object, Integer>, ListOrderedMap<Object, Integer>> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<ListOrderedMap<Object, Integer>, ListOrderedMap<Object, Integer>>(listOrderedMap1, listOrderedMap_ValuesView0);
      boolean boolean0 = listOrderedMap_EntrySetView0.containsAll(set0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ListOrderedMap<ListOrderedMap<Object, Integer>, ListOrderedMap<Object, Integer>> listOrderedMap0 = new ListOrderedMap<ListOrderedMap<Object, Integer>, ListOrderedMap<Object, Integer>>();
      ListOrderedMap.ValuesView<ListOrderedMap<Object, Integer>> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<ListOrderedMap<Object, Integer>>(listOrderedMap0);
      ListOrderedMap.EntrySetView<ListOrderedMap<Object, Integer>, ListOrderedMap<Object, Integer>> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<ListOrderedMap<Object, Integer>, ListOrderedMap<Object, Integer>>(listOrderedMap0, listOrderedMap_ValuesView0);
      listOrderedMap_EntrySetView0.clear();
      assertEquals(0, listOrderedMap_EntrySetView0.size());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ListOrderedMap<Integer, Integer> listOrderedMap0 = new ListOrderedMap<Integer, Integer>(hashMap0);
      ListOrderedMap.ListOrderedMapIterator<Integer, Integer> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<Integer, Integer>(listOrderedMap0);
      boolean boolean0 = listOrderedMap_ListOrderedMapIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ListOrderedMap<Object, HashMap<Integer, Object>> listOrderedMap0 = new ListOrderedMap<Object, HashMap<Integer, Object>>();
      ListOrderedMap.ListOrderedMapIterator<Object, HashMap<Integer, Object>> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<Object, HashMap<Integer, Object>>(listOrderedMap0);
      boolean boolean0 = listOrderedMap_ListOrderedMapIterator0.hasPrevious();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ListOrderedMap<Integer, Integer> listOrderedMap0 = new ListOrderedMap<Integer, Integer>();
      ListOrderedMap.ListOrderedMapIterator<Integer, Integer> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<Integer, Integer>(listOrderedMap0);
      listOrderedMap_ListOrderedMapIterator0.reset();
      assertFalse(listOrderedMap_ListOrderedMapIterator0.hasNext());
  }
}
