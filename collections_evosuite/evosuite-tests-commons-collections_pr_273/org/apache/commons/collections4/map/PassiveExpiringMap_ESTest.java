/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 12:51:25 GMT 2025
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.apache.commons.collections4.map.PassiveExpiringMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PassiveExpiringMap_ESTest extends PassiveExpiringMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>(491L);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      PassiveExpiringMap<Long, Long> passiveExpiringMap0 = new PassiveExpiringMap<Long, Long>(1392409281321L, timeUnit0);
      PassiveExpiringMap<Long, Long> passiveExpiringMap1 = new PassiveExpiringMap<Long, Long>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0, passiveExpiringMap0);
      PassiveExpiringMap<Long, Long> passiveExpiringMap2 = new PassiveExpiringMap<Long, Long>(passiveExpiringMap1);
      Long long0 = new Long((-1083L));
      Function<Long, Long> function0 = Function.identity();
      passiveExpiringMap2.computeIfAbsent(long0, function0);
      System.setCurrentTimeMillis(1392409283896L);
      Collection<Long> collection0 = passiveExpiringMap1.values();
      assertFalse(collection0.contains((-1083L)));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis(0);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      HashMap<Long, PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>> hashMap0 = new HashMap<Long, PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>>();
      PassiveExpiringMap<Long, PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>> passiveExpiringMap0 = new PassiveExpiringMap<Long, PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>>(0, timeUnit0, hashMap0);
      Long long0 = new Long(0);
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>((-1849L));
      passiveExpiringMap0.put(long0, passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      int int0 = passiveExpiringMap0.size();
      assertEquals(0, hashMap0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>(0);
      Long long0 = new Long(0L);
      System.setCurrentTimeMillis(0L);
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy1 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>>(9223372036854775807L);
      long long1 = passiveExpiringMap_ConstantTimeToLiveExpirationPolicy1.expirationTime(long0, passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      assertEquals(9223372036854775807L, long1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      PassiveExpiringMap<PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>, PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>> passiveExpiringMap0 = new PassiveExpiringMap<PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>, PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>>((-1L), timeUnit0);
      PassiveExpiringMap<PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>, PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>> passiveExpiringMap1 = new PassiveExpiringMap<PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>, PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>>(1652L, passiveExpiringMap0);
      assertTrue(passiveExpiringMap1.equals((Object)passiveExpiringMap0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PassiveExpiringMap<Long, Long> passiveExpiringMap0 = new PassiveExpiringMap<Long, Long>((-1L));
      Long long0 = passiveExpiringMap0.put((Long) null, (Long) null);
      assertNull(long0);
      
      boolean boolean0 = passiveExpiringMap0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PassiveExpiringMap<PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>, PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>> passiveExpiringMap0 = new PassiveExpiringMap<PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>, PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>>();
      Long long0 = new Long(1L);
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = passiveExpiringMap0.get(long0);
      assertNull(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      PassiveExpiringMap<Long, PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>> passiveExpiringMap0 = new PassiveExpiringMap<Long, PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>>();
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>(1L, timeUnit0);
      passiveExpiringMap0.putIfAbsent((Long) null, passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy1 = passiveExpiringMap0.get((Object) null);
      assertSame(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy1, passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Long long0 = new Long(0L);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>(0L, timeUnit0);
      PassiveExpiringMap<PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>, Long> passiveExpiringMap0 = new PassiveExpiringMap<PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>, Long>((-2186L));
      Long long1 = passiveExpiringMap0.putIfAbsent(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0, long0);
      assertNull(long1);
      
      boolean boolean0 = passiveExpiringMap0.containsValue(long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PassiveExpiringMap<Long, Long> passiveExpiringMap0 = new PassiveExpiringMap<Long, Long>();
      Long long0 = new Long(0);
      Function<Long, Long> function0 = Function.identity();
      Long long1 = passiveExpiringMap0.computeIfAbsent(long0, function0);
      boolean boolean0 = passiveExpiringMap0.containsKey(long1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PassiveExpiringMap<Long, Long> passiveExpiringMap0 = new PassiveExpiringMap<Long, Long>();
      passiveExpiringMap0.map = null;
      // Undeclared exception!
      try { 
        passiveExpiringMap0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>((-1L), timeUnit0);
      PassiveExpiringMap<Long, Long> passiveExpiringMap0 = new PassiveExpiringMap<Long, Long>();
      passiveExpiringMap0.map = null;
      // Undeclared exception!
      try { 
        passiveExpiringMap0.remove((Object) passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PassiveExpiringMap<Long, Long> passiveExpiringMap0 = new PassiveExpiringMap<Long, Long>();
      // Undeclared exception!
      try { 
        passiveExpiringMap0.putAll((Map<? extends Long, ? extends Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.PassiveExpiringMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PassiveExpiringMap<Long, Long> passiveExpiringMap0 = new PassiveExpiringMap<Long, Long>();
      passiveExpiringMap0.map = null;
      // Undeclared exception!
      try { 
        passiveExpiringMap0.keySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      PassiveExpiringMap<Long, Long> passiveExpiringMap0 = new PassiveExpiringMap<Long, Long>(0L, timeUnit0);
      passiveExpiringMap0.map = null;
      // Undeclared exception!
      try { 
        passiveExpiringMap0.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PassiveExpiringMap<Long, Long> passiveExpiringMap0 = new PassiveExpiringMap<Long, Long>();
      passiveExpiringMap0.map = null;
      // Undeclared exception!
      try { 
        passiveExpiringMap0.entrySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>();
      PassiveExpiringMap<Long, Long> passiveExpiringMap0 = null;
      try {
        passiveExpiringMap0 = new PassiveExpiringMap<Long, Long>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0, (Map<Long, Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PassiveExpiringMap<PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>, Long> passiveExpiringMap0 = null;
      try {
        passiveExpiringMap0 = new PassiveExpiringMap<PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>, Long>((PassiveExpiringMap.ExpirationPolicy<PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>, Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // expiringPolicy
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PassiveExpiringMap<Long, Long> passiveExpiringMap0 = null;
      try {
        passiveExpiringMap0 = new PassiveExpiringMap<Long, Long>((Map<Long, Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      PassiveExpiringMap<Long, Long> passiveExpiringMap0 = null;
      try {
        passiveExpiringMap0 = new PassiveExpiringMap<Long, Long>(1007L, timeUnit0, (Map<Long, Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PassiveExpiringMap<Long, Long> passiveExpiringMap0 = null;
      try {
        passiveExpiringMap0 = new PassiveExpiringMap<Long, Long>(4061L, (Map<Long, Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>(1L, timeUnit0);
      PassiveExpiringMap<PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>, PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>> passiveExpiringMap0 = new PassiveExpiringMap<PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>, PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>>(1L);
      passiveExpiringMap0.putIfAbsent(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0, passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy1 = passiveExpiringMap0.put(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0, passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      assertSame(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0, passiveExpiringMap_ConstantTimeToLiveExpirationPolicy1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PassiveExpiringMap<PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>, Long> passiveExpiringMap0 = new PassiveExpiringMap<PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>, Long>();
      Set<Map.Entry<PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>, Long>> set0 = (Set<Map.Entry<PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>, Long>>)passiveExpiringMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PassiveExpiringMap<Long, Long> passiveExpiringMap0 = new PassiveExpiringMap<Long, Long>(0L);
      Long long0 = new Long(0L);
      passiveExpiringMap0.putIfAbsent((Long) null, long0);
      Long long1 = passiveExpiringMap0.putIfAbsent((Long) null, (Long) null);
      assertNull(long1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PassiveExpiringMap<Long, Long> passiveExpiringMap0 = new PassiveExpiringMap<Long, Long>((-2643L));
      Long long0 = new Long((-2643L));
      Function<Long, Long> function0 = Function.identity();
      passiveExpiringMap0.computeIfAbsent(long0, function0);
      passiveExpiringMap0.putAll(passiveExpiringMap0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      PassiveExpiringMap<Long, Long> passiveExpiringMap0 = new PassiveExpiringMap<Long, Long>(1392409281321L, timeUnit0);
      Long long0 = new Long((-1083L));
      Function<Long, Long> function0 = Function.identity();
      passiveExpiringMap0.computeIfAbsent(long0, function0);
      Set<Long> set0 = passiveExpiringMap0.keySet();
      assertTrue(set0.contains((-1083L)));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>(9223372036854775806L);
      PassiveExpiringMap<Long, Long> passiveExpiringMap0 = new PassiveExpiringMap<Long, Long>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      Long long0 = new Long(9223372036854775806L);
      Long long1 = passiveExpiringMap0.putIfAbsent(long0, long0);
      assertNull(long1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>();
      PassiveExpiringMap<Long, Long> passiveExpiringMap0 = new PassiveExpiringMap<Long, Long>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      boolean boolean0 = passiveExpiringMap0.containsKey(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PassiveExpiringMap<Long, Long> passiveExpiringMap0 = new PassiveExpiringMap<Long, Long>();
      Long long0 = passiveExpiringMap0.remove((Object) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Long long0 = new Long(0L);
      PassiveExpiringMap<PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>, Long> passiveExpiringMap0 = new PassiveExpiringMap<PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>, Long>((-2186L));
      boolean boolean0 = passiveExpiringMap0.containsValue(long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PassiveExpiringMap<Long, Long> passiveExpiringMap0 = new PassiveExpiringMap<Long, Long>();
      Long long0 = new Long(0);
      BiFunction<Long, Long, Long> biFunction0 = (BiFunction<Long, Long, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      passiveExpiringMap0.merge(long0, long0, biFunction0);
      int int0 = passiveExpiringMap0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      PassiveExpiringMap<Long, Long> passiveExpiringMap0 = new PassiveExpiringMap<Long, Long>(1392409281321L, timeUnit0);
      passiveExpiringMap0.clear();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      PassiveExpiringMap<PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>, Long> passiveExpiringMap0 = new PassiveExpiringMap<PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Long>, Long>((-890L), timeUnit0);
      boolean boolean0 = passiveExpiringMap0.isEmpty();
      assertTrue(boolean0);
  }
}
