/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 12:44:20 GMT 2025
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.CloneTransformer;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.InstantiateTransformer;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.map.DefaultedMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class DefaultedMap_ESTest extends DefaultedMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Factory<Integer> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, Object> transformer0 = FactoryTransformer.factoryTransformer((Factory<?>) factory0);
      DefaultedMap<Transformer<Integer, Integer>, Object> defaultedMap0 = new DefaultedMap<Transformer<Integer, Integer>, Object>((Object) transformer0);
      DefaultedMap<Transformer<Integer, Integer>, Object> defaultedMap1 = new DefaultedMap<Transformer<Integer, Integer>, Object>(defaultedMap0, transformer0);
      assertTrue(defaultedMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultedMap<Class<Integer>, Integer> defaultedMap0 = new DefaultedMap<Class<Integer>, Integer>((Integer) null);
      Class<Integer> class0 = Integer.class;
      Integer integer0 = new Integer((-238));
      defaultedMap0.put(class0, integer0);
      Transformer<Object, Integer> transformer0 = ConstantTransformer.constantTransformer((Integer) null);
      Map<Class<Integer>, Integer> map0 = DefaultedMap.defaultedMap((Map<Class<Integer>, Integer>) defaultedMap0, (Transformer<? super Class<Integer>, ? extends Integer>) transformer0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 8);
      InvokerTransformer<Object, Integer> invokerTransformer0 = new InvokerTransformer<Object, Integer>("", classArray0, classArray0);
      DefaultedMap<Transformer<Integer, Integer>, Integer> defaultedMap0 = new DefaultedMap<Transformer<Integer, Integer>, Integer>((Transformer<? super Transformer<Integer, Integer>, ? extends Integer>) invokerTransformer0);
      Integer integer0 = new Integer((-1));
      ConstantTransformer<Integer, Integer> constantTransformer0 = new ConstantTransformer<Integer, Integer>(integer0);
      defaultedMap0.put(constantTransformer0, integer0);
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      DefaultedMap<Transformer<Integer, Integer>, Integer> defaultedMap1 = DefaultedMap.defaultedMap((Map<Transformer<Integer, Integer>, Integer>) defaultedMap0, (Factory<? extends Integer>) constantFactory0);
      assertTrue(defaultedMap1.equals((Object)defaultedMap0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Integer integer0 = new Integer(0);
      Integer integer1 = hashMap0.put(integer0, integer0);
      DefaultedMap<Object, Integer> defaultedMap0 = DefaultedMap.defaultedMap((Map<Object, Integer>) hashMap0, integer1);
      assertFalse(defaultedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Transformer<Object, Object> transformer0 = CloneTransformer.cloneTransformer();
      DefaultedMap<Object, Object> defaultedMap0 = new DefaultedMap<Object, Object>(transformer0);
      // Undeclared exception!
      try { 
        defaultedMap0.get(defaultedMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.NotSerializableException: org.apache.commons.collections4.functors.CloneTransformer
         //
         verifyException("org.apache.commons.collections4.functors.PrototypeFactory$PrototypeSerializationFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Transformer<Object, Object> transformer0 = CloneTransformer.cloneTransformer();
      DefaultedMap<Object, Object> defaultedMap0 = new DefaultedMap<Object, Object>(transformer0);
      defaultedMap0.map = null;
      // Undeclared exception!
      try { 
        defaultedMap0.get(defaultedMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.DefaultedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Transformer<Object, Object> transformer0 = CloneTransformer.cloneTransformer();
      DefaultedMap<Object, Object> defaultedMap0 = new DefaultedMap<Object, Object>(transformer0);
      // Undeclared exception!
      try { 
        defaultedMap0.get(transformer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The prototype must be cloneable via a public clone method
         //
         verifyException("org.apache.commons.collections4.functors.PrototypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Transformer<Object, Object> transformer0 = CloneTransformer.cloneTransformer();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      predicateArray0[0] = predicate0;
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate0);
      predicateArray0[1] = (Predicate<Object>) transformedPredicate0;
      Predicate<Object> predicate1 = UniquePredicate.uniquePredicate();
      predicateArray0[2] = predicate1;
      Transformer<Object, Integer>[] transformerArray0 = (Transformer<Object, Integer>[]) Array.newInstance(Transformer.class, 2);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 3);
      Transformer<Object, Integer> transformer1 = InvokerTransformer.invokerTransformer("The predicate and closure arrays must be the same size", (Class<?>[]) classArray0, (Object[]) classArray0);
      SwitchTransformer<Object, Integer> switchTransformer0 = new SwitchTransformer<Object, Integer>(predicateArray0, transformerArray0, transformer1);
      DefaultedMap<DefaultedMap<Integer, Integer>, Integer> defaultedMap0 = new DefaultedMap<DefaultedMap<Integer, Integer>, Integer>((Transformer<? super DefaultedMap<Integer, Integer>, ? extends Integer>) switchTransformer0);
      // Undeclared exception!
      try { 
        defaultedMap0.get(predicate0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        DefaultedMap.defaultedMap((Map<Predicate<Object>, Integer>) null, (Transformer<? super Predicate<Object>, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        DefaultedMap.defaultedMap((Map<Integer, Object>) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultedMap<InstantiateTransformer<Integer>, Integer> defaultedMap0 = null;
      try {
        defaultedMap0 = new DefaultedMap<InstantiateTransformer<Integer>, Integer>((Transformer<? super InstantiateTransformer<Integer>, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // defaultValueTransformer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultedMap<Integer, Predicate<Object>> defaultedMap0 = new DefaultedMap<Integer, Predicate<Object>>((Predicate<Object>) null);
      DefaultedMap<Integer, Predicate<Object>> defaultedMap1 = null;
      try {
        defaultedMap1 = new DefaultedMap<Integer, Predicate<Object>>(defaultedMap0, (Transformer<? super Integer, ? extends Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // defaultValueTransformer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultedMap<Integer, Predicate<Object>> defaultedMap0 = new DefaultedMap<Integer, Predicate<Object>>((Predicate<Object>) null);
      defaultedMap0.put((Integer) null, (Predicate<Object>) null);
      Predicate<Object> predicate0 = defaultedMap0.get((Object) null);
      assertNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      DefaultedMap<Integer, Predicate<Object>> defaultedMap0 = new DefaultedMap<Integer, Predicate<Object>>(uniquePredicate0);
      DefaultedMap<Integer, Predicate<Object>> defaultedMap1 = DefaultedMap.defaultedMap((Map<Integer, Predicate<Object>>) defaultedMap0, (Predicate<Object>) uniquePredicate0);
      Predicate<Object> predicate0 = defaultedMap1.get(defaultedMap0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Transformer<Object, Object> transformer0 = CloneTransformer.cloneTransformer();
      DefaultedMap<Object, Object> defaultedMap0 = new DefaultedMap<Object, Object>(transformer0);
      Integer integer0 = new Integer((-1073741823));
      DefaultedMap<Integer, Integer> defaultedMap1 = new DefaultedMap<Integer, Integer>(integer0);
      DefaultedMap defaultedMap2 = (DefaultedMap)defaultedMap0.get(defaultedMap1);
      assertEquals(0, defaultedMap2.size());
  }
}
