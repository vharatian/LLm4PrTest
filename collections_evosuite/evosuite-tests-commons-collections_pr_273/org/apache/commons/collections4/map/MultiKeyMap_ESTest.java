/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 12:49:15 GMT 2025
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.util.ConcurrentModificationException;
import java.util.Map;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.apache.commons.collections4.map.AbstractHashedMap;
import org.apache.commons.collections4.map.MultiKeyMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class MultiKeyMap_ESTest extends MultiKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MultiKeyMap<Integer, MultiKey<Integer>> multiKeyMap0 = new MultiKeyMap<Integer, MultiKey<Integer>>();
      Integer[] integerArray0 = new Integer[10];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKeyMap0.putIfAbsent(multiKey0, multiKey0);
      AbstractHashedMap<Integer, Integer> abstractHashedMap0 = new AbstractHashedMap<Integer, Integer>();
      AbstractHashedMap<Integer, Integer> abstractHashedMap1 = new AbstractHashedMap<Integer, Integer>();
      Integer integer2 = new Integer(1);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, integer1, integer2, (Integer) int0);
      MultiKey<Integer> multiKey2 = multiKeyMap0.removeMultiKey((Object) integer0, (Object) abstractHashedMap0, (Object) multiKey0, (Object) abstractHashedMap1, (Object) multiKey1);
      assertNull(multiKey2);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MultiKeyMap<Integer, MultiKey<Integer>> multiKeyMap0 = new MultiKeyMap<Integer, MultiKey<Integer>>();
      Integer integer0 = new Integer((-8218088));
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-8218088));
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer1, integerArray0[2], integer0);
      multiKeyMap0.put((MultiKey<? extends Integer>) multiKey0, multiKey0);
      integerArray0[3] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKeyMap0.putIfAbsent(multiKey1, multiKey1);
      AbstractHashedMap<Integer, Integer> abstractHashedMap0 = new AbstractHashedMap<Integer, Integer>();
      AbstractHashedMap<Integer, Integer> abstractHashedMap1 = new AbstractHashedMap<Integer, Integer>();
      MultiKey<ByteArrayInputStream> multiKey2 = new MultiKey<ByteArrayInputStream>((ByteArrayInputStream) null, (ByteArrayInputStream) null, (ByteArrayInputStream) null);
      Integer integer2 = new Integer((-263));
      multiKeyMap0.removeMultiKey((Object) null, (Object) multiKey2, (Object) integer0, (Object) integer2, (Object) null);
      assertEquals(2, multiKeyMap0.size());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MultiKeyMap<MultiKey<Integer>, Integer> multiKeyMap0 = new MultiKeyMap<MultiKey<Integer>, Integer>();
      Integer integer0 = new Integer((-8200661));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      Integer integer1 = new Integer((-8200661));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1);
      Integer integer2 = new Integer((-8200661));
      multiKeyMap0.removeAll((Object) multiKey0, (Object) multiKey0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer2, (Integer) null);
      multiKeyMap0.put(multiKey0, multiKey1, multiKey1, multiKey2, multiKey1, integer2);
      Integer integer3 = multiKeyMap0.put(multiKey1, multiKey2, multiKey1, multiKey1, multiKey2, integer0);
      assertNull(integer3);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MultiKeyMap<MultiKey<Integer>, Integer> multiKeyMap0 = new MultiKeyMap<MultiKey<Integer>, Integer>();
      Integer integer0 = new Integer(3118);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKeyMap0.put(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0, integer0);
      byte[] byteArray0 = new byte[16];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3118, 3118);
      MultiKey<ByteArrayInputStream> multiKey1 = new MultiKey<ByteArrayInputStream>(byteArrayInputStream0, byteArrayInputStream0);
      AbstractHashedMap<Integer, ByteArrayInputStream> abstractHashedMap0 = new AbstractHashedMap<Integer, ByteArrayInputStream>(3118);
      Integer integer1 = multiKeyMap0.get((Object) integer0, (Object) byteArrayInputStream0, (Object) abstractHashedMap0, (Object) integer0, (Object) integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      multiKeyMap0.mapIterator();
      Integer integer0 = new Integer(791);
      Integer integer1 = new Integer(791);
      Integer integer2 = new Integer(791);
      multiKeyMap0.put(integer1, integer2, integer2);
      multiKeyMap0.remove((Object) integer0);
      Integer integer3 = new Integer(791);
      multiKeyMap0.put((Integer) null, integer2, integer0, integer2);
      Object object0 = new Object();
      Integer integer4 = multiKeyMap0.removeMultiKey((Object) null, (Object) integer1, object0, (Object) integer3);
      assertNull(integer4);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      multiKeyMap0.mapIterator();
      Integer integer0 = new Integer(799);
      Integer integer1 = new Integer(799);
      multiKeyMap0.put(integer0, integer1, integer1);
      Integer integer2 = new Integer(799);
      multiKeyMap0.mapIterator();
      multiKeyMap0.removeAll((Object) integer0, (Object) integer1, (Object) integer1);
      Integer integer3 = new Integer(799);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer2, integer2, (Integer) null);
      AbstractHashedMap<Integer, Integer> abstractHashedMap0 = new AbstractHashedMap<Integer, Integer>(799, 799, 799);
      Integer integer4 = new Integer(799);
      Integer integer5 = multiKeyMap0.put(integer4, (Integer) null, (Integer) null, integer3, (Integer) null);
      assertNull(integer5);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      Integer integer0 = new Integer((-76));
      Integer integer1 = new Integer((-76));
      Integer integer2 = new Integer(10);
      multiKeyMap0.put(integer0, integer1, integer2, integer1);
      Integer integer3 = new Integer(10);
      boolean boolean0 = multiKeyMap0.containsKey((Object) null, (Object) integer0, (Object) integer1, (Object) integer3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      Integer integer0 = new Integer((-777));
      Integer integer1 = new Integer((-777));
      multiKeyMap0.put(integer0, integer1, integer1);
      Integer integer2 = new Integer((-777));
      multiKeyMap0.put(integer0, integer1, integer1, integer2);
      multiKeyMap0.mapIterator();
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      MultiKeyMap<Integer, MultiKey<Integer>> multiKeyMap1 = new MultiKeyMap<Integer, MultiKey<Integer>>();
      Integer integer3 = new Integer((-777));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer2, integer3, (Integer) null);
      multiKeyMap1.putIfAbsent(multiKey0, multiKey1);
      MultiKey<Integer> multiKey2 = multiKeyMap1.get((Object) integer3, (Object) integer2, (Object) null, (Object) integer0);
      assertNull(multiKey2);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MultiKeyMap<MultiKey<Integer>, Integer> multiKeyMap0 = new MultiKeyMap<MultiKey<Integer>, Integer>();
      Integer integer0 = new Integer(1671);
      Integer integer1 = new Integer(1671);
      Integer integer2 = new Integer(1671);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer1, integer1, integer2);
      multiKeyMap0.put(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0, integer1);
      Integer integer3 = multiKeyMap0.removeMultiKey((Object) null, (Object) integer2, (Object) integer0);
      assertNull(integer3);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      multiKeyMap0.mapIterator();
      Integer integer0 = new Integer(791);
      Integer integer1 = new Integer(791);
      multiKeyMap0.put(integer0, integer1, integer1);
      multiKeyMap0.remove((Object) integer0);
      Integer integer2 = new Integer(791);
      multiKeyMap0.mapIterator();
      Integer integer3 = new Integer(673);
      AbstractHashedMap<Integer, Integer> abstractHashedMap0 = new AbstractHashedMap<Integer, Integer>(673, 673, 791);
      Integer integer4 = new Integer(5);
      Integer integer5 = new Integer(5);
      multiKeyMap0.put(integer3, integer1, integer4, integer5, (Integer) null);
      Integer integer6 = new Integer((-1446));
      Integer integer7 = multiKeyMap0.put(integer0, integer2, integer6, integer2);
      assertNull(integer7);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      Integer integer0 = new Integer((-136));
      Integer integer1 = new Integer((-136));
      multiKeyMap0.put(integer0, integer0, integer1);
      Integer integer2 = new Integer((-136));
      Integer integer3 = new Integer((-136));
      Integer integer4 = new Integer((-3615));
      Integer integer5 = new Integer((-2134));
      multiKeyMap0.put(integer3, integer4, integer4, (Integer) null, integer5, integer4);
      boolean boolean0 = multiKeyMap0.removeAll((Object) integer1, (Object) integer1);
      assertTrue(boolean0);
      
      boolean boolean1 = multiKeyMap0.containsKey((Object) integer1, (Object) integer2, (Object) null);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      multiKeyMap0.mapIterator();
      Integer integer0 = new Integer(32);
      Integer integer1 = new Integer(32);
      multiKeyMap0.put(integer0, integer1, integer1);
      Integer integer2 = new Integer(32);
      Integer integer3 = new Integer(32);
      multiKeyMap0.mapIterator();
      multiKeyMap0.removeAll((Object) integer0, (Object) integer1, (Object) integer1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      MultiKeyMap<AbstractHashedMap<Integer, Integer>, AbstractHashedMap<Integer, Integer>> multiKeyMap1 = new MultiKeyMap<AbstractHashedMap<Integer, Integer>, AbstractHashedMap<Integer, Integer>>();
      Integer integer4 = multiKeyMap0.get((Object) integer2, (Object) null, (Object) integer3);
      assertNull(integer4);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MultiKeyMap<MultiKey<Integer>, Integer> multiKeyMap0 = new MultiKeyMap<MultiKey<Integer>, Integer>();
      Integer integer0 = new Integer(3427);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      integerArray0[8] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKeyMap0.put(multiKey1, multiKey1, integerArray0[7]);
      MultiKeyMap<Integer, Integer> multiKeyMap1 = new MultiKeyMap<Integer, Integer>();
      multiKeyMap1.put(integerArray0[7], integerArray0[0], integerArray0[2], integerArray0[7]);
      Integer integer1 = new Integer(3427);
      AbstractHashedMap<Integer, Integer> abstractHashedMap0 = new AbstractHashedMap<Integer, Integer>();
      Object object0 = multiKeyMap1.removeMultiKey((Object) integer1, (Object) abstractHashedMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      multiKeyMap0.mapIterator();
      Integer integer0 = new Integer(792);
      Integer integer1 = new Integer(792);
      multiKeyMap0.put(integer1, integer0, integer0);
      multiKeyMap0.remove((Object) integer0);
      multiKeyMap0.put(integer1, integer0, integer0, integer0);
      Integer integer2 = new Integer(792);
      AbstractHashedMap<Integer, Integer> abstractHashedMap0 = new AbstractHashedMap<Integer, Integer>(4419, 2825.9F, 1932);
      multiKeyMap0.removeAll((Object) abstractHashedMap0, (Object) integer0, (Object) null);
      multiKeyMap0.mapIterator();
      multiKeyMap0.put(integer1, integer2, integer1);
      assertEquals(3, multiKeyMap0.size());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      multiKeyMap0.mapIterator();
      Integer integer0 = new Integer(791);
      Integer integer1 = new Integer(791);
      Integer integer2 = new Integer(791);
      multiKeyMap0.put(integer1, integer2, integer2);
      multiKeyMap0.remove((Object) integer0);
      multiKeyMap0.put(integer1, integer2, integer2, (Integer) null);
      Integer integer3 = new Integer(791);
      multiKeyMap0.mapIterator();
      boolean boolean0 = multiKeyMap0.removeAll((Object) integer1, (Object) integer2, (Object) integer2);
      Integer integer4 = new Integer(673);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer4, integer3);
      boolean boolean1 = multiKeyMap0.containsKey((Object) integer0, (Object) multiKey0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      int int0 = 0;
      AbstractHashedMap<Integer, Integer> abstractHashedMap0 = new AbstractHashedMap<Integer, Integer>(0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer[] integerArray0 = new Integer[4];
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) int0, integer0, (Integer) null, (Integer) null);
      MultiKeyMap<Integer, MultiKey<Integer>> multiKeyMap1 = new MultiKeyMap<Integer, MultiKey<Integer>>();
      multiKeyMap1.putIfAbsent(multiKey0, multiKey0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer2, integer2, integer1);
      multiKeyMap1.removeAll((Object) null, (Object) multiKey1);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      MultiKey<Integer> multiKey3 = multiKeyMap1.get((Object) multiKey2, (Object) int0);
      assertNull(multiKey3);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MultiKeyMap<MultiKey<Integer>, Integer> multiKeyMap0 = new MultiKeyMap<MultiKey<Integer>, Integer>();
      Integer integer0 = new Integer((-1158));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, (Integer) null, integer0);
      multiKeyMap0.checkKey(multiKey0);
      assertTrue(multiKeyMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      AbstractHashedMap<MultiKey<? extends Integer>, Integer> abstractHashedMap0 = multiKeyMap0.decorated();
      MultiKeyMap<Integer, Integer> multiKeyMap1 = new MultiKeyMap<Integer, Integer>(abstractHashedMap0);
      assertTrue(multiKeyMap1.equals((Object)multiKeyMap0));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MultiKeyMap<Integer, MultiKey<Integer>> multiKeyMap0 = new MultiKeyMap<Integer, MultiKey<Integer>>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, (Integer) int0, integer0, integer0);
      multiKeyMap0.putIfAbsent(multiKey0, multiKey0);
      MultiKey<Integer> multiKey1 = multiKeyMap0.put((MultiKey<? extends Integer>) multiKey0, (MultiKey<Integer>) null);
      assertEquals(4, multiKey1.size());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MultiKeyMap<MultiKey<Integer>, MultiKey<Integer>> multiKeyMap0 = new MultiKeyMap<MultiKey<Integer>, MultiKey<Integer>>();
      Integer integer0 = new Integer(3644);
      int int0 = multiKeyMap0.hash(integer0, integer0, integer0, integer0, integer0);
      assertEquals((-8156460), int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Integer integer0 = new Integer(3344);
      MultiKeyMap<Integer, AbstractHashedMap<Integer, Integer>> multiKeyMap0 = new MultiKeyMap<Integer, AbstractHashedMap<Integer, Integer>>();
      AbstractHashedMap<Integer, Integer> abstractHashedMap0 = new AbstractHashedMap<Integer, Integer>(3, 3344, (-3408));
      int int0 = multiKeyMap0.hash(abstractHashedMap0, (Object) null, integer0, integer0);
      assertEquals((-8156460), int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      AbstractHashedMap<Integer, Integer> abstractHashedMap0 = new AbstractHashedMap<Integer, Integer>(0);
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      int int0 = multiKeyMap0.hash(abstractHashedMap0, abstractHashedMap0, abstractHashedMap0);
      assertEquals((-8139033), int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MultiKeyMap<AbstractHashedMap<Integer, Integer>, ByteArrayInputStream> multiKeyMap0 = new MultiKeyMap<AbstractHashedMap<Integer, Integer>, ByteArrayInputStream>();
      AbstractHashedMap<Integer, Integer> abstractHashedMap0 = new AbstractHashedMap<Integer, Integer>();
      int int0 = multiKeyMap0.hash(abstractHashedMap0, abstractHashedMap0);
      assertEquals((-8130816), int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      Integer integer0 = new Integer((-76));
      multiKeyMap0.put(integer0, integer0, integer0, integer0);
      MultiKeyMap<Integer, Integer> multiKeyMap1 = multiKeyMap0.clone();
      assertFalse(multiKeyMap1.equals((Object)multiKeyMap0));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      multiKeyMap0.map = null;
      Integer integer0 = new Integer(14);
      // Undeclared exception!
      try { 
        multiKeyMap0.removeMultiKey((Object) integer0, (Object) integer0, (Object) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiKeyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MultiKeyMap<Integer, MultiKey<Integer>> multiKeyMap0 = new MultiKeyMap<Integer, MultiKey<Integer>>();
      multiKeyMap0.map = null;
      Integer integer0 = new Integer(16);
      // Undeclared exception!
      try { 
        multiKeyMap0.removeAll((Object) integer0, (Object) integer0, (Object) integer0, (Object) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiKeyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      AbstractHashedMap<Integer, Integer> abstractHashedMap0 = new AbstractHashedMap<Integer, Integer>();
      MultiKeyMap<MultiKey<Integer>, Integer> multiKeyMap0 = new MultiKeyMap<MultiKey<Integer>, Integer>();
      multiKeyMap0.map = null;
      // Undeclared exception!
      try { 
        multiKeyMap0.removeAll((Object) abstractHashedMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiKeyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      Integer integer0 = new Integer(799);
      multiKeyMap0.put(integer0, integer0, integer0);
      multiKeyMap0.put(integer0, integer0, integer0, integer0);
      AbstractHashedMap<MultiKey<? extends Integer>, Integer> abstractHashedMap0 = multiKeyMap0.decorated();
      // Undeclared exception!
      try { 
        multiKeyMap0.putAll(abstractHashedMap0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MultiKeyMap<Integer, ByteArrayInputStream> multiKeyMap0 = new MultiKeyMap<Integer, ByteArrayInputStream>();
      // Undeclared exception!
      try { 
        multiKeyMap0.putAll((Map<? extends MultiKey<? extends Integer>, ? extends ByteArrayInputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiKeyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MultiKeyMap<Integer, MultiKey<Integer>> multiKeyMap0 = new MultiKeyMap<Integer, MultiKey<Integer>>();
      // Undeclared exception!
      try { 
        multiKeyMap0.put((MultiKey<? extends Integer>) null, (MultiKey<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MultiKeyMap<MultiKey<Integer>, Integer> multiKeyMap0 = new MultiKeyMap<MultiKey<Integer>, Integer>();
      multiKeyMap0.map = null;
      Integer integer0 = new Integer((-8209406));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer0);
      // Undeclared exception!
      try { 
        multiKeyMap0.put(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiKeyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      multiKeyMap0.map = null;
      Integer integer0 = new Integer((-16));
      // Undeclared exception!
      try { 
        multiKeyMap0.put(integer0, integer0, integer0, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiKeyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiKeyMap.multiKeyMap((AbstractHashedMap<MultiKey<? extends Map.Entry<Integer, Integer>>, Map.Entry<ByteArrayInputStream, Map.Entry>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MultiKeyMap<AbstractHashedMap<Integer, Integer>, Integer> multiKeyMap0 = new MultiKeyMap<AbstractHashedMap<Integer, Integer>, Integer>();
      multiKeyMap0.map = null;
      // Undeclared exception!
      try { 
        multiKeyMap0.mapIterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiKeyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MultiKeyMap<MultiKey<ByteArrayInputStream>, Integer> multiKeyMap0 = new MultiKeyMap<MultiKey<ByteArrayInputStream>, Integer>();
      Integer integer0 = new Integer((byte)4);
      AbstractHashedMap<MultiKey<? extends MultiKey<ByteArrayInputStream>>, Integer> abstractHashedMap0 = multiKeyMap0.decorated();
      MultiKeyMap<AbstractHashedMap<Integer, ByteArrayInputStream>, ByteArrayInputStream> multiKeyMap1 = new MultiKeyMap<AbstractHashedMap<Integer, ByteArrayInputStream>, ByteArrayInputStream>();
      MultiKeyMap<AbstractHashedMap<Integer, ByteArrayInputStream>, ByteArrayInputStream> multiKeyMap2 = multiKeyMap1.clone();
      multiKeyMap2.map = null;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      // Undeclared exception!
      try { 
        multiKeyMap2.get((Object) multiKey0, (Object) abstractHashedMap0, (Object) multiKey0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiKeyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Integer integer0 = new Integer(670);
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      multiKeyMap0.map = null;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer0);
      // Undeclared exception!
      try { 
        multiKeyMap0.get((Object) integer0, (Object) multiKey0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiKeyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MultiKeyMap<AbstractHashedMap<Integer, ByteArrayInputStream>, Integer> multiKeyMap0 = new MultiKeyMap<AbstractHashedMap<Integer, ByteArrayInputStream>, Integer>();
      // Undeclared exception!
      try { 
        multiKeyMap0.checkKey((MultiKey<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      Integer integer0 = new Integer(799);
      multiKeyMap0.put(integer0, integer0, integer0);
      AbstractHashedMap<MultiKey<? extends Integer>, Integer> abstractHashedMap0 = multiKeyMap0.decorated();
      multiKeyMap0.putAll(abstractHashedMap0);
      assertEquals(2, multiKeyMap0.size());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MultiKeyMap<Integer, MultiKey<Integer>> multiKeyMap0 = new MultiKeyMap<Integer, MultiKey<Integer>>();
      Integer integer0 = new Integer(362);
      multiKeyMap0.put(integer0, integer0, integer0, integer0, (MultiKey<Integer>) null);
      boolean boolean0 = multiKeyMap0.removeAll((Object) integer0, (Object) integer0, (Object) integer0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MultiKeyMap<Integer, MultiKey<Integer>> multiKeyMap0 = new MultiKeyMap<Integer, MultiKey<Integer>>();
      Integer integer0 = new Integer(362);
      Integer[] integerArray0 = new Integer[1];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKeyMap0.put(integer0, integer0, integer0, (Integer) null, integer0, multiKey0);
      boolean boolean0 = multiKeyMap0.removeAll((Object) integer0, (Object) integer0, (Object) integer0, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MultiKeyMap<Integer, MultiKey<Integer>> multiKeyMap0 = new MultiKeyMap<Integer, MultiKey<Integer>>();
      Integer[] integerArray0 = new Integer[3];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      Integer integer0 = new Integer(1);
      multiKeyMap0.put(integer0, integer0, integer0, integer0, multiKey0);
      AbstractHashedMap<Integer, Integer> abstractHashedMap0 = new AbstractHashedMap<Integer, Integer>(1);
      boolean boolean0 = multiKeyMap0.removeAll((Object) integer0, (Object) integer0, (Object) abstractHashedMap0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MultiKeyMap<Integer, MultiKey<Integer>> multiKeyMap0 = new MultiKeyMap<Integer, MultiKey<Integer>>();
      Integer integer0 = new Integer(60);
      multiKeyMap0.put(integer0, integer0, integer0, integer0, (MultiKey<Integer>) null);
      boolean boolean0 = multiKeyMap0.removeAll((Object) integer0, (Object) integer0, (Object) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MultiKeyMap<Integer, MultiKey<Integer>> multiKeyMap0 = new MultiKeyMap<Integer, MultiKey<Integer>>();
      Integer integer0 = new Integer(16);
      multiKeyMap0.put(integer0, integer0, integer0, integer0, (MultiKey<Integer>) null);
      AbstractHashedMap<Integer, ByteArrayInputStream> abstractHashedMap0 = new AbstractHashedMap<Integer, ByteArrayInputStream>();
      boolean boolean0 = multiKeyMap0.removeAll((Object) integer0, (Object) abstractHashedMap0, (Object) integer0, (Object) integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      MultiKeyMap<Integer, MultiKey<Integer>> multiKeyMap0 = new MultiKeyMap<Integer, MultiKey<Integer>>();
      multiKeyMap0.put(integer0, integer0, (Integer) null, integer0, (MultiKey<Integer>) null);
      boolean boolean0 = multiKeyMap0.removeAll((Object) integer0, (Object) null, (Object) integer0, (Object) integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MultiKeyMap<Integer, MultiKey<Integer>> multiKeyMap0 = new MultiKeyMap<Integer, MultiKey<Integer>>();
      Integer[] integerArray0 = new Integer[4];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKeyMap0.putIfAbsent(multiKey0, multiKey0);
      boolean boolean0 = multiKeyMap0.removeAll((Object) multiKey0, (Object) null, (Object) null, (Object) null);
      assertFalse(multiKeyMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MultiKeyMap<Integer, MultiKey<Integer>> multiKeyMap0 = new MultiKeyMap<Integer, MultiKey<Integer>>();
      Integer integer0 = new Integer(9);
      multiKeyMap0.put(integer0, integer0, integer0, integer0, (MultiKey<Integer>) null);
      boolean boolean0 = multiKeyMap0.removeAll((Object) null, (Object) null, (Object) null, (Object) integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MultiKeyMap<Integer, MultiKey<Integer>> multiKeyMap0 = new MultiKeyMap<Integer, MultiKey<Integer>>();
      Integer[] integerArray0 = new Integer[8];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKeyMap0.putIfAbsent(multiKey0, multiKey0);
      Integer integer0 = new Integer(9);
      boolean boolean0 = multiKeyMap0.removeAll((Object) null, (Object) null, (Object) null, (Object) integer0);
      assertEquals(1, multiKeyMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MultiKeyMap<Integer, MultiKey<Integer>> multiKeyMap0 = new MultiKeyMap<Integer, MultiKey<Integer>>();
      Integer integer0 = new Integer(16);
      multiKeyMap0.put(integer0, integer0, (MultiKey<Integer>) null);
      boolean boolean0 = multiKeyMap0.removeAll((Object) integer0, (Object) integer0, (Object) integer0, (Object) integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MultiKeyMap<Integer, MultiKey<Integer>> multiKeyMap0 = new MultiKeyMap<Integer, MultiKey<Integer>>();
      Integer integer0 = new Integer(7);
      Integer[] integerArray0 = new Integer[4];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKeyMap0.put(integer0, integer0, integer0, integer0, multiKey0);
      boolean boolean0 = multiKeyMap0.removeAll((Object) integer0, (Object) integer0, (Object) integer0, (Object) integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      Integer integer0 = new Integer(32);
      multiKeyMap0.put(integer0, integer0, integer0, integer0);
      boolean boolean0 = multiKeyMap0.removeAll((Object) integer0, (Object) integer0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Integer integer0 = new Integer(1671);
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      multiKeyMap0.put(integer0, integer0, integer0, integer0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer0);
      boolean boolean0 = multiKeyMap0.removeAll((Object) integer0, (Object) multiKey0, (Object) multiKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Integer integer0 = new Integer(1671);
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      multiKeyMap0.put(integer0, integer0, integer0, integer0);
      boolean boolean0 = multiKeyMap0.removeAll((Object) integer0, (Object) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MultiKeyMap<MultiKey<Integer>, Integer> multiKeyMap0 = new MultiKeyMap<MultiKey<Integer>, Integer>();
      multiKeyMap0.put((MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null, (Integer) null);
      Integer integer0 = new Integer(319);
      boolean boolean0 = multiKeyMap0.removeAll((Object) integer0, (Object) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MultiKeyMap<Integer, MultiKey<Integer>> multiKeyMap0 = new MultiKeyMap<Integer, MultiKey<Integer>>();
      Integer integer0 = new Integer(16);
      MultiKey<Integer> multiKey0 = multiKeyMap0.put(integer0, integer0, integer0, integer0, (MultiKey<Integer>) null);
      boolean boolean0 = multiKeyMap0.removeAll((Object) null, (Object) null, (Object) multiKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      multiKeyMap0.put((Integer) null, (Integer) null, (Integer) null, (Integer) null);
      boolean boolean0 = multiKeyMap0.removeAll((Object) null, (Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      Integer integer0 = new Integer((-604));
      multiKeyMap0.put(integer0, integer0, integer0, integer0);
      AbstractHashedMap<Integer, Integer> abstractHashedMap0 = new AbstractHashedMap<Integer, Integer>();
      boolean boolean0 = multiKeyMap0.removeAll((Object) integer0, (Object) integer0, (Object) abstractHashedMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      Integer integer0 = new Integer((-136));
      Integer integer1 = multiKeyMap0.put(integer0, integer0, integer0);
      multiKeyMap0.put(integer0, integer1, integer1, (Integer) null, integer0, integer1);
      boolean boolean0 = multiKeyMap0.removeAll((Object) integer0, (Object) integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      Integer integer0 = new Integer(17);
      multiKeyMap0.put(integer0, integer0, integer0, integer0);
      boolean boolean0 = multiKeyMap0.removeAll((Object) integer0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      Integer integer0 = new Integer((-1208));
      multiKeyMap0.put(integer0, integer0, integer0, integer0);
      Integer integer1 = new Integer(2);
      boolean boolean0 = multiKeyMap0.removeAll((Object) integer1, (Object) integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      multiKeyMap0.put((Integer) null, (Integer) null, (Integer) null, (Integer) null);
      boolean boolean0 = multiKeyMap0.removeAll((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Integer integer0 = new Integer(21);
      Integer[] integerArray0 = new Integer[1];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      MultiKeyMap<Integer, MultiKey<Integer>> multiKeyMap0 = new MultiKeyMap<Integer, MultiKey<Integer>>();
      multiKeyMap0.putIfAbsent(multiKey0, multiKey0);
      boolean boolean0 = multiKeyMap0.removeAll((Object) integer0, (Object) integerArray0[0]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      Integer integer0 = new Integer((-695));
      multiKeyMap0.put(integer0, integer0, integer0);
      Integer integer1 = new Integer(803);
      boolean boolean0 = multiKeyMap0.removeAll((Object) integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      Integer integer0 = new Integer(1010);
      multiKeyMap0.put(integer0, integer0, integer0);
      boolean boolean0 = multiKeyMap0.removeAll((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      Integer integer0 = new Integer((-695));
      multiKeyMap0.put(integer0, integer0, integer0);
      boolean boolean0 = multiKeyMap0.removeAll((Object) integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      Integer integer0 = multiKeyMap0.put((MultiKey<? extends Integer>) multiKey0, (Integer) null);
      boolean boolean0 = multiKeyMap0.removeAll((Object) integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      Integer integer0 = new Integer(1010);
      multiKeyMap0.put((Integer) null, integer0, integer0);
      boolean boolean0 = multiKeyMap0.removeAll((Object) null);
      assertFalse(multiKeyMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MultiKeyMap<MultiKey<Integer>, Integer> multiKeyMap0 = new MultiKeyMap<MultiKey<Integer>, Integer>();
      Integer integer0 = new Integer(35);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      multiKeyMap0.put(multiKey0, multiKey0, multiKey0, multiKey1, multiKey1, integer0);
      multiKeyMap0.put(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0, integer0);
      assertEquals(2, multiKeyMap0.size());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MultiKeyMap<MultiKey<Integer>, Integer> multiKeyMap0 = new MultiKeyMap<MultiKey<Integer>, Integer>();
      Integer integer0 = new Integer((-251));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKeyMap0.put(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0, integer0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, integer0, integer0, (Integer) null);
      multiKeyMap0.put(multiKey0, multiKey0, multiKey1, multiKey1, multiKey0, (Integer) null);
      assertEquals(2, multiKeyMap0.size());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MultiKeyMap<MultiKey<Integer>, Integer> multiKeyMap0 = new MultiKeyMap<MultiKey<Integer>, Integer>();
      Integer integer0 = new Integer(3424);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      multiKeyMap0.put(multiKey0, multiKey0, multiKey0, multiKey1, multiKey1, integer0);
      Integer integer1 = multiKeyMap0.put(multiKey0, multiKey1, multiKey0, multiKey0, multiKey1, (Integer) null);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MultiKeyMap<MultiKey<Integer>, Integer> multiKeyMap0 = new MultiKeyMap<MultiKey<Integer>, Integer>();
      Integer integer0 = new Integer((-251));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKeyMap0.put(multiKey0, multiKey0, multiKey0, multiKey1, multiKey1, integer0);
      multiKeyMap0.put(multiKey0, multiKey1, multiKey1, multiKey0, multiKey0, integer0);
      assertEquals(1, multiKeyMap0.size());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MultiKeyMap<MultiKey<Integer>, Integer> multiKeyMap0 = new MultiKeyMap<MultiKey<Integer>, Integer>();
      Integer integer0 = new Integer(1220);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKeyMap0.put(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0, integer0);
      multiKeyMap0.put(multiKey0, (MultiKey<Integer>) null, (MultiKey<Integer>) null, multiKey0, multiKey0, (Integer) null);
      assertEquals(2, multiKeyMap0.size());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MultiKeyMap<MultiKey<Integer>, Integer> multiKeyMap0 = new MultiKeyMap<MultiKey<Integer>, Integer>();
      Integer integer0 = new Integer((-214));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKeyMap0.put(multiKey0, multiKey0, multiKey0, multiKey1, multiKey1, integer0);
      multiKeyMap0.put(multiKey1, multiKey0, multiKey0, multiKey0, multiKey1, integer0);
      assertEquals(1, multiKeyMap0.size());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MultiKeyMap<MultiKey<Integer>, Integer> multiKeyMap0 = new MultiKeyMap<MultiKey<Integer>, Integer>();
      Integer integer0 = new Integer((-2456));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      Integer integer1 = multiKeyMap0.put(multiKey0, (MultiKey<Integer>) null, multiKey0, multiKey0, (MultiKey<Integer>) null, integer0);
      Integer integer2 = multiKeyMap0.put((MultiKey<Integer>) null, (MultiKey<Integer>) null, multiKey0, (MultiKey<Integer>) null, (MultiKey<Integer>) null, integer1);
      assertNull(integer2);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MultiKeyMap<MultiKey<Integer>, Integer> multiKeyMap0 = new MultiKeyMap<MultiKey<Integer>, Integer>();
      Integer integer0 = new Integer((-297));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      multiKeyMap0.put(multiKey0, multiKey0, multiKey0, multiKey1, multiKey1, integer0);
      multiKeyMap0.put(multiKey1, multiKey1, multiKey0, multiKey1, multiKey1, (Integer) null);
      assertEquals(2, multiKeyMap0.size());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MultiKeyMap<Integer, MultiKey<Integer>> multiKeyMap0 = new MultiKeyMap<Integer, MultiKey<Integer>>();
      Integer integer0 = new Integer((-8218088));
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-8218088));
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKeyMap0.putIfAbsent(multiKey0, multiKey0);
      AbstractHashedMap<Integer, Integer> abstractHashedMap0 = new AbstractHashedMap<Integer, Integer>();
      AbstractHashedMap<Integer, Integer> abstractHashedMap1 = new AbstractHashedMap<Integer, Integer>();
      MultiKey<ByteArrayInputStream> multiKey1 = new MultiKey<ByteArrayInputStream>((ByteArrayInputStream) null, (ByteArrayInputStream) null, (ByteArrayInputStream) null);
      MultiKey<Integer> multiKey2 = multiKeyMap0.removeMultiKey((Object) null, (Object) multiKey1, (Object) integer0, (Object) integer1, (Object) null);
      assertNull(multiKey2);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MultiKeyMap<MultiKey<Integer>, Integer> multiKeyMap0 = new MultiKeyMap<MultiKey<Integer>, Integer>();
      Integer integer0 = new Integer(9);
      multiKeyMap0.put((MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null, integer0);
      multiKeyMap0.removeMultiKey((Object) null, (Object) null, (Object) null, (Object) null, (Object) null);
      assertTrue(multiKeyMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MultiKeyMap<MultiKey<Integer>, Integer> multiKeyMap0 = new MultiKeyMap<MultiKey<Integer>, Integer>();
      Integer integer0 = new Integer((-169));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      multiKeyMap0.put(multiKey0, multiKey0, multiKey0, multiKey1, multiKey1, integer0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0);
      Integer integer1 = multiKeyMap0.put((MultiKey<Integer>) null, multiKey2, multiKey1, multiKey0, multiKey0, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      Integer integer0 = new Integer(331);
      Integer integer1 = multiKeyMap0.put(integer0, integer0, integer0, integer0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer1, integer1, integer1, integer1);
      Integer integer2 = new Integer(331);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer2, (Integer) null, integer0);
      boolean boolean0 = multiKeyMap0.containsKey((Object) integer0, (Object) integer0, (Object) multiKey0, (Object) null, (Object) multiKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      Integer integer0 = new Integer((-69));
      multiKeyMap0.put(integer0, integer0, integer0, integer0);
      multiKeyMap0.containsKey((Object) integer0, (Object) integer0, (Object) null, (Object) integer0);
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Integer integer1 = new Integer((-1328));
      boolean boolean0 = multiKeyMap0.containsKey((Object) null, (Object) byteArrayInputStream0, (Object) null, (Object) integer1, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MultiKeyMap<MultiKey<Integer>, Integer> multiKeyMap0 = new MultiKeyMap<MultiKey<Integer>, Integer>();
      Integer integer0 = new Integer(26);
      multiKeyMap0.put((MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null, integer0);
      Integer integer1 = multiKeyMap0.get((Object) null, (Object) null, (Object) null, (Object) null, (Object) null);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MultiKeyMap<MultiKey<Integer>, Integer> multiKeyMap0 = new MultiKeyMap<MultiKey<Integer>, Integer>();
      Integer integer0 = new Integer(9);
      Integer integer1 = new Integer(623);
      Integer integer2 = new Integer(9);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer2, (Integer) null);
      Integer integer3 = new Integer((-2041));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer3, integer1);
      multiKeyMap0.put((MultiKey<Integer>) null, (MultiKey<Integer>) null, multiKey0, multiKey1, integer3);
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Integer integer4 = new Integer((byte)78);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (-4987), (-201));
      Integer integer5 = new Integer(949);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer5, (Integer) null);
      Integer integer6 = multiKeyMap0.get((Object) byteArrayInputStream0, (Object) integer0, (Object) integer4, (Object) byteArrayInputStream1, (Object) multiKey2);
      assertNull(integer6);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MultiKeyMap<MultiKey<Integer>, Integer> multiKeyMap0 = new MultiKeyMap<MultiKey<Integer>, Integer>();
      Integer integer0 = new Integer(26);
      multiKeyMap0.put((MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null, integer0);
      Integer integer1 = multiKeyMap0.get((Object) null, (Object) null, (Object) null, (Object) null, (Object) null);
      assertEquals(26, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MultiKeyMap<Integer, MultiKey<Integer>> multiKeyMap0 = new MultiKeyMap<Integer, MultiKey<Integer>>();
      Integer[] integerArray0 = new Integer[4];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKeyMap0.putIfAbsent(multiKey0, multiKey0);
      MultiKey<Integer> multiKey1 = multiKeyMap0.get((Object) null, (Object) null, (Object) multiKey0, (Object) null);
      assertNull(multiKey1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Integer integer0 = new Integer((-3362));
      MultiKeyMap<Integer, MultiKey<Integer>> multiKeyMap0 = new MultiKeyMap<Integer, MultiKey<Integer>>();
      multiKeyMap0.put(integer0, (Integer) null, integer0, integer0, (MultiKey<Integer>) null);
      multiKeyMap0.put(integer0, (Integer) null, (Integer) null, (Integer) null, (MultiKey<Integer>) null);
      assertEquals(2, multiKeyMap0.size());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Integer integer0 = new Integer(642);
      MultiKeyMap<Integer, MultiKey<Integer>> multiKeyMap0 = new MultiKeyMap<Integer, MultiKey<Integer>>();
      Integer integer1 = new Integer(642);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0);
      multiKeyMap0.put(integer0, integer1, integer1, integer0, multiKey0);
      multiKeyMap0.put(integer0, integer1, integer0, integer1, multiKey0);
      assertEquals(1, multiKeyMap0.size());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MultiKeyMap<Integer, MultiKey<Integer>> multiKeyMap0 = new MultiKeyMap<Integer, MultiKey<Integer>>();
      Integer integer0 = new Integer(16);
      multiKeyMap0.put(integer0, integer0, integer0, integer0, (MultiKey<Integer>) null);
      MultiKey<Integer> multiKey0 = multiKeyMap0.get((Object) integer0, (Object) null, (Object) null, (Object) integer0);
      assertNull(multiKey0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MultiKeyMap<Integer, MultiKey<Integer>> multiKeyMap0 = new MultiKeyMap<Integer, MultiKey<Integer>>();
      Integer[] integerArray0 = new Integer[4];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKeyMap0.putIfAbsent(multiKey0, multiKey0);
      MultiKey<Integer> multiKey1 = multiKeyMap0.get((Object) multiKey0, (Object) null, (Object) integerArray0[1], (Object) integerArray0[1]);
      assertNull(multiKey1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MultiKeyMap<MultiKey<Integer>, Integer> multiKeyMap0 = new MultiKeyMap<MultiKey<Integer>, Integer>();
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null);
      Integer integer0 = multiKeyMap0.put(multiKey0, multiKey0, (Integer) null);
      multiKeyMap0.put(multiKey0, multiKey0, multiKey0, multiKey0, integer0);
      multiKeyMap0.removeMultiKey((Object) null, (Object) null, (Object) multiKey0, (Object) multiKey0);
      assertEquals(2, multiKeyMap0.size());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MultiKeyMap<Integer, MultiKey<Integer>> multiKeyMap0 = new MultiKeyMap<Integer, MultiKey<Integer>>();
      Integer integer0 = new Integer(7);
      Integer integer1 = new Integer(7);
      Integer integer2 = new Integer(7);
      Integer integer3 = new Integer(2);
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[2] = integer3;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKeyMap0.put(integer1, integer2, integer0, integer3, multiKey0);
      multiKeyMap0.put(integer0, integer0, integer0, integer0, (MultiKey<Integer>) null);
      assertEquals(2, multiKeyMap0.size());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MultiKeyMap<MultiKey<Integer>, Integer> multiKeyMap0 = new MultiKeyMap<MultiKey<Integer>, Integer>();
      Integer integer0 = new Integer(1671);
      Integer integer1 = new Integer(1671);
      multiKeyMap0.getOrDefault(integer0, integer0);
      Integer integer2 = new Integer(1671);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer1, integer1, integer2);
      multiKeyMap0.put(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0, integer1);
      AbstractHashedMap<Integer, Integer> abstractHashedMap0 = new AbstractHashedMap<Integer, Integer>(2499);
      Integer integer3 = new Integer(1671);
      Integer integer4 = new Integer(2499);
      Integer integer5 = multiKeyMap0.removeMultiKey((Object) abstractHashedMap0, (Object) integer0, (Object) integer3, (Object) integer4);
      assertNull(integer5);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MultiKeyMap<MultiKey<Integer>, Integer> multiKeyMap0 = new MultiKeyMap<MultiKey<Integer>, Integer>();
      multiKeyMap0.put((MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null, (Integer) null);
      multiKeyMap0.removeMultiKey((Object) null, (Object) null, (Object) null, (Object) null);
      assertTrue(multiKeyMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MultiKeyMap<MultiKey<Integer>, Integer> multiKeyMap0 = new MultiKeyMap<MultiKey<Integer>, Integer>();
      Integer integer0 = new Integer(26);
      multiKeyMap0.put((MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null, integer0);
      multiKeyMap0.put((MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null, integer0);
      assertEquals(2, multiKeyMap0.size());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MultiKeyMap<MultiKey<Integer>, Integer> multiKeyMap0 = new MultiKeyMap<MultiKey<Integer>, Integer>();
      Integer integer0 = new Integer((-8165177));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      Integer integer1 = new Integer(0);
      MultiKeyMap<Integer, Integer> multiKeyMap1 = new MultiKeyMap<Integer, Integer>();
      Integer integer2 = new Integer((-269081));
      Integer integer3 = new Integer((-222078));
      multiKeyMap1.put(integer2, integer2, integer3, integer2);
      boolean boolean0 = multiKeyMap1.containsKey((Object) null, (Object) integer1, (Object) multiKey0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MultiKeyMap<MultiKey<Integer>, Integer> multiKeyMap0 = new MultiKeyMap<MultiKey<Integer>, Integer>();
      Integer integer0 = new Integer((-297));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      MultiKeyMap<Integer, MultiKey<Integer>> multiKeyMap1 = new MultiKeyMap<Integer, MultiKey<Integer>>();
      multiKeyMap1.putIfAbsent(multiKey0, multiKey0);
      Integer integer1 = new Integer((-297));
      Integer integer2 = new Integer((-297));
      MultiKey<Integer> multiKey1 = multiKeyMap1.get((Object) multiKey0, (Object) integer1, (Object) integer1, (Object) integer2);
      assertNull(multiKey1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MultiKeyMap<Integer, MultiKey<Integer>> multiKeyMap0 = new MultiKeyMap<Integer, MultiKey<Integer>>();
      Integer[] integerArray0 = new Integer[4];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKeyMap0.putIfAbsent(multiKey0, multiKey0);
      MultiKey<Integer> multiKey1 = multiKeyMap0.get((Object) integerArray0[3], (Object) multiKey0, (Object) null, (Object) integerArray0[0]);
      assertNull(multiKey1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      Integer integer0 = new Integer(793);
      Integer integer1 = new Integer(793);
      multiKeyMap0.put(integer1, integer1, integer0, integer1);
      multiKeyMap0.put(integer0, integer1, integer1, integer0);
      assertEquals(1, multiKeyMap0.size());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      Integer integer0 = new Integer(1605);
      Integer integer1 = new Integer(1605);
      multiKeyMap0.put(integer0, (Integer) null, integer1, integer1);
      Integer integer2 = new Integer(1605);
      boolean boolean0 = multiKeyMap0.containsKey((Object) integer2, (Object) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      Integer integer0 = new Integer(43);
      Integer integer1 = new Integer(43);
      multiKeyMap0.put(integer0, integer1, (Integer) null, (Integer) null);
      Integer integer2 = new Integer(43);
      multiKeyMap0.put(integer2, integer2, integer2, integer0);
      assertEquals(2, multiKeyMap0.size());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      Integer integer0 = new Integer(1605);
      multiKeyMap0.put(integer0, integer0, integer0, integer0);
      boolean boolean0 = multiKeyMap0.containsKey((Object) integer0, (Object) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      Integer integer0 = new Integer(803);
      multiKeyMap0.put((Integer) null, (Integer) null, integer0, integer0);
      multiKeyMap0.put(integer0, integer0, integer0, integer0);
      assertEquals(2, multiKeyMap0.size());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      Integer integer0 = new Integer(43);
      multiKeyMap0.put(integer0, integer0, integer0, integer0);
      multiKeyMap0.put((Integer) null, integer0, (Integer) null, integer0);
      assertEquals(2, multiKeyMap0.size());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      Integer integer0 = new Integer(843);
      multiKeyMap0.put(integer0, integer0, integer0, integer0);
      multiKeyMap0.removeMultiKey((Object) integer0, (Object) integer0, (Object) integer0);
      assertTrue(multiKeyMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MultiKeyMap<MultiKey<Integer>, Integer> multiKeyMap0 = new MultiKeyMap<MultiKey<Integer>, Integer>();
      Integer integer0 = new Integer(61);
      Integer integer1 = new Integer(61);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, integer0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, (Integer) null, integer1, integer0);
      Integer integer2 = new Integer(61);
      Integer integer3 = new Integer(299);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, integer2, integer3, integer1);
      multiKeyMap0.put(multiKey0, multiKey0, multiKey1, multiKey2, multiKey1, integer3);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2683), 61);
      Integer integer4 = multiKeyMap0.removeMultiKey((Object) integer1, (Object) null, (Object) byteArrayInputStream0);
      assertNull(integer4);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MultiKeyMap<MultiKey<Integer>, Integer> multiKeyMap0 = new MultiKeyMap<MultiKey<Integer>, Integer>();
      Integer integer0 = new Integer(61);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, (Integer) null, integer0, integer0);
      Integer integer1 = new Integer(61);
      Integer integer2 = new Integer(299);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, integer1, integer2, integer0);
      multiKeyMap0.put(multiKey0, multiKey0, multiKey1, multiKey2, multiKey1, integer2);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2683), 61);
      Integer integer3 = multiKeyMap0.removeMultiKey((Object) integer0, (Object) null, (Object) byteArrayInputStream0);
      assertNull(integer3);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MultiKeyMap<ByteArrayInputStream, ByteArrayInputStream> multiKeyMap0 = new MultiKeyMap<ByteArrayInputStream, ByteArrayInputStream>();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      multiKeyMap0.put(byteArrayInputStream0, byteArrayInputStream0, byteArrayInputStream0, byteArrayInputStream0);
      multiKeyMap0.put(byteArrayInputStream0, byteArrayInputStream0, byteArrayInputStream0, byteArrayInputStream0);
      assertEquals(1, multiKeyMap0.size());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      Integer integer0 = new Integer(803);
      multiKeyMap0.removeAll((Object) integer0);
      Integer integer1 = new Integer(803);
      Integer integer2 = new Integer(803);
      multiKeyMap0.put(integer0, integer1, integer1, integer2);
      Integer integer3 = multiKeyMap0.put(integer1, (Integer) null, integer2, integer1);
      assertNull(integer3);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      Integer integer0 = new Integer(1605);
      Integer integer1 = new Integer(1605);
      multiKeyMap0.put(integer0, (Integer) null, integer1, integer1);
      Integer integer2 = new Integer(1605);
      multiKeyMap0.put(integer2, integer2, integer2, integer2);
      assertEquals(2, multiKeyMap0.size());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      Integer integer0 = new Integer(49);
      multiKeyMap0.put(integer0, integer0, integer0, integer0);
      boolean boolean0 = multiKeyMap0.containsKey((Object) integer0, (Object) integer0, (Object) integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-2134));
      multiKeyMap0.put(integer0, integer0, integer0, (Integer) null, integer2, integer2);
      boolean boolean0 = multiKeyMap0.removeAll((Object) integer0, (Object) integer0);
      assertTrue(boolean0);
      
      boolean boolean1 = multiKeyMap0.containsKey((Object) integer0, (Object) integer1, (Object) null);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      multiKeyMap0.put(integer0, integer0, integer0);
      boolean boolean0 = multiKeyMap0.containsKey((Object) integer0, (Object) integer0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      Integer integer0 = new Integer(3339);
      multiKeyMap0.put(integer0, integer0, integer0, integer0, integer0, integer0);
      Integer integer1 = multiKeyMap0.get((Object) integer0, (Object) integer0, (Object) integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      Integer integer0 = new Integer((-446));
      multiKeyMap0.put(integer0, (Integer) null, integer0);
      AbstractHashedMap<Integer, Integer> abstractHashedMap0 = new AbstractHashedMap<Integer, Integer>();
      Integer integer1 = new Integer(9);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer1, integer0, (Integer) null);
      Integer integer2 = multiKeyMap0.get((Object) abstractHashedMap0, (Object) multiKey0, (Object) null);
      assertNull(integer2);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      Integer integer0 = new Integer(3339);
      multiKeyMap0.put(integer0, integer0, integer0, integer0);
      Integer integer1 = multiKeyMap0.get((Object) integer0, (Object) integer0, (Object) integer0);
      assertEquals(3339, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      multiKeyMap0.mapIterator();
      Integer integer0 = new Integer(791);
      Integer integer1 = new Integer(791);
      multiKeyMap0.put(integer1, integer0, integer0);
      Integer integer2 = new Integer(791);
      Integer integer3 = new Integer(756);
      multiKeyMap0.put(integer2, integer3, integer0);
      assertEquals(2, multiKeyMap0.size());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      Integer integer0 = new Integer((-8173951));
      Integer integer1 = new Integer(14);
      multiKeyMap0.put(integer0, integer1, integer1);
      Integer integer2 = new Integer((-8173951));
      boolean boolean0 = multiKeyMap0.containsKey((Object) integer2, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      Integer integer0 = new Integer(5);
      Integer integer1 = new Integer(5);
      multiKeyMap0.put(integer0, integer0, integer1);
      boolean boolean0 = multiKeyMap0.containsKey((Object) integer1, (Object) integer1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      Integer integer0 = new Integer(4);
      multiKeyMap0.put(integer0, integer0, integer0);
      boolean boolean0 = multiKeyMap0.containsKey((Object) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      multiKeyMap0.put((Integer) null, (Integer) null, (Integer) null);
      multiKeyMap0.removeMultiKey((Object) null, (Object) null);
      assertEquals(0, multiKeyMap0.size());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      Integer integer0 = new Integer(2605);
      Integer integer1 = new Integer(2605);
      multiKeyMap0.put(integer0, integer1, integer1);
      MultiKeyMap<Integer, AbstractHashedMap<Integer, Integer>> multiKeyMap1 = new MultiKeyMap<Integer, AbstractHashedMap<Integer, Integer>>();
      Integer integer2 = new Integer((-2714));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer2, integer1, integer2, integer0);
      Object object0 = multiKeyMap0.removeMultiKey((Object) multiKey0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      Integer integer0 = new Integer(5016);
      multiKeyMap0.put(integer0, integer0, integer0, integer0);
      Integer integer1 = multiKeyMap0.removeMultiKey((Object) null, (Object) integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      multiKeyMap0.mapIterator();
      Integer integer0 = new Integer(3344);
      Integer integer1 = new Integer(3344);
      multiKeyMap0.put(integer1, integer0, integer0);
      Integer integer2 = new Integer(3344);
      Integer integer3 = new Integer(3344);
      multiKeyMap0.put(integer1, (Integer) null, integer3, (Integer) null);
      Integer integer4 = new Integer(3344);
      multiKeyMap0.put(integer2, integer4, integer0);
      assertEquals(3, multiKeyMap0.size());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      multiKeyMap0.put((Integer) null, (Integer) null, (Integer) null);
      multiKeyMap0.put((Integer) null, (Integer) null, (Integer) null);
      assertEquals(1, multiKeyMap0.size());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      Integer integer0 = new Integer(125);
      multiKeyMap0.put((Integer) null, integer0, (Integer) null);
      boolean boolean0 = multiKeyMap0.containsKey((Object) integer0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      Integer integer0 = new Integer(843);
      boolean boolean0 = multiKeyMap0.removeAll((Object) integer0);
      assertFalse(boolean0);
      
      Integer integer1 = new Integer(843);
      multiKeyMap0.put(integer0, integer1, integer1, integer1);
      Integer integer2 = new Integer((-8261274));
      boolean boolean1 = multiKeyMap0.containsKey((Object) integer1, (Object) integer2);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      multiKeyMap0.put((Integer) null, (Integer) null, (Integer) null);
      Integer integer0 = multiKeyMap0.get((Object) null, (Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      Integer integer0 = new Integer((-777));
      Integer integer1 = new Integer((-777));
      Integer integer2 = new Integer((-777));
      Integer integer3 = new Integer((-777));
      multiKeyMap0.put(integer0, integer1, integer1, integer3);
      multiKeyMap0.mapIterator();
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      AbstractHashedMap<Integer, Integer> abstractHashedMap0 = new AbstractHashedMap<Integer, Integer>();
      Integer integer4 = new Integer((-777));
      multiKeyMap0.put(integer3, integer1, integer4, integer2, integer3);
      Integer integer5 = multiKeyMap0.get((Object) abstractHashedMap0, (Object) multiKey0);
      assertNull(integer5);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Integer integer0 = new Integer(1671);
      MultiKeyMap<Integer, Integer> multiKeyMap0 = new MultiKeyMap<Integer, Integer>();
      multiKeyMap0.put(integer0, integer0, integer0, integer0);
      AbstractHashedMap<MultiKey<? extends Integer>, Integer> abstractHashedMap0 = multiKeyMap0.decorated();
      // Undeclared exception!
      try { 
        MultiKeyMap.multiKeyMap(abstractHashedMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Map must be empty
         //
         verifyException("org.apache.commons.collections4.map.MultiKeyMap", e);
      }
  }
}
