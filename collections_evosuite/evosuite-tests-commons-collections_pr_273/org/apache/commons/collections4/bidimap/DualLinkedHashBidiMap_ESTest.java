/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 12:26:59 GMT 2025
 */

package org.apache.commons.collections4.bidimap;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.collections4.BidiMap;
import org.apache.commons.collections4.bidimap.DualHashBidiMap;
import org.apache.commons.collections4.bidimap.DualLinkedHashBidiMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class DualLinkedHashBidiMap_ESTest extends DualLinkedHashBidiMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DualLinkedHashBidiMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>();
      BidiMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> bidiMap0 = dualLinkedHashBidiMap0.createBidiMap(dualLinkedHashBidiMap0, dualLinkedHashBidiMap0, dualLinkedHashBidiMap0);
      assertEquals(0, bidiMap0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DualHashBidiMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> dualHashBidiMap0 = new DualHashBidiMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>();
      DualLinkedHashBidiMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>(dualHashBidiMap0, dualHashBidiMap0, dualHashBidiMap0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      dualHashBidiMap0.put(hashMap0, hashMap0);
      BidiMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> bidiMap0 = dualLinkedHashBidiMap0.createBidiMap(dualLinkedHashBidiMap0, dualHashBidiMap0, dualHashBidiMap0);
      assertFalse(bidiMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DualLinkedHashBidiMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>();
      DualHashBidiMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> dualHashBidiMap0 = new DualHashBidiMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>(dualLinkedHashBidiMap0, dualLinkedHashBidiMap0, dualLinkedHashBidiMap0);
      dualLinkedHashBidiMap0.normalMap = (Map<HashMap<Integer, Integer>, HashMap<Integer, Integer>>) dualHashBidiMap0;
      DualLinkedHashBidiMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> dualLinkedHashBidiMap1 = null;
      try {
        dualLinkedHashBidiMap1 = new DualLinkedHashBidiMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>(dualLinkedHashBidiMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = null;
      try {
        dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>((Map<? extends Integer, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DualLinkedHashBidiMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>();
      DualLinkedHashBidiMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> dualLinkedHashBidiMap1 = new DualLinkedHashBidiMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>(dualLinkedHashBidiMap0);
      assertTrue(dualLinkedHashBidiMap1.equals((Object)dualLinkedHashBidiMap0));
  }
}
