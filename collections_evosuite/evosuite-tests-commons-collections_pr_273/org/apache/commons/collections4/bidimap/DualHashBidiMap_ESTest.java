/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 12:24:54 GMT 2025
 */

package org.apache.commons.collections4.bidimap;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.collections4.BidiMap;
import org.apache.commons.collections4.SortedBidiMap;
import org.apache.commons.collections4.bidimap.DualHashBidiMap;
import org.apache.commons.collections4.bidimap.DualLinkedHashBidiMap;
import org.apache.commons.collections4.bidimap.DualTreeBidiMap;
import org.apache.commons.collections4.bidimap.UnmodifiableBidiMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class DualHashBidiMap_ESTest extends DualHashBidiMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>();
      BidiMap<Integer, Integer> bidiMap0 = dualHashBidiMap0.createBidiMap(dualHashBidiMap0, dualHashBidiMap0, dualHashBidiMap0);
      assertEquals(0, bidiMap0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>();
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>(dualHashBidiMap0);
      Integer integer0 = new Integer(0);
      dualLinkedHashBidiMap0.put(integer0, integer0);
      BidiMap<Integer, Integer> bidiMap0 = dualHashBidiMap0.createBidiMap(dualLinkedHashBidiMap0, dualLinkedHashBidiMap0, (BidiMap<Integer, Integer>) null);
      assertFalse(bidiMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, HashMap<Integer, Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, HashMap<Integer, Integer>>();
      BidiMap<Integer, HashMap<Integer, Integer>> bidiMap0 = UnmodifiableBidiMap.unmodifiableBidiMap((BidiMap<? extends Integer, ? extends HashMap<Integer, Integer>>) dualLinkedHashBidiMap0);
      dualLinkedHashBidiMap0.normalMap = (Map<Integer, HashMap<Integer, Integer>>) bidiMap0;
      DualHashBidiMap<Integer, HashMap<Integer, Integer>> dualHashBidiMap0 = null;
      try {
        dualHashBidiMap0 = new DualHashBidiMap<Integer, HashMap<Integer, Integer>>(dualLinkedHashBidiMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>();
      dualHashBidiMap0.normalMap = (Map<Integer, Integer>) dualHashBidiMap0;
      DualHashBidiMap<Integer, Integer> dualHashBidiMap1 = null;
      try {
        dualHashBidiMap1 = new DualHashBidiMap<Integer, Integer>(dualHashBidiMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DualHashBidiMap<Integer, HashMap<Integer, Integer>> dualHashBidiMap0 = null;
      try {
        dualHashBidiMap0 = new DualHashBidiMap<Integer, HashMap<Integer, Integer>>((Map<? extends Integer, ? extends HashMap<Integer, Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>();
      DualHashBidiMap<Integer, Integer> dualHashBidiMap1 = new DualHashBidiMap<Integer, Integer>(dualHashBidiMap0, dualHashBidiMap0, dualHashBidiMap0);
      assertTrue(dualHashBidiMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<HashMap<Integer, Integer>> comparator1 = (Comparator<HashMap<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<Integer, HashMap<Integer, Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, HashMap<Integer, Integer>>(comparator0, comparator1);
      SortedBidiMap<HashMap<Integer, Integer>, Integer> sortedBidiMap0 = dualTreeBidiMap0.inverseSortedBidiMap();
      DualHashBidiMap<HashMap<Integer, Integer>, Integer> dualHashBidiMap0 = new DualHashBidiMap<HashMap<Integer, Integer>, Integer>(sortedBidiMap0);
      assertTrue(dualHashBidiMap0.isEmpty());
  }
}
