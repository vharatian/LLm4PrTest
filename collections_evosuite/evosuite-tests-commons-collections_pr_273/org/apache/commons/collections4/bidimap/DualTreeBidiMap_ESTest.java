/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 12:29:13 GMT 2025
 */

package org.apache.commons.collections4.bidimap;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.KeyValue;
import org.apache.commons.collections4.OrderedBidiMap;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.SortedBidiMap;
import org.apache.commons.collections4.bidimap.DualHashBidiMap;
import org.apache.commons.collections4.bidimap.DualLinkedHashBidiMap;
import org.apache.commons.collections4.bidimap.DualTreeBidiMap;
import org.apache.commons.collections4.bidimap.TreeBidiMap;
import org.apache.commons.collections4.keyvalue.DefaultMapEntry;
import org.apache.commons.collections4.map.LinkedMap;
import org.apache.commons.collections4.map.SingletonMap;
import org.apache.commons.collections4.trie.PatriciaTrie;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class DualTreeBidiMap_ESTest extends DualTreeBidiMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = Integer.getInteger("", (-1442));
      DualTreeBidiMap<Integer, TreeBidiMap.Inverse> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, TreeBidiMap.Inverse>();
      DualTreeBidiMap.ViewMap<Integer, TreeBidiMap.Inverse> dualTreeBidiMap_ViewMap0 = new DualTreeBidiMap.ViewMap<Integer, TreeBidiMap.Inverse>(dualTreeBidiMap0, dualTreeBidiMap0);
      Integer integer1 = new Integer(392);
      // Undeclared exception!
      try { 
        dualTreeBidiMap_ViewMap0.subMap(integer1, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromKey > toKey
         //
         verifyException("java.util.TreeMap$NavigableSubMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(anyInt() , anyInt());
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>(comparator0, comparator0);
      dualTreeBidiMap0.put(integer0, integer0);
      Integer integer1 = dualTreeBidiMap0.firstKey();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(640).when(comparator0).compare(anyInt() , anyInt());
      Comparator<PatriciaTrie<Integer>> comparator1 = (Comparator<PatriciaTrie<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<Integer, PatriciaTrie<Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, PatriciaTrie<Integer>>(comparator0, comparator1);
      Integer integer0 = new Integer((-1637));
      dualTreeBidiMap0.tailMap(integer0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DefaultMapEntry<Integer, HashMap<Integer, Integer>> defaultMapEntry0 = new DefaultMapEntry<Integer, HashMap<Integer, Integer>>(integer0, hashMap0);
      SingletonMap<Integer, HashMap<Integer, Integer>> singletonMap0 = new SingletonMap<Integer, HashMap<Integer, Integer>>((KeyValue<Integer, HashMap<Integer, Integer>>) defaultMapEntry0);
      DualTreeBidiMap<Integer, HashMap<Integer, Integer>> dualTreeBidiMap1 = null;
      try {
        dualTreeBidiMap1 = new DualTreeBidiMap<Integer, HashMap<Integer, Integer>>(singletonMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparator<HashMap<Integer, Integer>> comparator0 = (Comparator<HashMap<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<TreeBidiMap.Inverse> comparator1 = (Comparator<TreeBidiMap.Inverse>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator1).toString();
      DualTreeBidiMap<HashMap<Integer, Integer>, TreeBidiMap.Inverse> dualTreeBidiMap0 = new DualTreeBidiMap<HashMap<Integer, Integer>, TreeBidiMap.Inverse>(comparator0, comparator1);
      Comparator<? super TreeBidiMap.Inverse> comparator2 = dualTreeBidiMap0.valueComparator();
      assertNotNull(comparator2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      Comparator<PatriciaTrie<Integer>> comparator1 = (Comparator<PatriciaTrie<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<Integer, PatriciaTrie<Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, PatriciaTrie<Integer>>(comparator0, comparator1);
      Integer integer0 = new Integer((-1637));
      dualTreeBidiMap0.tailMap(integer0);
      DualTreeBidiMap<HashMap<Integer, Integer>, TreeBidiMap.Inverse> dualTreeBidiMap1 = new DualTreeBidiMap<HashMap<Integer, Integer>, TreeBidiMap.Inverse>();
      assertEquals(0, dualTreeBidiMap1.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2055, 1).when(comparator0).compare(any() , any());
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(comparator1).compare(anyInt() , anyInt());
      DualTreeBidiMap<TreeBidiMap.Inverse, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<TreeBidiMap.Inverse, Integer>(comparator0, comparator1);
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      Integer integer0 = new Integer((-1));
      BiFunction<Integer, Integer, Integer> biFunction0 = (BiFunction<Integer, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      dualTreeBidiMap0.merge(treeBidiMap_Inverse0, integer0, biFunction0);
      SortedMap<TreeBidiMap.Inverse, Integer> sortedMap0 = dualTreeBidiMap0.tailMap((TreeBidiMap.Inverse) null);
      //  // Unstable assertion: assertFalse(sortedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comparator<UnaryOperator<Integer>> comparator0 = (Comparator<UnaryOperator<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1845), (-1845), (-1845), (-1845), 61).when(comparator0).compare(any(java.util.function.UnaryOperator.class) , any(java.util.function.UnaryOperator.class));
      Comparator<PatriciaTrie<Integer>> comparator1 = (Comparator<PatriciaTrie<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1845)).when(comparator1).compare(any(org.apache.commons.collections4.trie.PatriciaTrie.class) , any(org.apache.commons.collections4.trie.PatriciaTrie.class));
      DualTreeBidiMap<UnaryOperator<Integer>, PatriciaTrie<Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<UnaryOperator<Integer>, PatriciaTrie<Integer>>(comparator0, comparator1);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      BiFunction<PatriciaTrie<Integer>, PatriciaTrie<Integer>, PatriciaTrie<Integer>> biFunction0 = (BiFunction<PatriciaTrie<Integer>, PatriciaTrie<Integer>, PatriciaTrie<Integer>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      dualTreeBidiMap0.merge(unaryOperator0, patriciaTrie0, biFunction0);
      UnaryOperator<Integer> unaryOperator1 = dualTreeBidiMap0.previousKey((UnaryOperator<Integer>) null);
      assertSame(unaryOperator1, unaryOperator0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comparator<TreeBidiMap.Inverse> comparator0 = (Comparator<TreeBidiMap.Inverse>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(org.apache.commons.collections4.bidimap.TreeBidiMap.Inverse.class) , any(org.apache.commons.collections4.bidimap.TreeBidiMap.Inverse.class));
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(anyInt() , anyInt());
      DualTreeBidiMap<TreeBidiMap.Inverse, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<TreeBidiMap.Inverse, Integer>(comparator0, comparator1);
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      Integer integer0 = new Integer(681);
      BiFunction<Integer, Integer, Integer> biFunction0 = (BiFunction<Integer, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      dualTreeBidiMap0.merge(treeBidiMap_Inverse0, integer0, biFunction0);
      TreeBidiMap.Inverse treeBidiMap_Inverse1 = (TreeBidiMap.Inverse)dualTreeBidiMap0.lastKey();
      assertTrue(treeBidiMap_Inverse1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comparator<UnaryOperator<Integer>> comparator0 = (Comparator<UnaryOperator<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.util.function.UnaryOperator.class) , any(java.util.function.UnaryOperator.class));
      Comparator<PatriciaTrie<Integer>> comparator1 = (Comparator<PatriciaTrie<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(any(org.apache.commons.collections4.trie.PatriciaTrie.class) , any(org.apache.commons.collections4.trie.PatriciaTrie.class));
      DualTreeBidiMap<UnaryOperator<Integer>, PatriciaTrie<Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<UnaryOperator<Integer>, PatriciaTrie<Integer>>(comparator0, comparator1);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      BiFunction<PatriciaTrie<Integer>, PatriciaTrie<Integer>, PatriciaTrie<Integer>> biFunction0 = (BiFunction<PatriciaTrie<Integer>, PatriciaTrie<Integer>, PatriciaTrie<Integer>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      dualTreeBidiMap0.merge(unaryOperator0, patriciaTrie0, biFunction0);
      OrderedBidiMap<PatriciaTrie<Integer>, UnaryOperator<Integer>> orderedBidiMap0 = dualTreeBidiMap0.inverseOrderedBidiMap();
      assertFalse(orderedBidiMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(comparator0).toString();
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>(comparator0, (Comparator<? super Integer>) null);
      DualTreeBidiMap.ViewMap<Integer, Integer> dualTreeBidiMap_ViewMap0 = new DualTreeBidiMap.ViewMap<Integer, Integer>(dualTreeBidiMap0, dualTreeBidiMap0);
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>();
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap1 = dualTreeBidiMap0.createBidiMap(dualTreeBidiMap_ViewMap0, dualTreeBidiMap_ViewMap0, dualHashBidiMap0);
      assertTrue(dualTreeBidiMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DualTreeBidiMap<PatriciaTrie<Integer>, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<PatriciaTrie<Integer>, Integer>();
      Comparator<? super PatriciaTrie<Integer>> comparator0 = dualTreeBidiMap0.comparator();
      assertNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comparator<TreeBidiMap.Inverse> comparator0 = (Comparator<TreeBidiMap.Inverse>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(org.apache.commons.collections4.bidimap.TreeBidiMap.Inverse.class) , any(org.apache.commons.collections4.bidimap.TreeBidiMap.Inverse.class));
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<TreeBidiMap.Inverse, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<TreeBidiMap.Inverse, Integer>(comparator0, comparator1);
      dualTreeBidiMap0.headMap((TreeBidiMap.Inverse) null);
      Comparator<TreeBidiMap.Inverse> comparator2 = (Comparator<TreeBidiMap.Inverse>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator2).compare(any(org.apache.commons.collections4.bidimap.TreeBidiMap.Inverse.class) , any(org.apache.commons.collections4.bidimap.TreeBidiMap.Inverse.class));
      Comparator<HashMap<Integer, Integer>> comparator3 = (Comparator<HashMap<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<TreeBidiMap.Inverse, HashMap<Integer, Integer>> dualTreeBidiMap1 = new DualTreeBidiMap<TreeBidiMap.Inverse, HashMap<Integer, Integer>>(comparator2, comparator3);
      // Undeclared exception!
      try { 
        dualTreeBidiMap1.tailMap((TreeBidiMap.Inverse) null);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DualTreeBidiMap<HashMap<Integer, Integer>, UnaryOperator<Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<HashMap<Integer, Integer>, UnaryOperator<Integer>>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        dualTreeBidiMap0.tailMap(hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comparator<UnaryOperator<Integer>> comparator0 = (Comparator<UnaryOperator<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.util.function.UnaryOperator.class) , any(java.util.function.UnaryOperator.class));
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<UnaryOperator<Integer>, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<UnaryOperator<Integer>, Integer>(comparator0, comparator1);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      dualTreeBidiMap0.headMap(unaryOperator0);
      Comparator<UnaryOperator<Integer>> comparator2 = (Comparator<UnaryOperator<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator2).compare(any(java.util.function.UnaryOperator.class) , any(java.util.function.UnaryOperator.class));
      Comparator<HashMap<Integer, Integer>> comparator3 = (Comparator<HashMap<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<UnaryOperator<Integer>, HashMap<Integer, Integer>> dualTreeBidiMap1 = new DualTreeBidiMap<UnaryOperator<Integer>, HashMap<Integer, Integer>>(comparator2, comparator3);
      // Undeclared exception!
      try { 
        dualTreeBidiMap1.subMap(unaryOperator0, unaryOperator0);
       //  fail("Expecting exception: NoSuchElementException");
       // Unstable assertion
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DualTreeBidiMap<PatriciaTrie<Integer>, PatriciaTrie<Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<PatriciaTrie<Integer>, PatriciaTrie<Integer>>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      // Undeclared exception!
      try { 
        dualTreeBidiMap0.subMap((PatriciaTrie<Integer>) null, patriciaTrie0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comparator<PatriciaTrie<Integer>> comparator0 = (Comparator<PatriciaTrie<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(comparator0).compare(any(org.apache.commons.collections4.trie.PatriciaTrie.class) , any(org.apache.commons.collections4.trie.PatriciaTrie.class));
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<PatriciaTrie<Integer>, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<PatriciaTrie<Integer>, Integer>(comparator0, comparator1);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      // Undeclared exception!
      try { 
        dualTreeBidiMap0.subMap(patriciaTrie0, patriciaTrie0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromKey > toKey
         //
         verifyException("java.util.TreeMap$NavigableSubMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DualTreeBidiMap<PatriciaTrie<Integer>, PatriciaTrie<Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<PatriciaTrie<Integer>, PatriciaTrie<Integer>>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      // Undeclared exception!
      try { 
        dualTreeBidiMap0.subMap(patriciaTrie0, patriciaTrie0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.trie.PatriciaTrie cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1), 0, 0).when(comparator0).compare(any() , any());
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(3098).when(comparator1).compare(anyInt() , anyInt());
      DualTreeBidiMap<TreeBidiMap.Inverse, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<TreeBidiMap.Inverse, Integer>(comparator0, comparator1);
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      Integer integer0 = new Integer((-1));
      BiFunction<Integer, Integer, Integer> biFunction0 = (BiFunction<Integer, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      dualTreeBidiMap0.merge(treeBidiMap_Inverse0, integer0, biFunction0);
      dualTreeBidiMap0.nextKey(treeBidiMap_Inverse0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Comparator<TreeBidiMap.Inverse> comparator0 = (Comparator<TreeBidiMap.Inverse>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<TreeBidiMap.Inverse, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<TreeBidiMap.Inverse, Integer>(comparator0, comparator1);
      LinkedMap<Integer, TreeBidiMap.Inverse> linkedMap0 = new LinkedMap<Integer, TreeBidiMap.Inverse>();
      dualTreeBidiMap0.reverseMap = (Map<Integer, TreeBidiMap.Inverse>) linkedMap0;
      // Undeclared exception!
      try { 
        dualTreeBidiMap0.inverseSortedBidiMap();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.LinkedMap cannot be cast to java.util.SortedMap
         //
         verifyException("org.apache.commons.collections4.bidimap.DualTreeBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer(1598);
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>();
      dualTreeBidiMap0.subMap(integer0, integer0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      Comparator<HashMap<Integer, Integer>> comparator1 = (Comparator<HashMap<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<Integer, HashMap<Integer, Integer>> dualTreeBidiMap1 = new DualTreeBidiMap<Integer, HashMap<Integer, Integer>>(comparator0, comparator1);
      // Undeclared exception!
      try { 
        dualTreeBidiMap1.headMap(integer0);
       //  fail("Expecting exception: NoSuchElementException");
       // Unstable assertion
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DualTreeBidiMap<TreeBidiMap.Inverse, TreeBidiMap.Inverse> dualTreeBidiMap0 = new DualTreeBidiMap<TreeBidiMap.Inverse, TreeBidiMap.Inverse>();
      // Undeclared exception!
      try { 
        dualTreeBidiMap0.headMap((TreeBidiMap.Inverse) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Comparator<PatriciaTrie<Integer>> comparator0 = (Comparator<PatriciaTrie<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<HashMap<Integer, Integer>> comparator1 = (Comparator<HashMap<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<PatriciaTrie<Integer>, HashMap<Integer, Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<PatriciaTrie<Integer>, HashMap<Integer, Integer>>(comparator0, comparator1);
      dualTreeBidiMap0.normalMap = null;
      // Undeclared exception!
      try { 
        dualTreeBidiMap0.firstKey();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.DualTreeBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DualTreeBidiMap<HashMap<Integer, Integer>, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<HashMap<Integer, Integer>, Integer>();
      // Undeclared exception!
      try { 
        dualTreeBidiMap0.createBidiMap((Map<Integer, HashMap<Integer, Integer>>) null, dualTreeBidiMap0, dualTreeBidiMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.DualTreeBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DualTreeBidiMap<HashMap<Integer, Integer>, UnaryOperator<Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<HashMap<Integer, Integer>, UnaryOperator<Integer>>();
      HashMap<UnaryOperator<Integer>, HashMap<Integer, Integer>> hashMap0 = new HashMap<UnaryOperator<Integer>, HashMap<Integer, Integer>>();
      // Undeclared exception!
      try { 
        dualTreeBidiMap0.createBidiMap(hashMap0, dualTreeBidiMap0, dualTreeBidiMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.util.SortedMap
         //
         verifyException("org.apache.commons.collections4.bidimap.DualTreeBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TreeMap<PatriciaTrie<Integer>, Integer> treeMap0 = new TreeMap<PatriciaTrie<Integer>, Integer>();
      DualTreeBidiMap<PatriciaTrie<Integer>, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<PatriciaTrie<Integer>, Integer>();
      DualTreeBidiMap<Integer, PatriciaTrie<Integer>> dualTreeBidiMap1 = null;
      try {
        dualTreeBidiMap1 = new DualTreeBidiMap<Integer, PatriciaTrie<Integer>>((Map<Integer, PatriciaTrie<Integer>>) null, treeMap0, dualTreeBidiMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.DualTreeBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DualTreeBidiMap<TreeBidiMap.Inverse, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<TreeBidiMap.Inverse, Integer>();
      SingletonMap<Integer, TreeBidiMap.Inverse> singletonMap0 = new SingletonMap<Integer, TreeBidiMap.Inverse>();
      DualTreeBidiMap<Integer, TreeBidiMap.Inverse> dualTreeBidiMap1 = null;
      try {
        dualTreeBidiMap1 = new DualTreeBidiMap<Integer, TreeBidiMap.Inverse>(singletonMap0, dualTreeBidiMap0, dualTreeBidiMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.SingletonMap cannot be cast to java.util.SortedMap
         //
         verifyException("org.apache.commons.collections4.bidimap.DualTreeBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DualTreeBidiMap<PatriciaTrie<Integer>, TreeBidiMap.Inverse> dualTreeBidiMap0 = null;
      try {
        dualTreeBidiMap0 = new DualTreeBidiMap<PatriciaTrie<Integer>, TreeBidiMap.Inverse>((Map<? extends PatriciaTrie<Integer>, ? extends TreeBidiMap.Inverse>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DualTreeBidiMap<TreeBidiMap.Inverse, HashMap<Integer, Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<TreeBidiMap.Inverse, HashMap<Integer, Integer>>();
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = dualTreeBidiMap0.previousKey((TreeBidiMap.Inverse) null);
      assertNull(treeBidiMap_Inverse0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DualTreeBidiMap<UnaryOperator<Integer>, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<UnaryOperator<Integer>, Integer>();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = dualTreeBidiMap0.nextKey(unaryOperator0);
      assertNull(unaryOperator1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedMap<HashMap<Integer, Integer>, TreeBidiMap.Inverse> linkedMap0 = new LinkedMap<HashMap<Integer, Integer>, TreeBidiMap.Inverse>();
      DualTreeBidiMap<HashMap<Integer, Integer>, TreeBidiMap.Inverse> dualTreeBidiMap0 = new DualTreeBidiMap<HashMap<Integer, Integer>, TreeBidiMap.Inverse>(linkedMap0);
      SortedBidiMap<TreeBidiMap.Inverse, HashMap<Integer, Integer>> sortedBidiMap0 = dualTreeBidiMap0.inverseBidiMap();
      assertEquals(0, sortedBidiMap0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DualTreeBidiMap<UnaryOperator<Integer>, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<UnaryOperator<Integer>, Integer>();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      // Undeclared exception!
      try { 
        dualTreeBidiMap0.headMap(unaryOperator0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.UnaryOperator$$Lambda$165/1108347102 cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Comparator<PatriciaTrie<Integer>> comparator0 = (Comparator<PatriciaTrie<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      Comparator<TreeBidiMap.Inverse> comparator1 = (Comparator<TreeBidiMap.Inverse>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<PatriciaTrie<Integer>, TreeBidiMap.Inverse> dualTreeBidiMap0 = new DualTreeBidiMap<PatriciaTrie<Integer>, TreeBidiMap.Inverse>(comparator0, comparator1);
      Comparator<? super PatriciaTrie<Integer>> comparator2 = dualTreeBidiMap0.comparator();
      assertNotNull(comparator2);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DualTreeBidiMap<PatriciaTrie<Integer>, PatriciaTrie<Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<PatriciaTrie<Integer>, PatriciaTrie<Integer>>();
      // Undeclared exception!
      try { 
        dualTreeBidiMap0.tailMap((PatriciaTrie<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DualTreeBidiMap<PatriciaTrie<Integer>, PatriciaTrie<Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<PatriciaTrie<Integer>, PatriciaTrie<Integer>>();
      DualTreeBidiMap.BidiOrderedMapIterator<PatriciaTrie<Integer>, PatriciaTrie<Integer>> dualTreeBidiMap_BidiOrderedMapIterator0 = new DualTreeBidiMap.BidiOrderedMapIterator<PatriciaTrie<Integer>, PatriciaTrie<Integer>>(dualTreeBidiMap0);
      String string0 = dualTreeBidiMap_BidiOrderedMapIterator0.toString();
      assertEquals("MapIterator[]", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DualTreeBidiMap<Integer, HashMap<Integer, Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, HashMap<Integer, Integer>>();
      DualTreeBidiMap.BidiOrderedMapIterator<Integer, HashMap<Integer, Integer>> dualTreeBidiMap_BidiOrderedMapIterator0 = new DualTreeBidiMap.BidiOrderedMapIterator<Integer, HashMap<Integer, Integer>>(dualTreeBidiMap0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        dualTreeBidiMap_BidiOrderedMapIterator0.setValue(hashMap0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator setValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DualTreeBidiMap<HashMap<Integer, Integer>, TreeBidiMap.Inverse> dualTreeBidiMap0 = new DualTreeBidiMap<HashMap<Integer, Integer>, TreeBidiMap.Inverse>();
      DualTreeBidiMap.BidiOrderedMapIterator<HashMap<Integer, Integer>, TreeBidiMap.Inverse> dualTreeBidiMap_BidiOrderedMapIterator0 = new DualTreeBidiMap.BidiOrderedMapIterator<HashMap<Integer, Integer>, TreeBidiMap.Inverse>(dualTreeBidiMap0);
      // Undeclared exception!
      try { 
        dualTreeBidiMap_BidiOrderedMapIterator0.getValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator getValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DualTreeBidiMap<PatriciaTrie<Integer>, PatriciaTrie<Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<PatriciaTrie<Integer>, PatriciaTrie<Integer>>();
      DualTreeBidiMap.BidiOrderedMapIterator<PatriciaTrie<Integer>, PatriciaTrie<Integer>> dualTreeBidiMap_BidiOrderedMapIterator0 = new DualTreeBidiMap.BidiOrderedMapIterator<PatriciaTrie<Integer>, PatriciaTrie<Integer>>(dualTreeBidiMap0);
      // Undeclared exception!
      try { 
        dualTreeBidiMap_BidiOrderedMapIterator0.getKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator getKey() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedMap<PatriciaTrie<Integer>, PatriciaTrie<Integer>> linkedMap0 = new LinkedMap<PatriciaTrie<Integer>, PatriciaTrie<Integer>>(26, 26);
      DualHashBidiMap<PatriciaTrie<Integer>, PatriciaTrie<Integer>> dualHashBidiMap0 = new DualHashBidiMap<PatriciaTrie<Integer>, PatriciaTrie<Integer>>(linkedMap0);
      DualLinkedHashBidiMap<PatriciaTrie<Integer>, PatriciaTrie<Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<PatriciaTrie<Integer>, PatriciaTrie<Integer>>(linkedMap0, linkedMap0, dualHashBidiMap0);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      dualLinkedHashBidiMap0.put(patriciaTrie0, patriciaTrie0);
      DualTreeBidiMap.BidiOrderedMapIterator<PatriciaTrie<Integer>, PatriciaTrie<Integer>> dualTreeBidiMap_BidiOrderedMapIterator0 = new DualTreeBidiMap.BidiOrderedMapIterator<PatriciaTrie<Integer>, PatriciaTrie<Integer>>(dualLinkedHashBidiMap0);
      dualTreeBidiMap_BidiOrderedMapIterator0.next();
      String string0 = dualTreeBidiMap_BidiOrderedMapIterator0.toString();
      assertEquals("MapIterator[Trie[0]={\n}\n=Trie[0]={\n}\n]", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      doReturn(0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      Comparator<UnaryOperator<Integer>> comparator1 = (Comparator<UnaryOperator<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator1).compare(any(java.util.function.UnaryOperator.class) , any(java.util.function.UnaryOperator.class));
      DualTreeBidiMap<Integer, UnaryOperator<Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, UnaryOperator<Integer>>(comparator0, comparator1);
      DualTreeBidiMap.ViewMap<Integer, UnaryOperator<Integer>> dualTreeBidiMap_ViewMap0 = new DualTreeBidiMap.ViewMap<Integer, UnaryOperator<Integer>>(dualTreeBidiMap0, dualTreeBidiMap0);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      dualTreeBidiMap_ViewMap0.put((Integer) null, unaryOperator0);
      dualTreeBidiMap_ViewMap0.clear();
      assertTrue(dualTreeBidiMap_ViewMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Comparator<UnaryOperator<Integer>> comparator0 = (Comparator<UnaryOperator<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1459), (-1459), (-1459), 0).when(comparator0).compare(any(java.util.function.UnaryOperator.class) , any(java.util.function.UnaryOperator.class));
      Comparator<PatriciaTrie<Integer>> comparator1 = (Comparator<PatriciaTrie<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1459)).when(comparator1).compare(any(org.apache.commons.collections4.trie.PatriciaTrie.class) , any(org.apache.commons.collections4.trie.PatriciaTrie.class));
      DualTreeBidiMap<UnaryOperator<Integer>, PatriciaTrie<Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<UnaryOperator<Integer>, PatriciaTrie<Integer>>(comparator0, comparator1);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      BiFunction<PatriciaTrie<Integer>, PatriciaTrie<Integer>, PatriciaTrie<Integer>> biFunction0 = (BiFunction<PatriciaTrie<Integer>, PatriciaTrie<Integer>, PatriciaTrie<Integer>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      dualTreeBidiMap0.merge(unaryOperator0, patriciaTrie0, biFunction0);
      UnaryOperator<Integer> unaryOperator1 = dualTreeBidiMap0.previousKey(unaryOperator0);
      assertNull(unaryOperator1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Comparator<TreeBidiMap.Inverse> comparator0 = (Comparator<TreeBidiMap.Inverse>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      doReturn(0, 0, 0).when(comparator0).compare(any(org.apache.commons.collections4.bidimap.TreeBidiMap.Inverse.class) , any(org.apache.commons.collections4.bidimap.TreeBidiMap.Inverse.class));
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(anyInt() , anyInt());
      DualTreeBidiMap<TreeBidiMap.Inverse, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<TreeBidiMap.Inverse, Integer>(comparator0, comparator1);
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      Integer integer0 = new Integer(14);
      BiFunction<Integer, Integer, Integer> biFunction0 = (BiFunction<Integer, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      dualTreeBidiMap0.merge(treeBidiMap_Inverse0, integer0, biFunction0);
      LinkedMap<Integer, TreeBidiMap.Inverse> linkedMap0 = new LinkedMap<Integer, TreeBidiMap.Inverse>(14);
      DualTreeBidiMap<Integer, TreeBidiMap.Inverse> dualTreeBidiMap1 = new DualTreeBidiMap<Integer, TreeBidiMap.Inverse>(linkedMap0);
      DualTreeBidiMap.ViewMap<Integer, TreeBidiMap.Inverse> dualTreeBidiMap_ViewMap0 = new DualTreeBidiMap.ViewMap<Integer, TreeBidiMap.Inverse>(dualTreeBidiMap1, dualTreeBidiMap1);
      DualTreeBidiMap<TreeBidiMap.Inverse, Integer> dualTreeBidiMap2 = new DualTreeBidiMap<TreeBidiMap.Inverse, Integer>(dualTreeBidiMap0, dualTreeBidiMap_ViewMap0, dualTreeBidiMap1);
      TreeBidiMap.Inverse treeBidiMap_Inverse1 = dualTreeBidiMap2.nextKey(treeBidiMap_Inverse0);
      assertNull(treeBidiMap_Inverse1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Comparator<TreeBidiMap.Inverse> comparator0 = (Comparator<TreeBidiMap.Inverse>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(any(org.apache.commons.collections4.bidimap.TreeBidiMap.Inverse.class) , any(org.apache.commons.collections4.bidimap.TreeBidiMap.Inverse.class));
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(anyInt() , anyInt());
      DualTreeBidiMap<TreeBidiMap.Inverse, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<TreeBidiMap.Inverse, Integer>(comparator0, comparator1);
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      Integer integer0 = new Integer(14);
      BiFunction<Integer, Integer, Integer> biFunction0 = (BiFunction<Integer, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      dualTreeBidiMap0.merge(treeBidiMap_Inverse0, integer0, biFunction0);
      TreeBidiMap.Inverse treeBidiMap_Inverse1 = dualTreeBidiMap0.nextKey(treeBidiMap_Inverse0);
      assertNull(treeBidiMap_Inverse1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Comparator<TreeBidiMap.Inverse> comparator0 = (Comparator<TreeBidiMap.Inverse>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<TreeBidiMap.Inverse, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<TreeBidiMap.Inverse, Integer>(comparator0, comparator1);
      // Undeclared exception!
      try { 
        dualTreeBidiMap0.lastKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DualTreeBidiMap<HashMap<Integer, Integer>, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<HashMap<Integer, Integer>, Integer>();
      OrderedBidiMap<Integer, HashMap<Integer, Integer>> orderedBidiMap0 = dualTreeBidiMap0.inverseOrderedBidiMap();
      assertTrue(orderedBidiMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DualTreeBidiMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>();
      // Undeclared exception!
      try { 
        dualTreeBidiMap0.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DualTreeBidiMap<HashMap<Integer, Integer>, TreeBidiMap.Inverse> dualTreeBidiMap0 = new DualTreeBidiMap<HashMap<Integer, Integer>, TreeBidiMap.Inverse>();
      Comparator<? super TreeBidiMap.Inverse> comparator0 = dualTreeBidiMap0.valueComparator();
      assertNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>();
      OrderedMapIterator<Integer, Integer> orderedMapIterator0 = dualTreeBidiMap0.mapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DualTreeBidiMap<PatriciaTrie<Integer>, PatriciaTrie<Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<PatriciaTrie<Integer>, PatriciaTrie<Integer>>();
      SortedBidiMap<PatriciaTrie<Integer>, PatriciaTrie<Integer>> sortedBidiMap0 = dualTreeBidiMap0.inverseSortedBidiMap();
      assertTrue(sortedBidiMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DualTreeBidiMap<PatriciaTrie<Integer>, PatriciaTrie<Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<PatriciaTrie<Integer>, PatriciaTrie<Integer>>();
      DualTreeBidiMap.BidiOrderedMapIterator<PatriciaTrie<Integer>, PatriciaTrie<Integer>> dualTreeBidiMap_BidiOrderedMapIterator0 = new DualTreeBidiMap.BidiOrderedMapIterator<PatriciaTrie<Integer>, PatriciaTrie<Integer>>(dualTreeBidiMap0);
      // Undeclared exception!
      try { 
        dualTreeBidiMap_BidiOrderedMapIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DualTreeBidiMap<PatriciaTrie<Integer>, PatriciaTrie<Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<PatriciaTrie<Integer>, PatriciaTrie<Integer>>();
      DualTreeBidiMap.BidiOrderedMapIterator<PatriciaTrie<Integer>, PatriciaTrie<Integer>> dualTreeBidiMap_BidiOrderedMapIterator0 = new DualTreeBidiMap.BidiOrderedMapIterator<PatriciaTrie<Integer>, PatriciaTrie<Integer>>(dualTreeBidiMap0);
      dualTreeBidiMap_BidiOrderedMapIterator0.reset();
      assertFalse(dualTreeBidiMap_BidiOrderedMapIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DualTreeBidiMap<PatriciaTrie<Integer>, PatriciaTrie<Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<PatriciaTrie<Integer>, PatriciaTrie<Integer>>();
      DualTreeBidiMap.BidiOrderedMapIterator<PatriciaTrie<Integer>, PatriciaTrie<Integer>> dualTreeBidiMap_BidiOrderedMapIterator0 = new DualTreeBidiMap.BidiOrderedMapIterator<PatriciaTrie<Integer>, PatriciaTrie<Integer>>(dualTreeBidiMap0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      dualTreeBidiMap_BidiOrderedMapIterator0.forEachRemaining(consumer0);
      assertFalse(dualTreeBidiMap_BidiOrderedMapIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DualTreeBidiMap<PatriciaTrie<Integer>, PatriciaTrie<Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<PatriciaTrie<Integer>, PatriciaTrie<Integer>>();
      DualTreeBidiMap.BidiOrderedMapIterator<PatriciaTrie<Integer>, PatriciaTrie<Integer>> dualTreeBidiMap_BidiOrderedMapIterator0 = new DualTreeBidiMap.BidiOrderedMapIterator<PatriciaTrie<Integer>, PatriciaTrie<Integer>>(dualTreeBidiMap0);
      // Undeclared exception!
      try { 
        dualTreeBidiMap_BidiOrderedMapIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DualHashBidiMap<PatriciaTrie<Integer>, Integer> dualHashBidiMap0 = new DualHashBidiMap<PatriciaTrie<Integer>, Integer>();
      DualTreeBidiMap.BidiOrderedMapIterator<PatriciaTrie<Integer>, Integer> dualTreeBidiMap_BidiOrderedMapIterator0 = new DualTreeBidiMap.BidiOrderedMapIterator<PatriciaTrie<Integer>, Integer>(dualHashBidiMap0);
      boolean boolean0 = dualTreeBidiMap_BidiOrderedMapIterator0.hasPrevious();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Comparator<PatriciaTrie<Integer>> comparator0 = (Comparator<PatriciaTrie<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(comparator0).toString();
      doReturn(0).when(comparator0).compare(any(org.apache.commons.collections4.trie.PatriciaTrie.class) , any(org.apache.commons.collections4.trie.PatriciaTrie.class));
      DualTreeBidiMap<PatriciaTrie<Integer>, TreeBidiMap.Inverse> dualTreeBidiMap0 = new DualTreeBidiMap<PatriciaTrie<Integer>, TreeBidiMap.Inverse>(comparator0, (Comparator<? super TreeBidiMap.Inverse>) null);
      DualTreeBidiMap.ViewMap<PatriciaTrie<Integer>, TreeBidiMap.Inverse> dualTreeBidiMap_ViewMap0 = new DualTreeBidiMap.ViewMap<PatriciaTrie<Integer>, TreeBidiMap.Inverse>(dualTreeBidiMap0, dualTreeBidiMap0);
      // Undeclared exception!
      try { 
        dualTreeBidiMap_ViewMap0.headMap((PatriciaTrie<Integer>) null);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Comparator<TreeBidiMap.Inverse> comparator0 = (Comparator<TreeBidiMap.Inverse>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<TreeBidiMap.Inverse, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<TreeBidiMap.Inverse, Integer>(comparator0, comparator1);
      DualTreeBidiMap.ViewMap<TreeBidiMap.Inverse, Integer> dualTreeBidiMap_ViewMap0 = new DualTreeBidiMap.ViewMap<TreeBidiMap.Inverse, Integer>(dualTreeBidiMap0, dualTreeBidiMap0);
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      TreeBidiMap.Inverse treeBidiMap_Inverse1 = dualTreeBidiMap_ViewMap0.nextKey(treeBidiMap_Inverse0);
      assertNull(treeBidiMap_Inverse1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DualTreeBidiMap<Integer, TreeBidiMap.Inverse> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, TreeBidiMap.Inverse>();
      DualTreeBidiMap.ViewMap<Integer, TreeBidiMap.Inverse> dualTreeBidiMap_ViewMap0 = new DualTreeBidiMap.ViewMap<Integer, TreeBidiMap.Inverse>(dualTreeBidiMap0, dualTreeBidiMap0);
      Integer integer0 = new Integer(19);
      // Undeclared exception!
      try { 
        dualTreeBidiMap_ViewMap0.tailMap(integer0);
       //  fail("Expecting exception: NoSuchElementException");
       // Unstable assertion
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DualTreeBidiMap<PatriciaTrie<Integer>, TreeBidiMap.Inverse> dualTreeBidiMap0 = new DualTreeBidiMap<PatriciaTrie<Integer>, TreeBidiMap.Inverse>();
      DualTreeBidiMap.ViewMap<PatriciaTrie<Integer>, TreeBidiMap.Inverse> dualTreeBidiMap_ViewMap0 = new DualTreeBidiMap.ViewMap<PatriciaTrie<Integer>, TreeBidiMap.Inverse>(dualTreeBidiMap0, dualTreeBidiMap0);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie1 = dualTreeBidiMap_ViewMap0.previousKey(patriciaTrie0);
      assertNull(patriciaTrie1);
  }
}
