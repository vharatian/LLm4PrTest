/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 12:18:35 GMT 2025
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.NavigableSet;
import java.util.Set;
import java.util.SortedSet;
import java.util.TreeSet;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.SetUtils;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedTransformer;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SetUtils_ESTest extends SetUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.union((Set<? extends Integer>) treeSet0, (Set<? extends Integer>) treeSet0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer((-3198));
      linkedHashSet0.add(integer0);
      SetUtils.SetView<Integer> setUtils_SetView1 = SetUtils.union((Set<? extends Integer>) setUtils_SetView0, (Set<? extends Integer>) linkedHashSet0);
      setUtils_SetView1.toSet();
      assertFalse(setUtils_SetView1.equals((Object)setUtils_SetView0));
      assertTrue(setUtils_SetView1.contains((-3198)));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add((Integer) null);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = SetUtils.isEqualSet(linkedList0, linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Integer integer0 = new Integer((-1431655764));
      treeSet0.add(integer0);
      SetUtils.SetView<Object> setUtils_SetView0 = SetUtils.disjunction((Set<?>) linkedHashSet0, (Set<?>) treeSet0);
      Set<Object> set0 = SetUtils.orderedSet((Set<Object>) setUtils_SetView0);
      assertEquals(1, set0.size());
      assertTrue(set0.contains((-1431655764)));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      SortedSet<Integer> sortedSet0 = SetUtils.unmodifiableSortedSet((SortedSet<Integer>) treeSet0);
      assertEquals(0, sortedSet0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Set<Integer> set0 = SetUtils.unmodifiableSet((Set<? extends Integer>) linkedHashSet0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TreeSet<LinkedHashSet<Integer>> treeSet0 = new TreeSet<LinkedHashSet<Integer>>();
      SortedSet<LinkedHashSet<Integer>> sortedSet0 = SetUtils.unmodifiableNavigableSet((NavigableSet<LinkedHashSet<Integer>>) treeSet0);
      assertEquals(0, sortedSet0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      SortedSet<Integer> sortedSet0 = SetUtils.transformedSortedSet((SortedSet<Integer>) treeSet0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      assertEquals(0, sortedSet0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[1];
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Set<InstanceofPredicate> set0 = SetUtils.unmodifiableSet(instanceofPredicateArray0);
      Transformer<Object, InstanceofPredicate>[] transformerArray0 = (Transformer<Object, InstanceofPredicate>[]) Array.newInstance(Transformer.class, 6);
      ConstantTransformer<Object, InstanceofPredicate> constantTransformer0 = new ConstantTransformer<Object, InstanceofPredicate>(instanceofPredicate0);
      transformerArray0[0] = (Transformer<Object, InstanceofPredicate>) constantTransformer0;
      InvokerTransformer<Object, InstanceofPredicate> invokerTransformer0 = new InvokerTransformer<Object, InstanceofPredicate>("CY", (Class<?>[]) null, instanceofPredicateArray0);
      transformerArray0[1] = (Transformer<Object, InstanceofPredicate>) invokerTransformer0;
      transformerArray0[2] = transformerArray0[0];
      transformerArray0[3] = transformerArray0[1];
      ConstantFactory<InstanceofPredicate> constantFactory0 = new ConstantFactory<InstanceofPredicate>(instanceofPredicate0);
      FactoryTransformer<Object, InstanceofPredicate> factoryTransformer0 = new FactoryTransformer<Object, InstanceofPredicate>(constantFactory0);
      transformerArray0[4] = (Transformer<Object, InstanceofPredicate>) factoryTransformer0;
      transformerArray0[5] = (Transformer<Object, InstanceofPredicate>) invokerTransformer0;
      Transformer<InstanceofPredicate, InstanceofPredicate> transformer0 = ChainedTransformer.chainedTransformer((Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>[]) transformerArray0);
      Set<InstanceofPredicate> set1 = SetUtils.transformedSet(set0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) transformer0);
      assertFalse(set1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TreeSet<LinkedHashSet<Integer>> treeSet0 = new TreeSet<LinkedHashSet<Integer>>();
      Transformer<Object, LinkedHashSet<Integer>> transformer0 = ConstantTransformer.nullTransformer();
      SortedSet<LinkedHashSet<Integer>> sortedSet0 = SetUtils.transformedNavigableSet((NavigableSet<LinkedHashSet<Integer>>) treeSet0, (Transformer<? super LinkedHashSet<Integer>, ? extends LinkedHashSet<Integer>>) transformer0);
      assertTrue(sortedSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TreeSet<Set<InstanceofPredicate>> treeSet0 = new TreeSet<Set<InstanceofPredicate>>();
      SortedSet<Set<InstanceofPredicate>> sortedSet0 = SetUtils.synchronizedSortedSet((SortedSet<Set<InstanceofPredicate>>) treeSet0);
      assertTrue(sortedSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SortedSet<Integer> sortedSet0 = SetUtils.emptySortedSet();
      Set<Integer> set0 = SetUtils.synchronizedSet((Set<Integer>) sortedSet0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SortedSet<LinkedHashSet<Integer>> sortedSet0 = SetUtils.emptySortedSet();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      SortedSet<LinkedHashSet<Integer>> sortedSet1 = SetUtils.predicatedSortedSet(sortedSet0, (Predicate<? super LinkedHashSet<Integer>>) predicate0);
      assertTrue(sortedSet1.equals((Object)sortedSet0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Predicate<Integer> predicate0 = TruePredicate.truePredicate();
      Set<Integer> set0 = SetUtils.predicatedSet((Set<Integer>) treeSet0, (Predicate<? super Integer>) predicate0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TreeSet<LinkedHashSet<Integer>> treeSet0 = new TreeSet<LinkedHashSet<Integer>>();
      Predicate<LinkedHashSet<Integer>> predicate0 = UniquePredicate.uniquePredicate();
      SortedSet<LinkedHashSet<Integer>> sortedSet0 = SetUtils.predicatedNavigableSet((NavigableSet<LinkedHashSet<Integer>>) treeSet0, (Predicate<? super LinkedHashSet<Integer>>) predicate0);
      assertEquals(0, sortedSet0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.union((Set<? extends Integer>) linkedHashSet0, (Set<? extends Integer>) linkedHashSet0);
      int int0 = setUtils_SetView0.size();
      assertFalse(linkedHashSet0.contains(int0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.union((Set<? extends Integer>) linkedHashSet0, (Set<? extends Integer>) linkedHashSet0);
      setUtils_SetView0.copyInto((Set<Integer>) linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add((Integer) null);
      Set<Integer> set0 = SetUtils.emptyIfNull((Set<Integer>) linkedHashSet0);
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.union((Set<? extends InstanceofPredicate>) null, (Set<? extends InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // setA
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Integer integer0 = new Integer((-676));
      treeSet0.add(integer0);
      Predicate<Integer> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        SetUtils.predicatedSortedSet((SortedSet<Integer>) treeSet0, (Predicate<? super Integer>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      TreeSet<InstanceofPredicate> treeSet1 = new TreeSet<InstanceofPredicate>();
      Integer integer0 = new Integer(2147483645);
      treeSet0.add(integer0);
      Predicate<Integer> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Integer>>) treeSet1);
      // Undeclared exception!
      try { 
        SetUtils.predicatedSortedSet((SortedSet<Integer>) treeSet0, (Predicate<? super Integer>) predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object '2147483645' - Predicate 'org.apache.commons.collections4.functors.OnePredicate@1' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add((Integer) null);
      NullIsExceptionPredicate<Integer> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Integer>((Predicate<? super Integer>) null);
      // Undeclared exception!
      try { 
        SetUtils.predicatedSet((Set<Integer>) linkedHashSet0, (Predicate<? super Integer>) nullIsExceptionPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Input Object must not be null
         //
         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add((Integer) null);
      LinkedList<Predicate<Integer>> linkedList0 = new LinkedList<Predicate<Integer>>();
      Predicate<Integer> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Integer>>) linkedList0);
      // Undeclared exception!
      try { 
        SetUtils.predicatedSet((Set<Integer>) linkedHashSet0, (Predicate<? super Integer>) predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'null' - Predicate 'org.apache.commons.collections4.functors.FalsePredicate@2' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Integer integer0 = new Integer((-2));
      treeSet0.add(integer0);
      UniquePredicate<Integer> uniquePredicate0 = new UniquePredicate<Integer>();
      uniquePredicate0.evaluate(integer0);
      // Undeclared exception!
      try { 
        SetUtils.predicatedNavigableSet((NavigableSet<Integer>) treeSet0, (Predicate<? super Integer>) uniquePredicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object '-2' - Predicate 'org.apache.commons.collections4.functors.UniquePredicate@1' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Integer integer0 = new Integer(2035);
      treeSet0.add(integer0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Set<Predicate<Object>> set0 = SetUtils.unmodifiableSet(predicateArray0);
      // Undeclared exception!
      try { 
        SetUtils.isEqualSet(treeSet0, set0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Integer integer0 = new Integer(2035);
      treeSet0.add(integer0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate0;
      Set<Predicate<Object>> set0 = SetUtils.unmodifiableSet(predicateArray0);
      // Undeclared exception!
      try { 
        SetUtils.isEqualSet(treeSet0, set0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.disjunction((Set<?>) null, (Set<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // setA
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.difference((Set<? extends Predicate<Integer>>) null, (Set<? extends Predicate<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // setA
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Set<LinkedHashSet<Object>> set0 = SetUtils.unmodifiableSet((LinkedHashSet<Object>[]) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      linkedHashSet1.add((Integer) null);
      SetUtils.SetView<Object> setUtils_SetView0 = SetUtils.union((Set<?>) linkedHashSet0, (Set<?>) linkedHashSet1);
      boolean boolean0 = setUtils_SetView0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      SetUtils.SetView<Object> setUtils_SetView0 = SetUtils.union((Set<?>) linkedHashSet0, (Set<?>) linkedHashSet0);
      boolean boolean0 = setUtils_SetView0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add((Integer) null);
      SetUtils.SetView<Object> setUtils_SetView0 = SetUtils.union((Set<?>) linkedHashSet0, (Set<?>) linkedHashSet0);
      boolean boolean0 = setUtils_SetView0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      linkedHashSet0.add((Integer) null);
      SetUtils.SetView<Object> setUtils_SetView0 = SetUtils.union((Set<?>) linkedHashSet1, (Set<?>) linkedHashSet0);
      boolean boolean0 = setUtils_SetView0.contains((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add((Integer) null);
      SetUtils.SetView<Object> setUtils_SetView0 = SetUtils.union((Set<?>) linkedHashSet0, (Set<?>) linkedHashSet0);
      boolean boolean0 = setUtils_SetView0.contains((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      SetUtils.SetView<Object> setUtils_SetView0 = SetUtils.union((Set<?>) linkedHashSet0, (Set<?>) linkedHashSet0);
      boolean boolean0 = setUtils_SetView0.contains(linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer(2180);
      linkedHashSet0.add(integer0);
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.intersection((Set<? extends Integer>) linkedHashSet0, (Set<? extends Integer>) linkedHashSet0);
      Object[] objectArray0 = new Object[1];
      HashSet<Object> hashSet0 = SetUtils.hashSet(objectArray0);
      boolean boolean0 = SetUtils.isEqualSet(hashSet0, setUtils_SetView0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean0 = SetUtils.isEqualSet(linkedHashSet0, (Collection<?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      boolean boolean0 = SetUtils.isEqualSet((Collection<?>) null, linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      boolean boolean0 = SetUtils.isEqualSet(linkedHashSet0, linkedHashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer(655);
      linkedHashSet0.add(integer0);
      SetUtils.SetView<Object> setUtils_SetView0 = SetUtils.difference((Set<?>) linkedHashSet0, (Set<?>) linkedHashSet0);
      SetUtils.SetView<Object> setUtils_SetView1 = SetUtils.intersection((Set<?>) linkedHashSet0, (Set<?>) setUtils_SetView0);
      boolean boolean0 = setUtils_SetView1.contains(integer0);
      assertFalse(boolean0);
      assertTrue(setUtils_SetView1.equals((Object)setUtils_SetView0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      SetUtils.SetView<Object> setUtils_SetView0 = SetUtils.intersection((Set<?>) linkedHashSet0, (Set<?>) linkedHashSet0);
      boolean boolean0 = setUtils_SetView0.contains(linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add((Integer) null);
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.intersection((Set<? extends Integer>) linkedHashSet0, (Set<? extends Integer>) linkedHashSet0);
      boolean boolean0 = SetUtils.isEqualSet(setUtils_SetView0, linkedHashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      linkedHashSet1.add((Integer) null);
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.intersection((Set<? extends Integer>) linkedHashSet1, (Set<? extends Integer>) linkedHashSet0);
      boolean boolean0 = SetUtils.isEqualSet(linkedHashSet1, setUtils_SetView0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashSet<LinkedHashSet<Integer>> hashSet0 = SetUtils.hashSet((LinkedHashSet<Integer>[]) null);
      assertNull(hashSet0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      HashSet<Integer> hashSet0 = SetUtils.hashSet(integerArray0);
      assertEquals(0, hashSet0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer((-1));
      linkedHashSet0.add(integer0);
      int int0 = SetUtils.hashCodeForSet((Collection<Integer>) linkedHashSet0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add((Integer) null);
      int int0 = SetUtils.hashCodeForSet((Collection<Integer>) linkedHashSet0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = SetUtils.hashCodeForSet((Collection<LinkedHashSet<Integer>>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Set<Set<InstanceofPredicate>> set0 = SetUtils.emptySet();
      int int0 = SetUtils.hashCodeForSet((Collection<Set<InstanceofPredicate>>) set0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Set<LinkedHashSet<Integer>> set0 = SetUtils.emptyIfNull((Set<LinkedHashSet<Integer>>) null);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add((Integer) null);
      SetUtils.SetView<Object> setUtils_SetView0 = SetUtils.difference((Set<?>) linkedHashSet0, (Set<?>) linkedHashSet0);
      SetUtils.SetView<Object> setUtils_SetView1 = SetUtils.disjunction((Set<?>) linkedHashSet0, (Set<?>) setUtils_SetView0);
      boolean boolean0 = setUtils_SetView1.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add((Integer) null);
      SetUtils.SetView<Object> setUtils_SetView0 = SetUtils.disjunction((Set<?>) linkedHashSet0, (Set<?>) linkedHashSet0);
      boolean boolean0 = setUtils_SetView0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      SetUtils.SetView<Object> setUtils_SetView0 = SetUtils.disjunction((Set<?>) linkedHashSet0, (Set<?>) linkedHashSet0);
      boolean boolean0 = setUtils_SetView0.contains(linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add((Integer) null);
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      SetUtils.SetView<Object> setUtils_SetView0 = SetUtils.difference((Set<?>) linkedHashSet0, (Set<?>) linkedHashSet1);
      boolean boolean0 = setUtils_SetView0.contains((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add((Integer) null);
      SetUtils.SetView<Object> setUtils_SetView0 = SetUtils.difference((Set<?>) linkedHashSet0, (Set<?>) linkedHashSet0);
      boolean boolean0 = setUtils_SetView0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      SetUtils.SetView<Object> setUtils_SetView0 = SetUtils.difference((Set<?>) linkedHashSet0, (Set<?>) linkedHashSet0);
      boolean boolean0 = setUtils_SetView0.contains(linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add((Integer) null);
      SetUtils.SetView<Object> setUtils_SetView0 = SetUtils.disjunction((Set<?>) linkedHashSet0, (Set<?>) linkedHashSet0);
      boolean boolean0 = setUtils_SetView0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      linkedHashSet1.add((Integer) null);
      SetUtils.SetView<Object> setUtils_SetView0 = SetUtils.disjunction((Set<?>) linkedHashSet0, (Set<?>) linkedHashSet1);
      boolean boolean0 = setUtils_SetView0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      // Undeclared exception!
      try { 
        SetUtils.predicatedNavigableSet((NavigableSet<Integer>) treeSet0, (Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Set<LinkedHashSet<Integer>> set0 = SetUtils.emptySet();
      // Undeclared exception!
      try { 
        SetUtils.transformedSet(set0, (Transformer<? super LinkedHashSet<Integer>, ? extends LinkedHashSet<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.unmodifiableSet((Set<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.synchronizedSet((Set<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.unmodifiableNavigableSet((NavigableSet<InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.unmodifiableSortedSet((SortedSet<Transformer<LinkedHashSet<Integer>, Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Set<InstanceofPredicate> set0 = SetUtils.newIdentityHashSet();
      SetUtils.SetView<InstanceofPredicate> setUtils_SetView0 = SetUtils.union((Set<? extends InstanceofPredicate>) set0, (Set<? extends InstanceofPredicate>) set0);
      assertNotNull(setUtils_SetView0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.synchronizedSortedSet((SortedSet<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.orderedSet((Set<LinkedHashSet<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SortedSet<Object> sortedSet0 = SetUtils.emptySortedSet();
      // Undeclared exception!
      try { 
        SetUtils.transformedSortedSet(sortedSet0, (Transformer<? super Object, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.intersection((Set<? extends Integer>) null, (Set<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // setA
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      // Undeclared exception!
      try { 
        SetUtils.predicatedSortedSet((SortedSet<InvokerTransformer<Object, Object>>) null, (Predicate<? super InvokerTransformer<Object, Object>>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      // Undeclared exception!
      try { 
        SetUtils.predicatedSet((Set<Integer>) linkedHashSet0, (Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      // Undeclared exception!
      try { 
        SetUtils.transformedNavigableSet((NavigableSet<Integer>) treeSet0, (Transformer<? super Integer, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer
         //
         verifyException("java.util.Objects", e);
      }
  }
}
