/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 12:11:33 GMT 2025
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.nio.file.LinkOption;
import java.nio.file.StandardCopyOption;
import java.time.DayOfWeek;
import java.time.Month;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.HijrahEra;
import java.time.chrono.IsoEra;
import java.time.chrono.MinguoEra;
import java.time.chrono.ThaiBuddhistDate;
import java.time.format.FormatStyle;
import java.time.format.ResolverStyle;
import java.time.format.TextStyle;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.SortedSet;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import org.apache.commons.collections4.BoundedCollection;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.collection.UnmodifiableBoundedCollection;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.list.FixedSizeList;
import org.apache.commons.collections4.queue.CircularFifoQueue;
import org.apache.commons.io.IOCase;
import org.apache.commons.io.file.StandardDeleteOption;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CollectionUtils_ESTest extends CollectionUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>();
      Collection<Integer> collection0 = CollectionUtils.synchronizedCollection((Collection<Integer>) circularFifoQueue0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Collection<IsoEra> collection0 = CollectionUtils.emptyCollection();
      Collection<IsoEra> collection1 = CollectionUtils.union((Iterable<? extends IsoEra>) collection0, (Iterable<? extends IsoEra>) collection0);
      Collection<IsoEra> collection2 = CollectionUtils.removeAll(collection1, (Collection<?>) collection0);
      assertTrue(collection2.equals((Object)collection0));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        CollectionUtils.removeCount((Collection<Object>) stack0, 1894, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The sum of start index and count can't be greater than the size of collection.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Vector<ArrayList<ResolverStyle>> vector0 = new Vector<ArrayList<ResolverStyle>>();
      // Undeclared exception!
      try { 
        CollectionUtils.removeRange((Collection<ArrayList<ResolverStyle>>) vector0, (-3159), (-145));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The start index can't be less than 0.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<Transformer<Object, Object>> linkedList0 = new LinkedList<Transformer<Object, Object>>();
      // Undeclared exception!
      try { 
        CollectionUtils.removeRange((Collection<Transformer<Object, Object>>) linkedList0, 1894, 2716);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The end index can't be greater than the size of collection.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      CollectionUtils.reverseArray(objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>();
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) circularFifoQueue0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ResolverStyle resolverStyle0 = ResolverStyle.LENIENT;
      LinkedList<ResolverStyle> linkedList0 = new LinkedList<ResolverStyle>();
      ResolverStyle resolverStyle1 = ResolverStyle.SMART;
      EnumSet<ResolverStyle> enumSet0 = EnumSet.range(resolverStyle1, resolverStyle0);
      Iterator<ResolverStyle> iterator0 = enumSet0.iterator();
      boolean boolean0 = CollectionUtils.addAll((Collection<ResolverStyle>) linkedList0, (Iterator<? extends ResolverStyle>) iterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      arrayDeque0.add(instanceofPredicate0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      CollectionUtils.select((Iterable<?>) arrayDeque0, (Predicate<? super Object>) predicate0, linkedList0, linkedList1);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Class<StandardCopyOption> class0 = StandardCopyOption.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      arrayDeque0.add(instanceofPredicate0);
      Class<InstanceofPredicate> class1 = InstanceofPredicate.class;
      ServiceLoader<InstanceofPredicate> serviceLoader0 = ServiceLoader.loadInstalled(class1);
      Comparator<InstanceofPredicate> comparator0 = (Comparator<InstanceofPredicate>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<InstanceofPredicate> list0 = CollectionUtils.collate((Iterable<? extends InstanceofPredicate>) serviceLoader0, (Iterable<? extends InstanceofPredicate>) arrayDeque0, (Comparator<? super InstanceofPredicate>) comparator0, true);
      CollectionUtils.select((Iterable<? extends InstanceofPredicate>) arrayDeque0, (Predicate<? super InstanceofPredicate>) uniquePredicate0, (Collection<InstanceofPredicate>) arrayDeque0, (Collection<InstanceofPredicate>) list0);
      assertEquals(2, arrayDeque0.size());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinkedList<IsoEra> linkedList0 = new LinkedList<IsoEra>();
      IsoEra[] isoEraArray0 = new IsoEra[6];
      CollectionUtils.addAll((Collection<IsoEra>) linkedList0, isoEraArray0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      CollectionUtils.hashCode((Collection<?>) linkedList0, (Equator<? super Object>) defaultEquator0);
      assertEquals(6, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0);
      Collection<Integer> collection0 = CollectionUtils.subtract((Iterable<? extends Integer>) serviceLoader0, (Iterable<? extends Integer>) serviceLoader0);
      Integer integer0 = new Integer(2);
      boolean boolean0 = CollectionUtils.addIgnoreNull(collection0, integer0);
      assertTrue(boolean0);
      
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      boolean boolean1 = CollectionUtils.isEqualCollection((Collection<?>) linkedList0, (Collection<?>) collection0, (Equator<? super Object>) defaultEquator0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>();
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      arrayDeque0.addFirst(instanceofPredicate0);
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<?>) hashSet0, (Collection<?>) arrayDeque0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HijrahEra hijrahEra0 = HijrahEra.AH;
      EnumSet<HijrahEra> enumSet0 = EnumSet.range(hijrahEra0, hijrahEra0);
      Comparator<HijrahEra> comparator0 = (Comparator<HijrahEra>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.time.chrono.HijrahEra.class) , any(java.time.chrono.HijrahEra.class));
      List<HijrahEra> list0 = CollectionUtils.collate((Iterable<? extends HijrahEra>) enumSet0, (Iterable<? extends HijrahEra>) enumSet0, (Comparator<? super HijrahEra>) comparator0, false);
      TreeSet<HijrahEra> treeSet0 = new TreeSet<HijrahEra>();
      boolean boolean0 = CollectionUtils.isProperSubCollection(list0, treeSet0);
      assertEquals(1, list0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>();
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      arrayDeque0.addFirst(instanceofPredicate0);
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) arrayDeque0, (Collection<?>) circularFifoQueue0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<ResolverStyle> class0 = ResolverStyle.class;
      EnumSet<ResolverStyle> enumSet0 = EnumSet.allOf(class0);
      ResolverStyle resolverStyle0 = ResolverStyle.STRICT;
      EnumSet<ResolverStyle> enumSet1 = EnumSet.of(resolverStyle0, resolverStyle0, resolverStyle0, resolverStyle0, resolverStyle0);
      Collection<ResolverStyle> collection0 = CollectionUtils.subtract((Iterable<? extends ResolverStyle>) enumSet1, (Iterable<? extends ResolverStyle>) enumSet0);
      assertFalse(collection0.contains(resolverStyle0));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0);
      Collection<Integer> collection0 = CollectionUtils.subtract((Iterable<? extends Integer>) serviceLoader0, (Iterable<? extends Integer>) serviceLoader0);
      Integer integer0 = new Integer(2);
      boolean boolean0 = CollectionUtils.addIgnoreNull(collection0, integer0);
      assertTrue(boolean0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(comparator0).compare(anyInt() , anyInt());
      List<Integer> list0 = CollectionUtils.collate((Iterable<? extends Integer>) collection0, (Iterable<? extends Integer>) collection0, (Comparator<? super Integer>) comparator0, true);
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      Collection<Object> collection1 = CollectionUtils.disjunction((Iterable<?>) list0, (Iterable<?>) arrayList0);
      assertTrue(collection1.contains(2));
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0);
      Collection<Integer> collection0 = CollectionUtils.subtract((Iterable<? extends Integer>) serviceLoader0, (Iterable<? extends Integer>) serviceLoader0);
      Collection<Integer> collection1 = CollectionUtils.union((Iterable<? extends Integer>) collection0, (Iterable<? extends Integer>) serviceLoader0);
      assertNotSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ArrayDeque<TextStyle> arrayDeque0 = new ArrayDeque<TextStyle>();
      ArrayDeque<TextStyle> arrayDeque1 = arrayDeque0.clone();
      Collection<Object> collection0 = CollectionUtils.intersection((Iterable<?>) arrayDeque0, (Iterable<?>) arrayDeque1);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CollectionUtils.checkIndexBounds(5);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      linkedList0.offerLast(instanceofPredicate0);
      int int0 = CollectionUtils.size(linkedList0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<ResolverStyle> class1 = ResolverStyle.class;
      ServiceLoader<ResolverStyle> serviceLoader0 = ServiceLoader.loadInstalled(class1);
      Collection<Object> collection0 = CollectionUtils.selectRejected((Iterable<?>) serviceLoader0, (Predicate<? super Object>) instanceofPredicate0, (Collection<Object>) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      ArrayDeque<Month> arrayDeque0 = new ArrayDeque<Month>();
      Collection<Month> collection0 = CollectionUtils.select((Iterable<? extends Month>) arrayDeque0, (Predicate<? super Month>) predicate0, (Collection<Month>) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ResolverStyle resolverStyle0 = ResolverStyle.STRICT;
      EnumSet<ResolverStyle> enumSet0 = EnumSet.of(resolverStyle0);
      ResolverStyle resolverStyle1 = CollectionUtils.get((Iterable<ResolverStyle>) enumSet0, 0);
      assertEquals(ResolverStyle.STRICT, resolverStyle1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      EnumSet<StandardDeleteOption> enumSet0 = EnumSet.range(standardDeleteOption0, standardDeleteOption0);
      Iterator<StandardDeleteOption> iterator0 = enumSet0.iterator();
      NOPClosure<StandardDeleteOption> nOPClosure0 = (NOPClosure<StandardDeleteOption>) mock(NOPClosure.class, new ViolatedAssumptionAnswer());
      StandardDeleteOption standardDeleteOption1 = CollectionUtils.forAllButLastDo(iterator0, nOPClosure0);
      assertSame(standardDeleteOption0, standardDeleteOption1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ResolverStyle resolverStyle0 = ResolverStyle.SMART;
      EnumSet<ResolverStyle> enumSet0 = EnumSet.of(resolverStyle0, resolverStyle0, resolverStyle0, resolverStyle0, resolverStyle0);
      ExceptionClosure<ResolverStyle> exceptionClosure0 = (ExceptionClosure<ResolverStyle>) mock(ExceptionClosure.class, new ViolatedAssumptionAnswer());
      ResolverStyle resolverStyle1 = CollectionUtils.forAllButLastDo((Iterable<ResolverStyle>) enumSet0, exceptionClosure0);
      assertTrue(enumSet0.contains(resolverStyle1));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      Object object0 = new Object();
      priorityQueue0.add(object0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Object object1 = CollectionUtils.find((Iterable<Object>) priorityQueue0, (Predicate<? super Object>) uniquePredicate0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      TextStyle textStyle0 = TextStyle.NARROW_STANDALONE;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0, textStyle0, textStyle0, textStyle0, textStyle0);
      boolean boolean0 = CollectionUtils.filterInverse((Iterable<TextStyle>) enumSet0, (Predicate<? super TextStyle>) predicate0);
      assertFalse(enumSet0.contains(textStyle0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0);
      Collection<Integer> collection0 = CollectionUtils.subtract((Iterable<? extends Integer>) serviceLoader0, (Iterable<? extends Integer>) serviceLoader0);
      Integer integer0 = new Integer(2);
      boolean boolean0 = CollectionUtils.addIgnoreNull(collection0, integer0);
      assertTrue(boolean0);
      
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      Predicate<Integer> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Integer>>) arrayList0);
      int int0 = CollectionUtils.countMatches((Iterable<Integer>) collection0, (Predicate<? super Integer>) predicate0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transformer<Object, Predicate<Object>> transformer0 = InvokerTransformer.invokerTransformer("[");
      LinkedList<Object> linkedList1 = CollectionUtils.collect((Iterable<?>) linkedList0, (Transformer<? super Object, ? extends Predicate<Object>>) transformer0, (LinkedList<Object>) null);
      assertNull(linkedList1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      arrayDeque0.push(instanceofPredicate0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      List<Object> list0 = CollectionUtils.collate((Iterable<?>) arrayDeque0, (Iterable<?>) arrayDeque0, (Comparator<? super Object>) comparator0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      EnumSet<StandardDeleteOption> enumSet0 = EnumSet.of(standardDeleteOption0, standardDeleteOption0, standardDeleteOption0, standardDeleteOption0);
      List<StandardDeleteOption> list0 = CollectionUtils.collate((Iterable<? extends StandardDeleteOption>) enumSet0, (Iterable<? extends StandardDeleteOption>) enumSet0, false);
      assertTrue(list0.contains(standardDeleteOption0));
      
      List<StandardDeleteOption> list1 = CollectionUtils.collate((Iterable<? extends StandardDeleteOption>) list0, (Iterable<? extends StandardDeleteOption>) list0);
      boolean boolean0 = CollectionUtils.isSubCollection(list0, list1);
      assertEquals(2, list1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ResolverStyle resolverStyle0 = ResolverStyle.STRICT;
      Vector<ResolverStyle> vector0 = new Vector<ResolverStyle>();
      vector0.add(resolverStyle0);
      int int0 = CollectionUtils.cardinality(resolverStyle0, (Iterable<? super ResolverStyle>) vector0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      FixedSizeList<Integer> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Integer>) arrayList0);
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = CollectionUtils.addAll((Collection<Integer>) fixedSizeList0, integerArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ArrayDeque<DayOfWeek> arrayDeque0 = new ArrayDeque<DayOfWeek>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(arrayDeque0);
      Collection<Integer> collection0 = CollectionUtils.collect((Iterable<Object>) linkedHashSet0, (Transformer<? super Object, ? extends Integer>) null);
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      Iterator<Integer> iterator0 = priorityQueue0.iterator();
      boolean boolean0 = CollectionUtils.addAll(collection0, (Iterator<? extends Integer>) iterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LinkedList<LinkedList<ExceptionPredicate<Integer>>> linkedList0 = new LinkedList<LinkedList<ExceptionPredicate<Integer>>>();
      LinkedList<ExceptionPredicate<Integer>> linkedList1 = new LinkedList<ExceptionPredicate<Integer>>();
      boolean boolean0 = linkedList0.offerLast(linkedList1);
      boolean boolean1 = CollectionUtils.addAll((Collection<LinkedList<ExceptionPredicate<Integer>>>) linkedList0, (Iterable<? extends LinkedList<ExceptionPredicate<Integer>>>) linkedList0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Stack<AndPredicate<StandardDeleteOption>> stack0 = new Stack<AndPredicate<StandardDeleteOption>>();
      boolean boolean0 = CollectionUtils.addAll((Collection<AndPredicate<StandardDeleteOption>>) stack0, (Iterable<? extends AndPredicate<StandardDeleteOption>>) stack0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.unmodifiableCollection((Collection<? extends Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Collection<IsoEra> collection0 = CollectionUtils.emptyCollection();
      // Undeclared exception!
      try { 
        CollectionUtils.union((Iterable<? extends IsoEra>) collection0, (Iterable<? extends IsoEra>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // b
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LinkedHashSet<ResolverStyle> linkedHashSet0 = new LinkedHashSet<ResolverStyle>();
      // Undeclared exception!
      try { 
        CollectionUtils.transformingCollection((Collection<ResolverStyle>) linkedHashSet0, (Transformer<? super ResolverStyle, ? extends ResolverStyle>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<ResolverStyle> class0 = ResolverStyle.class;
      EnumSet<ResolverStyle> enumSet0 = EnumSet.allOf(class0);
      Predicate<ResolverStyle>[] predicateArray0 = (Predicate<ResolverStyle>[]) Array.newInstance(Predicate.class, 3);
      Predicate<ResolverStyle> predicate0 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[0] = predicate0;
      AnyPredicate<ResolverStyle> anyPredicate0 = new AnyPredicate<ResolverStyle>(predicateArray0);
      // Undeclared exception!
      try { 
        CollectionUtils.subtract((Iterable<? extends ResolverStyle>) enumSet0, (Iterable<? extends ResolverStyle>) enumSet0, (Predicate<ResolverStyle>) anyPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      // Undeclared exception!
      try { 
        CollectionUtils.subtract((Iterable<?>) treeSet0, (Iterable<?>) treeSet0, (Predicate<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // p
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) predicate0);
      // Undeclared exception!
      try { 
        CollectionUtils.selectRejected((Iterable<?>) linkedList0, (Predicate<? super Object>) predicate0, (Collection<Object>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ResolverStyle resolverStyle0 = ResolverStyle.STRICT;
      EnumSet<ResolverStyle> enumSet0 = EnumSet.range(resolverStyle0, resolverStyle0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      // Undeclared exception!
      try { 
        CollectionUtils.selectRejected((Iterable<? extends ResolverStyle>) enumSet0, (Predicate<? super ResolverStyle>) nullIsExceptionPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<ResolverStyle> class0 = ResolverStyle.class;
      EnumSet<ResolverStyle> enumSet0 = EnumSet.allOf(class0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      Class<Integer> class1 = Integer.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class1);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      predicateArray0[3] = (Predicate<Object>) nonePredicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      // Undeclared exception!
      CollectionUtils.selectRejected((Iterable<? extends ResolverStyle>) enumSet0, (Predicate<? super ResolverStyle>) anyPredicate0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      IsoEra[] isoEraArray0 = new IsoEra[6];
      Class<LinkOption> class0 = LinkOption.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      arrayDeque0.add(instanceofPredicate0);
      Class<Locale.Category>[] classArray0 = (Class<Locale.Category>[]) Array.newInstance(Class.class, 6);
      InvokerTransformer<InstanceofPredicate, InstanceofPredicate> invokerTransformer0 = new InvokerTransformer<InstanceofPredicate, InstanceofPredicate>("org.apache.commons.collections4.comparators.ComparableComparator", classArray0, isoEraArray0);
      TransformedPredicate<InstanceofPredicate> transformedPredicate0 = new TransformedPredicate<InstanceofPredicate>(invokerTransformer0, uniquePredicate0);
      // Undeclared exception!
      try { 
        CollectionUtils.select((Iterable<? extends InstanceofPredicate>) arrayDeque0, (Predicate<? super InstanceofPredicate>) transformedPredicate0, (Collection<InstanceofPredicate>) arrayDeque0, (Collection<InstanceofPredicate>) arrayDeque0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'org.apache.commons.collections4.comparators.ComparableComparator' on 'class org.apache.commons.collections4.functors.InstanceofPredicate' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      arrayDeque0.push(instanceofPredicate0);
      arrayDeque0.add(instanceofPredicate0);
      // Undeclared exception!
      try { 
        CollectionUtils.select((Iterable<? extends InstanceofPredicate>) arrayDeque0, (Predicate<? super InstanceofPredicate>) instanceofPredicate0, (Collection<InstanceofPredicate>) arrayDeque0, (Collection<InstanceofPredicate>) arrayDeque0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque$DeqIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0);
      Collection<Integer> collection0 = CollectionUtils.subtract((Iterable<? extends Integer>) serviceLoader0, (Iterable<? extends Integer>) serviceLoader0);
      Integer integer0 = new Integer(2);
      CollectionUtils.addIgnoreNull(collection0, integer0);
      EqualPredicate<Integer> equalPredicate0 = new EqualPredicate<Integer>(integer0, (Equator<Integer>) null);
      // Undeclared exception!
      try { 
        CollectionUtils.select((Iterable<? extends Integer>) collection0, (Predicate<? super Integer>) equalPredicate0, collection0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ArrayList<LinkOption> arrayList0 = new ArrayList<LinkOption>();
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>((Predicate<? super Object>[]) null);
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      arrayList0.add(linkOption0);
      // Undeclared exception!
      try { 
        CollectionUtils.select((Iterable<? extends LinkOption>) arrayList0, (Predicate<? super LinkOption>) anyPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.reverseArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // array
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LinkedHashSet<LinkedList<Object>> linkedHashSet0 = new LinkedHashSet<LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedHashSet0);
      linkedHashSet0.add(linkedList0);
      // Undeclared exception!
      try { 
        CollectionUtils.retainAll((Collection<LinkedList<Object>>) linkedHashSet0, (Collection<?>) linkedHashSet0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.retainAll((Collection<Transformer<ResolverStyle, ResolverStyle>>) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      // Undeclared exception!
      try { 
        CollectionUtils.retainAll((Iterable<Object>) null, (Iterable<?>) null, (Equator<? super Object>) defaultEquator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.removeRange((Collection<IsoEra>) null, 2061, (-368));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.removeCount((Collection<Object>) null, 1000, 1000);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      // Undeclared exception!
      try { 
        CollectionUtils.removeAll((Iterable<IOCase>) null, (Iterable<? extends IOCase>) null, (Equator<? super IOCase>) defaultEquator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<ResolverStyle> class0 = ResolverStyle.class;
      EnumSet<ResolverStyle> enumSet0 = EnumSet.allOf(class0);
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("\"[|~OF4");
      TransformerPredicate<ResolverStyle> transformerPredicate0 = new TransformerPredicate<ResolverStyle>(transformer0);
      NullIsExceptionPredicate<ResolverStyle> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<ResolverStyle>(transformerPredicate0);
      // Undeclared exception!
      try { 
        CollectionUtils.predicatedCollection((Collection<ResolverStyle>) enumSet0, (Predicate<? super ResolverStyle>) nullIsExceptionPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '\"[|~OF4' on 'class java.time.format.ResolverStyle' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Predicate<IsoEra> predicate0 = FalsePredicate.falsePredicate();
      // Undeclared exception!
      try { 
        CollectionUtils.predicatedCollection((Collection<IsoEra>) null, (Predicate<? super IsoEra>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.allOf(class0);
      Predicate<Locale.Category>[] predicateArray0 = (Predicate<Locale.Category>[]) Array.newInstance(Predicate.class, 1);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      IdentityPredicate<Locale.Category> identityPredicate0 = new IdentityPredicate<Locale.Category>(locale_Category0);
      predicateArray0[0] = (Predicate<Locale.Category>) identityPredicate0;
      OrPredicate<Locale.Category> orPredicate0 = new OrPredicate<Locale.Category>(predicateArray0[0], predicateArray0[0]);
      // Undeclared exception!
      try { 
        CollectionUtils.predicatedCollection((Collection<Locale.Category>) enumSet0, (Predicate<? super Locale.Category>) orPredicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'DISPLAY' - Predicate 'org.apache.commons.collections4.functors.OrPredicate@2' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.permutations((Collection<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.maxSize((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PriorityQueue<ChronoLocalDate> priorityQueue0 = new PriorityQueue<ChronoLocalDate>();
      EqualPredicate<ChronoLocalDate> equalPredicate0 = new EqualPredicate<ChronoLocalDate>((ChronoLocalDate) null);
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      priorityQueue0.add(thaiBuddhistDate0);
      // Undeclared exception!
      try { 
        CollectionUtils.matchesAll((Iterable<ChronoLocalDate>) priorityQueue0, (Predicate<? super ChronoLocalDate>) equalPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.EqualPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      // Undeclared exception!
      try { 
        CollectionUtils.isSubCollection(arrayList0, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // b
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.isProperSubCollection((Collection<?>) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // a
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.isFull((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      // Undeclared exception!
      try { 
        CollectionUtils.isEqualCollection((Collection<?>) null, (Collection<?>) null, (Equator<? super Object>) defaultEquator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // a
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.isEqualCollection((Collection<?>) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // a
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.intersection((Iterable<? extends Collection<Object>>) null, (Iterable<? extends Collection<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // a
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      // Undeclared exception!
      try { 
        CollectionUtils.hashCode((Collection<?>) arrayDeque0, (Equator<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // equator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.getCardinalityMap((Iterable<? extends ResolverStyle>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coll
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.get((Map<Object, ResolverStyle>) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      Iterator<Object> iterator0 = stack0.iterator();
      stack0.add((Object) null);
      // Undeclared exception!
      try { 
        CollectionUtils.get(iterator0, 0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ArrayDeque<ArrayList<ResolverStyle>> arrayDeque0 = new ArrayDeque<ArrayList<ResolverStyle>>();
      Iterator<ArrayList<ResolverStyle>> iterator0 = arrayDeque0.descendingIterator();
      // Undeclared exception!
      try { 
        CollectionUtils.get(iterator0, 8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 8
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Collection<ResolverStyle> collection0 = CollectionUtils.emptyCollection();
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) collection0, 32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 32
         //
         verifyException("java.util.Collections$EmptyList", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Collection<ResolverStyle> collection0 = CollectionUtils.emptyCollection();
      // Undeclared exception!
      try { 
        CollectionUtils.get((Iterable<ResolverStyle>) collection0, 1181);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1181
         //
         verifyException("java.util.Collections$EmptyList", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      // Undeclared exception!
      try { 
        CollectionUtils.get((Iterable<Object>) linkedHashSet0, 28);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 28
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DayOfWeek dayOfWeek0 = DayOfWeek.THURSDAY;
      DayOfWeek dayOfWeek1 = DayOfWeek.SATURDAY;
      EnumSet<DayOfWeek> enumSet0 = EnumSet.of(dayOfWeek0, dayOfWeek0, dayOfWeek1, dayOfWeek0);
      Iterator<DayOfWeek> iterator0 = enumSet0.iterator();
      TransformerClosure<DayOfWeek> transformerClosure0 = new TransformerClosure<DayOfWeek>((Transformer<? super DayOfWeek, ?>) null);
      // Undeclared exception!
      try { 
        CollectionUtils.forAllButLastDo(iterator0, transformerClosure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.TransformerClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      IsoEra isoEra0 = IsoEra.CE;
      EnumSet<IsoEra> enumSet0 = EnumSet.of(isoEra0, isoEra0, isoEra0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>((Predicate<? super Object>[]) null);
      // Undeclared exception!
      try { 
        CollectionUtils.filter((Iterable<IsoEra>) enumSet0, (Predicate<? super IsoEra>) allPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.AllPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.extractSingleton((Collection<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.disjunction((Iterable<? extends ExceptionClosure<Integer>>) null, (Iterable<? extends ExceptionClosure<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // a
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ResolverStyle resolverStyle0 = ResolverStyle.STRICT;
      EnumSet<ResolverStyle> enumSet0 = EnumSet.range(resolverStyle0, resolverStyle0);
      // Undeclared exception!
      try { 
        CollectionUtils.containsAny((Collection<?>) enumSet0, (Predicate<Object>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coll2
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      // Undeclared exception!
      try { 
        CollectionUtils.containsAny((Collection<?>) arrayDeque0, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coll2
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        CollectionUtils.containsAll((Collection<?>) null, arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coll1
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer(1);
      arrayList0.add(integer0);
      ListIterator<Integer> listIterator0 = arrayList0.listIterator();
      Transformer<Integer, Integer> transformer0 = InvokerTransformer.invokerTransformer("#~s");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.sort(comparator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        CollectionUtils.collect((Iterator<? extends Integer>) listIterator0, (Transformer<? super Integer, ? extends Integer>) transformer0, linkedList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PriorityQueue<ResolverStyle> priorityQueue0 = new PriorityQueue<ResolverStyle>();
      ResolverStyle resolverStyle0 = ResolverStyle.STRICT;
      Transformer<ResolverStyle, LinkedList<ResolverStyle>> transformer0 = ConstantTransformer.nullTransformer();
      priorityQueue0.add(resolverStyle0);
      // Undeclared exception!
      try { 
        CollectionUtils.collect((Iterable<? extends ResolverStyle>) priorityQueue0, (Transformer<? super ResolverStyle, ? extends LinkedList<ResolverStyle>>) transformer0, (LinkedList<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.collate((Iterable<? extends ResolverStyle>) null, (Iterable<? extends ResolverStyle>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterableA
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LinkedList<ResolverStyle> linkedList0 = new LinkedList<ResolverStyle>();
      // Undeclared exception!
      try { 
        CollectionUtils.collate((Iterable<?>) linkedList0, (Iterable<?>) linkedList0, (Comparator<? super Object>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // comparator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.collate((Iterable<? extends StandardDeleteOption>) null, (Iterable<? extends StandardDeleteOption>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterableA
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        CollectionUtils.cardinality(instanceofPredicate0, (Iterable<? super InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Collection<ResolverStyle> collection0 = CollectionUtils.emptyCollection();
      ResolverStyle resolverStyle0 = ResolverStyle.SMART;
      // Undeclared exception!
      try { 
        CollectionUtils.addIgnoreNull(collection0, resolverStyle0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CircularFifoQueue<ArrayList<Object>> circularFifoQueue0 = new CircularFifoQueue<ArrayList<Object>>(1870);
      BoundedCollection<ArrayList<Object>> boundedCollection0 = UnmodifiableBoundedCollection.unmodifiableBoundedCollection((BoundedCollection<? extends ArrayList<Object>>) circularFifoQueue0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        CollectionUtils.addIgnoreNull((Collection<ArrayList<Object>>) boundedCollection0, arrayList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.UnmodifiableBoundedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      // Undeclared exception!
      try { 
        CollectionUtils.addIgnoreNull((Collection<ArrayList<InstanceofPredicate>>) null, arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Collection<ResolverStyle> collection0 = CollectionUtils.emptyCollection();
      ResolverStyle[] resolverStyleArray0 = new ResolverStyle[5];
      // Undeclared exception!
      try { 
        CollectionUtils.addAll(collection0, resolverStyleArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>(3657);
      BoundedCollection<Integer> boundedCollection0 = UnmodifiableBoundedCollection.unmodifiableBoundedCollection((BoundedCollection<? extends Integer>) circularFifoQueue0);
      Integer[] integerArray0 = new Integer[8];
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<Integer>) boundedCollection0, integerArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.UnmodifiableBoundedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<Object>) vector0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // elements
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TreeSet<ArrayList<ResolverStyle>> treeSet0 = new TreeSet<ArrayList<ResolverStyle>>();
      ArrayList<ResolverStyle>[] arrayListArray0 = (ArrayList<ResolverStyle>[]) Array.newInstance(ArrayList.class, 7);
      ArrayList<ResolverStyle> arrayList0 = new ArrayList<ResolverStyle>();
      arrayListArray0[0] = arrayList0;
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<ArrayList<ResolverStyle>>) treeSet0, arrayListArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Enumeration<LinkedHashSet<Integer>> enumeration0 = (Enumeration<LinkedHashSet<Integer>>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<LinkedHashSet<Integer>>) null, (Enumeration<? extends LinkedHashSet<Integer>>) enumeration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      CircularFifoQueue<AndPredicate<StandardDeleteOption>> circularFifoQueue0 = new CircularFifoQueue<AndPredicate<StandardDeleteOption>>();
      AndPredicate<StandardDeleteOption> andPredicate0 = new AndPredicate<StandardDeleteOption>(instanceofPredicate0, instanceofPredicate0);
      circularFifoQueue0.add(andPredicate0);
      // Undeclared exception!
      CollectionUtils.addAll((Collection<AndPredicate<StandardDeleteOption>>) circularFifoQueue0, (Iterable<? extends AndPredicate<StandardDeleteOption>>) circularFifoQueue0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Collection<ExceptionPredicate<Month>> collection0 = CollectionUtils.emptyCollection();
      ArrayDeque<ExceptionPredicate<Month>> arrayDeque0 = new ArrayDeque<ExceptionPredicate<Month>>();
      ExceptionPredicate<Month> exceptionPredicate0 = (ExceptionPredicate<Month>) mock(ExceptionPredicate.class, new ViolatedAssumptionAnswer());
      arrayDeque0.push(exceptionPredicate0);
      // Undeclared exception!
      try { 
        CollectionUtils.addAll(collection0, (Iterable<? extends ExceptionPredicate<Month>>) arrayDeque0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Stack<Transformer<Object, Object>> stack0 = new Stack<Transformer<Object, Object>>();
      FixedSizeList<Transformer<Object, Object>> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Transformer<Object, Object>>) stack0);
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<Transformer<Object, Object>>) fixedSizeList0, (Iterable<? extends Transformer<Object, Object>>) fixedSizeList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // List is fixed size
         //
         verifyException("org.apache.commons.collections4.list.FixedSizeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<AndPredicate<StandardDeleteOption>>) null, (Iterable<? extends AndPredicate<StandardDeleteOption>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LinkedHashSet<ResolverStyle> linkedHashSet0 = new LinkedHashSet<ResolverStyle>();
      Collection<ResolverStyle> collection0 = CollectionUtils.removeCount((Collection<ResolverStyle>) linkedHashSet0, 0, 0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CircularFifoQueue<Object> circularFifoQueue0 = new CircularFifoQueue<Object>();
      // Undeclared exception!
      try { 
        CollectionUtils.removeCount((Collection<Object>) circularFifoQueue0, (-561), (-561));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The start index can't be less than 0.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>();
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Integer> list0 = CollectionUtils.collate((Iterable<? extends Integer>) circularFifoQueue0, (Iterable<? extends Integer>) serviceLoader0, (Comparator<? super Integer>) comparator0, false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ArrayDeque<TextStyle> arrayDeque0 = new ArrayDeque<TextStyle>();
      TextStyle textStyle0 = TextStyle.SHORT;
      arrayDeque0.add(textStyle0);
      boolean boolean0 = CollectionUtils.isEmpty(arrayDeque0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashSet<Comparable<MinguoEra>> hashSet0 = new HashSet<Comparable<MinguoEra>>(1580, 1580);
      boolean boolean0 = CollectionUtils.isEmpty(hashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PriorityQueue<AndPredicate<StandardDeleteOption>> priorityQueue0 = new PriorityQueue<AndPredicate<StandardDeleteOption>>();
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<AndPredicate<StandardDeleteOption>>) priorityQueue0, (Iterable<? extends AndPredicate<StandardDeleteOption>>) priorityQueue0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ListIterator<Integer> listIterator0 = arrayList0.listIterator();
      Transformer<Integer, Integer> transformer0 = InvokerTransformer.invokerTransformer("#~s");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = CollectionUtils.collect((Iterator<? extends Integer>) listIterator0, (Transformer<? super Integer, ? extends Integer>) transformer0, linkedList0);
      assertSame(linkedList1, linkedList0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<InstanceofPredicate>[] classArray0 = (Class<InstanceofPredicate>[]) Array.newInstance(Class.class, 7);
      Transformer<Object, Integer> transformer0 = InvokerTransformer.invokerTransformer("W>rt(m", (Class<?>[]) classArray0, (Object[]) classArray0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = CollectionUtils.collect((Iterator<? extends Integer>) null, (Transformer<? super Integer, ? extends Integer>) transformer0, linkedList0);
      assertEquals(0, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 5);
      Transformer<Object, Integer> transformer0 = InvokerTransformer.invokerTransformer("collection", (Class<?>[]) classArray0, (Object[]) classArray0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = CollectionUtils.collect((Iterable<? extends ResolverStyle>) null, (Transformer<? super ResolverStyle, ? extends Comparable<Integer>>) transformer0, linkedList0);
      assertEquals(0, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      PriorityQueue<Month> priorityQueue0 = new PriorityQueue<Month>();
      PriorityQueue<Object> priorityQueue1 = new PriorityQueue<Object>(priorityQueue0);
      priorityQueue1.add(defaultEquator0);
      Transformer<Object, Object> transformer0 = InvokerTransformer.invokerTransformer("array");
      // Undeclared exception!
      try { 
        CollectionUtils.collect((Iterable<Object>) priorityQueue1, (Transformer<? super Object, ?>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'array' on 'class org.apache.commons.collections4.functors.DefaultEquator' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) hashSet0);
      // Undeclared exception!
      try { 
        CollectionUtils.selectRejected((Iterable<?>) linkedList0, (Predicate<? super Object>) predicate0, (Collection<Object>) linkedList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) hashSet0);
      Collection<Object> collection0 = CollectionUtils.selectRejected((Iterable<?>) linkedList0, (Predicate<? super Object>) uniquePredicate0, (Collection<Object>) linkedList0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Collection<Object> collection0 = CollectionUtils.selectRejected((Iterable<?>) linkedList0, (Predicate<? super Object>) null, (Collection<Object>) linkedList0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Collection<Object> collection0 = CollectionUtils.selectRejected((Iterable<?>) null, (Predicate<? super Object>) predicate0, (Collection<Object>) linkedList0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Integer integer0 = new Integer((-2676));
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(integer0);
      Month month0 = Month.NOVEMBER;
      EnumSet<Month> enumSet0 = EnumSet.of(month0, month0);
      Collection<Month> collection0 = CollectionUtils.select((Iterable<? extends Month>) enumSet0, (Predicate<? super Month>) equalPredicate0, (Collection<Month>) enumSet0);
      assertTrue(collection0.contains(month0));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0);
      Collection<Integer> collection0 = CollectionUtils.subtract((Iterable<? extends Integer>) serviceLoader0, (Iterable<? extends Integer>) serviceLoader0);
      Integer integer0 = new Integer(2);
      CollectionUtils.addIgnoreNull(collection0, integer0);
      EqualPredicate<Integer> equalPredicate0 = new EqualPredicate<Integer>(integer0, (Equator<Integer>) null);
      // Undeclared exception!
      try { 
        CollectionUtils.select((Iterable<? extends Integer>) collection0, (Predicate<? super Integer>) equalPredicate0, (Collection<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      UniquePredicate<Integer> uniquePredicate0 = new UniquePredicate<Integer>();
      Collection<Integer> collection0 = CollectionUtils.select((Iterable<? extends Integer>) null, (Predicate<? super Integer>) uniquePredicate0, (Collection<Integer>) arrayList0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>(9, 9);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>(9);
      Collection<Object> collection0 = CollectionUtils.select((Iterable<?>) hashSet0, (Predicate<? super Object>) null, (Collection<Object>) arrayDeque0);
      assertFalse(collection0.contains(9));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IsoEra isoEra0 = IsoEra.CE;
      EnumSet<IsoEra> enumSet0 = EnumSet.of(isoEra0, isoEra0, isoEra0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      predicateArray0[0] = predicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(allPredicate0);
      boolean boolean0 = CollectionUtils.filter((Iterable<IsoEra>) enumSet0, (Predicate<? super IsoEra>) notPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      Stack<StandardCopyOption> stack0 = new Stack<StandardCopyOption>();
      stack0.add(standardCopyOption0);
      stack0.add(standardCopyOption0);
      Map<StandardCopyOption, Integer> map0 = CollectionUtils.getCardinalityMap((Iterable<? extends StandardCopyOption>) stack0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Stack<StandardCopyOption> stack0 = new Stack<StandardCopyOption>();
      Map<StandardCopyOption, Integer> map0 = CollectionUtils.getCardinalityMap((Iterable<? extends StandardCopyOption>) stack0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.get((Iterable<ArrayList<ResolverStyle>>) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ResolverStyle resolverStyle0 = ResolverStyle.LENIENT;
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      priorityQueue0.add(resolverStyle0);
      Object object0 = CollectionUtils.extractSingleton((Collection<Object>) priorityQueue0);
      assertSame(object0, resolverStyle0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HijrahEra hijrahEra0 = HijrahEra.AH;
      EnumSet<HijrahEra> enumSet0 = EnumSet.range(hijrahEra0, hijrahEra0);
      Comparator<HijrahEra> comparator0 = (Comparator<HijrahEra>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.time.chrono.HijrahEra.class) , any(java.time.chrono.HijrahEra.class));
      List<HijrahEra> list0 = CollectionUtils.collate((Iterable<? extends HijrahEra>) enumSet0, (Iterable<? extends HijrahEra>) enumSet0, (Comparator<? super HijrahEra>) comparator0, false);
      DefaultEquator<HijrahEra> defaultEquator0 = DefaultEquator.defaultEquator();
      TreeSet<HijrahEra> treeSet0 = new TreeSet<HijrahEra>();
      PriorityQueue<HijrahEra> priorityQueue0 = new PriorityQueue<HijrahEra>((SortedSet<? extends HijrahEra>) treeSet0);
      Collection<HijrahEra> collection0 = CollectionUtils.removeAll((Iterable<HijrahEra>) list0, (Iterable<? extends HijrahEra>) priorityQueue0, (Equator<? super HijrahEra>) defaultEquator0);
      assertTrue(collection0.contains(hijrahEra0));
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ResolverStyle resolverStyle0 = ResolverStyle.STRICT;
      EnumSet<ResolverStyle> enumSet0 = EnumSet.range(resolverStyle0, resolverStyle0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Collection<ResolverStyle> collection0 = CollectionUtils.removeAll((Iterable<ResolverStyle>) enumSet0, (Iterable<? extends ResolverStyle>) enumSet0, (Equator<? super ResolverStyle>) defaultEquator0);
      assertFalse(collection0.contains(resolverStyle0));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>();
      Collection<Integer> collection0 = CollectionUtils.removeRange((Collection<Integer>) circularFifoQueue0, 0, 0);
      assertFalse(collection0.contains(0));
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Stack<IsoEra> stack0 = new Stack<IsoEra>();
      // Undeclared exception!
      try { 
        CollectionUtils.removeCount((Collection<IsoEra>) stack0, 214, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The count can't be less than 0.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      // Undeclared exception!
      try { 
        CollectionUtils.removeRange((Collection<Integer>) stack0, 1170, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end index can't be less than the start index.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Collection<ResolverStyle> collection0 = CollectionUtils.emptyCollection();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ResolverStyle resolverStyle0 = ResolverStyle.LENIENT;
      arrayList0.add((Object) resolverStyle0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Collection<Object> collection1 = CollectionUtils.retainAll((Iterable<Object>) arrayList0, (Iterable<?>) collection0, (Equator<? super Object>) defaultEquator0);
      assertNotNull(collection1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ResolverStyle resolverStyle0 = ResolverStyle.STRICT;
      EnumSet<ResolverStyle> enumSet0 = EnumSet.range(resolverStyle0, resolverStyle0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>(enumSet0);
      Collection<Object> collection0 = CollectionUtils.retainAll((Iterable<Object>) arrayDeque0, (Iterable<?>) enumSet0, (Equator<? super Object>) defaultEquator0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      IsoEra isoEra0 = IsoEra.BCE;
      IsoEra isoEra1 = IsoEra.CE;
      EnumSet<IsoEra> enumSet0 = EnumSet.of(isoEra0, isoEra1, isoEra0);
      LinkedList<IsoEra> linkedList0 = new LinkedList<IsoEra>(enumSet0);
      Comparator<IsoEra> comparator0 = (Comparator<IsoEra>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any(java.time.chrono.IsoEra.class) , any(java.time.chrono.IsoEra.class));
      List<IsoEra> list0 = CollectionUtils.collate((Iterable<? extends IsoEra>) enumSet0, (Iterable<? extends IsoEra>) linkedList0, (Comparator<? super IsoEra>) comparator0, false);
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      Stack<Integer> stack0 = new Stack<Integer>();
      List<Integer> list0 = CollectionUtils.collate((Iterable<? extends Integer>) stack0, (Iterable<? extends Integer>) serviceLoader0, true);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CircularFifoQueue<MinguoEra> circularFifoQueue0 = new CircularFifoQueue<MinguoEra>(1580);
      BoundedCollection<Object> boundedCollection0 = UnmodifiableBoundedCollection.unmodifiableBoundedCollection((BoundedCollection<?>) circularFifoQueue0);
      int int0 = CollectionUtils.maxSize(boundedCollection0);
      assertEquals(1580, int0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      int int0 = CollectionUtils.maxSize(arrayDeque0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>();
      boolean boolean0 = CollectionUtils.isFull(circularFifoQueue0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      LinkedList<IsoEra> linkedList0 = new LinkedList<IsoEra>();
      boolean boolean0 = CollectionUtils.isFull(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      CollectionUtils.reverseArray(objectArray0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ResolverStyle resolverStyle0 = ResolverStyle.STRICT;
      EnumSet<ResolverStyle> enumSet0 = EnumSet.range(resolverStyle0, resolverStyle0);
      boolean boolean0 = CollectionUtils.isNotEmpty(enumSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>();
      boolean boolean0 = CollectionUtils.isNotEmpty(circularFifoQueue0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = CollectionUtils.isEmpty((Collection<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = Integer.valueOf((-2987));
      arrayList0.add(integer0);
      ListIterator<Integer> listIterator0 = arrayList0.listIterator();
      boolean boolean0 = CollectionUtils.sizeIsEmpty(listIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ListIterator<Integer> listIterator0 = arrayList0.listIterator();
      boolean boolean0 = CollectionUtils.sizeIsEmpty(listIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      boolean boolean0 = CollectionUtils.sizeIsEmpty(serviceLoader0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ResolverStyle resolverStyle0 = ResolverStyle.LENIENT;
      // Undeclared exception!
      try { 
        CollectionUtils.sizeIsEmpty(resolverStyle0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.time.format.ResolverStyle
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = CollectionUtils.sizeIsEmpty((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>();
      boolean boolean0 = CollectionUtils.sizeIsEmpty(circularFifoQueue0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      int int0 = CollectionUtils.size(arrayDeque0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int int0 = CollectionUtils.size((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ResolverStyle resolverStyle0 = ResolverStyle.STRICT;
      // Undeclared exception!
      try { 
        CollectionUtils.size(resolverStyle0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.time.format.ResolverStyle
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) null, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: null
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ResolverStyle resolverStyle0 = ResolverStyle.LENIENT;
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) resolverStyle0, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.time.format.ResolverStyle
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>();
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) circularFifoQueue0, (-356));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -356
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.checkIndexBounds((-844));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -844
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      PriorityQueue<DayOfWeek> priorityQueue0 = new PriorityQueue<DayOfWeek>();
      Iterator<DayOfWeek> iterator0 = priorityQueue0.iterator();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Transformer<DayOfWeek, Object> transformer0 = MapTransformer.mapTransformer((Map<? super DayOfWeek, ?>) hashMap0);
      Collection<Object> collection0 = CollectionUtils.collect(iterator0, (Transformer<? super DayOfWeek, ?>) transformer0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("input", "equator", true);
      boolean boolean0 = CollectionUtils.addAll(collection0, (Enumeration<?>) stringTokenizer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Stack<IsoEra> stack0 = new Stack<IsoEra>();
      Enumeration<IsoEra> enumeration0 = stack0.elements();
      boolean boolean0 = CollectionUtils.addAll((Collection<IsoEra>) stack0, (Enumeration<? extends IsoEra>) enumeration0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Stack<IsoEra> stack0 = new Stack<IsoEra>();
      Collection<Object> collection0 = CollectionUtils.selectRejected((Iterable<?>) stack0, (Predicate<? super Object>) null);
      boolean boolean0 = CollectionUtils.addIgnoreNull(collection0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ArrayDeque<ResolverStyle> arrayDeque0 = new ArrayDeque<ResolverStyle>();
      Iterator<ResolverStyle> iterator0 = arrayDeque0.iterator();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = CollectionUtils.collect((Iterator<? extends ResolverStyle>) iterator0, (Transformer<? super ResolverStyle, ?>) null, linkedList0);
      assertSame(linkedList1, linkedList0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<ResolverStyle> class0 = ResolverStyle.class;
      ServiceLoader<ResolverStyle> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      Collection<ResolverStyle> collection0 = CollectionUtils.selectRejected((Iterable<? extends ResolverStyle>) serviceLoader0, (Predicate<? super ResolverStyle>) null);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Collection<ResolverStyle> collection0 = CollectionUtils.selectRejected((Iterable<? extends ResolverStyle>) null, (Predicate<? super ResolverStyle>) null);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Class<ResolverStyle> class0 = ResolverStyle.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      arrayDeque0.push(instanceofPredicate0);
      // Undeclared exception!
      try { 
        CollectionUtils.select((Iterable<?>) arrayDeque0, (Predicate<? super Object>) instanceofPredicate0, (LinkedList<Object>) null, (LinkedList<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Class<ResolverStyle> class0 = ResolverStyle.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      LinkedList<Object> linkedList0 = CollectionUtils.select((Iterable<?>) arrayDeque0, (Predicate<? super Object>) instanceofPredicate0, (LinkedList<Object>) null, (LinkedList<Object>) null);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      LinkedHashSet<Comparable<Object>> linkedHashSet0 = new LinkedHashSet<Comparable<Object>>(1253);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      Collection<Object> collection0 = CollectionUtils.select((Iterable<? extends Comparable<Object>>) linkedHashSet0, (Predicate<? super Comparable<Object>>) null, (Collection<Object>) arrayDeque0, (Collection<Object>) arrayDeque0);
      assertFalse(collection0.contains(1253));
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>(683, 683);
      Integer integer0 = new Integer(683);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(integer0);
      Collection<Object> collection0 = CollectionUtils.select((Iterable<? extends AndPredicate<ResolverStyle>>) null, (Predicate<? super AndPredicate<ResolverStyle>>) equalPredicate0, (Collection<Object>) vector0, (Collection<Object>) vector0);
      assertFalse(collection0.contains(683));
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      PriorityQueue<IsoEra> priorityQueue0 = new PriorityQueue<IsoEra>((Comparator<? super IsoEra>) null);
      IsoEra isoEra0 = IsoEra.CE;
      priorityQueue0.add(isoEra0);
      Predicate<IsoEra> predicate0 = IdentityPredicate.identityPredicate(isoEra0);
      Collection<IsoEra> collection0 = CollectionUtils.select((Iterable<? extends IsoEra>) priorityQueue0, (Predicate<? super IsoEra>) predicate0);
      assertTrue(collection0.contains(isoEra0));
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<LinkOption> class0 = LinkOption.class;
      ServiceLoader<LinkOption> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      Collection<LinkOption> collection0 = CollectionUtils.select((Iterable<? extends LinkOption>) serviceLoader0, (Predicate<? super LinkOption>) null);
      List<LinkOption> list0 = CollectionUtils.collate((Iterable<? extends LinkOption>) serviceLoader0, (Iterable<? extends LinkOption>) collection0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Collection<LinkOption> collection0 = CollectionUtils.select((Iterable<? extends LinkOption>) null, (Predicate<? super LinkOption>) null);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      FormatStyle formatStyle0 = FormatStyle.LONG;
      hashSet0.add(formatStyle0);
      boolean boolean0 = CollectionUtils.matchesAll((Iterable<Object>) hashSet0, (Predicate<? super Object>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      boolean boolean0 = CollectionUtils.matchesAll((Iterable<Object>) arrayDeque0, (Predicate<? super Object>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ArrayDeque<TextStyle> arrayDeque0 = new ArrayDeque<TextStyle>();
      TextStyle textStyle0 = TextStyle.SHORT;
      Comparator<TextStyle> comparator0 = (Comparator<TextStyle>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.time.format.TextStyle.class) , any(java.time.format.TextStyle.class));
      arrayDeque0.add(textStyle0);
      Predicate<TextStyle> predicate0 = ComparatorPredicate.comparatorPredicate(textStyle0, comparator0);
      boolean boolean0 = CollectionUtils.exists((Iterable<TextStyle>) arrayDeque0, (Predicate<? super TextStyle>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ArrayDeque<TextStyle> arrayDeque0 = new ArrayDeque<TextStyle>();
      TextStyle textStyle0 = TextStyle.SHORT;
      Comparator<TextStyle> comparator0 = (Comparator<TextStyle>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<TextStyle> predicate0 = ComparatorPredicate.comparatorPredicate(textStyle0, comparator0);
      boolean boolean0 = CollectionUtils.exists((Iterable<TextStyle>) arrayDeque0, (Predicate<? super TextStyle>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      CircularFifoQueue<TextStyle> circularFifoQueue0 = new CircularFifoQueue<TextStyle>();
      boolean boolean0 = CollectionUtils.exists((Iterable<TextStyle>) circularFifoQueue0, (Predicate<? super TextStyle>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Transformer<Object, Object> transformer0 = ExceptionTransformer.exceptionTransformer();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) null);
      // Undeclared exception!
      try { 
        CollectionUtils.transform((Collection<Object>) linkedList0, (Transformer<? super Object, ?>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Transformer<Object, IsoEra> transformer0 = InvokerTransformer.invokerTransformer("VG{s?nx@'4i");
      Collection<Object> collection0 = CollectionUtils.collect((Iterable<Comparable<Object>>) null, (Transformer<? super Comparable<Object>, ?>) transformer0);
      Collection<Object> collection1 = CollectionUtils.transformingCollection(collection0, (Transformer<? super Object, ?>) transformer0);
      CollectionUtils.transform(collection1, (Transformer<? super Object, ?>) transformer0);
      assertFalse(collection0.equals((Object)collection1));
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      PriorityQueue<FormatStyle> priorityQueue0 = new PriorityQueue<FormatStyle>();
      CollectionUtils.transform((Collection<FormatStyle>) priorityQueue0, (Transformer<? super FormatStyle, ? extends FormatStyle>) null);
      assertEquals(0, priorityQueue0.size());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Transformer<Object, Object> transformer0 = ExceptionTransformer.exceptionTransformer();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      CollectionUtils.transform((Collection<Object>) linkedList0, (Transformer<? super Object, ?>) transformer0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Factory<Integer> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, Integer> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Integer>) factory0);
      CollectionUtils.transform((Collection<Object>) null, (Transformer<? super Object, ?>) transformer0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Comparator<TextStyle> comparator0 = (Comparator<TextStyle>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<TextStyle> priorityQueue0 = new PriorityQueue<TextStyle>(5, comparator0);
      boolean boolean0 = CollectionUtils.filterInverse((Iterable<TextStyle>) priorityQueue0, (Predicate<? super TextStyle>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      LinkedList<IsoEra> linkedList0 = new LinkedList<IsoEra>();
      IsoEra isoEra0 = IsoEra.BCE;
      linkedList0.offerFirst(isoEra0);
      Predicate<IsoEra> predicate0 = FalsePredicate.falsePredicate();
      boolean boolean0 = CollectionUtils.filter((Iterable<IsoEra>) linkedList0, (Predicate<? super IsoEra>) predicate0);
      assertFalse(linkedList0.contains(isoEra0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Vector<IsoEra> vector0 = new Vector<IsoEra>(3, 3);
      boolean boolean0 = CollectionUtils.filter((Iterable<IsoEra>) vector0, (Predicate<? super IsoEra>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      boolean boolean0 = CollectionUtils.filter((Iterable<IsoEra>) null, (Predicate<? super IsoEra>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      ForClosure<Object> forClosure0 = new ForClosure<Object>((-2269), closure0);
      ExceptionPredicate<ResolverStyle> exceptionPredicate0 = CollectionUtils.forAllButLastDo((Iterator<ExceptionPredicate<ResolverStyle>>) null, forClosure0);
      assertNull(exceptionPredicate0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedList0.iterator();
      Integer integer0 = CollectionUtils.forAllButLastDo(iterator0, (ChainedClosure<Integer>) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      PriorityQueue<LinkOption> priorityQueue0 = new PriorityQueue<LinkOption>();
      Closure<LinkOption> closure0 = NOPClosure.nopClosure();
      CollectionUtils.forAllButLastDo((Iterable<LinkOption>) priorityQueue0, closure0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ArrayDeque<ExceptionPredicate<Month>> arrayDeque0 = new ArrayDeque<ExceptionPredicate<Month>>();
      ExceptionPredicate<Month> exceptionPredicate0 = CollectionUtils.forAllButLastDo((Iterable<ExceptionPredicate<Month>>) arrayDeque0, (ChainedClosure<Object>) null);
      assertNull(exceptionPredicate0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ExceptionClosure<Integer> exceptionClosure0 = (ExceptionClosure<Integer>) mock(ExceptionClosure.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exceptionClosure0).toString();
      ExceptionClosure<Integer> exceptionClosure1 = CollectionUtils.forAllDo((Iterator<Integer>) null, exceptionClosure0);
      assertSame(exceptionClosure1, exceptionClosure0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Stack<MinguoEra> stack0 = new Stack<MinguoEra>();
      ListIterator<MinguoEra> listIterator0 = stack0.listIterator();
      SwitchClosure<MinguoEra> switchClosure0 = CollectionUtils.forAllDo((Iterator<MinguoEra>) listIterator0, (SwitchClosure<MinguoEra>) null);
      assertNull(switchClosure0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      ExceptionClosure<Object> exceptionClosure0 = (ExceptionClosure<Object>) mock(ExceptionClosure.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exceptionClosure0).toString();
      ExceptionClosure<Object> exceptionClosure1 = CollectionUtils.forAllDo((Iterable<Object>) arrayDeque0, exceptionClosure0);
      assertSame(exceptionClosure1, exceptionClosure0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      ExceptionClosure<Object> exceptionClosure0 = CollectionUtils.forAllDo((Iterable<Object>) arrayDeque0, (ExceptionClosure<Object>) null);
      assertNull(exceptionClosure0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Vector<ArrayList<ResolverStyle>> vector0 = new Vector<ArrayList<ResolverStyle>>(65535, 65535);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      ArrayList<ResolverStyle> arrayList0 = CollectionUtils.find((Iterable<ArrayList<ResolverStyle>>) vector0, (Predicate<? super ArrayList<ResolverStyle>>) predicate0);
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      FixedSizeList<Integer> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Integer>) vector0);
      Integer integer0 = CollectionUtils.find((Iterable<Integer>) fixedSizeList0, (Predicate<? super Integer>) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      CollectionUtils.hashCode((Collection<?>) null, (Equator<? super Object>) defaultEquator0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ResolverStyle resolverStyle0 = ResolverStyle.STRICT;
      EnumSet<ResolverStyle> enumSet0 = EnumSet.range(resolverStyle0, resolverStyle0);
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      EnumSet<LinkOption> enumSet1 = EnumSet.of(linkOption0, linkOption0);
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<?>) enumSet0, (Collection<?>) enumSet1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      arrayDeque0.add(instanceofPredicate0);
      Stack<Object> stack0 = new Stack<Object>();
      boolean boolean0 = CollectionUtils.isProperSubCollection(stack0, arrayDeque0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      boolean boolean0 = CollectionUtils.isProperSubCollection(arrayDeque0, arrayDeque0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      LinkedList<ResolverStyle> linkedList0 = new LinkedList<ResolverStyle>();
      ResolverStyle resolverStyle0 = ResolverStyle.LENIENT;
      linkedList0.add(resolverStyle0);
      CollectionUtils.addIgnoreNull((Collection<ResolverStyle>) linkedList0, resolverStyle0);
      boolean boolean0 = CollectionUtils.isSubCollection(linkedList0, linkedList0);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      arrayList0.add((Integer) null);
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      arrayDeque0.add(instanceofPredicate0);
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) arrayDeque0, (Collection<?>) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList<ResolverStyle> arrayList1 = new ArrayList<ResolverStyle>();
      arrayList0.add((Object) arrayList1);
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) arrayList0, (Collection<?>) arrayList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      LinkedList<IsoEra> linkedList0 = new LinkedList<IsoEra>();
      IsoEra[] isoEraArray0 = new IsoEra[6];
      CollectionUtils.addAll((Collection<IsoEra>) linkedList0, isoEraArray0);
      Class<LinkOption> class0 = LinkOption.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      arrayDeque0.add(instanceofPredicate0);
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) arrayDeque0, (Collection<?>) linkedList0);
      assertEquals(6, linkedList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      LinkedList<IsoEra> linkedList0 = new LinkedList<IsoEra>();
      IsoEra[] isoEraArray0 = new IsoEra[6];
      CollectionUtils.addAll((Collection<IsoEra>) linkedList0, isoEraArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) linkedList0, predicateArray0);
      assertEquals(6, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate((Class<?>) null);
      arrayDeque0.add(instanceofPredicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      predicateArray0[0] = (Predicate<Object>) instanceofPredicate0;
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) arrayDeque0, predicateArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0);
      Collection<Integer> collection0 = CollectionUtils.subtract((Iterable<? extends Integer>) serviceLoader0, (Iterable<? extends Integer>) serviceLoader0);
      Integer integer0 = new Integer(2);
      boolean boolean0 = CollectionUtils.addIgnoreNull(collection0, integer0);
      LinkedList<ResolverStyle> linkedList0 = new LinkedList<ResolverStyle>();
      ResolverStyle resolverStyle0 = ResolverStyle.LENIENT;
      linkedList0.add(resolverStyle0);
      boolean boolean1 = CollectionUtils.containsAll(collection0, linkedList0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      LinkedList<ResolverStyle> linkedList0 = new LinkedList<ResolverStyle>();
      ResolverStyle resolverStyle0 = ResolverStyle.LENIENT;
      linkedList0.add(resolverStyle0);
      linkedList0.add(resolverStyle0);
      boolean boolean0 = CollectionUtils.containsAll(linkedList0, linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>();
      boolean boolean0 = CollectionUtils.containsAll(circularFifoQueue0, circularFifoQueue0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      IsoEra isoEra0 = IsoEra.BCE;
      IsoEra[] isoEraArray0 = new IsoEra[0];
      EnumSet<IsoEra> enumSet0 = EnumSet.of(isoEra0, isoEraArray0);
      EqualPredicate<IsoEra> equalPredicate0 = new EqualPredicate<IsoEra>(isoEra0);
      Collection<IsoEra> collection0 = CollectionUtils.subtract((Iterable<? extends IsoEra>) enumSet0, (Iterable<? extends IsoEra>) enumSet0, (Predicate<IsoEra>) equalPredicate0);
      assertFalse(collection0.contains(isoEra0));
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ResolverStyle resolverStyle0 = ResolverStyle.LENIENT;
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) resolverStyle0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Collection<Object> collection0 = CollectionUtils.subtract((Iterable<?>) arrayList0, (Iterable<?>) arrayList0, predicate0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      LinkedList<IsoEra> linkedList0 = new LinkedList<IsoEra>();
      IsoEra isoEra0 = IsoEra.BCE;
      linkedList0.offerFirst(isoEra0);
      Collection<IsoEra> collection0 = CollectionUtils.union((Iterable<? extends IsoEra>) linkedList0, (Iterable<? extends IsoEra>) linkedList0);
      assertTrue(collection0.contains(isoEra0));
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Collection<IsoEra> collection0 = CollectionUtils.emptyCollection();
      Collection<IsoEra> collection1 = CollectionUtils.union((Iterable<? extends IsoEra>) collection0, (Iterable<? extends IsoEra>) collection0);
      DefaultEquator<IsoEra> defaultEquator0 = DefaultEquator.defaultEquator();
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<? extends IsoEra>) collection0, (Collection<? extends IsoEra>) collection1, (Equator<? super IsoEra>) defaultEquator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Collection<ArrayList<ResolverStyle>> collection0 = CollectionUtils.emptyIfNull((Collection<ArrayList<ResolverStyle>>) null);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      LinkedHashSet<LinkedList<Object>> linkedHashSet0 = new LinkedHashSet<LinkedList<Object>>();
      Collection<LinkedList<Object>> collection0 = CollectionUtils.emptyIfNull((Collection<LinkedList<Object>>) linkedHashSet0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ResolverStyle resolverStyle0 = ResolverStyle.STRICT;
      EnumSet<ResolverStyle> enumSet0 = EnumSet.range(resolverStyle0, resolverStyle0);
      Collection<Object> collection0 = CollectionUtils.intersection((Iterable<?>) enumSet0, (Iterable<?>) enumSet0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>();
      ResolverStyle resolverStyle0 = ResolverStyle.LENIENT;
      LinkedList<ResolverStyle> linkedList0 = new LinkedList<ResolverStyle>();
      linkedList0.add(resolverStyle0);
      boolean boolean0 = CollectionUtils.isSubCollection(linkedList0, circularFifoQueue0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.subtract((Iterable<? extends WhileClosure<Integer>>) null, (Iterable<? extends WhileClosure<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // a
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      HashSet<ResolverStyle> hashSet0 = new HashSet<ResolverStyle>();
      LinkedList<ResolverStyle> linkedList0 = new LinkedList<ResolverStyle>(hashSet0);
      // Undeclared exception!
      try { 
        CollectionUtils.collate((Iterable<? extends ResolverStyle>) linkedList0, (Iterable<? extends ResolverStyle>) hashSet0, (Comparator<? super ResolverStyle>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // comparator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Stack<AndPredicate<StandardDeleteOption>> stack0 = new Stack<AndPredicate<StandardDeleteOption>>();
      CircularFifoQueue<ExceptionPredicate<ResolverStyle>> circularFifoQueue0 = new CircularFifoQueue<ExceptionPredicate<ResolverStyle>>();
      Collection<ExceptionPredicate<ResolverStyle>> collection0 = CollectionUtils.retainAll((Collection<ExceptionPredicate<ResolverStyle>>) circularFifoQueue0, (Collection<?>) stack0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ResolverStyle resolverStyle0 = ResolverStyle.SMART;
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      int int0 = CollectionUtils.cardinality(resolverStyle0, (Iterable<? super ResolverStyle>) priorityQueue0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.removeAll((Collection<Transformer<ResolverStyle, Object>>) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(arrayDeque0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Collection<Object> collection0 = CollectionUtils.predicatedCollection((Collection<Object>) arrayList0, (Predicate<? super Object>) identityPredicate0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.get((Iterator<Object>) null, (-1507));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Collection<Object> collection0 = CollectionUtils.unmodifiableCollection((Collection<?>) linkedHashSet0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.synchronizedCollection((Collection<InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      ArrayDeque<DayOfWeek> arrayDeque0 = new ArrayDeque<DayOfWeek>();
      DayOfWeek dayOfWeek0 = DayOfWeek.WEDNESDAY;
      arrayDeque0.add(dayOfWeek0);
      Collection<DayOfWeek> collection0 = CollectionUtils.disjunction((Iterable<? extends DayOfWeek>) arrayDeque0, (Iterable<? extends DayOfWeek>) arrayDeque0);
      assertFalse(collection0.contains(dayOfWeek0));
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      ResolverStyle resolverStyle0 = ResolverStyle.STRICT;
      EnumSet<ResolverStyle> enumSet0 = EnumSet.range(resolverStyle0, resolverStyle0);
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<?>) enumSet0, (Collection<?>) enumSet0);
      assertTrue(boolean0);
  }
}
