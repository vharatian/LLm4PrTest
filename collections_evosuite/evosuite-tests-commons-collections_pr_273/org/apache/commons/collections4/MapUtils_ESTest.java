/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 12:16:22 GMT 2025
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintStream;
import java.lang.reflect.Array;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.file.StandardCopyOption;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.HijrahEra;
import java.time.chrono.MinguoEra;
import java.time.chrono.ThaiBuddhistEra;
import java.util.AbstractMap;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.Vector;
import java.util.concurrent.TimeUnit;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IterableMap;
import org.apache.commons.collections4.IterableSortedMap;
import org.apache.commons.collections4.KeyValue;
import org.apache.commons.collections4.MapUtils;
import org.apache.commons.collections4.OrderedBidiMap;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.SortedBidiMap;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.bidimap.DualHashBidiMap;
import org.apache.commons.collections4.bidimap.DualTreeBidiMap;
import org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMap;
import org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMap;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NOPTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.keyvalue.DefaultMapEntry;
import org.apache.commons.collections4.keyvalue.TiedMapEntry;
import org.apache.commons.collections4.keyvalue.UnmodifiableMapEntry;
import org.apache.commons.collections4.map.AbstractReferenceMap;
import org.apache.commons.collections4.map.CaseInsensitiveMap;
import org.apache.commons.collections4.map.CompositeMap;
import org.apache.commons.collections4.map.DefaultedMap;
import org.apache.commons.collections4.map.FixedSizeSortedMap;
import org.apache.commons.collections4.map.Flat3Map;
import org.apache.commons.collections4.map.HashedMap;
import org.apache.commons.collections4.map.LRUMap;
import org.apache.commons.collections4.map.LazyMap;
import org.apache.commons.collections4.map.LazySortedMap;
import org.apache.commons.collections4.map.LinkedMap;
import org.apache.commons.collections4.map.ListOrderedMap;
import org.apache.commons.collections4.map.PassiveExpiringMap;
import org.apache.commons.collections4.map.ReferenceIdentityMap;
import org.apache.commons.collections4.map.ReferenceMap;
import org.apache.commons.collections4.map.SingletonMap;
import org.apache.commons.collections4.map.StaticBucketMap;
import org.apache.commons.collections4.map.TransformedSortedMap;
import org.apache.commons.io.IOCase;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class MapUtils_ESTest extends MapUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1162, 1162, 1162, 1162, (-720)).when(comparator0).compare(any(java.lang.Byte.class) , any(java.lang.Byte.class));
      DualTreeBidiMap<Byte, Byte> dualTreeBidiMap0 = new DualTreeBidiMap<Byte, Byte>(comparator0, comparator0);
      Byte byte0 = new Byte((byte)0);
      SortedMap<Byte, Byte> sortedMap0 = dualTreeBidiMap0.headMap(byte0);
      dualTreeBidiMap0.put(byte0, byte0);
      MapUtils.getShort((Map<? super Byte, ?>) sortedMap0, byte0, (Function<Byte, Short>) null);
      assertFalse(sortedMap0.isEmpty());
      
      boolean boolean0 = MapUtils.isNotEmpty(sortedMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Comparator<Double> comparator0 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Double> comparator1 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<Double, Double> dualTreeBidiMap0 = new DualTreeBidiMap<Double, Double>(comparator0, comparator1);
      SortedMap<Double, Double> sortedMap0 = MapUtils.synchronizedSortedMap((SortedMap<Double, Double>) dualTreeBidiMap0);
      assertTrue(sortedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any(java.lang.Byte.class) , any(java.lang.Byte.class));
      DualTreeBidiMap<Byte, Byte> dualTreeBidiMap0 = new DualTreeBidiMap<Byte, Byte>(comparator0, comparator0);
      Byte byte0 = new Byte((byte)0);
      dualTreeBidiMap0.put(byte0, byte0);
      int int0 = MapUtils.size(dualTreeBidiMap0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Comparator<Locale.FilteringMode> comparator0 = (Comparator<Locale.FilteringMode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<Locale.FilteringMode, Locale.FilteringMode> dualTreeBidiMap0 = new DualTreeBidiMap<Locale.FilteringMode, Locale.FilteringMode>(comparator0, comparator0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Comparator<Locale.FilteringMode> comparator1 = (Comparator<Locale.FilteringMode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      Predicate<Locale.FilteringMode> predicate0 = ComparatorPredicate.comparatorPredicate(locale_FilteringMode0, comparator1, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      SortedMap<Locale.FilteringMode, Locale.FilteringMode> sortedMap0 = MapUtils.predicatedSortedMap((SortedMap<Locale.FilteringMode, Locale.FilteringMode>) dualTreeBidiMap0, (Predicate<? super Locale.FilteringMode>) predicate0, (Predicate<? super Locale.FilteringMode>) predicate0);
      assertTrue(sortedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DualTreeBidiMap<Byte, Byte> dualTreeBidiMap0 = new DualTreeBidiMap<Byte, Byte>();
      IterableMap<Byte, Byte> iterableMap0 = MapUtils.iterableMap((Map<Byte, Byte>) dualTreeBidiMap0);
      assertEquals(0, iterableMap0.size());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ReferenceMap<Transformer<Object, Object>, Object> referenceMap0 = new ReferenceMap<Transformer<Object, Object>, Object>();
      Map<Object, Transformer<Object, Object>> map0 = MapUtils.invertMap((Map<Transformer<Object, Object>, Object>) referenceMap0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Comparator<Locale.FilteringMode> comparator0 = (Comparator<Locale.FilteringMode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<Locale.FilteringMode, Locale.FilteringMode> dualTreeBidiMap0 = new DualTreeBidiMap<Locale.FilteringMode, Locale.FilteringMode>(comparator0, comparator0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      ListOrderedMap<Locale.FilteringMode, Locale.FilteringMode> listOrderedMap0 = ListOrderedMap.listOrderedMap((Map<Locale.FilteringMode, Locale.FilteringMode>) dualTreeBidiMap0);
      Function<Locale.FilteringMode, String> function0 = (Function<Locale.FilteringMode, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn("map").when(function0).apply(any(java.util.Locale.FilteringMode.class));
      String string0 = MapUtils.getString((Map<? super Locale.FilteringMode, ?>) listOrderedMap0, locale_FilteringMode0, function0);
      assertEquals("map", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashedMap<Object, Object> hashedMap0 = new HashedMap<Object, Object>();
      Function<Object, Short> function0 = (Function<Object, Short>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      short short0 = MapUtils.getShortValue((Map<? super Object, ?>) hashedMap0, (Object) null, function0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(any(java.lang.Byte.class) , any(java.lang.Byte.class));
      DualTreeBidiMap<Byte, Byte> dualTreeBidiMap0 = new DualTreeBidiMap<Byte, Byte>(comparator0, comparator0);
      Byte byte0 = new Byte((byte)70);
      dualTreeBidiMap0.put(byte0, byte0);
      Short short0 = MapUtils.getShort((Map<? super Byte, ?>) dualTreeBidiMap0, byte0, (Function<Byte, Short>) null);
      assertEquals((short)70, (short)short0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<Byte, Byte> dualTreeBidiMap0 = new DualTreeBidiMap<Byte, Byte>(comparator0, comparator0);
      Byte byte0 = new Byte((byte)0);
      Short short0 = new Short((short)5);
      Short short1 = MapUtils.getShort((Map<? super Byte, ?>) dualTreeBidiMap0, byte0, short0);
      assertEquals((short)5, (short)short1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-70));
      Map<?, ?> map0 = MapUtils.getMap((Map<? super Byte, ?>) null, byte0, (Map<?, ?>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceMap<Integer, Byte> referenceMap0 = new ReferenceMap<Integer, Byte>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 115, 115, true);
      Integer integer0 = new Integer(115);
      long long0 = MapUtils.getLongValue((Map<? super Integer, ?>) referenceMap0, integer0, 279L);
      assertEquals(279L, long0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      LinkedMap<Byte, Byte> linkedMap0 = new LinkedMap<Byte, Byte>();
      Byte byte1 = new Byte((byte)32);
      linkedMap0.put(byte0, byte1);
      long long0 = MapUtils.getLongValue((Map<? super Byte, ?>) linkedMap0, byte0);
      assertEquals(32L, long0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Comparator<IOCase> comparator0 = (Comparator<IOCase>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Byte> comparator1 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<IOCase, Byte> dualTreeBidiMap0 = new DualTreeBidiMap<IOCase, Byte>(comparator0, comparator1);
      IOCase iOCase0 = IOCase.INSENSITIVE;
      Long long0 = new Long(2488L);
      Function<IOCase, Long> function0 = (Function<IOCase, Long>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(function0).apply(any(org.apache.commons.io.IOCase.class));
      Long long1 = MapUtils.getLong((Map<? super IOCase, ?>) dualTreeBidiMap0, iOCase0, function0);
      assertEquals(2488L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-70));
      DualTreeBidiMap<IOCase, Byte> dualTreeBidiMap0 = new DualTreeBidiMap<IOCase, Byte>();
      IOCase iOCase0 = IOCase.SENSITIVE;
      dualTreeBidiMap0.put(iOCase0, byte0);
      Function<IOCase, Long> function0 = (Function<IOCase, Long>) mock(Function.class, new ViolatedAssumptionAnswer());
      Long long0 = MapUtils.getLong((Map<? super IOCase, ?>) dualTreeBidiMap0, iOCase0, function0);
      assertEquals((-70L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Comparator<IOCase> comparator0 = (Comparator<IOCase>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Byte> comparator1 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<IOCase, Byte> dualTreeBidiMap0 = new DualTreeBidiMap<IOCase, Byte>(comparator0, comparator1);
      CaseInsensitiveMap<Object, Object> caseInsensitiveMap0 = new CaseInsensitiveMap<Object, Object>(dualTreeBidiMap0);
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      Long long0 = MapUtils.getLong((Map<? super Predicate<Object>, ?>) caseInsensitiveMap0, (Predicate<Object>) nullIsExceptionPredicate0, (Long) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Factory<Locale.FilteringMode> factory0 = ExceptionFactory.exceptionFactory();
      PassiveExpiringMap<Object, Object> passiveExpiringMap0 = new PassiveExpiringMap<Object, Object>();
      Integer integer0 = new Integer((-1));
      Integer integer1 = MapUtils.getInteger((Map<? super Object, ?>) passiveExpiringMap0, (Object) factory0, integer0);
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<Byte, ThaiBuddhistEra> referenceMap0 = new ReferenceMap<Byte, ThaiBuddhistEra>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, false);
      Byte byte0 = new Byte((byte)32);
      float float0 = MapUtils.getFloatValue((Map<? super Byte, ?>) referenceMap0, byte0, 1368.0334F);
      assertEquals(1368.0334F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StaticBucketMap<Locale.FilteringMode, Locale.FilteringMode> staticBucketMap0 = new StaticBucketMap<Locale.FilteringMode, Locale.FilteringMode>((-2950));
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      TiedMapEntry<Locale.FilteringMode, Locale.FilteringMode> tiedMapEntry0 = new TiedMapEntry<Locale.FilteringMode, Locale.FilteringMode>(staticBucketMap0, locale_FilteringMode0);
      AbstractMap.SimpleEntry<Locale.FilteringMode, Locale.FilteringMode> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Locale.FilteringMode, Locale.FilteringMode>(tiedMapEntry0);
      SingletonMap<Locale.FilteringMode, Locale.FilteringMode> singletonMap0 = new SingletonMap<Locale.FilteringMode, Locale.FilteringMode>(abstractMap_SimpleEntry0);
      Function<Locale.FilteringMode, Float> function0 = (Function<Locale.FilteringMode, Float>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any(java.util.Locale.FilteringMode.class));
      Float float0 = MapUtils.getFloat((Map<? super Locale.FilteringMode, ?>) singletonMap0, locale_FilteringMode0, function0);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Byte byte0 = new Byte((byte)122);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      PassiveExpiringMap<Byte, Byte> passiveExpiringMap0 = new PassiveExpiringMap<Byte, Byte>(0L, timeUnit0);
      Float float0 = new Float((float) 8);
      Float float1 = MapUtils.getFloat((Map<? super Byte, ?>) passiveExpiringMap0, byte0, float0);
      assertEquals(8.0F, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      LinkedMap<Byte, Byte> linkedMap0 = new LinkedMap<Byte, Byte>();
      Byte byte1 = new Byte((byte)32);
      linkedMap0.put(byte0, byte1);
      Float float0 = MapUtils.getFloat((Map<? super Byte, ?>) linkedMap0, byte0);
      assertEquals(32.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Double double0 = new Double(0.0);
      Function<Locale.Category, Double> function0 = (Function<Locale.Category, Double>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(double0).when(function0).apply(any(java.util.Locale.Category.class));
      Double double1 = MapUtils.getDouble((Map<? super Locale.Category, ?>) null, locale_Category0, function0);
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Double double0 = new Double(5);
      Function<Locale.Category, Double> function0 = (Function<Locale.Category, Double>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(double0).when(function0).apply(any(java.util.Locale.Category.class));
      Double double1 = MapUtils.getDouble((Map<? super Locale.Category, ?>) null, locale_Category0, function0);
      assertEquals(5.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Comparator<Double> comparator0 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Double> comparator1 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<Double, Double> dualTreeBidiMap0 = new DualTreeBidiMap<Double, Double>(comparator0, comparator1);
      Double double0 = new Double(0.0);
      Double double1 = new Double((-1.0));
      Double double2 = MapUtils.getDouble((Map<? super Double, ?>) dualTreeBidiMap0, double0, double1);
      assertNotEquals((double)double2, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      byte byte1 = MapUtils.getByteValue((Map<? super Object, ?>) null, (Object) byte0, (byte) (-48));
      assertEquals((byte) (-48), byte1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashedMap<Object, Object> hashedMap0 = new HashedMap<Object, Object>();
      Byte byte0 = new Byte((byte)78);
      Function<Byte, Byte> function0 = Function.identity();
      Byte byte1 = MapUtils.getByte((Map<? super Byte, ?>) hashedMap0, byte0, function0);
      assertEquals((byte)78, (byte)byte1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StaticBucketMap<MinguoEra, MinguoEra> staticBucketMap0 = new StaticBucketMap<MinguoEra, MinguoEra>((-2524));
      CompositeMap.MapMutator<MinguoEra, MinguoEra> compositeMap_MapMutator0 = (CompositeMap.MapMutator<MinguoEra, MinguoEra>) mock(CompositeMap.MapMutator.class, new ViolatedAssumptionAnswer());
      CompositeMap<MinguoEra, MinguoEra> compositeMap0 = new CompositeMap<MinguoEra, MinguoEra>(staticBucketMap0, staticBucketMap0, compositeMap_MapMutator0);
      MinguoEra minguoEra0 = MinguoEra.ROC;
      Function<MinguoEra, Byte> function0 = (Function<MinguoEra, Byte>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any(java.time.chrono.MinguoEra.class));
      Byte byte0 = MapUtils.getByte((Map<? super MinguoEra, ?>) compositeMap0, minguoEra0, function0);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Byte byte0 = new Byte((byte)0);
      CompositeMap<Object, Object> compositeMap0 = new CompositeMap<Object, Object>();
      Byte byte1 = MapUtils.getByte((Map<? super LinkedList<Object>, ?>) compositeMap0, linkedList0, byte0);
      assertEquals((byte)0, (byte)byte1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashedMap<Object, Object> hashedMap0 = new HashedMap<Object, Object>(32);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Byte byte0 = new Byte((byte)111);
      Byte byte1 = MapUtils.getByte((Map<? super LinkedList<Object>, ?>) hashedMap0, linkedList0, byte0);
      assertEquals((byte)111, (byte)byte1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CompositeMap<Object, Object> compositeMap0 = new CompositeMap<Object, Object>();
      Byte byte0 = new Byte((byte)84);
      Boolean boolean0 = Boolean.valueOf(true);
      Function<Byte, Boolean> function0 = (Function<Byte, Boolean>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(function0).apply(any(java.lang.Byte.class));
      Boolean boolean1 = MapUtils.getBoolean((Map<? super Byte, ?>) compositeMap0, byte0, function0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DualTreeBidiMap<Boolean, Boolean> dualTreeBidiMap0 = new DualTreeBidiMap<Boolean, Boolean>();
      Boolean boolean0 = Boolean.valueOf("GDWuWA-UJ A<M9_4K");
      UnaryOperator<Boolean> unaryOperator0 = UnaryOperator.identity();
      Boolean boolean1 = MapUtils.getBoolean((Map<? super Boolean, ?>) dualTreeBidiMap0, boolean0, (Function<Boolean, Boolean>) unaryOperator0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      LRUMap<LinkedList<HijrahEra>, HijrahEra> lRUMap0 = new LRUMap<LinkedList<HijrahEra>, HijrahEra>(32);
      LinkedList<HijrahEra> linkedList0 = new LinkedList<HijrahEra>();
      Boolean boolean1 = MapUtils.getBoolean((Map<? super LinkedList<HijrahEra>, ?>) lRUMap0, linkedList0, boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Comparator<IOCase> comparator0 = (Comparator<IOCase>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(org.apache.commons.io.IOCase.class) , any(org.apache.commons.io.IOCase.class));
      Comparator<Byte> comparator1 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(any(java.lang.Byte.class) , any(java.lang.Byte.class));
      DualTreeBidiMap<IOCase, Byte> dualTreeBidiMap0 = new DualTreeBidiMap<IOCase, Byte>(comparator0, comparator1);
      IOCase iOCase0 = IOCase.SYSTEM;
      Byte byte0 = new Byte((byte)0);
      dualTreeBidiMap0.put(iOCase0, byte0);
      SortedMap<IOCase, Byte> sortedMap0 = MapUtils.fixedSizeSortedMap((SortedMap<IOCase, Byte>) dualTreeBidiMap0);
      assertEquals(1, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      DefaultedMap<Byte, Byte> defaultedMap0 = new DefaultedMap<Byte, Byte>(byte0);
      IterableMap<Byte, Byte> iterableMap0 = MapUtils.fixedSizeMap((Map<Byte, Byte>) defaultedMap0);
      assertEquals(0, iterableMap0.size());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CompositeMap<Object, Object> compositeMap0 = new CompositeMap<Object, Object>();
      Map<Object, Object> map0 = MapUtils.emptyIfNull((Map<Object, Object>) compositeMap0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtils.unmodifiableSortedMap((SortedMap<Predicate<Boolean>, ? extends Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtils.orderedMap((Map<StandardCopyOption, Predicate<Predicate>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StaticBucketMap<MinguoEra, MinguoEra> staticBucketMap0 = new StaticBucketMap<MinguoEra, MinguoEra>((-2524));
      DualTreeBidiMap<Object, Object> dualTreeBidiMap0 = new DualTreeBidiMap<Object, Object>(staticBucketMap0);
      // Undeclared exception!
      try { 
        MapUtils.lazySortedMap((SortedMap<Object, Object>) dualTreeBidiMap0, (Factory<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // factory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtils.iterableMap((Map<Object, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Transformer<Object, Object> transformer0 = ExceptionTransformer.exceptionTransformer();
      DefaultedMap<Object, Object> defaultedMap0 = new DefaultedMap<Object, Object>(transformer0);
      MinguoEra minguoEra0 = MinguoEra.BEFORE_ROC;
      // Undeclared exception!
      try { 
        MapUtils.getString((Map<? super MinguoEra, ?>) defaultedMap0, minguoEra0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Transformer<Byte, Byte> transformer0 = ExceptionTransformer.exceptionTransformer();
      DefaultedMap<Byte, Byte> defaultedMap0 = new DefaultedMap<Byte, Byte>(transformer0);
      // Undeclared exception!
      try { 
        MapUtils.getShort((Map<? super Byte, ?>) defaultedMap0, byte0, (Function<Byte, Short>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      DualTreeBidiMap<Predicate<Byte>, Byte> dualTreeBidiMap0 = new DualTreeBidiMap<Predicate<Byte>, Byte>();
      SortedBidiMap<Predicate<Byte>, Object> sortedBidiMap0 = UnmodifiableSortedBidiMap.unmodifiableSortedBidiMap((SortedBidiMap<Predicate<Byte>, ?>) dualTreeBidiMap0);
      Predicate<Byte> predicate0 = UniquePredicate.uniquePredicate();
      // Undeclared exception!
      try { 
        MapUtils.getObject((Map<Predicate<Byte>, Object>) sortedBidiMap0, predicate0, (Object) byte0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Transformer<Locale.FilteringMode, Locale.FilteringMode> transformer0 = NOPTransformer.nopTransformer();
      TreeMap<Object, Object> treeMap0 = new TreeMap<Object, Object>();
      Class<Object> class0 = Object.class;
      InstantiateFactory<Object> instantiateFactory0 = new InstantiateFactory<Object>(class0);
      LazySortedMap<Object, Object> lazySortedMap0 = LazySortedMap.lazySortedMap((SortedMap<Object, Object>) treeMap0, (Factory<?>) instantiateFactory0);
      // Undeclared exception!
      try { 
        MapUtils.getLong((Map<? super Transformer<Locale.FilteringMode, Locale.FilteringMode>, ?>) lazySortedMap0, transformer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DualTreeBidiMap<LinkedList<Byte>, Charset> dualTreeBidiMap0 = new DualTreeBidiMap<LinkedList<Byte>, Charset>();
      FixedSizeSortedMap<LinkedList<Byte>, Charset> fixedSizeSortedMap0 = FixedSizeSortedMap.fixedSizeSortedMap((SortedMap<LinkedList<Byte>, Charset>) dualTreeBidiMap0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      // Undeclared exception!
      try { 
        MapUtils.getFloat((Map<? super LinkedList<Byte>, ?>) fixedSizeSortedMap0, linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DualTreeBidiMap<Byte, Byte> dualTreeBidiMap0 = new DualTreeBidiMap<Byte, Byte>();
      IterableSortedMap<Byte, Byte> iterableSortedMap0 = MapUtils.iterableSortedMap((SortedMap<Byte, Byte>) dualTreeBidiMap0);
      // Undeclared exception!
      try { 
        MapUtils.getByteValue((Map<? super Byte, ?>) iterableSortedMap0, (Byte) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StaticBucketMap<MinguoEra, MinguoEra> staticBucketMap0 = new StaticBucketMap<MinguoEra, MinguoEra>((-2524));
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Predicate<AbstractMap.SimpleImmutableEntry<Predicate<Object>, Object>> predicate1 = AndPredicate.andPredicate((Predicate<? super AbstractMap.SimpleImmutableEntry<Predicate<Object>, Object>>) predicate0, (Predicate<? super AbstractMap.SimpleImmutableEntry<Predicate<Object>, Object>>) predicate0);
      // Undeclared exception!
      try { 
        MapUtils.debugPrint((PrintStream) null, predicate1, staticBucketMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.MapUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LinkedMap<CharBuffer, Byte> linkedMap0 = new LinkedMap<CharBuffer, Byte>(90);
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Byte byte0 = Byte.valueOf((byte)68);
      linkedMap0.put(charBuffer0, byte0);
      boolean boolean0 = MapUtils.isEmpty(linkedMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CompositeMap<Object, Object> compositeMap0 = new CompositeMap<Object, Object>();
      boolean boolean0 = MapUtils.isEmpty(compositeMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StaticBucketMap<MinguoEra, MinguoEra> staticBucketMap0 = new StaticBucketMap<MinguoEra, MinguoEra>((-1890));
      MinguoEra minguoEra0 = MinguoEra.ROC;
      String string0 = MapUtils.getString((Map<? super MinguoEra, ?>) staticBucketMap0, minguoEra0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CompositeMap<Object, Object> compositeMap0 = new CompositeMap<Object, Object>();
      Byte byte0 = new Byte((byte)84);
      Number number0 = MapUtils.getNumber((Map<? super Byte, ?>) compositeMap0, byte0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Number number0 = MapUtils.getNumber((Map<? super Byte, ?>) null, byte0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      DefaultedMap<Byte, Byte> defaultedMap0 = new DefaultedMap<Byte, Byte>(byte0);
      Map<?, ?> map0 = MapUtils.getMap((Map<? super Byte, ?>) defaultedMap0, byte0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      LinkedMap<Byte, Byte> linkedMap0 = new LinkedMap<Byte, Byte>();
      Float float0 = MapUtils.getFloat((Map<? super Byte, ?>) linkedMap0, byte0);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LinkedMap<Byte, Byte> linkedMap0 = new LinkedMap<Byte, Byte>();
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>(linkedMap0);
      Byte byte0 = MapUtils.getByte((Map<? super Object, ?>) linkedMap1, (Object) null);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashedMap<Object, Object> hashedMap0 = new HashedMap<Object, Object>();
      Boolean boolean0 = MapUtils.getBoolean((Map<? super Object, ?>) hashedMap0, (Object) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = MapUtils.size((Map<?, ?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashedMap<Object, Object> hashedMap0 = new HashedMap<Object, Object>();
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      MapUtils.safeAddToMap((Map<? super Predicate<Object>, Object>) hashedMap0, (Predicate<Object>) instanceofPredicate0, (Object) null);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashedMap<Object, Object> hashedMap0 = new HashedMap<Object, Object>();
      Class<Object> class0 = Object.class;
      Collection<Object> collection0 = hashedMap0.values();
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      MapUtils.safeAddToMap((Map<? super Predicate<Object>, Object>) hashedMap0, (Predicate<Object>) instanceofPredicate0, (Object) collection0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceIdentityMap<Byte, AbstractMap.SimpleImmutableEntry<Integer, Byte>> referenceIdentityMap0 = new ReferenceIdentityMap<Byte, AbstractMap.SimpleImmutableEntry<Integer, Byte>>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, false);
      boolean boolean0 = MapUtils.isNotEmpty(referenceIdentityMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = MapUtils.isEmpty((Map<?, ?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StaticBucketMap<MinguoEra, MinguoEra> staticBucketMap0 = new StaticBucketMap<MinguoEra, MinguoEra>((-2524));
      DualHashBidiMap<MinguoEra, MinguoEra> dualHashBidiMap0 = new DualHashBidiMap<MinguoEra, MinguoEra>(staticBucketMap0);
      MinguoEra minguoEra0 = MinguoEra.ROC;
      dualHashBidiMap0.put(minguoEra0, minguoEra0);
      String string0 = MapUtils.getString((Map<? super MinguoEra, ?>) dualHashBidiMap0, minguoEra0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MinguoEra minguoEra0 = MinguoEra.ROC;
      String string0 = MapUtils.getString((Map<? super MinguoEra, ?>) null, minguoEra0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(any(java.lang.Byte.class) , any(java.lang.Byte.class));
      DualTreeBidiMap<Byte, Byte> dualTreeBidiMap0 = new DualTreeBidiMap<Byte, Byte>(comparator0, comparator0);
      Byte byte0 = new Byte((byte)0);
      dualTreeBidiMap0.put(byte0, byte0);
      Short short0 = MapUtils.getShort((Map<? super Byte, ?>) dualTreeBidiMap0, byte0, (Function<Byte, Short>) null);
      assertEquals((short)0, (short)short0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Flat3Map<Object, Transformer<Object, LinkedList<Object>>> flat3Map0 = new Flat3Map<Object, Transformer<Object, LinkedList<Object>>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) arrayDeque0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      IfTransformer<Object, LinkedList<Object>> ifTransformer0 = new IfTransformer<Object, LinkedList<Object>>(andPredicate0, (Transformer<? super Object, ? extends LinkedList<Object>>) null, (Transformer<? super Object, ? extends LinkedList<Object>>) null);
      Transformer<Object, LinkedList<Object>> transformer0 = MapUtils.getObject((Map<Object, Transformer<Object, LinkedList<Object>>>) flat3Map0, (Object) linkedList0, (Transformer<Object, LinkedList<Object>>) ifTransformer0);
      assertNotNull(transformer0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceMap<Integer, Byte> referenceMap0 = new ReferenceMap<Integer, Byte>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 115, 115, true);
      Integer integer0 = new Integer(115);
      Byte byte0 = MapUtils.getObject((Map<? super Integer, Byte>) referenceMap0, integer0);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PassiveExpiringMap<HijrahEra, HijrahEra> passiveExpiringMap0 = new PassiveExpiringMap<HijrahEra, HijrahEra>();
      HijrahEra hijrahEra0 = HijrahEra.AH;
      passiveExpiringMap0.put(hijrahEra0, hijrahEra0);
      Short short0 = MapUtils.getShort((Map<? super HijrahEra, ?>) passiveExpiringMap0, hijrahEra0, (Short) null);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Transformer<Locale.FilteringMode, Locale.FilteringMode> transformer0 = NOPTransformer.nopTransformer();
      Long long0 = MapUtils.getLong((Map<? super Transformer<Locale.FilteringMode, Locale.FilteringMode>, ?>) null, transformer0);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-70));
      Map<?, ?> map0 = MapUtils.getMap((Map<? super Byte, ?>) null, byte0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      LinkedMap<Byte, Byte> linkedMap0 = new LinkedMap<Byte, Byte>();
      byte[] byteArray0 = new byte[9];
      linkedMap0.put(byte0, (Byte) byteArray0[0]);
      Float float0 = MapUtils.getFloat((Map<? super Byte, ?>) linkedMap0, byte0);
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      DefaultedMap<Byte, Byte> defaultedMap0 = new DefaultedMap<Byte, Byte>(byte0);
      byte byte1 = MapUtils.getByteValue((Map<? super Byte, ?>) defaultedMap0, byte0);
      assertEquals((byte)1, byte1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      LRUMap<LinkedList<HijrahEra>, HijrahEra> lRUMap0 = new LRUMap<LinkedList<HijrahEra>, HijrahEra>(32);
      LinkedList<HijrahEra> linkedList0 = new LinkedList<HijrahEra>();
      HijrahEra hijrahEra0 = HijrahEra.AH;
      lRUMap0.put(linkedList0, hijrahEra0);
      Boolean boolean1 = MapUtils.getBoolean((Map<? super LinkedList<HijrahEra>, ?>) lRUMap0, linkedList0, boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ReferenceMap<Byte, Boolean> referenceMap0 = new ReferenceMap<Byte, Boolean>();
      Byte byte0 = new Byte((byte)0);
      Boolean boolean0 = Boolean.FALSE;
      Boolean boolean1 = referenceMap0.put(byte0, boolean0);
      Boolean boolean2 = MapUtils.getBoolean((Map<? super Byte, ?>) referenceMap0, byte0, boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DualHashBidiMap<Object, Object> dualHashBidiMap0 = new DualHashBidiMap<Object, Object>();
      IOCase iOCase0 = IOCase.SYSTEM;
      Long long0 = MapUtils.getLong((Map<? super IOCase, ?>) dualHashBidiMap0, iOCase0, (Function<IOCase, Long>) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Comparator<IOCase> comparator0 = (Comparator<IOCase>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any(org.apache.commons.io.IOCase.class) , any(org.apache.commons.io.IOCase.class));
      Comparator<Byte> comparator1 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(any(java.lang.Byte.class) , any(java.lang.Byte.class));
      DualTreeBidiMap<IOCase, Byte> dualTreeBidiMap0 = new DualTreeBidiMap<IOCase, Byte>(comparator0, comparator1);
      IOCase iOCase0 = IOCase.SYSTEM;
      Byte byte0 = new Byte((byte)0);
      dualTreeBidiMap0.put(iOCase0, byte0);
      Function<IOCase, Long> function0 = (Function<IOCase, Long>) mock(Function.class, new ViolatedAssumptionAnswer());
      Long long0 = MapUtils.getLong((Map<? super IOCase, ?>) dualTreeBidiMap0, iOCase0, function0);
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ReferenceIdentityMap<LinkedList<Byte>, Byte> referenceIdentityMap0 = new ReferenceIdentityMap<LinkedList<Byte>, Byte>();
      Flat3Map<LinkedList<Byte>, Byte> flat3Map0 = new Flat3Map<LinkedList<Byte>, Byte>(referenceIdentityMap0);
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Predicate<LinkedList<Byte>> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super LinkedList<Byte>>>) linkedHashSet0);
      Predicate<Byte>[] predicateArray0 = (Predicate<Byte>[]) Array.newInstance(Predicate.class, 2);
      OnePredicate<Byte> onePredicate0 = new OnePredicate<Byte>(predicateArray0);
      AndPredicate<Byte> andPredicate0 = new AndPredicate<Byte>(predicateArray0[0], onePredicate0);
      IterableMap<LinkedList<Byte>, Byte> iterableMap0 = MapUtils.predicatedMap((Map<LinkedList<Byte>, Byte>) flat3Map0, (Predicate<? super LinkedList<Byte>>) predicate0, (Predicate<? super Byte>) andPredicate0);
      assertTrue(iterableMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Object object0 = new Object();
      UnmodifiableMapEntry<Predicate<Object>, Object> unmodifiableMapEntry0 = new UnmodifiableMapEntry<Predicate<Object>, Object>((Predicate<Object>) null, object0);
      DefaultMapEntry<Predicate<Object>, Object> defaultMapEntry0 = new DefaultMapEntry<Predicate<Object>, Object>((Map.Entry<? extends Predicate<Object>, ?>) unmodifiableMapEntry0);
      SingletonMap<Predicate<Object>, Object> singletonMap0 = new SingletonMap<Predicate<Object>, Object>((KeyValue<Predicate<Object>, Object>) defaultMapEntry0);
      Map<Object, Predicate<Object>> map0 = MapUtils.invertMap((Map<Predicate<Object>, Object>) singletonMap0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      float float0 = MapUtils.getFloatValue((Map<? super Locale.FilteringMode, ?>) map0, locale_FilteringMode0, (float) 0);
      assertEquals(1, map0.size());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      UniquePredicate<Locale.FilteringMode> uniquePredicate0 = new UniquePredicate<Locale.FilteringMode>();
      float float0 = MapUtils.getFloatValue((Map<? super Predicate<Locale.FilteringMode>, ?>) null, (Predicate<Locale.FilteringMode>) uniquePredicate0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TreeMap<Object, Object> treeMap0 = new TreeMap<Object, Object>();
      Class<Object> class0 = Object.class;
      InstantiateFactory<Object> instantiateFactory0 = new InstantiateFactory<Object>(class0);
      SortedMap<Object, Object> sortedMap0 = MapUtils.lazySortedMap((SortedMap<Object, Object>) treeMap0, (Factory<?>) instantiateFactory0);
      assertEquals(0, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<Locale.FilteringMode, Locale.FilteringMode> dualTreeBidiMap0 = new DualTreeBidiMap<Locale.FilteringMode, Locale.FilteringMode>(comparator0, comparator0);
      OrderedBidiMap<Object, Object> orderedBidiMap0 = UnmodifiableOrderedBidiMap.unmodifiableOrderedBidiMap((OrderedBidiMap<?, ?>) dualTreeBidiMap0);
      CompositeMap.MapMutator<Object, Object> compositeMap_MapMutator0 = (CompositeMap.MapMutator<Object, Object>) mock(CompositeMap.MapMutator.class, new ViolatedAssumptionAnswer());
      CompositeMap<Object, Object> compositeMap0 = new CompositeMap<Object, Object>(orderedBidiMap0, orderedBidiMap0, compositeMap_MapMutator0);
      short short0 = MapUtils.getShortValue((Map<? super Object, ?>) compositeMap0, (Object) "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference", (short)3725);
      assertEquals((short)3725, short0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Predicate<TimeUnit>[] predicateArray0 = (Predicate<TimeUnit>[]) Array.newInstance(Predicate.class, 1);
      Boolean boolean0 = new Boolean("resourceBundle");
      ConstantTransformer<TimeUnit, Boolean> constantTransformer0 = new ConstantTransformer<TimeUnit, Boolean>(boolean0);
      TransformerPredicate<TimeUnit> transformerPredicate0 = new TransformerPredicate<TimeUnit>(constantTransformer0);
      NonePredicate<TimeUnit> nonePredicate0 = new NonePredicate<TimeUnit>(predicateArray0);
      // Undeclared exception!
      try { 
        MapUtils.predicatedSortedMap((SortedMap<TimeUnit, TimeUnit>) null, (Predicate<? super TimeUnit>) nonePredicate0, (Predicate<? super TimeUnit>) transformerPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Byte, Integer> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Byte, Integer>();
      PassiveExpiringMap<Byte, Integer> passiveExpiringMap0 = new PassiveExpiringMap<Byte, Integer>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      Byte byte0 = new Byte((byte)32);
      Function<Byte, Boolean> function0 = (Function<Byte, Boolean>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any(java.lang.Byte.class));
      Boolean boolean0 = MapUtils.getBoolean((Map<? super Byte, ?>) passiveExpiringMap0, byte0, function0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DualTreeBidiMap<Byte, Byte> dualTreeBidiMap0 = new DualTreeBidiMap<Byte, Byte>();
      SortedMap<Byte, Byte> sortedMap0 = MapUtils.unmodifiableSortedMap((SortedMap<Byte, ? extends Byte>) dualTreeBidiMap0);
      assertTrue(sortedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      CaseInsensitiveMap<Object, Object> caseInsensitiveMap0 = new CaseInsensitiveMap<Object, Object>(2301);
      Function<Locale.Category, Double> function0 = (Function<Locale.Category, Double>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any(java.util.Locale.Category.class));
      Double double0 = MapUtils.getDouble((Map<? super Locale.Category, ?>) caseInsensitiveMap0, locale_Category0, function0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashedMap<Object, Object> hashedMap0 = new HashedMap<Object, Object>(4);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Byte byte0 = new Byte((byte) (-21));
      Byte byte1 = MapUtils.getByte((Map<? super LinkedList<Object>, ?>) hashedMap0, linkedList0, byte0);
      assertEquals((byte) (-21), (byte)byte1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DualTreeBidiMap<Boolean, Boolean> dualTreeBidiMap0 = new DualTreeBidiMap<Boolean, Boolean>();
      Boolean boolean0 = Boolean.FALSE;
      double double0 = MapUtils.getDoubleValue((Map<? super Boolean, ?>) dualTreeBidiMap0, boolean0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TreeMap<ChronoLocalDate, ChronoLocalDate> treeMap0 = new TreeMap<ChronoLocalDate, ChronoLocalDate>();
      ListOrderedMap<ChronoLocalDate, ChronoLocalDate> listOrderedMap0 = ListOrderedMap.listOrderedMap((Map<ChronoLocalDate, ChronoLocalDate>) treeMap0);
      Vector<Transformer<ChronoLocalDate, ChronoLocalDate>> vector0 = new Vector<Transformer<ChronoLocalDate, ChronoLocalDate>>();
      Transformer<ChronoLocalDate, ChronoLocalDate> transformer0 = ChainedTransformer.chainedTransformer((Collection<? extends Transformer<? super ChronoLocalDate, ? extends ChronoLocalDate>>) vector0);
      IterableMap<ChronoLocalDate, ChronoLocalDate> iterableMap0 = MapUtils.transformedMap((Map<ChronoLocalDate, ChronoLocalDate>) listOrderedMap0, (Transformer<? super ChronoLocalDate, ? extends ChronoLocalDate>) transformer0, (Transformer<? super ChronoLocalDate, ? extends ChronoLocalDate>) transformer0);
      assertTrue(iterableMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DualTreeBidiMap<Boolean, Boolean> dualTreeBidiMap0 = new DualTreeBidiMap<Boolean, Boolean>();
      Boolean boolean0 = Boolean.FALSE;
      int int0 = MapUtils.getIntValue((Map<? super Boolean, ?>) dualTreeBidiMap0, boolean0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Object object0 = new Object();
      UnmodifiableMapEntry<Predicate<Object>, Object> unmodifiableMapEntry0 = new UnmodifiableMapEntry<Predicate<Object>, Object>((Predicate<Object>) null, object0);
      DefaultMapEntry<Predicate<Object>, Object> defaultMapEntry0 = new DefaultMapEntry<Predicate<Object>, Object>((Map.Entry<? extends Predicate<Object>, ?>) unmodifiableMapEntry0);
      SingletonMap<Predicate<Object>, Object> singletonMap0 = new SingletonMap<Predicate<Object>, Object>((KeyValue<Predicate<Object>, Object>) defaultMapEntry0);
      Map<Object, Predicate<Object>> map0 = MapUtils.invertMap((Map<Predicate<Object>, Object>) singletonMap0);
      Function<Predicate<Object>, Byte> function0 = (Function<Predicate<Object>, Byte>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any(org.apache.commons.collections4.Predicate.class));
      byte byte0 = MapUtils.getByteValue((Map<? super Predicate<Object>, ?>) map0, (Predicate<Object>) null, function0);
      assertEquals((byte)0, byte0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Flat3Map<Object, Object> flat3Map0 = new Flat3Map<Object, Object>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      Function<Predicate<Object>, Long> function0 = (Function<Predicate<Object>, Long>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any(org.apache.commons.collections4.Predicate.class));
      long long0 = MapUtils.getLongValue((Map<? super Predicate<Object>, ?>) flat3Map0, (Predicate<Object>) anyPredicate0, function0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DualTreeBidiMap<Boolean, Boolean> dualTreeBidiMap0 = new DualTreeBidiMap<Boolean, Boolean>();
      Boolean boolean0 = Boolean.FALSE;
      String string0 = MapUtils.getString((Map<? super Boolean, ?>) dualTreeBidiMap0, boolean0, "d");
      assertEquals("d", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashedMap<Object, Object> hashedMap0 = new HashedMap<Object, Object>();
      Short short0 = new Short((short) (-57));
      Function<Object, Short> function0 = (Function<Object, Short>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(short0).when(function0).apply(any());
      short short1 = MapUtils.getShortValue((Map<? super Object, ?>) hashedMap0, (Object) null, function0);
      assertEquals((short) (-57), short1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TreeMap<Byte, Byte> treeMap0 = new TreeMap<Byte, Byte>();
      Transformer<Byte, Byte> transformer0 = InvokerTransformer.invokerTransformer("Dr%PkP7LY");
      SortedMap<Byte, Byte> sortedMap0 = MapUtils.transformedSortedMap((SortedMap<Byte, Byte>) treeMap0, (Transformer<? super Byte, ? extends Byte>) transformer0, (Transformer<? super Byte, ? extends Byte>) transformer0);
      assertTrue(sortedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StandardCopyOption standardCopyOption0 = StandardCopyOption.ATOMIC_MOVE;
      Float float0 = MapUtils.getFloat((Map<? super StandardCopyOption, ?>) null, standardCopyOption0, (Float) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LRUMap<Locale.FilteringMode, Locale.FilteringMode> lRUMap0 = new LRUMap<Locale.FilteringMode, Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      short short0 = MapUtils.getShortValue((Map<? super Locale.FilteringMode, ?>) lRUMap0, locale_FilteringMode0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Comparator<Double> comparator0 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Double> comparator1 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<Double, Double> dualTreeBidiMap0 = new DualTreeBidiMap<Double, Double>(comparator0, comparator1);
      Properties properties0 = MapUtils.toProperties((Map<Double, Double>) dualTreeBidiMap0);
      Long long0 = new Long((-1514L));
      // Undeclared exception!
      try { 
        MapUtils.getLong((Map<? super Double, ?>) properties0, (Double) null, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DualTreeBidiMap<LinkedList<Integer>, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<LinkedList<Integer>, Integer>();
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>((Integer) null);
      LazyMap<LinkedList<Integer>, Integer> lazyMap0 = LazyMap.lazyMap((Map<LinkedList<Integer>, Integer>) dualTreeBidiMap0, (Factory<? extends Integer>) constantFactory0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Function<LinkedList<Integer>, Byte> function0 = (Function<LinkedList<Integer>, Byte>) mock(Function.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        MapUtils.getByte((Map<? super LinkedList<Integer>, ?>) lazyMap0, linkedList0, function0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) arrayDeque0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      IfTransformer<Object, LinkedList<Object>> ifTransformer0 = new IfTransformer<Object, LinkedList<Object>>(andPredicate0, (Transformer<? super Object, ? extends LinkedList<Object>>) null, (Transformer<? super Object, ? extends LinkedList<Object>>) null);
      DualTreeBidiMap<Object, Object> dualTreeBidiMap0 = new DualTreeBidiMap<Object, Object>();
      TransformedSortedMap<Object, Object> transformedSortedMap0 = TransformedSortedMap.transformingSortedMap((SortedMap<Object, Object>) dualTreeBidiMap0, (Transformer<? super Object, ?>) ifTransformer0, (Transformer<? super Object, ?>) null);
      Function<Predicate<Object>, Double> function0 = (Function<Predicate<Object>, Double>) mock(Function.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        MapUtils.getDoubleValue((Map<? super Predicate<Object>, ?>) transformedSortedMap0, (Predicate<Object>) andPredicate0, function0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      LinkedMap<Byte, Byte> linkedMap0 = new LinkedMap<Byte, Byte>();
      byte byte1 = MapUtils.getByteValue((Map<? super Byte, ?>) linkedMap0, byte0);
      assertEquals((byte)0, byte1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ReferenceMap<Byte, Boolean> referenceMap0 = new ReferenceMap<Byte, Boolean>();
      Byte byte0 = new Byte((byte)0);
      long long0 = MapUtils.getLongValue((Map<? super Byte, ?>) referenceMap0, byte0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      DualHashBidiMap<Object, Object> dualHashBidiMap0 = new DualHashBidiMap<Object, Object>();
      double double0 = MapUtils.getDoubleValue((Map<? super Object, ?>) dualHashBidiMap0, (Object) boolean0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Byte, Integer> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Byte, Integer>();
      PassiveExpiringMap<Byte, Integer> passiveExpiringMap0 = new PassiveExpiringMap<Byte, Integer>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      Byte byte0 = new Byte((byte)32);
      Function<Byte, Number> function0 = (Function<Byte, Number>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any(java.lang.Byte.class));
      Number number0 = MapUtils.getNumber((Map<? super Byte, ?>) passiveExpiringMap0, byte0, function0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantTransformer<Object, LinkedList<Object>> constantTransformer0 = new ConstantTransformer<Object, LinkedList<Object>>(linkedList0);
      Integer integer0 = new Integer(780);
      Integer integer1 = MapUtils.getInteger((Map<? super Object, ?>) null, (Object) constantTransformer0, integer0);
      assertEquals(780, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      DefaultedMap<Byte, Byte> defaultedMap0 = new DefaultedMap<Byte, Byte>(byte0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.collections4.MapUtils");
      MapUtils.debugPrint(mockPrintStream0, byte0, defaultedMap0);
      assertTrue(defaultedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DualTreeBidiMap<Predicate<Locale.FilteringMode>, Locale.FilteringMode> dualTreeBidiMap0 = new DualTreeBidiMap<Predicate<Locale.FilteringMode>, Locale.FilteringMode>();
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Object, Object> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Object, Object>();
      PassiveExpiringMap<Object, Object> passiveExpiringMap0 = new PassiveExpiringMap<Object, Object>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(notPredicate0);
      Map<?, ?> map0 = MapUtils.getMap((Map<? super Object, ?>) passiveExpiringMap0, (Object) equalPredicate0, (Map<?, ?>) dualTreeBidiMap0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtils.synchronizedSortedMap((SortedMap<LinkedList<Integer>, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtils.fixedSizeMap((Map<LinkedList<LinkedList>, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LRUMap<TimeUnit, TimeUnit> lRUMap0 = new LRUMap<TimeUnit, TimeUnit>(155);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      Function<TimeUnit, String> function0 = (Function<TimeUnit, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any(java.util.concurrent.TimeUnit.class));
      String string0 = MapUtils.getString((Map<? super TimeUnit, ?>) lRUMap0, timeUnit0, function0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Comparator<Double> comparator0 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Double> comparator1 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<Double, Double> dualTreeBidiMap0 = new DualTreeBidiMap<Double, Double>(comparator0, comparator1);
      Double double0 = new Double(0.0);
      Double double1 = MapUtils.getDouble((Map<? super Double, ?>) dualTreeBidiMap0, double0, double0);
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Byte byte0 = new Byte((byte)54);
      Flat3Map<Object, Object> flat3Map0 = new Flat3Map<Object, Object>();
      byte byte1 = MapUtils.getByteValue((Map<? super Object, ?>) flat3Map0, (Object) byte0, (byte)2);
      assertEquals((byte)2, byte1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DualHashBidiMap<Object, Object> dualHashBidiMap0 = new DualHashBidiMap<Object, Object>();
      Class<Object> class0 = Object.class;
      InstantiateFactory<Object> instantiateFactory0 = new InstantiateFactory<Object>(class0);
      IterableMap<Object, Object> iterableMap0 = MapUtils.lazyMap((Map<Object, Object>) dualHashBidiMap0, (Factory<?>) instantiateFactory0);
      assertTrue(iterableMap0.isEmpty());
  }
}
