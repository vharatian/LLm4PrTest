/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 12:39:32 GMT 2025
 */

package org.apache.commons.collections4.list;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Predicate;
import org.apache.commons.collections4.list.GrowthList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class GrowthList_ESTest extends GrowthList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GrowthList<Integer> growthList0 = new GrowthList<Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GrowthList<Object> growthList1 = new GrowthList<Object>(linkedList0);
      growthList1.set(0, linkedList0);
      growthList1.set(1046, growthList0);
      assertEquals(1047, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GrowthList<Integer> growthList0 = new GrowthList<Integer>(1503);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) growthList0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GrowthList<Object> growthList1 = GrowthList.growthList((List<Object>) linkedList0);
      growthList1.set(0, predicate0);
      boolean boolean0 = growthList1.addAll(1503, (Collection<?>) linkedList0);
      assertEquals(3006, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(266);
      GrowthList<Integer> growthList0 = new GrowthList<Integer>();
      growthList0.add(integer0);
      growthList0.add(266, integer0);
      assertTrue(growthList0.contains(integer0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GrowthList<Integer> growthList0 = new GrowthList<Integer>();
      Iterator<Integer> iterator0 = growthList0.iterator();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GrowthList<Object> growthList1 = new GrowthList<Object>(linkedList0);
      growthList1.set(0, linkedList0);
      growthList1.set(0, iterator0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GrowthList<Object> growthList0 = GrowthList.growthList((List<Object>) linkedList0);
      // Undeclared exception!
      try { 
        growthList0.set((-1582), linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1582, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GrowthList<Integer> growthList0 = new GrowthList<Integer>();
      Integer integer0 = new Integer((-3305));
      // Undeclared exception!
      try { 
        growthList0.set((-3305), integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        GrowthList.growthList((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GrowthList<Integer> growthList0 = new GrowthList<Integer>(0);
      List<Integer> list0 = growthList0.subList(0, 0);
      growthList0.addAll((Collection<? extends Integer>) growthList0);
      // Undeclared exception!
      try { 
        growthList0.addAll(0, (Collection<? extends Integer>) list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GrowthList<Object> growthList0 = new GrowthList<Object>(1655);
      // Undeclared exception!
      try { 
        growthList0.addAll(1655, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GrowthList<Integer> growthList0 = new GrowthList<Integer>(0);
      List<Integer> list0 = growthList0.subList(0, 0);
      growthList0.addAll((Collection<? extends Integer>) growthList0);
      Integer integer0 = new Integer(0);
      GrowthList<Integer> growthList1 = new GrowthList<Integer>(list0);
      // Undeclared exception!
      try { 
        growthList1.add(0, integer0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GrowthList<Object> growthList0 = new GrowthList<Object>();
      // Undeclared exception!
      try { 
        growthList0.add((-247), (Object) growthList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -247, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GrowthList<Integer> growthList0 = null;
      try {
        growthList0 = new GrowthList<Integer>((List<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GrowthList<Object> growthList0 = null;
      try {
        growthList0 = new GrowthList<Object>((-3351));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -3351
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GrowthList<Integer> growthList0 = new GrowthList<Integer>();
      Integer integer0 = new Integer(0);
      growthList0.add(0, integer0);
      assertTrue(growthList0.contains(integer0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GrowthList<Integer> growthList0 = new GrowthList<Integer>();
      GrowthList<Integer> growthList1 = new GrowthList<Integer>();
      boolean boolean0 = growthList0.addAll(130, (Collection<? extends Integer>) growthList1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GrowthList<Integer> growthList0 = new GrowthList<Integer>();
      boolean boolean0 = growthList0.addAll(0, (Collection<? extends Integer>) growthList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GrowthList<Integer> growthList0 = new GrowthList<Integer>();
      // Undeclared exception!
      try { 
        growthList0.addAll((-3), (Collection<? extends Integer>) growthList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
