/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 12:41:50 GMT 2025
 */

package org.apache.commons.collections4.list;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Set;
import java.util.function.Predicate;
import org.apache.commons.collections4.list.SetUniqueList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SetUniqueList_ESTest extends SetUniqueList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1));
      linkedList0.add(integer0);
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList((List<Integer>) linkedList0);
      setUniqueList0.add((Integer) null);
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      Set<Integer> set0 = setUniqueList0.createSetBasedOnList(hashSet0, setUniqueList0);
      boolean boolean0 = setUniqueList0.removeAll(set0);
      assertFalse(linkedList0.contains((-1)));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(31);
      linkedList0.add((Object) linkedHashSet0);
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      setUniqueList0.set(0, linkedHashSet0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      ListIterator<Integer> listIterator0 = (ListIterator<Integer>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      SetUniqueList.SetListListIterator<Integer> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<Integer>(listIterator0, hashSet0);
      SetUniqueList.SetListListIterator<Integer> setUniqueList_SetListListIterator1 = new SetUniqueList.SetListListIterator<Integer>(setUniqueList_SetListListIterator0, hashSet0);
      setUniqueList_SetListListIterator1.remove();
      assertFalse(setUniqueList_SetListListIterator1.hasNext());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      ListIterator<Object> listIterator0 = setUniqueList0.listIterator();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      SetUniqueList.SetListListIterator<Object> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<Object>(listIterator0, linkedHashSet0);
      // Undeclared exception!
      try { 
        setUniqueList_SetListListIterator0.set(setUniqueList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ListIterator does not support set
         //
         verifyException("org.apache.commons.collections4.list.SetUniqueList$SetListListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      ListIterator<Integer> listIterator0 = (ListIterator<Integer>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(listIterator0).next();
      SetUniqueList.SetListListIterator<Integer> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<Integer>(listIterator0, linkedHashSet0);
      Integer integer0 = setUniqueList_SetListListIterator0.next();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ListIterator<LinkedHashSet<Integer>> listIterator0 = (ListIterator<LinkedHashSet<Integer>>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(listIterator0).previous();
      HashSet<LinkedHashSet<Integer>> hashSet0 = new HashSet<LinkedHashSet<Integer>>();
      SetUniqueList.SetListListIterator<LinkedHashSet<Integer>> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<LinkedHashSet<Integer>>(listIterator0, hashSet0);
      LinkedHashSet<Integer> linkedHashSet0 = setUniqueList_SetListListIterator0.previous();
      assertNull(linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList((List<Integer>) linkedList0);
      Integer integer0 = new Integer(225);
      boolean boolean0 = setUniqueList0.add(integer0);
      assertTrue(boolean0);
      
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) integer0);
      boolean boolean1 = setUniqueList0.removeIf(predicate0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      SetUniqueList<Integer> setUniqueList0 = new SetUniqueList<Integer>(linkedList0, linkedHashSet0);
      Integer integer0 = setUniqueList0.remove(0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<LinkedHashSet<Object>> linkedList0 = new LinkedList<LinkedHashSet<Object>>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedList0.add(linkedHashSet0);
      SetUniqueList<LinkedHashSet<Object>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedHashSet<Object>>) linkedList0);
      LinkedHashSet<Object> linkedHashSet1 = setUniqueList0.remove(0);
      assertSame(linkedHashSet1, linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      SetUniqueList<Integer> setUniqueList0 = new SetUniqueList<Integer>(linkedList0, linkedHashSet0);
      ListIterator<Integer> listIterator0 = setUniqueList0.listIterator(1);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      SetUniqueList<Integer> setUniqueList0 = new SetUniqueList<Integer>(linkedList0, linkedHashSet0);
      linkedList0.add((Integer) null);
      ListIterator<Integer> listIterator0 = setUniqueList0.listIterator(0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      Integer integer0 = new Integer(588);
      linkedList0.add((Object) integer0);
      ListIterator<Object> listIterator0 = setUniqueList0.listIterator();
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      Iterator<Object> iterator0 = setUniqueList0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      SetUniqueList<Integer> setUniqueList0 = new SetUniqueList<Integer>(linkedList0, linkedHashSet0);
      boolean boolean0 = linkedList0.add((Integer) null);
      boolean boolean1 = setUniqueList0.addAll((Collection<? extends Integer>) linkedList0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      boolean boolean0 = setUniqueList0.addAll(0, (Collection<?>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.subList(0, 1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList((List<Integer>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.subList(3041, 3041);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 3041
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList((List<Integer>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.subList(1756, (-2146453677));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1756) > toIndex(-2146453677)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      SetUniqueList<Integer> setUniqueList0 = new SetUniqueList<Integer>(linkedList0, hashSet0);
      List<Integer> list0 = setUniqueList0.subList(0, 0);
      Integer integer0 = new Integer(265);
      setUniqueList0.add(integer0);
      // Undeclared exception!
      try { 
        SetUniqueList.setUniqueList(list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      LinkedList<LinkedHashSet<Object>> linkedList0 = new LinkedList<LinkedHashSet<Object>>();
      linkedList0.add(linkedHashSet0);
      SetUniqueList<LinkedHashSet<Object>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedHashSet<Object>>) linkedList0);
      Set<LinkedHashSet<Object>> set0 = setUniqueList0.asSet();
      SetUniqueList<LinkedHashSet<Object>> setUniqueList1 = new SetUniqueList<LinkedHashSet<Object>>(linkedList0, set0);
      // Undeclared exception!
      try { 
        SetUniqueList.setUniqueList((List<LinkedHashSet<Object>>) setUniqueList1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.UnmodifiableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.add((Object) linkedList0);
      // Undeclared exception!
      try { 
        SetUniqueList.setUniqueList((List<Object>) linkedList1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUniqueList.setUniqueList((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // list
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList((List<Integer>) linkedList0);
      List<Integer> list0 = setUniqueList0.subList(0, 0);
      Integer integer0 = new Integer((-2146206142));
      linkedList0.add(integer0);
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      SetUniqueList<Integer> setUniqueList1 = new SetUniqueList<Integer>(list0, hashSet0);
      // Undeclared exception!
      try { 
        setUniqueList1.set((-1), integer0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList((List<Integer>) linkedList0);
      setUniqueList0.add((Integer) null);
      Integer integer0 = new Integer(1973);
      Set<Integer> set0 = setUniqueList0.asSet();
      SetUniqueList<Integer> setUniqueList1 = new SetUniqueList<Integer>(setUniqueList0, set0);
      // Undeclared exception!
      try { 
        setUniqueList1.set(0, integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.UnmodifiableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.set(0, linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.set((-1), linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      Set<Object> set0 = setUniqueList0.asSet();
      SetUniqueList<Object> setUniqueList1 = new SetUniqueList<Object>(setUniqueList0, set0);
      // Undeclared exception!
      try { 
        setUniqueList1.retainAll(setUniqueList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.UnmodifiableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      setUniqueList0.add((Object) linkedList0);
      Set<Object> set0 = setUniqueList0.asSet();
      // Undeclared exception!
      try { 
        setUniqueList0.retainAll(set0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<LinkedHashSet<Object>> linkedList0 = new LinkedList<LinkedHashSet<Object>>();
      SetUniqueList<LinkedHashSet<Object>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedHashSet<Object>>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList((List<Integer>) linkedList0);
      Set<Integer> set0 = setUniqueList0.asSet();
      SetUniqueList<Integer> setUniqueList1 = new SetUniqueList<Integer>(setUniqueList0, set0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) set0);
      // Undeclared exception!
      try { 
        setUniqueList1.removeIf(predicate0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.UnmodifiableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList((List<Integer>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.removeIf((Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(2151);
      linkedList0.add(integer0);
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList((List<Integer>) linkedList0);
      linkedList0.add((Integer) null);
      setUniqueList0.add((Integer) null);
      // Undeclared exception!
      try { 
        setUniqueList0.removeAll(linkedList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList((List<Integer>) linkedList0);
      setUniqueList0.add((Integer) null);
      Set<Integer> set0 = setUniqueList0.asSet();
      SetUniqueList<Integer> setUniqueList1 = new SetUniqueList<Integer>(setUniqueList0, set0);
      // Undeclared exception!
      try { 
        setUniqueList1.removeAll(linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.UnmodifiableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      setUniqueList0.add((Object) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.removeAll(linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList((List<Integer>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.SetUniqueList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<LinkedHashSet<Object>> linkedList0 = new LinkedList<LinkedHashSet<Object>>();
      SetUniqueList<LinkedHashSet<Object>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedHashSet<Object>>) linkedList0);
      Set<LinkedHashSet<Object>> set0 = setUniqueList0.asSet();
      SetUniqueList<LinkedHashSet<Object>> setUniqueList1 = new SetUniqueList<LinkedHashSet<Object>>(setUniqueList0, set0);
      // Undeclared exception!
      try { 
        setUniqueList1.remove((Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.UnmodifiableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.remove((Object) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList((List<Integer>) linkedList0);
      List<Integer> list0 = setUniqueList0.subList(0, 0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      SetUniqueList<Integer> setUniqueList1 = new SetUniqueList<Integer>(list0, linkedHashSet0);
      // Undeclared exception!
      try { 
        setUniqueList1.remove(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList((List<Integer>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.listIterator(2147483645);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483645, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      Set<Object> set0 = setUniqueList0.asSet();
      setUniqueList0.add((Object) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.createSetBasedOnList(set0, linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList((List<Integer>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.createSetBasedOnList((Set<Integer>) null, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.SetUniqueList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.containsAll(linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<LinkedHashSet<Integer>> linkedList0 = new LinkedList<LinkedHashSet<Integer>>();
      SetUniqueList<LinkedHashSet<Integer>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedHashSet<Integer>>) linkedList0);
      Set<LinkedHashSet<Integer>> set0 = setUniqueList0.asSet();
      SetUniqueList<LinkedHashSet<Integer>> setUniqueList1 = new SetUniqueList<LinkedHashSet<Integer>>(linkedList0, set0);
      // Undeclared exception!
      try { 
        setUniqueList1.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.UnmodifiableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList((List<Integer>) linkedList0);
      setUniqueList0.add((Integer) null);
      Set<Integer> set0 = setUniqueList0.asSet();
      SetUniqueList<Integer> setUniqueList1 = new SetUniqueList<Integer>(setUniqueList0, set0);
      // Undeclared exception!
      try { 
        setUniqueList1.addAll((Collection<? extends Integer>) linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.UnmodifiableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      linkedList0.offerLast(setUniqueList0);
      // Undeclared exception!
      try { 
        setUniqueList0.addAll((Collection<?>) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList((List<Integer>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.addAll((Collection<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.SetUniqueList", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      Set<Object> set0 = setUniqueList0.asSet();
      SetUniqueList<Object> setUniqueList1 = new SetUniqueList<Object>(linkedList0, set0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      ListIterator<Integer> listIterator0 = linkedList1.listIterator(0);
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      SetUniqueList.SetListListIterator<Integer> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<Integer>(listIterator0, hashSet0);
      Integer integer0 = new Integer(0);
      setUniqueList_SetListListIterator0.add(integer0);
      // Undeclared exception!
      try { 
        setUniqueList1.addAll(0, (Collection<?>) hashSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.UnmodifiableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.addAll((-2145803298), (Collection<?>) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.addAll(0, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.SetUniqueList", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList((List<Integer>) linkedList0);
      List<Integer> list0 = setUniqueList0.subList(0, 0);
      SetUniqueList<Integer> setUniqueList1 = SetUniqueList.setUniqueList(list0);
      setUniqueList0.add((Integer) null);
      Integer integer0 = new Integer((-4949));
      // Undeclared exception!
      try { 
        setUniqueList1.add(integer0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      Set<Object> set0 = setUniqueList0.asSet();
      SetUniqueList<Object> setUniqueList1 = new SetUniqueList<Object>(linkedList0, set0);
      // Undeclared exception!
      try { 
        setUniqueList1.add((Object) setUniqueList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.UnmodifiableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      linkedList0.add((Object) setUniqueList0);
      // Undeclared exception!
      try { 
        setUniqueList0.add((Object) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      List<Integer> list0 = linkedList0.subList(0, 0);
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList(list0);
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      SetUniqueList.SetListListIterator<Integer> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<Integer>(listIterator0, linkedHashSet0);
      Integer integer0 = new Integer(0);
      setUniqueList_SetListListIterator0.add(integer0);
      // Undeclared exception!
      try { 
        setUniqueList0.add(0, integer0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LinkedList<LinkedHashSet<Integer>> linkedList0 = new LinkedList<LinkedHashSet<Integer>>();
      SetUniqueList<LinkedHashSet<Integer>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedHashSet<Integer>>) linkedList0);
      Set<LinkedHashSet<Integer>> set0 = setUniqueList0.asSet();
      SetUniqueList<LinkedHashSet<Integer>> setUniqueList1 = new SetUniqueList<LinkedHashSet<Integer>>(linkedList0, set0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      // Undeclared exception!
      try { 
        setUniqueList1.add((-1), linkedHashSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.UnmodifiableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      linkedList0.add((Object) setUniqueList0);
      // Undeclared exception!
      try { 
        setUniqueList0.add(5266, (Object) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList((List<Integer>) linkedList0);
      Integer integer0 = new Integer(1581);
      // Undeclared exception!
      try { 
        setUniqueList0.add(1581, integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1581, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SetUniqueList<Integer> setUniqueList0 = null;
      try {
        setUniqueList0 = new SetUniqueList<Integer>(linkedList0, (Set<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // set
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList((List<Integer>) linkedList0);
      boolean boolean0 = setUniqueList0.contains(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedList0.add((Object) linkedHashSet0);
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      boolean boolean0 = setUniqueList0.remove((Object) linkedHashSet0);
      assertEquals(0, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList((List<Integer>) linkedList0);
      boolean boolean0 = setUniqueList0.remove((Object) setUniqueList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      SetUniqueList<Integer> setUniqueList0 = new SetUniqueList<Integer>(linkedList0, linkedHashSet0);
      SetUniqueList.setUniqueList((List<Integer>) setUniqueList0);
      // Undeclared exception!
      try { 
        setUniqueList0.addAll(853, (Collection<? extends Integer>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 853, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      SetUniqueList<Integer> setUniqueList0 = new SetUniqueList<Integer>(linkedList0, linkedHashSet0);
      boolean boolean0 = setUniqueList0.add(integer0);
      assertTrue(boolean0);
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList1 = SetUniqueList.setUniqueList((List<Object>) linkedList1);
      boolean boolean1 = setUniqueList1.addAll(0, (Collection<?>) setUniqueList0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      SetUniqueList<Integer> setUniqueList0 = new SetUniqueList<Integer>(linkedList0, linkedHashSet0);
      SetUniqueList<Integer> setUniqueList1 = SetUniqueList.setUniqueList((List<Integer>) setUniqueList0);
      setUniqueList1.add(0, (Integer) null);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1));
      linkedList0.add(integer0);
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList((List<Integer>) linkedList0);
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      Set<Integer> set0 = setUniqueList0.createSetBasedOnList(hashSet0, setUniqueList0);
      SetUniqueList.SetListListIterator<Integer> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<Integer>(listIterator0, set0);
      setUniqueList_SetListListIterator0.add(integer0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LinkedList<LinkedHashSet<Integer>> linkedList0 = new LinkedList<LinkedHashSet<Integer>>();
      SetUniqueList<LinkedHashSet<Integer>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedHashSet<Integer>>) linkedList0);
      boolean boolean0 = setUniqueList0.containsAll(linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.add((Object) linkedList0);
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList((List<Integer>) linkedList0);
      boolean boolean0 = setUniqueList0.containsAll(linkedList1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LinkedList<LinkedHashSet<Object>> linkedList0 = new LinkedList<LinkedHashSet<Object>>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedList0.add(linkedHashSet0);
      SetUniqueList<LinkedHashSet<Object>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedHashSet<Object>>) linkedList0);
      Object object0 = new Object();
      linkedHashSet0.add(object0);
      boolean boolean0 = setUniqueList0.retainAll(linkedHashSet0);
      assertFalse(linkedList0.contains(linkedHashSet0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<LinkedHashSet<Object>> linkedList1 = new LinkedList<LinkedHashSet<Object>>();
      SetUniqueList<LinkedHashSet<Object>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedHashSet<Object>>) linkedList1);
      boolean boolean0 = setUniqueList0.retainAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList((List<Integer>) linkedList0);
      LinkedList<LinkedHashSet<Object>> linkedList1 = new LinkedList<LinkedHashSet<Object>>();
      linkedList1.add((LinkedHashSet<Object>) null);
      SetUniqueList<LinkedHashSet<Object>> setUniqueList1 = SetUniqueList.setUniqueList((List<LinkedHashSet<Object>>) linkedList1);
      boolean boolean0 = setUniqueList1.retainAll(setUniqueList0);
      assertEquals(0, linkedList1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Integer integer0 = new Integer(0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add(integer0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      boolean boolean0 = setUniqueList0.removeAll(linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      LinkedList<LinkedHashSet<Object>> linkedList0 = new LinkedList<LinkedHashSet<Object>>();
      linkedList0.add((LinkedHashSet<Object>) null);
      SetUniqueList<LinkedHashSet<Object>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedHashSet<Object>>) linkedList0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(1);
      setUniqueList0.add(1, linkedHashSet0);
      setUniqueList0.set(1, (LinkedHashSet<Object>) null);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      LinkedList<LinkedHashSet<Object>> linkedList0 = new LinkedList<LinkedHashSet<Object>>();
      SetUniqueList<LinkedHashSet<Object>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedHashSet<Object>>) linkedList0);
      setUniqueList0.add(0, (LinkedHashSet<Object>) null);
      setUniqueList0.set(0, (LinkedHashSet<Object>) null);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      LinkedList<LinkedHashSet<Object>> linkedList0 = new LinkedList<LinkedHashSet<Object>>();
      SetUniqueList<LinkedHashSet<Object>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedHashSet<Object>>) linkedList0);
      setUniqueList0.add(0, (LinkedHashSet<Object>) null);
      boolean boolean0 = setUniqueList0.addAll((Collection<? extends LinkedHashSet<Object>>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList((List<Integer>) linkedList0);
      setUniqueList0.add((Integer) null);
      boolean boolean0 = setUniqueList0.add((Integer) null);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      ListIterator<Integer> listIterator0 = (ListIterator<Integer>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      SetUniqueList.SetListListIterator<Integer> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<Integer>(listIterator0, linkedHashSet0);
      SetUniqueList.SetListIterator<Integer> setUniqueList_SetListIterator0 = new SetUniqueList.SetListIterator<Integer>(setUniqueList_SetListListIterator0, linkedHashSet0);
      setUniqueList_SetListIterator0.remove();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      LinkedList<LinkedHashSet<Integer>> linkedList0 = new LinkedList<LinkedHashSet<Integer>>();
      SetUniqueList<LinkedHashSet<Integer>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedHashSet<Integer>>) linkedList0);
      setUniqueList0.clear();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      List<Object> list0 = setUniqueList0.subList(0, 0);
      Set<Object> set0 = setUniqueList0.asSet();
      SetUniqueList<Object> setUniqueList1 = new SetUniqueList<Object>(list0, set0);
      setUniqueList0.add((Object) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList1.listIterator(0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      Set<Object> set0 = setUniqueList0.asSet();
      Set<Object> set1 = setUniqueList0.createSetBasedOnList(set0, linkedList0);
      assertTrue(set1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList((List<Integer>) linkedList0);
      Integer integer0 = new Integer(225);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) integer0);
      boolean boolean0 = setUniqueList0.removeIf(predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList((List<Integer>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }
}
