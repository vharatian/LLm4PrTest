/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 12:33:35 GMT 2025
 */

package org.apache.commons.collections4.collection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Set;
import java.util.SortedSet;
import java.util.TreeSet;
import org.apache.commons.collections4.Bag;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.MultiSet;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.SortedBag;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.bag.CollectionBag;
import org.apache.commons.collections4.bag.CollectionSortedBag;
import org.apache.commons.collections4.bag.HashBag;
import org.apache.commons.collections4.bag.PredicatedBag;
import org.apache.commons.collections4.bag.PredicatedSortedBag;
import org.apache.commons.collections4.bag.SynchronizedBag;
import org.apache.commons.collections4.bag.SynchronizedSortedBag;
import org.apache.commons.collections4.bag.TransformedSortedBag;
import org.apache.commons.collections4.bag.TreeBag;
import org.apache.commons.collections4.collection.PredicatedCollection;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.multiset.HashMultiSet;
import org.apache.commons.collections4.multiset.PredicatedMultiSet;
import org.apache.commons.collections4.multiset.SynchronizedMultiSet;
import org.apache.commons.collections4.multiset.UnmodifiableMultiSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PredicatedCollection_ESTest extends PredicatedCollection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      HashMultiSet<InstanceofPredicate> hashMultiSet0 = new HashMultiSet<InstanceofPredicate>();
      PredicatedMultiSet<InstanceofPredicate> predicatedMultiSet0 = PredicatedMultiSet.predicatedMultiSet((MultiSet<InstanceofPredicate>) hashMultiSet0, (Predicate<? super InstanceofPredicate>) instanceofPredicate0);
      ((PredicatedCollection)predicatedMultiSet0).validate(instanceofPredicate0);
      assertFalse(hashMultiSet0.contains(instanceofPredicate0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      PredicatedCollection.Builder<Boolean> predicatedCollection_Builder0 = PredicatedCollection.builder((Predicate<? super Boolean>) instanceofPredicate0);
      LinkedHashSet<Boolean> linkedHashSet0 = new LinkedHashSet<Boolean>();
      Set<Boolean> set0 = predicatedCollection_Builder0.createPredicatedSet((Set<Boolean>) linkedHashSet0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PredicatedCollection.Builder<Boolean> predicatedCollection_Builder0 = PredicatedCollection.notNullBuilder();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Queue<Boolean> queue0 = predicatedCollection_Builder0.createPredicatedQueue((Queue<Boolean>) linkedList0);
      assertNotNull(queue0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      PredicatedCollection.Builder<Object> predicatedCollection_Builder0 = PredicatedCollection.builder((Predicate<? super Object>) predicate0);
      Queue<Object> queue0 = predicatedCollection_Builder0.createPredicatedQueue();
      HashMultiSet<Object> hashMultiSet0 = new HashMultiSet<Object>(queue0);
      SynchronizedMultiSet<Object> synchronizedMultiSet0 = SynchronizedMultiSet.synchronizedMultiSet((MultiSet<Object>) hashMultiSet0);
      MultiSet<Object> multiSet0 = predicatedCollection_Builder0.createPredicatedMultiSet((MultiSet<Object>) synchronizedMultiSet0);
      assertNotNull(multiSet0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      PredicatedCollection.Builder<NonePredicate<InstanceofPredicate>> predicatedCollection_Builder0 = new PredicatedCollection.Builder<NonePredicate<InstanceofPredicate>>(instanceofPredicate0);
      LinkedList<NonePredicate<InstanceofPredicate>> linkedList0 = new LinkedList<NonePredicate<InstanceofPredicate>>();
      List<NonePredicate<InstanceofPredicate>> list0 = predicatedCollection_Builder0.createPredicatedList((List<NonePredicate<InstanceofPredicate>>) linkedList0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      HashMultiSet<NonePredicate<Object>> hashMultiSet0 = new HashMultiSet<NonePredicate<Object>>();
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      hashMultiSet0.add(nonePredicate0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(instanceofPredicate0, defaultEquator0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(equalPredicate0);
      PredicatedCollection<NonePredicate<Object>> predicatedCollection0 = new PredicatedCollection<NonePredicate<Object>>(hashMultiSet0, notPredicate0);
      boolean boolean0 = predicatedCollection0.addAll(hashMultiSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate(object0, comparator0);
      PredicatedCollection.Builder<Object> predicatedCollection_Builder0 = PredicatedCollection.notNullBuilder();
      Bag<Object> bag0 = predicatedCollection_Builder0.createPredicatedBag();
      PredicatedBag<Object> predicatedBag0 = PredicatedBag.predicatedBag(bag0, (Predicate<? super Object>) predicate0);
      boolean boolean0 = predicatedBag0.add(predicatedCollection_Builder0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comparator<InstanceofPredicate> comparator0 = (Comparator<InstanceofPredicate>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any(org.apache.commons.collections4.functors.InstanceofPredicate.class) , any(org.apache.commons.collections4.functors.InstanceofPredicate.class));
      TreeBag<InstanceofPredicate> treeBag0 = new TreeBag<InstanceofPredicate>(comparator0);
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Transformer<InstanceofPredicate, InstanceofPredicate> transformer0 = ConstantTransformer.constantTransformer(instanceofPredicate0);
      TransformedSortedBag<InstanceofPredicate> transformedSortedBag0 = TransformedSortedBag.transformedSortedBag((SortedBag<InstanceofPredicate>) treeBag0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) transformer0);
      boolean boolean0 = transformedSortedBag0.add(instanceofPredicate0);
      PredicatedBag<InstanceofPredicate> predicatedBag0 = PredicatedBag.predicatedBag((Bag<InstanceofPredicate>) transformedSortedBag0, (Predicate<? super InstanceofPredicate>) instanceofPredicate0);
      boolean boolean1 = predicatedBag0.add(instanceofPredicate0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      PredicatedCollection<Object> predicatedCollection0 = PredicatedCollection.predicatedCollection((Collection<Object>) treeBag0, (Predicate<? super Object>) predicate0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        predicatedCollection0.validate(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PredicatedCollection.Builder<InstanceofPredicate> predicatedCollection_Builder0 = PredicatedCollection.notNullBuilder();
      HashBag<Object> hashBag0 = new HashBag<Object>();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      PredicatedCollection<Object> predicatedCollection0 = PredicatedCollection.predicatedCollection((Collection<Object>) hashBag0, (Predicate<? super Object>) predicate0);
      // Undeclared exception!
      try { 
        predicatedCollection0.validate(predicatedCollection_Builder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'org.apache.commons.collections4.collection.PredicatedCollection$Builder@1' - Predicate 'org.apache.commons.collections4.functors.FalsePredicate@5' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PredicatedCollection.Builder<Object> predicatedCollection_Builder0 = PredicatedCollection.notNullBuilder();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(1);
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      linkedHashSet0.add(predicatedCollection_Builder0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      // Undeclared exception!
      try { 
        PredicatedCollection.predicatedCollection((Collection<Object>) linkedHashSet0, (Predicate<? super Object>) transformerPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashBag<Object> hashBag0 = new HashBag<Object>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(onePredicate0, onePredicate0);
      Object object0 = new Object();
      hashBag0.add(object0);
      predicateArray0[0] = (Predicate<Object>) orPredicate0;
      // Undeclared exception!
      try { 
        PredicatedCollection.predicatedCollection((Collection<Object>) hashBag0, (Predicate<? super Object>) predicateArray0[0]);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        PredicatedCollection.builder((Predicate<? super InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PredicatedCollection.Builder<Boolean> predicatedCollection_Builder0 = PredicatedCollection.notNullBuilder();
      Collection<Boolean> collection0 = predicatedCollection_Builder0.rejectedElements();
      Class<Boolean> class0 = Boolean.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      PredicatedCollection<Boolean> predicatedCollection0 = PredicatedCollection.predicatedCollection(collection0, (Predicate<? super Boolean>) predicate0);
      // Undeclared exception!
      try { 
        predicatedCollection0.addAll(collection0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      TreeBag<InstanceofPredicate> treeBag0 = new TreeBag<InstanceofPredicate>();
      PredicatedSortedBag<InstanceofPredicate> predicatedSortedBag0 = PredicatedSortedBag.predicatedSortedBag((SortedBag<InstanceofPredicate>) treeBag0, (Predicate<? super InstanceofPredicate>) predicate0);
      Set<InstanceofPredicate> set0 = predicatedSortedBag0.uniqueSet();
      PredicatedCollection<InstanceofPredicate> predicatedCollection0 = new PredicatedCollection<InstanceofPredicate>(set0, predicate0);
      // Undeclared exception!
      try { 
        predicatedCollection0.addAll(treeBag0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.UnmodifiableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object object0 = new Object();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(object0);
      PredicatedCollection.Builder<Object> predicatedCollection_Builder0 = new PredicatedCollection.Builder<Object>(identityPredicate0);
      Bag<Object> bag0 = predicatedCollection_Builder0.createPredicatedBag();
      PredicatedBag<Object> predicatedBag0 = PredicatedBag.predicatedBag(bag0, (Predicate<? super Object>) identityPredicate0);
      // Undeclared exception!
      try { 
        predicatedBag0.addAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      PriorityQueue<Boolean> priorityQueue0 = new PriorityQueue<Boolean>();
      PredicatedCollection<Boolean> predicatedCollection0 = new PredicatedCollection<Boolean>(priorityQueue0, instanceofPredicate0);
      // Undeclared exception!
      try { 
        predicatedCollection0.addAll(priorityQueue0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMultiSet<InstanceofPredicate> hashMultiSet0 = new HashMultiSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) hashMultiSet0);
      HashMultiSet<Object> hashMultiSet1 = new HashMultiSet<Object>();
      PredicatedMultiSet<Object> predicatedMultiSet0 = PredicatedMultiSet.predicatedMultiSet((MultiSet<Object>) hashMultiSet1, (Predicate<? super Object>) predicate0);
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      hashMultiSet1.add((Object) instanceofPredicate0);
      // Undeclared exception!
      try { 
        predicatedMultiSet0.addAll(hashMultiSet1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'org.apache.commons.collections4.functors.InstanceofPredicate@7' - Predicate 'org.apache.commons.collections4.functors.OnePredicate@3' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TreeBag<Object> treeBag0 = new TreeBag<Object>();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      PredicatedSortedBag<Object> predicatedSortedBag0 = PredicatedSortedBag.predicatedSortedBag((SortedBag<Object>) treeBag0, (Predicate<? super Object>) predicate0);
      // Undeclared exception!
      try { 
        predicatedSortedBag0.add(treeBag0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashBag<InstanceofPredicate> hashBag0 = new HashBag<InstanceofPredicate>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) allPredicate0;
      Predicate<InstanceofPredicate> predicate0 = OnePredicate.onePredicate((Predicate<? super InstanceofPredicate>[]) predicateArray0);
      PredicatedBag<InstanceofPredicate> predicatedBag0 = PredicatedBag.predicatedBag((Bag<InstanceofPredicate>) hashBag0, (Predicate<? super InstanceofPredicate>) predicate0);
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        predicatedBag0.add(instanceofPredicate0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) nonePredicate0;
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      predicateArray0[1] = (Predicate<Object>) instanceofPredicate0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) predicateArray0[1], comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(predicate0);
      Object object0 = new Object();
      Boolean boolean0 = predicateTransformer0.transform(object0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      PredicatedCollection.Builder<Boolean> predicatedCollection_Builder0 = PredicatedCollection.builder((Predicate<? super Boolean>) anyPredicate0);
      MultiSet<Boolean> multiSet0 = predicatedCollection_Builder0.createPredicatedMultiSet();
      SynchronizedMultiSet<Boolean> synchronizedMultiSet0 = SynchronizedMultiSet.synchronizedMultiSet(multiSet0);
      PredicatedMultiSet<Boolean> predicatedMultiSet0 = PredicatedMultiSet.predicatedMultiSet((MultiSet<Boolean>) synchronizedMultiSet0, (Predicate<? super Boolean>) predicateArray0[1]);
      // Undeclared exception!
      try { 
        predicatedMultiSet0.add(boolean0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMultiSet<InstanceofPredicate> hashMultiSet0 = new HashMultiSet<InstanceofPredicate>();
      MultiSet<InstanceofPredicate> multiSet0 = UnmodifiableMultiSet.unmodifiableMultiSet((MultiSet<? extends InstanceofPredicate>) hashMultiSet0);
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IdentityPredicate<InstanceofPredicate> identityPredicate0 = new IdentityPredicate<InstanceofPredicate>(instanceofPredicate0);
      PredicatedCollection<InstanceofPredicate> predicatedCollection0 = PredicatedCollection.predicatedCollection((Collection<InstanceofPredicate>) multiSet0, (Predicate<? super InstanceofPredicate>) identityPredicate0);
      // Undeclared exception!
      try { 
        predicatedCollection0.add(instanceofPredicate0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multiset.UnmodifiableMultiSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashBag<Object> hashBag0 = new HashBag<Object>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(onePredicate0, onePredicate0);
      predicateArray0[0] = (Predicate<Object>) orPredicate0;
      PredicatedCollection<Object> predicatedCollection0 = PredicatedCollection.predicatedCollection((Collection<Object>) hashBag0, (Predicate<? super Object>) onePredicate0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        predicatedCollection0.add(object0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TreeBag<InstanceofPredicate> treeBag0 = new TreeBag<InstanceofPredicate>();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      PredicatedSortedBag<InstanceofPredicate> predicatedSortedBag0 = PredicatedSortedBag.predicatedSortedBag((SortedBag<InstanceofPredicate>) treeBag0, (Predicate<? super InstanceofPredicate>) predicate0);
      // Undeclared exception!
      try { 
        predicatedSortedBag0.add((InstanceofPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // object
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashBag<InstanceofPredicate> hashBag0 = new HashBag<InstanceofPredicate>();
      TreeBag<InstanceofPredicate> treeBag0 = new TreeBag<InstanceofPredicate>(hashBag0);
      SynchronizedSortedBag<InstanceofPredicate> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<InstanceofPredicate>) treeBag0);
      CollectionSortedBag<InstanceofPredicate> collectionSortedBag0 = new CollectionSortedBag<InstanceofPredicate>(synchronizedSortedBag0);
      Predicate<InstanceofPredicate> predicate0 = TruePredicate.truePredicate();
      PredicatedCollection<InstanceofPredicate> predicatedCollection0 = PredicatedCollection.predicatedCollection((Collection<InstanceofPredicate>) collectionSortedBag0, (Predicate<? super InstanceofPredicate>) predicate0);
      // Undeclared exception!
      try { 
        predicatedCollection0.add((InstanceofPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TreeSet<Boolean> treeSet0 = new TreeSet<Boolean>();
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(instanceofPredicate0);
      Boolean boolean0 = predicateTransformer0.transform(instanceofPredicate0);
      SortedSet<Boolean> sortedSet0 = treeSet0.subSet(boolean0, boolean0);
      PredicatedCollection<Boolean> predicatedCollection0 = new PredicatedCollection<Boolean>(sortedSet0, instanceofPredicate0);
      // Undeclared exception!
      try { 
        predicatedCollection0.add(boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // key out of range
         //
         verifyException("java.util.TreeMap$NavigableSubMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashBag<Object> hashBag0 = new HashBag<Object>();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      PredicatedCollection<Object> predicatedCollection0 = PredicatedCollection.predicatedCollection((Collection<Object>) hashBag0, (Predicate<? super Object>) nullIsExceptionPredicate0);
      // Undeclared exception!
      try { 
        predicatedCollection0.add(predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'org.apache.commons.collections4.functors.FalsePredicate@5' - Predicate 'org.apache.commons.collections4.functors.NullIsExceptionPredicate@2' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TreeBag<Object> treeBag0 = new TreeBag<Object>();
      Bag<Object> bag0 = CollectionBag.collectionBag((Bag<Object>) treeBag0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      PredicatedCollection<Object> predicatedCollection0 = new PredicatedCollection<Object>(bag0, uniquePredicate0);
      // Undeclared exception!
      try { 
        predicatedCollection0.add(bag0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.bag.CollectionBag cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TreeBag<Object> treeBag0 = new TreeBag<Object>();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      PredicatedSortedBag<Object> predicatedSortedBag0 = PredicatedSortedBag.predicatedSortedBag((SortedBag<Object>) treeBag0, (Predicate<? super Object>) predicate0);
      Bag<Object> bag0 = CollectionBag.collectionBag((Bag<Object>) predicatedSortedBag0);
      SynchronizedBag<Object> synchronizedBag0 = SynchronizedBag.synchronizedBag(bag0);
      PredicatedCollection<Object> predicatedCollection0 = PredicatedCollection.predicatedCollection((Collection<Object>) synchronizedBag0, (Predicate<? super Object>) predicate0);
      // Undeclared exception!
      try { 
        predicatedCollection0.add(synchronizedBag0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.bag.SynchronizedBag cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<Boolean> treeBag0 = new TreeBag<Boolean>(comparator0);
      Transformer<Boolean, Boolean>[] transformerArray0 = (Transformer<Boolean, Boolean>[]) Array.newInstance(Transformer.class, 1);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(treeBag0);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicateArray0[0]);
      predicateArray0[1] = (Predicate<Object>) nullIsFalsePredicate0;
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator1).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(nullIsFalsePredicate0, comparator1, comparatorPredicate_Criterion0);
      predicateArray0[2] = (Predicate<Object>) comparatorPredicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      SwitchTransformer<Boolean, Boolean> switchTransformer0 = new SwitchTransformer<Boolean, Boolean>(predicateArray0, transformerArray0, (Transformer<? super Boolean, ? extends Boolean>) null);
      transformerArray0[0] = (Transformer<Boolean, Boolean>) switchTransformer0;
      TransformedSortedBag<Boolean> transformedSortedBag0 = TransformedSortedBag.transformingSortedBag((SortedBag<Boolean>) treeBag0, (Transformer<? super Boolean, ? extends Boolean>) transformerArray0[0]);
      PredicatedSortedBag<Boolean> predicatedSortedBag0 = PredicatedSortedBag.predicatedSortedBag((SortedBag<Boolean>) transformedSortedBag0, (Predicate<? super Boolean>) predicateArray0[2]);
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(anyPredicate0);
      Boolean boolean0 = predicateTransformer0.transform(switchTransformer0);
      // Undeclared exception!
      try { 
        predicatedSortedBag0.add(boolean0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      linkedHashSet0.add(instanceofPredicate0);
      PredicatedCollection<InstanceofPredicate> predicatedCollection0 = null;
      try {
        predicatedCollection0 = new PredicatedCollection<InstanceofPredicate>(linkedHashSet0, predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashBag<Object> hashBag0 = new HashBag<Object>();
      PredicatedCollection<Object> predicatedCollection0 = null;
      try {
        predicatedCollection0 = new PredicatedCollection<Object>(hashBag0, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      LinkedList<NonePredicate<Boolean>> linkedList0 = new LinkedList<NonePredicate<Boolean>>();
      HashMultiSet<Object> hashMultiSet0 = new HashMultiSet<Object>();
      PredicatedMultiSet<Object> predicatedMultiSet0 = PredicatedMultiSet.predicatedMultiSet((MultiSet<Object>) hashMultiSet0, (Predicate<? super Object>) instanceofPredicate0);
      boolean boolean0 = predicatedMultiSet0.addAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      PredicatedCollection.Builder<InstanceofPredicate> predicatedCollection_Builder0 = PredicatedCollection.notNullBuilder();
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      linkedList0.offer(instanceofPredicate0);
      PredicatedCollection.Builder<InstanceofPredicate> predicatedCollection_Builder1 = predicatedCollection_Builder0.addAll(linkedList0);
      assertSame(predicatedCollection_Builder1, predicatedCollection_Builder0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      PredicatedCollection.Builder<Object> predicatedCollection_Builder0 = new PredicatedCollection.Builder<Object>(predicate0);
      PredicatedCollection.Builder<Object> predicatedCollection_Builder1 = predicatedCollection_Builder0.addAll((Collection<?>) null);
      assertNotNull(predicatedCollection_Builder1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMultiSet<InstanceofPredicate> hashMultiSet0 = new HashMultiSet<InstanceofPredicate>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      NonePredicate<Boolean> nonePredicate0 = new NonePredicate<Boolean>(predicateArray0);
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) hashMultiSet0);
      PredicatedCollection.Builder<NonePredicate<Boolean>> predicatedCollection_Builder0 = PredicatedCollection.builder((Predicate<? super NonePredicate<Boolean>>) predicate0);
      PredicatedCollection.Builder<NonePredicate<Boolean>> predicatedCollection_Builder1 = predicatedCollection_Builder0.add(nonePredicate0);
      assertSame(predicatedCollection_Builder0, predicatedCollection_Builder1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PredicatedCollection.Builder<InstanceofPredicate> predicatedCollection_Builder0 = PredicatedCollection.notNullBuilder();
      Class<Boolean> class0 = Boolean.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      PredicatedCollection.Builder<InstanceofPredicate> predicatedCollection_Builder1 = predicatedCollection_Builder0.add(instanceofPredicate0);
      List<InstanceofPredicate> list0 = predicatedCollection_Builder1.createPredicatedList();
      PredicatedCollection<InstanceofPredicate> predicatedCollection0 = null;
      try {
        predicatedCollection0 = new PredicatedCollection<InstanceofPredicate>(list0, instanceofPredicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'org.apache.commons.collections4.functors.InstanceofPredicate@2' - Predicate 'org.apache.commons.collections4.functors.InstanceofPredicate@2' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashBag<InstanceofPredicate> hashBag0 = new HashBag<InstanceofPredicate>();
      Class<Boolean> class0 = Boolean.class;
      hashBag0.add((InstanceofPredicate) null);
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        PredicatedCollection.predicatedCollection((Collection<InstanceofPredicate>) hashBag0, (Predicate<? super InstanceofPredicate>) instanceofPredicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'null' - Predicate 'org.apache.commons.collections4.functors.InstanceofPredicate@3' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PredicatedCollection.Builder<Closure<NonePredicate>> predicatedCollection_Builder0 = PredicatedCollection.notNullBuilder();
      PredicatedCollection.Builder<Object> predicatedCollection_Builder1 = PredicatedCollection.notNullBuilder();
      Collection<Object> collection0 = predicatedCollection_Builder1.rejectedElements();
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      PredicatedCollection<Object> predicatedCollection0 = PredicatedCollection.predicatedCollection(collection0, (Predicate<? super Object>) predicate0);
      // Undeclared exception!
      try { 
        predicatedCollection0.add(predicatedCollection_Builder0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PredicatedCollection.Builder<Object> predicatedCollection_Builder0 = PredicatedCollection.notNullBuilder();
      Queue<Object> queue0 = predicatedCollection_Builder0.createPredicatedQueue();
      // Undeclared exception!
      try { 
        PredicatedCollection.predicatedCollection((Collection<Object>) queue0, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PredicatedCollection.Builder<InstanceofPredicate> predicatedCollection_Builder0 = PredicatedCollection.notNullBuilder();
      Set<InstanceofPredicate> set0 = predicatedCollection_Builder0.createPredicatedSet();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) set0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      TreeBag<InstanceofPredicate> treeBag0 = new TreeBag<InstanceofPredicate>(comparator0);
      SynchronizedSortedBag<InstanceofPredicate> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<InstanceofPredicate>) treeBag0);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      synchronizedSortedBag0.add(instanceofPredicate0, 512);
      PredicatedSortedBag<InstanceofPredicate> predicatedSortedBag0 = PredicatedSortedBag.predicatedSortedBag((SortedBag<InstanceofPredicate>) synchronizedSortedBag0, (Predicate<? super InstanceofPredicate>) predicate0);
      // Undeclared exception!
      try { 
        predicatedSortedBag0.addAll(synchronizedSortedBag0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.AbstractMapBag$BagIterator", e);
      }
  }
}
