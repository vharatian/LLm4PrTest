/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 12:31:24 GMT 2025
 */

package org.apache.commons.collections4.collection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.collection.IndexedCollection;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.CloneTransformer;
import org.apache.commons.collections4.functors.ClosureTransformer;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class IndexedCollection_ESTest extends IndexedCollection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(123);
      linkedList0.add((Object) integer0);
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Integer, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      indexedCollection0.add(transformer0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>(indexedCollection0);
      boolean boolean0 = indexedCollection0.removeAll(linkedList1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transformer<Integer, Integer> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Integer, Integer> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Integer>) linkedList0, transformer0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>(linkedList0);
      Integer integer0 = new Integer((-4077));
      linkedList1.add(integer0);
      linkedList1.add(integer0);
      boolean boolean0 = indexedCollection0.addAll(linkedList1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Transformer<Integer, Object>> linkedList0 = new LinkedList<Transformer<Integer, Object>>();
      Transformer<Transformer<Integer, Object>, Integer> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Integer, Transformer<Integer, Object>> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Transformer<Integer, Object>>) linkedList0, transformer0);
      boolean boolean0 = indexedCollection0.removeAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(766);
      Factory<Integer> factory0 = ConstantFactory.constantFactory(integer0);
      FactoryTransformer<Integer, Integer> factoryTransformer0 = new FactoryTransformer<Integer, Integer>(factory0);
      IndexedCollection<Integer, Integer> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Integer>) linkedList0, (Transformer<Integer, Integer>) factoryTransformer0);
      boolean boolean0 = indexedCollection0.add(integer0);
      HashMap<Object, Predicate<Integer>> hashMap0 = new HashMap<Object, Predicate<Integer>>();
      Transformer<Integer, Predicate<Integer>> transformer0 = MapTransformer.mapTransformer((Map<? super Integer, ? extends Predicate<Integer>>) hashMap0);
      IndexedCollection<Predicate<Integer>, Integer> indexedCollection1 = IndexedCollection.nonUniqueIndexedCollection((Collection<Integer>) indexedCollection0, transformer0);
      boolean boolean1 = indexedCollection1.remove(integer0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Predicate<Integer>> linkedList0 = new LinkedList<Predicate<Integer>>();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) linkedList0);
      Integer integer0 = new Integer(1855);
      ConstantTransformer<Object, Integer> constantTransformer0 = new ConstantTransformer<Object, Integer>(integer0);
      Transformer<Integer, Integer> transformer0 = IfTransformer.ifTransformer((Predicate<? super Integer>) predicate0, (Transformer<? super Integer, ? extends Integer>) constantTransformer0);
      ConstantTransformer<Predicate<Integer>, Transformer<Integer, Integer>> constantTransformer1 = new ConstantTransformer<Predicate<Integer>, Transformer<Integer, Integer>>(transformer0);
      Predicate<Integer>[] predicateArray0 = (Predicate<Integer>[]) Array.newInstance(Predicate.class, 3);
      NonePredicate<Integer> nonePredicate0 = new NonePredicate<Integer>(predicateArray0);
      linkedList0.add((Predicate<Integer>) nonePredicate0);
      IndexedCollection<Transformer<Integer, Integer>, Predicate<Integer>> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Predicate<Integer>>) linkedList0, (Transformer<Predicate<Integer>, Transformer<Integer, Integer>>) constantTransformer1);
      Predicate<Integer> predicate1 = indexedCollection0.get(transformer0);
      assertNotNull(predicate1);
      assertTrue(linkedList0.contains(predicate1));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<LinkedList<Integer>> linkedList0 = new LinkedList<LinkedList<Integer>>();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) linkedList0);
      Integer integer0 = new Integer(322);
      ConstantTransformer<Object, Integer> constantTransformer0 = new ConstantTransformer<Object, Integer>(integer0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.add(linkedList1);
      IfTransformer<LinkedList<Integer>, Object> ifTransformer0 = new IfTransformer<LinkedList<Integer>, Object>(predicate0, constantTransformer0, constantTransformer0);
      IndexedCollection<Object, LinkedList<Integer>> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<LinkedList<Integer>>) linkedList0, (Transformer<LinkedList<Integer>, Object>) ifTransformer0);
      Object object0 = new Object();
      boolean boolean0 = indexedCollection0.contains(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(743);
      Factory<Integer> factory0 = ConstantFactory.constantFactory(integer0);
      FactoryTransformer<Integer, Integer> factoryTransformer0 = new FactoryTransformer<Integer, Integer>(factory0);
      IndexedCollection<Integer, Integer> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Integer>) linkedList0, (Transformer<Integer, Integer>) factoryTransformer0);
      boolean boolean0 = indexedCollection0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transformer<Integer, Integer> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Integer, Integer> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Integer>) linkedList0, transformer0);
      indexedCollection0.add((Integer) null);
      Collection<Integer> collection0 = indexedCollection0.values((Integer) null);
      assertNotNull(collection0);
      
      IndexedCollection<Integer, Integer> indexedCollection1 = IndexedCollection.nonUniqueIndexedCollection(collection0, transformer0);
      boolean boolean0 = indexedCollection1.addAll(indexedCollection0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) transformer0);
      // Undeclared exception!
      try { 
        IndexedCollection.uniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      Integer integer0 = new Integer(3363);
      Predicate<Integer>[] predicateArray0 = (Predicate<Integer>[]) Array.newInstance(Predicate.class, 11);
      linkedList0.add(integer0);
      Integer integer1 = new Integer(3363);
      Predicate<Integer> predicate0 = IdentityPredicate.identityPredicate(integer1);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicateArray0[0];
      AnyPredicate<Integer> anyPredicate0 = new AnyPredicate<Integer>(predicateArray0);
      predicateArray0[2] = (Predicate<Integer>) anyPredicate0;
      NonePredicate<Integer> nonePredicate0 = new NonePredicate<Integer>(predicateArray0);
      Transformer<Integer, Integer> transformer1 = IfTransformer.ifTransformer((Predicate<? super Integer>) nonePredicate0, (Transformer<? super Integer, ? extends Integer>) transformer0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      // Undeclared exception!
      IndexedCollection.uniqueIndexedCollection((Collection<Integer>) linkedList0, transformer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Integer, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      indexedCollection0.add(linkedList0);
      Transformer<Object, Object> transformer1 = CloneTransformer.cloneTransformer();
      // Undeclared exception!
      try { 
        IndexedCollection.uniqueIndexedCollection((Collection<Object>) linkedList0, transformer1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Transformer<Integer, Integer> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IndexedCollection.uniqueIndexedCollection((Collection<Integer>) null, transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      Transformer<Object, Object> transformer0 = CloneTransformer.cloneTransformer();
      // Undeclared exception!
      try { 
        IndexedCollection.uniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The prototype must be cloneable via a public clone method
         //
         verifyException("org.apache.commons.collections4.functors.PrototypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Predicate<Integer>> linkedList0 = new LinkedList<Predicate<Integer>>();
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 0);
      Transformer<Predicate<Integer>, Predicate<Object>> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      IndexedCollection<Predicate<Object>, Predicate<Integer>> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Predicate<Integer>>) linkedList0, transformer0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Transformer<Object, Integer> transformer1 = MapTransformer.mapTransformer((Map<? super Object, ? extends Integer>) hashMap0);
      IndexedCollection<Integer, Object> indexedCollection1 = IndexedCollection.uniqueIndexedCollection((Collection<Object>) linkedList1, transformer1);
      Object object0 = new Object();
      linkedList1.push(object0);
      // Undeclared exception!
      try { 
        indexedCollection1.retainAll(indexedCollection0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.lang.Object' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Integer, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      // Undeclared exception!
      try { 
        indexedCollection0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Predicate<Integer>> linkedList0 = new LinkedList<Predicate<Integer>>();
      Transformer<Predicate<Integer>, LinkedList<Integer>> transformer0 = InvokerTransformer.invokerTransformer("PrtotpeCloneFctor: Clone metDodthrew n excepton");
      IndexedCollection<LinkedList<Integer>, Predicate<Integer>> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Predicate<Integer>>) linkedList0, transformer0);
      Predicate<Integer>[] predicateArray0 = (Predicate<Integer>[]) Array.newInstance(Predicate.class, 0);
      AnyPredicate<Integer> anyPredicate0 = new AnyPredicate<Integer>(predicateArray0);
      linkedList0.offerFirst(anyPredicate0);
      // Undeclared exception!
      try { 
        indexedCollection0.removeAll(linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'PrtotpeCloneFctor: Clone metDodthrew n excepton' on 'class org.apache.commons.collections4.functors.AnyPredicate' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1);
      linkedList0.addFirst(integer0);
      Transformer<Integer, Integer> transformer0 = ConstantTransformer.nullTransformer();
      linkedList0.add((Integer) null);
      linkedList0.add(integer0);
      IndexedCollection<Integer, Integer> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Integer>) linkedList0, transformer0);
      // Undeclared exception!
      try { 
        indexedCollection0.removeAll(linkedList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transformer<Integer, Integer> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Integer, Integer> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Integer>) linkedList0, transformer0);
      // Undeclared exception!
      try { 
        indexedCollection0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Predicate<Integer>> linkedList0 = new LinkedList<Predicate<Integer>>();
      Transformer<Predicate<Integer>, LinkedList<Integer>> transformer0 = InvokerTransformer.invokerTransformer("PrtotpeCloneFctor: Clone metDodthrew n excepton");
      IndexedCollection<LinkedList<Integer>, Predicate<Integer>> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Predicate<Integer>>) linkedList0, transformer0);
      Predicate<Integer>[] predicateArray0 = (Predicate<Integer>[]) Array.newInstance(Predicate.class, 0);
      AnyPredicate<Integer> anyPredicate0 = new AnyPredicate<Integer>(predicateArray0);
      linkedList0.offerFirst(anyPredicate0);
      // Undeclared exception!
      try { 
        indexedCollection0.reindex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'PrtotpeCloneFctor: Clone metDodthrew n excepton' on 'class org.apache.commons.collections4.functors.AnyPredicate' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IndexedCollection<Integer, Object> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Object>) linkedList0, (Transformer<Object, Integer>) null);
      linkedList0.add((Object) null);
      // Undeclared exception!
      try { 
        indexedCollection0.reindex();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transformer<Integer, Integer> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Integer, Integer> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Integer>) linkedList0, transformer0);
      indexedCollection0.add((Integer) null);
      ConstantTransformer<Integer, LinkedList<Integer>> constantTransformer0 = new ConstantTransformer<Integer, LinkedList<Integer>>(linkedList0);
      IndexedCollection<LinkedList<Integer>, Integer> indexedCollection1 = IndexedCollection.uniqueIndexedCollection((Collection<Integer>) indexedCollection0, (Transformer<Integer, LinkedList<Integer>>) constantTransformer0);
      Integer integer0 = new Integer(3377);
      indexedCollection0.add(integer0);
      // Undeclared exception!
      try { 
        indexedCollection1.reindex();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate key in uniquely indexed collection.
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(2048);
      linkedList0.add(integer0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 4);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate0, closure0, true);
      closureArray0[0] = (Closure<Object>) whileClosure0;
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      ClosureTransformer<Integer> closureTransformer0 = new ClosureTransformer<Integer>(chainedClosure0);
      // Undeclared exception!
      IndexedCollection.nonUniqueIndexedCollection((Collection<Integer>) linkedList0, (Transformer<Integer, Integer>) closureTransformer0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Integer, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      indexedCollection0.add(linkedList0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      ClosureTransformer<Object> closureTransformer0 = new ClosureTransformer<Object>(closure0);
      // Undeclared exception!
      try { 
        IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) indexedCollection0, (Transformer<Object, Object>) closureTransformer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Integer, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      Object object0 = new Object();
      indexedCollection0.add(object0);
      Transformer<Object, Object> transformer1 = CloneTransformer.cloneTransformer();
      // Undeclared exception!
      try { 
        IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, transformer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The prototype must be cloneable via a public clone method
         //
         verifyException("org.apache.commons.collections4.functors.PrototypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      predicateArray0[0] = predicate0;
      Transformer<Object, Integer>[] transformerArray0 = (Transformer<Object, Integer>[]) Array.newInstance(Transformer.class, 0);
      SwitchTransformer<Object, Object> switchTransformer0 = new SwitchTransformer<Object, Object>(predicateArray0, transformerArray0, transformer0);
      // Undeclared exception!
      try { 
        IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, (Transformer<Object, Object>) switchTransformer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      IndexedCollection<Integer, Object> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      // Undeclared exception!
      try { 
        indexedCollection0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Object> transformer0 = CloneTransformer.cloneTransformer();
      IndexedCollection<Object, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      Integer integer0 = new Integer(0);
      java.util.function.Predicate<Object> predicate0 = java.util.function.Predicate.isEqual((Object) integer0);
      linkedList0.push(predicate0);
      // Undeclared exception!
      try { 
        indexedCollection0.containsAll(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The prototype must be cloneable via a public clone method
         //
         verifyException("org.apache.commons.collections4.functors.PrototypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      IndexedCollection<Integer, Object> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      // Undeclared exception!
      try { 
        indexedCollection0.contains(transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transformer<Integer, Integer> transformer0 = CloneTransformer.cloneTransformer();
      IndexedCollection<Integer, Integer> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Integer>) linkedList0, transformer0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        indexedCollection0.contains(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The prototype must be cloneable via a public clone method
         //
         verifyException("org.apache.commons.collections4.functors.PrototypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 0);
      Transformer<InstanceofPredicate, Integer> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      IndexedCollection<Integer, InstanceofPredicate> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<InstanceofPredicate>) linkedList0, transformer0);
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      linkedList0.add(instanceofPredicate0);
      // Undeclared exception!
      try { 
        indexedCollection0.addAll(linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class org.apache.commons.collections4.functors.InstanceofPredicate' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      Transformer<Integer, Integer> transformer0 = ConstantTransformer.nullTransformer();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Collection<Integer> collection0 = hashMap0.values();
      IndexedCollection<Integer, Integer> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection(collection0, transformer0);
      // Undeclared exception!
      try { 
        indexedCollection0.addAll(linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transformer<Integer, Integer> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Integer, Integer> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Integer>) linkedList0, transformer0);
      // Undeclared exception!
      try { 
        indexedCollection0.addAll((Collection<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Integer, Object> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      indexedCollection0.add(linkedList0);
      // Undeclared exception!
      try { 
        indexedCollection0.addAll(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate key in uniquely indexed collection.
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      IndexedCollection<Integer, Object> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      // Undeclared exception!
      try { 
        indexedCollection0.add(linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Set<Integer> set0 = hashMap0.keySet();
      IndexedCollection<InstanceofPredicate, Integer> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Integer>) set0, (Transformer<Integer, InstanceofPredicate>) null);
      // Undeclared exception!
      try { 
        indexedCollection0.add((Integer) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Transformer<Object, Integer> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Integer>) hashMap0);
      IndexedCollection<Integer, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      // Undeclared exception!
      try { 
        indexedCollection0.add(linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IndexedCollection<Integer, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, (Transformer<Object, Integer>) null);
      // Undeclared exception!
      try { 
        indexedCollection0.add((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = UniquePredicate.uniquePredicate();
      predicateArray0[1] = predicate1;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      Transformer<Object, Integer>[] transformerArray0 = (Transformer<Object, Integer>[]) Array.newInstance(Transformer.class, 0);
      SwitchTransformer<Object, Object> switchTransformer0 = new SwitchTransformer<Object, Object>(predicateArray0, transformerArray0, transformer0);
      IndexedCollection<Object, Object> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Object>) linkedList0, (Transformer<Object, Object>) switchTransformer0);
      IndexedCollection<Integer, Object> indexedCollection1 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) indexedCollection0, transformer0);
      // Undeclared exception!
      try { 
        indexedCollection1.add(nonePredicate0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IndexedCollection<Integer, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, (Transformer<Object, Integer>) null);
      Integer integer0 = new Integer(1710);
      linkedList0.add((Object) integer0);
      // Undeclared exception!
      try { 
        indexedCollection0.remove(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transformer<Integer, Integer> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Integer, Integer> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Integer>) linkedList0, transformer0);
      indexedCollection0.add((Integer) null);
      ConstantTransformer<Integer, LinkedList<Integer>> constantTransformer0 = new ConstantTransformer<Integer, LinkedList<Integer>>(linkedList0);
      IndexedCollection<LinkedList<Integer>, Integer> indexedCollection1 = IndexedCollection.uniqueIndexedCollection((Collection<Integer>) indexedCollection0, (Transformer<Integer, LinkedList<Integer>>) constantTransformer0);
      indexedCollection1.reindex();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Integer, Object> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      indexedCollection0.add(linkedList0);
      // Undeclared exception!
      try { 
        indexedCollection0.add(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate key in uniquely indexed collection.
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Integer, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      boolean boolean0 = indexedCollection0.add((Object) null);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      boolean boolean1 = indexedCollection0.retainAll(linkedList1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Integer, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      boolean boolean0 = indexedCollection0.retainAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Transformer<Object, Integer> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Integer>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IndexedCollection<Integer, Object> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      linkedList0.add((Object) indexedCollection0);
      Object object0 = new Object();
      java.util.function.Predicate<Object> predicate0 = java.util.function.Predicate.isEqual(object0);
      boolean boolean0 = indexedCollection0.removeIf(predicate0);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transformer<Integer, Integer> transformer0 = ConstantTransformer.nullTransformer();
      linkedList0.add((Integer) null);
      IndexedCollection<Integer, Integer> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Integer>) linkedList0, transformer0);
      java.util.function.Predicate<Integer> predicate0 = java.util.function.Predicate.isEqual((Object) null);
      boolean boolean0 = indexedCollection0.removeIf(predicate0);
      assertEquals(0, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transformer<Integer, Integer> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Integer, Integer> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Integer>) linkedList0, transformer0);
      boolean boolean0 = indexedCollection0.removeIf((java.util.function.Predicate<? super Integer>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<Predicate<Integer>> linkedList0 = new LinkedList<Predicate<Integer>>();
      Transformer<Predicate<Integer>, LinkedList<Integer>> transformer0 = InvokerTransformer.invokerTransformer("");
      IndexedCollection<LinkedList<Integer>, Predicate<Integer>> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Predicate<Integer>>) linkedList0, transformer0);
      boolean boolean0 = indexedCollection0.remove(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transformer<Integer, Integer> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Integer, Integer> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Integer>) linkedList0, transformer0);
      linkedList0.add((Integer) null);
      boolean boolean0 = indexedCollection0.containsAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      Transformer<Integer, Integer> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Integer, Integer> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Integer>) linkedList0, transformer0);
      boolean boolean0 = indexedCollection0.containsAll(linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Integer, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      indexedCollection0.add(linkedList0);
      // Undeclared exception!
      try { 
        indexedCollection0.addAll(linkedList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transformer<Integer, Integer> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Integer, Integer> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Integer>) linkedList0, transformer0);
      boolean boolean0 = indexedCollection0.addAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IndexedCollection<Integer, Object> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Object>) linkedList0, (Transformer<Object, Integer>) null);
      // Undeclared exception!
      try { 
        indexedCollection0.contains(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      IndexedCollection<Integer, Object> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      Integer integer0 = new Integer(1);
      Collection<Object> collection0 = indexedCollection0.values(integer0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Integer, Object> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      indexedCollection0.clear();
  }
}
