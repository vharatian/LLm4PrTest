/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 20:30:00 GMT 2025
 */

package org.apache.commons.collections4.collection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.apache.commons.collections4.collection.CompositeCollection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CompositeCollection_ESTest extends CompositeCollection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<LinkedList<Integer>> linkedList0 = new LinkedList<LinkedList<Integer>>();
      CompositeCollection<LinkedList<Integer>> compositeCollection0 = new CompositeCollection<LinkedList<Integer>>(linkedList0, linkedList0);
      linkedList0.add((LinkedList<Integer>) null);
      compositeCollection0.retainAll((Collection<?>) null);
      linkedList0.iterator();
      compositeCollection0.toArray();
      CompositeCollection<LinkedList<Integer>> compositeCollection1 = new CompositeCollection<LinkedList<Integer>>(compositeCollection0);
      compositeCollection0.toArray();
      compositeCollection1.iterator();
      compositeCollection1.size();
      CompositeCollection<Integer> compositeCollection2 = new CompositeCollection<Integer>((Collection<Integer>) null);
      compositeCollection2.iterator();
      boolean boolean0 = compositeCollection1.removeAll(linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer2 = new Integer((-4891));
      linkedList0.add(integer2);
      Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 4);
      collectionArray0[0] = (Collection<Integer>) compositeCollection0;
      collectionArray0[1] = (Collection<Integer>) linkedList0;
      collectionArray0[2] = (Collection<Integer>) compositeCollection0;
      collectionArray0[3] = (Collection<Integer>) linkedList0;
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(collectionArray0);
      compositeCollection0.addComposited((Collection<Integer>) linkedList0, (Collection<Integer>) linkedList0);
      CompositeCollection<Object> compositeCollection2 = new CompositeCollection<Object>();
      compositeCollection1.removeAll(compositeCollection2);
      CompositeCollection<Integer> compositeCollection3 = new CompositeCollection<Integer>(collectionArray0[1], collectionArray0[2]);
      CompositeCollection<Integer> compositeCollection4 = new CompositeCollection<Integer>(collectionArray0);
      CompositeCollection<Integer> compositeCollection5 = new CompositeCollection<Integer>(compositeCollection4);
      LinkedList<Integer>[] linkedListArray0 = (LinkedList<Integer>[]) Array.newInstance(LinkedList.class, 7);
      linkedListArray0[0] = linkedList0;
      linkedListArray0[1] = linkedList0;
      linkedListArray0[2] = linkedList0;
      linkedListArray0[3] = linkedList0;
      linkedListArray0[4] = linkedList0;
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedListArray0[5] = linkedList1;
      linkedListArray0[6] = linkedList0;
      // Undeclared exception!
      try { 
        compositeCollection5.toArray(linkedListArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Integer
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>(linkedList0);
      Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 4);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-9));
      Integer integer1 = new Integer((-4));
      linkedList0.add(integer1);
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(collectionArray0);
      compositeCollection0.addComposited((Collection<Integer>) linkedList0, (Collection<Integer>) linkedList0);
      boolean boolean0 = compositeCollection1.removeAll(compositeCollection0);
      assertFalse(boolean0);
      
      CompositeCollection<Integer> compositeCollection2 = new CompositeCollection<Integer>(compositeCollection0, compositeCollection1);
      assertTrue(compositeCollection2.contains((-4)));
      
      Integer integer2 = new Integer((-823));
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = compositeCollection0.toArray(integerArray0);
      assertEquals(3, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      compositeCollection0.containsAll((Collection<?>) null);
      CompositeCollection<CompositeCollection<Object>> compositeCollection1 = new CompositeCollection<CompositeCollection<Object>>();
      List<Collection<CompositeCollection<Object>>> list0 = compositeCollection1.getCollections();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(compositeCollection0, compositeCollection0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1502);
      linkedList0.add(integer0);
      Integer integer1 = new Integer(0);
      linkedList0.add(integer1);
      boolean boolean0 = compositeCollection1.containsAll(linkedList0);
      assertFalse(boolean0);
      
      CompositeCollection<Integer> compositeCollection2 = new CompositeCollection<Integer>(linkedList0);
      assertTrue(compositeCollection2.contains(0));
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      integerArray0[3] = integer1;
      integerArray0[4] = integer1;
      Integer integer2 = new Integer(1141);
      integerArray0[5] = integer2;
      Integer[] integerArray1 = compositeCollection1.toArray(integerArray0);
      assertEquals(6, integerArray1.length);
      
      Collection<Object>[] collectionArray0 = (Collection<Object>[]) Array.newInstance(Collection.class, 0);
      CompositeCollection<Object> compositeCollection3 = new CompositeCollection<Object>(collectionArray0);
      compositeCollection3.getMutator();
      assertFalse(compositeCollection3.contains(1502));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.push(compositeCollection0);
      CompositeCollection<Object> compositeCollection1 = new CompositeCollection<Object>(linkedList0);
      CompositeCollection<Integer> compositeCollection2 = new CompositeCollection<Integer>();
      compositeCollection2.addComposited((Collection<Integer>) compositeCollection0);
      boolean boolean0 = compositeCollection0.containsAll(linkedList0);
      boolean boolean1 = compositeCollection1.isEmpty();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      CompositeCollection<LinkedList<Integer>> compositeCollection1 = new CompositeCollection<LinkedList<Integer>>();
      compositeCollection1.getCollections();
      compositeCollection0.retainAll(compositeCollection1);
      compositeCollection1.clear();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      CompositeCollection<Object> compositeCollection2 = new CompositeCollection<Object>(linkedList0);
      compositeCollection2.retainAll(compositeCollection0);
      compositeCollection0.containsAll(compositeCollection2);
      CompositeCollection<Integer> compositeCollection3 = new CompositeCollection<Integer>(compositeCollection0, compositeCollection0);
      assertFalse(compositeCollection3.equals((Object)compositeCollection0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      compositeCollection0.parallelStream();
      CompositeCollection<LinkedList<Integer>> compositeCollection1 = new CompositeCollection<LinkedList<Integer>>();
      Collection<LinkedList<Integer>> collection0 = compositeCollection1.toCollection();
      compositeCollection0.removeAll(collection0);
      CompositeCollection<LinkedList<Integer>> compositeCollection2 = new CompositeCollection<LinkedList<Integer>>(compositeCollection1, collection0);
      CompositeCollection<LinkedList<Integer>> compositeCollection3 = new CompositeCollection<LinkedList<Integer>>(compositeCollection2);
      Collection<LinkedList<Integer>> collection1 = compositeCollection3.toCollection();
      CompositeCollection<LinkedList<Integer>> compositeCollection4 = new CompositeCollection<LinkedList<Integer>>(collection1, compositeCollection1);
      compositeCollection0.addComposited((Collection<Integer>) null, (Collection<Integer>) null);
      boolean boolean0 = compositeCollection0.removeAll(compositeCollection4);
      assertTrue(collection1.equals((Object)collection0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CompositeCollection<LinkedList<Integer>> compositeCollection0 = new CompositeCollection<LinkedList<Integer>>();
      CompositeCollection<LinkedList<Integer>> compositeCollection1 = new CompositeCollection<LinkedList<Integer>>();
      Integer[] integerArray0 = new Integer[0];
      compositeCollection1.toArray(integerArray0);
      compositeCollection1.addComposited((Collection<LinkedList<Integer>>) compositeCollection0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(696);
      linkedList0.add(integer0);
      Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 3);
      collectionArray0[0] = (Collection<Integer>) linkedList0;
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      collectionArray0[1] = (Collection<Integer>) linkedList1;
      collectionArray0[2] = (Collection<Integer>) linkedList0;
      CompositeCollection<Integer> compositeCollection2 = new CompositeCollection<Integer>(collectionArray0);
      compositeCollection2.addComposited(collectionArray0[2], (Collection<Integer>) linkedList1);
      boolean boolean0 = compositeCollection2.removeAll(collectionArray0[0]);
      assertFalse(compositeCollection2.contains(696));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>(linkedList0, linkedList0);
      boolean boolean0 = compositeCollection0.removeAll(linkedList0);
      assertFalse(boolean0);
      
      boolean boolean1 = compositeCollection0.containsAll(linkedList0);
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(compositeCollection0, compositeCollection0);
      boolean boolean2 = compositeCollection1.retainAll(linkedList0);
      assertFalse(boolean2 == boolean1);
      
      Integer integer0 = new Integer(787);
      Integer[] integerArray0 = new Integer[5];
      linkedList0.add((Integer) null);
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      Integer[] integerArray1 = compositeCollection1.toArray(integerArray0);
      assertEquals(5, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      CompositeCollection<Object> compositeCollection1 = new CompositeCollection<Object>(linkedList0);
      CompositeCollection<Object> compositeCollection2 = new CompositeCollection<Object>(linkedList0, compositeCollection1);
      boolean boolean0 = compositeCollection2.retainAll(compositeCollection0);
      assertFalse(boolean0);
      
      linkedList0.add((Object) compositeCollection2);
      compositeCollection1.toCollection();
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = compositeCollection2.toArray(objectArray0);
      assertEquals(2, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(2);
      linkedList0.add(integer0);
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      compositeCollection0.addComposited((Collection<Integer>) linkedList0, (Collection<Integer>) linkedList0);
      boolean boolean0 = compositeCollection0.removeAll(linkedList0);
      assertFalse(compositeCollection0.contains(2));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Collection<LinkedList<Integer>>[] collectionArray0 = (Collection<LinkedList<Integer>>[]) Array.newInstance(Collection.class, 8);
      CompositeCollection<LinkedList<Integer>> compositeCollection0 = new CompositeCollection<LinkedList<Integer>>(collectionArray0);
      collectionArray0[0] = (Collection<LinkedList<Integer>>) compositeCollection0;
      LinkedList<LinkedList<Integer>> linkedList0 = new LinkedList<LinkedList<Integer>>();
      collectionArray0[1] = (Collection<LinkedList<Integer>>) linkedList0;
      CompositeCollection<LinkedList<Integer>> compositeCollection1 = new CompositeCollection<LinkedList<Integer>>(collectionArray0[0], linkedList0);
      collectionArray0[2] = (Collection<LinkedList<Integer>>) compositeCollection1;
      Collection<LinkedList<Integer>>[] collectionArray1 = (Collection<LinkedList<Integer>>[]) Array.newInstance(Collection.class, 9);
      collectionArray1[0] = (Collection<LinkedList<Integer>>) compositeCollection1;
      collectionArray1[1] = (Collection<LinkedList<Integer>>) linkedList0;
      collectionArray1[2] = (Collection<LinkedList<Integer>>) linkedList0;
      collectionArray1[3] = (Collection<LinkedList<Integer>>) compositeCollection1;
      collectionArray1[4] = (Collection<LinkedList<Integer>>) linkedList0;
      collectionArray1[5] = (Collection<LinkedList<Integer>>) compositeCollection0;
      collectionArray1[6] = (Collection<LinkedList<Integer>>) linkedList0;
      collectionArray1[7] = (Collection<LinkedList<Integer>>) compositeCollection1;
      collectionArray1[8] = (Collection<LinkedList<Integer>>) linkedList0;
      CompositeCollection<LinkedList<Integer>> compositeCollection2 = new CompositeCollection<LinkedList<Integer>>(collectionArray1);
      collectionArray0[3] = (Collection<LinkedList<Integer>>) compositeCollection2;
      CompositeCollection<LinkedList<Integer>> compositeCollection3 = new CompositeCollection<LinkedList<Integer>>();
      collectionArray0[4] = (Collection<LinkedList<Integer>>) compositeCollection3;
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      CompositeCollection<Integer> compositeCollection4 = new CompositeCollection<Integer>(linkedList1, linkedList1);
      compositeCollection4.isEmpty();
      compositeCollection4.isEmpty();
      CompositeCollection<LinkedList<Integer>> compositeCollection5 = new CompositeCollection<LinkedList<Integer>>();
      LinkedList<LinkedList<Integer>> linkedList2 = new LinkedList<LinkedList<Integer>>();
      compositeCollection1.removeComposited(collectionArray0[1]);
      assertFalse(collectionArray0.equals((Object)collectionArray1));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 4);
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>(collectionArray0);
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(compositeCollection0, compositeCollection0);
      collectionArray0[0] = (Collection<Integer>) compositeCollection1;
      CompositeCollection<Integer> compositeCollection2 = new CompositeCollection<Integer>();
      collectionArray0[1] = (Collection<Integer>) compositeCollection2;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      collectionArray0[2] = (Collection<Integer>) linkedList0;
      CompositeCollection<Integer> compositeCollection3 = new CompositeCollection<Integer>();
      collectionArray0[3] = (Collection<Integer>) compositeCollection3;
      CompositeCollection<Integer> compositeCollection4 = new CompositeCollection<Integer>(collectionArray0);
      CompositeCollection<Integer> compositeCollection5 = new CompositeCollection<Integer>(compositeCollection4);
      boolean boolean0 = compositeCollection4.containsAll(compositeCollection2);
      Collection<LinkedList<Integer>>[] collectionArray1 = (Collection<LinkedList<Integer>>[]) Array.newInstance(Collection.class, 7);
      CompositeCollection<LinkedList<Integer>> compositeCollection6 = new CompositeCollection<LinkedList<Integer>>((Collection<LinkedList<Integer>>) null, (Collection<LinkedList<Integer>>) null);
      CompositeCollection<LinkedList<Integer>> compositeCollection7 = new CompositeCollection<LinkedList<Integer>>(compositeCollection6, (Collection<LinkedList<Integer>>) null);
      CompositeCollection<LinkedList<Integer>> compositeCollection8 = new CompositeCollection<LinkedList<Integer>>(compositeCollection7);
      collectionArray1[0] = (Collection<LinkedList<Integer>>) compositeCollection8;
      CompositeCollection<LinkedList<Integer>> compositeCollection9 = new CompositeCollection<LinkedList<Integer>>(compositeCollection7);
      collectionArray1[1] = (Collection<LinkedList<Integer>>) compositeCollection9;
      CompositeCollection<LinkedList<Integer>> compositeCollection10 = new CompositeCollection<LinkedList<Integer>>((Collection<LinkedList<Integer>>) null, compositeCollection8);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      compositeCollection3.containsAll(linkedList1);
      compositeCollection4.containsAll(compositeCollection9);
      boolean boolean1 = compositeCollection4.retainAll((Collection<?>) null);
      assertFalse(boolean1 == boolean0);
      
      Integer integer0 = new Integer((-1));
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      Integer[] integerArray1 = compositeCollection2.toArray(integerArray0);
      assertEquals(5, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>((Collection<Integer>) null, (Collection<Integer>) null);
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(compositeCollection0, (Collection<Integer>) null);
      compositeCollection0.retainAll((Collection<?>) null);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>(linkedList0, linkedList0);
      boolean boolean0 = compositeCollection0.containsAll(linkedList0);
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(compositeCollection0, compositeCollection0);
      boolean boolean1 = compositeCollection1.retainAll(linkedList0);
      assertFalse(boolean1 == boolean0);
      
      Integer integer0 = new Integer(787);
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      Integer[] integerArray1 = compositeCollection1.toArray(integerArray0);
      assertEquals(5, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(compositeCollection0);
      boolean boolean0 = compositeCollection1.containsAll(compositeCollection0);
      assertTrue(boolean0);
      
      CompositeCollection<Integer> compositeCollection2 = new CompositeCollection<Integer>(compositeCollection1);
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = compositeCollection2.toArray(integerArray0);
      assertSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 5);
      Integer integer0 = new Integer((-1709));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.offerLast(integer0);
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>(collectionArray0);
      compositeCollection0.addComposited(collectionArray0);
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(collectionArray0);
      compositeCollection1.isEmpty();
      // Undeclared exception!
      try { 
        compositeCollection1.addAll(compositeCollection0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // addAll() is not supported on CompositeCollection without a CollectionMutator strategy
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.push(compositeCollection0);
      CompositeCollection<Object> compositeCollection1 = new CompositeCollection<Object>(linkedList0);
      CompositeCollection<Integer> compositeCollection2 = new CompositeCollection<Integer>();
      boolean boolean0 = compositeCollection0.containsAll(compositeCollection2);
      boolean boolean1 = compositeCollection1.isEmpty();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>(linkedList0);
      Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 4);
      Integer integer0 = new Integer(0);
      linkedList0.offerLast(integer0);
      collectionArray0[0] = (Collection<Integer>) compositeCollection0;
      collectionArray0[1] = (Collection<Integer>) linkedList0;
      collectionArray0[2] = (Collection<Integer>) linkedList0;
      collectionArray0[3] = (Collection<Integer>) linkedList0;
      compositeCollection0.addComposited(collectionArray0);
      compositeCollection0.isEmpty();
      // Undeclared exception!
      try { 
        compositeCollection0.addAll(linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // addAll() is not supported on CompositeCollection without a CollectionMutator strategy
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Collection<Object>[] collectionArray0 = (Collection<Object>[]) Array.newInstance(Collection.class, 0);
      CompositeCollection<Object> compositeCollection0 = new CompositeCollection<Object>(collectionArray0);
      compositeCollection0.getMutator();
      Object[] objectArray0 = compositeCollection0.toArray();
      Object[] objectArray1 = compositeCollection0.toArray(objectArray0);
      assertEquals(0, objectArray1.length);
      assertSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 9);
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>((Collection<Integer>) null);
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(compositeCollection0);
      collectionArray0[0] = (Collection<Integer>) compositeCollection1;
      CompositeCollection<Integer> compositeCollection2 = new CompositeCollection<Integer>((Collection<Integer>) null, (Collection<Integer>) null);
      collectionArray0[1] = (Collection<Integer>) compositeCollection2;
      CompositeCollection<Integer> compositeCollection3 = new CompositeCollection<Integer>(compositeCollection2, collectionArray0[1]);
      collectionArray0[2] = (Collection<Integer>) compositeCollection3;
      CompositeCollection<Integer> compositeCollection4 = new CompositeCollection<Integer>();
      collectionArray0[3] = (Collection<Integer>) compositeCollection4;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      collectionArray0[4] = (Collection<Integer>) linkedList0;
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      collectionArray0[5] = (Collection<Integer>) linkedList1;
      CompositeCollection<Integer> compositeCollection5 = new CompositeCollection<Integer>(compositeCollection2, compositeCollection3);
      collectionArray0[6] = (Collection<Integer>) compositeCollection5;
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      collectionArray0[7] = (Collection<Integer>) linkedList2;
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      collectionArray0[8] = (Collection<Integer>) linkedList3;
      CompositeCollection<Integer> compositeCollection6 = new CompositeCollection<Integer>(collectionArray0);
      CompositeCollection<Integer> compositeCollection7 = new CompositeCollection<Integer>(compositeCollection6, compositeCollection3);
      CompositeCollection.CollectionMutator<Integer> compositeCollection_CollectionMutator0 = compositeCollection7.getMutator();
      assertNull(compositeCollection_CollectionMutator0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>((Collection<Integer>) null);
      compositeCollection0.spliterator();
      compositeCollection0.addComposited((Collection<Integer>) null);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CompositeCollection<LinkedList<Integer>> compositeCollection0 = new CompositeCollection<LinkedList<Integer>>();
      // Undeclared exception!
      try { 
        compositeCollection0.addComposited((Collection<LinkedList<Integer>>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 4);
      collectionArray0[0] = (Collection<Integer>) compositeCollection0;
      collectionArray0[1] = (Collection<Integer>) compositeCollection0;
      collectionArray0[2] = (Collection<Integer>) compositeCollection0;
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(62);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(62);
      integerArray0[1] = integer1;
      Integer[] integerArray1 = compositeCollection0.toArray(integerArray0);
      assertEquals(2, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      Integer[] integerArray0 = new Integer[12];
      Integer[] integerArray1 = compositeCollection0.toArray(integerArray0);
      assertEquals(12, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CompositeCollection<LinkedList<Integer>> compositeCollection0 = new CompositeCollection<LinkedList<Integer>>();
      compositeCollection0.spliterator();
      CompositeCollection<LinkedList<Integer>> compositeCollection1 = new CompositeCollection<LinkedList<Integer>>();
      Integer[] integerArray0 = new Integer[0];
      compositeCollection1.toArray(integerArray0);
      // Undeclared exception!
      try { 
        compositeCollection1.addComposited((Collection<LinkedList<Integer>>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = compositeCollection0.toArray(integerArray0);
      assertSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 0);
      Integer integer1 = new Integer((-1));
      linkedList0.add(integer1);
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>(collectionArray0);
      compositeCollection0.addComposited((Collection<Integer>) linkedList0, (Collection<Integer>) linkedList0);
      boolean boolean0 = compositeCollection0.removeAll(linkedList0);
      assertFalse(compositeCollection0.contains((-1)));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(compositeCollection0);
      boolean boolean0 = compositeCollection0.removeAll(compositeCollection1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      boolean boolean0 = compositeCollection0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>(linkedList0);
      boolean boolean0 = compositeCollection0.removeAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 5);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      collectionArray0[0] = (Collection<Integer>) linkedList0;
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      collectionArray0[1] = (Collection<Integer>) compositeCollection0;
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(linkedList0, linkedList0);
      CompositeCollection<Integer> compositeCollection2 = new CompositeCollection<Integer>(compositeCollection1, compositeCollection1);
      collectionArray0[2] = (Collection<Integer>) compositeCollection2;
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      collectionArray0[3] = (Collection<Integer>) linkedList1;
      Collection<Integer> collection0 = compositeCollection2.toCollection();
      collectionArray0[4] = collection0;
      CompositeCollection<Integer> compositeCollection3 = new CompositeCollection<Integer>(collectionArray0);
      boolean boolean0 = compositeCollection3.removeAll(compositeCollection2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(compositeCollection0);
      compositeCollection1.clear();
      // Undeclared exception!
      try { 
        compositeCollection1.forEach((Consumer<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 7);
      collectionArray0[0] = (Collection<Integer>) linkedList0;
      collectionArray0[1] = (Collection<Integer>) linkedList0;
      collectionArray0[2] = (Collection<Integer>) linkedList0;
      collectionArray0[3] = (Collection<Integer>) linkedList0;
      collectionArray0[4] = (Collection<Integer>) linkedList0;
      collectionArray0[5] = (Collection<Integer>) linkedList0;
      collectionArray0[6] = (Collection<Integer>) linkedList0;
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>(collectionArray0);
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(linkedList0, compositeCollection0);
      compositeCollection1.addComposited(collectionArray0[1]);
      compositeCollection1.iterator();
      compositeCollection1.toArray();
      LinkedList<LinkedList<Integer>> linkedList1 = new LinkedList<LinkedList<Integer>>();
      linkedList1.retainAll(compositeCollection0);
      linkedList1.stream();
      compositeCollection0.retainAll(compositeCollection1);
      linkedList1.offerFirst(linkedList0);
      CompositeCollection<LinkedList<Integer>> compositeCollection2 = new CompositeCollection<LinkedList<Integer>>(linkedList1, linkedList1);
      compositeCollection2.toArray();
      Object object0 = new Object();
      compositeCollection2.spliterator();
      // Undeclared exception!
      try { 
        compositeCollection2.remove(object0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove() is not supported on CompositeCollection without a CollectionMutator strategy
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 9);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>(linkedList0, linkedList0);
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(compositeCollection0);
      CompositeCollection<Integer> compositeCollection2 = new CompositeCollection<Integer>(compositeCollection1);
      CompositeCollection<Integer> compositeCollection3 = new CompositeCollection<Integer>(compositeCollection2);
      collectionArray0[0] = (Collection<Integer>) compositeCollection3;
      Collection<Integer> collection0 = compositeCollection3.toCollection();
      collectionArray0[1] = collection0;
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      collectionArray0[2] = (Collection<Integer>) linkedList1;
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      collectionArray0[3] = (Collection<Integer>) linkedList2;
      CompositeCollection<Integer> compositeCollection4 = new CompositeCollection<Integer>();
      collectionArray0[4] = (Collection<Integer>) compositeCollection4;
      CompositeCollection<Integer> compositeCollection5 = new CompositeCollection<Integer>();
      collectionArray0[5] = (Collection<Integer>) compositeCollection5;
      Collection<Integer> collection1 = compositeCollection1.toCollection();
      collectionArray0[6] = collection1;
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      collectionArray0[7] = (Collection<Integer>) linkedList3;
      Collection<Integer> collection2 = compositeCollection5.toCollection();
      assertTrue(collection2.equals((Object)collection1));
      
      collectionArray0[8] = collection2;
      CompositeCollection<Integer> compositeCollection6 = new CompositeCollection<Integer>(collectionArray0);
      Integer integer0 = new Integer(1);
      linkedList3.add(integer0);
      Collection<Integer> collection3 = compositeCollection6.toCollection();
      CompositeCollection<Integer> compositeCollection7 = new CompositeCollection<Integer>(collection3);
      boolean boolean0 = compositeCollection7.contains(linkedList0);
      assertFalse(boolean0);
      assertTrue(compositeCollection7.contains(1));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer((-1));
      linkedList0.add(integer1);
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      compositeCollection0.addComposited((Collection<Integer>) linkedList0, (Collection<Integer>) linkedList0);
      boolean boolean0 = compositeCollection0.contains(integer0);
      assertTrue(compositeCollection0.contains((-1)));
      assertTrue(boolean0);
      
      compositeCollection0.toArray();
      assertTrue(compositeCollection0.contains((-1)));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(compositeCollection0);
      boolean boolean0 = compositeCollection0.contains(compositeCollection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>(linkedList0, linkedList0);
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      compositeCollection0.clear();
      Integer integer1 = new Integer((-1));
      // Undeclared exception!
      try { 
        compositeCollection0.add(integer1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is not supported on CompositeCollection without a CollectionMutator strategy
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      compositeCollection0.clear();
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = compositeCollection0.toArray(integerArray0);
      assertSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      compositeCollection0.setMutator((CompositeCollection.CollectionMutator<Integer>) null);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(compositeCollection0, compositeCollection0);
      compositeCollection0.clear();
      CompositeCollection.CollectionMutator<Integer> compositeCollection_CollectionMutator0 = (CompositeCollection.CollectionMutator<Integer>) mock(CompositeCollection.CollectionMutator.class, new ViolatedAssumptionAnswer());
      compositeCollection1.setMutator(compositeCollection_CollectionMutator0);
      compositeCollection0.retainAll(compositeCollection1);
      compositeCollection0.spliterator();
      Integer integer0 = new Integer(160);
      // Undeclared exception!
      try { 
        compositeCollection0.add(integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is not supported on CompositeCollection without a CollectionMutator strategy
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>(linkedList0);
      boolean boolean0 = compositeCollection0.containsAll(linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(linkedList0, linkedList1);
      CompositeCollection.CollectionMutator<Integer> compositeCollection_CollectionMutator0 = (CompositeCollection.CollectionMutator<Integer>) mock(CompositeCollection.CollectionMutator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(compositeCollection_CollectionMutator0).addAll(any(org.apache.commons.collections4.collection.CompositeCollection.class) , anyList() , anyCollection());
      compositeCollection1.setMutator(compositeCollection_CollectionMutator0);
      compositeCollection1.addAll(linkedList0);
      boolean boolean1 = compositeCollection1.removeAll(linkedList0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(compositeCollection0, compositeCollection0);
      // Undeclared exception!
      try { 
        compositeCollection1.addAll(compositeCollection0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // addAll() is not supported on CompositeCollection without a CollectionMutator strategy
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 0);
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>(collectionArray0);
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(compositeCollection0);
      compositeCollection0.addComposited((Collection<Integer>) compositeCollection1);
      // Undeclared exception!
      try { 
        compositeCollection1.addAll(compositeCollection0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // addAll() is not supported on CompositeCollection without a CollectionMutator strategy
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Collection<LinkedList<Integer>>[] collectionArray0 = (Collection<LinkedList<Integer>>[]) Array.newInstance(Collection.class, 7);
      LinkedList<LinkedList<Integer>> linkedList0 = new LinkedList<LinkedList<Integer>>();
      collectionArray0[0] = (Collection<LinkedList<Integer>>) linkedList0;
      CompositeCollection<LinkedList<Integer>> compositeCollection0 = new CompositeCollection<LinkedList<Integer>>(linkedList0);
      collectionArray0[1] = (Collection<LinkedList<Integer>>) compositeCollection0;
      CompositeCollection<LinkedList<Integer>> compositeCollection1 = new CompositeCollection<LinkedList<Integer>>(collectionArray0);
      collectionArray0[2] = (Collection<LinkedList<Integer>>) compositeCollection1;
      CompositeCollection<LinkedList<Integer>> compositeCollection2 = new CompositeCollection<LinkedList<Integer>>();
      collectionArray0[3] = (Collection<LinkedList<Integer>>) compositeCollection2;
      CompositeCollection<LinkedList<Integer>> compositeCollection3 = new CompositeCollection<LinkedList<Integer>>(collectionArray0[0], compositeCollection2);
      collectionArray0[4] = (Collection<LinkedList<Integer>>) compositeCollection3;
      LinkedList<LinkedList<Integer>> linkedList1 = new LinkedList<LinkedList<Integer>>();
      collectionArray0[5] = (Collection<LinkedList<Integer>>) linkedList1;
      CompositeCollection<LinkedList<Integer>> compositeCollection4 = new CompositeCollection<LinkedList<Integer>>();
      collectionArray0[6] = (Collection<LinkedList<Integer>>) compositeCollection4;
      CompositeCollection<LinkedList<Integer>> compositeCollection5 = new CompositeCollection<LinkedList<Integer>>(collectionArray0);
      CompositeCollection<LinkedList<Integer>> compositeCollection6 = new CompositeCollection<LinkedList<Integer>>(compositeCollection5);
      Object[] objectArray0 = compositeCollection6.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      // Undeclared exception!
      try { 
        compositeCollection0.toArray((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 9);
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      Collection<Integer> collection0 = compositeCollection0.toCollection();
      collectionArray0[0] = collection0;
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>();
      collectionArray0[1] = (Collection<Integer>) compositeCollection1;
      CompositeCollection<Integer> compositeCollection2 = new CompositeCollection<Integer>();
      collectionArray0[2] = (Collection<Integer>) compositeCollection2;
      CompositeCollection<Integer> compositeCollection3 = new CompositeCollection<Integer>(collectionArray0);
      collectionArray0[3] = (Collection<Integer>) compositeCollection3;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      collectionArray0[4] = (Collection<Integer>) linkedList0;
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      collectionArray0[5] = (Collection<Integer>) linkedList1;
      CompositeCollection<Integer> compositeCollection4 = new CompositeCollection<Integer>();
      collectionArray0[6] = (Collection<Integer>) compositeCollection4;
      Collection<Integer> collection1 = compositeCollection3.toCollection();
      collectionArray0[7] = collection1;
      CompositeCollection<Integer> compositeCollection5 = new CompositeCollection<Integer>();
      collectionArray0[8] = (Collection<Integer>) compositeCollection5;
      CompositeCollection<Integer> compositeCollection6 = new CompositeCollection<Integer>(collectionArray0);
      compositeCollection6.retainAll(collectionArray0[8]);
      compositeCollection2.toCollection();
      Collection<LinkedList<Integer>>[] collectionArray1 = (Collection<LinkedList<Integer>>[]) Array.newInstance(Collection.class, 5);
      collectionArray1[0] = null;
      collectionArray1[1] = null;
      collectionArray1[2] = null;
      collectionArray1[3] = null;
      collectionArray1[4] = null;
      CompositeCollection<LinkedList<Integer>> compositeCollection7 = new CompositeCollection<LinkedList<Integer>>(collectionArray1);
      CompositeCollection<LinkedList<Integer>> compositeCollection8 = new CompositeCollection<LinkedList<Integer>>((Collection<LinkedList<Integer>>) null, compositeCollection7);
      // Undeclared exception!
      try { 
        compositeCollection8.toArray((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      CompositeCollection<CompositeCollection<Object>> compositeCollection1 = new CompositeCollection<CompositeCollection<Object>>((Collection<CompositeCollection<Object>>) null, (Collection<CompositeCollection<Object>>) null);
      boolean boolean0 = compositeCollection1.removeAll(compositeCollection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      compositeCollection0.forEach(consumer0);
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(compositeCollection0);
      compositeCollection1.size();
      Consumer<Integer> consumer1 = null;
      // Undeclared exception!
      try { 
        compositeCollection1.forEach((Consumer<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      CompositeCollection<Object> compositeCollection1 = new CompositeCollection<Object>(linkedList0);
      boolean boolean0 = compositeCollection1.retainAll(compositeCollection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Collection<LinkedList<Integer>>[] collectionArray0 = (Collection<LinkedList<Integer>>[]) Array.newInstance(Collection.class, 8);
      CompositeCollection<LinkedList<Integer>> compositeCollection0 = new CompositeCollection<LinkedList<Integer>>(collectionArray0);
      CompositeCollection<LinkedList<Integer>> compositeCollection1 = new CompositeCollection<LinkedList<Integer>>(compositeCollection0, compositeCollection0);
      collectionArray0[0] = (Collection<LinkedList<Integer>>) compositeCollection1;
      CompositeCollection<LinkedList<Integer>> compositeCollection2 = new CompositeCollection<LinkedList<Integer>>(collectionArray0);
      collectionArray0[1] = (Collection<LinkedList<Integer>>) compositeCollection2;
      LinkedList<LinkedList<Integer>> linkedList0 = new LinkedList<LinkedList<Integer>>();
      collectionArray0[2] = (Collection<LinkedList<Integer>>) linkedList0;
      CompositeCollection<LinkedList<Integer>> compositeCollection3 = new CompositeCollection<LinkedList<Integer>>(collectionArray0[2]);
      collectionArray0[3] = (Collection<LinkedList<Integer>>) compositeCollection3;
      CompositeCollection<LinkedList<Integer>> compositeCollection4 = new CompositeCollection<LinkedList<Integer>>();
      collectionArray0[4] = (Collection<LinkedList<Integer>>) compositeCollection4;
      LinkedList<LinkedList<Integer>> linkedList1 = new LinkedList<LinkedList<Integer>>();
      collectionArray0[5] = (Collection<LinkedList<Integer>>) linkedList1;
      CompositeCollection<LinkedList<Integer>> compositeCollection5 = new CompositeCollection<LinkedList<Integer>>(collectionArray0[4]);
      collectionArray0[6] = (Collection<LinkedList<Integer>>) compositeCollection5;
      CompositeCollection<LinkedList<Integer>> compositeCollection6 = new CompositeCollection<LinkedList<Integer>>();
      collectionArray0[7] = (Collection<LinkedList<Integer>>) compositeCollection6;
      CompositeCollection<LinkedList<Integer>> compositeCollection7 = new CompositeCollection<LinkedList<Integer>>(collectionArray0);
      boolean boolean0 = compositeCollection7.retainAll(collectionArray0[4]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CompositeCollection<Object> compositeCollection0 = new CompositeCollection<Object>();
      Collection<Object> collection0 = compositeCollection0.toCollection();
      boolean boolean0 = compositeCollection0.retainAll(collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      CompositeCollection<Object> compositeCollection1 = new CompositeCollection<Object>(linkedList0);
      compositeCollection0.containsAll((Collection<?>) null);
      CompositeCollection<Integer> compositeCollection2 = new CompositeCollection<Integer>(compositeCollection0, compositeCollection0);
      assertFalse(compositeCollection2.equals((Object)compositeCollection0));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer((-1));
      linkedList0.add(integer1);
      CompositeCollection<Object> compositeCollection0 = new CompositeCollection<Object>();
      CompositeCollection<Object> compositeCollection1 = new CompositeCollection<Object>();
      CompositeCollection<Integer> compositeCollection2 = new CompositeCollection<Integer>(linkedList0);
      compositeCollection2.containsAll(linkedList0);
      CompositeCollection<Integer> compositeCollection3 = new CompositeCollection<Integer>();
      assertFalse(compositeCollection3.contains((-1)));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CompositeCollection<Object> compositeCollection0 = new CompositeCollection<Object>();
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>();
      compositeCollection0.containsAll(compositeCollection1);
      compositeCollection1.toCollection();
      // Undeclared exception!
      try { 
        compositeCollection1.remove(compositeCollection0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove() is not supported on CompositeCollection without a CollectionMutator strategy
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>();
      compositeCollection1.spliterator();
      compositeCollection1.addComposited((Collection<Integer>) compositeCollection0, (Collection<Integer>) compositeCollection0);
      compositeCollection0.containsAll(compositeCollection1);
      Collection<Integer> collection0 = compositeCollection0.toCollection();
      CompositeCollection<Integer> compositeCollection2 = new CompositeCollection<Integer>(collection0);
      compositeCollection2.addComposited((Collection<Integer>) compositeCollection0, collection0);
      int int0 = 1;
      Integer integer0 = new Integer(1);
      // Undeclared exception!
      try { 
        compositeCollection0.add(integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is not supported on CompositeCollection without a CollectionMutator strategy
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = null;
      try {
        compositeCollection0 = new CompositeCollection<Integer>((Collection<Integer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 1);
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>(collectionArray0);
      collectionArray0[0] = (Collection<Integer>) compositeCollection0;
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(collectionArray0);
      CompositeCollection<Integer> compositeCollection2 = new CompositeCollection<Integer>(compositeCollection1);
      Object object0 = new Object();
      compositeCollection1.contains(object0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        compositeCollection2.remove(integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove() is not supported on CompositeCollection without a CollectionMutator strategy
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(compositeCollection0);
      boolean boolean0 = compositeCollection1.contains(compositeCollection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>(linkedList0);
      Iterator<Integer> iterator0 = compositeCollection0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Collection<LinkedList<Integer>>[] collectionArray0 = (Collection<LinkedList<Integer>>[]) Array.newInstance(Collection.class, 6);
      LinkedList<LinkedList<Integer>> linkedList0 = new LinkedList<LinkedList<Integer>>();
      collectionArray0[0] = (Collection<LinkedList<Integer>>) linkedList0;
      CompositeCollection<LinkedList<Integer>> compositeCollection0 = new CompositeCollection<LinkedList<Integer>>(linkedList0, linkedList0);
      collectionArray0[1] = (Collection<LinkedList<Integer>>) compositeCollection0;
      CompositeCollection<LinkedList<Integer>> compositeCollection1 = new CompositeCollection<LinkedList<Integer>>();
      collectionArray0[2] = (Collection<LinkedList<Integer>>) compositeCollection1;
      LinkedList<LinkedList<Integer>> linkedList1 = new LinkedList<LinkedList<Integer>>();
      collectionArray0[3] = (Collection<LinkedList<Integer>>) linkedList1;
      LinkedList<LinkedList<Integer>> linkedList2 = new LinkedList<LinkedList<Integer>>();
      collectionArray0[4] = (Collection<LinkedList<Integer>>) linkedList2;
      LinkedList<LinkedList<Integer>> linkedList3 = new LinkedList<LinkedList<Integer>>();
      collectionArray0[5] = (Collection<LinkedList<Integer>>) linkedList3;
      CompositeCollection<LinkedList<Integer>> compositeCollection2 = new CompositeCollection<LinkedList<Integer>>(collectionArray0);
      LinkedList<Integer> linkedList4 = new LinkedList<Integer>();
      linkedList0.add(linkedList4);
      CompositeCollection<LinkedList<Integer>> compositeCollection3 = new CompositeCollection<LinkedList<Integer>>(compositeCollection2);
      boolean boolean0 = compositeCollection3.contains(linkedList1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CompositeCollection<Object> compositeCollection0 = new CompositeCollection<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      compositeCollection0.removeComposited(linkedList0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        compositeCollection0.remove(object0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove() is not supported on CompositeCollection without a CollectionMutator strategy
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CompositeCollection<Object> compositeCollection0 = new CompositeCollection<Object>();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        compositeCollection0.remove(object0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove() is not supported on CompositeCollection without a CollectionMutator strategy
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(compositeCollection0);
      CompositeCollection<Integer> compositeCollection2 = new CompositeCollection<Integer>(compositeCollection1);
      boolean boolean0 = compositeCollection2.contains(compositeCollection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      Iterator<Integer> iterator0 = compositeCollection0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CompositeCollection<Object> compositeCollection0 = new CompositeCollection<Object>((Collection<Object>) null);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      Collection<Integer> collection0 = compositeCollection0.toCollection();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      linkedList0.removeAll(compositeCollection0);
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(linkedList0, linkedList0);
      compositeCollection1.addComposited((Collection<Integer>) linkedList0, (Collection<Integer>) linkedList0);
      CompositeCollection<LinkedList<Integer>> compositeCollection2 = new CompositeCollection<LinkedList<Integer>>((Collection<LinkedList<Integer>>) null);
      CompositeCollection<LinkedList<Integer>> compositeCollection3 = new CompositeCollection<LinkedList<Integer>>(compositeCollection2, compositeCollection2);
      compositeCollection3.removeComposited(compositeCollection2);
      compositeCollection0.spliterator();
      Collection<LinkedList<Integer>> collection0 = compositeCollection2.toCollection();
      compositeCollection3.size();
      compositeCollection2.addComposited((Collection<LinkedList<Integer>>) compositeCollection3, collection0);
      Integer integer0 = new Integer((-198));
      // Undeclared exception!
      try { 
        compositeCollection1.remove(integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove() is not supported on CompositeCollection without a CollectionMutator strategy
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        compositeCollection0.add(integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is not supported on CompositeCollection without a CollectionMutator strategy
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      CompositeCollection<CompositeCollection<Integer>> compositeCollection1 = new CompositeCollection<CompositeCollection<Integer>>();
      // Undeclared exception!
      try { 
        compositeCollection1.add(compositeCollection0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is not supported on CompositeCollection without a CollectionMutator strategy
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>(linkedList0);
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(compositeCollection0);
      compositeCollection1.getCollections();
      int int0 = 1;
      Integer integer1 = new Integer(1);
      // Undeclared exception!
      try { 
        compositeCollection0.add(integer1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is not supported on CompositeCollection without a CollectionMutator strategy
         //
         verifyException("org.apache.commons.collections4.collection.CompositeCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 1);
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      List<Collection<Integer>> list0 = compositeCollection0.getCollections();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>();
      Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 1);
      collectionArray0[0] = (Collection<Integer>) compositeCollection0;
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(collectionArray0);
      assertFalse(compositeCollection1.equals((Object)compositeCollection0));
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      CompositeCollection<Object> compositeCollection0 = new CompositeCollection<Object>(linkedList0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompositeCollection<Integer> compositeCollection0 = new CompositeCollection<Integer>(linkedList0, linkedList0);
      CompositeCollection<Integer> compositeCollection1 = new CompositeCollection<Integer>(compositeCollection0, linkedList0);
      assertFalse(compositeCollection1.equals((Object)compositeCollection0));
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Collection<LinkedList<Integer>>[] collectionArray0 = (Collection<LinkedList<Integer>>[]) Array.newInstance(Collection.class, 4);
      CompositeCollection<LinkedList<Integer>> compositeCollection0 = new CompositeCollection<LinkedList<Integer>>(collectionArray0);
      collectionArray0[0] = (Collection<LinkedList<Integer>>) compositeCollection0;
      CompositeCollection<LinkedList<Integer>> compositeCollection1 = new CompositeCollection<LinkedList<Integer>>(compositeCollection0, compositeCollection0);
      collectionArray0[1] = (Collection<LinkedList<Integer>>) compositeCollection1;
      CompositeCollection<LinkedList<Integer>> compositeCollection2 = new CompositeCollection<LinkedList<Integer>>(collectionArray0);
      collectionArray0[2] = (Collection<LinkedList<Integer>>) compositeCollection2;
      CompositeCollection<LinkedList<Integer>> compositeCollection3 = new CompositeCollection<LinkedList<Integer>>(collectionArray0[2]);
      collectionArray0[3] = (Collection<LinkedList<Integer>>) compositeCollection3;
      CompositeCollection<LinkedList<Integer>> compositeCollection4 = new CompositeCollection<LinkedList<Integer>>(collectionArray0);
      assertFalse(compositeCollection4.equals((Object)compositeCollection3));
  }
}
