/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 20:46:28 GMT 2025
 */

package org.apache.commons.collections4.multimap;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import java.io.NotSerializableException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.MultiSet;
import org.apache.commons.collections4.MultiValuedMap;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.NOPTransformer;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.multimap.AbstractMultiValuedMap;
import org.apache.commons.collections4.multimap.ArrayListValuedHashMap;
import org.apache.commons.collections4.multimap.HashSetValuedHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AbstractMultiValuedMap_ESTest extends AbstractMultiValuedMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(569);
      Integer integer1 = hashMap0.put(integer0, integer0);
      Integer integer2 = new Integer((-2312));
      hashMap0.put(integer2, integer1);
      ArrayListValuedHashMap<Integer, Integer> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Integer, Integer>(hashMap0);
      HashSetValuedHashMap<Integer, Integer> hashSetValuedHashMap0 = new HashSetValuedHashMap<Integer, Integer>(arrayListValuedHashMap0);
      assertFalse(hashSetValuedHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Integer, LinkedList<Integer>> hashMap0 = new HashMap<Integer, LinkedList<Integer>>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      hashMap0.put((Integer) null, linkedList0);
      HashSetValuedHashMap<Integer, LinkedList<Integer>> hashSetValuedHashMap0 = new HashSetValuedHashMap<Integer, LinkedList<Integer>>(hashMap0);
      boolean boolean0 = hashSetValuedHashMap0.removeMapping((Object) null, linkedList0);
      assertTrue(boolean0);
      assertTrue(hashSetValuedHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayListValuedHashMap<Predicate<Integer>, Transformer<Integer, Integer>> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Predicate<Integer>, Transformer<Integer, Integer>>(16, 16);
      Integer integer0 = new Integer((-552));
      boolean boolean0 = arrayListValuedHashMap0.removeMapping(integer0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-247));
      ArrayListValuedHashMap<Integer, Integer> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Integer, Integer>();
      Integer integer1 = new Integer((-247));
      AbstractMultiValuedMap.WrappedCollection abstractMultiValuedMap_WrappedCollection0 = arrayListValuedHashMap0.new WrappedCollection(integer1);
      abstractMultiValuedMap_WrappedCollection0.add((Integer) null);
      HashSetValuedHashMap<Integer, Integer> hashSetValuedHashMap0 = new HashSetValuedHashMap<Integer, Integer>(arrayListValuedHashMap0);
      boolean boolean0 = hashSetValuedHashMap0.containsMapping(integer1, integer0);
      assertFalse(hashSetValuedHashMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayListValuedHashMap<Integer, Transformer<Integer, Integer>> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Integer, Transformer<Integer, Integer>>();
      MultiSet<Integer> multiSet0 = arrayListValuedHashMap0.keys();
      HashMap<Collection<Integer>, Integer> hashMap0 = new HashMap<Collection<Integer>, Integer>(266);
      ArrayListValuedHashMap<Collection<Integer>, Integer> arrayListValuedHashMap1 = new ArrayListValuedHashMap<Collection<Integer>, Integer>(hashMap0);
      AbstractMultiValuedMap.WrappedCollection abstractMultiValuedMap_WrappedCollection0 = arrayListValuedHashMap1.new WrappedCollection(multiSet0);
      Object[] objectArray0 = abstractMultiValuedMap_WrappedCollection0.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      HashSetValuedHashMap<Locale.FilteringMode, LinkedList<Integer>> hashSetValuedHashMap0 = new HashSetValuedHashMap<Locale.FilteringMode, LinkedList<Integer>>();
      AbstractMultiValuedMap.WrappedCollection abstractMultiValuedMap_WrappedCollection0 = hashSetValuedHashMap0.new WrappedCollection(locale_FilteringMode0);
      Iterator<LinkedList<Integer>> iterator0 = abstractMultiValuedMap_WrappedCollection0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Locale.FilteringMode, Predicate<Locale.FilteringMode>> hashMap0 = new HashMap<Locale.FilteringMode, Predicate<Locale.FilteringMode>>();
      HashSetValuedHashMap<Locale.FilteringMode, Predicate<Locale.FilteringMode>> hashSetValuedHashMap0 = new HashSetValuedHashMap<Locale.FilteringMode, Predicate<Locale.FilteringMode>>(hashMap0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      AbstractMultiValuedMap.WrappedCollection abstractMultiValuedMap_WrappedCollection0 = hashSetValuedHashMap0.new WrappedCollection(locale_FilteringMode0);
      boolean boolean0 = abstractMultiValuedMap_WrappedCollection0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-1018));
      ArrayListValuedHashMap<Integer, Predicate<Integer>> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Integer, Predicate<Integer>>(0, (-36));
      AbstractMultiValuedMap.WrappedCollection abstractMultiValuedMap_WrappedCollection0 = arrayListValuedHashMap0.new WrappedCollection(integer0);
      Collection<Predicate<Integer>> collection0 = abstractMultiValuedMap_WrappedCollection0.getMapping();
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayListValuedHashMap<LinkedList<Integer>, HashSetValuedHashMap<Integer, Integer>> arrayListValuedHashMap0 = new ArrayListValuedHashMap<LinkedList<Integer>, HashSetValuedHashMap<Integer, Integer>>(440);
      arrayListValuedHashMap0.clear();
      assertTrue(arrayListValuedHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Locale.FilteringMode, Locale.FilteringMode> hashMap0 = new HashMap<Locale.FilteringMode, Locale.FilteringMode>();
      ArrayListValuedHashMap<Locale.FilteringMode, Locale.FilteringMode> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Locale.FilteringMode, Locale.FilteringMode>(hashMap0);
      Collection<Locale.FilteringMode> collection0 = arrayListValuedHashMap0.values();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashSetValuedHashMap<ComparatorPredicate.Criterion, Integer> hashSetValuedHashMap0 = new HashSetValuedHashMap<ComparatorPredicate.Criterion, Integer>((-1));
      int int0 = hashSetValuedHashMap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayListValuedHashMap<Integer, Integer> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Integer, Integer>();
      Integer integer0 = new Integer(253);
      AbstractMultiValuedMap.WrappedCollection abstractMultiValuedMap_WrappedCollection0 = arrayListValuedHashMap0.new WrappedCollection((Integer) null);
      abstractMultiValuedMap_WrappedCollection0.add(integer0);
      int int0 = arrayListValuedHashMap0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ArrayListValuedHashMap<Integer, Integer> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Integer, Integer>(hashMap0);
      Integer integer0 = new Integer((-3));
      AbstractMultiValuedMap.WrappedCollection abstractMultiValuedMap_WrappedCollection0 = arrayListValuedHashMap0.new WrappedCollection(integer0);
      abstractMultiValuedMap_WrappedCollection0.add(integer0);
      boolean boolean0 = arrayListValuedHashMap0.removeMapping(integer0, integer0);
      assertTrue(arrayListValuedHashMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayListValuedHashMap<Predicate<Integer>, Transformer<Integer, Integer>> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Predicate<Integer>, Transformer<Integer, Integer>>((-12));
      ArrayListValuedHashMap<Integer, Integer> arrayListValuedHashMap1 = new ArrayListValuedHashMap<Integer, Integer>((-12));
      boolean boolean0 = arrayListValuedHashMap0.removeMapping(arrayListValuedHashMap1, arrayListValuedHashMap1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayListValuedHashMap<Locale.FilteringMode, Locale.FilteringMode> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Locale.FilteringMode, Locale.FilteringMode>();
      HashSetValuedHashMap<Locale.FilteringMode, Locale.FilteringMode> hashSetValuedHashMap0 = new HashSetValuedHashMap<Locale.FilteringMode, Locale.FilteringMode>(arrayListValuedHashMap0);
      Collection<Locale.FilteringMode> collection0 = arrayListValuedHashMap0.remove(hashSetValuedHashMap0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(16);
      ArrayListValuedHashMap<Integer, Integer> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Integer, Integer>();
      arrayListValuedHashMap0.put(integer0, integer0);
      ArrayListValuedHashMap<Integer, Integer> arrayListValuedHashMap1 = new ArrayListValuedHashMap<Integer, Integer>(arrayListValuedHashMap0);
      boolean boolean0 = arrayListValuedHashMap0.putAll((MultiValuedMap<? extends Integer, ? extends Integer>) arrayListValuedHashMap1);
      assertFalse(arrayListValuedHashMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashSetValuedHashMap<Integer, Integer> hashSetValuedHashMap0 = new HashSetValuedHashMap<Integer, Integer>();
      boolean boolean0 = hashSetValuedHashMap0.putAll((MultiValuedMap<? extends Integer, ? extends Integer>) hashSetValuedHashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Predicate<Object>, Object> hashMap0 = new HashMap<Predicate<Object>, Object>();
      ArrayListValuedHashMap<Predicate<Object>, Object> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Predicate<Object>, Object>(hashMap0);
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      hashMap0.put((Predicate<Object>) null, linkedList0);
      boolean boolean0 = arrayListValuedHashMap0.putAll((Map<? extends Predicate<Object>, ?>) hashMap0);
      assertFalse(arrayListValuedHashMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashSetValuedHashMap<Integer, ComparatorPredicate.Criterion> hashSetValuedHashMap0 = new HashSetValuedHashMap<Integer, ComparatorPredicate.Criterion>();
      HashMap<Integer, ComparatorPredicate.Criterion> hashMap0 = new HashMap<Integer, ComparatorPredicate.Criterion>();
      boolean boolean0 = hashSetValuedHashMap0.putAll((Map<? extends Integer, ? extends ComparatorPredicate.Criterion>) hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArrayListValuedHashMap<Locale.FilteringMode, HashSetValuedHashMap<Integer, Integer>> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Locale.FilteringMode, HashSetValuedHashMap<Integer, Integer>>(247, 247);
      LinkedHashSet<HashSetValuedHashMap<Integer, Integer>> linkedHashSet0 = new LinkedHashSet<HashSetValuedHashMap<Integer, Integer>>();
      linkedHashSet0.add((HashSetValuedHashMap<Integer, Integer>) null);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      boolean boolean0 = arrayListValuedHashMap0.putAll(locale_FilteringMode0, (Iterable<? extends HashSetValuedHashMap<Integer, Integer>>) linkedHashSet0);
      assertFalse(arrayListValuedHashMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      HashSetValuedHashMap<Locale.FilteringMode, Locale.FilteringMode> hashSetValuedHashMap0 = new HashSetValuedHashMap<Locale.FilteringMode, Locale.FilteringMode>();
      boolean boolean0 = hashSetValuedHashMap0.put(locale_FilteringMode0, locale_FilteringMode0);
      assertFalse(hashSetValuedHashMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArrayListValuedHashMap<Transformer<Integer, Integer>, HashSetValuedHashMap<Integer, Integer>> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Transformer<Integer, Integer>, HashSetValuedHashMap<Integer, Integer>>();
      Map<Transformer<Integer, Integer>, ? extends Collection<HashSetValuedHashMap<Integer, Integer>>> map0 = arrayListValuedHashMap0.getMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = new Integer((-247));
      ArrayListValuedHashMap<Integer, Integer> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Integer, Integer>();
      AbstractMultiValuedMap.WrappedCollection abstractMultiValuedMap_WrappedCollection0 = arrayListValuedHashMap0.new WrappedCollection(integer0);
      abstractMultiValuedMap_WrappedCollection0.add(integer0);
      Map<Integer, ? extends Collection<Integer>> map0 = arrayListValuedHashMap0.getMap();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashSetValuedHashMap<Predicate<Locale.FilteringMode>, Locale.FilteringMode> hashSetValuedHashMap0 = new HashSetValuedHashMap<Predicate<Locale.FilteringMode>, Locale.FilteringMode>();
      Predicate<Locale.FilteringMode> predicate0 = NotNullPredicate.notNullPredicate();
      Collection<Locale.FilteringMode> collection0 = hashSetValuedHashMap0.get(predicate0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ArrayListValuedHashMap<LinkedList<Integer>, Locale.FilteringMode> arrayListValuedHashMap0 = new ArrayListValuedHashMap<LinkedList<Integer>, Locale.FilteringMode>(389, 0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      AbstractMultiValuedMap.WrappedCollection abstractMultiValuedMap_WrappedCollection0 = arrayListValuedHashMap0.new WrappedCollection(linkedList0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      abstractMultiValuedMap_WrappedCollection0.add(locale_FilteringMode0);
      boolean boolean0 = arrayListValuedHashMap0.containsValue(locale_FilteringMode0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashSetValuedHashMap<Locale.FilteringMode, Locale.FilteringMode> hashSetValuedHashMap0 = new HashSetValuedHashMap<Locale.FilteringMode, Locale.FilteringMode>();
      ArrayListValuedHashMap<Predicate<Integer>, Locale.FilteringMode> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Predicate<Integer>, Locale.FilteringMode>();
      boolean boolean0 = arrayListValuedHashMap0.containsValue(hashSetValuedHashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<Locale.FilteringMode, HashSetValuedHashMap<Integer, Integer>> hashMap0 = new HashMap<Locale.FilteringMode, HashSetValuedHashMap<Integer, Integer>>();
      ArrayListValuedHashMap<Locale.FilteringMode, HashSetValuedHashMap<Integer, Integer>> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Locale.FilteringMode, HashSetValuedHashMap<Integer, Integer>>(hashMap0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      // Undeclared exception!
      try { 
        arrayListValuedHashMap0.putAll(locale_FilteringMode0, (Iterable<? extends HashSetValuedHashMap<Integer, Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Values must not be null.
         //
         verifyException("org.apache.commons.collections4.multimap.AbstractMultiValuedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ArrayListValuedHashMap<Locale.FilteringMode, HashSetValuedHashMap<Integer, Integer>> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Locale.FilteringMode, HashSetValuedHashMap<Integer, Integer>>(0, (-2143416442));
      LinkedHashSet<HashSetValuedHashMap<Integer, Integer>> linkedHashSet0 = new LinkedHashSet<HashSetValuedHashMap<Integer, Integer>>();
      linkedHashSet0.add((HashSetValuedHashMap<Integer, Integer>) null);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      // Undeclared exception!
      try { 
        arrayListValuedHashMap0.putAll(locale_FilteringMode0, (Iterable<? extends HashSetValuedHashMap<Integer, Integer>>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2143416442
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashSetValuedHashMap<Locale.FilteringMode, Locale.FilteringMode> hashSetValuedHashMap0 = new HashSetValuedHashMap<Locale.FilteringMode, Locale.FilteringMode>(2418, (-853));
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      // Undeclared exception!
      try { 
        hashSetValuedHashMap0.put(locale_FilteringMode0, locale_FilteringMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -853
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashSetValuedHashMap<Locale.FilteringMode, HashSetValuedHashMap<Locale.FilteringMode, Locale.FilteringMode>> hashSetValuedHashMap0 = new HashSetValuedHashMap<Locale.FilteringMode, HashSetValuedHashMap<Locale.FilteringMode, Locale.FilteringMode>>(1, 1);
      // Undeclared exception!
      try { 
        hashSetValuedHashMap0.doWriteObject((ObjectOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multimap.AbstractMultiValuedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<Integer, Predicate<Integer>> hashMap0 = new HashMap<Integer, Predicate<Integer>>();
      HashSetValuedHashMap<Integer, Predicate<Integer>> hashSetValuedHashMap0 = new HashSetValuedHashMap<Integer, Predicate<Integer>>(hashMap0);
      Integer integer0 = new Integer(61);
      Collection<Predicate<Integer>> collection0 = hashSetValuedHashMap0.wrappedCollection(integer0);
      HashMap<LinkedList<Integer>, Integer> hashMap1 = new HashMap<LinkedList<Integer>, Integer>();
      ArrayListValuedHashMap<LinkedList<Integer>, Object> arrayListValuedHashMap0 = new ArrayListValuedHashMap<LinkedList<Integer>, Object>(hashMap1);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      AbstractMultiValuedMap.WrappedCollection abstractMultiValuedMap_WrappedCollection0 = arrayListValuedHashMap0.new WrappedCollection(linkedList0);
      abstractMultiValuedMap_WrappedCollection0.add(collection0);
      MockFile mockFile0 = new MockFile("org.apache.commons.collections4.multimap.AbstractMultiValuedMap$KeysMultiSet$MapEntryTransformer");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(dataOutputStream0);
      try { 
        arrayListValuedHashMap0.doWriteObject(objectOutputStream0);
        fail("Expecting exception: NotSerializableException");
      
      } catch(NotSerializableException e) {
         //
         // org.apache.commons.collections4.multimap.AbstractSetValuedMap$WrappedSet
         //
         verifyException("java.io.ObjectOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashSetValuedHashMap<Locale.FilteringMode, Locale.FilteringMode> hashSetValuedHashMap0 = new HashSetValuedHashMap<Locale.FilteringMode, Locale.FilteringMode>();
      // Undeclared exception!
      try { 
        hashSetValuedHashMap0.doReadObject((ObjectInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multimap.AbstractMultiValuedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashSetValuedHashMap<Locale.FilteringMode, HashSetValuedHashMap<Integer, Locale.FilteringMode>> hashSetValuedHashMap0 = new HashSetValuedHashMap<Locale.FilteringMode, HashSetValuedHashMap<Integer, Locale.FilteringMode>>(0, 2635);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      AbstractMultiValuedMap.WrappedCollection abstractMultiValuedMap_WrappedCollection0 = hashSetValuedHashMap0.new WrappedCollection(locale_FilteringMode0);
      HashMap<Integer, Locale.FilteringMode> hashMap0 = new HashMap<Integer, Locale.FilteringMode>();
      HashSetValuedHashMap<Integer, Locale.FilteringMode> hashSetValuedHashMap1 = new HashSetValuedHashMap<Integer, Locale.FilteringMode>(hashMap0);
      abstractMultiValuedMap_WrappedCollection0.add(hashSetValuedHashMap1);
      boolean boolean0 = hashSetValuedHashMap0.put(locale_FilteringMode0, hashSetValuedHashMap1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashSetValuedHashMap<Predicate<Integer>, LinkedList<Integer>> hashSetValuedHashMap0 = new HashSetValuedHashMap<Predicate<Integer>, LinkedList<Integer>>(0, 0);
      Set<Predicate<Integer>> set0 = hashSetValuedHashMap0.keySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Integer integer0 = new Integer(2);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.put(integer0, integer0);
      ArrayListValuedHashMap<Integer, Integer> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Integer, Integer>(hashMap0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
      arrayListValuedHashMap0.doWriteObject(objectOutputStream0);
      assertEquals(98, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashSetValuedHashMap<Locale.FilteringMode, Locale.FilteringMode> hashSetValuedHashMap0 = new HashSetValuedHashMap<Locale.FilteringMode, Locale.FilteringMode>();
      ArrayListValuedHashMap<LinkedList<Locale.FilteringMode>, Integer> arrayListValuedHashMap0 = new ArrayListValuedHashMap<LinkedList<Locale.FilteringMode>, Integer>();
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      Integer integer0 = new Integer((-477));
      arrayListValuedHashMap0.put(linkedList0, integer0);
      boolean boolean0 = arrayListValuedHashMap0.equals(hashSetValuedHashMap0);
      assertFalse(arrayListValuedHashMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Integer integer0 = new Integer(16);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.put(integer0, integer0);
      ArrayListValuedHashMap<HashSetValuedHashMap<Integer, Integer>, Locale.FilteringMode> arrayListValuedHashMap0 = new ArrayListValuedHashMap<HashSetValuedHashMap<Integer, Integer>, Locale.FilteringMode>();
      HashSetValuedHashMap<Integer, Integer> hashSetValuedHashMap0 = new HashSetValuedHashMap<Integer, Integer>();
      hashSetValuedHashMap0.putAll((Map<? extends Integer, ? extends Integer>) hashMap0);
      AbstractMultiValuedMap.WrappedCollection abstractMultiValuedMap_WrappedCollection0 = arrayListValuedHashMap0.new WrappedCollection(hashSetValuedHashMap0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      abstractMultiValuedMap_WrappedCollection0.add(locale_FilteringMode0);
      HashSetValuedHashMap<Integer, Integer> hashSetValuedHashMap1 = new HashSetValuedHashMap<Integer, Integer>(hashMap0);
      AbstractMultiValuedMap.WrappedCollection abstractMultiValuedMap_WrappedCollection1 = arrayListValuedHashMap0.new WrappedCollection(hashSetValuedHashMap1);
      boolean boolean0 = abstractMultiValuedMap_WrappedCollection1.retainAll(abstractMultiValuedMap_WrappedCollection0);
      assertFalse(hashSetValuedHashMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ArrayListValuedHashMap<Integer, Integer> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Integer, Integer>();
      MultiSet<Integer> multiSet0 = arrayListValuedHashMap0.keys();
      boolean boolean0 = arrayListValuedHashMap0.putAll((Integer) null, (Iterable<? extends Integer>) multiSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ArrayListValuedHashMap<HashSetValuedHashMap<Integer, Integer>, Collection<Integer>> arrayListValuedHashMap0 = new ArrayListValuedHashMap<HashSetValuedHashMap<Integer, Integer>, Collection<Integer>>(4808, 3);
      HashSetValuedHashMap<Integer, Integer> hashSetValuedHashMap0 = new HashSetValuedHashMap<Integer, Integer>(4808, 0);
      AbstractMultiValuedMap.WrappedCollection abstractMultiValuedMap_WrappedCollection0 = arrayListValuedHashMap0.new WrappedCollection(hashSetValuedHashMap0);
      String string0 = abstractMultiValuedMap_WrappedCollection0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ArrayListValuedHashMap<HashSetValuedHashMap<Integer, Integer>, Collection<Integer>> arrayListValuedHashMap0 = new ArrayListValuedHashMap<HashSetValuedHashMap<Integer, Integer>, Collection<Integer>>(4808, 3);
      HashSetValuedHashMap<Integer, Integer> hashSetValuedHashMap0 = new HashSetValuedHashMap<Integer, Integer>(4808, 0);
      AbstractMultiValuedMap.WrappedCollection abstractMultiValuedMap_WrappedCollection0 = arrayListValuedHashMap0.new WrappedCollection(hashSetValuedHashMap0);
      Stack<Integer> stack0 = new Stack<Integer>();
      abstractMultiValuedMap_WrappedCollection0.add(stack0);
      String string0 = abstractMultiValuedMap_WrappedCollection0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ArrayListValuedHashMap<Transformer<Integer, Integer>, Predicate<Integer>> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Transformer<Integer, Integer>, Predicate<Integer>>(0, 0);
      Transformer<Integer, Integer> transformer0 = NOPTransformer.nopTransformer();
      AbstractMultiValuedMap.WrappedCollection abstractMultiValuedMap_WrappedCollection0 = arrayListValuedHashMap0.new WrappedCollection(transformer0);
      // Undeclared exception!
      try { 
        abstractMultiValuedMap_WrappedCollection0.toArray((Predicate<Integer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$EmptyList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ArrayListValuedHashMap<Integer, Integer> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Integer, Integer>();
      MultiSet<Integer> multiSet0 = arrayListValuedHashMap0.keys();
      HashMap<HashSetValuedHashMap<Integer, Integer>, Locale.FilteringMode> hashMap0 = new HashMap<HashSetValuedHashMap<Integer, Integer>, Locale.FilteringMode>();
      HashSetValuedHashMap<HashSetValuedHashMap<Integer, Integer>, Locale.FilteringMode> hashSetValuedHashMap0 = new HashSetValuedHashMap<HashSetValuedHashMap<Integer, Integer>, Locale.FilteringMode>(hashMap0);
      HashSetValuedHashMap<Integer, Integer> hashSetValuedHashMap1 = new HashSetValuedHashMap<Integer, Integer>();
      AbstractMultiValuedMap.WrappedCollection abstractMultiValuedMap_WrappedCollection0 = hashSetValuedHashMap0.new WrappedCollection(hashSetValuedHashMap1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      abstractMultiValuedMap_WrappedCollection0.add(locale_FilteringMode0);
      boolean boolean0 = abstractMultiValuedMap_WrappedCollection0.retainAll(multiSet0);
      assertTrue(abstractMultiValuedMap_WrappedCollection0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ArrayListValuedHashMap<LinkedList<Locale.FilteringMode>, HashSetValuedHashMap<Locale.FilteringMode, Locale.FilteringMode>> arrayListValuedHashMap0 = new ArrayListValuedHashMap<LinkedList<Locale.FilteringMode>, HashSetValuedHashMap<Locale.FilteringMode, Locale.FilteringMode>>(16);
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      AbstractMultiValuedMap.WrappedCollection abstractMultiValuedMap_WrappedCollection0 = arrayListValuedHashMap0.new WrappedCollection(linkedList0);
      boolean boolean0 = abstractMultiValuedMap_WrappedCollection0.retainAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ArrayListValuedHashMap<ComparatorPredicate.Criterion, Integer> arrayListValuedHashMap0 = new ArrayListValuedHashMap<ComparatorPredicate.Criterion, Integer>(0);
      HashSetValuedHashMap<ComparatorPredicate.Criterion, Integer> hashSetValuedHashMap0 = new HashSetValuedHashMap<ComparatorPredicate.Criterion, Integer>(arrayListValuedHashMap0);
      Collection<Map.Entry<ComparatorPredicate.Criterion, Integer>> collection0 = (Collection<Map.Entry<ComparatorPredicate.Criterion, Integer>>)hashSetValuedHashMap0.entries();
      HashSetValuedHashMap<Integer, Integer> hashSetValuedHashMap1 = new HashSetValuedHashMap<Integer, Integer>(0);
      HashSetValuedHashMap<HashSetValuedHashMap<Integer, Integer>, Transformer<Integer, Integer>> hashSetValuedHashMap2 = new HashSetValuedHashMap<HashSetValuedHashMap<Integer, Integer>, Transformer<Integer, Integer>>(0);
      AbstractMultiValuedMap.WrappedCollection abstractMultiValuedMap_WrappedCollection0 = hashSetValuedHashMap2.new WrappedCollection(hashSetValuedHashMap1);
      boolean boolean0 = abstractMultiValuedMap_WrappedCollection0.removeAll(collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashSetValuedHashMap<Locale.FilteringMode, HashSetValuedHashMap<Integer, Locale.FilteringMode>> hashSetValuedHashMap0 = new HashSetValuedHashMap<Locale.FilteringMode, HashSetValuedHashMap<Integer, Locale.FilteringMode>>(0, 2635);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      AbstractMultiValuedMap.WrappedCollection abstractMultiValuedMap_WrappedCollection0 = hashSetValuedHashMap0.new WrappedCollection(locale_FilteringMode0);
      HashMap<Integer, Locale.FilteringMode> hashMap0 = new HashMap<Integer, Locale.FilteringMode>();
      HashSetValuedHashMap<Integer, Locale.FilteringMode> hashSetValuedHashMap1 = new HashSetValuedHashMap<Integer, Locale.FilteringMode>(hashMap0);
      abstractMultiValuedMap_WrappedCollection0.add(hashSetValuedHashMap1);
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      boolean boolean0 = abstractMultiValuedMap_WrappedCollection0.removeAll(stack0);
      assertFalse(abstractMultiValuedMap_WrappedCollection0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HashSetValuedHashMap<Integer, Integer> hashSetValuedHashMap0 = new HashSetValuedHashMap<Integer, Integer>();
      Integer integer0 = new Integer((-429));
      AbstractMultiValuedMap.WrappedCollection abstractMultiValuedMap_WrappedCollection0 = hashSetValuedHashMap0.new WrappedCollection(integer0);
      abstractMultiValuedMap_WrappedCollection0.add(integer0);
      abstractMultiValuedMap_WrappedCollection0.remove(integer0);
      assertTrue(hashSetValuedHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HashSetValuedHashMap<Locale.FilteringMode, Locale.FilteringMode> hashSetValuedHashMap0 = new HashSetValuedHashMap<Locale.FilteringMode, Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      AbstractMultiValuedMap.WrappedCollection abstractMultiValuedMap_WrappedCollection0 = hashSetValuedHashMap0.new WrappedCollection(locale_FilteringMode0);
      boolean boolean0 = abstractMultiValuedMap_WrappedCollection0.remove(locale_FilteringMode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HashSetValuedHashMap<Integer, LinkedList<Integer>> hashSetValuedHashMap0 = new HashSetValuedHashMap<Integer, LinkedList<Integer>>();
      Integer integer0 = new Integer(4);
      HashSetValuedHashMap<Integer, Integer> hashSetValuedHashMap1 = new HashSetValuedHashMap<Integer, Integer>(4);
      AbstractMultiValuedMap.WrappedCollection abstractMultiValuedMap_WrappedCollection0 = hashSetValuedHashMap1.new WrappedCollection(integer0);
      abstractMultiValuedMap_WrappedCollection0.add(integer0);
      boolean boolean0 = abstractMultiValuedMap_WrappedCollection0.remove(hashSetValuedHashMap0);
      assertFalse(abstractMultiValuedMap_WrappedCollection0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ArrayListValuedHashMap<Integer, Integer> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Integer, Integer>();
      AbstractMultiValuedMap.WrappedCollection abstractMultiValuedMap_WrappedCollection0 = arrayListValuedHashMap0.new WrappedCollection((Integer) null);
      abstractMultiValuedMap_WrappedCollection0.add((Integer) null);
      boolean boolean0 = arrayListValuedHashMap0.putAll((Integer) null, (Iterable<? extends Integer>) abstractMultiValuedMap_WrappedCollection0);
      assertFalse(abstractMultiValuedMap_WrappedCollection0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ArrayListValuedHashMap<Integer, Integer> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Integer, Integer>();
      AbstractMultiValuedMap.WrappedCollection abstractMultiValuedMap_WrappedCollection0 = arrayListValuedHashMap0.new WrappedCollection((Integer) null);
      abstractMultiValuedMap_WrappedCollection0.add((Integer) null);
      TreeSet<Locale.FilteringMode> treeSet0 = new TreeSet<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      treeSet0.add(locale_FilteringMode0);
      boolean boolean0 = abstractMultiValuedMap_WrappedCollection0.containsAll(treeSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ArrayListValuedHashMap<Integer, Integer> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Integer, Integer>();
      AbstractMultiValuedMap.WrappedCollection abstractMultiValuedMap_WrappedCollection0 = arrayListValuedHashMap0.new WrappedCollection((Integer) null);
      abstractMultiValuedMap_WrappedCollection0.add((Integer) null);
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      boolean boolean0 = abstractMultiValuedMap_WrappedCollection0.containsAll(stack0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ArrayListValuedHashMap<Transformer<Integer, Integer>, LinkedList<Integer>> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Transformer<Integer, Integer>, LinkedList<Integer>>(0);
      Object object0 = new Object();
      List<LinkedList<Integer>> list0 = arrayListValuedHashMap0.remove(object0);
      ArrayListValuedHashMap<Integer, Integer> arrayListValuedHashMap1 = new ArrayListValuedHashMap<Integer, Integer>();
      Integer integer0 = new Integer((-1608));
      AbstractMultiValuedMap.WrappedCollection abstractMultiValuedMap_WrappedCollection0 = arrayListValuedHashMap1.new WrappedCollection(integer0);
      boolean boolean0 = abstractMultiValuedMap_WrappedCollection0.containsAll(list0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ArrayListValuedHashMap<LinkedList<Integer>, Locale.FilteringMode> arrayListValuedHashMap0 = new ArrayListValuedHashMap<LinkedList<Integer>, Locale.FilteringMode>(389, 0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      AbstractMultiValuedMap.WrappedCollection abstractMultiValuedMap_WrappedCollection0 = arrayListValuedHashMap0.new WrappedCollection(linkedList0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      abstractMultiValuedMap_WrappedCollection0.add(locale_FilteringMode0);
      Integer integer0 = new Integer((-1));
      boolean boolean0 = abstractMultiValuedMap_WrappedCollection0.contains(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Integer integer0 = new Integer(5);
      ArrayListValuedHashMap<Integer, HashSetValuedHashMap<Integer, Integer>> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Integer, HashSetValuedHashMap<Integer, Integer>>(0);
      AbstractMultiValuedMap.WrappedCollection abstractMultiValuedMap_WrappedCollection0 = arrayListValuedHashMap0.new WrappedCollection(integer0);
      int int0 = abstractMultiValuedMap_WrappedCollection0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ArrayListValuedHashMap<Integer, Predicate<Locale.FilteringMode>> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Integer, Predicate<Locale.FilteringMode>>();
      AbstractMultiValuedMap.WrappedCollection abstractMultiValuedMap_WrappedCollection0 = arrayListValuedHashMap0.new WrappedCollection(integer0);
      Factory<Boolean> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Locale.FilteringMode, Boolean> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Boolean>) factory0);
      Predicate<Locale.FilteringMode> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Locale.FilteringMode, Boolean>) transformer0);
      abstractMultiValuedMap_WrappedCollection0.add(predicate0);
      abstractMultiValuedMap_WrappedCollection0.clear();
      assertTrue(abstractMultiValuedMap_WrappedCollection0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ArrayListValuedHashMap<Integer, Integer> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Integer, Integer>();
      AbstractMultiValuedMap.WrappedCollection abstractMultiValuedMap_WrappedCollection0 = arrayListValuedHashMap0.new WrappedCollection((Integer) null);
      abstractMultiValuedMap_WrappedCollection0.clear();
      assertTrue(abstractMultiValuedMap_WrappedCollection0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HashMap<Integer, Predicate<Integer>> hashMap0 = new HashMap<Integer, Predicate<Integer>>();
      HashSetValuedHashMap<Integer, Predicate<Integer>> hashSetValuedHashMap0 = new HashSetValuedHashMap<Integer, Predicate<Integer>>(hashMap0);
      Integer integer0 = new Integer(61);
      Collection<Predicate<Integer>> collection0 = hashSetValuedHashMap0.wrappedCollection(integer0);
      HashMap<LinkedList<Integer>, Integer> hashMap1 = new HashMap<LinkedList<Integer>, Integer>();
      ArrayListValuedHashMap<LinkedList<Integer>, Object> arrayListValuedHashMap0 = new ArrayListValuedHashMap<LinkedList<Integer>, Object>(hashMap1);
      HashSetValuedHashMap<Object, Object> hashSetValuedHashMap1 = new HashSetValuedHashMap<Object, Object>(arrayListValuedHashMap0);
      AbstractMultiValuedMap.WrappedCollection abstractMultiValuedMap_WrappedCollection0 = hashSetValuedHashMap1.new WrappedCollection(hashMap0);
      boolean boolean0 = abstractMultiValuedMap_WrappedCollection0.addAll(collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Integer integer0 = new Integer(18);
      HashSetValuedHashMap<Integer, Integer> hashSetValuedHashMap0 = new HashSetValuedHashMap<Integer, Integer>(18, 18);
      AbstractMultiValuedMap.WrappedCollection abstractMultiValuedMap_WrappedCollection0 = hashSetValuedHashMap0.new WrappedCollection(integer0);
      abstractMultiValuedMap_WrappedCollection0.add(integer0);
      boolean boolean0 = abstractMultiValuedMap_WrappedCollection0.add(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HashMap<Predicate<Integer>, Predicate<Integer>> hashMap0 = new HashMap<Predicate<Integer>, Predicate<Integer>>();
      HashSetValuedHashMap<Predicate<Integer>, Predicate<Integer>> hashSetValuedHashMap0 = new HashSetValuedHashMap<Predicate<Integer>, Predicate<Integer>>(hashMap0);
      boolean boolean0 = hashSetValuedHashMap0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HashMap<Integer, Predicate<Integer>> hashMap0 = new HashMap<Integer, Predicate<Integer>>();
      HashSetValuedHashMap<Integer, Predicate<Integer>> hashSetValuedHashMap0 = new HashSetValuedHashMap<Integer, Predicate<Integer>>(hashMap0);
      MapIterator<Integer, Predicate<Integer>> mapIterator0 = hashSetValuedHashMap0.mapIterator();
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Integer integer0 = new Integer(2);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.put(integer0, integer0);
      ArrayListValuedHashMap<Integer, Integer> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Integer, Integer>(hashMap0);
      MultiSet<Integer> multiSet0 = arrayListValuedHashMap0.keys();
      assertNotNull(multiSet0);
      
      HashSetValuedHashMap<Integer, Integer> hashSetValuedHashMap0 = new HashSetValuedHashMap<Integer, Integer>(arrayListValuedHashMap0);
      boolean boolean0 = hashSetValuedHashMap0.putAll(integer0, (Iterable<? extends Integer>) multiSet0);
      assertFalse(boolean0);
      assertTrue(multiSet0.contains(2));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      ArrayListValuedHashMap<Locale.FilteringMode, Integer> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Locale.FilteringMode, Integer>(4377);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      boolean boolean0 = arrayListValuedHashMap0.putAll(locale_FilteringMode0, (Iterable<? extends Integer>) serviceLoader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HashSetValuedHashMap<HashSetValuedHashMap<Boolean, Locale.FilteringMode>, TransformerPredicate<Locale.FilteringMode>> hashSetValuedHashMap0 = new HashSetValuedHashMap<HashSetValuedHashMap<Boolean, Locale.FilteringMode>, TransformerPredicate<Locale.FilteringMode>>();
      hashSetValuedHashMap0.asMap();
      Map<HashSetValuedHashMap<Boolean, Locale.FilteringMode>, Collection<TransformerPredicate<Locale.FilteringMode>>> map0 = hashSetValuedHashMap0.asMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ArrayListValuedHashMap<Integer, Integer> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Integer, Integer>();
      MultiSet<Integer> multiSet0 = arrayListValuedHashMap0.keys();
      MultiSet<Integer> multiSet1 = arrayListValuedHashMap0.keys();
      assertSame(multiSet1, multiSet0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ArrayListValuedHashMap<Integer, Integer> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        arrayListValuedHashMap0.putAll((MultiValuedMap<? extends Integer, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.multimap.AbstractMultiValuedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ArrayListValuedHashMap<Transformer<Integer, Integer>, Locale.FilteringMode> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Transformer<Integer, Integer>, Locale.FilteringMode>((byte)0);
      // Undeclared exception!
      try { 
        arrayListValuedHashMap0.putAll((Map<? extends Transformer<Integer, Integer>, ? extends Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.multimap.AbstractMultiValuedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Integer integer0 = new Integer(16);
      ArrayListValuedHashMap<Integer, Integer> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Integer, Integer>();
      arrayListValuedHashMap0.put(integer0, integer0);
      // Undeclared exception!
      try { 
        arrayListValuedHashMap0.putAll((MultiValuedMap<? extends Integer, ? extends Integer>) arrayListValuedHashMap0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      HashSetValuedHashMap<Integer, Locale.FilteringMode> hashSetValuedHashMap0 = new HashSetValuedHashMap<Integer, Locale.FilteringMode>();
      Collection<Locale.FilteringMode> collection0 = hashSetValuedHashMap0.values();
      Collection<Locale.FilteringMode> collection1 = hashSetValuedHashMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      HashSetValuedHashMap<Integer, LinkedList<Integer>> hashSetValuedHashMap0 = new HashSetValuedHashMap<Integer, LinkedList<Integer>>(343);
      boolean boolean0 = hashSetValuedHashMap0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Integer, LinkedList<Integer>> hashMap0 = new HashMap<Integer, LinkedList<Integer>>();
      hashMap0.put((Integer) null, linkedList0);
      HashSetValuedHashMap<Integer, LinkedList<Integer>> hashSetValuedHashMap0 = new HashSetValuedHashMap<Integer, LinkedList<Integer>>(hashMap0);
      boolean boolean0 = hashSetValuedHashMap0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Integer, LinkedList<Integer>> hashMap0 = new HashMap<Integer, LinkedList<Integer>>();
      hashMap0.put((Integer) null, linkedList0);
      HashSetValuedHashMap<Integer, LinkedList<Integer>> hashSetValuedHashMap0 = new HashSetValuedHashMap<Integer, LinkedList<Integer>>(hashMap0);
      boolean boolean0 = hashSetValuedHashMap0.removeMapping((Object) null, (Object) null);
      assertFalse(hashSetValuedHashMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ArrayListValuedHashMap<Predicate<Integer>, Transformer<Integer, Integer>> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Predicate<Integer>, Transformer<Integer, Integer>>(16, 16);
      Collection<Map.Entry<Predicate<Integer>, Transformer<Integer, Integer>>> collection0 = (Collection<Map.Entry<Predicate<Integer>, Transformer<Integer, Integer>>>)arrayListValuedHashMap0.entries();
      Collection<Map.Entry<Predicate<Integer>, Transformer<Integer, Integer>>> collection1 = (Collection<Map.Entry<Predicate<Integer>, Transformer<Integer, Integer>>>)arrayListValuedHashMap0.entries();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ArrayListValuedHashMap<Integer, Integer> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Integer, Integer>();
      Integer integer0 = new Integer((-1));
      AbstractMultiValuedMap.WrappedCollection abstractMultiValuedMap_WrappedCollection0 = arrayListValuedHashMap0.new WrappedCollection(integer0);
      abstractMultiValuedMap_WrappedCollection0.add(integer0);
      HashSetValuedHashMap<Integer, Integer> hashSetValuedHashMap0 = new HashSetValuedHashMap<Integer, Integer>(arrayListValuedHashMap0);
      boolean boolean0 = hashSetValuedHashMap0.containsMapping(integer0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<LinkedList<Integer>, Integer> hashMap0 = new HashMap<LinkedList<Integer>, Integer>();
      ArrayListValuedHashMap<LinkedList<Integer>, Object> arrayListValuedHashMap0 = new ArrayListValuedHashMap<LinkedList<Integer>, Object>(hashMap0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      AbstractMultiValuedMap.WrappedCollection abstractMultiValuedMap_WrappedCollection0 = arrayListValuedHashMap0.new WrappedCollection(linkedList1);
      ArrayListValuedHashMap<LinkedList<Integer>, Predicate<Object>> arrayListValuedHashMap1 = new ArrayListValuedHashMap<LinkedList<Integer>, Predicate<Object>>();
      boolean boolean0 = arrayListValuedHashMap1.containsMapping(abstractMultiValuedMap_WrappedCollection0, linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Object object0 = new Object();
      ArrayListValuedHashMap<Integer, ComparatorPredicate.Criterion> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Integer, ComparatorPredicate.Criterion>();
      boolean boolean0 = arrayListValuedHashMap0.containsKey(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ArrayListValuedHashMap<ComparatorPredicate.Criterion, Integer> arrayListValuedHashMap0 = new ArrayListValuedHashMap<ComparatorPredicate.Criterion, Integer>(0);
      HashSetValuedHashMap<ComparatorPredicate.Criterion, Integer> hashSetValuedHashMap0 = new HashSetValuedHashMap<ComparatorPredicate.Criterion, Integer>(arrayListValuedHashMap0);
      hashSetValuedHashMap0.hashCode();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ArrayListValuedHashMap<Integer, Predicate<Integer>> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Integer, Predicate<Integer>>(278, 278);
      String string0 = arrayListValuedHashMap0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      HashSetValuedHashMap<Locale.FilteringMode, Locale.FilteringMode> hashSetValuedHashMap0 = new HashSetValuedHashMap<Locale.FilteringMode, Locale.FilteringMode>();
      HashMap<Locale.FilteringMode, Collection<Locale.FilteringMode>> hashMap0 = new HashMap<Locale.FilteringMode, Collection<Locale.FilteringMode>>(769);
      hashSetValuedHashMap0.setMap(hashMap0);
      assertTrue(hashSetValuedHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Integer, LinkedList<Integer>> hashMap0 = new HashMap<Integer, LinkedList<Integer>>();
      hashMap0.put((Integer) null, linkedList0);
      HashSetValuedHashMap<Integer, LinkedList<Integer>> hashSetValuedHashMap0 = new HashSetValuedHashMap<Integer, LinkedList<Integer>>(hashMap0);
      hashSetValuedHashMap0.mapIterator();
      assertFalse(hashSetValuedHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      HashSetValuedHashMap<Locale.FilteringMode, Locale.FilteringMode> hashSetValuedHashMap0 = new HashSetValuedHashMap<Locale.FilteringMode, Locale.FilteringMode>();
      ArrayListValuedHashMap<LinkedList<Locale.FilteringMode>, Integer> arrayListValuedHashMap0 = new ArrayListValuedHashMap<LinkedList<Locale.FilteringMode>, Integer>();
      boolean boolean0 = arrayListValuedHashMap0.equals(hashSetValuedHashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Integer integer0 = new Integer(61);
      HashMap<LinkedList<Integer>, Integer> hashMap0 = new HashMap<LinkedList<Integer>, Integer>();
      ArrayListValuedHashMap<LinkedList<Integer>, Object> arrayListValuedHashMap0 = new ArrayListValuedHashMap<LinkedList<Integer>, Object>(hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      AbstractMultiValuedMap.WrappedCollection abstractMultiValuedMap_WrappedCollection0 = arrayListValuedHashMap0.new WrappedCollection(linkedList0);
      boolean boolean0 = abstractMultiValuedMap_WrappedCollection0.contains(integer0);
      assertFalse(boolean0);
  }
}
