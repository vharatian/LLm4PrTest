/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 18:20:36 GMT 2025
 */

package org.apache.commons.collections4.list;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PushbackInputStream;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.list.AbstractLinkedList;
import org.apache.commons.collections4.list.CursorableLinkedList;
import org.apache.commons.collections4.list.NodeCachingLinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AbstractLinkedList_ESTest extends AbstractLinkedList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(nodeCachingLinkedList0, 0, 0);
      abstractLinkedList_LinkedSubList0.size = (-871);
      // Undeclared exception!
      try { 
        abstractLinkedList_LinkedSubList0.set(0, nodeCachingLinkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '0' out of bounds for size '-871'
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Object object0 = new Object();
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>((-1682));
      nodeCachingLinkedList0.add(object0);
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(nodeCachingLinkedList0, 1, 1);
      // Undeclared exception!
      try { 
        abstractLinkedList_LinkedSubList0.subList(739, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 3
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LinkedHashSet<LinkedList<Object>> linkedHashSet0 = new LinkedHashSet<LinkedList<Object>>();
      NodeCachingLinkedList<LinkedList<Object>> nodeCachingLinkedList0 = new NodeCachingLinkedList<LinkedList<Object>>(linkedHashSet0);
      AbstractLinkedList.LinkedSubList<LinkedList<Object>> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<LinkedList<Object>>(nodeCachingLinkedList0, 0, 0);
      abstractLinkedList_LinkedSubList0.add((LinkedList<Object>) null);
      abstractLinkedList_LinkedSubList0.add((LinkedList<Object>) null);
      abstractLinkedList_LinkedSubList0.remove(0);
      assertEquals(1, nodeCachingLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      NodeCachingLinkedList<LinkedList<Object>> nodeCachingLinkedList0 = new NodeCachingLinkedList<LinkedList<Object>>(0);
      AbstractLinkedList.LinkedSubList<LinkedList<Object>> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<LinkedList<Object>>(nodeCachingLinkedList0, 0, 0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      abstractLinkedList_LinkedSubList0.add(linkedList0);
      abstractLinkedList_LinkedSubList0.offset = 2661;
      // Undeclared exception!
      try { 
        abstractLinkedList_LinkedSubList0.get(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (2661) greater than the size of the list (1).
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Object object0 = new Object();
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>((-1682));
      nodeCachingLinkedList0.add(object0);
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(nodeCachingLinkedList0, 1, 1);
      abstractLinkedList_LinkedSubList0.add(object0);
      assertEquals(2, nodeCachingLinkedList0.size());
      assertTrue(abstractLinkedList_LinkedSubList0.contains(object0));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      NodeCachingLinkedList<LinkedList<Object>> nodeCachingLinkedList0 = new NodeCachingLinkedList<LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      nodeCachingLinkedList0.add(linkedList0);
      CursorableLinkedList<LinkedList<Object>> cursorableLinkedList0 = new CursorableLinkedList<LinkedList<Object>>(nodeCachingLinkedList0);
      assertTrue(cursorableLinkedList0.contains(linkedList0));
      
      AbstractLinkedList.LinkedSubList<LinkedList<Object>> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<LinkedList<Object>>(cursorableLinkedList0, 0, 1);
      assertTrue(abstractLinkedList_LinkedSubList0.contains(linkedList0));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(nodeCachingLinkedList0, 0, 0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      abstractLinkedList_LinkedSubList0.add((Object) linkedList0);
      abstractLinkedList_LinkedSubList0.add((Object) linkedList0);
      abstractLinkedList_LinkedSubList0.clear();
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(nodeCachingLinkedList0, 0, 0);
      abstractLinkedList_LinkedSubList0.add((Object) nodeCachingLinkedList0);
      abstractLinkedList_LinkedSubList0.size = (-871);
      boolean boolean0 = nodeCachingLinkedList0.retainAll(abstractLinkedList_LinkedSubList0);
      //  // Unstable assertion: assertEquals(1, nodeCachingLinkedList0.size());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CursorableLinkedList<LinkedList<Object>> cursorableLinkedList0 = new CursorableLinkedList<LinkedList<Object>>();
      cursorableLinkedList0.add((LinkedList<Object>) null);
      cursorableLinkedList0.add((LinkedList<Object>) null);
      cursorableLinkedList0.hashCode();
      assertFalse(cursorableLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(cursorableLinkedList0, 0, 0);
      AbstractLinkedList.LinkedSubListIterator<Object> abstractLinkedList_LinkedSubListIterator0 = new AbstractLinkedList.LinkedSubListIterator<Object>(abstractLinkedList_LinkedSubList0, 0);
      abstractLinkedList_LinkedSubListIterator0.nextIndex = 666;
      abstractLinkedList_LinkedSubListIterator0.previous();
      assertEquals(665, abstractLinkedList_LinkedSubListIterator0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      NodeCachingLinkedList<ByteArrayInputStream> nodeCachingLinkedList0 = new NodeCachingLinkedList<ByteArrayInputStream>(20);
      AbstractLinkedList.Node<ByteArrayInputStream> abstractLinkedList_Node0 = nodeCachingLinkedList0.createHeaderNode();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      nodeCachingLinkedList0.updateNode(abstractLinkedList_Node0, byteArrayInputStream0);
      assertFalse(nodeCachingLinkedList0.contains(byteArrayInputStream0));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      nodeCachingLinkedList0.subList(0, 0);
      assertTrue(nodeCachingLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CursorableLinkedList<NodeCachingLinkedList<Object>> cursorableLinkedList0 = new CursorableLinkedList<NodeCachingLinkedList<Object>>();
      MockPrintStream mockPrintStream0 = new MockPrintStream("toIndex = ");
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>(cursorableLinkedList0);
      AbstractLinkedList.Node<Object> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Object>();
      nodeCachingLinkedList0.addNodeBefore(abstractLinkedList_Node0, mockPrintStream0);
      assertEquals(1, nodeCachingLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      AbstractLinkedList.Node<Object> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Object>();
      cursorableLinkedList0.addNodeAfter(abstractLinkedList_Node0, abstractLinkedList_Node0);
      assertEquals(1, cursorableLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      NodeCachingLinkedList<LinkedList<Object>> nodeCachingLinkedList0 = new NodeCachingLinkedList<LinkedList<Object>>(0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      nodeCachingLinkedList0.add(0, linkedList0);
      assertTrue(nodeCachingLinkedList0.contains(linkedList0));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      AbstractLinkedList.Node<LinkedList<Object>> abstractLinkedList_Node0 = new AbstractLinkedList.Node<LinkedList<Object>>(linkedList0);
      LinkedList linkedList1 = (LinkedList)abstractLinkedList_Node0.getValue();
      assertEquals(0, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(cursorableLinkedList0, 0, 0);
      AbstractLinkedList.LinkedSubListIterator<Object> abstractLinkedList_LinkedSubListIterator0 = new AbstractLinkedList.LinkedSubListIterator<Object>(abstractLinkedList_LinkedSubList0, 0);
      // Undeclared exception!
      try { 
        abstractLinkedList_LinkedSubListIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CursorableLinkedList<ByteArrayInputStream> cursorableLinkedList0 = new CursorableLinkedList<ByteArrayInputStream>();
      CursorableLinkedList.Cursor<ByteArrayInputStream> cursorableLinkedList_Cursor0 = new CursorableLinkedList.Cursor<ByteArrayInputStream>(cursorableLinkedList0, 0);
      // Undeclared exception!
      try { 
        cursorableLinkedList_Cursor0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>(linkedHashSet0);
      AbstractLinkedList.LinkedListIterator<Object> abstractLinkedList_LinkedListIterator0 = new AbstractLinkedList.LinkedListIterator<Object>(nodeCachingLinkedList0, 0);
      abstractLinkedList_LinkedListIterator0.checkModCount();
      assertEquals((-1), abstractLinkedList_LinkedListIterator0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>(16);
      nodeCachingLinkedList0.removeAllNodes();
      assertEquals(0, nodeCachingLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>(cursorableLinkedList0);
      cursorableLinkedList0.add((Object) nodeCachingLinkedList0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      cursorableLinkedList0.replaceAll(unaryOperator0);
      assertEquals(1, cursorableLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      NodeCachingLinkedList<LinkedList<Object>> nodeCachingLinkedList0 = new NodeCachingLinkedList<LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      nodeCachingLinkedList0.add(linkedList0);
      int int0 = nodeCachingLinkedList0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>(cursorableLinkedList0);
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(nodeCachingLinkedList0, 0, 0);
      abstractLinkedList_LinkedSubList0.add((Object) nodeCachingLinkedList0);
      nodeCachingLinkedList0.init();
      nodeCachingLinkedList0.set(0, (Object) null);
      assertEquals(1, nodeCachingLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>(cursorableLinkedList0);
      cursorableLinkedList0.add((Object) nodeCachingLinkedList0);
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(nodeCachingLinkedList0, 0, 0);
      abstractLinkedList_LinkedSubList0.addAll(0, (Collection<?>) cursorableLinkedList0);
      nodeCachingLinkedList0.set(0, (Object) null);
      assertEquals(1, cursorableLinkedList0.size());
      assertEquals(1, nodeCachingLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      nodeCachingLinkedList0.add((Object) null);
      nodeCachingLinkedList0.removeLast();
      assertEquals(0, nodeCachingLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>(linkedHashSet0);
      cursorableLinkedList0.add((Object) linkedHashSet0);
      cursorableLinkedList0.removeFirst();
      assertTrue(cursorableLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      NodeCachingLinkedList<LinkedList<Object>> nodeCachingLinkedList0 = new NodeCachingLinkedList<LinkedList<Object>>();
      nodeCachingLinkedList0.addFirst(linkedList0);
      nodeCachingLinkedList0.size = 91;
      nodeCachingLinkedList0.remove(16);
      assertFalse(nodeCachingLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(nodeCachingLinkedList0, 0, 0);
      abstractLinkedList_LinkedSubList0.add((Object) nodeCachingLinkedList0);
      nodeCachingLinkedList0.listIterator(0);
      assertEquals(1, nodeCachingLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      nodeCachingLinkedList0.add((Object) nodeCachingLinkedList0);
      nodeCachingLinkedList0.listIterator();
      assertEquals(1, nodeCachingLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      NodeCachingLinkedList<LinkedList<Object>> nodeCachingLinkedList0 = new NodeCachingLinkedList<LinkedList<Object>>();
      nodeCachingLinkedList0.addFirst(linkedList0);
      nodeCachingLinkedList0.size = 91;
      int int0 = nodeCachingLinkedList0.lastIndexOf(linkedList0);
      assertTrue(nodeCachingLinkedList0.contains(linkedList0));
      assertEquals(90, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      boolean boolean0 = nodeCachingLinkedList0.isEqualValue(nodeCachingLinkedList0, nodeCachingLinkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      Object object0 = new Object();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = nodeCachingLinkedList0.isEqualValue(object0, linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      NodeCachingLinkedList<LinkedList<Object>> nodeCachingLinkedList0 = new NodeCachingLinkedList<LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      nodeCachingLinkedList0.add(linkedList0);
      NodeCachingLinkedList<Object> nodeCachingLinkedList1 = new NodeCachingLinkedList<Object>(nodeCachingLinkedList0);
      nodeCachingLinkedList1.getNode(1, true);
      assertEquals(1, nodeCachingLinkedList0.size());
      assertEquals(1, nodeCachingLinkedList1.size());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CursorableLinkedList<LinkedList<Object>> cursorableLinkedList0 = new CursorableLinkedList<LinkedList<Object>>();
      cursorableLinkedList0.add((LinkedList<Object>) null);
      cursorableLinkedList0.getLast();
      assertEquals(1, cursorableLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      NodeCachingLinkedList<LinkedList<Object>> nodeCachingLinkedList0 = new NodeCachingLinkedList<LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      nodeCachingLinkedList0.add(linkedList0);
      nodeCachingLinkedList0.getFirst();
      assertEquals(1, nodeCachingLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>(cursorableLinkedList0);
      cursorableLinkedList0.add((Object) nodeCachingLinkedList0);
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(nodeCachingLinkedList0, 0, 0);
      abstractLinkedList_LinkedSubList0.addAll(0, (Collection<?>) cursorableLinkedList0);
      nodeCachingLinkedList0.get(0);
      assertEquals(1, nodeCachingLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(nodeCachingLinkedList0, 0, 0);
      abstractLinkedList_LinkedSubList0.add((Object) nodeCachingLinkedList0);
      nodeCachingLinkedList0.createSubListListIterator(abstractLinkedList_LinkedSubList0, 0);
      assertEquals(1, nodeCachingLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(nodeCachingLinkedList0, 0, 0);
      ListIterator<Object> listIterator0 = nodeCachingLinkedList0.createSubListListIterator(abstractLinkedList_LinkedSubList0, 0);
      assertFalse(listIterator0.hasNext());
      assertEquals(0, nodeCachingLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      NodeCachingLinkedList<LinkedList<Object>> nodeCachingLinkedList0 = new NodeCachingLinkedList<LinkedList<Object>>(0);
      AbstractLinkedList.LinkedSubList<LinkedList<Object>> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<LinkedList<Object>>(nodeCachingLinkedList0, 0, 0);
      nodeCachingLinkedList0.createSubListIterator(abstractLinkedList_LinkedSubList0);
      assertTrue(nodeCachingLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CursorableLinkedList<ByteArrayInputStream> cursorableLinkedList0 = new CursorableLinkedList<ByteArrayInputStream>();
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)91, (byte)20);
      AbstractLinkedList.Node<ByteArrayInputStream> abstractLinkedList_Node0 = cursorableLinkedList0.createNode(byteArrayInputStream0);
      assertNotNull(abstractLinkedList_Node0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      NodeCachingLinkedList<LinkedList<Object>> nodeCachingLinkedList0 = new NodeCachingLinkedList<LinkedList<Object>>();
      AbstractLinkedList.Node<LinkedList<Object>> abstractLinkedList_Node0 = nodeCachingLinkedList0.createHeaderNode();
      nodeCachingLinkedList0.addNode(abstractLinkedList_Node0, abstractLinkedList_Node0);
      assertEquals(1, nodeCachingLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>((-612));
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.updateNode((AbstractLinkedList.Node<Object>) null, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(nodeCachingLinkedList0, 0, 0);
      nodeCachingLinkedList0.add((Object) abstractLinkedList_LinkedSubList0);
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.toString();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>(0);
      AbstractLinkedList.Node<Object> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Object>();
      nodeCachingLinkedList0.removeNode(abstractLinkedList_Node0);
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.toString();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.toArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      NodeCachingLinkedList<LinkedList<Object>> nodeCachingLinkedList0 = new NodeCachingLinkedList<LinkedList<Object>>();
      AbstractLinkedList.Node<LinkedList<Object>> abstractLinkedList_Node0 = new AbstractLinkedList.Node<LinkedList<Object>>();
      nodeCachingLinkedList0.removeNode(abstractLinkedList_Node0);
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.toArray();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.subList(20, (-3866));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(20) > toIndex(-3866)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(nodeCachingLinkedList0, 0, 0);
      nodeCachingLinkedList0.add((Object) abstractLinkedList_LinkedSubList0);
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.retainAll(abstractLinkedList_LinkedSubList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      NodeCachingLinkedList<LinkedList<Object>> nodeCachingLinkedList0 = new NodeCachingLinkedList<LinkedList<Object>>();
      NodeCachingLinkedList<Object> nodeCachingLinkedList1 = new NodeCachingLinkedList<Object>(nodeCachingLinkedList0);
      nodeCachingLinkedList1.add((Object) null);
      // Undeclared exception!
      try { 
        nodeCachingLinkedList1.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      NodeCachingLinkedList<ByteArrayInputStream> nodeCachingLinkedList0 = new NodeCachingLinkedList<ByteArrayInputStream>(93);
      AbstractLinkedList.Node<ByteArrayInputStream> abstractLinkedList_Node0 = new AbstractLinkedList.Node<ByteArrayInputStream>();
      nodeCachingLinkedList0.removeNode(abstractLinkedList_Node0);
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.retainAll(nodeCachingLinkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (0) greater than the size of the list (-1).
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      // Undeclared exception!
      try { 
        cursorableLinkedList0.removeNode((AbstractLinkedList.Node<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // node
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      NodeCachingLinkedList<LinkedList<Object>> nodeCachingLinkedList0 = new NodeCachingLinkedList<LinkedList<Object>>();
      nodeCachingLinkedList0.add((LinkedList<Object>) null);
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      NodeCachingLinkedList<ByteArrayInputStream> nodeCachingLinkedList0 = new NodeCachingLinkedList<ByteArrayInputStream>(0);
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.listIterator((-1191));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (-1191) less than zero.
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CursorableLinkedList<ByteArrayInputStream> cursorableLinkedList0 = new CursorableLinkedList<ByteArrayInputStream>();
      // Undeclared exception!
      try { 
        cursorableLinkedList0.doWriteObject((ObjectOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      NodeCachingLinkedList<LinkedList<Object>> nodeCachingLinkedList0 = new NodeCachingLinkedList<LinkedList<Object>>(0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      nodeCachingLinkedList0.add(linkedList0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.io.filefilter.AbstractFileFilter");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      try { 
        nodeCachingLinkedList0.doWriteObject(objectOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      NodeCachingLinkedList<PushbackInputStream> nodeCachingLinkedList0 = new NodeCachingLinkedList<PushbackInputStream>();
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.doReadObject((ObjectInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.createSubListListIterator((AbstractLinkedList.LinkedSubList<Object>) null, 91);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(nodeCachingLinkedList0, 0, 0);
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.createSubListListIterator(abstractLinkedList_LinkedSubList0, (-859));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (-859) less than zero.
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(nodeCachingLinkedList0, 0, 0);
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      // Undeclared exception!
      try { 
        cursorableLinkedList0.createSubListListIterator(abstractLinkedList_LinkedSubList0, 0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.list.NodeCachingLinkedList cannot be cast to org.apache.commons.collections4.list.CursorableLinkedList
         //
         verifyException("org.apache.commons.collections4.list.CursorableLinkedList$SubCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      // Undeclared exception!
      try { 
        cursorableLinkedList0.createSubListIterator((AbstractLinkedList.LinkedSubList<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.CursorableLinkedList$SubCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(nodeCachingLinkedList0, 0, 0);
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      // Undeclared exception!
      try { 
        cursorableLinkedList0.createSubListIterator(abstractLinkedList_LinkedSubList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.list.NodeCachingLinkedList cannot be cast to org.apache.commons.collections4.list.CursorableLinkedList
         //
         verifyException("org.apache.commons.collections4.list.CursorableLinkedList$SubCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      NodeCachingLinkedList<PushbackInputStream> nodeCachingLinkedList0 = new NodeCachingLinkedList<PushbackInputStream>();
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Object object0 = new Object();
      CursorableLinkedList<LinkedList<Object>> cursorableLinkedList0 = new CursorableLinkedList<LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      AbstractLinkedList.Node<LinkedList<Object>> abstractLinkedList_Node0 = new AbstractLinkedList.Node<LinkedList<Object>>(linkedList0);
      cursorableLinkedList0.header = abstractLinkedList_Node0;
      // Undeclared exception!
      try { 
        cursorableLinkedList0.contains(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CursorableLinkedList<NodeCachingLinkedList<Object>> cursorableLinkedList0 = new CursorableLinkedList<NodeCachingLinkedList<Object>>();
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>(cursorableLinkedList0);
      AbstractLinkedList.Node<Object> abstractLinkedList_Node0 = nodeCachingLinkedList0.createNode(cursorableLinkedList0);
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.addNodeBefore(abstractLinkedList_Node0, abstractLinkedList_Node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.addNodeAfter((AbstractLinkedList.Node<Object>) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      // Undeclared exception!
      try { 
        cursorableLinkedList0.addNode((AbstractLinkedList.Node<Object>) null, (AbstractLinkedList.Node<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // nodeToInsert
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      NodeCachingLinkedList<LinkedList<ByteArrayInputStream>> nodeCachingLinkedList0 = new NodeCachingLinkedList<LinkedList<ByteArrayInputStream>>();
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.addAll((Collection<? extends LinkedList<ByteArrayInputStream>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.addAll(0, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      NodeCachingLinkedList<LinkedList<Object>> nodeCachingLinkedList0 = new NodeCachingLinkedList<LinkedList<Object>>();
      CursorableLinkedList<LinkedList<Object>> cursorableLinkedList0 = new CursorableLinkedList<LinkedList<Object>>();
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.addAll(16, (Collection<? extends LinkedList<Object>>) cursorableLinkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (16) greater than the size of the list (0).
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      NodeCachingLinkedList<LinkedList<Object>> nodeCachingLinkedList0 = new NodeCachingLinkedList<LinkedList<Object>>(0);
      AbstractLinkedList.LinkedSubList<LinkedList<Object>> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<LinkedList<Object>>(nodeCachingLinkedList0, 0, 0);
      // Undeclared exception!
      try { 
        abstractLinkedList_LinkedSubList0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '0' out of bounds for size '0'
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(nodeCachingLinkedList0, 0, 0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      abstractLinkedList_LinkedSubList0.add((Object) linkedList0);
      LinkedList<PushbackInputStream> linkedList1 = new LinkedList<PushbackInputStream>();
      abstractLinkedList_LinkedSubList0.add((Object) linkedList1);
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.addAll(0, (Collection<?>) abstractLinkedList_LinkedSubList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CursorableLinkedList<LinkedList<Object>> cursorableLinkedList0 = new CursorableLinkedList<LinkedList<Object>>();
      boolean boolean0 = cursorableLinkedList0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(nodeCachingLinkedList0, 0, 0);
      boolean boolean0 = nodeCachingLinkedList0.addAll(0, (Collection<?>) abstractLinkedList_LinkedSubList0);
      assertTrue(boolean0);
      assertTrue(nodeCachingLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = nodeCachingLinkedList0.toArray(objectArray0);
      assertSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(nodeCachingLinkedList0, 0, 0);
      abstractLinkedList_LinkedSubList0.add((Object) nodeCachingLinkedList0);
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>(abstractLinkedList_LinkedSubList0);
      ByteArrayInputStream[] byteArrayInputStreamArray0 = new ByteArrayInputStream[5];
      // Undeclared exception!
      try { 
        cursorableLinkedList0.toArray(byteArrayInputStreamArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // org.apache.commons.collections4.list.NodeCachingLinkedList
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>(2);
      LinkedList<Object> linkedList0 = new LinkedList<Object>(nodeCachingLinkedList0);
      linkedList0.add((Object) nodeCachingLinkedList0);
      NodeCachingLinkedList<Object> nodeCachingLinkedList1 = new NodeCachingLinkedList<Object>(linkedList0);
      int int0 = nodeCachingLinkedList1.indexOf(nodeCachingLinkedList0);
      assertEquals(1, nodeCachingLinkedList1.size());
      assertEquals(0, int0);
      assertFalse(nodeCachingLinkedList1.contains(2));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>(nodeCachingLinkedList0);
      nodeCachingLinkedList0.add((Object) linkedList0);
      int int0 = nodeCachingLinkedList0.indexOf((Object) null);
      assertEquals(1, nodeCachingLinkedList0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      NodeCachingLinkedList<LinkedList<Object>> nodeCachingLinkedList0 = new NodeCachingLinkedList<LinkedList<Object>>(0);
      Iterator<LinkedList<Object>> iterator0 = nodeCachingLinkedList0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      NodeCachingLinkedList<LinkedList<Object>> nodeCachingLinkedList0 = new NodeCachingLinkedList<LinkedList<Object>>((-2087));
      boolean boolean0 = nodeCachingLinkedList0.addLast(linkedList0);
      assertTrue(nodeCachingLinkedList0.contains(linkedList0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      NodeCachingLinkedList<LinkedList<Object>> nodeCachingLinkedList0 = new NodeCachingLinkedList<LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.add(1, linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (1) greater than the size of the list (0).
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      NodeCachingLinkedList<LinkedList<Object>> nodeCachingLinkedList0 = new NodeCachingLinkedList<LinkedList<Object>>();
      int int0 = nodeCachingLinkedList0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        cursorableLinkedList0.set(2858, linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (2858) greater than the size of the list (0).
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      ListIterator<Object> listIterator0 = nodeCachingLinkedList0.listIterator();
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      ListIterator<Object> listIterator0 = nodeCachingLinkedList0.listIterator(0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      boolean boolean0 = cursorableLinkedList0.addAll((Collection<?>) cursorableLinkedList0);
      assertTrue(boolean0);
      assertTrue(cursorableLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      NodeCachingLinkedList<LinkedList<Object>> nodeCachingLinkedList0 = new NodeCachingLinkedList<LinkedList<Object>>(0);
      AbstractLinkedList.LinkedSubList<LinkedList<Object>> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<LinkedList<Object>>(nodeCachingLinkedList0, 0, 0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      nodeCachingLinkedList0.add(linkedList0);
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.removeAll(abstractLinkedList_LinkedSubList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(nodeCachingLinkedList0, 0, 0);
      // Undeclared exception!
      try { 
        abstractLinkedList_LinkedSubList0.addAll((-226), (Collection<?>) nodeCachingLinkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-226' out of bounds for size '0'
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(cursorableLinkedList0, 0, 0);
      AbstractLinkedList.LinkedSubListIterator<Object> abstractLinkedList_LinkedSubListIterator0 = new AbstractLinkedList.LinkedSubListIterator<Object>(abstractLinkedList_LinkedSubList0, 0);
      // Undeclared exception!
      try { 
        abstractLinkedList_LinkedSubListIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Already at start of list.
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(nodeCachingLinkedList0, 0, 0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      abstractLinkedList_LinkedSubList0.add((Object) linkedList0);
      int int0 = abstractLinkedList_LinkedSubList0.lastIndexOf(nodeCachingLinkedList0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      CursorableLinkedList.Cursor<Object> cursorableLinkedList_Cursor0 = cursorableLinkedList0.cursor();
      cursorableLinkedList0.init();
      boolean boolean0 = cursorableLinkedList_Cursor0.hasPrevious();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      CursorableLinkedList.Cursor<Object> cursorableLinkedList_Cursor0 = cursorableLinkedList0.cursor();
      boolean boolean0 = cursorableLinkedList_Cursor0.hasPrevious();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(nodeCachingLinkedList0, 0, 0);
      AbstractLinkedList.LinkedSubListIterator<Object> abstractLinkedList_LinkedSubListIterator0 = new AbstractLinkedList.LinkedSubListIterator<Object>(abstractLinkedList_LinkedSubList0, 0);
      // Undeclared exception!
      try { 
        abstractLinkedList_LinkedSubListIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No element at index 0.
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      NodeCachingLinkedList<LinkedList<Object>> nodeCachingLinkedList0 = new NodeCachingLinkedList<LinkedList<Object>>(0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      nodeCachingLinkedList0.add(linkedList0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("JC9l\"+%[nVS+]:3N");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      nodeCachingLinkedList0.doWriteObject(objectOutputStream0);
      assertEquals(1, nodeCachingLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      NodeCachingLinkedList<LinkedList<Object>> nodeCachingLinkedList0 = new NodeCachingLinkedList<LinkedList<Object>>();
      nodeCachingLinkedList0.size = 91;
      nodeCachingLinkedList0.remove(16);
      assertFalse(nodeCachingLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CursorableLinkedList<ByteArrayInputStream> cursorableLinkedList0 = new CursorableLinkedList<ByteArrayInputStream>();
      try { 
        cursorableLinkedList0.getNode(781, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (781) greater than the size of the list (0).
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LinkedList<PushbackInputStream> linkedList0 = new LinkedList<PushbackInputStream>();
      CursorableLinkedList<PushbackInputStream> cursorableLinkedList0 = new CursorableLinkedList<PushbackInputStream>(linkedList0);
      // Undeclared exception!
      try { 
        cursorableLinkedList0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (0) is the size of the list.
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CursorableLinkedList<LinkedList<PushbackInputStream>> cursorableLinkedList0 = new CursorableLinkedList<LinkedList<PushbackInputStream>>();
      // Undeclared exception!
      try { 
        cursorableLinkedList0.get((-380));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (-380) less than zero.
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      nodeCachingLinkedList0.add((Object) null);
      nodeCachingLinkedList0.add((Object) null);
      nodeCachingLinkedList0.toString();
      assertFalse(nodeCachingLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(nodeCachingLinkedList0, 0, 0);
      abstractLinkedList_LinkedSubList0.add((Object) nodeCachingLinkedList0);
      String string0 = nodeCachingLinkedList0.toString();
      assertEquals("[(this Collection)]", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LinkedHashSet<LinkedList<Object>> linkedHashSet0 = new LinkedHashSet<LinkedList<Object>>();
      NodeCachingLinkedList<LinkedList<Object>> nodeCachingLinkedList0 = new NodeCachingLinkedList<LinkedList<Object>>(linkedHashSet0);
      String string0 = nodeCachingLinkedList0.toString();
      assertEquals("[]", string0);
      assertEquals(0, nodeCachingLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CursorableLinkedList<LinkedList<Object>> cursorableLinkedList0 = new CursorableLinkedList<LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = cursorableLinkedList0.add(linkedList0);
      assertTrue(boolean0);
      
      cursorableLinkedList0.hashCode();
      assertTrue(cursorableLinkedList0.contains(linkedList0));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LinkedHashSet<LinkedList<Object>> linkedHashSet0 = new LinkedHashSet<LinkedList<Object>>();
      NodeCachingLinkedList<LinkedList<Object>> nodeCachingLinkedList0 = new NodeCachingLinkedList<LinkedList<Object>>(linkedHashSet0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      nodeCachingLinkedList0.add(linkedList0);
      CursorableLinkedList<LinkedList<Object>> cursorableLinkedList0 = new CursorableLinkedList<LinkedList<Object>>(linkedHashSet0);
      linkedList0.add((Object) cursorableLinkedList0);
      CursorableLinkedList<LinkedList<Object>> cursorableLinkedList1 = new CursorableLinkedList<LinkedList<Object>>(nodeCachingLinkedList0);
      boolean boolean0 = cursorableLinkedList1.equals(linkedList0);
      assertEquals(1, nodeCachingLinkedList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      NodeCachingLinkedList<LinkedList<Object>> nodeCachingLinkedList0 = new NodeCachingLinkedList<LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      nodeCachingLinkedList0.add(linkedList0);
      CursorableLinkedList<LinkedList<Object>> cursorableLinkedList0 = new CursorableLinkedList<LinkedList<Object>>(nodeCachingLinkedList0);
      boolean boolean0 = cursorableLinkedList0.equals(nodeCachingLinkedList0);
      assertEquals(1, nodeCachingLinkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      nodeCachingLinkedList0.add((Object) null);
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(nodeCachingLinkedList0, 0, 0);
      abstractLinkedList_LinkedSubList0.add((Object) nodeCachingLinkedList0);
      boolean boolean0 = nodeCachingLinkedList0.retainAll(abstractLinkedList_LinkedSubList0);
      assertEquals(1, nodeCachingLinkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CursorableLinkedList<LinkedList<Object>> cursorableLinkedList0 = new CursorableLinkedList<LinkedList<Object>>();
      boolean boolean0 = cursorableLinkedList0.equals(cursorableLinkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CursorableLinkedList<LinkedList<Object>> cursorableLinkedList0 = new CursorableLinkedList<LinkedList<Object>>();
      // Undeclared exception!
      try { 
        cursorableLinkedList0.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(nodeCachingLinkedList0, 0, 0);
      abstractLinkedList_LinkedSubList0.add((Object) nodeCachingLinkedList0);
      assertEquals(1, nodeCachingLinkedList0.size());
      
      nodeCachingLinkedList0.removeLast();
      assertTrue(nodeCachingLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      // Undeclared exception!
      try { 
        cursorableLinkedList0.removeFirst();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CursorableLinkedList<LinkedList<Object>> cursorableLinkedList0 = new CursorableLinkedList<LinkedList<Object>>();
      cursorableLinkedList0.add((LinkedList<Object>) null);
      cursorableLinkedList0.removeFirst();
      assertEquals(0, cursorableLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.getLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CursorableLinkedList<LinkedList<Object>> cursorableLinkedList0 = new CursorableLinkedList<LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      cursorableLinkedList0.add(linkedList0);
      cursorableLinkedList0.getLast();
      assertEquals(1, cursorableLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      // Undeclared exception!
      try { 
        cursorableLinkedList0.getFirst();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      cursorableLinkedList0.add((Object) null);
      cursorableLinkedList0.getFirst();
      assertEquals(1, cursorableLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      NodeCachingLinkedList<LinkedList<Object>> nodeCachingLinkedList0 = new NodeCachingLinkedList<LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      nodeCachingLinkedList0.add(linkedList0);
      boolean boolean0 = nodeCachingLinkedList0.removeAll(linkedList0);
      assertFalse(nodeCachingLinkedList0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      NodeCachingLinkedList<LinkedList<Object>> nodeCachingLinkedList0 = new NodeCachingLinkedList<LinkedList<Object>>(0);
      AbstractLinkedList.LinkedSubList<LinkedList<Object>> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<LinkedList<Object>>(nodeCachingLinkedList0, 0, 0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      abstractLinkedList_LinkedSubList0.add(linkedList0);
      boolean boolean0 = nodeCachingLinkedList0.removeAll(abstractLinkedList_LinkedSubList0);
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>(996);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      nodeCachingLinkedList0.add((Object) linkedList0);
      boolean boolean0 = nodeCachingLinkedList0.remove((Object) linkedList0);
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      NodeCachingLinkedList<LinkedList<Object>> nodeCachingLinkedList0 = new NodeCachingLinkedList<LinkedList<Object>>();
      LinkedList<Object>[] linkedListArray0 = (LinkedList<Object>[]) Array.newInstance(LinkedList.class, 2);
      LinkedList<Object>[] linkedListArray1 = nodeCachingLinkedList0.toArray(linkedListArray0);
      assertEquals(2, linkedListArray1.length);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CursorableLinkedList<LinkedList<Object>> cursorableLinkedList0 = new CursorableLinkedList<LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      cursorableLinkedList0.add(linkedList0);
      NodeCachingLinkedList<LinkedList<Object>> nodeCachingLinkedList0 = new NodeCachingLinkedList<LinkedList<Object>>(cursorableLinkedList0);
      nodeCachingLinkedList0.toArray();
      assertEquals(1, cursorableLinkedList0.size());
      assertEquals(1, nodeCachingLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      NodeCachingLinkedList<LinkedList<Object>> nodeCachingLinkedList0 = new NodeCachingLinkedList<LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      nodeCachingLinkedList0.add(linkedList0);
      NodeCachingLinkedList<Object> nodeCachingLinkedList1 = new NodeCachingLinkedList<Object>(nodeCachingLinkedList0);
      CursorableLinkedList<LinkedList<Object>> cursorableLinkedList0 = new CursorableLinkedList<LinkedList<Object>>(nodeCachingLinkedList0);
      boolean boolean0 = cursorableLinkedList0.containsAll(nodeCachingLinkedList1);
      assertTrue(cursorableLinkedList0.contains(linkedList0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      NodeCachingLinkedList<LinkedList<Object>> nodeCachingLinkedList0 = new NodeCachingLinkedList<LinkedList<Object>>((-1682));
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      nodeCachingLinkedList0.addFirst(linkedList0);
      int int0 = nodeCachingLinkedList0.lastIndexOf((Object) null);
      assertEquals(1, nodeCachingLinkedList0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      cursorableLinkedList0.add((Object) null);
      int int0 = cursorableLinkedList0.lastIndexOf((Object) null);
      assertEquals(1, cursorableLinkedList0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      CursorableLinkedList<NodeCachingLinkedList<Object>> cursorableLinkedList0 = new CursorableLinkedList<NodeCachingLinkedList<Object>>();
      CursorableLinkedList<Object> cursorableLinkedList1 = new CursorableLinkedList<Object>();
      cursorableLinkedList1.add((Object) nodeCachingLinkedList0);
      boolean boolean0 = cursorableLinkedList1.contains(cursorableLinkedList0);
      assertEquals(1, cursorableLinkedList1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      CursorableLinkedList<ByteArrayInputStream> cursorableLinkedList1 = new CursorableLinkedList<ByteArrayInputStream>();
      cursorableLinkedList0.add((Object) cursorableLinkedList1);
      boolean boolean0 = cursorableLinkedList0.contains(cursorableLinkedList0);
      assertEquals(1, cursorableLinkedList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LinkedHashSet<LinkedList<Object>> linkedHashSet0 = new LinkedHashSet<LinkedList<Object>>();
      NodeCachingLinkedList<LinkedList<Object>> nodeCachingLinkedList0 = new NodeCachingLinkedList<LinkedList<Object>>(linkedHashSet0);
      AbstractLinkedList.LinkedSubList<LinkedList<Object>> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<LinkedList<Object>>(nodeCachingLinkedList0, 0, 0);
      abstractLinkedList_LinkedSubList0.add((LinkedList<Object>) null);
      CursorableLinkedList<LinkedList<Object>> cursorableLinkedList0 = new CursorableLinkedList<LinkedList<Object>>();
      boolean boolean0 = cursorableLinkedList0.containsAll(nodeCachingLinkedList0);
      assertEquals(1, nodeCachingLinkedList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      boolean boolean0 = cursorableLinkedList0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      cursorableLinkedList0.add((Object) null);
      boolean boolean0 = cursorableLinkedList0.isEmpty();
      assertEquals(1, cursorableLinkedList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      AbstractLinkedList.Node<Object> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Object>();
      AbstractLinkedList.Node<Object> abstractLinkedList_Node1 = abstractLinkedList_Node0.getPreviousNode();
      assertNotNull(abstractLinkedList_Node1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      AbstractLinkedList.Node<LinkedList<Object>> abstractLinkedList_Node0 = new AbstractLinkedList.Node<LinkedList<Object>>();
      abstractLinkedList_Node0.setNextNode(abstractLinkedList_Node0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      AbstractLinkedList.Node<LinkedList<Object>> abstractLinkedList_Node0 = new AbstractLinkedList.Node<LinkedList<Object>>((AbstractLinkedList.Node<LinkedList<Object>>) null, (AbstractLinkedList.Node<LinkedList<Object>>) null, linkedList0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      AbstractLinkedList.Node<PushbackInputStream> abstractLinkedList_Node0 = new AbstractLinkedList.Node<PushbackInputStream>();
      AbstractLinkedList.Node<PushbackInputStream> abstractLinkedList_Node1 = abstractLinkedList_Node0.getNextNode();
      assertNotNull(abstractLinkedList_Node1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      AbstractLinkedList.Node<LinkedList<ByteArrayInputStream>> abstractLinkedList_Node0 = new AbstractLinkedList.Node<LinkedList<ByteArrayInputStream>>();
      abstractLinkedList_Node0.setPreviousNode(abstractLinkedList_Node0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(nodeCachingLinkedList0, 0, 0);
      AbstractLinkedList.LinkedSubListIterator<Object> abstractLinkedList_LinkedSubListIterator0 = new AbstractLinkedList.LinkedSubListIterator<Object>(abstractLinkedList_LinkedSubList0, 0);
      // Undeclared exception!
      try { 
        abstractLinkedList_LinkedSubListIterator0.set((Object) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(nodeCachingLinkedList0, 0, 0);
      ListIterator<Object> listIterator0 = abstractLinkedList_LinkedSubList0.listIterator(0);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertEquals(0, nodeCachingLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(nodeCachingLinkedList0, 0, 0);
      List<Object> list0 = abstractLinkedList_LinkedSubList0.subList(0, 0);
      assertTrue(list0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(nodeCachingLinkedList0, 0, 0);
      boolean boolean0 = abstractLinkedList_LinkedSubList0.addAll((Collection<?>) nodeCachingLinkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      CursorableLinkedList.Cursor<Object> cursorableLinkedList_Cursor0 = new CursorableLinkedList.Cursor<Object>(cursorableLinkedList0, 0);
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(cursorableLinkedList0, 0, 0);
      AbstractLinkedList.LinkedSubListIterator<Object> abstractLinkedList_LinkedSubListIterator0 = new AbstractLinkedList.LinkedSubListIterator<Object>(abstractLinkedList_LinkedSubList0, 0);
      abstractLinkedList_LinkedSubListIterator0.add(cursorableLinkedList_Cursor0);
      assertEquals(1, cursorableLinkedList0.size());
      assertEquals(1, abstractLinkedList_LinkedSubListIterator0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.subList((-2677), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -2677
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      NodeCachingLinkedList<LinkedList<Object>> nodeCachingLinkedList0 = new NodeCachingLinkedList<LinkedList<Object>>(0);
      AbstractLinkedList.LinkedSubList<LinkedList<Object>> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<LinkedList<Object>>(nodeCachingLinkedList0, 0, 0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      abstractLinkedList_LinkedSubList0.add(linkedList0);
      abstractLinkedList_LinkedSubList0.get(0);
      assertEquals(1, nodeCachingLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(nodeCachingLinkedList0, 0, 0);
      abstractLinkedList_LinkedSubList0.add((Object) nodeCachingLinkedList0);
      abstractLinkedList_LinkedSubList0.set(0, nodeCachingLinkedList0);
      assertEquals(1, nodeCachingLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>(cursorableLinkedList0);
      nodeCachingLinkedList0.clear();
      assertTrue(nodeCachingLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CursorableLinkedList<LinkedList<Object>> cursorableLinkedList0 = new CursorableLinkedList<LinkedList<Object>>();
      NodeCachingLinkedList<LinkedList<Object>> nodeCachingLinkedList0 = new NodeCachingLinkedList<LinkedList<Object>>(cursorableLinkedList0);
      Object[] objectArray0 = nodeCachingLinkedList0.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CursorableLinkedList<LinkedList<Object>> cursorableLinkedList0 = new CursorableLinkedList<LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      cursorableLinkedList0.add(linkedList0);
      NodeCachingLinkedList<LinkedList<Object>> nodeCachingLinkedList0 = new NodeCachingLinkedList<LinkedList<Object>>(cursorableLinkedList0);
      boolean boolean0 = nodeCachingLinkedList0.remove((Object) cursorableLinkedList0);
      assertFalse(cursorableLinkedList0.isEmpty());
      assertFalse(boolean0);
  }
}
