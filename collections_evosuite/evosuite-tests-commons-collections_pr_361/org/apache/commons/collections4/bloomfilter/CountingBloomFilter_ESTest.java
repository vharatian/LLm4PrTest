/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 09:53:36 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter;
import org.apache.commons.collections4.bloomfilter.BitMapProducer;
import org.apache.commons.collections4.bloomfilter.BloomFilter;
import org.apache.commons.collections4.bloomfilter.EnhancedDoubleHasher;
import org.apache.commons.collections4.bloomfilter.Hasher;
import org.apache.commons.collections4.bloomfilter.IndexProducer;
import org.apache.commons.collections4.bloomfilter.Shape;
import org.apache.commons.collections4.bloomfilter.SimpleBloomFilter;
import org.apache.commons.collections4.bloomfilter.SparseBloomFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CountingBloomFilter_ESTest extends CountingBloomFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1225, 1225);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      ArrayCountingBloomFilter arrayCountingBloomFilter1 = arrayCountingBloomFilter0.copy();
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1, 1225);
      boolean boolean0 = arrayCountingBloomFilter1.merge((Hasher) enhancedDoubleHasher0);
      boolean boolean1 = arrayCountingBloomFilter0.remove((IndexProducer) arrayCountingBloomFilter1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1226, 1226);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1, 1226);
      arrayCountingBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      boolean boolean0 = arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1225, 1225);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.remove((BloomFilter) sparseBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1239, 1239);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.remove((BitMapProducer) arrayCountingBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1225, 1225);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      ArrayCountingBloomFilter arrayCountingBloomFilter1 = new ArrayCountingBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1225L, 1225L);
      arrayCountingBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      boolean boolean0 = arrayCountingBloomFilter1.remove((BitMapProducer) arrayCountingBloomFilter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1225, 1225);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.merge((IndexProducer) sparseBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1226, 1226);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1, 1226);
      boolean boolean0 = arrayCountingBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      ArrayCountingBloomFilter arrayCountingBloomFilter1 = arrayCountingBloomFilter0.copy();
      arrayCountingBloomFilter1.remove((IndexProducer) arrayCountingBloomFilter0);
      arrayCountingBloomFilter1.remove((BloomFilter) arrayCountingBloomFilter0);
      boolean boolean1 = arrayCountingBloomFilter1.merge((IndexProducer) arrayCountingBloomFilter0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1211, 1211);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1211, (-319L));
      boolean boolean0 = arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      boolean boolean1 = arrayCountingBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1225, 1225);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.merge((BloomFilter) arrayCountingBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1226, 1226);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(0L, 0L);
      arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      boolean boolean0 = arrayCountingBloomFilter0.merge((BloomFilter) arrayCountingBloomFilter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1211, 1211);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1211, (-319L));
      arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.merge((BitMapProducer) simpleBloomFilter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1241, 1241);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.remove((IndexProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // indexProducer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1306, 1306);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      int[] intArray0 = new int[2];
      intArray0[0] = 1306;
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.remove(indexProducer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Filter only accepts values in the [0,1306) range
         //
         verifyException("org.apache.commons.collections4.bloomfilter.CountingBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Shape shape0 = Shape.fromKM(5767, 5767);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(0L, 0L);
      boolean boolean0 = arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Shape shape0 = Shape.fromKM(5767, 5767);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      arrayCountingBloomFilter0.asBitMapArray();
      // Undeclared exception!
      arrayCountingBloomFilter0.remove((BitMapProducer) arrayCountingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1, 1);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      long[] longArray0 = new long[3];
      longArray0[1] = (long) 1;
      BitMapProducer bitMapProducer0 = BitMapProducer.fromBitMapArray(longArray0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.remove(bitMapProducer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Filter only accepts values in the [0,1) range
         //
         verifyException("org.apache.commons.collections4.bloomfilter.CountingBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1239, 1239);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      int[] intArray0 = new int[5];
      intArray0[2] = 1239;
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.merge(indexProducer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Filter only accepts values in the [0,1239) range
         //
         verifyException("org.apache.commons.collections4.bloomfilter.CountingBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Shape shape0 = Shape.fromKM(5767, 5767);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(331L, 2462L);
      boolean boolean0 = arrayCountingBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1239, 1239);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.merge((Hasher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // hasher
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1225, 1225);
      Shape shape1 = Shape.fromKM(15, 15);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape1);
      ArrayCountingBloomFilter arrayCountingBloomFilter1 = new ArrayCountingBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(15, 1225);
      arrayCountingBloomFilter1.merge((Hasher) enhancedDoubleHasher0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.merge((BloomFilter) arrayCountingBloomFilter1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Filter only accepts values in the [0,15) range
         //
         verifyException("org.apache.commons.collections4.bloomfilter.CountingBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2757, 4348);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      arrayCountingBloomFilter0.merge((BitMapProducer) arrayCountingBloomFilter0);
      arrayCountingBloomFilter0.asBitMapArray();
      // Undeclared exception!
      arrayCountingBloomFilter0.merge((BitMapProducer) arrayCountingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1239, 1239);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.merge((BitMapProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // bitMapProducer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Shape shape0 = Shape.fromNM(8, 8);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      long[] longArray0 = new long[3];
      longArray0[2] = (long) 8;
      BitMapProducer bitMapProducer0 = BitMapProducer.fromBitMapArray(longArray0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.merge(bitMapProducer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Filter only accepts values in the [0,8) range
         //
         verifyException("org.apache.commons.collections4.bloomfilter.CountingBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1206, 1206);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.remove((BitMapProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // bitMapProducer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1141, 1141);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.merge((IndexProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // indexProducer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1196, 1196);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.remove((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1239, 1239);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.remove((Hasher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // hasher
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1141, 1141);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.merge((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }
}
