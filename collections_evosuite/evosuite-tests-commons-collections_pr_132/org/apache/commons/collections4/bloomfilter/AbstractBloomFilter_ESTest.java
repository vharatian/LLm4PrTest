/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 17:42:06 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import org.apache.commons.collections4.bloomfilter.BitSetBloomFilter;
import org.apache.commons.collections4.bloomfilter.BloomFilter;
import org.apache.commons.collections4.bloomfilter.CountingBloomFilter;
import org.apache.commons.collections4.bloomfilter.HasherBloomFilter;
import org.apache.commons.collections4.bloomfilter.hasher.DynamicHasher;
import org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentity;
import org.apache.commons.collections4.bloomfilter.hasher.Hasher;
import org.apache.commons.collections4.bloomfilter.hasher.Shape;
import org.apache.commons.collections4.bloomfilter.hasher.StaticHasher;
import org.apache.commons.collections4.bloomfilter.hasher.function.MD5Cyclic;
import org.apache.commons.collections4.bloomfilter.hasher.function.Murmur128x86Cyclic;
import org.apache.commons.collections4.bloomfilter.hasher.function.Murmur32x86Iterative;
import org.apache.commons.collections4.bloomfilter.hasher.function.ObjectsHashIterative;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AbstractBloomFilter_ESTest extends AbstractBloomFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 37, 37);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[5];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      int int0 = hasherBloomFilter0.xorCardinality(hasherBloomFilter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      byte[] byteArray0 = HashFunctionIdentity.prepareSignatureBuffer(murmur128x86Cyclic0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 4652, 4652);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(dynamicHasher0, shape0);
      int int0 = hasherBloomFilter0.xorCardinality(countingBloomFilter0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) mD5Cyclic0, 644, 644);
      CountingBloomFilter countingBloomFilter0 = null;
      try {
        countingBloomFilter0 = new CountingBloomFilter(dynamicHasher0, shape0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hasher (Murmur3_x64_128-SIGNED-CYCLIC) is not the hasher for shape (Shape[ MD5-SIGNED-CYCLIC n=644 m=644 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 370, 370);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[1];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(35);
      hashMap0.put(integer0, integer0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      int int0 = hasherBloomFilter0.orCardinality(countingBloomFilter0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 11, 11);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[1];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(dynamicHasher0, shape0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      int int0 = hasherBloomFilter0.orCardinality(countingBloomFilter0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[2];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, (int) (byte)14, 11, (int) (byte)14);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      byte[] byteArray1 = new byte[7];
      linkedList0.add(byteArray1);
      DynamicHasher dynamicHasher1 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      HasherBloomFilter hasherBloomFilter1 = new HasherBloomFilter(dynamicHasher1, shape0);
      boolean boolean0 = hasherBloomFilter1.contains((BloomFilter) hasherBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 4652, 4652);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      hasherBloomFilter0.verifyShape(shape0);
      assertEquals(4652, shape0.getNumberOfBits());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 4652, 4652);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      countingBloomFilter0.verifyShape(bitSetBloomFilter0);
      assertEquals(0, countingBloomFilter0.cardinality());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 4652, 4652);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      hasherBloomFilter0.verifyHasher(dynamicHasher0);
      assertEquals(0, hasherBloomFilter0.cardinality());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 14, 801);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(shape0);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      countingBloomFilter0.merge((Hasher) dynamicHasher0);
      assertTrue(dynamicHasher0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter((Shape) null);
      Shape shape0 = bitSetBloomFilter0.getShape();
      assertNull(shape0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 4652, 4652);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(shape0);
      Shape shape1 = countingBloomFilter0.getShape();
      assertSame(shape1, shape0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter((Shape) null);
      StaticHasher staticHasher0 = bitSetBloomFilter0.getHasher();
      assertTrue(staticHasher0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 1, 871);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[6];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      StaticHasher staticHasher0 = hasherBloomFilter0.getHasher();
      assertEquals(502, staticHasher0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      byte[] byteArray0 = HashFunctionIdentity.prepareSignatureBuffer(murmur128x86Cyclic0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 4652, 4652);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(shape0);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(dynamicHasher0, shape0);
      countingBloomFilter0.merge((BloomFilter) bitSetBloomFilter0);
      long[] longArray0 = countingBloomFilter0.getBits();
      assertEquals(16, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 4652, 4652);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      long[] longArray0 = countingBloomFilter0.getBits();
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 4652, 4652);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      boolean boolean0 = bitSetBloomFilter0.contains((Hasher) dynamicHasher0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      byte[] byteArray0 = HashFunctionIdentity.prepareSignatureBuffer(murmur128x86Cyclic0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 4652, 4652);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      boolean boolean0 = linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      boolean boolean1 = bitSetBloomFilter0.contains((Hasher) dynamicHasher0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 14, 801);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      int int0 = hasherBloomFilter0.cardinality();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      byte[] byteArray0 = HashFunctionIdentity.prepareSignatureBuffer(murmur128x86Cyclic0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 14, 801);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      int int0 = hasherBloomFilter0.cardinality();
      assertEquals(40, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 1390208809, 1390208809);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[0];
      linkedList0.add(byteArray0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      HasherBloomFilter hasherBloomFilter1 = new HasherBloomFilter(dynamicHasher0, shape0);
      // Undeclared exception!
      hasherBloomFilter1.xorCardinality(hasherBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.xorCardinality(hasherBloomFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 12, 12);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      Shape shape1 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 12, 12, 12);
      HasherBloomFilter hasherBloomFilter1 = new HasherBloomFilter(shape1);
      // Undeclared exception!
      try { 
        hasherBloomFilter1.xorCardinality(hasherBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=12 m=12 k=1 ] is not the same as Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=12 m=12 k=12 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        bitSetBloomFilter0.verifyShape((Shape) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 74, 74);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.verifyShape((Shape) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape null is not the same as Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=74 m=74 k=1 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter((Shape) null);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        bitSetBloomFilter0.verifyShape(countingBloomFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 58, 58);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.verifyShape(bitSetBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape null is not the same as Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=58 m=58 k=1 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      StaticHasher staticHasher0 = hasherBloomFilter0.getHasher();
      // Undeclared exception!
      try { 
        hasherBloomFilter0.verifyHasher(staticHasher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 21, 21);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur32x86Iterative0, linkedList0);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.verifyHasher(dynamicHasher0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hasher (Murmur3_x86_32-SIGNED-ITERATIVE) is not the hasher for shape (Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=21 m=21 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)24;
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, (int) (byte)24, 944331445, (int) (byte)24);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(dynamicHasher0, shape0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      // Undeclared exception!
      hasherBloomFilter0.orCardinality(countingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.orCardinality(hasherBloomFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        bitSetBloomFilter0.merge((Hasher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 1160, 1160);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      // Undeclared exception!
      try { 
        bitSetBloomFilter0.merge((Hasher) dynamicHasher0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hasher (Objects32-SIGNED-ITERATIVE) is not the hasher for shape (Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=1160 m=1160 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        bitSetBloomFilter0.merge((BloomFilter) bitSetBloomFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 2176, 2176);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      Shape shape1 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 1451, 1451);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape1);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.merge((BloomFilter) bitSetBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // shape (Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=2176 m=2176 k=1 ]) does not match internal shape (Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=1451 m=1451 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.StaticHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.isFull();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 944331445, 944331445);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[0];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      // Undeclared exception!
      hasherBloomFilter0.getBits();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter((Shape) null);
      StaticHasher staticHasher0 = bitSetBloomFilter0.getHasher();
      // Undeclared exception!
      try { 
        bitSetBloomFilter0.contains((Hasher) staticHasher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 34, 34);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(mD5Cyclic0, linkedList0);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.contains((Hasher) dynamicHasher0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hasher (MD5-SIGNED-CYCLIC) is not the hasher for shape (Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=34 m=34 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 944331445, 944331445);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[0];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(dynamicHasher0, shape0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      // Undeclared exception!
      hasherBloomFilter0.contains((BloomFilter) countingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.contains((BloomFilter) hasherBloomFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 21, 21);
      Shape shape1 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 21, 21, 21);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape1);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.contains((BloomFilter) bitSetBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=21 m=21 k=1 ] is not the same as Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=21 m=21 k=21 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 1390208809, 1390208809);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[0];
      linkedList0.add(byteArray0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      HasherBloomFilter hasherBloomFilter1 = new HasherBloomFilter(dynamicHasher0, shape0);
      // Undeclared exception!
      hasherBloomFilter1.andCardinality(hasherBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        bitSetBloomFilter0.andCardinality(bitSetBloomFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 64, 64);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      HasherBloomFilter hasherBloomFilter1 = new HasherBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.andCardinality(hasherBloomFilter1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape null is not the same as Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=64 m=64 k=1 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      byte[] byteArray0 = HashFunctionIdentity.prepareSignatureBuffer(murmur128x86Cyclic0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 4652, 4652);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(dynamicHasher0, shape0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      int int0 = hasherBloomFilter0.andCardinality(countingBloomFilter0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 1, 871);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[6];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((byte)117);
      hashMap0.put(integer0, integer0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      int int0 = hasherBloomFilter0.xorCardinality(countingBloomFilter0);
      assertEquals(503, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 2122, 2122);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      HasherBloomFilter hasherBloomFilter1 = new HasherBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.orCardinality(hasherBloomFilter1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape null is not the same as Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=2122 m=2122 k=1 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      byte[] byteArray0 = HashFunctionIdentity.prepareSignatureBuffer(murmur128x86Cyclic0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 4652, 4652);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(dynamicHasher0, shape0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      int int0 = bitSetBloomFilter0.orCardinality(hasherBloomFilter0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[3];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, (int) (byte)14, 11, (int) (byte)14);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      boolean boolean0 = hasherBloomFilter0.isFull();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 4652, 4652);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      boolean boolean0 = bitSetBloomFilter0.isFull();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 11, 11);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[1];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(dynamicHasher0, shape0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      boolean boolean0 = hasherBloomFilter0.contains((BloomFilter) countingBloomFilter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 4652, 4652);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(shape0);
      int int0 = hasherBloomFilter0.andCardinality(countingBloomFilter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 4652, 4652);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(shape0);
      int int0 = countingBloomFilter0.orCardinality(hasherBloomFilter0);
      assertEquals(0, int0);
  }
}
