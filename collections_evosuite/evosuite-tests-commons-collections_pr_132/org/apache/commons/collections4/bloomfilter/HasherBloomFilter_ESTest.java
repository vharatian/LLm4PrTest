/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 17:48:32 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import java.util.LinkedList;
import org.apache.commons.collections4.bloomfilter.BitSetBloomFilter;
import org.apache.commons.collections4.bloomfilter.BloomFilter;
import org.apache.commons.collections4.bloomfilter.CountingBloomFilter;
import org.apache.commons.collections4.bloomfilter.HasherBloomFilter;
import org.apache.commons.collections4.bloomfilter.hasher.DynamicHasher;
import org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentity;
import org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentityImpl;
import org.apache.commons.collections4.bloomfilter.hasher.Hasher;
import org.apache.commons.collections4.bloomfilter.hasher.Shape;
import org.apache.commons.collections4.bloomfilter.hasher.StaticHasher;
import org.apache.commons.collections4.bloomfilter.hasher.function.MD5Cyclic;
import org.apache.commons.collections4.bloomfilter.hasher.function.Murmur128x86Cyclic;
import org.apache.commons.collections4.bloomfilter.hasher.function.Murmur32x86Iterative;
import org.apache.commons.collections4.bloomfilter.hasher.function.ObjectsHashIterative;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class HasherBloomFilter_ESTest extends HasherBloomFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 464, 464);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte) (-1);
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      long[] longArray0 = hasherBloomFilter0.getBits();
      assertArrayEquals(new long[] {0L, (-9223372036854775808L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 464, 464);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[2];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      StaticHasher staticHasher0 = hasherBloomFilter0.getHasher();
      assertFalse(staticHasher0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 464, 464);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[2];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      int int0 = hasherBloomFilter0.cardinality();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      StaticHasher staticHasher0 = hasherBloomFilter0.getHasher();
      // Undeclared exception!
      try { 
        hasherBloomFilter0.merge((Hasher) staticHasher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 1587, 1587);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(mD5Cyclic0, linkedList0);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.merge((Hasher) dynamicHasher0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hasher (MD5-SIGNED-CYCLIC) is not the hasher for shape (Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=1587 m=1587 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.merge((BloomFilter) countingBloomFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 36, 36);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      Shape shape1 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 36, 36, 36);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(shape1);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.merge((BloomFilter) countingBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // shape (Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=36 m=36 k=1 ]) does not match internal shape (Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=36 m=36 k=36 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.StaticHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 1, 7143);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = HashFunctionIdentity.prepareSignatureBuffer(murmur128x86Cyclic0);
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      StaticHasher staticHasher0 = hasherBloomFilter0.getHasher();
      // Undeclared exception!
      try { 
        hasherBloomFilter0.contains((Hasher) staticHasher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) mD5Cyclic0, 13, 13);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      linkedList0.add((byte[]) null);
      DynamicHasher dynamicHasher0 = new DynamicHasher(mD5Cyclic0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.contains((Hasher) dynamicHasher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.security.MessageDigest", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 123, 123);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(mD5Cyclic0, linkedList0);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.contains((Hasher) dynamicHasher0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hasher (MD5-SIGNED-CYCLIC) is not the hasher for shape (Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=123 m=123 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[15];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 48, 2147483128);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = null;
      try {
        hasherBloomFilter0 = new HasherBloomFilter((Hasher) null, (Shape) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) mD5Cyclic0, 461845907, 461845907);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      linkedList0.add((byte[]) null);
      DynamicHasher dynamicHasher0 = new DynamicHasher(mD5Cyclic0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = null;
      try {
        hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.security.MessageDigest", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 33, 33);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = null;
      try {
        hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hasher (Objects32-SIGNED-ITERATIVE) is not the hasher for shape (Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=33 m=33 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl(murmur32x86Iterative0);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 38, 1129, 38);
      StaticHasher staticHasher0 = new StaticHasher(iterator0, shape0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      hasherBloomFilter0.merge((Hasher) staticHasher0);
      assertEquals(0, hasherBloomFilter0.cardinality());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 464, 464);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[2];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      long[] longArray0 = hasherBloomFilter0.getBits();
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 16777216L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      long[] longArray0 = hasherBloomFilter0.getBits();
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 3, 1958);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[4];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      long[] longArray0 = hasherBloomFilter0.getBits();
      assertEquals(31, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 3, 1958);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[4];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      boolean boolean0 = hasherBloomFilter0.contains((Hasher) dynamicHasher0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 1458, 1458);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      StaticHasher staticHasher0 = hasherBloomFilter0.getHasher();
      boolean boolean0 = hasherBloomFilter0.contains((Hasher) staticHasher0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 64, 64);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      StaticHasher staticHasher0 = bitSetBloomFilter0.getHasher();
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(staticHasher0, shape0);
      assertEquals(0, hasherBloomFilter0.cardinality());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 36, 36);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(shape0);
      hasherBloomFilter0.merge((BloomFilter) countingBloomFilter0);
      assertEquals(0, hasherBloomFilter0.cardinality());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 3, 1958);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      int int0 = hasherBloomFilter0.cardinality();
      assertEquals(0, int0);
  }
}
