/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 17:46:24 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.stream.Stream;
import org.apache.commons.collections4.bloomfilter.BitSetBloomFilter;
import org.apache.commons.collections4.bloomfilter.BloomFilter;
import org.apache.commons.collections4.bloomfilter.CountingBloomFilter;
import org.apache.commons.collections4.bloomfilter.HasherBloomFilter;
import org.apache.commons.collections4.bloomfilter.hasher.DynamicHasher;
import org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentity;
import org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentityImpl;
import org.apache.commons.collections4.bloomfilter.hasher.Hasher;
import org.apache.commons.collections4.bloomfilter.hasher.Shape;
import org.apache.commons.collections4.bloomfilter.hasher.StaticHasher;
import org.apache.commons.collections4.bloomfilter.hasher.function.MD5Cyclic;
import org.apache.commons.collections4.bloomfilter.hasher.function.Murmur128x86Cyclic;
import org.apache.commons.collections4.bloomfilter.hasher.function.Murmur32x86Iterative;
import org.apache.commons.collections4.bloomfilter.hasher.function.ObjectsHashIterative;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CountingBloomFilter_ESTest extends CountingBloomFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Integer integer0 = new Integer(25);
      hashMap0.put(integer0, integer0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 12, 12, 12);
      CountingBloomFilter countingBloomFilter0 = null;
      try {
        countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // dataMap has an item with an index larger than 11
         //
         verifyException("org.apache.commons.collections4.bloomfilter.CountingBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Integer integer0 = new Integer(10);
      hashMap0.put(integer0, integer0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 10, 12, 10);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      int int0 = countingBloomFilter0.cardinality();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>(15, 15);
      Integer integer0 = new Integer(15);
      hashMap0.put(integer0, integer0);
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.ITERATIVE;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("^|", "^|", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 15);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 15, 944331445);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      int int0 = countingBloomFilter0.andCardinality(countingBloomFilter0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 27, 27, 27);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(shape0);
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur32x86Iterative0, linkedList0);
      // Undeclared exception!
      try { 
        countingBloomFilter0.remove((Hasher) dynamicHasher0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hasher (Murmur3_x86_32-SIGNED-ITERATIVE) is not the hasher for shape (Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=27 m=27 k=27 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Integer integer0 = new Integer(56);
      hashMap0.put(integer0, integer0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 2147483638, 2147483638);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(staticHasher0, shape0);
      // Undeclared exception!
      countingBloomFilter0.remove((BloomFilter) hasherBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        countingBloomFilter0.remove((BloomFilter) countingBloomFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Integer integer0 = new Integer(1);
      hashMap0.put(integer0, integer0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 24, 24);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      countingBloomFilter0.remove((Hasher) staticHasher0);
      CountingBloomFilter countingBloomFilter1 = new CountingBloomFilter(staticHasher0, shape0);
      // Undeclared exception!
      try { 
        countingBloomFilter0.remove((BloomFilter) countingBloomFilter1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Underflow on index 1
         //
         verifyException("org.apache.commons.collections4.bloomfilter.CountingBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 3553, 3553);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(shape0);
      CountingBloomFilter countingBloomFilter1 = new CountingBloomFilter(hashMap0, (Shape) null);
      // Undeclared exception!
      try { 
        countingBloomFilter0.remove((BloomFilter) countingBloomFilter1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape null is not the same as Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=3553 m=3553 k=1 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 2147483646, 2147483646);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur32x86Iterative0, linkedList0);
      // Undeclared exception!
      try { 
        countingBloomFilter0.merge((Hasher) dynamicHasher0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hasher (Murmur3_x86_32-SIGNED-ITERATIVE) is not the hasher for shape (Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=2147483646 m=2147483646 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Integer integer0 = new Integer(56);
      hashMap0.put(integer0, integer0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 2147483638, 2147483638);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(staticHasher0, shape0);
      // Undeclared exception!
      countingBloomFilter0.merge((BloomFilter) hasherBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        countingBloomFilter0.merge((BloomFilter) countingBloomFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Integer integer0 = Integer.getInteger("Murmur3_x64_128", 525);
      Integer integer1 = Integer.getInteger("Murmur3_x64_128", Integer.MAX_VALUE);
      hashMap0.put(integer0, integer1);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      // Undeclared exception!
      try { 
        countingBloomFilter0.merge((BloomFilter) countingBloomFilter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Overflow on index 525
         //
         verifyException("org.apache.commons.collections4.bloomfilter.CountingBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 76, 76);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      Shape shape1 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 76, 2627);
      CountingBloomFilter countingBloomFilter1 = new CountingBloomFilter(hashMap0, shape1);
      // Undeclared exception!
      try { 
        countingBloomFilter0.merge((BloomFilter) countingBloomFilter1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=76 m=2627 k=24 ] is not the same as Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=76 m=76 k=1 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter((Shape) null);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      // Undeclared exception!
      try { 
        countingBloomFilter0.contains((Hasher) staticHasher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(shape0);
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur32x86Iterative0, linkedList0);
      // Undeclared exception!
      try { 
        countingBloomFilter0.contains((Hasher) dynamicHasher0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hasher (Murmur3_x86_32-SIGNED-ITERATIVE) is not the hasher for shape (Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=2147483647 m=2147483647 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Integer integer0 = new Integer(56);
      hashMap0.put(integer0, integer0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 2147483638, 2147483638);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(staticHasher0, shape0);
      // Undeclared exception!
      countingBloomFilter0.andCardinality(hasherBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 57, 790, 57);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        countingBloomFilter0.andCardinality(bitSetBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape null is not the same as Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=57 m=790 k=57 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(mD5Cyclic0, linkedList0);
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 2184, 2184);
      CountingBloomFilter countingBloomFilter0 = null;
      try {
        countingBloomFilter0 = new CountingBloomFilter(dynamicHasher0, shape0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hasher (MD5-SIGNED-CYCLIC) is not the hasher for shape (Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=2184 m=2184 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CountingBloomFilter countingBloomFilter0 = null;
      try {
        countingBloomFilter0 = new CountingBloomFilter((Map<Integer, Integer>) null, (Shape) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.CountingBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter((Shape) null);
      String string0 = countingBloomFilter0.toString();
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Integer integer0 = new Integer(56);
      hashMap0.put(integer0, integer0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 56, 2147483638);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      String string0 = countingBloomFilter0.toString();
      assertEquals("{(56,56)}", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Integer integer0 = new Integer(14);
      hashMap0.put(integer0, integer0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 14, Integer.MAX_VALUE);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      countingBloomFilter0.remove((Hasher) staticHasher0);
      assertEquals(1, countingBloomFilter0.cardinality());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Integer integer0 = new Integer(14);
      hashMap0.put(integer0, integer0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 14, 2147483630);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      CountingBloomFilter countingBloomFilter1 = new CountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        countingBloomFilter1.remove((Hasher) staticHasher0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Underflow on index 14
         //
         verifyException("org.apache.commons.collections4.bloomfilter.CountingBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 1, 802, 1);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      countingBloomFilter0.remove((BloomFilter) hasherBloomFilter0);
      assertEquals(0, hasherBloomFilter0.cardinality());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Integer integer0 = new Integer(14);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      hashMap0.put(integer0, integer1);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      // Undeclared exception!
      try { 
        countingBloomFilter0.merge((Hasher) staticHasher0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Overflow on index 14
         //
         verifyException("org.apache.commons.collections4.bloomfilter.CountingBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Integer integer0 = new Integer(14);
      hashMap0.put(integer0, integer0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 14, Integer.MAX_VALUE);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      CountingBloomFilter countingBloomFilter1 = new CountingBloomFilter(shape0);
      countingBloomFilter1.merge((Hasher) staticHasher0);
      assertEquals(1, countingBloomFilter1.cardinality());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(5);
      hashMap0.put(integer0, integer0);
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) mD5Cyclic0, 2210, 2210);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      countingBloomFilter0.merge((Hasher) staticHasher0);
      assertFalse(staticHasher0.isEmpty());
      assertEquals(1, countingBloomFilter0.cardinality());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 20, 20, 1);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      countingBloomFilter0.merge((BloomFilter) bitSetBloomFilter0);
      assertEquals(0, countingBloomFilter0.cardinality());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Integer integer0 = new Integer(1);
      hashMap0.put(integer0, integer0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 1, 12);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      countingBloomFilter0.remove((Hasher) staticHasher0);
      boolean boolean0 = countingBloomFilter0.contains((Hasher) staticHasher0);
      assertEquals(0, countingBloomFilter0.cardinality());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Integer integer0 = new Integer(486);
      hashMap0.put(integer0, integer0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 486, 2147483644);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      boolean boolean0 = countingBloomFilter0.contains((Hasher) staticHasher0);
      assertTrue(boolean0);
      assertFalse(staticHasher0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter((Shape) null);
      int int0 = countingBloomFilter0.andCardinality(countingBloomFilter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter((Shape) null);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        countingBloomFilter0.andCardinality(bitSetBloomFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Integer integer0 = new Integer(14);
      Integer integer1 = new Integer((-16));
      hashMap0.put(integer0, integer1);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 14, 2147483646, 2147483646);
      CountingBloomFilter countingBloomFilter0 = null;
      try {
        countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // dataMap has an item with an value less than 0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.CountingBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, integer0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 8, 8, 8);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      assertEquals(0, countingBloomFilter0.cardinality());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Integer integer0 = new Integer(14);
      hashMap0.put(integer0, integer0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 14, 14);
      CountingBloomFilter countingBloomFilter0 = null;
      try {
        countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // dataMap has an item with an index larger than 13
         //
         verifyException("org.apache.commons.collections4.bloomfilter.CountingBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Integer integer0 = new Integer((-1702));
      hashMap0.put(integer0, integer0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 8, 8, 8);
      CountingBloomFilter countingBloomFilter0 = null;
      try {
        countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // dataMap has an item with an index less than 0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.CountingBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      linkedList0.offerLast((byte[]) null);
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 65280, 65280);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(dynamicHasher0, shape0);
      long[] longArray0 = countingBloomFilter0.getBits();
      assertEquals(16, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter((Shape) null);
      int int0 = countingBloomFilter0.cardinality();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter((Shape) null);
      long[] longArray0 = countingBloomFilter0.getBits();
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter((Shape) null);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      // Undeclared exception!
      try { 
        countingBloomFilter0.remove((Hasher) staticHasher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter((Shape) null);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      // Undeclared exception!
      try { 
        countingBloomFilter0.merge((Hasher) staticHasher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter((Shape) null);
      Stream<Map.Entry<Integer, Integer>> stream0 = (Stream<Map.Entry<Integer, Integer>>)countingBloomFilter0.getCounts();
      assertNotNull(stream0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CountingBloomFilter countingBloomFilter0 = null;
      try {
        countingBloomFilter0 = new CountingBloomFilter((Hasher) null, (Shape) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }
}
