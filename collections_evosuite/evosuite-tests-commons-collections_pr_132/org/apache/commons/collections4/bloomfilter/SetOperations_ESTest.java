/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 17:50:44 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import org.apache.commons.collections4.bloomfilter.BitSetBloomFilter;
import org.apache.commons.collections4.bloomfilter.BloomFilter;
import org.apache.commons.collections4.bloomfilter.CountingBloomFilter;
import org.apache.commons.collections4.bloomfilter.HasherBloomFilter;
import org.apache.commons.collections4.bloomfilter.SetOperations;
import org.apache.commons.collections4.bloomfilter.hasher.DynamicHasher;
import org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentity;
import org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentityImpl;
import org.apache.commons.collections4.bloomfilter.hasher.Shape;
import org.apache.commons.collections4.bloomfilter.hasher.function.MD5Cyclic;
import org.apache.commons.collections4.bloomfilter.hasher.function.Murmur128x86Cyclic;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SetOperations_ESTest extends SetOperations_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[2];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 2, 577, 2);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(shape0);
      long long0 = SetOperations.estimateIntersectionSize(hasherBloomFilter0, countingBloomFilter0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.ITERATIVE;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("", "", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 0L);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 566, 566);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(shape0);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      long long0 = SetOperations.estimateIntersectionSize(countingBloomFilter0, bitSetBloomFilter0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 36, 36);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[2];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      double double0 = SetOperations.jaccardDistance(hasherBloomFilter0, bitSetBloomFilter0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.ITERATIVE;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("", "", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 0L);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 566, 566);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(shape0);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      int int0 = SetOperations.hammingDistance(countingBloomFilter0, bitSetBloomFilter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 36, 36);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[9];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      int int0 = SetOperations.hammingDistance(hasherBloomFilter0, countingBloomFilter0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.ITERATIVE;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("", "", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 0L);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 566, 566);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      long long0 = SetOperations.estimateUnionSize(bitSetBloomFilter0, bitSetBloomFilter0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 27, 27);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[2];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      long long0 = SetOperations.estimateUnionSize(hasherBloomFilter0, hasherBloomFilter0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.ITERATIVE;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("", "", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 0L);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 566, 566);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      long long0 = SetOperations.estimateSize(hasherBloomFilter0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 36, 36);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[2];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      long long0 = SetOperations.estimateSize(hasherBloomFilter0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 36, 36);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[2];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      long long0 = SetOperations.estimateIntersectionSize(hasherBloomFilter0, hasherBloomFilter0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 36, 36);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[2];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      double double0 = SetOperations.cosineDistance(hasherBloomFilter0, hasherBloomFilter0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 461845923, 461845923);
      Integer integer0 = new Integer(461845923);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer1 = new Integer(461845907);
      hashMap0.put(integer1, integer0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      // Undeclared exception!
      SetOperations.jaccardSimilarity(countingBloomFilter0, countingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetOperations.jaccardSimilarity((BloomFilter) null, (BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SetOperations", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 10, 10);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Shape shape1 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 10, 10, 10);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape1);
      // Undeclared exception!
      try { 
        SetOperations.jaccardSimilarity(bitSetBloomFilter0, countingBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=10 m=10 k=1 ] is not the same as Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=10 m=10 k=10 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SetOperations", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 461845923, 461845923);
      Integer integer0 = new Integer(461845923);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer1 = new Integer(461845907);
      hashMap0.put(integer1, integer0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      // Undeclared exception!
      SetOperations.jaccardDistance(countingBloomFilter0, countingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetOperations.jaccardDistance((BloomFilter) null, (BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SetOperations", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 16, 16);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        SetOperations.jaccardDistance(hasherBloomFilter0, bitSetBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=16 m=16 k=1 ] is not the same as null
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SetOperations", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 461845923, 461845923);
      Integer integer0 = new Integer(461845923);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer1 = new Integer(461845907);
      hashMap0.put(integer1, integer0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      // Undeclared exception!
      SetOperations.hammingDistance(countingBloomFilter0, countingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetOperations.hammingDistance((BloomFilter) null, (BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SetOperations", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 461845923, 461845923);
      Integer integer0 = new Integer(461845923);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer1 = new Integer(461845907);
      hashMap0.put(integer1, integer0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      // Undeclared exception!
      SetOperations.estimateUnionSize(countingBloomFilter0, countingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetOperations.estimateUnionSize((BloomFilter) null, (BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SetOperations", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 461845923, 461845923);
      Integer integer0 = new Integer(461845923);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer1 = new Integer(461845907);
      hashMap0.put(integer1, integer0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      // Undeclared exception!
      SetOperations.estimateIntersectionSize(countingBloomFilter0, countingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetOperations.estimateIntersectionSize((BloomFilter) null, (BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SetOperations", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 19, 19);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        SetOperations.estimateIntersectionSize(hasherBloomFilter0, bitSetBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=19 m=19 k=1 ] is not the same as null
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SetOperations", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetOperations.cosineSimilarity((BloomFilter) null, (BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SetOperations", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) mD5Cyclic0, 598, 598);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(shape0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        SetOperations.cosineSimilarity(countingBloomFilter0, hasherBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape Shape[ MD5-SIGNED-CYCLIC n=598 m=598 k=1 ] is not the same as null
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SetOperations", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetOperations.cosineDistance((BloomFilter) null, (BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SetOperations", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) mD5Cyclic0, 1594, 1594);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        SetOperations.cosineDistance(bitSetBloomFilter0, hasherBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape Shape[ MD5-SIGNED-CYCLIC n=1594 m=1594 k=1 ] is not the same as null
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SetOperations", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.ITERATIVE;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("", "", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 0L);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 566, 566);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      double double0 = SetOperations.jaccardSimilarity(bitSetBloomFilter0, bitSetBloomFilter0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.ITERATIVE;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("", "", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 0L);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 566, 566);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(shape0);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      double double0 = SetOperations.cosineSimilarity(bitSetBloomFilter0, countingBloomFilter0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 36, 36);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[2];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      double double0 = SetOperations.cosineSimilarity(hasherBloomFilter0, hasherBloomFilter0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetOperations.estimateSize((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SetOperations", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 105, 105);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        SetOperations.hammingDistance(bitSetBloomFilter0, hasherBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=105 m=105 k=1 ] is not the same as null
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SetOperations", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 125, 125);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, (Shape) null);
      // Undeclared exception!
      try { 
        SetOperations.estimateUnionSize(bitSetBloomFilter0, countingBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=125 m=125 k=1 ] is not the same as null
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SetOperations", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[8];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, (int) (byte)1, 3000, (int) (byte)116);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(dynamicHasher0, shape0);
      double double0 = SetOperations.cosineDistance(countingBloomFilter0, hasherBloomFilter0);
      assertEquals((-2.220446049250313E-16), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[8];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, (int) (byte)1, 3000, (int) (byte)116);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(shape0);
      double double0 = SetOperations.jaccardSimilarity(countingBloomFilter0, hasherBloomFilter0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, (int) (byte)1, 3000, (int) (byte)116);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(shape0);
      double double0 = SetOperations.jaccardDistance(hasherBloomFilter0, countingBloomFilter0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, (int) (byte)1, 3000, (int) (byte)116);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(shape0);
      double double0 = SetOperations.cosineDistance(countingBloomFilter0, hasherBloomFilter0);
      assertEquals(1.0, double0, 0.01);
  }
}
