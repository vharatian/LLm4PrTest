/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 17:57:14 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter.hasher;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentity;
import org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentityImpl;
import org.apache.commons.collections4.bloomfilter.hasher.HashFunctionValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class HashFunctionValidator_ESTest extends HashFunctionValidator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.ITERATIVE;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("^=#N", ":K21TH2KLYZ`p5&1", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 2009L);
      boolean boolean0 = HashFunctionValidator.areEqual(hashFunctionIdentityImpl0, hashFunctionIdentityImpl0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.ITERATIVE;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("%s-%s-%s", "_%", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 221L);
      HashFunctionIdentityImpl hashFunctionIdentityImpl1 = new HashFunctionIdentityImpl("%s-%s-%s", "%s-%s-%s", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 221L);
      boolean boolean0 = HashFunctionValidator.areEqual(hashFunctionIdentityImpl1, hashFunctionIdentityImpl0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashFunctionValidator.checkAreEqual((HashFunctionIdentity) null, (HashFunctionIdentity) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.HashFunctionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashFunctionValidator.areEqual((HashFunctionIdentity) null, (HashFunctionIdentity) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.HashFunctionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.ITERATIVE;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("mpou+j2_g`", "8^D#Ch5g|q|L0", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, (-1175L));
      HashFunctionIdentityImpl hashFunctionIdentityImpl1 = new HashFunctionIdentityImpl("mpou+j2_g`", "mpou+j2_g`", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, (-1175L));
      // Undeclared exception!
      try { 
        HashFunctionValidator.checkAreEqual(hashFunctionIdentityImpl1, hashFunctionIdentityImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hash functions are not equal: (mpou+j2_g`-SIGNED-ITERATIVE) != (8^D#Ch5g|q|L0-SIGNED-ITERATIVE)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.HashFunctionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.ITERATIVE;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("MhFT<gi", "%s-%s-%s", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 661L);
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType1 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentityImpl hashFunctionIdentityImpl1 = new HashFunctionIdentityImpl("MhFT<gi", "$VALUES", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType1, (-1L));
      // Undeclared exception!
      try { 
        HashFunctionValidator.checkAreEqual(hashFunctionIdentityImpl1, hashFunctionIdentityImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hash functions are not equal: ($VALUES-UNSIGNED-CYCLIC) != (%s-%s-%s-UNSIGNED-ITERATIVE)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.HashFunctionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.ITERATIVE;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("mpou+j2_g`", "8^D#Ch5g|q|L0", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, (-1175L));
      HashFunctionValidator.checkAreEqual(hashFunctionIdentityImpl0, hashFunctionIdentityImpl0);
      assertEquals((-1175L), hashFunctionIdentityImpl0.getSignature());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl(".$FA/ywHt4", ".$FA/ywHt4", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 0L);
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness1 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentityImpl hashFunctionIdentityImpl1 = new HashFunctionIdentityImpl((String) null, "", hashFunctionIdentity_Signedness1, hashFunctionIdentity_ProcessType0, 0L);
      // Undeclared exception!
      try { 
        HashFunctionValidator.checkAreEqual(hashFunctionIdentityImpl0, hashFunctionIdentityImpl1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hash functions are not equal: (.$FA/ywHt4-UNSIGNED-CYCLIC) != (-SIGNED-CYCLIC)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.HashFunctionValidator", e);
      }
  }
}
