/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 17:52:49 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter.hasher;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.PrimitiveIterator;
import org.apache.commons.collections4.bloomfilter.hasher.DynamicHasher;
import org.apache.commons.collections4.bloomfilter.hasher.HashFunction;
import org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentity;
import org.apache.commons.collections4.bloomfilter.hasher.Shape;
import org.apache.commons.collections4.bloomfilter.hasher.function.Murmur128x86Cyclic;
import org.apache.commons.collections4.bloomfilter.hasher.function.Murmur32x86Iterative;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class DynamicHasher_ESTest extends DynamicHasher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher((HashFunction) null, linkedList0);
      HashFunctionIdentity hashFunctionIdentity0 = dynamicHasher0.getHashFunctionIdentity();
      assertNull(hashFunctionIdentity0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      DynamicHasher.Builder dynamicHasher_Builder0 = new DynamicHasher.Builder(murmur128x86Cyclic0);
      DynamicHasher dynamicHasher0 = dynamicHasher_Builder0.build();
      HashFunctionIdentity hashFunctionIdentity0 = dynamicHasher0.getHashFunctionIdentity();
      assertEquals(HashFunctionIdentity.ProcessType.CYCLIC, hashFunctionIdentity0.getProcessType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      DynamicHasher.Builder dynamicHasher_Builder0 = new DynamicHasher.Builder(murmur128x86Cyclic0);
      DynamicHasher dynamicHasher0 = dynamicHasher_Builder0.build();
      // Undeclared exception!
      try { 
        dynamicHasher0.getBits((Shape) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.DynamicHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      DynamicHasher.Builder dynamicHasher_Builder0 = new DynamicHasher.Builder(murmur32x86Iterative0);
      DynamicHasher dynamicHasher0 = dynamicHasher_Builder0.build();
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 255, 255);
      // Undeclared exception!
      try { 
        dynamicHasher0.getBits(shape0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hash functions are not equal: (Murmur3_x86_32-SIGNED-ITERATIVE) != (Murmur3_x64_128-SIGNED-CYCLIC)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.HashFunctionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      DynamicHasher dynamicHasher0 = null;
      try {
        dynamicHasher0 = new DynamicHasher(murmur32x86Iterative0, (List<byte[]>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur32x86Iterative0, linkedList0);
      HashFunctionIdentity hashFunctionIdentity0 = dynamicHasher0.getHashFunctionIdentity();
      assertEquals((-933798608L), hashFunctionIdentity0.getSignature());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      DynamicHasher.Builder dynamicHasher_Builder0 = new DynamicHasher.Builder(murmur32x86Iterative0);
      DynamicHasher dynamicHasher0 = dynamicHasher_Builder0.build();
      boolean boolean0 = dynamicHasher0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      DynamicHasher.Builder dynamicHasher_Builder0 = new DynamicHasher.Builder(murmur32x86Iterative0);
      byte[] byteArray0 = new byte[4];
      DynamicHasher.Builder dynamicHasher_Builder1 = dynamicHasher_Builder0.with(byteArray0);
      DynamicHasher dynamicHasher0 = dynamicHasher_Builder1.build();
      boolean boolean0 = dynamicHasher0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      DynamicHasher.Builder dynamicHasher_Builder0 = new DynamicHasher.Builder(murmur32x86Iterative0);
      byte[] byteArray0 = new byte[4];
      dynamicHasher_Builder0.with(byteArray0);
      DynamicHasher dynamicHasher0 = dynamicHasher_Builder0.build();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 255, 255);
      PrimitiveIterator.OfInt primitiveIterator_OfInt0 = dynamicHasher0.getBits(shape0);
      assertNotNull(primitiveIterator_OfInt0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      DynamicHasher.Builder dynamicHasher_Builder0 = new DynamicHasher.Builder(murmur32x86Iterative0);
      DynamicHasher.Builder dynamicHasher_Builder1 = dynamicHasher_Builder0.with("Murmur3_x86_32");
      assertSame(dynamicHasher_Builder0, dynamicHasher_Builder1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DynamicHasher.Builder dynamicHasher_Builder0 = new DynamicHasher.Builder((HashFunction) null);
      DynamicHasher.Builder dynamicHasher_Builder1 = dynamicHasher_Builder0.with((byte) (-44));
      assertSame(dynamicHasher_Builder0, dynamicHasher_Builder1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      DynamicHasher.Builder dynamicHasher_Builder0 = new DynamicHasher.Builder(murmur32x86Iterative0);
      DynamicHasher dynamicHasher0 = dynamicHasher_Builder0.build();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 255, 255);
      PrimitiveIterator.OfInt primitiveIterator_OfInt0 = dynamicHasher0.getBits(shape0);
      assertNotNull(primitiveIterator_OfInt0);
  }
}
