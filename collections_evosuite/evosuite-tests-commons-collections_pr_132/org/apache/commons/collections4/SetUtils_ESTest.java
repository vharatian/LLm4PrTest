/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 17:23:38 GMT 2025
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.NavigableSet;
import java.util.Set;
import java.util.SortedSet;
import java.util.TreeSet;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.SetUtils;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.NOPTransformer;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.set.UnmodifiableSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SetUtils_ESTest extends SetUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Set<Integer> set0 = SetUtils.unmodifiableSet(integerArray0);
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.disjunction((Set<? extends Integer>) set0, (Set<? extends Integer>) set0);
      boolean boolean0 = SetUtils.isEqualSet(set0, setUtils_SetView0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SortedSet<Object> sortedSet0 = SetUtils.emptySortedSet();
      SortedSet<Object> sortedSet1 = SetUtils.unmodifiableSortedSet(sortedSet0);
      assertSame(sortedSet0, sortedSet1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Set<InstanceofPredicate> set0 = SetUtils.emptySet();
      Set<InstanceofPredicate> set1 = SetUtils.unmodifiableSet((Set<? extends InstanceofPredicate>) set0);
      assertTrue(set1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TreeSet<UnmodifiableSet<Object>> treeSet0 = new TreeSet<UnmodifiableSet<Object>>();
      SortedSet<UnmodifiableSet<Object>> sortedSet0 = SetUtils.unmodifiableNavigableSet((NavigableSet<UnmodifiableSet<Object>>) treeSet0);
      assertTrue(sortedSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      SortedSet<Integer> sortedSet0 = SetUtils.transformedSortedSet((SortedSet<Integer>) treeSet0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      assertTrue(sortedSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Set<Integer> set0 = SetUtils.newIdentityHashSet();
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      Set<Integer> set1 = SetUtils.transformedSet(set0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      assertTrue(set1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Transformer<Integer, Integer> transformer0 = NOPTransformer.nopTransformer();
      SortedSet<Integer> sortedSet0 = SetUtils.transformedNavigableSet((NavigableSet<Integer>) treeSet0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      assertEquals(0, sortedSet0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SortedSet<Integer> sortedSet0 = SetUtils.emptySortedSet();
      SortedSet<Integer> sortedSet1 = SetUtils.synchronizedSortedSet(sortedSet0);
      assertEquals(0, sortedSet1.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Set<Object> set0 = SetUtils.emptySet();
      Set<Object> set1 = SetUtils.synchronizedSet(set0);
      assertEquals(0, set1.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SortedSet<InstanceofPredicate> sortedSet0 = SetUtils.emptySortedSet();
      Predicate<InstanceofPredicate> predicate0 = UniquePredicate.uniquePredicate();
      SortedSet<InstanceofPredicate> sortedSet1 = SetUtils.predicatedSortedSet(sortedSet0, (Predicate<? super InstanceofPredicate>) predicate0);
      assertEquals(0, sortedSet1.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Integer integer0 = new Integer((-3382));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) integer0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Set<Integer> set0 = SetUtils.predicatedSet((Set<Integer>) treeSet0, (Predicate<? super Integer>) predicate0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SortedSet<Object> sortedSet0 = SetUtils.predicatedNavigableSet((NavigableSet<Object>) treeSet0, (Predicate<? super Object>) uniquePredicate0);
      assertEquals(0, sortedSet0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[1];
      Set<InstanceofPredicate> set0 = SetUtils.unmodifiableSet(instanceofPredicateArray0);
      SetUtils.SetView<InstanceofPredicate> setUtils_SetView0 = SetUtils.union((Set<? extends InstanceofPredicate>) set0, (Set<? extends InstanceofPredicate>) set0);
      Iterator<InstanceofPredicate> iterator0 = setUtils_SetView0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      SetUtils.SetView<Object> setUtils_SetView0 = SetUtils.intersection((Set<?>) treeSet0, (Set<?>) treeSet0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      setUtils_SetView0.copyInto(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      HashSet<Object> hashSet0 = SetUtils.hashSet(objectArray0);
      assertTrue(hashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Set<InstanceofPredicate> set0 = SetUtils.emptyIfNull((Set<InstanceofPredicate>) linkedHashSet0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      HashSet<Integer> hashSet0 = SetUtils.hashSet(integerArray0);
      Set<Integer> set0 = SetUtils.emptyIfNull((Set<Integer>) hashSet0);
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.union((Set<? extends Integer>) null, (Set<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // setA
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Integer integer0 = new Integer(4305);
      treeSet0.add(integer0);
      Predicate<Integer> predicate0 = NullPredicate.nullPredicate();
      // Undeclared exception!
      try { 
        SetUtils.predicatedSortedSet((SortedSet<Integer>) treeSet0, (Predicate<? super Integer>) predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object '4305' - Predicate 'org.apache.commons.collections4.functors.NullPredicate@2' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Set<Integer> set0 = SetUtils.unmodifiableSet(integerArray0);
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      // Undeclared exception!
      try { 
        SetUtils.predicatedSet(set0, (Predicate<? super Integer>) transformerPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer[] integerArray0 = new Integer[18];
      Set<Integer> set0 = SetUtils.unmodifiableSet(integerArray0);
      Predicate<Integer> predicate0 = FalsePredicate.falsePredicate();
      // Undeclared exception!
      try { 
        SetUtils.predicatedSet(set0, (Predicate<? super Integer>) predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'null' - Predicate 'org.apache.commons.collections4.functors.FalsePredicate@5' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Transformer<Integer, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      Predicate<Integer> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Integer, Boolean>) transformer0);
      Integer integer0 = new Integer(7);
      treeSet0.add(integer0);
      // Undeclared exception!
      try { 
        SetUtils.predicatedNavigableSet((NavigableSet<Integer>) treeSet0, (Predicate<? super Integer>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Integer integer0 = new Integer(8);
      treeSet0.add(integer0);
      Predicate<Integer> predicate0 = FalsePredicate.falsePredicate();
      // Undeclared exception!
      try { 
        SetUtils.predicatedNavigableSet((NavigableSet<Integer>) treeSet0, (Predicate<? super Integer>) predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object '8' - Predicate 'org.apache.commons.collections4.functors.FalsePredicate@2' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer[] integerArray0 = new Integer[22];
      Set<Integer> set0 = SetUtils.unmodifiableSet(integerArray0);
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Integer integer0 = new Integer((-4));
      treeSet0.add(integer0);
      // Undeclared exception!
      try { 
        SetUtils.isEqualSet(treeSet0, set0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.disjunction((Set<? extends Integer>) null, (Set<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // setA
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.difference((Set<? extends Integer>) null, (Set<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // setA
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Set<Integer> set0 = SetUtils.unmodifiableSet((Integer[]) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Set<Integer> set0 = SetUtils.unmodifiableSet(integerArray0);
      SortedSet<Integer> sortedSet0 = SetUtils.emptySortedSet();
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.union((Set<? extends Integer>) sortedSet0, (Set<? extends Integer>) set0);
      boolean boolean0 = setUtils_SetView0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.union((Set<? extends Integer>) treeSet0, (Set<? extends Integer>) treeSet0);
      boolean boolean0 = setUtils_SetView0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Set<Integer> set0 = SetUtils.unmodifiableSet(integerArray0);
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.union((Set<? extends Integer>) set0, (Set<? extends Integer>) set0);
      boolean boolean0 = setUtils_SetView0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Set<Integer> set0 = SetUtils.unmodifiableSet(integerArray0);
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.union((Set<? extends Integer>) set0, (Set<? extends Integer>) set0);
      boolean boolean0 = SetUtils.isEqualSet(setUtils_SetView0, set0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[1];
      HashSet<InstanceofPredicate> hashSet0 = SetUtils.hashSet(instanceofPredicateArray0);
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      boolean boolean0 = SetUtils.isEqualSet(linkedHashSet0, hashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      boolean boolean0 = SetUtils.isEqualSet(treeSet0, (Collection<?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.union((Set<? extends Integer>) treeSet0, (Set<? extends Integer>) treeSet0);
      boolean boolean0 = SetUtils.isEqualSet((Collection<?>) null, setUtils_SetView0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Set<InstanceofPredicate> set0 = SetUtils.emptySet();
      boolean boolean0 = SetUtils.isEqualSet(set0, set0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Integer[] integerArray0 = new Integer[11];
      Set<Integer> set0 = SetUtils.unmodifiableSet(integerArray0);
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.difference((Set<? extends Integer>) set0, (Set<? extends Integer>) set0);
      SetUtils.SetView<Integer> setUtils_SetView1 = SetUtils.intersection((Set<? extends Integer>) set0, (Set<? extends Integer>) setUtils_SetView0);
      boolean boolean0 = setUtils_SetView1.contains((Object) null);
      assertFalse(boolean0);
      assertTrue(setUtils_SetView1.equals((Object)setUtils_SetView0));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Set<Integer> set0 = SetUtils.unmodifiableSet(integerArray0);
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.intersection((Set<? extends Integer>) set0, (Set<? extends Integer>) set0);
      boolean boolean0 = SetUtils.isEqualSet(setUtils_SetView0, set0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashSet<ComparatorPredicate.Criterion> hashSet0 = SetUtils.hashSet((ComparatorPredicate.Criterion[]) null);
      assertNull(hashSet0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Integer integer0 = new Integer(2);
      treeSet0.add(integer0);
      int int0 = SetUtils.hashCodeForSet((Collection<Integer>) treeSet0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = SetUtils.hashCodeForSet((Collection<Object>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Set<Integer> set0 = SetUtils.unmodifiableSet(integerArray0);
      int int0 = SetUtils.hashCodeForSet((Collection<Integer>) set0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Set<Integer> set0 = SetUtils.emptyIfNull((Set<Integer>) null);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Set<Integer> set0 = SetUtils.unmodifiableSet(integerArray0);
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.difference((Set<? extends Integer>) set0, (Set<? extends Integer>) set0);
      boolean boolean0 = setUtils_SetView0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.difference((Set<? extends Integer>) linkedHashSet0, (Set<? extends Integer>) linkedHashSet0);
      boolean boolean0 = setUtils_SetView0.contains(linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Set<Integer> set0 = SetUtils.unmodifiableSet(integerArray0);
      assertNotNull(set0);
      
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.disjunction((Set<? extends Integer>) set0, (Set<? extends Integer>) set0);
      SetUtils.SetView<Integer> setUtils_SetView1 = SetUtils.difference((Set<? extends Integer>) set0, (Set<? extends Integer>) setUtils_SetView0);
      boolean boolean0 = SetUtils.isEqualSet(setUtils_SetView1, set0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.disjunction((Set<? extends Integer>) treeSet0, (Set<? extends Integer>) treeSet0);
      Set<Integer> set0 = setUtils_SetView0.toSet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      // Undeclared exception!
      try { 
        SetUtils.predicatedNavigableSet((NavigableSet<Transformer<UnmodifiableSet<Integer>, Integer>>) null, (Predicate<? super Transformer<UnmodifiableSet<Integer>, Integer>>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Transformer<Integer, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        SetUtils.transformedSet((Set<Integer>) null, (Transformer<? super Integer, ? extends Integer>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.unmodifiableSet((Set<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.synchronizedSet((Set<ExceptionTransformer<Integer, Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.unmodifiableNavigableSet((NavigableSet<TreeSet<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.unmodifiableSortedSet((SortedSet<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.synchronizedSortedSet((SortedSet<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.orderedSet((Set<UnmodifiableSet<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SortedSet<Integer> sortedSet0 = SetUtils.emptySortedSet();
      // Undeclared exception!
      try { 
        SetUtils.transformedSortedSet(sortedSet0, (Transformer<? super Integer, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.intersection((Set<? extends Integer>) null, (Set<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // setA
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SortedSet<InstanceofPredicate> sortedSet0 = SetUtils.emptySortedSet();
      // Undeclared exception!
      try { 
        SetUtils.predicatedSortedSet(sortedSet0, (Predicate<? super InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      // Undeclared exception!
      try { 
        SetUtils.predicatedSet((Set<Integer>) null, (Predicate<? super Integer>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      // Undeclared exception!
      try { 
        SetUtils.transformedNavigableSet((NavigableSet<Integer>) treeSet0, (Transformer<? super Integer, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.disjunction((Set<? extends Integer>) treeSet0, (Set<? extends Integer>) treeSet0);
      boolean boolean0 = setUtils_SetView0.isEmpty();
      assertTrue(boolean0);
  }
}
