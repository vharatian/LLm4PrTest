/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 17:25:55 GMT 2025
 */

package org.apache.commons.collections4.bag;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.lang.reflect.Array;
import java.nio.charset.Charset;
import java.time.chrono.ThaiBuddhistEra;
import java.time.format.FormatStyle;
import java.time.format.TextStyle;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import java.util.SortedMap;
import java.util.TreeMap;
import org.apache.commons.collections4.Bag;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.bag.AbstractMapBag;
import org.apache.commons.collections4.bag.HashBag;
import org.apache.commons.collections4.bag.PredicatedBag;
import org.apache.commons.collections4.bag.SynchronizedBag;
import org.apache.commons.collections4.bag.TreeBag;
import org.apache.commons.collections4.collection.TransformedCollection;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AbstractMapBag_ESTest extends AbstractMapBag_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashBag<AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle>> hashBag0 = new HashBag<AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle>>();
      Comparator<HashBag<TextStyle>> comparator0 = (Comparator<HashBag<TextStyle>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(org.apache.commons.collections4.bag.HashBag.class) , any(org.apache.commons.collections4.bag.HashBag.class));
      TreeBag<HashBag<TextStyle>> treeBag0 = new TreeBag<HashBag<TextStyle>>(comparator0);
      treeBag0.add((HashBag<TextStyle>) null);
      boolean boolean0 = treeBag0.equals(hashBag0);
      assertEquals(1, treeBag0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashBag<AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle>> hashBag0 = new HashBag<AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle>>();
      HashBag<TextStyle>[] hashBagArray0 = (HashBag<TextStyle>[]) Array.newInstance(HashBag.class, 7);
      HashBag<TextStyle>[] hashBagArray1 = hashBag0.toArray(hashBagArray0);
      assertEquals(7, hashBagArray1.length);
      assertEquals(0, hashBag0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashBag<AbstractMapBag.MutableInteger> hashBag0 = new HashBag<AbstractMapBag.MutableInteger>();
      AbstractMapBag.MutableInteger abstractMapBag_MutableInteger0 = new AbstractMapBag.MutableInteger(793);
      hashBag0.add(abstractMapBag_MutableInteger0);
      AbstractMapBag.MutableInteger abstractMapBag_MutableInteger1 = new AbstractMapBag.MutableInteger(512);
      Predicate<AbstractMapBag.MutableInteger> predicate0 = EqualPredicate.equalPredicate(abstractMapBag_MutableInteger1);
      PredicatedBag<AbstractMapBag.MutableInteger> predicatedBag0 = null;
      try {
        predicatedBag0 = new PredicatedBag<AbstractMapBag.MutableInteger>(hashBag0, predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'org.apache.commons.collections4.bag.AbstractMapBag$MutableInteger@319' - Predicate 'org.apache.commons.collections4.functors.EqualPredicate@5' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TreeBag<FormatStyle> treeBag0 = new TreeBag<FormatStyle>();
      FormatStyle formatStyle0 = FormatStyle.SHORT;
      treeBag0.add(formatStyle0);
      HashBag<FormatStyle> hashBag0 = new HashBag<FormatStyle>(treeBag0);
      SynchronizedBag<FormatStyle> synchronizedBag0 = SynchronizedBag.synchronizedBag((Bag<FormatStyle>) treeBag0);
      synchronizedBag0.add(formatStyle0);
      HashBag<Object> hashBag1 = new HashBag<Object>(synchronizedBag0);
      boolean boolean0 = hashBag1.retainAll((Bag<?>) hashBag0);
      assertEquals(2, treeBag0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comparator<AbstractMapBag.MutableInteger> comparator0 = (Comparator<AbstractMapBag.MutableInteger>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(4, 4, 2484, 2484, (-2635)).when(comparator0).compare(any(org.apache.commons.collections4.bag.AbstractMapBag.MutableInteger.class) , any(org.apache.commons.collections4.bag.AbstractMapBag.MutableInteger.class));
      TreeBag<AbstractMapBag.MutableInteger> treeBag0 = new TreeBag<AbstractMapBag.MutableInteger>(comparator0);
      AbstractMapBag.MutableInteger abstractMapBag_MutableInteger0 = new AbstractMapBag.MutableInteger(44);
      treeBag0.add(abstractMapBag_MutableInteger0);
      treeBag0.add(abstractMapBag_MutableInteger0);
      TextStyle textStyle0 = TextStyle.NARROW_STANDALONE;
      boolean boolean0 = treeBag0.remove((Object) textStyle0);
      assertEquals(1, treeBag0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(31, 27).when(comparator0).compare(any() , any());
      TreeBag<AbstractMapBag.MutableInteger> treeBag0 = new TreeBag<AbstractMapBag.MutableInteger>(comparator0);
      AbstractMapBag.MutableInteger abstractMapBag_MutableInteger0 = new AbstractMapBag.MutableInteger(2687);
      treeBag0.add(abstractMapBag_MutableInteger0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator1).compare(any() , any());
      TreeBag<FormatStyle> treeBag1 = new TreeBag<FormatStyle>(comparator1);
      FormatStyle formatStyle0 = FormatStyle.SHORT;
      treeBag1.add(formatStyle0);
      boolean boolean0 = treeBag1.containsAll(treeBag0);
      assertEquals(1, treeBag1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TreeBag<TreeMap<String, String>> treeBag0 = new TreeBag<TreeMap<String, String>>();
      AbstractMapBag.BagIterator<TreeMap<String, String>> abstractMapBag_BagIterator0 = new AbstractMapBag.BagIterator<TreeMap<String, String>>(treeBag0);
      boolean boolean0 = abstractMapBag_BagIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashBag<AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle>> hashBag0 = new HashBag<AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle>>();
      HashBag<TextStyle>[] hashBagArray0 = (HashBag<TextStyle>[]) Array.newInstance(HashBag.class, 0);
      HashBag<TextStyle>[] hashBagArray1 = hashBag0.toArray(hashBagArray0);
      assertSame(hashBagArray1, hashBagArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comparator<AbstractMapBag.MutableInteger> comparator0 = (Comparator<AbstractMapBag.MutableInteger>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(org.apache.commons.collections4.bag.AbstractMapBag.MutableInteger.class) , any(org.apache.commons.collections4.bag.AbstractMapBag.MutableInteger.class));
      TreeBag<AbstractMapBag.MutableInteger> treeBag0 = new TreeBag<AbstractMapBag.MutableInteger>(comparator0);
      AbstractMapBag.MutableInteger abstractMapBag_MutableInteger0 = new AbstractMapBag.MutableInteger(0);
      treeBag0.add(abstractMapBag_MutableInteger0);
      int int0 = treeBag0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparator<AbstractMapBag.MutableInteger> comparator0 = (Comparator<AbstractMapBag.MutableInteger>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, (-2195), 0, 0, 0).when(comparator0).compare(any(org.apache.commons.collections4.bag.AbstractMapBag.MutableInteger.class) , any(org.apache.commons.collections4.bag.AbstractMapBag.MutableInteger.class));
      TreeBag<AbstractMapBag.MutableInteger> treeBag0 = new TreeBag<AbstractMapBag.MutableInteger>(comparator0);
      AbstractMapBag.MutableInteger abstractMapBag_MutableInteger0 = new AbstractMapBag.MutableInteger(44);
      treeBag0.add(abstractMapBag_MutableInteger0);
      treeBag0.add(abstractMapBag_MutableInteger0);
      LinkedHashSet<TextStyle> linkedHashSet0 = new LinkedHashSet<TextStyle>();
      boolean boolean0 = treeBag0.retainAll(linkedHashSet0);
      assertFalse(treeBag0.contains(abstractMapBag_MutableInteger0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TreeBag<HashBag<TextStyle>> treeBag0 = new TreeBag<HashBag<TextStyle>>();
      Iterator<HashBag<TextStyle>> iterator0 = treeBag0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashBag<Object> hashBag0 = new HashBag<Object>();
      Map<Object, AbstractMapBag.MutableInteger> map0 = (Map<Object, AbstractMapBag.MutableInteger>)hashBag0.getMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashBag<TextStyle> hashBag0 = new HashBag<TextStyle>();
      TextStyle textStyle0 = TextStyle.SHORT_STANDALONE;
      hashBag0.add(textStyle0);
      HashBag<Object> hashBag1 = new HashBag<Object>(hashBag0);
      hashBag1.getMap();
      assertEquals(1, hashBag0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashBag<Object> hashBag0 = new HashBag<Object>();
      FormatStyle formatStyle0 = FormatStyle.MEDIUM;
      hashBag0.add((Object) formatStyle0);
      HashBag<AbstractMapBag.MutableInteger> hashBag1 = new HashBag<AbstractMapBag.MutableInteger>();
      boolean boolean0 = hashBag1.containsAll(hashBag0);
      assertEquals(1, hashBag0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-168)).when(comparator0).compare(any() , any());
      TreeBag<HashBag<TextStyle>> treeBag0 = new TreeBag<HashBag<TextStyle>>(comparator0);
      HashBag<TextStyle> hashBag0 = new HashBag<TextStyle>();
      treeBag0.add(hashBag0);
      HashBag<Object> hashBag1 = new HashBag<Object>();
      boolean boolean0 = hashBag1.addAll(treeBag0);
      assertEquals(1, hashBag1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<Predicate<Object>> treeBag0 = new TreeBag<Predicate<Object>>(comparator0);
      boolean boolean0 = treeBag0.addAll(treeBag0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashBag<AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle>> hashBag0 = new HashBag<AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle>>();
      // Undeclared exception!
      try { 
        hashBag0.toArray((HashBag<TextStyle>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.AbstractMapBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashBag<AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle>> hashBag0 = new HashBag<AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle>>();
      TextStyle textStyle0 = TextStyle.SHORT;
      AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle>(textStyle0, textStyle0);
      hashBag0.add(abstractMap_SimpleImmutableEntry0);
      HashBag<TextStyle>[] hashBagArray0 = (HashBag<TextStyle>[]) Array.newInstance(HashBag.class, 0);
      // Undeclared exception!
      try { 
        hashBag0.toArray(hashBagArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.util.AbstractMap$SimpleImmutableEntry
         //
         verifyException("org.apache.commons.collections4.bag.AbstractMapBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashBag<Object> hashBag0 = new HashBag<Object>();
      hashBag0.add((Object) null);
      // Undeclared exception!
      try { 
        hashBag0.retainAll((Bag<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.AbstractMapBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashBag<TextStyle> hashBag0 = new HashBag<TextStyle>();
      HashBag<Object> hashBag1 = new HashBag<Object>(hashBag0);
      hashBag1.add((Object) hashBag0);
      TreeBag<Object> treeBag0 = new TreeBag<Object>();
      // Undeclared exception!
      try { 
        hashBag1.retainAll((Bag<?>) treeBag0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TreeBag<AbstractMapBag.MutableInteger> treeBag0 = new TreeBag<AbstractMapBag.MutableInteger>();
      // Undeclared exception!
      try { 
        treeBag0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.AbstractMapBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TreeBag<String> treeBag0 = new TreeBag<String>((Comparator<? super String>) null);
      AbstractMapBag.MutableInteger abstractMapBag_MutableInteger0 = new AbstractMapBag.MutableInteger(4);
      Comparator<AbstractMapBag.MutableInteger> comparator0 = (Comparator<AbstractMapBag.MutableInteger>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any(org.apache.commons.collections4.bag.AbstractMapBag.MutableInteger.class) , any(org.apache.commons.collections4.bag.AbstractMapBag.MutableInteger.class));
      TreeBag<AbstractMapBag.MutableInteger> treeBag1 = new TreeBag<AbstractMapBag.MutableInteger>(comparator0);
      treeBag1.add(abstractMapBag_MutableInteger0);
      // Undeclared exception!
      try { 
        treeBag1.retainAll(treeBag0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comparator<AbstractMapBag.MutableInteger> comparator0 = (Comparator<AbstractMapBag.MutableInteger>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(comparator0).compare(any(org.apache.commons.collections4.bag.AbstractMapBag.MutableInteger.class) , any(org.apache.commons.collections4.bag.AbstractMapBag.MutableInteger.class));
      TreeBag<AbstractMapBag.MutableInteger> treeBag0 = new TreeBag<AbstractMapBag.MutableInteger>(comparator0);
      AbstractMapBag.MutableInteger abstractMapBag_MutableInteger0 = new AbstractMapBag.MutableInteger((-1864));
      treeBag0.add(abstractMapBag_MutableInteger0);
      TreeBag<HashBag<String>> treeBag1 = new TreeBag<HashBag<String>>();
      // Undeclared exception!
      try { 
        treeBag1.removeAll(treeBag0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TreeBag<String> treeBag0 = new TreeBag<String>();
      Object[] objectArray0 = new Object[2];
      TreeBag<Object> treeBag1 = new TreeBag<Object>(treeBag0);
      // Undeclared exception!
      try { 
        treeBag1.remove(objectArray0[1], 93);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TreeBag<String> treeBag0 = new TreeBag<String>();
      TreeBag<Object> treeBag1 = new TreeBag<Object>(treeBag0);
      // Undeclared exception!
      try { 
        treeBag1.remove((Object) treeBag0, (-1065));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TreeBag<AbstractMapBag.MutableInteger> treeBag0 = new TreeBag<AbstractMapBag.MutableInteger>((Comparator<? super AbstractMapBag.MutableInteger>) null);
      // Undeclared exception!
      try { 
        treeBag0.remove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TreeBag<TextStyle> treeBag0 = new TreeBag<TextStyle>();
      SortedMap<TextStyle, AbstractMapBag.MutableInteger> sortedMap0 = (SortedMap<TextStyle, AbstractMapBag.MutableInteger>)treeBag0.getMap();
      // Undeclared exception!
      try { 
        treeBag0.remove((Object) sortedMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TreeBag<Predicate<TextStyle>> treeBag0 = new TreeBag<Predicate<TextStyle>>();
      // Undeclared exception!
      try { 
        treeBag0.getCount((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashBag<String> hashBag0 = new HashBag<String>();
      TreeBag<HashBag<ThaiBuddhistEra>> treeBag0 = new TreeBag<HashBag<ThaiBuddhistEra>>();
      // Undeclared exception!
      try { 
        treeBag0.getCount(hashBag0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TreeBag<String> treeBag0 = new TreeBag<String>((Comparator<? super String>) null);
      treeBag0.add("Al@*@/.g:VjPWpkIs");
      HashBag<TextStyle> hashBag0 = new HashBag<TextStyle>();
      TextStyle textStyle0 = TextStyle.SHORT_STANDALONE;
      hashBag0.add(textStyle0);
      // Undeclared exception!
      try { 
        hashBag0.equals(treeBag0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Enum
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TreeBag<TextStyle> treeBag0 = new TreeBag<TextStyle>();
      SortedMap<TextStyle, AbstractMapBag.MutableInteger> sortedMap0 = (SortedMap<TextStyle, AbstractMapBag.MutableInteger>)treeBag0.getMap();
      // Undeclared exception!
      try { 
        treeBag0.doReadObject(sortedMap0, (ObjectInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.AbstractMapBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashBag<TextStyle> hashBag0 = new HashBag<TextStyle>();
      // Undeclared exception!
      try { 
        hashBag0.containsAll((Bag<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.AbstractMapBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TreeBag<FormatStyle> treeBag0 = new TreeBag<FormatStyle>();
      // Undeclared exception!
      try { 
        treeBag0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.AbstractMapBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashBag<AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle>> hashBag0 = new HashBag<AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle>>();
      TextStyle textStyle0 = TextStyle.SHORT_STANDALONE;
      AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle>(textStyle0, textStyle0);
      hashBag0.add(abstractMap_SimpleImmutableEntry0);
      TreeBag<FormatStyle> treeBag0 = new TreeBag<FormatStyle>();
      // Undeclared exception!
      try { 
        treeBag0.containsAll(hashBag0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashBag<TextStyle> hashBag0 = new HashBag<TextStyle>();
      // Undeclared exception!
      try { 
        hashBag0.addAll((Collection<? extends TextStyle>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.AbstractMapBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TreeBag<AbstractMapBag.MutableInteger> treeBag0 = new TreeBag<AbstractMapBag.MutableInteger>();
      // Undeclared exception!
      try { 
        treeBag0.add((AbstractMapBag.MutableInteger) null, 626);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TreeBag<Predicate<String>> treeBag0 = new TreeBag<Predicate<String>>();
      // Undeclared exception!
      try { 
        treeBag0.add((Predicate<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // object
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TreeBag<AbstractMapBag.MutableInteger> treeBag0 = new TreeBag<AbstractMapBag.MutableInteger>();
      AbstractMapBag.MutableInteger abstractMapBag_MutableInteger0 = new AbstractMapBag.MutableInteger((-75));
      // Undeclared exception!
      try { 
        treeBag0.add(abstractMapBag_MutableInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Objects of type class org.apache.commons.collections4.bag.AbstractMapBag$MutableInteger cannot be added to a naturally ordered TreeBag as it does not implement Comparable
         //
         verifyException("org.apache.commons.collections4.bag.TreeBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashBag<String> hashBag0 = new HashBag<String>();
      hashBag0.add("T;NS>Hf<gji!R&I2)#");
      hashBag0.hashCode();
      assertEquals(1, hashBag0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashBag<AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle>> hashBag0 = new HashBag<AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle>>();
      Comparator<HashBag<TextStyle>> comparator0 = (Comparator<HashBag<TextStyle>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TextStyle textStyle0 = TextStyle.SHORT_STANDALONE;
      AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle>(textStyle0, textStyle0);
      hashBag0.add(abstractMap_SimpleImmutableEntry0);
      TreeBag<HashBag<TextStyle>> treeBag0 = new TreeBag<HashBag<TextStyle>>(comparator0);
      boolean boolean0 = treeBag0.equals(hashBag0);
      assertEquals(1, hashBag0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TreeBag<FormatStyle> treeBag0 = new TreeBag<FormatStyle>();
      FormatStyle formatStyle0 = FormatStyle.FULL;
      treeBag0.add(formatStyle0);
      treeBag0.add(formatStyle0);
      Comparator<Predicate<FormatStyle>> comparator0 = (Comparator<Predicate<FormatStyle>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(4, (-753), 0).when(comparator0).compare(any(org.apache.commons.collections4.Predicate.class) , any(org.apache.commons.collections4.Predicate.class));
      TreeBag<Predicate<FormatStyle>> treeBag1 = new TreeBag<Predicate<FormatStyle>>(comparator0);
      Predicate<FormatStyle>[] predicateArray0 = (Predicate<FormatStyle>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<FormatStyle> allPredicate0 = new AllPredicate<FormatStyle>(predicateArray0);
      treeBag1.add((Predicate<FormatStyle>) allPredicate0);
      boolean boolean0 = treeBag1.removeAll(treeBag0);
      assertEquals(2, treeBag0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Comparator<HashBag<TextStyle>> comparator0 = (Comparator<HashBag<TextStyle>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(38, 38, 0).when(comparator0).compare(any(org.apache.commons.collections4.bag.HashBag.class) , any(org.apache.commons.collections4.bag.HashBag.class));
      TextStyle textStyle0 = TextStyle.SHORT_STANDALONE;
      AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle>(textStyle0, textStyle0);
      TreeBag<HashBag<TextStyle>> treeBag0 = new TreeBag<HashBag<TextStyle>>(comparator0);
      treeBag0.add((HashBag<TextStyle>) null);
      boolean boolean0 = treeBag0.remove((Object) abstractMap_SimpleImmutableEntry0, 38);
      assertTrue(treeBag0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashBag<TextStyle> hashBag0 = new HashBag<TextStyle>();
      TextStyle textStyle0 = TextStyle.SHORT;
      boolean boolean0 = hashBag0.remove((Object) textStyle0, 705);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TreeBag<TextStyle> treeBag0 = new TreeBag<TextStyle>();
      TextStyle textStyle0 = TextStyle.SHORT_STANDALONE;
      treeBag0.add(textStyle0);
      boolean boolean0 = treeBag0.add(textStyle0, 1458);
      assertEquals(1459, treeBag0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Comparator<TextStyle> comparator0 = (Comparator<TextStyle>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.time.format.TextStyle.class) , any(java.time.format.TextStyle.class));
      TreeBag<TextStyle> treeBag0 = new TreeBag<TextStyle>(comparator0);
      TextStyle textStyle0 = TextStyle.FULL_STANDALONE;
      boolean boolean0 = treeBag0.add(textStyle0, 1676);
      assertEquals(1676, treeBag0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.SHORT_STANDALONE;
      Comparator<TextStyle> comparator0 = (Comparator<TextStyle>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<TextStyle> treeBag0 = new TreeBag<TextStyle>(comparator0);
      boolean boolean0 = treeBag0.add(textStyle0, (-2416));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TreeBag<HashBag<TextStyle>> treeBag0 = new TreeBag<HashBag<TextStyle>>();
      HashBag<TextStyle> hashBag0 = new HashBag<TextStyle>();
      // Undeclared exception!
      try { 
        treeBag0.add(hashBag0, 512);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(599, (-3303)).when(comparator0).compare(any() , any());
      TreeBag<HashBag<TextStyle>> treeBag0 = new TreeBag<HashBag<TextStyle>>(comparator0);
      HashBag<TextStyle> hashBag0 = new HashBag<TextStyle>();
      treeBag0.add(hashBag0);
      HashBag<FormatStyle> hashBag1 = new HashBag<FormatStyle>();
      boolean boolean0 = hashBag1.containsAll((Bag<?>) treeBag0);
      assertEquals(1, treeBag0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Comparator<TextStyle> comparator0 = (Comparator<TextStyle>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(166).when(comparator0).compare(any(java.time.format.TextStyle.class) , any(java.time.format.TextStyle.class));
      TreeBag<TextStyle> treeBag0 = new TreeBag<TextStyle>(comparator0);
      TextStyle textStyle0 = TextStyle.SHORT;
      treeBag0.add(textStyle0);
      TreeBag<Object> treeBag1 = new TreeBag<Object>(treeBag0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<HashBag<TextStyle>> treeBag2 = new TreeBag<HashBag<TextStyle>>(comparator1);
      boolean boolean0 = treeBag2.containsAll((Bag<?>) treeBag1);
      assertEquals(1, treeBag0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HashBag<Object> hashBag0 = new HashBag<Object>();
      int int0 = hashBag0.getCount(hashBag0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Comparator<AbstractMapBag.MutableInteger> comparator0 = (Comparator<AbstractMapBag.MutableInteger>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(512, 512).when(comparator0).compare(any(org.apache.commons.collections4.bag.AbstractMapBag.MutableInteger.class) , any(org.apache.commons.collections4.bag.AbstractMapBag.MutableInteger.class));
      TreeBag<AbstractMapBag.MutableInteger> treeBag0 = new TreeBag<AbstractMapBag.MutableInteger>(comparator0);
      AbstractMapBag.MutableInteger abstractMapBag_MutableInteger0 = new AbstractMapBag.MutableInteger(44);
      treeBag0.add(abstractMapBag_MutableInteger0);
      Predicate<Predicate<Object>> predicate0 = ExceptionPredicate.exceptionPredicate();
      int int0 = treeBag0.getCount(predicate0);
      assertEquals(1, treeBag0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TreeBag<Object> treeBag0 = new TreeBag<Object>();
      boolean boolean0 = treeBag0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Comparator<TextStyle> comparator0 = (Comparator<TextStyle>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.time.format.TextStyle.class) , any(java.time.format.TextStyle.class));
      TreeBag<TextStyle> treeBag0 = new TreeBag<TextStyle>(comparator0);
      TextStyle textStyle0 = TextStyle.FULL_STANDALONE;
      treeBag0.add(textStyle0);
      boolean boolean0 = treeBag0.isEmpty();
      assertEquals(1, treeBag0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Comparator<AbstractMapBag.MutableInteger> comparator0 = (Comparator<AbstractMapBag.MutableInteger>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<AbstractMapBag.MutableInteger> treeBag0 = new TreeBag<AbstractMapBag.MutableInteger>(comparator0);
      int int0 = treeBag0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HashBag<TextStyle> hashBag0 = new HashBag<TextStyle>();
      TextStyle textStyle0 = TextStyle.NARROW_STANDALONE;
      TextStyle textStyle1 = TextStyle.FULL_STANDALONE;
      hashBag0.add(textStyle1);
      hashBag0.add(textStyle0);
      hashBag0.toString();
      assertEquals(2, hashBag0.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HashBag<TextStyle> hashBag0 = new HashBag<TextStyle>();
      String string0 = hashBag0.toString();
      assertEquals(0, hashBag0.size());
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HashBag<String> hashBag0 = new HashBag<String>();
      hashBag0.add((String) null);
      hashBag0.hashCode();
      assertEquals(1, hashBag0.size());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HashBag<TextStyle> hashBag0 = new HashBag<TextStyle>();
      HashBag<Object> hashBag1 = new HashBag<Object>(hashBag0);
      Object object0 = new Object();
      TextStyle textStyle0 = TextStyle.NARROW;
      hashBag0.add(textStyle0);
      hashBag1.add(object0);
      boolean boolean0 = hashBag0.equals(hashBag1);
      assertEquals(1, hashBag1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HashBag<TextStyle> hashBag0 = new HashBag<TextStyle>();
      TextStyle textStyle0 = TextStyle.NARROW_STANDALONE;
      hashBag0.add(textStyle0);
      HashBag<Object> hashBag1 = new HashBag<Object>(hashBag0);
      boolean boolean0 = hashBag0.equals(hashBag1);
      assertEquals(1, hashBag0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HashBag<Object> hashBag0 = new HashBag<Object>();
      HashBag<String> hashBag1 = new HashBag<String>();
      hashBag0.add((Object) hashBag1);
      boolean boolean0 = hashBag0.contains(hashBag0);
      assertEquals(1, hashBag0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HashBag<TextStyle> hashBag0 = new HashBag<TextStyle>();
      Object object0 = new Object();
      boolean boolean0 = hashBag0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HashBag<TextStyle> hashBag0 = new HashBag<TextStyle>();
      boolean boolean0 = hashBag0.equals(hashBag0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HashBag<AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle>> hashBag0 = new HashBag<AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle>>();
      TextStyle textStyle0 = TextStyle.SHORT_STANDALONE;
      AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle>(textStyle0, textStyle0);
      hashBag0.add(abstractMap_SimpleImmutableEntry0);
      MockFile mockFile0 = new MockFile("(b**nJ6rN]%+ji>e", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      hashBag0.doWriteObject(objectOutputStream0);
      assertEquals(205L, mockFile0.length());
      assertEquals(1, hashBag0.size());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TreeBag<Object> treeBag0 = new TreeBag<Object>();
      Set<Object> set0 = treeBag0.uniqueSet();
      Set<Object> set1 = treeBag0.uniqueSet();
      assertSame(set1, set0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HashBag<TextStyle> hashBag0 = new HashBag<TextStyle>();
      TextStyle textStyle0 = TextStyle.FULL_STANDALONE;
      hashBag0.add(textStyle0);
      hashBag0.toArray();
      assertEquals(1, hashBag0.size());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      HashBag<TextStyle> hashBag0 = new HashBag<TextStyle>();
      Object[] objectArray0 = hashBag0.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      HashBag<AbstractMapBag.MutableInteger> hashBag0 = new HashBag<AbstractMapBag.MutableInteger>();
      AbstractMapBag.MutableInteger abstractMapBag_MutableInteger0 = new AbstractMapBag.MutableInteger(512);
      Predicate<AbstractMapBag.MutableInteger> predicate0 = EqualPredicate.equalPredicate(abstractMapBag_MutableInteger0);
      PredicatedBag<AbstractMapBag.MutableInteger> predicatedBag0 = new PredicatedBag<AbstractMapBag.MutableInteger>(hashBag0, predicate0);
      AbstractMapBag.MutableInteger abstractMapBag_MutableInteger1 = new AbstractMapBag.MutableInteger(0);
      // Undeclared exception!
      try { 
        predicatedBag0.add(abstractMapBag_MutableInteger1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'org.apache.commons.collections4.bag.AbstractMapBag$MutableInteger@0' - Predicate 'org.apache.commons.collections4.functors.EqualPredicate@3' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      AbstractMapBag.MutableInteger abstractMapBag_MutableInteger0 = new AbstractMapBag.MutableInteger(43);
      boolean boolean0 = abstractMapBag_MutableInteger0.equals("The wildcard must not be null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(any() , any());
      TreeBag<FormatStyle> treeBag0 = new TreeBag<FormatStyle>(comparator0);
      FormatStyle formatStyle0 = FormatStyle.LONG;
      treeBag0.add(formatStyle0);
      HashBag<FormatStyle> hashBag0 = new HashBag<FormatStyle>(treeBag0);
      SynchronizedBag<FormatStyle> synchronizedBag0 = SynchronizedBag.synchronizedBag((Bag<FormatStyle>) treeBag0);
      synchronizedBag0.add(formatStyle0);
      HashBag<Object> hashBag1 = new HashBag<Object>(hashBag0);
      boolean boolean0 = hashBag1.retainAll((Bag<?>) synchronizedBag0);
      assertEquals(2, treeBag0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      HashBag<TextStyle> hashBag0 = new HashBag<TextStyle>();
      TreeBag<Object> treeBag0 = new TreeBag<Object>();
      boolean boolean0 = hashBag0.retainAll(treeBag0);
      assertFalse(boolean0);
      assertTrue(treeBag0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      HashBag<TextStyle> hashBag0 = new HashBag<TextStyle>();
      HashBag<Object> hashBag1 = new HashBag<Object>();
      hashBag1.add((Object) hashBag0);
      hashBag1.add((Object) hashBag0);
      assertEquals(2, hashBag1.size());
      
      boolean boolean0 = hashBag1.retainAll((Bag<?>) hashBag0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      HashBag<AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle>> hashBag0 = new HashBag<AbstractMap.SimpleImmutableEntry<TextStyle, TextStyle>>();
      boolean boolean0 = hashBag0.removeAll((Collection<?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      HashBag<TextStyle> hashBag0 = new HashBag<TextStyle>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(any() , any());
      TreeBag<HashBag<TextStyle>> treeBag0 = new TreeBag<HashBag<TextStyle>>(comparator0);
      treeBag0.add(hashBag0);
      treeBag0.add(hashBag0);
      boolean boolean0 = treeBag0.remove((Object) hashBag0, 1);
      assertTrue(treeBag0.contains(hashBag0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      TreeBag<String> treeBag0 = new TreeBag<String>((Comparator<? super String>) null);
      treeBag0.add("");
      boolean boolean0 = treeBag0.remove((Object) "", (-1965));
      assertEquals(1, treeBag0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      HashBag<TextStyle> hashBag0 = new HashBag<TextStyle>();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      boolean boolean0 = hashBag0.removeAll(set0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      HashBag<TextStyle> hashBag0 = new HashBag<TextStyle>();
      boolean boolean0 = hashBag0.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      HashBag<Object> hashBag0 = new HashBag<Object>();
      hashBag0.add((Object) hashBag0);
      boolean boolean0 = hashBag0.retainAll((Bag<?>) hashBag0);
      assertEquals(1, hashBag0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      TreeBag<FormatStyle> treeBag0 = new TreeBag<FormatStyle>();
      FormatStyle formatStyle0 = FormatStyle.FULL;
      treeBag0.add(formatStyle0);
      treeBag0.add(formatStyle0);
      java.util.function.Predicate<FormatStyle> predicate0 = java.util.function.Predicate.isEqual((Object) formatStyle0);
      treeBag0.removeIf(predicate0);
      assertEquals(0, treeBag0.size());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      TreeBag<String> treeBag0 = new TreeBag<String>();
      treeBag0.add("!thMi");
      HashBag<Object> hashBag0 = new HashBag<Object>(treeBag0);
      AbstractMapBag.BagIterator<Object> abstractMapBag_BagIterator0 = new AbstractMapBag.BagIterator<Object>(hashBag0);
      abstractMapBag_BagIterator0.next();
      abstractMapBag_BagIterator0.remove();
      assertEquals(1, treeBag0.size());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Comparator<TextStyle> comparator0 = (Comparator<TextStyle>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.time.format.TextStyle.class) , any(java.time.format.TextStyle.class));
      TreeBag<TextStyle> treeBag0 = new TreeBag<TextStyle>(comparator0);
      AbstractMapBag.BagIterator<TextStyle> abstractMapBag_BagIterator0 = new AbstractMapBag.BagIterator<TextStyle>(treeBag0);
      TextStyle textStyle0 = TextStyle.SHORT_STANDALONE;
      treeBag0.add(textStyle0);
      // Undeclared exception!
      try { 
        abstractMapBag_BagIterator0.remove();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.AbstractMapBag$BagIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      TreeBag<String> treeBag0 = new TreeBag<String>();
      HashBag<Object> hashBag0 = new HashBag<Object>(treeBag0);
      AbstractMapBag.BagIterator<Object> abstractMapBag_BagIterator0 = new AbstractMapBag.BagIterator<Object>(hashBag0);
      // Undeclared exception!
      try { 
        abstractMapBag_BagIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.AbstractMapBag$BagIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      HashBag<TextStyle> hashBag0 = new HashBag<TextStyle>();
      AbstractMapBag.BagIterator<TextStyle> abstractMapBag_BagIterator0 = new AbstractMapBag.BagIterator<TextStyle>(hashBag0);
      TextStyle textStyle0 = TextStyle.NARROW;
      hashBag0.add(textStyle0);
      // Undeclared exception!
      try { 
        abstractMapBag_BagIterator0.next();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.AbstractMapBag$BagIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      HashBag<TextStyle> hashBag0 = new HashBag<TextStyle>();
      HashBag<Object> hashBag1 = new HashBag<Object>(hashBag0);
      hashBag1.add((Object) hashBag0);
      boolean boolean0 = hashBag1.contains(hashBag0);
      assertFalse(hashBag1.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      HashBag<AbstractMapBag.MutableInteger> hashBag0 = new HashBag<AbstractMapBag.MutableInteger>();
      AbstractMapBag.MutableInteger abstractMapBag_MutableInteger0 = new AbstractMapBag.MutableInteger(512);
      Predicate<AbstractMapBag.MutableInteger> predicate0 = EqualPredicate.equalPredicate(abstractMapBag_MutableInteger0);
      PredicatedBag<AbstractMapBag.MutableInteger> predicatedBag0 = new PredicatedBag<AbstractMapBag.MutableInteger>(hashBag0, predicate0);
      predicatedBag0.add(abstractMapBag_MutableInteger0);
      TreeBag<HashBag<Object>> treeBag0 = new TreeBag<HashBag<Object>>();
      // Undeclared exception!
      try { 
        treeBag0.containsAll((Bag<?>) hashBag0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      HashBag<TextStyle> hashBag0 = new HashBag<TextStyle>();
      hashBag0.clear();
      assertEquals(0, hashBag0.size());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      TreeBag<String> treeBag0 = new TreeBag<String>();
      treeBag0.add("org.apache.commons.collections4.functors.PredicateTransformer");
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("org.apache.commons.collections4.functors.PredicateTransformer");
      TransformedCollection<String> transformedCollection0 = TransformedCollection.transformingCollection((Collection<String>) treeBag0, (Transformer<? super String, ? extends String>) constantTransformer0);
      treeBag0.addAll(transformedCollection0);
      Object[] objectArray0 = new Object[1];
      treeBag0.toArray(objectArray0);
      assertEquals(2, treeBag0.size());
  }
}
