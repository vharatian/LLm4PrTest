/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 17:30:12 GMT 2025
 */

package org.apache.commons.collections4.bag;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.SortedBag;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.bag.CollectionSortedBag;
import org.apache.commons.collections4.bag.PredicatedSortedBag;
import org.apache.commons.collections4.bag.SynchronizedSortedBag;
import org.apache.commons.collections4.bag.TransformedSortedBag;
import org.apache.commons.collections4.bag.TreeBag;
import org.apache.commons.collections4.bag.UnmodifiableSortedBag;
import org.apache.commons.collections4.functors.CloneTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CollectionSortedBag_ESTest extends CollectionSortedBag_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>(comparator0);
      CollectionSortedBag<Integer> collectionSortedBag0 = new CollectionSortedBag<Integer>(treeBag0);
      Integer integer0 = new Integer((-1448));
      treeBag0.add(integer0);
      boolean boolean0 = collectionSortedBag0.remove((Object) integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TreeBag<Transformer<Integer, Integer>> treeBag0 = new TreeBag<Transformer<Integer, Integer>>((Comparator<? super Transformer<Integer, Integer>>) null);
      CollectionSortedBag<Transformer<Integer, Integer>> collectionSortedBag0 = new CollectionSortedBag<Transformer<Integer, Integer>>(treeBag0);
      Integer integer0 = new Integer((-1505));
      boolean boolean0 = collectionSortedBag0.remove((Object) integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      CollectionSortedBag<Integer> collectionSortedBag0 = new CollectionSortedBag<Integer>(treeBag0);
      Integer integer0 = new Integer(2);
      collectionSortedBag0.add(integer0);
      TreeBag<Object> treeBag1 = new TreeBag<Object>(collectionSortedBag0);
      SynchronizedSortedBag<Object> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<Object>) treeBag1);
      CollectionSortedBag<Object> collectionSortedBag1 = new CollectionSortedBag<Object>(synchronizedSortedBag0);
      SortedBag<Object> sortedBag0 = UnmodifiableSortedBag.unmodifiableSortedBag((SortedBag<Object>) collectionSortedBag1);
      CollectionSortedBag<Object> collectionSortedBag2 = new CollectionSortedBag<Object>(sortedBag0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<Integer> treeBag2 = new TreeBag<Integer>(comparator0);
      // Undeclared exception!
      try { 
        collectionSortedBag2.retainAll(treeBag2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove() is not supported
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      CollectionSortedBag<Integer> collectionSortedBag0 = new CollectionSortedBag<Integer>(treeBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.AbstractMapBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      Integer integer0 = new Integer((-1002));
      treeBag0.add(integer0);
      CollectionSortedBag<Integer> collectionSortedBag0 = new CollectionSortedBag<Integer>(treeBag0);
      collectionSortedBag0.add(integer0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.removeAll(treeBag0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.AbstractMapBag$BagIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      Integer integer0 = new Integer(91);
      treeBag0.add(integer0);
      SortedBag<Integer> sortedBag0 = UnmodifiableSortedBag.unmodifiableSortedBag((SortedBag<Integer>) treeBag0);
      CollectionSortedBag<Integer> collectionSortedBag0 = new CollectionSortedBag<Integer>(sortedBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.removeAll(sortedBag0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.UnmodifiableSortedBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      treeBag0.add((Object) null);
      SynchronizedSortedBag<Object> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<Object>) treeBag0);
      TreeBag<Object> treeBag1 = new TreeBag<Object>((Comparator<? super Object>) null);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(treeBag1);
      // Undeclared exception!
      try { 
        collectionSortedBag0.removeAll(synchronizedSortedBag0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      CollectionSortedBag<Integer> collectionSortedBag0 = new CollectionSortedBag<Integer>(treeBag0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      TreeBag<Object> treeBag1 = new TreeBag<Object>(comparator0);
      CollectionSortedBag<Object> collectionSortedBag1 = new CollectionSortedBag<Object>(treeBag1);
      collectionSortedBag1.add((Object) collectionSortedBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.removeAll(treeBag1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      Integer integer0 = new Integer(1531);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Integer> predicate0 = ComparatorPredicate.comparatorPredicate(integer0, comparator1);
      treeBag0.add((Object) predicate0);
      TreeBag<Object> treeBag1 = new TreeBag<Object>();
      SynchronizedSortedBag<Object> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<Object>) treeBag1);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(synchronizedSortedBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.removeAll(treeBag0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      SortedBag<Integer> sortedBag0 = UnmodifiableSortedBag.unmodifiableSortedBag((SortedBag<Integer>) treeBag0);
      CollectionSortedBag<Integer> collectionSortedBag0 = new CollectionSortedBag<Integer>(sortedBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.remove((Object) treeBag0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.UnmodifiableSortedBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TreeBag<Object> treeBag0 = new TreeBag<Object>();
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(treeBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.remove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TreeBag<Object> treeBag0 = new TreeBag<Object>();
      SynchronizedSortedBag<Object> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<Object>) treeBag0);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(synchronizedSortedBag0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        collectionSortedBag0.remove(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      CollectionSortedBag<Integer> collectionSortedBag0 = new CollectionSortedBag<Integer>(treeBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.CollectionSortedBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionSortedBag.collectionSortedBag((SortedBag<ComparatorPredicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      Integer integer0 = new Integer((-1));
      treeBag0.add(integer0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 5);
      Transformer<Integer, Integer> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      TransformedSortedBag<Integer> transformedSortedBag0 = TransformedSortedBag.transformingSortedBag((SortedBag<Integer>) treeBag0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      CollectionSortedBag<Integer> collectionSortedBag0 = new CollectionSortedBag<Integer>(transformedSortedBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.addAll(treeBag0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.lang.Integer' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1531, 1531, 1531, 1531, 1531).when(comparator0).compare(any() , any());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      Integer integer0 = new Integer(1531);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Integer> predicate0 = ComparatorPredicate.comparatorPredicate(integer0, comparator1);
      treeBag0.add((Object) predicate0);
      SynchronizedSortedBag<Object> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<Object>) treeBag0);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(synchronizedSortedBag0);
      synchronizedSortedBag0.add((Object) collectionSortedBag0);
      Set<Object> set0 = synchronizedSortedBag0.uniqueSet();
      // Undeclared exception!
      try { 
        collectionSortedBag0.addAll(set0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap$PrivateEntryIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      CollectionSortedBag<Integer> collectionSortedBag0 = new CollectionSortedBag<Integer>(treeBag0);
      Integer integer0 = new Integer(1758);
      collectionSortedBag0.add(integer0, 1758);
      // Undeclared exception!
      try { 
        collectionSortedBag0.addAll(treeBag0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.AbstractMapBag$BagIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      Integer integer0 = new Integer(70);
      treeBag0.add(integer0);
      SortedBag<Integer> sortedBag0 = UnmodifiableSortedBag.unmodifiableSortedBag((SortedBag<Integer>) treeBag0);
      CollectionSortedBag<Integer> collectionSortedBag0 = new CollectionSortedBag<Integer>(sortedBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.addAll(sortedBag0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.UnmodifiableSortedBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      CollectionSortedBag<Integer> collectionSortedBag0 = new CollectionSortedBag<Integer>(treeBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.addAll((Collection<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.CollectionSortedBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      Integer integer0 = new Integer(1253);
      treeBag0.add(integer0);
      TreeBag<Object> treeBag1 = new TreeBag<Object>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Transformer<Object, Object> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ?>) hashMap0);
      TransformedSortedBag<Object> transformedSortedBag0 = TransformedSortedBag.transformedSortedBag((SortedBag<Object>) treeBag1, (Transformer<? super Object, ?>) transformer0);
      SynchronizedSortedBag<Object> synchronizedSortedBag0 = new SynchronizedSortedBag<Object>(transformedSortedBag0);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(synchronizedSortedBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.addAll(treeBag0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Integer integer0 = new Integer(1531);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      TreeBag<FactoryTransformer<Object, Integer>> treeBag0 = new TreeBag<FactoryTransformer<Object, Integer>>(comparator0);
      PredicatedSortedBag<FactoryTransformer<Object, Integer>> predicatedSortedBag0 = PredicatedSortedBag.predicatedSortedBag((SortedBag<FactoryTransformer<Object, Integer>>) treeBag0, (Predicate<? super FactoryTransformer<Object, Integer>>) predicate0);
      CollectionSortedBag<FactoryTransformer<Object, Integer>> collectionSortedBag0 = new CollectionSortedBag<FactoryTransformer<Object, Integer>>(predicatedSortedBag0);
      Factory<Integer> factory0 = ConstantFactory.constantFactory(integer0);
      FactoryTransformer<Object, Integer> factoryTransformer0 = new FactoryTransformer<Object, Integer>(factory0);
      treeBag0.add(factoryTransformer0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.addAll(collectionSortedBag0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'org.apache.commons.collections4.functors.FactoryTransformer@7' - Predicate 'org.apache.commons.collections4.functors.InstanceofPredicate@1' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      Integer integer0 = new Integer(91);
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      FactoryTransformer<Object, Integer> factoryTransformer0 = new FactoryTransformer<Object, Integer>(constantFactory0);
      treeBag0.add((Object) factoryTransformer0);
      SynchronizedSortedBag<Object> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<Object>) treeBag0);
      TreeBag<Object> treeBag1 = new TreeBag<Object>();
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(treeBag1);
      // Undeclared exception!
      try { 
        collectionSortedBag0.addAll(synchronizedSortedBag0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(comparator0).compare(any() , any());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      treeBag0.add((Object) class0);
      SynchronizedSortedBag<Object> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<Object>) treeBag0);
      TreeBag<Object> treeBag1 = new TreeBag<Object>();
      SynchronizedSortedBag<Object> synchronizedSortedBag1 = new SynchronizedSortedBag<Object>(treeBag1);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(synchronizedSortedBag1);
      // Undeclared exception!
      try { 
        collectionSortedBag0.addAll(synchronizedSortedBag0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      TreeBag<TreeBag<Integer>> treeBag1 = new TreeBag<TreeBag<Integer>>();
      Transformer<Object, TreeBag<Integer>> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformedSortedBag<TreeBag<Integer>> transformedSortedBag0 = TransformedSortedBag.transformingSortedBag((SortedBag<TreeBag<Integer>>) treeBag1, (Transformer<? super TreeBag<Integer>, ? extends TreeBag<Integer>>) transformer0);
      CollectionSortedBag<TreeBag<Integer>> collectionSortedBag0 = new CollectionSortedBag<TreeBag<Integer>>(transformedSortedBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.add(treeBag0, 434);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      CollectionSortedBag<Integer> collectionSortedBag0 = new CollectionSortedBag<Integer>(treeBag0);
      TreeBag<Object> treeBag1 = new TreeBag<Object>();
      SortedBag<Object> sortedBag0 = UnmodifiableSortedBag.unmodifiableSortedBag((SortedBag<Object>) treeBag1);
      CollectionSortedBag<Object> collectionSortedBag1 = new CollectionSortedBag<Object>(sortedBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag1.add((Object) collectionSortedBag0, 4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.UnmodifiableSortedBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      CollectionSortedBag<Integer> collectionSortedBag0 = new CollectionSortedBag<Integer>(treeBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.add((Integer) null, 2383);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TreeBag<Object> treeBag0 = new TreeBag<Object>();
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(treeBag0);
      Transformer<Object, Object> transformer0 = CloneTransformer.cloneTransformer();
      TransformedSortedBag<Object> transformedSortedBag0 = new TransformedSortedBag<Object>(collectionSortedBag0, transformer0);
      CollectionSortedBag<Object> collectionSortedBag1 = new CollectionSortedBag<Object>(transformedSortedBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag1.add((Object) transformer0, 74);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The prototype must be cloneable via a public clone method
         //
         verifyException("org.apache.commons.collections4.functors.PrototypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      TreeBag<Object> treeBag1 = new TreeBag<Object>();
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(treeBag1);
      // Undeclared exception!
      try { 
        collectionSortedBag0.add((Object) treeBag0, 3);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TreeBag<FactoryTransformer<Integer, Object>> treeBag0 = new TreeBag<FactoryTransformer<Integer, Object>>();
      SynchronizedSortedBag<FactoryTransformer<Integer, Object>> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<FactoryTransformer<Integer, Object>>) treeBag0);
      CollectionSortedBag<FactoryTransformer<Integer, Object>> collectionSortedBag0 = new CollectionSortedBag<FactoryTransformer<Integer, Object>>(synchronizedSortedBag0);
      Factory<Integer> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Integer, Object> factoryTransformer0 = new FactoryTransformer<Integer, Object>(factory0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.add(factoryTransformer0, 1716);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TreeBag<Object> treeBag0 = new TreeBag<Object>();
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 1);
      InvokerTransformer<Object, Object> invokerTransformer0 = new InvokerTransformer<Object, Object>("", classArray0, classArray0);
      TransformedSortedBag<Object> transformedSortedBag0 = new TransformedSortedBag<Object>(treeBag0, invokerTransformer0);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(transformedSortedBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.add((Object) transformedSortedBag0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class org.apache.commons.collections4.bag.TransformedSortedBag' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TreeBag<Object> treeBag0 = new TreeBag<Object>();
      SortedBag<Object> sortedBag0 = UnmodifiableSortedBag.unmodifiableSortedBag((SortedBag<Object>) treeBag0);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(sortedBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.add((Object) sortedBag0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.UnmodifiableSortedBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      CollectionSortedBag<Integer> collectionSortedBag0 = new CollectionSortedBag<Integer>(treeBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.add((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      SynchronizedSortedBag<Integer> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<Integer>) treeBag0);
      CollectionSortedBag<Integer> collectionSortedBag0 = new CollectionSortedBag<Integer>(synchronizedSortedBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.add((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      CollectionSortedBag<Integer> collectionSortedBag0 = new CollectionSortedBag<Integer>(treeBag0);
      TreeBag<Object> treeBag1 = new TreeBag<Object>(collectionSortedBag0);
      Class<Integer> class0 = Integer.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      PredicatedSortedBag<Object> predicatedSortedBag0 = new PredicatedSortedBag<Object>(treeBag1, predicate0);
      SynchronizedSortedBag<Object> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<Object>) predicatedSortedBag0);
      CollectionSortedBag<Object> collectionSortedBag1 = new CollectionSortedBag<Object>(synchronizedSortedBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag1.add((Object) predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'org.apache.commons.collections4.functors.InstanceofPredicate@5' - Predicate 'org.apache.commons.collections4.functors.InstanceofPredicate@5' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TreeBag<Object> treeBag0 = new TreeBag<Object>();
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(treeBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.add((Object) treeBag0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TreeBag<Object> treeBag0 = new TreeBag<Object>((Comparator<? super Object>) null);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(treeBag0);
      SynchronizedSortedBag<Object> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<Object>) collectionSortedBag0);
      CollectionSortedBag<Object> collectionSortedBag1 = new CollectionSortedBag<Object>(synchronizedSortedBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag1.add((Object) treeBag0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CollectionSortedBag<Integer> collectionSortedBag0 = null;
      try {
        collectionSortedBag0 = new CollectionSortedBag<Integer>((SortedBag<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      CollectionSortedBag<Integer> collectionSortedBag0 = new CollectionSortedBag<Integer>(treeBag0);
      Integer integer0 = new Integer(512);
      collectionSortedBag0.add(integer0, 512);
      // Undeclared exception!
      collectionSortedBag0.retainAll(treeBag0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1531).when(comparator0).compare(any() , any());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      Integer integer0 = new Integer(1531);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Integer> predicate0 = ComparatorPredicate.comparatorPredicate(integer0, comparator1);
      treeBag0.add((Object) predicate0);
      SynchronizedSortedBag<Object> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<Object>) treeBag0);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(synchronizedSortedBag0);
      boolean boolean0 = collectionSortedBag0.retainAll(synchronizedSortedBag0);
      //  // Unstable assertion: assertFalse(treeBag0.isEmpty());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      SynchronizedSortedBag<Integer> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<Integer>) treeBag0);
      CollectionSortedBag<Integer> collectionSortedBag0 = new CollectionSortedBag<Integer>(synchronizedSortedBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.AbstractMapBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      Integer integer0 = new Integer(1253);
      treeBag0.add(integer0);
      CollectionSortedBag<Integer> collectionSortedBag0 = new CollectionSortedBag<Integer>(treeBag0);
      collectionSortedBag0.addAll(treeBag0);
      TreeBag<Object> treeBag1 = new TreeBag<Object>(collectionSortedBag0);
      boolean boolean0 = collectionSortedBag0.removeAll(treeBag1);
      assertFalse(collectionSortedBag0.contains(1253));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1531, 1531, 1531).when(comparator0).compare(any() , any());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      Integer integer0 = new Integer(1531);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Integer> predicate0 = ComparatorPredicate.comparatorPredicate(integer0, comparator1);
      treeBag0.add((Object) predicate0);
      SynchronizedSortedBag<Object> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<Object>) treeBag0);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(synchronizedSortedBag0);
      boolean boolean0 = collectionSortedBag0.removeAll(synchronizedSortedBag0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      CollectionSortedBag<Integer> collectionSortedBag0 = new CollectionSortedBag<Integer>(treeBag0);
      boolean boolean0 = collectionSortedBag0.removeAll((Collection<?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 3, 0).when(comparator0).compare(any() , any());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      Integer integer0 = new Integer(0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator1).compare(any() , any());
      TreeBag<Object> treeBag1 = new TreeBag<Object>(comparator1);
      Object object0 = new Object();
      treeBag1.add(object0);
      SynchronizedSortedBag<Object> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<Object>) treeBag1);
      synchronizedSortedBag0.add((Object) integer0);
      SynchronizedSortedBag<Object> synchronizedSortedBag1 = new SynchronizedSortedBag<Object>(treeBag0);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(synchronizedSortedBag1);
      boolean boolean0 = collectionSortedBag0.addAll(treeBag1);
      assertTrue(collectionSortedBag0.contains(0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TreeBag<Object> treeBag0 = new TreeBag<Object>();
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(treeBag0);
      boolean boolean0 = collectionSortedBag0.addAll(collectionSortedBag0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      Integer integer0 = new Integer((-147));
      treeBag0.add(integer0);
      CollectionSortedBag<Integer> collectionSortedBag0 = new CollectionSortedBag<Integer>(treeBag0);
      boolean boolean0 = collectionSortedBag0.containsAll(treeBag0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      Integer integer0 = new Integer(485);
      treeBag0.add(integer0);
      TreeBag<Object> treeBag1 = new TreeBag<Object>();
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(treeBag1);
      boolean boolean0 = collectionSortedBag0.containsAll(treeBag0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      CollectionSortedBag<Integer> collectionSortedBag0 = new CollectionSortedBag<Integer>(treeBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.remove((Object) treeBag0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      SynchronizedSortedBag<Object> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<Object>) treeBag0);
      SortedBag<Object> sortedBag0 = CollectionSortedBag.collectionSortedBag((SortedBag<Object>) synchronizedSortedBag0);
      assertEquals(0, sortedBag0.size());
  }
}
