/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 17:34:25 GMT 2025
 */

package org.apache.commons.collections4.bag;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.format.FormatStyle;
import java.time.temporal.ChronoUnit;
import java.util.Comparator;
import org.apache.commons.collections4.Bag;
import org.apache.commons.collections4.bag.CollectionBag;
import org.apache.commons.collections4.bag.SynchronizedBag;
import org.apache.commons.collections4.bag.TreeBag;
import org.apache.commons.collections4.bag.UnmodifiableBag;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class UnmodifiableBag_ESTest extends UnmodifiableBag_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnmodifiableBag.unmodifiableBag((Bag<? extends FormatStyle>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TreeBag<FormatStyle> treeBag0 = new TreeBag<FormatStyle>();
      Bag<Object> bag0 = UnmodifiableBag.unmodifiableBag((Bag<?>) treeBag0);
      Bag<Object> bag1 = UnmodifiableBag.unmodifiableBag((Bag<?>) bag0);
      assertEquals(0, bag1.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Comparator<ChronoUnit> comparator0 = (Comparator<ChronoUnit>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<ChronoUnit> treeBag0 = new TreeBag<ChronoUnit>(comparator0);
      Bag<Object> bag0 = UnmodifiableBag.unmodifiableBag((Bag<?>) treeBag0);
      CollectionBag<Object> collectionBag0 = new CollectionBag<Object>(bag0);
      boolean boolean0 = treeBag0.containsAll((Bag<?>) collectionBag0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Comparator<ChronoUnit> comparator0 = (Comparator<ChronoUnit>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<ChronoUnit> treeBag0 = new TreeBag<ChronoUnit>(comparator0);
      Bag<Object> bag0 = UnmodifiableBag.unmodifiableBag((Bag<?>) treeBag0);
      CollectionBag<Object> collectionBag0 = new CollectionBag<Object>(bag0);
      boolean boolean0 = collectionBag0.retainAll(bag0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TreeBag<FormatStyle> treeBag0 = new TreeBag<FormatStyle>();
      Bag<Object> bag0 = UnmodifiableBag.unmodifiableBag((Bag<?>) treeBag0);
      CollectionBag<Object> collectionBag0 = new CollectionBag<Object>(bag0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        collectionBag0.add(object0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.UnmodifiableBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TreeBag<FormatStyle> treeBag0 = new TreeBag<FormatStyle>();
      Bag<Object> bag0 = UnmodifiableBag.unmodifiableBag((Bag<?>) treeBag0);
      SynchronizedBag<Object> synchronizedBag0 = SynchronizedBag.synchronizedBag(bag0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        synchronizedBag0.remove(object0, 452);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.UnmodifiableBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TreeBag<FormatStyle> treeBag0 = new TreeBag<FormatStyle>();
      Bag<Object> bag0 = UnmodifiableBag.unmodifiableBag((Bag<?>) treeBag0);
      SynchronizedBag<Object> synchronizedBag0 = new SynchronizedBag<Object>(bag0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        synchronizedBag0.add(object0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.UnmodifiableBag", e);
      }
  }
}
