/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 17:16:36 GMT 2025
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.time.DayOfWeek;
import java.time.Month;
import java.time.chrono.MinguoEra;
import java.time.format.FormatStyle;
import java.time.format.ResolverStyle;
import java.time.format.TextStyle;
import java.time.temporal.ChronoField;
import java.time.temporal.ChronoUnit;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.FluentIterable;
import org.apache.commons.collections4.IterableUtils;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.bag.CollectionBag;
import org.apache.commons.collections4.bag.HashBag;
import org.apache.commons.collections4.bag.TreeBag;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class IterableUtils_ESTest extends IterableUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FluentIterable<ArrayList<InstanceofPredicate>> fluentIterable0 = FluentIterable.empty();
      FluentIterable<ArrayList<InstanceofPredicate>> fluentIterable1 = fluentIterable0.limit(1);
      MinguoEra minguoEra0 = MinguoEra.ROC;
      boolean boolean0 = IterableUtils.contains((Iterable<ArrayList<InstanceofPredicate>>) fluentIterable1, (Object) minguoEra0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TreeSet<MinguoEra> treeSet0 = new TreeSet<MinguoEra>();
      MinguoEra minguoEra0 = MinguoEra.BEFORE_ROC;
      SortedSet<MinguoEra> sortedSet0 = treeSet0.headSet(minguoEra0);
      Iterable<MinguoEra> iterable0 = IterableUtils.chainedIterable((Iterable<? extends MinguoEra>) sortedSet0, (Iterable<? extends MinguoEra>) sortedSet0, (Iterable<? extends MinguoEra>) treeSet0, (Iterable<? extends MinguoEra>) treeSet0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<MinguoEra> class0 = MinguoEra.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<MinguoEra> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      // Undeclared exception!
      try { 
        IterableUtils.chainedIterable((Iterable<? extends MinguoEra>) null, (Iterable<? extends MinguoEra>) serviceLoader0, (Iterable<? extends MinguoEra>) null, (Iterable<? extends MinguoEra>) serviceLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FluentIterable<Object> fluentIterable0 = FluentIterable.empty();
      FluentIterable<Object> fluentIterable1 = fluentIterable0.limit(0L);
      Iterable<Object> iterable0 = IterableUtils.chainedIterable((Iterable<?>) fluentIterable0, (Iterable<?>) fluentIterable0, (Iterable<?>) fluentIterable1);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Iterable<Object>[] iterableArray0 = (Iterable<Object>[]) Array.newInstance(Iterable.class, 0);
      IterableUtils.checkNotNull(iterableArray0);
      assertEquals(0, iterableArray0.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FluentIterable<Object> fluentIterable0 = FluentIterable.empty();
      IterableUtils.checkNotNull(fluentIterable0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Month month0 = Month.JUNE;
      EnumSet<Month> enumSet0 = EnumSet.of(month0, month0, month0, month0);
      Iterable<Month> iterable0 = IterableUtils.uniqueIterable((Iterable<Month>) enumSet0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ArrayDeque<DayOfWeek> arrayDeque0 = new ArrayDeque<DayOfWeek>();
      DayOfWeek dayOfWeek0 = DayOfWeek.SATURDAY;
      Transformer<DayOfWeek, DayOfWeek> transformer0 = ConstantTransformer.constantTransformer(dayOfWeek0);
      Iterable<DayOfWeek> iterable0 = IterableUtils.transformedIterable((Iterable<DayOfWeek>) arrayDeque0, (Transformer<? super DayOfWeek, ? extends DayOfWeek>) transformer0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Vector<DayOfWeek> vector0 = new Vector<DayOfWeek>(4060, 4060);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("75V-k?7xz/A");
      Transformer<DayOfWeek, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      String string0 = IterableUtils.toString((Iterable<DayOfWeek>) vector0, (Transformer<? super DayOfWeek, String>) transformer0, "", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      List<Stack<InstanceofPredicate>> list0 = IterableUtils.toList((Iterable<Stack<InstanceofPredicate>>) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<FormatStyle> class0 = FormatStyle.class;
      EnumSet<FormatStyle> enumSet0 = EnumSet.allOf(class0);
      List<FormatStyle> list0 = IterableUtils.toList((Iterable<FormatStyle>) enumSet0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TreeBag<DayOfWeek> treeBag0 = new TreeBag<DayOfWeek>();
      Iterable<DayOfWeek> iterable0 = IterableUtils.skippingIterable((Iterable<DayOfWeek>) treeBag0, 382L);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>(1744);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(instanceofPredicate0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(equalPredicate0);
      hashSet0.add(nullIsTruePredicate0);
      int int0 = IterableUtils.size(hashSet0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<InstanceofPredicate>[] predicateArray0 = (Predicate<InstanceofPredicate>[]) Array.newInstance(Predicate.class, 1);
      Comparator<InstanceofPredicate> comparator0 = (Comparator<InstanceofPredicate>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<InstanceofPredicate> predicate0 = ComparatorPredicate.comparatorPredicate(instanceofPredicate0, comparator0);
      predicateArray0[0] = predicate0;
      List<List<InstanceofPredicate>> list0 = IterableUtils.partition((Iterable<? extends InstanceofPredicate>) null, (Predicate<? super InstanceofPredicate>[]) predicateArray0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TreeBag<MinguoEra> treeBag0 = new TreeBag<MinguoEra>();
      MinguoEra minguoEra0 = MinguoEra.ROC;
      treeBag0.add(minguoEra0);
      DefaultEquator<MinguoEra> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<MinguoEra> predicate0 = EqualPredicate.equalPredicate(minguoEra0, (Equator<MinguoEra>) defaultEquator0);
      boolean boolean0 = IterableUtils.matchesAny((Iterable<MinguoEra>) treeBag0, (Predicate<? super MinguoEra>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      boolean boolean0 = IterableUtils.matchesAll((Iterable<Object>) null, (Predicate<? super Object>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      FluentIterable<Object> fluentIterable0 = FluentIterable.of((Object) stack0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) stack0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      boolean boolean0 = IterableUtils.matchesAll((Iterable<Object>) fluentIterable0, (Predicate<? super Object>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Iterable<InstanceofPredicate> iterable0 = IterableUtils.loopingIterable((Iterable<InstanceofPredicate>) arrayDeque0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Comparator<MinguoEra> comparator0 = (Comparator<MinguoEra>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.time.chrono.MinguoEra.class) , any(java.time.chrono.MinguoEra.class));
      TreeSet<MinguoEra> treeSet0 = new TreeSet<MinguoEra>(comparator0);
      MinguoEra minguoEra0 = MinguoEra.BEFORE_ROC;
      treeSet0.add(minguoEra0);
      boolean boolean0 = IterableUtils.isEmpty(treeSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      arrayList0.add(instanceofPredicate0);
      int int0 = IterableUtils.indexOf((Iterable<InstanceofPredicate>) arrayList0, (Predicate<? super InstanceofPredicate>) instanceofPredicate0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Predicate<InstanceofPredicate> predicate0 = TruePredicate.truePredicate();
      int int0 = IterableUtils.indexOf((Iterable<InstanceofPredicate>) null, (Predicate<? super InstanceofPredicate>) predicate0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      IdentityPredicate<LinkedList<InstanceofPredicate>> identityPredicate0 = new IdentityPredicate<LinkedList<InstanceofPredicate>>(linkedList0);
      LinkedList<InstanceofPredicate> linkedList1 = IterableUtils.find((Iterable<LinkedList<InstanceofPredicate>>) null, (Predicate<? super LinkedList<InstanceofPredicate>>) identityPredicate0);
      assertNull(linkedList1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      arrayList0.add(instanceofPredicate0);
      InstanceofPredicate instanceofPredicate1 = IterableUtils.find((Iterable<InstanceofPredicate>) arrayList0, (Predicate<? super InstanceofPredicate>) instanceofPredicate0);
      assertSame(instanceofPredicate1, instanceofPredicate0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ArrayDeque<Boolean> arrayDeque0 = new ArrayDeque<Boolean>();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(arrayDeque0);
      Iterable<Boolean> iterable0 = IterableUtils.filteredIterable((Iterable<Boolean>) arrayDeque0, (Predicate<? super Boolean>) equalPredicate0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LinkedList<Vector<MinguoEra>> linkedList0 = new LinkedList<Vector<MinguoEra>>();
      Vector<MinguoEra> vector0 = new Vector<MinguoEra>();
      linkedList0.add(vector0);
      Predicate<Vector<MinguoEra>> predicate0 = NotNullPredicate.notNullPredicate();
      long long0 = IterableUtils.countMatches((Iterable<Vector<MinguoEra>>) linkedList0, (Predicate<? super Vector<MinguoEra>>) predicate0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Vector<ArrayList<InstanceofPredicate>> vector0 = new Vector<ArrayList<InstanceofPredicate>>(4039);
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      vector0.add(arrayList0);
      DefaultEquator<ArrayList<InstanceofPredicate>> defaultEquator0 = DefaultEquator.defaultEquator();
      boolean boolean0 = IterableUtils.contains((Iterable<? extends ArrayList<InstanceofPredicate>>) vector0, arrayList0, (Equator<? super ArrayList<InstanceofPredicate>>) defaultEquator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      Iterable<InstanceofPredicate> iterable0 = IterableUtils.collatedIterable((Comparator<? super InstanceofPredicate>) null, (Iterable<? extends InstanceofPredicate>) vector0, (Iterable<? extends InstanceofPredicate>) vector0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Vector<DayOfWeek> vector0 = new Vector<DayOfWeek>();
      Iterable<DayOfWeek>[] iterableArray0 = (Iterable<DayOfWeek>[]) Array.newInstance(Iterable.class, 4);
      // Undeclared exception!
      try { 
        IterableUtils.zippingIterable((Iterable<? extends DayOfWeek>) vector0, (Iterable<? extends DayOfWeek>[]) iterableArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        IterableUtils.zippingIterable((Iterable<? extends Vector<InstanceofPredicate>>) null, (Iterable<? extends Vector<InstanceofPredicate>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        IterableUtils.unmodifiableIterable((Iterable<ChronoUnit>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        IterableUtils.uniqueIterable((Iterable<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DayOfWeek dayOfWeek0 = DayOfWeek.MONDAY;
      EnumSet<DayOfWeek> enumSet0 = EnumSet.of(dayOfWeek0, dayOfWeek0, dayOfWeek0);
      FluentIterable<DayOfWeek> fluentIterable0 = FluentIterable.of((Iterable<DayOfWeek>) enumSet0);
      Transformer<DayOfWeek, String> transformer0 = InvokerTransformer.invokerTransformer("@8]$Q@hX)Q", (Class<?>[]) null, (Object[]) null);
      // Undeclared exception!
      try { 
        IterableUtils.toString((Iterable<DayOfWeek>) fluentIterable0, (Transformer<? super DayOfWeek, String>) transformer0, "", "Lu.rla", "q[{3^nU)-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '@8]$Q@hX)Q' on 'class java.time.DayOfWeek' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FluentIterable<DayOfWeek> fluentIterable0 = new FluentIterable<DayOfWeek>();
      ConstantTransformer<DayOfWeek, String> constantTransformer0 = new ConstantTransformer<DayOfWeek, String>("Ef(N;VAx`|xi#U");
      // Undeclared exception!
      try { 
        IterableUtils.toString((Iterable<DayOfWeek>) fluentIterable0, (Transformer<? super DayOfWeek, String>) constantTransformer0, "Ef(N;VAx`|xi#U", "Ef(N;VAx`|xi#U", "org.apache.commons.collections4.bag.AbstractMapBag$MutableInteger");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[4];
      locale_CategoryArray0[0] = locale_Category0;
      locale_CategoryArray0[1] = locale_Category0;
      locale_CategoryArray0[2] = locale_Category0;
      locale_CategoryArray0[3] = locale_Category0;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_CategoryArray0);
      Comparator<InstanceofPredicate> comparator0 = (Comparator<InstanceofPredicate>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<InstanceofPredicate> treeBag0 = new TreeBag<InstanceofPredicate>(comparator0);
      CollectionBag<InstanceofPredicate> collectionBag0 = new CollectionBag<InstanceofPredicate>(treeBag0);
      Predicate<Locale.Category> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Locale.Category>>) collectionBag0);
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 8);
      InvokerTransformer<Locale.Category, String> invokerTransformer0 = new InvokerTransformer<Locale.Category, String>("x#xz/j P", classArray0, classArray0);
      IfTransformer<Locale.Category, String> ifTransformer0 = new IfTransformer<Locale.Category, String>(predicate0, invokerTransformer0, invokerTransformer0);
      // Undeclared exception!
      try { 
        IterableUtils.toString((Iterable<Locale.Category>) enumSet0, (Transformer<? super Locale.Category, String>) ifTransformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'x#xz/j P' on 'class java.util.Locale$Category' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MinguoEra minguoEra0 = MinguoEra.ROC;
      FluentIterable<MinguoEra> fluentIterable0 = FluentIterable.of(minguoEra0);
      FluentIterable<MinguoEra> fluentIterable1 = fluentIterable0.loop();
      HashMap<MinguoEra, String> hashMap0 = new HashMap<MinguoEra, String>(131, 1);
      Transformer<MinguoEra, String> transformer0 = MapTransformer.mapTransformer((Map<? super MinguoEra, ? extends String>) hashMap0);
      // Undeclared exception!
      IterableUtils.toString((Iterable<MinguoEra>) fluentIterable1, (Transformer<? super MinguoEra, String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FluentIterable<InstanceofPredicate> fluentIterable0 = FluentIterable.of((InstanceofPredicate) null);
      // Undeclared exception!
      try { 
        IterableUtils.toString((Iterable<InstanceofPredicate>) fluentIterable0, (Transformer<? super InstanceofPredicate, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FluentIterable<InstanceofPredicate> fluentIterable0 = new FluentIterable<InstanceofPredicate>();
      // Undeclared exception!
      try { 
        IterableUtils.toString((Iterable<InstanceofPredicate>) fluentIterable0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        IterableUtils.skippingIterable((Iterable<ArrayList<TreeBag<InstanceofPredicate>>>) null, (-1071L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FluentIterable<Object> fluentIterable0 = new FluentIterable<Object>();
      // Undeclared exception!
      try { 
        IterableUtils.size(fluentIterable0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        IterableUtils.reversedIterable((Iterable<Collection<Transformer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FluentIterable<InstanceofPredicate> fluentIterable0 = new FluentIterable<InstanceofPredicate>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      // Undeclared exception!
      try { 
        IterableUtils.partition((Iterable<? extends InstanceofPredicate>) fluentIterable0, (Predicate<? super InstanceofPredicate>[]) predicateArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>(624);
      // Undeclared exception!
      try { 
        IterableUtils.partition((Iterable<? extends InstanceofPredicate>) arrayDeque0, (Predicate<? super InstanceofPredicate>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicates
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FluentIterable<Collection<MinguoEra>> fluentIterable0 = new FluentIterable<Collection<MinguoEra>>();
      HashBag<InstanceofPredicate> hashBag0 = new HashBag<InstanceofPredicate>();
      Predicate<Collection<MinguoEra>> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Collection<MinguoEra>>>) hashBag0);
      // Undeclared exception!
      try { 
        IterableUtils.partition((Iterable<? extends Collection<MinguoEra>>) fluentIterable0, (Predicate<? super Collection<MinguoEra>>) predicate0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FluentIterable<InstanceofPredicate> fluentIterable0 = new FluentIterable<InstanceofPredicate>();
      // Undeclared exception!
      try { 
        IterableUtils.partition((Iterable<? extends InstanceofPredicate>) fluentIterable0, (Predicate<? super InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FluentIterable<TextStyle> fluentIterable0 = FluentIterable.empty();
      FluentIterable<TextStyle> fluentIterable1 = fluentIterable0.unmodifiable();
      Factory<ArrayList<TextStyle>> factory0 = ExceptionFactory.exceptionFactory();
      Predicate<TextStyle>[] predicateArray0 = (Predicate<TextStyle>[]) Array.newInstance(Predicate.class, 0);
      // Undeclared exception!
      try { 
        IterableUtils.partition((Iterable<? extends TextStyle>) fluentIterable1, factory0, (Predicate<? super TextStyle>[]) predicateArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FluentIterable<InstanceofPredicate> fluentIterable0 = new FluentIterable<InstanceofPredicate>();
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Factory<LinkedList<InstanceofPredicate>> factory0 = ConstantFactory.constantFactory(linkedList0);
      Predicate<InstanceofPredicate>[] predicateArray0 = (Predicate<InstanceofPredicate>[]) Array.newInstance(Predicate.class, 5);
      DefaultEquator<InstanceofPredicate> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<InstanceofPredicate> equalPredicate0 = new EqualPredicate<InstanceofPredicate>((InstanceofPredicate) null, defaultEquator0);
      NullIsTruePredicate<InstanceofPredicate> nullIsTruePredicate0 = new NullIsTruePredicate<InstanceofPredicate>(equalPredicate0);
      predicateArray0[0] = (Predicate<InstanceofPredicate>) nullIsTruePredicate0;
      predicateArray0[1] = (Predicate<InstanceofPredicate>) equalPredicate0;
      AndPredicate<InstanceofPredicate> andPredicate0 = new AndPredicate<InstanceofPredicate>(predicateArray0[0], equalPredicate0);
      predicateArray0[2] = (Predicate<InstanceofPredicate>) andPredicate0;
      NonePredicate<InstanceofPredicate> nonePredicate0 = new NonePredicate<InstanceofPredicate>(predicateArray0);
      predicateArray0[3] = (Predicate<InstanceofPredicate>) nonePredicate0;
      predicateArray0[4] = (Predicate<InstanceofPredicate>) equalPredicate0;
      // Undeclared exception!
      try { 
        IterableUtils.partition((Iterable<? extends InstanceofPredicate>) fluentIterable0, factory0, (Predicate<? super InstanceofPredicate>[]) predicateArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        IterableUtils.loopingIterable((Iterable<DayOfWeek>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FluentIterable<DayOfWeek> fluentIterable0 = new FluentIterable<DayOfWeek>();
      // Undeclared exception!
      try { 
        IterableUtils.isEmpty(fluentIterable0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        IterableUtils.get((Iterable<ChronoField>) null, (-2143928210));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -2143928210
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Vector<ArrayList<InstanceofPredicate>> vector0 = new Vector<ArrayList<InstanceofPredicate>>();
      // Undeclared exception!
      try { 
        IterableUtils.get((Iterable<ArrayList<InstanceofPredicate>>) vector0, 769);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 769
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      predicateArray0[0] = (Predicate<Object>) instanceofPredicate0;
      FluentIterable<Predicate<Object>> fluentIterable0 = FluentIterable.of(predicateArray0);
      Class<InstanceofPredicate>[] classArray0 = (Class<InstanceofPredicate>[]) Array.newInstance(Class.class, 2);
      Transformer<Object, InstanceofPredicate> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      FluentIterable<Predicate<Object>> fluentIterable1 = fluentIterable0.transform((Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) transformer0);
      // Undeclared exception!
      try { 
        IterableUtils.frequency((Iterable<Predicate<Object>>) fluentIterable1, instanceofPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class org.apache.commons.collections4.functors.InstanceofPredicate' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TreeBag<Predicate<Object>> treeBag0 = new TreeBag<Predicate<Object>>();
      // Undeclared exception!
      try { 
        IterableUtils.frequency((Iterable<Predicate<Object>>) treeBag0, (InstanceofPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TextStyle[] textStyleArray0 = new TextStyle[2];
      FluentIterable<TextStyle> fluentIterable0 = FluentIterable.of(textStyleArray0);
      FluentIterable<TextStyle> fluentIterable1 = fluentIterable0.loop();
      Closure<TextStyle> closure0 = ExceptionClosure.exceptionClosure();
      ForClosure<TextStyle> forClosure0 = new ForClosure<TextStyle>((-600), closure0);
      // Undeclared exception!
      IterableUtils.forEachButLast((Iterable<TextStyle>) fluentIterable1, (Closure<? super TextStyle>) forClosure0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ArrayList<Vector<InstanceofPredicate>> arrayList0 = new ArrayList<Vector<InstanceofPredicate>>();
      // Undeclared exception!
      try { 
        IterableUtils.forEachButLast((Iterable<Vector<InstanceofPredicate>>) arrayList0, (Closure<? super Vector<InstanceofPredicate>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // closure
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FluentIterable<InstanceofPredicate> fluentIterable0 = FluentIterable.of((InstanceofPredicate) null);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[4];
      HashMap<Predicate<InstanceofPredicate>, Closure<InstanceofPredicate>> hashMap0 = new HashMap<Predicate<InstanceofPredicate>, Closure<InstanceofPredicate>>();
      Closure<InstanceofPredicate> closure0 = SwitchClosure.switchClosure((Map<Predicate<InstanceofPredicate>, Closure<InstanceofPredicate>>) hashMap0);
      WhileClosure<InstanceofPredicate> whileClosure0 = new WhileClosure<InstanceofPredicate>((Predicate<? super InstanceofPredicate>) null, closure0, true);
      IfClosure<InstanceofPredicate> ifClosure0 = new IfClosure<InstanceofPredicate>(instanceofPredicateArray0[1], whileClosure0, closure0);
      // Undeclared exception!
      try { 
        IterableUtils.forEach((Iterable<InstanceofPredicate>) fluentIterable0, (Closure<? super InstanceofPredicate>) ifClosure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.IfClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FluentIterable<Object> fluentIterable0 = new FluentIterable<Object>();
      // Undeclared exception!
      try { 
        IterableUtils.first((Iterable<Object>) fluentIterable0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      // Undeclared exception!
      try { 
        IterableUtils.first((Iterable<InstanceofPredicate>) hashSet0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Stack<Transformer<InstanceofPredicate, ConstantTransformer<TextStyle, InstanceofPredicate>>> stack0 = new Stack<Transformer<InstanceofPredicate, ConstantTransformer<TextStyle, InstanceofPredicate>>>();
      // Undeclared exception!
      try { 
        IterableUtils.first((Iterable<Transformer<InstanceofPredicate, ConstantTransformer<TextStyle, InstanceofPredicate>>>) stack0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashBag<ArrayList<InstanceofPredicate>> hashBag0 = new HashBag<ArrayList<InstanceofPredicate>>();
      // Undeclared exception!
      try { 
        IterableUtils.filteredIterable((Iterable<ArrayList<InstanceofPredicate>>) hashBag0, (Predicate<? super ArrayList<InstanceofPredicate>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Transformer<MinguoEra, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      TransformerPredicate<MinguoEra> transformerPredicate0 = new TransformerPredicate<MinguoEra>(transformer0);
      PriorityQueue<MinguoEra> priorityQueue0 = new PriorityQueue<MinguoEra>();
      MinguoEra minguoEra0 = MinguoEra.BEFORE_ROC;
      priorityQueue0.add(minguoEra0);
      // Undeclared exception!
      try { 
        IterableUtils.countMatches((Iterable<MinguoEra>) priorityQueue0, (Predicate<? super MinguoEra>) transformerPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FluentIterable<Stack<InstanceofPredicate>> fluentIterable0 = new FluentIterable<Stack<InstanceofPredicate>>();
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      EqualPredicate<Stack<InstanceofPredicate>> equalPredicate0 = new EqualPredicate<Stack<InstanceofPredicate>>(stack0);
      // Undeclared exception!
      try { 
        IterableUtils.countMatches((Iterable<Stack<InstanceofPredicate>>) fluentIterable0, (Predicate<? super Stack<InstanceofPredicate>>) equalPredicate0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FluentIterable<DayOfWeek> fluentIterable0 = new FluentIterable<DayOfWeek>();
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      // Undeclared exception!
      try { 
        IterableUtils.contains((Iterable<?>) fluentIterable0, (Object) instanceofPredicate0, (Equator<? super Object>) defaultEquator0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FluentIterable<DayOfWeek> fluentIterable0 = new FluentIterable<DayOfWeek>();
      DayOfWeek dayOfWeek0 = DayOfWeek.TUESDAY;
      // Undeclared exception!
      try { 
        IterableUtils.contains((Iterable<? extends DayOfWeek>) fluentIterable0, dayOfWeek0, (Equator<? super DayOfWeek>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // equator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      FluentIterable<ArrayList<InstanceofPredicate>> fluentIterable0 = new FluentIterable<ArrayList<InstanceofPredicate>>();
      // Undeclared exception!
      try { 
        IterableUtils.contains((Iterable<ArrayList<InstanceofPredicate>>) fluentIterable0, (Object) instanceofPredicate0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        IterableUtils.collatedIterable((Comparator<? super InstanceofPredicate>) null, (Iterable<? extends InstanceofPredicate>) null, (Iterable<? extends InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        IterableUtils.collatedIterable((Iterable<? extends InstanceofPredicate>) null, (Iterable<? extends InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        IterableUtils.checkNotNull((Iterable<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterables
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        IterableUtils.chainedIterable((Iterable<? extends InstanceofPredicate>) null, (Iterable<? extends InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        IterableUtils.boundedIterable((Iterable<InstanceofPredicate>) null, (-1621L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Factory<Collection<InstanceofPredicate>> factory0 = ConstantFactory.constantFactory((Collection<InstanceofPredicate>) stack0);
      Predicate<InstanceofPredicate>[] predicateArray0 = (Predicate<InstanceofPredicate>[]) Array.newInstance(Predicate.class, 0);
      List<Collection<InstanceofPredicate>> list0 = IterableUtils.partition((Iterable<? extends InstanceofPredicate>) stack0, factory0, (Predicate<? super InstanceofPredicate>[]) predicateArray0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Iterable<MinguoEra> iterable0 = IterableUtils.emptyIterable();
      int int0 = IterableUtils.size(iterable0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ArrayList<ComparatorPredicate.Criterion> arrayList0 = new ArrayList<ComparatorPredicate.Criterion>(0);
      // Undeclared exception!
      try { 
        IterableUtils.get((Iterable<ComparatorPredicate.Criterion>) arrayList0, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TreeBag<InstanceofPredicate> treeBag0 = new TreeBag<InstanceofPredicate>();
      boolean boolean0 = IterableUtils.isEmpty(treeBag0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Vector<Vector<InstanceofPredicate>> vector0 = new Vector<Vector<InstanceofPredicate>>();
      Iterable<Vector<InstanceofPredicate>> iterable0 = IterableUtils.emptyIfNull((Iterable<Vector<InstanceofPredicate>>) vector0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Vector<ArrayList<InstanceofPredicate>> vector0 = new Vector<ArrayList<InstanceofPredicate>>(317, 1604);
      boolean boolean0 = IterableUtils.matchesAny((Iterable<ArrayList<InstanceofPredicate>>) vector0, (Predicate<? super ArrayList<InstanceofPredicate>>) instanceofPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Iterable<ArrayList<InstanceofPredicate>>[] iterableArray0 = (Iterable<ArrayList<InstanceofPredicate>>[]) Array.newInstance(Iterable.class, 7);
      // Undeclared exception!
      try { 
        IterableUtils.chainedIterable((Iterable<? extends ArrayList<InstanceofPredicate>>[]) iterableArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Month month0 = Month.JUNE;
      EnumSet<Month> enumSet0 = EnumSet.of(month0, month0, month0, month0);
      Month month1 = IterableUtils.first((Iterable<Month>) enumSet0);
      assertEquals(Month.JUNE, month1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      TreeBag<Predicate<Object>> treeBag0 = new TreeBag<Predicate<Object>>();
      // Undeclared exception!
      try { 
        IterableUtils.frequency((Iterable<Predicate<Object>>) treeBag0, instanceofPredicate0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      linkedHashSet0.add((Predicate<Object>) null);
      int int0 = IterableUtils.frequency((Iterable<Predicate<Object>>) linkedHashSet0, (InstanceofPredicate) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      int int0 = IterableUtils.frequency((Iterable<Predicate<Object>>) linkedHashSet0, (InstanceofPredicate) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Stack<ArrayList<InstanceofPredicate>> stack0 = new Stack<ArrayList<InstanceofPredicate>>();
      boolean boolean0 = IterableUtils.contains((Iterable<ArrayList<InstanceofPredicate>>) stack0, (Object) stack0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Iterable<InstanceofPredicate> iterable0 = IterableUtils.emptyIfNull((Iterable<InstanceofPredicate>) null);
      // Undeclared exception!
      try { 
        IterableUtils.chainedIterable((Iterable<?>) iterable0, (Iterable<?>) null, (Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ResolverStyle[] resolverStyleArray0 = new ResolverStyle[0];
      FluentIterable<ResolverStyle> fluentIterable0 = FluentIterable.of(resolverStyleArray0);
      FluentIterable<ResolverStyle> fluentIterable1 = fluentIterable0.unmodifiable();
      FluentIterable<ResolverStyle> fluentIterable2 = fluentIterable1.unmodifiable();
      assertSame(fluentIterable2, fluentIterable1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LinkedList<MinguoEra> linkedList0 = new LinkedList<MinguoEra>();
      // Undeclared exception!
      try { 
        IterableUtils.skippingIterable((Iterable<MinguoEra>) linkedList0, (-3957L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ElementsToSkip parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      Iterable<InstanceofPredicate> iterable0 = IterableUtils.reversedIterable((Iterable<InstanceofPredicate>) arrayList0);
      List<List<InstanceofPredicate>> list0 = IterableUtils.partition((Iterable<? extends InstanceofPredicate>) iterable0, (Predicate<? super InstanceofPredicate>[]) predicateArray0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FluentIterable<Collection<InstanceofPredicate>> fluentIterable0 = FluentIterable.empty();
      FluentIterable<Collection<InstanceofPredicate>> fluentIterable1 = fluentIterable0.loop();
      // Undeclared exception!
      try { 
        IterableUtils.boundedIterable((Iterable<Collection<InstanceofPredicate>>) fluentIterable1, (-474L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MaxSize parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TreeSet<Stack<Object>> treeSet0 = new TreeSet<Stack<Object>>();
      Iterable<Stack<Object>> iterable0 = IterableUtils.chainedIterable((Iterable<? extends Stack<Object>>) treeSet0, (Iterable<? extends Stack<Object>>) treeSet0, (Iterable<? extends Stack<Object>>) treeSet0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("B'qPyK1VkA)UdUD");
      String string0 = IterableUtils.toString(iterable0, (Transformer<? super Stack<Object>, String>) constantTransformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FluentIterable<TextStyle> fluentIterable0 = new FluentIterable<TextStyle>();
      FluentIterable<TextStyle> fluentIterable1 = fluentIterable0.limit(522L);
      Transformer<TextStyle, String> transformer0 = StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
      try { 
        IterableUtils.toString((Iterable<TextStyle>) fluentIterable1, (Transformer<? super TextStyle, String>) transformer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Comparator<InstanceofPredicate> comparator0 = (Comparator<InstanceofPredicate>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>(comparator0);
      Iterable<InstanceofPredicate> iterable0 = IterableUtils.boundedIterable((Iterable<InstanceofPredicate>) priorityQueue0, (long) 0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FluentIterable<InstanceofPredicate> fluentIterable0 = new FluentIterable<InstanceofPredicate>();
      Iterable<Predicate<Object>> iterable0 = IterableUtils.zippingIterable((Iterable<? extends Predicate<Object>>) fluentIterable0, (Iterable<? extends Predicate<Object>>) fluentIterable0);
      // Undeclared exception!
      try { 
        IterableUtils.frequency(iterable0, (InstanceofPredicate) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ConstantTransformer<DayOfWeek, String> constantTransformer0 = new ConstantTransformer<DayOfWeek, String>("Ef(N;VAx`|xi#U");
      FluentIterable<DayOfWeek> fluentIterable0 = FluentIterable.empty();
      Class<DayOfWeek> class0 = DayOfWeek.class;
      EnumSet<DayOfWeek> enumSet0 = EnumSet.allOf(class0);
      Comparator<DayOfWeek> comparator0 = (Comparator<DayOfWeek>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FluentIterable<DayOfWeek> fluentIterable1 = fluentIterable0.collate((Iterable<? extends DayOfWeek>) enumSet0, (Comparator<? super DayOfWeek>) comparator0);
      FluentIterable<DayOfWeek> fluentIterable2 = fluentIterable1.skip(0L);
      Iterable<DayOfWeek> iterable0 = IterableUtils.chainedIterable((Iterable<? extends DayOfWeek>) fluentIterable2, (Iterable<? extends DayOfWeek>) fluentIterable1);
      // Undeclared exception!
      IterableUtils.toString(iterable0, (Transformer<? super DayOfWeek, String>) constantTransformer0, "Ef(N;VAx`|xi#U", "gUcj", "Ef(N;VAx`|xi#U");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IdentityPredicate<InstanceofPredicate> identityPredicate0 = new IdentityPredicate<InstanceofPredicate>(instanceofPredicate0);
      OrPredicate<InstanceofPredicate> orPredicate0 = new OrPredicate<InstanceofPredicate>(identityPredicate0, instanceofPredicate0);
      List<List<InstanceofPredicate>> list0 = IterableUtils.partition((Iterable<? extends InstanceofPredicate>) null, (Predicate<? super InstanceofPredicate>) orPredicate0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LinkedHashSet<ChronoUnit> linkedHashSet0 = new LinkedHashSet<ChronoUnit>(8, 1319.9F);
      // Undeclared exception!
      try { 
        IterableUtils.matchesAll((Iterable<ChronoUnit>) linkedHashSet0, (Predicate<? super ChronoUnit>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TextStyle[] textStyleArray0 = new TextStyle[2];
      FluentIterable<TextStyle> fluentIterable0 = FluentIterable.of(textStyleArray0);
      Closure<TextStyle> closure0 = ExceptionClosure.exceptionClosure();
      ForClosure<TextStyle> forClosure0 = new ForClosure<TextStyle>((-600), closure0);
      IterableUtils.forEachButLast((Iterable<TextStyle>) fluentIterable0, (Closure<? super TextStyle>) forClosure0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Vector<DayOfWeek> vector0 = new Vector<DayOfWeek>();
      Iterable<DayOfWeek>[] iterableArray0 = (Iterable<DayOfWeek>[]) Array.newInstance(Iterable.class, 0);
      Iterable<DayOfWeek> iterable0 = IterableUtils.zippingIterable((Iterable<? extends DayOfWeek>) vector0, (Iterable<? extends DayOfWeek>[]) iterableArray0);
      ConstantTransformer<DayOfWeek, String> constantTransformer0 = new ConstantTransformer<DayOfWeek, String>("Ef(N;VAx`|xi#U");
      String string0 = IterableUtils.toString(iterable0, (Transformer<? super DayOfWeek, String>) constantTransformer0, "Ef(N;VAx`|xi#U", "Ef(N;VAx`|xi#U", "Ef(N;VAx`|xi#U");
      assertEquals("Ef(N;VAx`|xi#UEf(N;VAx`|xi#U", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      PriorityQueue<MinguoEra> priorityQueue0 = new PriorityQueue<MinguoEra>();
      long long0 = IterableUtils.countMatches((Iterable<MinguoEra>) priorityQueue0, (Predicate<? super MinguoEra>) instanceofPredicate0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DayOfWeek dayOfWeek0 = DayOfWeek.THURSDAY;
      FluentIterable<DayOfWeek> fluentIterable0 = FluentIterable.of(dayOfWeek0);
      FluentIterable<DayOfWeek> fluentIterable1 = fluentIterable0.unique();
      Iterable<DayOfWeek>[] iterableArray0 = (Iterable<DayOfWeek>[]) Array.newInstance(Iterable.class, 1);
      iterableArray0[0] = (Iterable<DayOfWeek>) fluentIterable1;
      FluentIterable<DayOfWeek> fluentIterable2 = fluentIterable1.zip(iterableArray0);
      // Undeclared exception!
      try { 
        IterableUtils.toString((Iterable<DayOfWeek>) fluentIterable2, (Transformer<? super DayOfWeek, String>) null, "", "TWF%Q}.@tpk(?bl!", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Iterable<InstanceofPredicate> iterable0 = IterableUtils.emptyIterable();
      Iterable<Object> iterable1 = IterableUtils.collatedIterable((Iterable<?>) iterable0, (Iterable<?>) iterable0);
      String string0 = IterableUtils.toString(iterable1);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Comparator<InstanceofPredicate> comparator0 = (Comparator<InstanceofPredicate>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>(comparator0);
      Closure<InstanceofPredicate> closure0 = ExceptionClosure.exceptionClosure();
      IterableUtils.forEach((Iterable<InstanceofPredicate>) priorityQueue0, (Closure<? super InstanceofPredicate>) closure0);
      assertEquals(0, priorityQueue0.size());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        IterableUtils.find((Iterable<Collection<Object>>) null, (Predicate<? super Collection<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<DayOfWeek> class0 = DayOfWeek.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IdentityPredicate<InstanceofPredicate> identityPredicate0 = new IdentityPredicate<InstanceofPredicate>(instanceofPredicate0);
      IfTransformer<InstanceofPredicate, Vector<InstanceofPredicate>> ifTransformer0 = new IfTransformer<InstanceofPredicate, Vector<InstanceofPredicate>>(identityPredicate0, (Transformer<? super InstanceofPredicate, ? extends Vector<InstanceofPredicate>>) null, (Transformer<? super InstanceofPredicate, ? extends Vector<InstanceofPredicate>>) null);
      // Undeclared exception!
      try { 
        IterableUtils.transformedIterable((Iterable<InstanceofPredicate>) null, (Transformer<? super InstanceofPredicate, ? extends Vector<InstanceofPredicate>>) ifTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FluentIterable<InstanceofPredicate> fluentIterable0 = FluentIterable.empty();
      List<InstanceofPredicate> list0 = fluentIterable0.toList();
      // Undeclared exception!
      try { 
        IterableUtils.first((Iterable<InstanceofPredicate>) list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PriorityQueue<MinguoEra> priorityQueue0 = new PriorityQueue<MinguoEra>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<MinguoEra> treeSet0 = new TreeSet<MinguoEra>(comparator0);
      Iterable<MinguoEra> iterable0 = IterableUtils.zippingIterable((Iterable<? extends MinguoEra>) treeSet0, (Iterable<? extends MinguoEra>) priorityQueue0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TreeSet<ChronoUnit> treeSet0 = new TreeSet<ChronoUnit>();
      // Undeclared exception!
      try { 
        IterableUtils.indexOf((Iterable<ChronoUnit>) treeSet0, (Predicate<? super ChronoUnit>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      IterableUtils iterableUtils0 = new IterableUtils();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FormatStyle formatStyle0 = FormatStyle.SHORT;
      DefaultEquator<FormatStyle> defaultEquator0 = DefaultEquator.defaultEquator();
      boolean boolean0 = IterableUtils.contains((Iterable<? extends FormatStyle>) null, formatStyle0, (Equator<? super FormatStyle>) defaultEquator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      Iterable<Object> iterable0 = IterableUtils.chainedIterable((Iterable<?>) linkedHashSet0, (Iterable<?>) linkedHashSet0, (Iterable<?>) linkedHashSet0);
      // Undeclared exception!
      try { 
        IterableUtils.countMatches(iterable0, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicate
         //
         verifyException("java.util.Objects", e);
      }
  }
}
