/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 17:39:54 GMT 2025
 */

package org.apache.commons.collections4.bidimap;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import org.apache.commons.collections4.OrderedBidiMap;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.bidimap.TreeBidiMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class TreeBidiMap_ESTest extends TreeBidiMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.DataElement treeBidiMap_DataElement0 = TreeBidiMap.DataElement.VALUE;
      TreeBidiMap.ViewMapIterator treeBidiMap_ViewMapIterator0 = treeBidiMap0.new ViewMapIterator(treeBidiMap_DataElement0);
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertFalse(treeBidiMap_ViewMapIterator0.hasPrevious());
      assertFalse(treeBidiMap_ViewMapIterator0.hasNext());
      assertNotNull(treeBidiMap_ViewMapIterator0);
      
      Integer integer0 = new Integer(61);
      assertEquals(61, (int)integer0);
      assertNotNull(integer0);
      
      TreeBidiMap.Node<Integer, Integer> treeBidiMap_Node0 = new TreeBidiMap.Node<Integer, Integer>(integer0, integer0);
      assertNotNull(treeBidiMap_Node0);
      
      treeBidiMap_ViewMapIterator0.lastReturnedNode = treeBidiMap_Node0;
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertFalse(treeBidiMap_ViewMapIterator0.hasPrevious());
      assertFalse(treeBidiMap_ViewMapIterator0.hasNext());
      
      // Undeclared exception!
      try { 
        treeBidiMap_ViewMapIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer((-53));
      assertEquals((-53), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-53));
      assertEquals((-53), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = treeBidiMap0.putIfAbsent(integer0, integer1);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertNull(integer2);
      
      String string0 = treeBidiMap0.toString();
      assertEquals("{-53=-53}", string0);
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer((-390));
      assertEquals((-390), (int)integer0);
      assertNotNull(integer0);
      
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      Integer integer1 = new Integer(7);
      assertEquals(7, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = treeBidiMap0.putIfAbsent(integer1, integer0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertNull(integer2);
      
      treeBidiMap0.hashCode();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap<Integer, Integer> treeBidiMap1 = new TreeBidiMap<Integer, Integer>(treeBidiMap0);
      assertTrue(treeBidiMap1.equals((Object)treeBidiMap0));
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap1.size());
      assertTrue(treeBidiMap1.isEmpty());
      assertNotNull(treeBidiMap1);
      
      Integer integer0 = new Integer(125);
      assertEquals(125, (int)integer0);
      assertNotNull(integer0);
      
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer1 = treeBidiMap1.merge(integer0, integer0, biFunction0);
      assertEquals(125, (int)integer1);
      assertFalse(treeBidiMap0.equals((Object)treeBidiMap1));
      assertFalse(treeBidiMap1.equals((Object)treeBidiMap0));
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertFalse(treeBidiMap1.isEmpty());
      assertEquals(1, treeBidiMap1.size());
      assertNotNull(integer1);
      assertNotSame(treeBidiMap0, treeBidiMap1);
      assertNotSame(treeBidiMap1, treeBidiMap0);
      
      boolean boolean0 = treeBidiMap1.equals(treeBidiMap0);
      assertFalse(boolean0);
      assertFalse(treeBidiMap0.equals((Object)treeBidiMap1));
      assertFalse(treeBidiMap1.equals((Object)treeBidiMap0));
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertFalse(treeBidiMap1.isEmpty());
      assertEquals(1, treeBidiMap1.size());
      assertNotSame(treeBidiMap0, treeBidiMap1);
      assertNotSame(treeBidiMap1, treeBidiMap0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer(2081);
      assertEquals(2081, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(26);
      assertEquals(26, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = hashMap0.put(integer0, integer1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer2);
      
      Integer integer3 = Integer.valueOf(0);
      assertEquals(0, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      Integer integer4 = hashMap0.put(integer3, integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer4);
      
      Integer integer5 = new Integer(988);
      assertEquals(988, (int)integer5);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      
      Integer integer6 = hashMap0.put(integer5, integer5);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer6);
      
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      Integer integer7 = treeBidiMap0.putIfAbsent(integer1, integer0);
      assertFalse(integer0.equals((Object)integer5));
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer5));
      assertFalse(integer1.equals((Object)integer3));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(4, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertNull(integer7);
      
      Integer integer8 = treeBidiMap0.lastKey();
      assertEquals(2081, (int)integer8);
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer3));
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(4, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertNotNull(integer8);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer((-825));
      assertEquals((-825), (int)integer0);
      assertNotNull(integer0);
      
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap_Inverse0.isEmpty());
      assertEquals(0, treeBidiMap_Inverse0.size());
      assertNotNull(treeBidiMap_Inverse0);
      
      boolean boolean0 = treeBidiMap_Inverse0.containsKey(integer0);
      assertFalse(boolean0);
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap_Inverse0.isEmpty());
      assertEquals(0, treeBidiMap_Inverse0.size());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.DataElement treeBidiMap_DataElement0 = TreeBidiMap.DataElement.VALUE;
      TreeBidiMap.ViewMapIterator treeBidiMap_ViewMapIterator0 = treeBidiMap0.new ViewMapIterator(treeBidiMap_DataElement0);
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertFalse(treeBidiMap_ViewMapIterator0.hasNext());
      assertFalse(treeBidiMap_ViewMapIterator0.hasPrevious());
      assertNotNull(treeBidiMap_ViewMapIterator0);
      
      // Undeclared exception!
      try { 
        treeBidiMap_ViewMapIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.ViewMapEntryIterator treeBidiMap_ViewMapEntryIterator0 = treeBidiMap0.new ViewMapEntryIterator();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertFalse(treeBidiMap_ViewMapEntryIterator0.hasNext());
      assertFalse(treeBidiMap_ViewMapEntryIterator0.hasPrevious());
      assertNotNull(treeBidiMap_ViewMapEntryIterator0);
      
      // Undeclared exception!
      try { 
        treeBidiMap_ViewMapEntryIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.DataElement treeBidiMap_DataElement0 = TreeBidiMap.DataElement.VALUE;
      TreeBidiMap.ValueView treeBidiMap_ValueView0 = treeBidiMap0.new ValueView(treeBidiMap_DataElement0);
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap_ValueView0.size());
      assertNotNull(treeBidiMap_ValueView0);
      
      Iterator<Integer> iterator0 = treeBidiMap_ValueView0.iterator();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap_ValueView0.size());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.DataElement treeBidiMap_DataElement0 = TreeBidiMap.DataElement.VALUE;
      TreeBidiMap.KeyView treeBidiMap_KeyView0 = treeBidiMap0.new KeyView(treeBidiMap_DataElement0);
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap_KeyView0.size());
      assertNotNull(treeBidiMap_KeyView0);
      
      Iterator<Integer> iterator0 = treeBidiMap_KeyView0.iterator();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap_KeyView0.size());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.InverseViewMapEntryIterator treeBidiMap_InverseViewMapEntryIterator0 = treeBidiMap0.new InverseViewMapEntryIterator();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertFalse(treeBidiMap_InverseViewMapEntryIterator0.hasNext());
      assertFalse(treeBidiMap_InverseViewMapEntryIterator0.hasPrevious());
      assertNotNull(treeBidiMap_InverseViewMapEntryIterator0);
      
      // Undeclared exception!
      try { 
        treeBidiMap_InverseViewMapEntryIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertTrue(treeBidiMap_Inverse0.isEmpty());
      assertEquals(0, treeBidiMap_Inverse0.size());
      assertNotNull(treeBidiMap_Inverse0);
      
      boolean boolean0 = treeBidiMap_Inverse0.isEmpty();
      assertTrue(boolean0);
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertTrue(treeBidiMap_Inverse0.isEmpty());
      assertEquals(0, treeBidiMap_Inverse0.size());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap_Inverse0.size());
      assertTrue(treeBidiMap_Inverse0.isEmpty());
      assertNotNull(treeBidiMap_Inverse0);
      
      // Undeclared exception!
      try { 
        treeBidiMap_Inverse0.get(treeBidiMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // value must be Comparable
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer(2051);
      assertEquals(2051, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = treeBidiMap0.putIfAbsent(integer0, integer0);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertNull(integer1);
      
      Set<Integer> set0 = treeBidiMap0.values();
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertTrue(set0.contains(integer0));
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer(4129);
      assertEquals(4129, (int)integer0);
      assertNotNull(integer0);
      
      BiFunction<Integer, Object, Integer> biFunction0 = (BiFunction<Integer, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer1 = treeBidiMap0.merge(integer0, integer0, biFunction0);
      assertEquals(4129, (int)integer1);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertNotNull(integer1);
      
      int int0 = treeBidiMap0.size();
      assertEquals(1, int0);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.ViewMapEntryIterator treeBidiMap_ViewMapEntryIterator0 = treeBidiMap0.new ViewMapEntryIterator();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertFalse(treeBidiMap_ViewMapEntryIterator0.hasNext());
      assertFalse(treeBidiMap_ViewMapEntryIterator0.hasPrevious());
      assertNotNull(treeBidiMap_ViewMapEntryIterator0);
      
      Integer integer0 = new Integer(123);
      assertEquals(123, (int)integer0);
      assertNotNull(integer0);
      
      TreeBidiMap.Node<Integer, Integer> treeBidiMap_Node0 = new TreeBidiMap.Node<Integer, Integer>(integer0, integer0);
      assertNotNull(treeBidiMap_Node0);
      
      treeBidiMap_ViewMapEntryIterator0.lastReturnedNode = treeBidiMap_Node0;
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertFalse(treeBidiMap_ViewMapEntryIterator0.hasNext());
      assertFalse(treeBidiMap_ViewMapEntryIterator0.hasPrevious());
      
      treeBidiMap_ViewMapEntryIterator0.remove();
      assertEquals((-1), treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertFalse(treeBidiMap_ViewMapEntryIterator0.hasNext());
      assertFalse(treeBidiMap_ViewMapEntryIterator0.hasPrevious());
      
      OrderedMapIterator<Integer, Integer> orderedMapIterator0 = treeBidiMap0.mapIterator();
      assertEquals((-1), treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertFalse(orderedMapIterator0.hasNext());
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer(561);
      assertEquals(561, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = treeBidiMap0.put(integer0, integer0);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertNull(integer1);
      
      Set<Integer> set0 = treeBidiMap0.keySet();
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertTrue(set0.contains(integer0));
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer(125);
      assertEquals(125, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = treeBidiMap0.putIfAbsent(integer0, integer0);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertNull(integer1);
      
      OrderedBidiMap<Integer, Integer> orderedBidiMap0 = treeBidiMap0.inverseBidiMap();
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertFalse(orderedBidiMap0.isEmpty());
      assertEquals(1, orderedBidiMap0.size());
      assertFalse(orderedBidiMap0.isEmpty());
      assertEquals(1, orderedBidiMap0.size());
      assertNotNull(orderedBidiMap0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = treeBidiMap0.get("{}");
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer(775);
      assertEquals(775, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = treeBidiMap0.putIfAbsent(integer0, integer0);
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertNull(integer1);
      
      // Undeclared exception!
      try { 
        treeBidiMap0.removeValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer(5);
      assertEquals(5, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = treeBidiMap0.put(integer0, integer0);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertNull(integer1);
      
      TreeBidiMap.InverseEntryView treeBidiMap_InverseEntryView0 = treeBidiMap0.new InverseEntryView();
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertEquals(1, treeBidiMap_InverseEntryView0.size());
      assertNotNull(treeBidiMap_InverseEntryView0);
      
      // Undeclared exception!
      try { 
        treeBidiMap0.removeValue(treeBidiMap_InverseEntryView0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.bidimap.TreeBidiMap$InverseEntryView cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer(6);
      assertEquals(6, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = treeBidiMap0.putIfAbsent(integer0, integer0);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertNull(integer1);
      
      // Undeclared exception!
      try { 
        treeBidiMap0.remove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap_Inverse0.isEmpty());
      assertEquals(0, treeBidiMap_Inverse0.size());
      assertNotNull(treeBidiMap_Inverse0);
      
      Integer integer0 = new Integer(125);
      assertEquals(125, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = treeBidiMap0.putIfAbsent(integer0, integer0);
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertNull(integer1);
      
      // Undeclared exception!
      try { 
        treeBidiMap0.remove((Object) treeBidiMap_Inverse0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.bidimap.TreeBidiMap$Inverse cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      // Undeclared exception!
      try { 
        treeBidiMap0.putAll((Map<? extends Integer, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      // Undeclared exception!
      try { 
        treeBidiMap0.put((Integer) null, (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      // Undeclared exception!
      try { 
        treeBidiMap0.previousKey((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      // Undeclared exception!
      try { 
        treeBidiMap0.nextKey((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      // Undeclared exception!
      try { 
        treeBidiMap0.getKey((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // value
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = hashMap0.put(integer0, integer0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer1);
      
      treeBidiMap0.putAll(hashMap0);
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        treeBidiMap0.getKey("{0=0}");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      // Undeclared exception!
      try { 
        treeBidiMap0.getKey(treeBidiMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // value must be Comparable
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      // Undeclared exception!
      try { 
        treeBidiMap0.get((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer(988);
      assertEquals(988, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = hashMap0.put(integer0, integer0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer1);
      
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.DataElement treeBidiMap_DataElement0 = TreeBidiMap.DataElement.VALUE;
      // Undeclared exception!
      try { 
        treeBidiMap0.get(treeBidiMap_DataElement0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.Enum
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      // Undeclared exception!
      try { 
        treeBidiMap0.get(treeBidiMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // key must be Comparable
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      // Undeclared exception!
      try { 
        treeBidiMap0.containsValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // value
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer((-53));
      assertEquals((-53), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = treeBidiMap0.putIfAbsent(integer0, integer0);
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertNull(integer1);
      
      // Undeclared exception!
      try { 
        treeBidiMap0.containsValue("{-53=-53}");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        treeBidiMap0.containsValue(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // value must be Comparable
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      // Undeclared exception!
      try { 
        treeBidiMap0.containsKey((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        treeBidiMap0.containsKey(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // key must be Comparable
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = null;
      try {
        treeBidiMap0 = new TreeBidiMap<Integer, Integer>((Map<? extends Integer, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(32);
      assertEquals(32, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = hashMap0.put(integer0, integer1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer2);
      
      Integer integer3 = hashMap0.put(integer1, integer0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer3);
      
      Integer integer4 = new Integer(988);
      assertEquals(988, (int)integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      
      Integer integer5 = hashMap0.put(integer4, integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer5);
      
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      Integer integer6 = new Integer(123);
      assertEquals(123, (int)integer6);
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertNotNull(integer6);
      
      Integer integer7 = new Integer((-4));
      assertEquals((-4), (int)integer7);
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer6));
      assertNotNull(integer7);
      
      Integer integer8 = treeBidiMap0.putIfAbsent(integer6, integer7);
      assertFalse(integer6.equals((Object)integer7));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer6));
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(4, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertNull(integer8);
      
      Integer integer9 = treeBidiMap0.replace(integer4, integer1);
      assertEquals(988, (int)integer9);
      assertFalse(integer1.equals((Object)integer4));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer7));
      assertFalse(integer1.equals((Object)integer6));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer6));
      assertFalse(integer4.equals((Object)integer7));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer9.equals((Object)integer1));
      assertFalse(integer9.equals((Object)integer6));
      assertFalse(integer9.equals((Object)integer7));
      assertFalse(integer9.equals((Object)integer0));
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertNotNull(integer9);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      Set<Map.Entry<Integer, Integer>> set0 = (Set<Map.Entry<Integer, Integer>>)treeBidiMap0.entrySet();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Set<Map.Entry<Integer, Integer>> set1 = (Set<Map.Entry<Integer, Integer>>)treeBidiMap0.entrySet();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertNotNull(set1);
      assertSame(set1, set0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer((-53));
      assertEquals((-53), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = treeBidiMap0.putIfAbsent(integer0, integer0);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertNull(integer1);
      
      Integer integer2 = treeBidiMap0.getKey(integer0);
      assertEquals((-53), (int)integer2);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertNotNull(integer2);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = treeBidiMap0.getKey("{}");
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer(4129);
      assertEquals(4129, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = treeBidiMap0.containsKey(integer0);
      assertFalse(boolean0);
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer(4129);
      assertEquals(4129, (int)integer0);
      assertNotNull(integer0);
      
      BiFunction<Integer, Object, Integer> biFunction0 = (BiFunction<Integer, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer1 = treeBidiMap0.merge(integer0, integer0, biFunction0);
      assertEquals(4129, (int)integer1);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertNotNull(integer1);
      
      boolean boolean0 = treeBidiMap0.containsKey(integer0);
      assertTrue(boolean0);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      boolean boolean0 = treeBidiMap0.isEmpty();
      assertTrue(boolean0);
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      int int0 = treeBidiMap0.size();
      assertEquals(0, int0);
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      treeBidiMap0.clear();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = treeBidiMap0.removeValue((Object) null);
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer((-819));
      assertEquals((-819), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = hashMap0.put(integer0, integer0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer1);
      
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      treeBidiMap0.forEach(biConsumer0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Integer integer0 = Integer.valueOf(657);
      assertEquals(657, (int)integer0);
      assertNotNull(integer0);
      
      TreeBidiMap.Node<Integer, Integer> treeBidiMap_Node0 = new TreeBidiMap.Node<Integer, Integer>(integer0, integer0);
      assertNotNull(treeBidiMap_Node0);
      
      Integer integer1 = treeBidiMap_Node0.getValue();
      assertEquals(657, (int)integer1);
      assertNotNull(integer1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer(980);
      assertEquals(980, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = hashMap0.put(integer0, integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer1);
      
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap_Inverse0.isEmpty());
      assertEquals(1, treeBidiMap_Inverse0.size());
      assertNotNull(treeBidiMap_Inverse0);
      
      OrderedMapIterator<Integer, Integer> orderedMapIterator0 = treeBidiMap_Inverse0.mapIterator();
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap_Inverse0.isEmpty());
      assertEquals(1, treeBidiMap_Inverse0.size());
      assertTrue(orderedMapIterator0.hasNext());
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertEquals(0, treeBidiMap_Inverse0.size());
      assertTrue(treeBidiMap_Inverse0.isEmpty());
      assertNotNull(treeBidiMap_Inverse0);
      
      Set<Integer> set0 = treeBidiMap_Inverse0.values();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertEquals(0, treeBidiMap_Inverse0.size());
      assertTrue(treeBidiMap_Inverse0.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Set<Integer> set1 = treeBidiMap_Inverse0.values();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertEquals(0, treeBidiMap_Inverse0.size());
      assertTrue(treeBidiMap_Inverse0.isEmpty());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertNotNull(set1);
      assertSame(set1, set0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertTrue(treeBidiMap_Inverse0.isEmpty());
      assertEquals(0, treeBidiMap_Inverse0.size());
      assertNotNull(treeBidiMap_Inverse0);
      
      Set<Integer> set0 = treeBidiMap_Inverse0.keySet();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertTrue(treeBidiMap_Inverse0.isEmpty());
      assertEquals(0, treeBidiMap_Inverse0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Set<Integer> set1 = treeBidiMap_Inverse0.keySet();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertTrue(treeBidiMap_Inverse0.isEmpty());
      assertEquals(0, treeBidiMap_Inverse0.size());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertNotNull(set1);
      assertSame(set1, set0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertTrue(treeBidiMap_Inverse0.isEmpty());
      assertEquals(0, treeBidiMap_Inverse0.size());
      assertNotNull(treeBidiMap_Inverse0);
      
      // Undeclared exception!
      try { 
        treeBidiMap_Inverse0.lastKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Map is empty
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap$Inverse", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertTrue(treeBidiMap_Inverse0.isEmpty());
      assertEquals(0, treeBidiMap_Inverse0.size());
      assertNotNull(treeBidiMap_Inverse0);
      
      // Undeclared exception!
      try { 
        treeBidiMap_Inverse0.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Map is empty
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap$Inverse", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer(53);
      assertEquals(53, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(988);
      assertEquals(988, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = hashMap0.put(integer1, integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer2);
      
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.Node<Integer, Integer> treeBidiMap_Node0 = new TreeBidiMap.Node<Integer, Integer>(integer1, integer0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(treeBidiMap_Node0);
      
      TreeBidiMap.InverseViewMapEntryIterator treeBidiMap_InverseViewMapEntryIterator0 = treeBidiMap0.new InverseViewMapEntryIterator();
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertTrue(treeBidiMap_InverseViewMapEntryIterator0.hasNext());
      assertFalse(treeBidiMap_InverseViewMapEntryIterator0.hasPrevious());
      assertNotNull(treeBidiMap_InverseViewMapEntryIterator0);
      
      TreeBidiMap.Node<Integer, Integer> treeBidiMap_Node1 = treeBidiMap_InverseViewMapEntryIterator0.navigateNext();
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertTrue(treeBidiMap_InverseViewMapEntryIterator0.hasPrevious());
      assertFalse(treeBidiMap_InverseViewMapEntryIterator0.hasNext());
      assertNotNull(treeBidiMap_Node1);
      
      boolean boolean0 = treeBidiMap_Node1.equals(treeBidiMap_Node0);
      assertFalse(boolean0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertTrue(treeBidiMap_InverseViewMapEntryIterator0.hasPrevious());
      assertFalse(treeBidiMap_InverseViewMapEntryIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer(2081);
      assertEquals(2081, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = hashMap0.put(integer0, integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer1);
      
      Integer integer2 = Integer.valueOf(0);
      assertEquals(0, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = hashMap0.put(integer2, integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNull(integer3);
      
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals(2, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      Set<Map.Entry<Integer, Integer>> set0 = (Set<Map.Entry<Integer, Integer>>)treeBidiMap0.entrySet();
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals(2, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertNotNull(set0);
      
      TreeBidiMap.EntryView treeBidiMap_EntryView0 = treeBidiMap0.new EntryView();
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals(2, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(2, treeBidiMap_EntryView0.size());
      assertNotNull(treeBidiMap_EntryView0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>(set0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals(2, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertEquals(2, linkedList0.size());
      assertFalse(linkedList0.contains(0));
      assertNotNull(linkedList0);
      
      boolean boolean0 = treeBidiMap_EntryView0.removeAll(linkedList0);
      assertTrue(boolean0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, treeBidiMap_EntryView0.size());
      assertEquals(2, linkedList0.size());
      assertFalse(linkedList0.contains(0));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Integer integer0 = new Integer(2756);
      assertEquals(2756, (int)integer0);
      assertNotNull(integer0);
      
      TreeBidiMap.Node<Integer, Integer> treeBidiMap_Node0 = new TreeBidiMap.Node<Integer, Integer>((Integer) null, integer0);
      assertNotNull(treeBidiMap_Node0);
      
      boolean boolean0 = treeBidiMap_Node0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer(53);
      assertEquals(53, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = hashMap0.put(integer0, integer0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer1);
      
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.Node<Integer, Integer> treeBidiMap_Node0 = new TreeBidiMap.Node<Integer, Integer>(integer0, integer0);
      assertNotNull(treeBidiMap_Node0);
      
      TreeBidiMap.InverseViewMapEntryIterator treeBidiMap_InverseViewMapEntryIterator0 = treeBidiMap0.new InverseViewMapEntryIterator();
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertTrue(treeBidiMap_InverseViewMapEntryIterator0.hasNext());
      assertFalse(treeBidiMap_InverseViewMapEntryIterator0.hasPrevious());
      assertNotNull(treeBidiMap_InverseViewMapEntryIterator0);
      
      TreeBidiMap.Node<Integer, Integer> treeBidiMap_Node1 = treeBidiMap_InverseViewMapEntryIterator0.navigateNext();
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertFalse(treeBidiMap_InverseViewMapEntryIterator0.hasNext());
      assertTrue(treeBidiMap_InverseViewMapEntryIterator0.hasPrevious());
      assertNotNull(treeBidiMap_Node1);
      
      boolean boolean0 = treeBidiMap_Node1.equals(treeBidiMap_Node0);
      assertTrue(boolean0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertFalse(treeBidiMap_InverseViewMapEntryIterator0.hasNext());
      assertTrue(treeBidiMap_InverseViewMapEntryIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.DataElement treeBidiMap_DataElement0 = TreeBidiMap.DataElement.VALUE;
      TreeBidiMap.InverseViewMapIterator treeBidiMap_InverseViewMapIterator0 = treeBidiMap0.new InverseViewMapIterator(treeBidiMap_DataElement0);
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertFalse(treeBidiMap_InverseViewMapIterator0.hasNext());
      assertFalse(treeBidiMap_InverseViewMapIterator0.hasPrevious());
      assertNotNull(treeBidiMap_InverseViewMapIterator0);
      
      // Undeclared exception!
      try { 
        treeBidiMap_InverseViewMapIterator0.getValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator getValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.DataElement treeBidiMap_DataElement0 = TreeBidiMap.DataElement.VALUE;
      TreeBidiMap.InverseViewMapIterator treeBidiMap_InverseViewMapIterator0 = treeBidiMap0.new InverseViewMapIterator(treeBidiMap_DataElement0);
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertFalse(treeBidiMap_InverseViewMapIterator0.hasPrevious());
      assertFalse(treeBidiMap_InverseViewMapIterator0.hasNext());
      assertNotNull(treeBidiMap_InverseViewMapIterator0);
      
      // Undeclared exception!
      try { 
        treeBidiMap_InverseViewMapIterator0.getKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator getKey() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.DataElement treeBidiMap_DataElement0 = TreeBidiMap.DataElement.KEY;
      TreeBidiMap.ViewMapIterator treeBidiMap_ViewMapIterator0 = treeBidiMap0.new ViewMapIterator(treeBidiMap_DataElement0);
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertFalse(treeBidiMap_ViewMapIterator0.hasPrevious());
      assertFalse(treeBidiMap_ViewMapIterator0.hasNext());
      assertNotNull(treeBidiMap_ViewMapIterator0);
      
      // Undeclared exception!
      try { 
        treeBidiMap_ViewMapIterator0.getValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator getValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.DataElement treeBidiMap_DataElement0 = TreeBidiMap.DataElement.KEY;
      TreeBidiMap.ViewMapIterator treeBidiMap_ViewMapIterator0 = treeBidiMap0.new ViewMapIterator(treeBidiMap_DataElement0);
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertFalse(treeBidiMap_ViewMapIterator0.hasPrevious());
      assertFalse(treeBidiMap_ViewMapIterator0.hasNext());
      assertNotNull(treeBidiMap_ViewMapIterator0);
      
      // Undeclared exception!
      try { 
        treeBidiMap_ViewMapIterator0.getKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator getKey() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.ViewMapEntryIterator treeBidiMap_ViewMapEntryIterator0 = treeBidiMap0.new ViewMapEntryIterator();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertFalse(treeBidiMap_ViewMapEntryIterator0.hasNext());
      assertFalse(treeBidiMap_ViewMapEntryIterator0.hasPrevious());
      assertNotNull(treeBidiMap_ViewMapEntryIterator0);
      
      // Undeclared exception!
      try { 
        treeBidiMap_ViewMapEntryIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer(561);
      assertEquals(561, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = treeBidiMap0.put(integer0, integer0);
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertNull(integer1);
      
      TreeBidiMap.ViewMapEntryIterator treeBidiMap_ViewMapEntryIterator0 = treeBidiMap0.new ViewMapEntryIterator();
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertFalse(treeBidiMap_ViewMapEntryIterator0.hasPrevious());
      assertTrue(treeBidiMap_ViewMapEntryIterator0.hasNext());
      assertNotNull(treeBidiMap_ViewMapEntryIterator0);
      
      TreeBidiMap.Node<Integer, Integer> treeBidiMap_Node0 = treeBidiMap_ViewMapEntryIterator0.navigateNext();
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertTrue(treeBidiMap_ViewMapEntryIterator0.hasPrevious());
      assertFalse(treeBidiMap_ViewMapEntryIterator0.hasNext());
      assertNotNull(treeBidiMap_Node0);
      
      boolean boolean0 = treeBidiMap_ViewMapEntryIterator0.hasPrevious();
      assertTrue(boolean0);
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertTrue(treeBidiMap_ViewMapEntryIterator0.hasPrevious());
      assertFalse(treeBidiMap_ViewMapEntryIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.Node<Integer, Integer> treeBidiMap_Node0 = new TreeBidiMap.Node<Integer, Integer>(integer0, integer0);
      assertNotNull(treeBidiMap_Node0);
      
      TreeBidiMap.InverseEntryView treeBidiMap_InverseEntryView0 = treeBidiMap0.new InverseEntryView();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertEquals(0, treeBidiMap_InverseEntryView0.size());
      assertNotNull(treeBidiMap_InverseEntryView0);
      
      boolean boolean0 = treeBidiMap_InverseEntryView0.remove(treeBidiMap_Node0);
      assertFalse(boolean0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertEquals(0, treeBidiMap_InverseEntryView0.size());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.InverseEntryView treeBidiMap_InverseEntryView0 = treeBidiMap0.new InverseEntryView();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertEquals(0, treeBidiMap_InverseEntryView0.size());
      assertNotNull(treeBidiMap_InverseEntryView0);
      
      boolean boolean0 = treeBidiMap_InverseEntryView0.remove((Object) null);
      assertFalse(boolean0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertEquals(0, treeBidiMap_InverseEntryView0.size());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer(24);
      assertEquals(24, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = hashMap0.put(integer0, integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer1);
      
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.EntryView treeBidiMap_EntryView0 = treeBidiMap0.new EntryView();
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap_EntryView0.size());
      assertNotNull(treeBidiMap_EntryView0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>(treeBidiMap_EntryView0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap_EntryView0.size());
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(24));
      assertNotNull(linkedList0);
      
      Object object0 = linkedList0.remove();
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap_EntryView0.size());
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(24));
      assertNotNull(object0);
      
      TreeBidiMap.InverseEntryView treeBidiMap_InverseEntryView0 = treeBidiMap0.new InverseEntryView();
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap_InverseEntryView0.size());
      assertNotNull(treeBidiMap_InverseEntryView0);
      
      boolean boolean0 = treeBidiMap_InverseEntryView0.remove(object0);
      assertTrue(boolean0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertEquals(0, treeBidiMap_EntryView0.size());
      assertEquals(0, linkedList0.size());
      assertEquals(0, treeBidiMap_InverseEntryView0.size());
      assertFalse(linkedList0.contains(24));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer(980);
      assertEquals(980, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(23);
      assertEquals(23, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = hashMap0.put(integer1, integer0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer2);
      
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.InverseEntryView treeBidiMap_InverseEntryView0 = treeBidiMap0.new InverseEntryView();
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertEquals(1, treeBidiMap_InverseEntryView0.size());
      assertNotNull(treeBidiMap_InverseEntryView0);
      
      TreeBidiMap.EntryView treeBidiMap_EntryView0 = treeBidiMap0.new EntryView();
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertEquals(1, treeBidiMap_EntryView0.size());
      assertNotNull(treeBidiMap_EntryView0);
      
      boolean boolean0 = treeBidiMap_EntryView0.removeAll(treeBidiMap_InverseEntryView0);
      assertFalse(boolean0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertEquals(1, treeBidiMap_InverseEntryView0.size());
      assertEquals(1, treeBidiMap_EntryView0.size());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.InverseEntryView treeBidiMap_InverseEntryView0 = treeBidiMap0.new InverseEntryView();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertEquals(0, treeBidiMap_InverseEntryView0.size());
      assertNotNull(treeBidiMap_InverseEntryView0);
      
      boolean boolean0 = treeBidiMap_InverseEntryView0.contains(treeBidiMap0);
      assertFalse(boolean0);
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertEquals(0, treeBidiMap_InverseEntryView0.size());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer(24);
      assertEquals(24, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = hashMap0.put(integer0, integer0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer1);
      
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.EntryView treeBidiMap_EntryView0 = treeBidiMap0.new EntryView();
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap_EntryView0.size());
      assertNotNull(treeBidiMap_EntryView0);
      
      TreeBidiMap.InverseEntryView treeBidiMap_InverseEntryView0 = treeBidiMap0.new InverseEntryView();
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap_InverseEntryView0.size());
      assertNotNull(treeBidiMap_InverseEntryView0);
      
      boolean boolean0 = treeBidiMap_EntryView0.removeAll(treeBidiMap_InverseEntryView0);
      assertTrue(boolean0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertEquals(0, treeBidiMap_EntryView0.size());
      assertEquals(0, treeBidiMap_InverseEntryView0.size());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer((-390));
      assertEquals((-390), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = hashMap0.put(integer0, integer0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer1);
      
      Integer integer2 = new Integer(0);
      assertEquals(0, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = hashMap0.put(integer2, integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer3);
      
      Integer integer4 = new Integer(8);
      assertEquals(8, (int)integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap<Integer, Integer> treeBidiMap1 = new TreeBidiMap<Integer, Integer>();
      assertFalse(treeBidiMap1.equals((Object)treeBidiMap0));
      assertTrue(treeBidiMap1.isEmpty());
      assertEquals(0, treeBidiMap1.size());
      assertNotNull(treeBidiMap1);
      
      Set<Map.Entry<Integer, Integer>> set0 = (Set<Map.Entry<Integer, Integer>>)treeBidiMap1.entrySet();
      assertFalse(treeBidiMap1.equals((Object)treeBidiMap0));
      assertTrue(treeBidiMap1.isEmpty());
      assertEquals(0, treeBidiMap1.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertNotSame(treeBidiMap1, treeBidiMap0);
      
      Integer integer5 = treeBidiMap1.putIfAbsent(integer0, integer4);
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer4));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(treeBidiMap1.equals((Object)treeBidiMap0));
      assertFalse(treeBidiMap1.isEmpty());
      assertEquals(1, treeBidiMap1.size());
      assertNull(integer5);
      assertNotSame(treeBidiMap1, treeBidiMap0);
      
      TreeBidiMap.EntryView treeBidiMap_EntryView0 = treeBidiMap0.new EntryView();
      assertFalse(treeBidiMap0.equals((Object)treeBidiMap1));
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(2, treeBidiMap_EntryView0.size());
      assertNotNull(treeBidiMap_EntryView0);
      
      boolean boolean0 = treeBidiMap_EntryView0.removeAll(set0);
      assertFalse(boolean0);
      assertFalse(treeBidiMap0.equals((Object)treeBidiMap1));
      assertFalse(treeBidiMap1.equals((Object)treeBidiMap0));
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertFalse(treeBidiMap1.isEmpty());
      assertEquals(1, treeBidiMap1.size());
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertEquals(2, treeBidiMap_EntryView0.size());
      assertNotSame(treeBidiMap0, treeBidiMap1);
      assertNotSame(treeBidiMap1, treeBidiMap0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.EntryView treeBidiMap_EntryView0 = treeBidiMap0.new EntryView();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap_EntryView0.size());
      assertNotNull(treeBidiMap_EntryView0);
      
      boolean boolean0 = treeBidiMap_EntryView0.remove(treeBidiMap0);
      assertFalse(boolean0);
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap_EntryView0.size());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer(24);
      assertEquals(24, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = hashMap0.put(integer0, integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer1);
      
      Integer integer2 = new Integer(988);
      assertEquals(988, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = hashMap0.put(integer2, integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNull(integer3);
      
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(2, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      Set<Map.Entry<Integer, Integer>> set0 = (Set<Map.Entry<Integer, Integer>>)treeBidiMap0.entrySet();
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(2, treeBidiMap0.size());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      TreeBidiMap.EntryView treeBidiMap_EntryView0 = treeBidiMap0.new EntryView();
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(2, treeBidiMap0.size());
      assertEquals(2, treeBidiMap_EntryView0.size());
      assertNotNull(treeBidiMap_EntryView0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>(set0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(2, treeBidiMap0.size());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(2, linkedList0.size());
      assertFalse(linkedList0.contains(988));
      assertNotNull(linkedList0);
      
      Object object0 = linkedList0.remove();
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(2, treeBidiMap0.size());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(988));
      assertNotNull(object0);
      
      boolean boolean0 = treeBidiMap_EntryView0.removeAll(linkedList0);
      assertTrue(boolean0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertEquals(1, treeBidiMap_EntryView0.size());
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(988));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer(24);
      assertEquals(24, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = hashMap0.put(integer0, integer0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer1);
      
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.EntryView treeBidiMap_EntryView0 = treeBidiMap0.new EntryView();
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap_EntryView0.size());
      assertNotNull(treeBidiMap_EntryView0);
      
      Integer integer2 = new Integer(1612);
      assertEquals(1612, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      TreeBidiMap<Integer, Integer> treeBidiMap1 = new TreeBidiMap<Integer, Integer>();
      assertFalse(treeBidiMap1.equals((Object)treeBidiMap0));
      assertTrue(treeBidiMap1.isEmpty());
      assertEquals(0, treeBidiMap1.size());
      assertNotNull(treeBidiMap1);
      
      Integer integer3 = treeBidiMap1.putIfAbsent(integer0, integer2);
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(treeBidiMap1.equals((Object)treeBidiMap0));
      assertEquals(1, treeBidiMap1.size());
      assertFalse(treeBidiMap1.isEmpty());
      assertNull(integer3);
      assertNotSame(treeBidiMap1, treeBidiMap0);
      
      TreeBidiMap.EntryView treeBidiMap_EntryView1 = treeBidiMap1.new EntryView();
      assertFalse(treeBidiMap1.equals((Object)treeBidiMap0));
      assertFalse(treeBidiMap_EntryView1.equals((Object)treeBidiMap_EntryView0));
      assertEquals(1, treeBidiMap1.size());
      assertFalse(treeBidiMap1.isEmpty());
      assertEquals(1, treeBidiMap_EntryView1.size());
      assertNotNull(treeBidiMap_EntryView1);
      
      boolean boolean0 = treeBidiMap_EntryView0.removeAll(treeBidiMap_EntryView1);
      assertFalse(boolean0);
      assertFalse(treeBidiMap0.equals((Object)treeBidiMap1));
      assertFalse(treeBidiMap_EntryView0.equals((Object)treeBidiMap_EntryView1));
      assertFalse(treeBidiMap1.equals((Object)treeBidiMap0));
      assertFalse(treeBidiMap_EntryView1.equals((Object)treeBidiMap_EntryView0));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap_EntryView0.size());
      assertEquals(1, treeBidiMap1.size());
      assertFalse(treeBidiMap1.isEmpty());
      assertEquals(1, treeBidiMap_EntryView1.size());
      assertNotSame(treeBidiMap0, treeBidiMap1);
      assertNotSame(treeBidiMap_EntryView0, treeBidiMap_EntryView1);
      assertNotSame(treeBidiMap1, treeBidiMap0);
      assertNotSame(treeBidiMap_EntryView1, treeBidiMap_EntryView0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer((-2605));
      assertEquals((-2605), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(48);
      assertEquals(48, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      Set<Map.Entry<Integer, Integer>> set0 = (Set<Map.Entry<Integer, Integer>>)treeBidiMap0.entrySet();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap_Inverse0.size());
      assertTrue(treeBidiMap_Inverse0.isEmpty());
      assertNotNull(treeBidiMap_Inverse0);
      
      Integer integer2 = treeBidiMap0.putIfAbsent(integer0, integer1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertNull(integer2);
      
      TreeBidiMap<Integer, Integer> treeBidiMap1 = new TreeBidiMap<Integer, Integer>(treeBidiMap_Inverse0);
      assertFalse(treeBidiMap1.equals((Object)treeBidiMap0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertEquals(1, treeBidiMap_Inverse0.size());
      assertFalse(treeBidiMap_Inverse0.isEmpty());
      assertFalse(treeBidiMap1.isEmpty());
      assertEquals(1, treeBidiMap1.size());
      assertNotNull(treeBidiMap1);
      
      TreeBidiMap.EntryView treeBidiMap_EntryView0 = treeBidiMap1.new EntryView();
      assertFalse(treeBidiMap0.equals((Object)treeBidiMap1));
      assertFalse(treeBidiMap1.equals((Object)treeBidiMap0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertEquals(1, treeBidiMap_Inverse0.size());
      assertFalse(treeBidiMap_Inverse0.isEmpty());
      assertFalse(treeBidiMap1.isEmpty());
      assertEquals(1, treeBidiMap1.size());
      assertEquals(1, treeBidiMap_EntryView0.size());
      assertNotNull(treeBidiMap_EntryView0);
      
      boolean boolean0 = treeBidiMap_EntryView0.removeAll(set0);
      assertFalse(boolean0);
      assertFalse(treeBidiMap0.equals((Object)treeBidiMap1));
      assertFalse(treeBidiMap1.equals((Object)treeBidiMap0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertEquals(1, treeBidiMap_Inverse0.size());
      assertFalse(treeBidiMap_Inverse0.isEmpty());
      assertFalse(treeBidiMap1.isEmpty());
      assertEquals(1, treeBidiMap1.size());
      assertEquals(1, treeBidiMap_EntryView0.size());
      assertNotSame(treeBidiMap0, treeBidiMap1);
      assertNotSame(treeBidiMap1, treeBidiMap0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer(2081);
      assertEquals(2081, (int)integer0);
      assertNotNull(integer0);
      
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.EntryView treeBidiMap_EntryView0 = treeBidiMap0.new EntryView();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertEquals(0, treeBidiMap_EntryView0.size());
      assertNotNull(treeBidiMap_EntryView0);
      
      boolean boolean0 = treeBidiMap_EntryView0.contains(integer0);
      assertFalse(boolean0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertEquals(0, treeBidiMap_EntryView0.size());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer(4);
      assertEquals(4, (int)integer0);
      assertNotNull(integer0);
      
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer1 = treeBidiMap0.merge(integer0, integer0, biFunction0);
      assertEquals(4, (int)integer1);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertNotNull(integer1);
      
      TreeBidiMap.DataElement treeBidiMap_DataElement0 = TreeBidiMap.DataElement.KEY;
      TreeBidiMap.ValueView treeBidiMap_ValueView0 = treeBidiMap0.new ValueView(treeBidiMap_DataElement0);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertEquals(1, treeBidiMap_ValueView0.size());
      assertNotNull(treeBidiMap_ValueView0);
      
      boolean boolean0 = treeBidiMap_ValueView0.remove(integer1);
      assertTrue(boolean0);
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertEquals(0, treeBidiMap_ValueView0.size());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.DataElement treeBidiMap_DataElement0 = TreeBidiMap.DataElement.KEY;
      TreeBidiMap.ValueView treeBidiMap_ValueView0 = treeBidiMap0.new ValueView(treeBidiMap_DataElement0);
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap_ValueView0.size());
      assertNotNull(treeBidiMap_ValueView0);
      
      boolean boolean0 = treeBidiMap_ValueView0.remove(treeBidiMap0);
      assertFalse(boolean0);
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap_ValueView0.size());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = treeBidiMap0.put(integer0, integer0);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertNull(integer1);
      
      TreeBidiMap.DataElement treeBidiMap_DataElement0 = TreeBidiMap.DataElement.VALUE;
      TreeBidiMap.ValueView treeBidiMap_ValueView0 = treeBidiMap0.new ValueView(treeBidiMap_DataElement0);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertEquals(1, treeBidiMap_ValueView0.size());
      assertNotNull(treeBidiMap_ValueView0);
      
      boolean boolean0 = treeBidiMap_ValueView0.contains(integer0);
      assertTrue(boolean0);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertEquals(1, treeBidiMap_ValueView0.size());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.DataElement treeBidiMap_DataElement0 = TreeBidiMap.DataElement.VALUE;
      TreeBidiMap.ValueView treeBidiMap_ValueView0 = treeBidiMap0.new ValueView(treeBidiMap_DataElement0);
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap_ValueView0.size());
      assertNotNull(treeBidiMap_ValueView0);
      
      boolean boolean0 = treeBidiMap_ValueView0.contains(treeBidiMap_DataElement0);
      assertFalse(boolean0);
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap_ValueView0.size());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = Integer.valueOf(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = hashMap0.put(integer0, integer0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer1);
      
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.DataElement treeBidiMap_DataElement0 = TreeBidiMap.DataElement.VALUE;
      TreeBidiMap.KeyView treeBidiMap_KeyView0 = treeBidiMap0.new KeyView(treeBidiMap_DataElement0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertEquals(1, treeBidiMap_KeyView0.size());
      assertNotNull(treeBidiMap_KeyView0);
      
      boolean boolean0 = treeBidiMap_KeyView0.remove(integer0);
      assertTrue(boolean0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap_KeyView0.size());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.DataElement treeBidiMap_DataElement0 = TreeBidiMap.DataElement.KEY;
      TreeBidiMap.KeyView treeBidiMap_KeyView0 = treeBidiMap0.new KeyView(treeBidiMap_DataElement0);
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertEquals(0, treeBidiMap_KeyView0.size());
      assertNotNull(treeBidiMap_KeyView0);
      
      boolean boolean0 = treeBidiMap_KeyView0.remove(treeBidiMap_DataElement0);
      assertFalse(boolean0);
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertEquals(0, treeBidiMap_KeyView0.size());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer((-434));
      assertEquals((-434), (int)integer0);
      assertNotNull(integer0);
      
      BiFunction<Integer, Object, Integer> biFunction0 = (BiFunction<Integer, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer1 = treeBidiMap0.merge(integer0, integer0, biFunction0);
      assertEquals((-434), (int)integer1);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertNotNull(integer1);
      
      TreeBidiMap.DataElement treeBidiMap_DataElement0 = TreeBidiMap.DataElement.KEY;
      TreeBidiMap.KeyView treeBidiMap_KeyView0 = treeBidiMap0.new KeyView(treeBidiMap_DataElement0);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertEquals(1, treeBidiMap_KeyView0.size());
      assertNotNull(treeBidiMap_KeyView0);
      
      boolean boolean0 = treeBidiMap_KeyView0.contains(integer1);
      assertTrue(boolean0);
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertEquals(1, treeBidiMap_KeyView0.size());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.DataElement treeBidiMap_DataElement0 = TreeBidiMap.DataElement.VALUE;
      TreeBidiMap.KeyView treeBidiMap_KeyView0 = treeBidiMap0.new KeyView(treeBidiMap_DataElement0);
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap_KeyView0.size());
      assertNotNull(treeBidiMap_KeyView0);
      
      Integer integer0 = new Integer(307);
      assertEquals(307, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = treeBidiMap_KeyView0.contains(integer0);
      assertFalse(boolean0);
      assertEquals(0, treeBidiMap0.size());
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap_KeyView0.size());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer(2081);
      assertEquals(2081, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = hashMap0.put(integer0, integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer1);
      
      Integer integer2 = new Integer((-8));
      assertEquals((-8), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = hashMap0.put(integer2, integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNull(integer3);
      
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals(2, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      String string0 = treeBidiMap0.toString();
      assertEquals("{-8=-8, 2081=2081}", string0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals(2, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = hashMap0.put(integer0, integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer1);
      
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      treeBidiMap0.hashCode();
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = Integer.valueOf(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = hashMap0.put(integer0, integer0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer1);
      
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap_Inverse0.size());
      assertFalse(treeBidiMap_Inverse0.isEmpty());
      assertNotNull(treeBidiMap_Inverse0);
      
      boolean boolean0 = treeBidiMap0.equals(treeBidiMap_Inverse0);
      assertTrue(boolean0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(1, treeBidiMap_Inverse0.size());
      assertFalse(treeBidiMap_Inverse0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      assertTrue(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      Integer integer0 = new Integer(561);
      assertEquals(561, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = treeBidiMap0.put(integer0, integer0);
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertNull(integer1);
      
      TreeBidiMap<Integer, Integer> treeBidiMap1 = new TreeBidiMap<Integer, Integer>();
      assertFalse(treeBidiMap1.equals((Object)treeBidiMap0));
      assertEquals(0, treeBidiMap1.size());
      assertTrue(treeBidiMap1.isEmpty());
      assertNotNull(treeBidiMap1);
      
      boolean boolean0 = treeBidiMap1.equals(treeBidiMap0);
      assertFalse(boolean0);
      assertFalse(treeBidiMap0.equals((Object)treeBidiMap1));
      assertFalse(treeBidiMap1.equals((Object)treeBidiMap0));
      assertEquals(1, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(0, treeBidiMap1.size());
      assertTrue(treeBidiMap1.isEmpty());
      assertNotSame(treeBidiMap0, treeBidiMap1);
      assertNotSame(treeBidiMap1, treeBidiMap0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(32);
      assertEquals(32, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = hashMap0.put(integer0, integer1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer2);
      
      Integer integer3 = Integer.valueOf(0);
      assertEquals(0, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      Integer integer4 = hashMap0.put(integer3, integer0);
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer4);
      
      Integer integer5 = new Integer(988);
      assertEquals(988, (int)integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      
      Integer integer6 = hashMap0.put(integer5, integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer6);
      
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(3, treeBidiMap_Inverse0.size());
      assertFalse(treeBidiMap_Inverse0.isEmpty());
      assertNotNull(treeBidiMap_Inverse0);
      
      Integer integer7 = new Integer(123);
      assertEquals(123, (int)integer7);
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer5));
      assertNotNull(integer7);
      
      Integer integer8 = new Integer((-4));
      assertEquals((-4), (int)integer8);
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer5));
      assertNotNull(integer8);
      
      Integer integer9 = treeBidiMap0.putIfAbsent(integer7, integer8);
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer8));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer5));
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(4, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertNull(integer9);
      
      TreeBidiMap<Integer, Integer> treeBidiMap1 = new TreeBidiMap<Integer, Integer>(treeBidiMap_Inverse0);
      assertFalse(treeBidiMap1.equals((Object)treeBidiMap0));
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(4, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertFalse(treeBidiMap_Inverse0.isEmpty());
      assertEquals(4, treeBidiMap_Inverse0.size());
      assertEquals(4, treeBidiMap1.size());
      assertFalse(treeBidiMap1.isEmpty());
      assertNotNull(treeBidiMap1);
      
      Integer integer10 = new Integer((-4));
      assertEquals((-4), (int)integer10);
      assertFalse(integer10.equals((Object)integer5));
      assertFalse(integer10.equals((Object)integer3));
      assertFalse(integer10.equals((Object)integer1));
      assertFalse(integer10.equals((Object)integer0));
      assertTrue(integer10.equals((Object)integer8));
      assertFalse(integer10.equals((Object)integer7));
      assertNotNull(integer10);
      
      Integer integer11 = treeBidiMap1.put(integer3, integer10);
      assertFalse(integer3.equals((Object)integer7));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer5));
      assertFalse(integer3.equals((Object)integer10));
      assertFalse(integer3.equals((Object)integer8));
      assertFalse(treeBidiMap0.equals((Object)treeBidiMap1));
      assertFalse(treeBidiMap1.equals((Object)treeBidiMap0));
      assertFalse(integer10.equals((Object)integer5));
      assertFalse(integer10.equals((Object)integer3));
      assertFalse(integer10.equals((Object)integer1));
      assertFalse(integer10.equals((Object)integer0));
      assertTrue(integer10.equals((Object)integer8));
      assertFalse(integer10.equals((Object)integer7));
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(4, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertFalse(treeBidiMap_Inverse0.isEmpty());
      assertEquals(4, treeBidiMap_Inverse0.size());
      assertEquals(5, treeBidiMap1.size());
      assertFalse(treeBidiMap1.isEmpty());
      assertNull(integer11);
      assertNotSame(treeBidiMap0, treeBidiMap1);
      assertNotSame(treeBidiMap1, treeBidiMap0);
      
      treeBidiMap1.putAll(treeBidiMap_Inverse0);
      assertFalse(treeBidiMap0.equals((Object)treeBidiMap1));
      assertFalse(treeBidiMap1.equals((Object)treeBidiMap0));
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(4, treeBidiMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertFalse(treeBidiMap_Inverse0.isEmpty());
      assertEquals(4, treeBidiMap_Inverse0.size());
      assertEquals(5, treeBidiMap1.size());
      assertFalse(treeBidiMap1.isEmpty());
      assertNotSame(treeBidiMap0, treeBidiMap1);
      assertNotSame(treeBidiMap1, treeBidiMap0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer(2081);
      assertEquals(2081, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = hashMap0.put(integer0, integer0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer1);
      
      Integer integer2 = new Integer((-8));
      assertEquals((-8), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = hashMap0.put(integer2, integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer3);
      
      Integer integer4 = new Integer(974);
      assertEquals(974, (int)integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      
      Integer integer5 = hashMap0.put(integer4, integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer5);
      
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(3, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      Integer integer6 = new Integer(12);
      assertEquals(12, (int)integer6);
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertNotNull(integer6);
      
      Integer integer7 = new Integer((-1));
      assertEquals((-1), (int)integer7);
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer6));
      assertNotNull(integer7);
      
      Integer integer8 = treeBidiMap0.putIfAbsent(integer6, integer7);
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer7));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer6));
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(4, treeBidiMap0.size());
      assertNull(integer8);
      
      // Undeclared exception!
      try { 
        treeBidiMap0.putAll(treeBidiMap0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer((-2605));
      assertEquals((-2605), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = hashMap0.putIfAbsent(integer0, integer0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer1);
      
      Integer integer2 = new Integer((-1));
      assertEquals((-1), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = hashMap0.put(integer2, integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNull(integer3);
      
      Integer integer4 = new Integer(48);
      assertEquals(48, (int)integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      
      Integer integer5 = hashMap0.put(integer4, integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertNull(integer5);
      
      Integer integer6 = new Integer(954);
      assertEquals(954, (int)integer6);
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer4));
      assertNotNull(integer6);
      
      Integer integer7 = hashMap0.put(integer6, integer6);
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(hashMap0.isEmpty());
      assertEquals(4, hashMap0.size());
      assertNull(integer7);
      
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(4, hashMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(4, treeBidiMap0.size());
      assertNotNull(treeBidiMap0);
      
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      assertFalse(hashMap0.isEmpty());
      assertEquals(4, hashMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(4, treeBidiMap0.size());
      assertFalse(treeBidiMap_Inverse0.isEmpty());
      assertEquals(4, treeBidiMap_Inverse0.size());
      assertNotNull(treeBidiMap_Inverse0);
      
      Integer integer8 = new Integer(123);
      assertEquals(123, (int)integer8);
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer0));
      assertNotNull(integer8);
      
      Integer integer9 = new Integer((-4));
      assertEquals((-4), (int)integer9);
      assertFalse(integer9.equals((Object)integer0));
      assertFalse(integer9.equals((Object)integer8));
      assertFalse(integer9.equals((Object)integer4));
      assertFalse(integer9.equals((Object)integer2));
      assertFalse(integer9.equals((Object)integer6));
      assertNotNull(integer9);
      
      Integer integer10 = treeBidiMap0.putIfAbsent(integer8, integer9);
      assertFalse(integer8.equals((Object)integer9));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer9.equals((Object)integer0));
      assertFalse(integer9.equals((Object)integer8));
      assertFalse(integer9.equals((Object)integer4));
      assertFalse(integer9.equals((Object)integer2));
      assertFalse(integer9.equals((Object)integer6));
      assertFalse(hashMap0.isEmpty());
      assertEquals(4, hashMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(5, treeBidiMap0.size());
      assertNull(integer10);
      
      TreeBidiMap<Integer, Integer> treeBidiMap1 = new TreeBidiMap<Integer, Integer>(treeBidiMap_Inverse0);
      assertFalse(treeBidiMap1.equals((Object)treeBidiMap0));
      assertFalse(hashMap0.isEmpty());
      assertEquals(4, hashMap0.size());
      assertFalse(treeBidiMap0.isEmpty());
      assertEquals(5, treeBidiMap0.size());
      assertFalse(treeBidiMap_Inverse0.isEmpty());
      assertEquals(5, treeBidiMap_Inverse0.size());
      assertFalse(treeBidiMap1.isEmpty());
      assertEquals(5, treeBidiMap1.size());
      assertNotNull(treeBidiMap1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer(32);
      hashMap0.put(integer0, integer1);
      hashMap0.put(integer1, integer0);
      Integer integer2 = new Integer(988);
      hashMap0.put(integer2, integer2);
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      Integer integer3 = new Integer(123);
      treeBidiMap0.putIfAbsent(integer3, integer3);
      TreeBidiMap<Integer, Integer> treeBidiMap1 = new TreeBidiMap<Integer, Integer>(treeBidiMap_Inverse0);
      Integer integer4 = new Integer(586);
      treeBidiMap1.put(integer4, integer4);
      treeBidiMap1.putAll(treeBidiMap_Inverse0);
      assertEquals(4, treeBidiMap_Inverse0.size());
      assertEquals(5, treeBidiMap1.size());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-2605));
      hashMap0.putIfAbsent(integer0, integer0);
      Integer integer1 = new Integer((-1));
      hashMap0.put(integer1, integer1);
      Integer integer2 = new Integer(48);
      hashMap0.put(integer2, integer2);
      Integer integer3 = new Integer(954);
      hashMap0.put(integer3, integer3);
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      Set<Map.Entry<Integer, Integer>> set0 = (Set<Map.Entry<Integer, Integer>>)treeBidiMap0.entrySet();
      TreeBidiMap.EntryView treeBidiMap_EntryView0 = treeBidiMap0.new EntryView();
      boolean boolean0 = treeBidiMap_EntryView0.removeAll(set0);
      assertEquals(0, treeBidiMap_EntryView0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      treeBidiMap0.inverseBidiMap();
      OrderedBidiMap<Integer, Integer> orderedBidiMap0 = treeBidiMap0.inverseBidiMap();
      assertEquals(0, orderedBidiMap0.size());
      assertNotNull(orderedBidiMap0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      treeBidiMap0.mapIterator();
      assertTrue(treeBidiMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(988);
      hashMap0.put(integer0, integer0);
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      OrderedMapIterator<Integer, Integer> orderedMapIterator0 = treeBidiMap0.mapIterator();
      assertTrue(orderedMapIterator0.hasNext());
      assertEquals(1, treeBidiMap0.size());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      treeBidiMap0.values();
      Set<Integer> set0 = treeBidiMap0.values();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-1));
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      treeBidiMap0.previousKey(integer0);
      assertTrue(treeBidiMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(980);
      hashMap0.put(integer0, integer0);
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      Integer integer1 = new Integer((-1));
      treeBidiMap_Inverse0.put(integer1, integer1);
      Integer integer2 = treeBidiMap0.lastKey();
      treeBidiMap0.previousKey(integer2);
      assertEquals(2, treeBidiMap0.size());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      Integer integer0 = new Integer((-708));
      treeBidiMap0.nextKey(integer0);
      assertTrue(treeBidiMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(980);
      hashMap0.put(integer0, integer0);
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      Integer integer1 = new Integer(139);
      treeBidiMap_Inverse0.put(integer1, integer1);
      treeBidiMap0.nextKey(integer1);
      assertEquals(2, treeBidiMap0.size());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        treeBidiMap0.lastKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Map is empty
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        treeBidiMap0.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Map is empty
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(4);
      treeBidiMap0.putIfAbsent(integer0, integer0);
      treeBidiMap0.firstKey();
      assertEquals(1, treeBidiMap0.size());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      Integer integer0 = new Integer((-524));
      treeBidiMap0.put(integer0, integer0);
      boolean boolean0 = treeBidiMap0.containsValue(integer0);
      assertEquals(1, treeBidiMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      boolean boolean0 = treeBidiMap0.containsValue("{}");
      assertFalse(boolean0);
      assertEquals(0, treeBidiMap0.size());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-2605));
      hashMap0.put(integer0, integer0);
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      boolean boolean0 = treeBidiMap_Inverse0.containsValue(integer0);
      assertEquals(1, treeBidiMap_Inverse0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = Integer.valueOf(0);
      hashMap0.put(integer0, integer0);
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      boolean boolean0 = treeBidiMap0.isEmpty();
      assertFalse(boolean0);
      assertEquals(1, treeBidiMap0.size());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      TreeBidiMap.ViewMapEntryIterator treeBidiMap_ViewMapEntryIterator0 = treeBidiMap0.new ViewMapEntryIterator();
      // Undeclared exception!
      try { 
        treeBidiMap_ViewMapEntryIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      TreeBidiMap.InverseViewMapEntryIterator treeBidiMap_InverseViewMapEntryIterator0 = treeBidiMap0.new InverseViewMapEntryIterator();
      // Undeclared exception!
      try { 
        treeBidiMap_InverseViewMapEntryIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      TreeBidiMap.EntryView treeBidiMap_EntryView0 = treeBidiMap0.new EntryView();
      treeBidiMap_EntryView0.clear();
      assertEquals(0, treeBidiMap_EntryView0.size());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TreeBidiMap.Node<Integer, Integer> treeBidiMap_Node0 = new TreeBidiMap.Node<Integer, Integer>((Integer) null, (Integer) null);
      try { 
        treeBidiMap_Node0.setValue((Integer) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Map.Entry.setValue is not supported
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap$Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      treeBidiMap_Inverse0.mapIterator();
      assertTrue(treeBidiMap_Inverse0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      boolean boolean0 = treeBidiMap0.equals(treeBidiMap_Inverse0);
      assertTrue(boolean0);
      assertEquals(0, treeBidiMap_Inverse0.size());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      OrderedBidiMap<Integer, Integer> orderedBidiMap0 = treeBidiMap_Inverse0.inverseBidiMap();
      assertTrue(orderedBidiMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      String string0 = treeBidiMap_Inverse0.toString();
      assertEquals("{}", string0);
      assertTrue(treeBidiMap_Inverse0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      treeBidiMap_Inverse0.removeValue(treeBidiMap0);
      assertEquals(0, treeBidiMap_Inverse0.size());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      // Undeclared exception!
      try { 
        treeBidiMap_Inverse0.getKey(treeBidiMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // key must be Comparable
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      boolean boolean0 = treeBidiMap_Inverse0.equals(treeBidiMap0);
      assertEquals(0, treeBidiMap_Inverse0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      TreeBidiMap.InverseEntryView treeBidiMap_InverseEntryView0 = treeBidiMap0.new InverseEntryView();
      Set<Integer> set0 = treeBidiMap0.keySet();
      assertNotNull(set0);
      
      treeBidiMap_InverseEntryView0.containsAll(set0);
      assertTrue(set0.isEmpty());
      assertTrue(treeBidiMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      treeBidiMap0.keySet();
      Set<Integer> set0 = treeBidiMap0.keySet();
      assertNotNull(set0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-1));
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      boolean boolean0 = treeBidiMap0.equals(integer0);
      assertFalse(boolean0);
      assertTrue(treeBidiMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer(32);
      hashMap0.put(integer0, integer1);
      Integer integer2 = Integer.valueOf(0);
      hashMap0.put(integer2, integer0);
      Integer integer3 = new Integer(988);
      hashMap0.put(integer3, integer3);
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      Integer integer4 = new Integer(123);
      treeBidiMap0.putIfAbsent(integer4, integer2);
      TreeBidiMap<Integer, Integer> treeBidiMap1 = new TreeBidiMap<Integer, Integer>(treeBidiMap_Inverse0);
      treeBidiMap1.putAll(treeBidiMap_Inverse0);
      assertEquals(4, treeBidiMap_Inverse0.size());
      assertEquals(4, treeBidiMap1.size());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(3837);
      treeBidiMap0.remove((Object) integer0);
      assertTrue(treeBidiMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(hashMap0);
      treeBidiMap0.hashCode();
      assertEquals(0, treeBidiMap0.size());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      treeBidiMap_Inverse0.remove((Object) treeBidiMap0);
      assertTrue(treeBidiMap_Inverse0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      treeBidiMap_Inverse0.clear();
      assertTrue(treeBidiMap_Inverse0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      TreeBidiMap.DataElement treeBidiMap_DataElement0 = TreeBidiMap.DataElement.KEY;
      TreeBidiMap.InverseViewMapIterator treeBidiMap_InverseViewMapIterator0 = treeBidiMap0.new InverseViewMapIterator(treeBidiMap_DataElement0);
      // Undeclared exception!
      try { 
        treeBidiMap_InverseViewMapIterator0.setValue((Integer) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      TreeBidiMap.DataElement treeBidiMap_DataElement0 = TreeBidiMap.DataElement.VALUE;
      TreeBidiMap.InverseViewMapIterator treeBidiMap_InverseViewMapIterator0 = treeBidiMap0.new InverseViewMapIterator(treeBidiMap_DataElement0);
      // Undeclared exception!
      try { 
        treeBidiMap_InverseViewMapIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(1584);
      TreeBidiMap.DataElement treeBidiMap_DataElement0 = TreeBidiMap.DataElement.VALUE;
      TreeBidiMap.ViewMapIterator treeBidiMap_ViewMapIterator0 = treeBidiMap0.new ViewMapIterator(treeBidiMap_DataElement0);
      // Undeclared exception!
      try { 
        treeBidiMap_ViewMapIterator0.setValue(integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapIterator", e);
      }
  }
}
