/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 17:13:57 GMT 2025
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.time.DayOfWeek;
import java.time.Duration;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.MinguoEra;
import java.time.chrono.ThaiBuddhistEra;
import java.time.format.FormatStyle;
import java.time.format.ResolverStyle;
import java.time.temporal.ChronoField;
import java.time.temporal.ChronoUnit;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ClosureTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.list.FixedSizeList;
import org.apache.commons.collections4.queue.CircularFifoQueue;
import org.apache.commons.io.IOCase;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CollectionUtils_ESTest extends CollectionUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Collection<Integer> collection0 = CollectionUtils.subtract((Iterable<? extends Integer>) arrayList0, (Iterable<? extends Integer>) arrayList0);
      Collection<Integer> collection1 = CollectionUtils.removeAll(collection0, (Collection<?>) arrayList0);
      assertTrue(collection1.equals((Object)collection0));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Integer integer0 = new Integer(0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      treeSet0.add(integer0);
      CollectionUtils.removeRange((Collection<Object>) treeSet0, 0, 0);
      assertTrue(treeSet0.contains(0));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>(90);
      List<Integer> list0 = CollectionUtils.collate((Iterable<? extends Integer>) arrayDeque0, (Iterable<? extends Integer>) arrayDeque0);
      // Undeclared exception!
      try { 
        CollectionUtils.removeCount((Collection<Integer>) list0, 9, 162);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The sum of start index and count can't be greater than the size of collection.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>(598, 598);
      // Undeclared exception!
      try { 
        CollectionUtils.removeRange((Collection<Integer>) hashSet0, (-1), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The start index can't be less than 0.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<ChronoField> linkedList0 = new LinkedList<ChronoField>();
      HashSet<ChronoField> hashSet0 = new HashSet<ChronoField>(linkedList0);
      List<ChronoField> list0 = CollectionUtils.collate((Iterable<? extends ChronoField>) hashSet0, (Iterable<? extends ChronoField>) linkedList0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      CollectionUtils.reverseArray(objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer((-2822));
      arrayList0.add(integer0);
      Integer integer1 = new Integer((-1406));
      Predicate<Integer> predicate0 = IdentityPredicate.identityPredicate(integer1);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = CollectionUtils.select((Iterable<? extends Integer>) arrayList0, (Predicate<? super Integer>) predicate0, linkedList0, linkedList1);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertSame(linkedList0, linkedList2);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      Integer integer0 = new Integer(0);
      hashSet0.add(integer0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      Predicate<Integer> predicate0 = ComparatorPredicate.comparatorPredicate(integer0, comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = CollectionUtils.select((Iterable<? extends Integer>) hashSet0, (Predicate<? super Integer>) predicate0, linkedList0, linkedList1);
      assertTrue(linkedList2.contains(0));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      DefaultEquator<Integer> defaultEquator0 = DefaultEquator.defaultEquator();
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<? extends Integer>) arrayList1, (Collection<? extends Integer>) arrayList0, (Equator<? super Integer>) defaultEquator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Integer integer0 = new Integer(92);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Collection<Integer> collection0 = CollectionUtils.select((Iterable<? extends Integer>) linkedHashSet0, (Predicate<? super Integer>) predicate0);
      linkedHashSet0.add(integer0);
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<?>) collection0, (Collection<?>) linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      DayOfWeek dayOfWeek0 = DayOfWeek.SUNDAY;
      HashSet<DayOfWeek> hashSet0 = new HashSet<DayOfWeek>();
      hashSet0.add(dayOfWeek0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Object> list0 = CollectionUtils.collate((Iterable<?>) stack0, (Iterable<?>) hashSet0, (Comparator<? super Object>) comparator0, false);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      boolean boolean0 = CollectionUtils.isProperSubCollection(list0, linkedList0);
      assertFalse(boolean0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<DayOfWeek> class0 = DayOfWeek.class;
      EnumSet<DayOfWeek> enumSet0 = EnumSet.allOf(class0);
      List<DayOfWeek> list0 = CollectionUtils.collate((Iterable<? extends DayOfWeek>) enumSet0, (Iterable<? extends DayOfWeek>) enumSet0, true);
      boolean boolean0 = CollectionUtils.isSubCollection(enumSet0, list0);
      assertEquals(14, list0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashSet<DayOfWeek> hashSet0 = new HashSet<DayOfWeek>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer(26);
      arrayList0.add(integer0);
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) arrayList0, (Collection<?>) hashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<DayOfWeek> class0 = DayOfWeek.class;
      EnumSet<DayOfWeek> enumSet0 = EnumSet.allOf(class0);
      ArrayList<MinguoEra>[] arrayListArray0 = (ArrayList<MinguoEra>[]) Array.newInstance(ArrayList.class, 2);
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) enumSet0, arrayListArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Predicate<Integer> predicate0 = FalsePredicate.falsePredicate();
      Collection<Integer> collection0 = CollectionUtils.selectRejected((Iterable<? extends Integer>) arrayList0, (Predicate<? super Integer>) predicate0);
      Collection<Integer> collection1 = CollectionUtils.subtract((Iterable<? extends Integer>) collection0, (Iterable<? extends Integer>) arrayList0);
      assertTrue(collection1.equals((Object)collection0));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Integer integer0 = new Integer(1468);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      arrayList0.add(integer0);
      HashSet<Integer> hashSet0 = new HashSet<Integer>(arrayList0);
      Collection<Integer> collection0 = CollectionUtils.disjunction((Iterable<? extends Integer>) hashSet0, (Iterable<? extends Integer>) hashSet0);
      assertFalse(collection0.contains(1468));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LinkedHashSet<DayOfWeek> linkedHashSet0 = new LinkedHashSet<DayOfWeek>();
      // Undeclared exception!
      try { 
        CollectionUtils.intersection((Iterable<?>) linkedHashSet0, (Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(3, 3);
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Collection<Integer> collection0 = CollectionUtils.union((Iterable<? extends Integer>) linkedHashSet0, (Iterable<? extends Integer>) treeSet0);
      assertFalse(collection0.contains(3));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>(0);
      Integer integer0 = new Integer(0);
      hashSet0.add(integer0);
      Integer integer1 = CollectionUtils.get((Iterable<Integer>) hashSet0, 0);
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CollectionUtils.checkIndexBounds(1307);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 2);
      InvokerTransformer<Integer, Integer> invokerTransformer0 = new InvokerTransformer<Integer, Integer>("a#Eh3'(A-=oj", classArray0, classArray0);
      Collection<Integer> collection0 = CollectionUtils.transformingCollection((Collection<Integer>) arrayList0, (Transformer<? super Integer, ? extends Integer>) invokerTransformer0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Collection<Collection<Integer>> collection0 = CollectionUtils.emptyIfNull((Collection<Collection<Integer>>) null);
      Collection<Collection<Integer>> collection1 = CollectionUtils.synchronizedCollection(collection0);
      assertTrue(collection1.equals((Object)collection0));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Collection<List<Object>> collection0 = CollectionUtils.permutations((Collection<Object>) treeSet0);
      int int0 = CollectionUtils.size(collection0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) defaultEquator0.HASHCODE_NULL, comparator0);
      LinkedList<Object> linkedList0 = CollectionUtils.selectRejected((Iterable<?>) linkedHashSet0, (Predicate<? super Object>) predicate0, (LinkedList<Object>) null);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0);
      Map<Object, Integer> map0 = CollectionUtils.getCardinalityMap((Iterable<?>) serviceLoader0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      DayOfWeek dayOfWeek0 = DayOfWeek.THURSDAY;
      treeSet0.add(dayOfWeek0);
      Object object0 = CollectionUtils.get((Object) treeSet0, 0);
      assertEquals(DayOfWeek.THURSDAY, object0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<DayOfWeek> class0 = DayOfWeek.class;
      EnumSet<DayOfWeek> enumSet0 = EnumSet.allOf(class0);
      Iterator<DayOfWeek> iterator0 = enumSet0.iterator();
      ForClosure<DayOfWeek> forClosure0 = new ForClosure<DayOfWeek>((-2250), (Closure<? super DayOfWeek>) null);
      DayOfWeek dayOfWeek0 = CollectionUtils.forAllButLastDo(iterator0, forClosure0);
      assertEquals(DayOfWeek.SUNDAY, dayOfWeek0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      hashSet0.add(defaultEquator0);
      DefaultEquator defaultEquator1 = (DefaultEquator)CollectionUtils.extractSingleton((Collection<Object>) hashSet0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DayOfWeek dayOfWeek0 = DayOfWeek.FRIDAY;
      EnumSet<DayOfWeek> enumSet0 = EnumSet.range(dayOfWeek0, dayOfWeek0);
      EqualPredicate<DayOfWeek> equalPredicate0 = new EqualPredicate<DayOfWeek>(dayOfWeek0);
      int int0 = CollectionUtils.countMatches((Iterable<DayOfWeek>) enumSet0, (Predicate<? super DayOfWeek>) equalPredicate0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      List<Integer> list0 = CollectionUtils.collate((Iterable<? extends Integer>) treeSet0, (Iterable<? extends Integer>) treeSet0, false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer(1794);
      linkedHashSet0.add(integer0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      List<Integer> list0 = CollectionUtils.collate((Iterable<? extends Integer>) linkedHashSet0, (Iterable<? extends Integer>) linkedHashSet0, (Comparator<? super Integer>) comparator0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ArrayList<Duration> arrayList0 = new ArrayList<Duration>();
      ChronoUnit chronoUnit0 = ChronoUnit.DAYS;
      Duration duration0 = Duration.of(3543L, chronoUnit0);
      arrayList0.add(duration0);
      List<Duration> list0 = CollectionUtils.collate((Iterable<? extends Duration>) arrayList0, (Iterable<? extends Duration>) arrayList0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      LinkedHashSet<Locale.FilteringMode> linkedHashSet0 = new LinkedHashSet<Locale.FilteringMode>();
      linkedHashSet0.add(locale_FilteringMode0);
      int int0 = CollectionUtils.cardinality(locale_FilteringMode0, (Iterable<? super Locale.FilteringMode>) linkedHashSet0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = CollectionUtils.addAll((Collection<Integer>) vector0, integerArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ArrayDeque<MinguoEra> arrayDeque0 = new ArrayDeque<MinguoEra>(93);
      Class<MinguoEra> class0 = MinguoEra.class;
      EnumSet<MinguoEra> enumSet0 = EnumSet.allOf(class0);
      Iterator<MinguoEra> iterator0 = enumSet0.iterator();
      boolean boolean0 = CollectionUtils.addAll((Collection<MinguoEra>) arrayDeque0, (Iterator<? extends MinguoEra>) iterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TreeSet<MinguoEra> treeSet0 = new TreeSet<MinguoEra>();
      MinguoEra minguoEra0 = MinguoEra.ROC;
      Enumeration<MinguoEra> enumeration0 = (Enumeration<MinguoEra>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(enumeration0).hasMoreElements();
      doReturn(minguoEra0).when(enumeration0).nextElement();
      boolean boolean0 = CollectionUtils.addAll((Collection<MinguoEra>) treeSet0, (Enumeration<? extends MinguoEra>) enumeration0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>(0);
      Integer integer0 = new Integer(0);
      hashSet0.add(integer0);
      Predicate<Integer> predicate0 = IdentityPredicate.identityPredicate(integer0);
      OrPredicate<Integer> orPredicate0 = new OrPredicate<Integer>(predicate0, predicate0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CollectionUtils.select((Iterable<? extends Integer>) hashSet0, (Predicate<? super Integer>) orPredicate0, linkedList0, linkedList0);
      boolean boolean0 = CollectionUtils.addAll((Collection<Integer>) linkedList0, (Iterable<? extends Integer>) linkedList0);
      assertTrue(linkedList0.contains(0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      boolean boolean0 = CollectionUtils.addAll((Collection<Integer>) hashSet0, (Iterable<? extends Integer>) hashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.unmodifiableCollection((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.union((Iterable<? extends Locale.FilteringMode>) null, (Iterable<? extends Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Closure<Integer> closure0 = ExceptionClosure.exceptionClosure();
      Integer integer0 = new Integer(2421);
      stack0.add(integer0);
      Transformer<Integer, Integer> transformer0 = ClosureTransformer.closureTransformer((Closure<? super Integer>) closure0);
      // Undeclared exception!
      try { 
        CollectionUtils.transform((Collection<Integer>) stack0, (Transformer<? super Integer, ? extends Integer>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Predicate<DayOfWeek> predicate0 = FalsePredicate.falsePredicate();
      // Undeclared exception!
      try { 
        CollectionUtils.subtract((Iterable<? extends DayOfWeek>) null, (Iterable<? extends DayOfWeek>) null, predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      List<Integer> list0 = CollectionUtils.collate((Iterable<? extends Integer>) priorityQueue0, (Iterable<? extends Integer>) priorityQueue0);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>(list0);
      Predicate<Integer> predicate0 = ExceptionPredicate.exceptionPredicate();
      arrayDeque0.add((Integer) (-1));
      // Undeclared exception!
      try { 
        CollectionUtils.selectRejected((Iterable<? extends Integer>) arrayDeque0, (Predicate<? super Integer>) predicate0, (Collection<Integer>) arrayDeque0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Integer integer0 = new Integer(2502);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add(integer0);
      Predicate<Integer>[] predicateArray0 = (Predicate<Integer>[]) Array.newInstance(Predicate.class, 4);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate<Integer> comparatorPredicate0 = new ComparatorPredicate<Integer>(integer0, (Comparator<Integer>) null, comparatorPredicate_Criterion0);
      predicateArray0[1] = (Predicate<Integer>) comparatorPredicate0;
      // Undeclared exception!
      try { 
        CollectionUtils.selectRejected((Iterable<? extends Integer>) linkedHashSet0, (Predicate<? super Integer>) predicateArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.ComparatorPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      Integer integer0 = new Integer(0);
      hashSet0.add(integer0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      // Undeclared exception!
      try { 
        CollectionUtils.select((Iterable<? extends Integer>) hashSet0, (Predicate<? super Integer>) transformerPredicate0, linkedList0, linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>(0);
      Integer integer0 = new Integer(0);
      hashSet0.add(integer0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>((Predicate<? super Object>[]) null);
      // Undeclared exception!
      try { 
        CollectionUtils.select((Iterable<?>) hashSet0, (Predicate<? super Object>) allPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.AllPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.reverseArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Stack<MinguoEra> stack0 = new Stack<MinguoEra>();
      // Undeclared exception!
      try { 
        CollectionUtils.retainAll((Collection<ThaiBuddhistEra>) null, (Collection<?>) stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      // Undeclared exception!
      try { 
        CollectionUtils.retainAll((Iterable<Vector<Object>>) null, (Iterable<? extends Vector<Object>>) null, (Equator<? super Vector<Object>>) defaultEquator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.removeAll((Collection<ArrayList<DayOfWeek>>) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ListUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LinkedHashSet<DayOfWeek> linkedHashSet0 = new LinkedHashSet<DayOfWeek>();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      // Undeclared exception!
      try { 
        CollectionUtils.removeAll((Iterable<Object>) null, (Iterable<?>) linkedHashSet0, (Equator<? super Object>) defaultEquator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Integer integer0 = new Integer(4937);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add(integer0);
      Integer integer1 = new Integer((-299));
      Predicate<Integer> predicate0 = EqualPredicate.equalPredicate(integer1);
      // Undeclared exception!
      try { 
        CollectionUtils.predicatedCollection((Collection<Integer>) linkedList0, (Predicate<? super Integer>) predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object '4937' - Predicate 'org.apache.commons.collections4.functors.EqualPredicate@1' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.permutations((Collection<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.maxSize((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>(0);
      Integer integer0 = new Integer(0);
      hashSet0.add(integer0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      // Undeclared exception!
      try { 
        CollectionUtils.matchesAll((Iterable<Integer>) hashSet0, (Predicate<? super Integer>) allPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.AllPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.isSubCollection((Collection<?>) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.isFull((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DefaultEquator<Integer> defaultEquator0 = DefaultEquator.defaultEquator();
      // Undeclared exception!
      try { 
        CollectionUtils.isEqualCollection((Collection<? extends Integer>) null, (Collection<? extends Integer>) null, (Equator<? super Integer>) defaultEquator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LinkedHashSet<DayOfWeek> linkedHashSet0 = new LinkedHashSet<DayOfWeek>();
      // Undeclared exception!
      try { 
        CollectionUtils.isEqualCollection((Collection<?>) linkedHashSet0, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.getCardinalityMap((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.get((Iterator<Transformer<Object, Boolean>>) null, 512);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) linkedList0, 2689);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2689, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) vector0, 1000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1000
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        CollectionUtils.get((Iterable<Object>) arrayList0, 4937);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4937, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<DayOfWeek> class0 = DayOfWeek.class;
      EnumSet<DayOfWeek> enumSet0 = EnumSet.allOf(class0);
      UniquePredicate<DayOfWeek> uniquePredicate0 = new UniquePredicate<DayOfWeek>();
      TransformerClosure<DayOfWeek> transformerClosure0 = new TransformerClosure<DayOfWeek>((Transformer<? super DayOfWeek, ?>) null);
      ForClosure<DayOfWeek> forClosure0 = new ForClosure<DayOfWeek>(201, transformerClosure0);
      IfClosure<DayOfWeek> ifClosure0 = new IfClosure<DayOfWeek>(uniquePredicate0, forClosure0, forClosure0);
      // Undeclared exception!
      try { 
        CollectionUtils.forAllButLastDo((Iterable<DayOfWeek>) enumSet0, ifClosure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.TransformerClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Collection<Integer> collection0 = CollectionUtils.emptyCollection();
      Collection<Integer> collection1 = CollectionUtils.intersection((Iterable<? extends Integer>) collection0, (Iterable<? extends Integer>) collection0);
      Integer[] integerArray0 = new Integer[4];
      CollectionUtils.addAll(collection1, integerArray0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>((Predicate<? super Object>[]) null);
      // Undeclared exception!
      try { 
        CollectionUtils.filter((Iterable<Integer>) collection1, (Predicate<? super Integer>) onePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.OnePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.extractSingleton((Collection<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.disjunction((Iterable<? extends ArrayList<MinguoEra>>) null, (Iterable<? extends ArrayList<MinguoEra>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PriorityQueue<ChronoLocalDate> priorityQueue0 = new PriorityQueue<ChronoLocalDate>();
      // Undeclared exception!
      try { 
        CollectionUtils.containsAny((Collection<?>) priorityQueue0, (Comparable<Integer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.containsAny((Collection<?>) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.containsAll((Collection<?>) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer((-828));
      Factory<Integer> factory0 = ConstantFactory.constantFactory(integer0);
      Transformer<Object, Integer> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Integer>) factory0);
      Collection<Object> collection0 = CollectionUtils.unmodifiableCollection((Collection<?>) arrayList0);
      DayOfWeek dayOfWeek0 = DayOfWeek.WEDNESDAY;
      EnumSet<DayOfWeek> enumSet0 = EnumSet.of(dayOfWeek0, dayOfWeek0, dayOfWeek0);
      // Undeclared exception!
      try { 
        CollectionUtils.collect((Iterable<? extends DayOfWeek>) enumSet0, (Transformer<? super DayOfWeek, ? extends Comparable<Integer>>) transformer0, collection0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer0 = new Integer(116);
      vector0.add(integer0);
      Transformer<Integer, ArrayList<Integer>> transformer0 = InvokerTransformer.invokerTransformer("1Q%3{");
      // Undeclared exception!
      try { 
        CollectionUtils.collect((Iterable<Integer>) vector0, (Transformer<? super Integer, ? extends ArrayList<Integer>>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '1Q%3{' on 'class java.lang.Integer' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.collate((Iterable<? extends DayOfWeek>) null, (Iterable<? extends DayOfWeek>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterableA
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      // Undeclared exception!
      try { 
        CollectionUtils.collate((Iterable<?>) vector0, (Iterable<?>) linkedHashSet0, (Comparator<? super Object>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // comparator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Vector<DayOfWeek> vector0 = new Vector<DayOfWeek>();
      // Undeclared exception!
      try { 
        CollectionUtils.collate((Iterable<? extends DayOfWeek>) vector0, (Iterable<? extends DayOfWeek>) vector0, (Comparator<? super DayOfWeek>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // comparator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.collate((Iterable<? extends DayOfWeek>) null, (Iterable<? extends DayOfWeek>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterableA
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.checkIndexBounds((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -1
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>(0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Integer> list0 = CollectionUtils.collate((Iterable<? extends Integer>) arrayDeque0, (Iterable<? extends Integer>) arrayDeque0, (Comparator<? super Integer>) comparator0);
      FixedSizeList<Integer> fixedSizeList0 = FixedSizeList.fixedSizeList(list0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        CollectionUtils.addIgnoreNull((Collection<Integer>) fixedSizeList0, integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // List is fixed size
         //
         verifyException("org.apache.commons.collections4.list.FixedSizeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      FixedSizeList<Integer> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Integer>) linkedList0);
      Integer[] integerArray0 = new Integer[2];
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<Integer>) fixedSizeList0, integerArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // List is fixed size
         //
         verifyException("org.apache.commons.collections4.list.FixedSizeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<Integer>) null, integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Stack<Collection<MinguoEra>> stack0 = new Stack<Collection<MinguoEra>>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(treeSet0, comparator0, comparatorPredicate_Criterion0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(comparatorPredicate0, comparatorPredicate0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(andPredicate0);
      Collection<Collection<MinguoEra>> collection0 = CollectionUtils.predicatedCollection((Collection<Collection<MinguoEra>>) stack0, (Predicate<? super Collection<MinguoEra>>) nullIsFalsePredicate0);
      Collection<MinguoEra>[] collectionArray0 = (Collection<MinguoEra>[]) Array.newInstance(Collection.class, 8);
      // Undeclared exception!
      try { 
        CollectionUtils.addAll(collection0, collectionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'null' - Predicate 'org.apache.commons.collections4.functors.NullIsFalsePredicate@3' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ArrayList<MinguoEra> arrayList0 = new ArrayList<MinguoEra>();
      MinguoEra minguoEra0 = MinguoEra.BEFORE_ROC;
      arrayList0.add(minguoEra0);
      ListIterator<MinguoEra> listIterator0 = arrayList0.listIterator();
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<MinguoEra>) null, (Iterator<? extends MinguoEra>) listIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Stack<MinguoEra> stack0 = new Stack<MinguoEra>();
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<MinguoEra>) stack0, (Enumeration<? extends MinguoEra>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LinkedHashSet<Boolean> linkedHashSet0 = new LinkedHashSet<Boolean>(0);
      Collection<Boolean> collection0 = CollectionUtils.removeCount((Collection<Boolean>) linkedHashSet0, 0, 0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>();
      // Undeclared exception!
      try { 
        CollectionUtils.removeCount((Collection<Object>) hashSet0, (-1), (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The start index can't be less than 0.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Object> list0 = CollectionUtils.collate((Iterable<?>) serviceLoader0, (Iterable<?>) serviceLoader0, (Comparator<? super Object>) comparator0, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Object> list0 = CollectionUtils.collate((Iterable<?>) treeSet0, (Iterable<?>) serviceLoader0, (Comparator<? super Object>) comparator0, false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean0 = CollectionUtils.isEmpty(linkedHashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(667);
      linkedList0.add(integer0);
      boolean boolean0 = CollectionUtils.isEmpty(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>(0);
      Comparator<Comparable<Integer>> comparator0 = (Comparator<Comparable<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<Comparable<Integer>> comparatorPredicate0 = new ComparatorPredicate<Comparable<Integer>>((Comparable<Integer>) null, comparator0, comparatorPredicate_Criterion0);
      NotPredicate<Comparable<Integer>> notPredicate0 = new NotPredicate<Comparable<Integer>>(comparatorPredicate0);
      Collection<Comparable<Integer>> collection0 = CollectionUtils.subtract((Iterable<? extends Comparable<Integer>>) arrayDeque0, (Iterable<? extends Comparable<Integer>>) arrayDeque0, (Predicate<Comparable<Integer>>) notPredicate0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Iterator<Integer> iterator0 = arrayList0.iterator();
      boolean boolean0 = CollectionUtils.addAll(collection0, (Iterator<? extends Comparable<Integer>>) iterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      FixedSizeList<Integer> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Integer>) arrayList0);
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<Integer>) fixedSizeList0, (Iterable<? extends Integer>) fixedSizeList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // List is fixed size
         //
         verifyException("org.apache.commons.collections4.list.FixedSizeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<Integer>) null, (Iterable<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = Integer.getInteger("2cSxNMty4[>{br-", 47);
      linkedList0.add(integer0);
      Iterator<Integer> iterator0 = linkedList0.descendingIterator();
      Transformer<Integer, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        CollectionUtils.collect((Iterator<? extends Integer>) iterator0, (Transformer<? super Integer, ? extends Integer>) transformer0, linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedList0.descendingIterator();
      Transformer<Integer, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      LinkedList<Integer> linkedList1 = CollectionUtils.collect((Iterator<? extends Integer>) iterator0, (Transformer<? super Integer, ? extends Integer>) transformer0, linkedList0);
      assertSame(linkedList0, linkedList1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<DayOfWeek> class0 = DayOfWeek.class;
      EnumSet<DayOfWeek> enumSet0 = EnumSet.allOf(class0);
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        CollectionUtils.collect((Iterable<?>) enumSet0, (Transformer<? super Object, ? extends Integer>) transformer0, (Collection<Integer>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      Integer integer0 = new Integer(10);
      Factory<Integer> factory0 = ConstantFactory.constantFactory(integer0);
      Transformer<Object, Integer> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Integer>) factory0);
      Collection<Object> collection0 = CollectionUtils.unmodifiableCollection((Collection<?>) hashSet0);
      Collection<Object> collection1 = CollectionUtils.collect((Iterable<? extends DayOfWeek>) null, (Transformer<? super DayOfWeek, ? extends Comparable<Integer>>) transformer0, collection0);
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>(0);
      Integer integer0 = new Integer(0);
      hashSet0.add(integer0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      allPredicate0.evaluate(integer0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      CollectionUtils.selectRejected((Iterable<? extends Integer>) hashSet0, (Predicate<? super Integer>) predicate0, linkedList0);
      assertTrue(linkedList0.contains(0));
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>(0);
      Integer integer0 = new Integer(0);
      hashSet0.add(integer0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(integer0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = CollectionUtils.selectRejected((Iterable<? extends Integer>) hashSet0, (Predicate<? super Integer>) identityPredicate0, linkedList0);
      assertFalse(linkedList1.contains(0));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>(0);
      Integer integer0 = new Integer(0);
      hashSet0.add(integer0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      AnyPredicate<Integer> anyPredicate0 = new AnyPredicate<Integer>(predicateArray0);
      NullIsFalsePredicate<Integer> nullIsFalsePredicate0 = new NullIsFalsePredicate<Integer>(anyPredicate0);
      // Undeclared exception!
      try { 
        CollectionUtils.selectRejected((Iterable<? extends Integer>) hashSet0, (Predicate<? super Integer>) nullIsFalsePredicate0, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.AnyPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>(90);
      List<Integer> list0 = CollectionUtils.collate((Iterable<? extends Integer>) arrayDeque0, (Iterable<? extends Integer>) arrayDeque0);
      Collection<Integer> collection0 = CollectionUtils.selectRejected((Iterable<? extends Integer>) list0, (Predicate<? super Integer>) null, (Collection<Integer>) list0);
      assertFalse(collection0.contains(90));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      AllPredicate<Integer> allPredicate0 = new AllPredicate<Integer>(predicateArray0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = CollectionUtils.selectRejected((Iterable<? extends Integer>) null, (Predicate<? super Integer>) allPredicate0, linkedList0);
      assertEquals(0, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>(0);
      Integer integer0 = new Integer(0);
      hashSet0.add(integer0);
      Predicate<Integer> predicate0 = NotNullPredicate.notNullPredicate();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CollectionUtils.select((Iterable<? extends Integer>) hashSet0, (Predicate<? super Integer>) predicate0, linkedList0);
      assertTrue(linkedList0.contains(0));
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ArrayList<Predicate<Integer>> arrayList0 = new ArrayList<Predicate<Integer>>(10);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = CollectionUtils.select((Iterable<? extends Predicate<Integer>>) arrayList0, (Predicate<? super Predicate<Integer>>) null, linkedList0);
      assertSame(linkedList1, linkedList0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("");
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = CollectionUtils.select((Iterable<? extends ArrayList<Integer>>) null, (Predicate<? super ArrayList<Integer>>) nullIsFalsePredicate0, linkedList0);
      assertFalse(linkedList1.contains(""));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>(0);
      Integer integer0 = new Integer(0);
      hashSet0.add(integer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      List<Object> list0 = CollectionUtils.collate((Iterable<?>) hashSet0, (Iterable<?>) hashSet0, (Comparator<? super Object>) comparator0, true);
      CollectionUtils.getCardinalityMap((Iterable<?>) list0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>(0);
      Integer integer0 = new Integer(0);
      hashSet0.add(integer0);
      Comparator<Comparable<Integer>> comparator0 = (Comparator<Comparable<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-3341)).when(comparator0).compare(any(java.lang.Comparable.class) , any(java.lang.Comparable.class));
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<Comparable<Integer>> comparatorPredicate0 = new ComparatorPredicate<Comparable<Integer>>(integer0, comparator0, comparatorPredicate_Criterion0);
      NotPredicate<Comparable<Integer>> notPredicate0 = new NotPredicate<Comparable<Integer>>(comparatorPredicate0);
      Collection<Comparable<Integer>> collection0 = CollectionUtils.subtract((Iterable<? extends Comparable<Integer>>) hashSet0, (Iterable<? extends Comparable<Integer>>) hashSet0, (Predicate<Comparable<Integer>>) notPredicate0);
      assertFalse(collection0.contains(0));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ArrayList<ArrayList<Integer>> arrayList0 = new ArrayList<ArrayList<Integer>>();
      // Undeclared exception!
      try { 
        CollectionUtils.extractSingleton((Collection<ArrayList<Integer>>) arrayList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can extract singleton only when collection size == 1
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      HashSet<Object> hashSet0 = new HashSet<Object>(linkedHashSet0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      ArrayList<DayOfWeek> arrayList0 = new ArrayList<DayOfWeek>();
      hashSet0.add(arrayList0);
      Collection<Object> collection0 = CollectionUtils.removeAll((Iterable<Object>) hashSet0, (Iterable<?>) linkedHashSet0, (Equator<? super Object>) defaultEquator0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      HashSet<Object> hashSet0 = new HashSet<Object>(linkedHashSet0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      ArrayList<DayOfWeek> arrayList0 = new ArrayList<DayOfWeek>();
      hashSet0.add(arrayList0);
      Collection<Object> collection0 = CollectionUtils.removeAll((Iterable<Object>) hashSet0, (Iterable<?>) hashSet0, (Equator<? super Object>) defaultEquator0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.removeCount((Collection<DayOfWeek>) null, (-506), (-506));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The collection can't be null.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      // Undeclared exception!
      try { 
        CollectionUtils.removeRange((Collection<Object>) treeSet0, 2667, 2667);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The end index can't be greater than the size of collection.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      // Undeclared exception!
      try { 
        CollectionUtils.removeRange((Collection<Object>) treeSet0, (-23), (-1784));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end index can't be less than the start index.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.removeRange((Collection<Object>) null, 0, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The collection can't be null.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      hashSet0.add(vector0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Collection<Object> collection0 = CollectionUtils.retainAll((Iterable<Object>) hashSet0, (Iterable<?>) vector0, (Equator<? super Object>) defaultEquator0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      int int0 = CollectionUtils.maxSize(linkedHashSet0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CircularFifoQueue<DayOfWeek> circularFifoQueue0 = new CircularFifoQueue<DayOfWeek>();
      boolean boolean0 = CollectionUtils.isFull(circularFifoQueue0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      boolean boolean0 = CollectionUtils.isFull(vector0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      CollectionUtils.reverseArray(objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LinkedHashSet<DayOfWeek> linkedHashSet0 = new LinkedHashSet<DayOfWeek>();
      DayOfWeek dayOfWeek0 = DayOfWeek.SUNDAY;
      linkedHashSet0.add(dayOfWeek0);
      boolean boolean0 = CollectionUtils.isNotEmpty(linkedHashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedHashSet<DayOfWeek> linkedHashSet0 = new LinkedHashSet<DayOfWeek>();
      boolean boolean0 = CollectionUtils.isNotEmpty(linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = CollectionUtils.isNotEmpty((Collection<?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<DayOfWeek, DayOfWeek> hashMap0 = new HashMap<DayOfWeek, DayOfWeek>();
      DayOfWeek dayOfWeek0 = DayOfWeek.TUESDAY;
      hashMap0.put(dayOfWeek0, dayOfWeek0);
      boolean boolean0 = CollectionUtils.sizeIsEmpty(hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<DayOfWeek, DayOfWeek> hashMap0 = new HashMap<DayOfWeek, DayOfWeek>();
      boolean boolean0 = CollectionUtils.sizeIsEmpty(hashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0);
      boolean boolean0 = CollectionUtils.sizeIsEmpty(serviceLoader0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer[] integerArray0 = new Integer[1];
      CollectionUtils.addAll((Collection<Integer>) vector0, integerArray0);
      boolean boolean0 = CollectionUtils.sizeIsEmpty(vector0);
      assertEquals("[null]", vector0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        CollectionUtils.sizeIsEmpty(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.Integer
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = CollectionUtils.sizeIsEmpty((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ArrayList<MinguoEra> arrayList0 = new ArrayList<MinguoEra>();
      boolean boolean0 = CollectionUtils.sizeIsEmpty(arrayList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0);
      int int0 = CollectionUtils.size(serviceLoader0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = CollectionUtils.size((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Integer integer0 = new Integer((-1272));
      // Undeclared exception!
      try { 
        CollectionUtils.size(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.Integer
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) iOCase0, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: org.apache.commons.io.IOCase
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) null, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: null
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) treeSet0, (-2635));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -2635
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Stack<MinguoEra> stack0 = new Stack<MinguoEra>();
      MinguoEra minguoEra0 = MinguoEra.BEFORE_ROC;
      stack0.add(minguoEra0);
      Enumeration<MinguoEra> enumeration0 = stack0.elements();
      // Undeclared exception!
      CollectionUtils.addAll((Collection<MinguoEra>) stack0, (Enumeration<? extends MinguoEra>) enumeration0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Stack<Integer> stack0 = new Stack<Integer>();
      Enumeration<Integer> enumeration0 = stack0.elements();
      boolean boolean0 = CollectionUtils.addAll((Collection<Integer>) linkedList0, (Enumeration<? extends Integer>) enumeration0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MinguoEra minguoEra0 = MinguoEra.BEFORE_ROC;
      ArrayList<MinguoEra> arrayList0 = new ArrayList<MinguoEra>();
      arrayList0.add(minguoEra0);
      FixedSizeList<MinguoEra> fixedSizeList0 = FixedSizeList.fixedSizeList((List<MinguoEra>) arrayList0);
      Iterator<MinguoEra> iterator0 = fixedSizeList0.iterator();
      // Undeclared exception!
      try { 
        CollectionUtils.addAll((Collection<MinguoEra>) arrayList0, (Iterator<? extends MinguoEra>) iterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>(0);
      Integer integer0 = new Integer(0);
      hashSet0.add(integer0);
      boolean boolean0 = CollectionUtils.addIgnoreNull((Collection<Integer>) hashSet0, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>(0);
      Integer integer0 = new Integer(0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Integer> list0 = CollectionUtils.collate((Iterable<? extends Integer>) hashSet0, (Iterable<? extends Integer>) hashSet0, (Comparator<? super Integer>) comparator0);
      boolean boolean0 = CollectionUtils.addIgnoreNull((Collection<Integer>) list0, integer0);
      assertTrue(list0.contains(0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean0 = CollectionUtils.addIgnoreNull((Collection<Integer>) linkedHashSet0, (Integer) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Stack<DayOfWeek> stack0 = new Stack<DayOfWeek>();
      ListIterator<DayOfWeek> listIterator0 = stack0.listIterator();
      LinkedList<Integer> linkedList1 = CollectionUtils.collect((Iterator<? extends DayOfWeek>) listIterator0, (Transformer<? super DayOfWeek, ? extends Integer>) null, linkedList0);
      assertSame(linkedList1, linkedList0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Transformer<Integer, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = CollectionUtils.collect((Iterator<? extends Integer>) null, (Transformer<? super Integer, ? extends Integer>) transformer0, linkedList0);
      assertSame(linkedList1, linkedList0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      Collection<Integer> collection0 = CollectionUtils.collect((Iterable<Object>) null, (Transformer<? super Object, ? extends Integer>) transformer0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null, (Equator<Object>) defaultEquator0);
      Collection<ResolverStyle> collection0 = CollectionUtils.selectRejected((Iterable<? extends ResolverStyle>) null, (Predicate<? super ResolverStyle>) predicate0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1802);
      uniquePredicate0.evaluate(integer0);
      linkedList0.add(integer0);
      // Undeclared exception!
      try { 
        CollectionUtils.select((Iterable<? extends Integer>) linkedList0, (Predicate<? super Integer>) uniquePredicate0, linkedList0, linkedList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Collection<Integer> collection0 = CollectionUtils.select((Iterable<? extends Integer>) arrayList0, (Predicate<? super Integer>) null, (Collection<Integer>) arrayList0, (Collection<Integer>) arrayList0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null, (Equator<Object>) defaultEquator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = CollectionUtils.select((Iterable<?>) null, (Predicate<? super Object>) predicate0, linkedList0, linkedList0);
      assertEquals(0, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>(0);
      Integer integer0 = new Integer(0);
      hashSet0.add(integer0);
      CircularFifoQueue<InstanceofPredicate> circularFifoQueue0 = new CircularFifoQueue<InstanceofPredicate>(8);
      Predicate<Integer> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Integer>>) circularFifoQueue0);
      AndPredicate<Integer> andPredicate0 = new AndPredicate<Integer>(predicate0, predicate0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = CollectionUtils.select((Iterable<? extends Integer>) hashSet0, (Predicate<? super Integer>) andPredicate0, linkedList0);
      assertFalse(linkedList1.contains(0));
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Collection<Object> collection0 = CollectionUtils.select((Iterable<?>) null, (Predicate<? super Object>) predicate0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer[] integerArray0 = new Integer[1];
      CollectionUtils.addAll((Collection<Integer>) stack0, integerArray0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      boolean boolean0 = CollectionUtils.matchesAll((Iterable<Integer>) stack0, (Predicate<? super Integer>) nullIsFalsePredicate0);
      assertEquals(1, stack0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      boolean boolean0 = CollectionUtils.matchesAll((Iterable<Integer>) linkedHashSet0, (Predicate<? super Integer>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      boolean boolean0 = CollectionUtils.matchesAll((Iterable<Integer>) linkedList0, (Predicate<? super Integer>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer((-1));
      arrayList0.add(integer0);
      DefaultEquator<Integer> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Integer> equalPredicate0 = new EqualPredicate<Integer>(integer0, defaultEquator0);
      boolean boolean0 = CollectionUtils.exists((Iterable<Integer>) arrayList0, (Predicate<? super Integer>) equalPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      UniquePredicate<Integer> uniquePredicate0 = new UniquePredicate<Integer>();
      boolean boolean0 = CollectionUtils.exists((Iterable<Integer>) vector0, (Predicate<? super Integer>) uniquePredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Collection<SwitchClosure<Integer>> collection0 = CollectionUtils.emptyCollection();
      boolean boolean0 = CollectionUtils.exists((Iterable<SwitchClosure<Integer>>) collection0, (Predicate<? super SwitchClosure<Integer>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int int0 = CollectionUtils.countMatches((Iterable<ArrayList<Object>>) null, (Predicate<? super ArrayList<Object>>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = new Integer(2299);
      stack0.add(integer0);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      ForClosure<Integer> forClosure0 = new ForClosure<Integer>(2299, closure0);
      Transformer<Integer, Integer> transformer0 = ClosureTransformer.closureTransformer((Closure<? super Integer>) forClosure0);
      CollectionUtils.transform((Collection<Integer>) stack0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      assertEquals("[2299]", stack0.toString());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Closure<Integer> closure0 = ExceptionClosure.exceptionClosure();
      Transformer<Integer, Integer> transformer0 = ClosureTransformer.closureTransformer((Closure<? super Integer>) closure0);
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      CollectionUtils.transform((Collection<Integer>) priorityQueue0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      assertEquals(0, priorityQueue0.size());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CollectionUtils.transform((Collection<Integer>) linkedList0, (Transformer<? super Integer, ? extends Integer>) null);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Closure<Integer> closure0 = ExceptionClosure.exceptionClosure();
      Transformer<Integer, Integer> transformer0 = ClosureTransformer.closureTransformer((Closure<? super Integer>) closure0);
      CollectionUtils.transform((Collection<Integer>) null, (Transformer<? super Integer, ? extends Integer>) transformer0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      boolean boolean0 = CollectionUtils.filterInverse((Iterable<Integer>) null, (Predicate<? super Integer>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      boolean boolean0 = CollectionUtils.filterInverse((Iterable<Integer>) linkedHashSet0, (Predicate<? super Integer>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer[] integerArray0 = new Integer[1];
      CollectionUtils.addAll((Collection<Integer>) stack0, integerArray0);
      assertEquals(1, stack0.size());
      
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      boolean boolean0 = CollectionUtils.filter((Iterable<Integer>) stack0, (Predicate<? super Integer>) nullIsFalsePredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer0 = new Integer((-258));
      vector0.add(integer0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      boolean boolean0 = CollectionUtils.filter((Iterable<Integer>) vector0, (Predicate<? super Integer>) predicate0);
      assertEquals(1, vector0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0);
      boolean boolean0 = CollectionUtils.filter((Iterable<Integer>) serviceLoader0, (Predicate<? super Integer>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      boolean boolean0 = CollectionUtils.filter((Iterable<Integer>) null, (Predicate<? super Integer>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      LinkedList<ArrayList<MinguoEra>> linkedList0 = new LinkedList<ArrayList<MinguoEra>>();
      Iterator<ArrayList<MinguoEra>> iterator0 = linkedList0.iterator();
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>((Closure<? super Object>[]) null);
      ArrayList<MinguoEra> arrayList0 = CollectionUtils.forAllButLastDo(iterator0, chainedClosure0);
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ArrayDeque<ArrayList<Integer>> arrayDeque0 = new ArrayDeque<ArrayList<Integer>>();
      Iterator<ArrayList<Integer>> iterator0 = arrayDeque0.iterator();
      ArrayList<Integer> arrayList0 = CollectionUtils.forAllButLastDo(iterator0, (ForClosure<Object>) null);
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Vector<ArrayList<Integer>> vector0 = new Vector<ArrayList<Integer>>();
      Transformer<Object, Integer> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.CollectionUtils$CardinalityHelper");
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      ArrayList<Integer> arrayList0 = CollectionUtils.forAllButLastDo((Iterable<ArrayList<Integer>>) vector0, transformerClosure0);
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) defaultEquator0.HASHCODE_NULL, comparator0);
      Vector<Integer> vector0 = new Vector<Integer>(0);
      FixedSizeList<Integer> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Integer>) vector0);
      Iterator<Integer> iterator0 = fixedSizeList0.iterator();
      Closure<Integer> closure0 = ExceptionClosure.exceptionClosure();
      IfClosure<Integer> ifClosure0 = new IfClosure<Integer>(predicate0, closure0);
      IfClosure<Integer> ifClosure1 = CollectionUtils.forAllDo(iterator0, ifClosure0);
      assertSame(ifClosure0, ifClosure1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Iterator<Collection<Integer>> iterator0 = (Iterator<Collection<Integer>>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      TransformerClosure<Object> transformerClosure0 = CollectionUtils.forAllDo(iterator0, (TransformerClosure<Object>) null);
      assertNull(transformerClosure0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      HashSet<DayOfWeek> hashSet0 = new HashSet<DayOfWeek>();
      ExceptionClosure<DayOfWeek> exceptionClosure0 = (ExceptionClosure<DayOfWeek>) mock(ExceptionClosure.class, new ViolatedAssumptionAnswer());
      doReturn("5+&l5aE$|").when(exceptionClosure0).toString();
      ExceptionClosure<DayOfWeek> exceptionClosure1 = CollectionUtils.forAllDo((Iterable<DayOfWeek>) hashSet0, exceptionClosure0);
      assertSame(exceptionClosure1, exceptionClosure0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      HashSet<DayOfWeek> hashSet0 = new HashSet<DayOfWeek>();
      ExceptionClosure<DayOfWeek> exceptionClosure0 = CollectionUtils.forAllDo((Iterable<DayOfWeek>) hashSet0, (ExceptionClosure<DayOfWeek>) null);
      assertNull(exceptionClosure0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Comparable<Integer> comparable0 = CollectionUtils.find((Iterable<Comparable<Integer>>) null, (Predicate<? super Comparable<Integer>>) predicate0);
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0);
      Integer integer0 = CollectionUtils.find((Iterable<Integer>) serviceLoader0, (Predicate<? super Integer>) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      Integer integer0 = new Integer(0);
      hashSet0.add(integer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      List<Object> list0 = CollectionUtils.collate((Iterable<?>) hashSet0, (Iterable<?>) hashSet0, (Comparator<? super Object>) comparator0, true);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<?>) hashSet0, (Collection<?>) list0, (Equator<? super Object>) defaultEquator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      LinkedHashSet<DayOfWeek> linkedHashSet1 = new LinkedHashSet<DayOfWeek>();
      DayOfWeek dayOfWeek0 = DayOfWeek.THURSDAY;
      linkedHashSet0.add((Integer) defaultEquator0.HASHCODE_NULL);
      linkedHashSet1.add(dayOfWeek0);
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<?>) linkedHashSet0, (Collection<?>) linkedHashSet1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      ChronoUnit chronoUnit0 = ChronoUnit.WEEKS;
      hashSet0.add(chronoUnit0);
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<?>) hashSet0, (Collection<?>) vector0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      HashSet<DayOfWeek> hashSet0 = new HashSet<DayOfWeek>();
      DayOfWeek dayOfWeek0 = DayOfWeek.MONDAY;
      hashSet0.add(dayOfWeek0);
      DayOfWeek dayOfWeek1 = DayOfWeek.FRIDAY;
      hashSet0.add(dayOfWeek1);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer(31);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      arrayList0.add(integer0);
      List<Object> list0 = CollectionUtils.collate((Iterable<?>) hashSet0, (Iterable<?>) hashSet0, (Comparator<? super Object>) comparator0, false);
      FixedSizeList<Integer> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Integer>) arrayList0);
      boolean boolean0 = CollectionUtils.isProperSubCollection(fixedSizeList0, list0);
      assertFalse(boolean0);
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      HashSet<DayOfWeek> hashSet0 = new HashSet<DayOfWeek>();
      DayOfWeek dayOfWeek0 = DayOfWeek.MONDAY;
      hashSet0.add(dayOfWeek0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      List<Object> list0 = CollectionUtils.collate((Iterable<?>) hashSet0, (Iterable<?>) hashSet0, (Comparator<? super Object>) comparator0, false);
      FixedSizeList<Integer> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Integer>) arrayList0);
      boolean boolean0 = CollectionUtils.isProperSubCollection(fixedSizeList0, list0);
      assertEquals(1, list0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      Collection<Integer> collection0 = CollectionUtils.collect((Iterable<Object>) stack0, (Transformer<? super Object, ? extends Integer>) transformer0);
      boolean boolean0 = CollectionUtils.isProperSubCollection(collection0, stack0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Integer integer0 = new Integer(90);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.add((Object) integer0);
      boolean boolean0 = CollectionUtils.isSubCollection(linkedList1, linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer[] integerArray0 = new Integer[1];
      CollectionUtils.addAll((Collection<Integer>) vector0, integerArray0);
      boolean boolean0 = CollectionUtils.isSubCollection(vector0, vector0);
      assertEquals("[null]", vector0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer[] integerArray0 = new Integer[4];
      CollectionUtils.addAll((Collection<Integer>) vector0, integerArray0);
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<?>) vector0, (Collection<?>) vector0);
      assertEquals("[null, null, null, null]", vector0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      HashSet<DayOfWeek> hashSet0 = new HashSet<DayOfWeek>();
      DayOfWeek dayOfWeek0 = DayOfWeek.FRIDAY;
      hashSet0.add(dayOfWeek0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer(31);
      arrayList0.add(integer0);
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) hashSet0, (Collection<?>) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer[] integerArray0 = new Integer[1];
      CollectionUtils.addAll((Collection<Integer>) vector0, integerArray0);
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) vector0, (Collection<?>) vector0);
      assertEquals("[null]", vector0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      HashSet<DayOfWeek> hashSet0 = new HashSet<DayOfWeek>();
      DayOfWeek dayOfWeek0 = DayOfWeek.FRIDAY;
      hashSet0.add(dayOfWeek0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer(31);
      arrayList0.add(integer0);
      arrayList0.add(integer0);
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) hashSet0, (Collection<?>) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      Integer integer0 = new Integer(0);
      hashSet0.add(integer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      List<Object> list0 = CollectionUtils.collate((Iterable<?>) hashSet0, (Iterable<?>) hashSet0, (Comparator<? super Object>) comparator0, true);
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) hashSet0, (Collection<?>) list0);
      assertTrue(boolean0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ArrayList<MinguoEra> arrayList0 = new ArrayList<MinguoEra>();
      ArrayList<MinguoEra>[] arrayListArray0 = (ArrayList<MinguoEra>[]) Array.newInstance(ArrayList.class, 1);
      MinguoEra minguoEra0 = MinguoEra.BEFORE_ROC;
      arrayList0.add(minguoEra0);
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) arrayList0, arrayListArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer[] integerArray0 = new Integer[1];
      CollectionUtils.addAll((Collection<Integer>) vector0, integerArray0);
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) vector0, (Comparable<Integer>[]) integerArray0);
      assertFalse(vector0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      Integer integer0 = new Integer(0);
      hashSet0.add(integer0);
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 2);
      comparableArray0[0] = (Comparable<Integer>) integer0;
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) hashSet0, comparableArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      Integer integer0 = new Integer(0);
      hashSet0.add(integer0);
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 2);
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) hashSet0, comparableArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer0 = new Integer(116);
      vector0.add(integer0);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      hashSet0.add(vector0);
      boolean boolean0 = CollectionUtils.containsAll(vector0, hashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      TreeSet<MinguoEra> treeSet0 = new TreeSet<MinguoEra>();
      MinguoEra minguoEra0 = MinguoEra.ROC;
      treeSet0.add(minguoEra0);
      boolean boolean0 = CollectionUtils.containsAll(treeSet0, treeSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean0 = CollectionUtils.containsAll(linkedHashSet0, linkedHashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer[] integerArray0 = new Integer[11];
      CollectionUtils.addAll((Collection<Integer>) vector0, integerArray0);
      boolean boolean0 = CollectionUtils.containsAll(vector0, vector0);
      assertEquals(20, vector0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      MinguoEra minguoEra0 = MinguoEra.BEFORE_ROC;
      EnumSet<MinguoEra> enumSet0 = EnumSet.of(minguoEra0, minguoEra0, minguoEra0, minguoEra0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      AndPredicate<MinguoEra> andPredicate0 = new AndPredicate<MinguoEra>(predicate0, predicate0);
      Collection<MinguoEra> collection0 = CollectionUtils.subtract((Iterable<? extends MinguoEra>) enumSet0, (Iterable<? extends MinguoEra>) enumSet0, (Predicate<MinguoEra>) andPredicate0);
      assertTrue(collection0.contains(minguoEra0));
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      LinkedHashSet<DayOfWeek> linkedHashSet0 = new LinkedHashSet<DayOfWeek>();
      DayOfWeek dayOfWeek0 = DayOfWeek.FRIDAY;
      linkedHashSet0.add(dayOfWeek0);
      Collection<DayOfWeek> collection0 = CollectionUtils.union((Iterable<? extends DayOfWeek>) linkedHashSet0, (Iterable<? extends DayOfWeek>) linkedHashSet0);
      assertTrue(collection0.contains(dayOfWeek0));
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Collection<Object> collection0 = CollectionUtils.emptyIfNull((Collection<Object>) treeSet0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      HashSet<Object> hashSet0 = new HashSet<Object>(linkedHashSet0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      ArrayList<DayOfWeek> arrayList0 = new ArrayList<DayOfWeek>();
      hashSet0.add(arrayList0);
      Collection<Object> collection0 = CollectionUtils.retainAll((Iterable<Object>) hashSet0, (Iterable<?>) hashSet0, (Equator<? super Object>) defaultEquator0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.subtract((Iterable<? extends FormatStyle>) null, (Iterable<? extends FormatStyle>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ArrayList<ChronoField> arrayList0 = new ArrayList<ChronoField>();
      Class<ChronoField> class0 = ChronoField.class;
      ServiceLoader<ChronoField> serviceLoader0 = ServiceLoader.load(class0);
      Comparator<ChronoField> comparator0 = (Comparator<ChronoField>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<ChronoField> list0 = CollectionUtils.collate((Iterable<? extends ChronoField>) arrayList0, (Iterable<? extends ChronoField>) serviceLoader0, (Comparator<? super ChronoField>) comparator0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Class<DayOfWeek> class0 = DayOfWeek.class;
      EnumSet<DayOfWeek> enumSet0 = EnumSet.allOf(class0);
      Comparator<DayOfWeek> comparator0 = (Comparator<DayOfWeek>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<DayOfWeek> priorityQueue0 = new PriorityQueue<DayOfWeek>(comparator0);
      List<DayOfWeek> list0 = CollectionUtils.collate((Iterable<? extends DayOfWeek>) enumSet0, (Iterable<? extends DayOfWeek>) priorityQueue0, false);
      assertEquals(7, list0.size());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Collection<Integer> collection0 = CollectionUtils.emptyCollection();
      Integer[] integerArray0 = new Integer[3];
      // Undeclared exception!
      try { 
        CollectionUtils.addAll(collection0, integerArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      // Undeclared exception!
      try { 
        CollectionUtils.cardinality(arrayList0, (Iterable<? super ArrayList<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      HashMap<ArrayList<Integer>, FormatStyle> hashMap0 = new HashMap<ArrayList<Integer>, FormatStyle>();
      // Undeclared exception!
      try { 
        CollectionUtils.get((Map<ArrayList<Integer>, FormatStyle>) hashMap0, 5432);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 5432
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      // Undeclared exception!
      try { 
        CollectionUtils.predicatedCollection((Collection<ArrayList<Integer>>) null, (Predicate<? super ArrayList<Integer>>) nullIsFalsePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      ListIterator<Integer> listIterator0 = stack0.listIterator();
      // Undeclared exception!
      try { 
        CollectionUtils.get((Iterator<Integer>) listIterator0, (-259));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -259
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      // Undeclared exception!
      try { 
        CollectionUtils.transformingCollection((Collection<Integer>) stack0, (Transformer<? super Integer, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      PriorityQueue<ChronoLocalDate> priorityQueue0 = new PriorityQueue<ChronoLocalDate>();
      Iterator<ChronoLocalDate> iterator0 = priorityQueue0.iterator();
      Integer integer0 = new Integer(1156);
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      Transformer<ChronoLocalDate, Integer> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Integer>) constantFactory0);
      Collection<Integer> collection0 = CollectionUtils.collect(iterator0, (Transformer<? super ChronoLocalDate, ? extends Integer>) transformer0);
      assertFalse(collection0.contains(1156));
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.synchronizedCollection((Collection<Comparable<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>(arrayList0);
      Integer integer0 = new Integer((-2822));
      arrayList0.add(integer0);
      HashSet<Integer> hashSet0 = new HashSet<Integer>(arrayList0);
      Collection<Integer> collection0 = CollectionUtils.disjunction((Iterable<? extends Integer>) arrayDeque0, (Iterable<? extends Integer>) hashSet0);
      assertTrue(collection0.contains((-2822)));
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer[] integerArray0 = new Integer[1];
      CollectionUtils.addAll((Collection<Integer>) vector0, integerArray0);
      CollectionUtils.intersection((Iterable<?>) vector0, (Iterable<?>) vector0);
      assertEquals("[null]", vector0.toString());
      assertEquals(1, vector0.size());
  }
}
