/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 09:28:04 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.bloomfilter.Shape;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Shape_ESTest extends Shape_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        Shape.fromPMK(1, 1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Probability must be greater than 0 and less than 1: 1.0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        Shape.fromPMK(0.0, 0, 1195);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Probability must be greater than 0 and less than 1: 0.0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(425, 2848, 2);
      assertEquals(987.041585117362, shape0.estimateMaxN(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        Shape.fromNMK(1103, 520, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of hash functions must be greater than 0: -1
         //
         verifyException("org.apache.commons.collections4.bloomfilter.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Shape shape0 = Shape.fromKM(72, 72);
      double double0 = shape0.estimateMaxN();
      assertEquals(0.6931471805599453, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2, 2);
      boolean boolean0 = shape0.isSparse(2);
      assertEquals(0.6931471805599453, shape0.estimateMaxN(), 0.01);
      assertEquals(2, shape0.getNumberOfBits());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Shape shape0 = Shape.fromNM(26, 26);
      Shape shape1 = Shape.fromPMK(1.8434221636625875E-4, 26, 938);
      boolean boolean0 = shape0.equals(shape1);
      assertFalse(shape1.equals((Object)shape0));
      assertFalse(boolean0);
      assertEquals(0.01921303485560616, shape1.estimateMaxN(), 0.01);
      assertEquals(18.021826694558577, shape0.estimateMaxN(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Shape shape0 = Shape.fromNM(72, 72);
      Shape shape1 = Shape.fromKM(1, 803);
      boolean boolean0 = shape0.equals(shape1);
      assertFalse(shape1.equals((Object)shape0));
      assertEquals(556.597185989636, shape1.estimateMaxN(), 0.01);
      assertEquals(49.90659700031606, shape0.estimateMaxN(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1103, 2848);
      double double0 = shape0.estimateN(0);
      assertEquals(1.7897399548818895, shape0.estimateMaxN(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Shape shape0 = Shape.fromKM(72, 2);
      double double0 = shape0.estimateN((-2118));
      assertEquals((-0.19350067186405867), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        Shape.fromNM((-3291), 2476);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of items must be greater than 0: -3291
         //
         verifyException("org.apache.commons.collections4.bloomfilter.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Shape shape0 = Shape.fromNM(72, 72);
      double double0 = shape0.getProbability(803);
      assertEquals(0.9999856645888541, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2, 2);
      double double0 = shape0.getProbability(0);
      assertEquals(0.6931471805599453, shape0.estimateMaxN(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2, 2);
      int int0 = shape0.getNumberOfBits();
      assertEquals(2, int0);
      assertEquals(0.6931471805599453, shape0.estimateMaxN(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        Shape.fromNP(957, 0.9999999999997917);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Filter too small: Calculated number of hash functions (0) was less than 1
         //
         verifyException("org.apache.commons.collections4.bloomfilter.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        Shape.fromNMK(921, 921, 921);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Calculated probability is greater than or equal to 1: 1.0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Shape.fromPMK(1778, (-3210), 422);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Probability must be greater than 0 and less than 1: 1778.0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        Shape.fromPMK((-2388), (-2388), (-2388));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Probability must be greater than 0 and less than 1: -2388.0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Shape.fromKM((-62), (-62));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of hash functions must be greater than 0: -62
         //
         verifyException("org.apache.commons.collections4.bloomfilter.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        Shape.fromNMK(72, (-2967), (-2967));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be greater than 0: -2967
         //
         verifyException("org.apache.commons.collections4.bloomfilter.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        Shape.fromNP(2146839917, 0.022805582999674612);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Resulting filter has more than 2147483647 bits: 1.6893774368E10
         //
         verifyException("org.apache.commons.collections4.bloomfilter.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Shape shape0 = Shape.fromNM(425, 425);
      boolean boolean0 = shape0.isSparse(425);
      assertEquals(425, shape0.getNumberOfBits());
      assertEquals(294.58755173797675, shape0.estimateMaxN(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2087831324, 2087831324);
      // Undeclared exception!
      try { 
        shape0.getProbability((-478));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of items must be greater than or equal to 0: -478
         //
         verifyException("org.apache.commons.collections4.bloomfilter.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1778, 1778);
      Shape shape1 = Shape.fromNM(1778, 1778);
      boolean boolean0 = shape0.equals(shape1);
      assertEquals(0.6931471805599453, shape0.estimateMaxN(), 0.01);
      assertFalse(boolean0);
      assertFalse(shape1.equals((Object)shape0));
      assertEquals(1232.4156870355828, shape1.estimateMaxN(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Shape shape0 = Shape.fromNM(88, 88);
      Shape shape1 = Shape.fromNP(88, 0.5679086258527647);
      boolean boolean0 = shape1.equals(shape0);
      assertEquals(60.99695188927519, shape0.estimateMaxN(), 0.01);
      assertFalse(shape0.equals((Object)shape1));
      assertEquals(72.0873067782343, shape1.estimateMaxN(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Shape shape0 = Shape.fromNM(88, 88);
      boolean boolean0 = shape0.equals(shape0);
      assertEquals(60.99695188927519, shape0.estimateMaxN(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Shape shape0 = Shape.fromKM(72, 2);
      Object object0 = new Object();
      boolean boolean0 = shape0.equals(object0);
      assertFalse(boolean0);
      assertEquals(0.01925408834888737, shape0.estimateMaxN(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1209, 2078209981);
      boolean boolean0 = shape0.isSparse(1209);
      assertEquals(2078209981, shape0.getNumberOfBits());
      assertEquals(1209.0000200939896, shape0.estimateMaxN(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Shape shape0 = Shape.fromKM(72, 72);
      shape0.hashCode();
      assertEquals(0.6931471805599453, shape0.estimateMaxN(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Shape shape0 = Shape.fromNM(104, 104);
      double double0 = shape0.estimateN(104);
      assertEquals(1, shape0.getNumberOfHashFunctions());
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(26, 26, 26);
      String string0 = shape0.toString();
      assertEquals("Shape[k=26 m=26]", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Shape shape0 = Shape.fromNM(88, 88);
      int int0 = shape0.getNumberOfHashFunctions();
      assertEquals(1, int0);
      assertEquals(60.99695188927519, shape0.estimateMaxN(), 0.01);
  }
}
