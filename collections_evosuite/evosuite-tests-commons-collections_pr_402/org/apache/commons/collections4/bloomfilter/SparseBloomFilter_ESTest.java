/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 09:32:37 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import org.apache.commons.collections4.bloomfilter.BitMapProducer;
import org.apache.commons.collections4.bloomfilter.BloomFilter;
import org.apache.commons.collections4.bloomfilter.CountingLongPredicate;
import org.apache.commons.collections4.bloomfilter.EnhancedDoubleHasher;
import org.apache.commons.collections4.bloomfilter.Hasher;
import org.apache.commons.collections4.bloomfilter.IndexFilter;
import org.apache.commons.collections4.bloomfilter.IndexProducer;
import org.apache.commons.collections4.bloomfilter.LayerManager;
import org.apache.commons.collections4.bloomfilter.LayeredBloomFilter;
import org.apache.commons.collections4.bloomfilter.LongBiPredicate;
import org.apache.commons.collections4.bloomfilter.Shape;
import org.apache.commons.collections4.bloomfilter.SimpleBloomFilter;
import org.apache.commons.collections4.bloomfilter.SparseBloomFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SparseBloomFilter_ESTest extends SparseBloomFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Shape shape0 = Shape.fromNM(461845907, 461845907);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher((-309L), (-309L));
      boolean boolean0 = sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Shape shape0 = Shape.fromKM(19, 19);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      int[] intArray0 = new int[1];
      intArray0[0] = 19;
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.merge(indexProducer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value in list 19 is greater than maximum value (18)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SparseBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1310, 461845907);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1310, 1310);
      boolean boolean0 = sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      assertTrue(boolean0);
      
      boolean boolean1 = sparseBloomFilter0.isEmpty();
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1310, 461845907);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1310, 1310);
      boolean boolean0 = sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      SparseBloomFilter sparseBloomFilter1 = new SparseBloomFilter(shape0);
      boolean boolean1 = sparseBloomFilter1.contains((IndexProducer) sparseBloomFilter0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Shape shape0 = Shape.fromKM(32, 461845907);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher((-309L), (-309L));
      boolean boolean0 = sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      assertTrue(boolean0);
      
      int int0 = sparseBloomFilter0.cardinality();
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Shape shape0 = Shape.fromKM(461845907, 461845907);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      LayerManager layerManager0 = mock(LayerManager.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(layerManager0).forEachBloomFilter(any(java.util.function.Predicate.class));
      LayeredBloomFilter layeredBloomFilter0 = new LayeredBloomFilter(shape0, layerManager0);
      BloomFilter bloomFilter0 = layeredBloomFilter0.flatten();
      // Undeclared exception!
      sparseBloomFilter0.merge((IndexProducer) bloomFilter0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Shape shape0 = Shape.fromKM(38, 38);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.merge((IndexProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // indexProducer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Shape shape0 = Shape.fromKM(461845907, 461845907);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(461845907, 461845907);
      // Undeclared exception!
      sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1051, 1051);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.merge((Hasher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // hasher
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Shape shape0 = Shape.fromKM(461845907, 461845907);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      sparseBloomFilter0.merge((BloomFilter) simpleBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Shape shape0 = Shape.fromKM(19, 19);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.merge((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1850, 1850);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1029, 1029);
      sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      Shape shape1 = Shape.fromKM(3, 333);
      SparseBloomFilter sparseBloomFilter1 = new SparseBloomFilter(shape1);
      // Undeclared exception!
      try { 
        sparseBloomFilter1.merge((BloomFilter) sparseBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value in list 1849 is greater than maximum value (332)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SparseBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Shape shape0 = Shape.fromKM(461845907, 461845907);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      sparseBloomFilter0.merge((BitMapProducer) sparseBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1029, 1029);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.merge((BitMapProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // bitMapProducer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(23, 23, 23);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      long[] longArray0 = new long[2];
      longArray0[1] = (long) 23;
      BitMapProducer bitMapProducer0 = BitMapProducer.fromBitMapArray(longArray0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.merge(bitMapProducer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value in list 68 is greater than maximum value (22)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SparseBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1029, 1029);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.forEachIndex((IntPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // consumer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Shape shape0 = Shape.fromNM(3454, 3454);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.forEachBitMap((LongPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // consumer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Shape shape0 = Shape.fromNM(461845907, 461845907);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      LayerManager layerManager0 = mock(LayerManager.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(layerManager0).forEachBloomFilter(any(java.util.function.Predicate.class));
      LayeredBloomFilter layeredBloomFilter0 = new LayeredBloomFilter(shape0, layerManager0);
      BloomFilter bloomFilter0 = layeredBloomFilter0.flatten();
      // Undeclared exception!
      sparseBloomFilter0.contains((IndexProducer) bloomFilter0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(19, 19, 19);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.contains((IndexProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SparseBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Shape shape0 = Shape.fromKM(32, 461845907);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      sparseBloomFilter0.contains((BitMapProducer) sparseBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1051, 1051);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.contains((BitMapProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // producer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SparseBloomFilter sparseBloomFilter0 = null;
      try {
        sparseBloomFilter0 = new SparseBloomFilter((Shape) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // shape
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Shape shape0 = Shape.fromNM(461845907, 461845907);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      long[] longArray0 = new long[0];
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(longBiPredicate0).test(anyLong() , anyLong());
      CountingLongPredicate countingLongPredicate0 = new CountingLongPredicate(longArray0, longBiPredicate0);
      LongPredicate longPredicate0 = countingLongPredicate0.negate();
      // Undeclared exception!
      sparseBloomFilter0.forEachBitMap(longPredicate0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1020, 1020);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1020, 1020);
      boolean boolean0 = sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      boolean boolean1 = sparseBloomFilter0.merge((IndexProducer) sparseBloomFilter0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Shape shape0 = Shape.fromKM(406, 406);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      boolean boolean0 = sparseBloomFilter0.merge((IndexProducer) sparseBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1020, 1020);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      boolean boolean0 = sparseBloomFilter0.contains((IndexProducer) sparseBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1020, 1020);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      int int0 = sparseBloomFilter0.characteristics();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1281, 461845907);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      long[] longArray0 = new long[0];
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(longBiPredicate0).test(anyLong() , anyLong());
      CountingLongPredicate countingLongPredicate0 = new CountingLongPredicate(longArray0, longBiPredicate0);
      boolean boolean0 = sparseBloomFilter0.forEachBitMap(countingLongPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1020, 1020);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      long[] longArray0 = new long[1];
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(longBiPredicate0).test(anyLong() , anyLong());
      CountingLongPredicate countingLongPredicate0 = new CountingLongPredicate(longArray0, longBiPredicate0);
      boolean boolean0 = sparseBloomFilter0.forEachBitMap(countingLongPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1020, 1020);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1020, 1020);
      boolean boolean0 = sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      long[] longArray0 = new long[1];
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(longBiPredicate0).test(anyLong() , anyLong());
      CountingLongPredicate countingLongPredicate0 = new CountingLongPredicate(longArray0, longBiPredicate0);
      LongPredicate longPredicate0 = countingLongPredicate0.negate();
      boolean boolean1 = sparseBloomFilter0.forEachBitMap(longPredicate0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1020, 1020);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1020, 1020);
      boolean boolean0 = sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      long[] longArray0 = new long[1];
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(longBiPredicate0).test(anyLong() , anyLong());
      CountingLongPredicate countingLongPredicate0 = new CountingLongPredicate(longArray0, longBiPredicate0);
      boolean boolean1 = sparseBloomFilter0.forEachBitMap(countingLongPredicate0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1020, 1020);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1020, 1020);
      boolean boolean0 = sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      assertTrue(boolean0);
      
      IndexFilter.BitMapTracker indexFilter_BitMapTracker0 = new IndexFilter.BitMapTracker(shape0);
      boolean boolean1 = sparseBloomFilter0.forEachIndex(indexFilter_BitMapTracker0);
      boolean boolean2 = sparseBloomFilter0.forEachIndex(indexFilter_BitMapTracker0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1850, 1850);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1029, 1029);
      sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      IndexFilter.ArrayTracker indexFilter_ArrayTracker0 = new IndexFilter.ArrayTracker(shape0);
      // Undeclared exception!
      sparseBloomFilter0.forEachIndex(indexFilter_ArrayTracker0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(8, 8, 8);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      LayeredBloomFilter layeredBloomFilter0 = LayeredBloomFilter.fixed(shape0, 8);
      boolean boolean0 = sparseBloomFilter0.merge((BloomFilter) layeredBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1850, 1850);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      int[] intArray0 = new int[9];
      intArray0[2] = (-61);
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.merge(indexProducer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value in list -61 is less than 0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SparseBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1020, 1020);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1020, 1020);
      sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      long[] longArray0 = sparseBloomFilter0.asBitMapArray();
      assertEquals(16, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Shape shape0 = Shape.fromKM(32, 32);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      int int0 = sparseBloomFilter0.cardinality();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1020, 1020);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      SparseBloomFilter sparseBloomFilter1 = sparseBloomFilter0.copy();
      assertNotSame(sparseBloomFilter0, sparseBloomFilter1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Shape shape0 = Shape.fromKM(32, 32);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      sparseBloomFilter0.clear();
      assertEquals(1, sparseBloomFilter0.characteristics());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Shape shape0 = Shape.fromKM(32, 32);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      boolean boolean0 = sparseBloomFilter0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1029, 1029);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1029, 1029);
      boolean boolean0 = sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      SparseBloomFilter sparseBloomFilter1 = new SparseBloomFilter(shape0);
      boolean boolean1 = sparseBloomFilter1.contains((BitMapProducer) sparseBloomFilter0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1020, 1020);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      boolean boolean0 = sparseBloomFilter0.contains((BitMapProducer) sparseBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1029, 1029);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      Shape shape1 = sparseBloomFilter0.getShape();
      assertEquals(1029, shape1.getNumberOfBits());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1029, 1029);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      boolean boolean0 = sparseBloomFilter0.merge((BitMapProducer) sparseBloomFilter0);
      assertTrue(boolean0);
  }
}
