/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 09:10:32 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.IntPredicate;
import org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter;
import org.apache.commons.collections4.bloomfilter.BloomFilter;
import org.apache.commons.collections4.bloomfilter.CellProducer;
import org.apache.commons.collections4.bloomfilter.EnhancedDoubleHasher;
import org.apache.commons.collections4.bloomfilter.Hasher;
import org.apache.commons.collections4.bloomfilter.IndexFilter;
import org.apache.commons.collections4.bloomfilter.IndexProducer;
import org.apache.commons.collections4.bloomfilter.Shape;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CellProducer_ESTest extends CellProducer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1133, 1133);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(0L, 0L);
      boolean boolean0 = arrayCountingBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      IndexFilter.ArrayTracker indexFilter_ArrayTracker0 = new IndexFilter.ArrayTracker(shape0);
      IntPredicate intPredicate0 = indexFilter_ArrayTracker0.negate();
      boolean boolean1 = arrayCountingBloomFilter0.forEachIndex(intPredicate0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Shape shape0 = Shape.fromNM(8287, 8287);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      arrayCountingBloomFilter0.merge((BloomFilter) arrayCountingBloomFilter0);
      IndexFilter.ArrayTracker indexFilter_ArrayTracker0 = new IndexFilter.ArrayTracker(shape0);
      // Undeclared exception!
      arrayCountingBloomFilter0.forEachIndex(indexFilter_ArrayTracker0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CellProducer cellProducer0 = CellProducer.from((IndexProducer) null);
      // Undeclared exception!
      try { 
        cellProducer0.forEachIndex((IntPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.CellProducer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-5603);
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      CellProducer cellProducer0 = CellProducer.from(indexProducer0);
      Shape shape0 = Shape.fromNM(55, 55);
      IndexFilter.ArrayTracker indexFilter_ArrayTracker0 = new IndexFilter.ArrayTracker(shape0);
      // Undeclared exception!
      try { 
        cellProducer0.forEachIndex(indexFilter_ArrayTracker0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // number may not be less than zero. -5603
         //
         verifyException("org.apache.commons.collections4.bloomfilter.IndexFilter$ArrayTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 55;
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      CellProducer cellProducer0 = CellProducer.from(indexProducer0);
      Shape shape0 = Shape.fromNM(55, 55);
      IndexFilter.ArrayTracker indexFilter_ArrayTracker0 = new IndexFilter.ArrayTracker(shape0);
      // Undeclared exception!
      try { 
        cellProducer0.forEachIndex(indexFilter_ArrayTracker0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.collections4.bloomfilter.IndexFilter$ArrayTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1174, 1174);
      int[] intArray0 = new int[5];
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      CellProducer cellProducer0 = CellProducer.from(indexProducer0);
      int int0 = arrayCountingBloomFilter0.getMaxInsert(cellProducer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CellProducer cellProducer0 = CellProducer.from((IndexProducer) null);
      IndexProducer indexProducer0 = cellProducer0.uniqueIndices();
      assertNotNull(indexProducer0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      int[] intArray0 = new int[2];
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      CellProducer cellProducer0 = CellProducer.from(indexProducer0);
      Shape shape0 = Shape.fromNM(55, 55);
      IndexFilter.ArrayTracker indexFilter_ArrayTracker0 = new IndexFilter.ArrayTracker(shape0);
      boolean boolean0 = cellProducer0.forEachIndex(indexFilter_ArrayTracker0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      int[] intArray0 = new int[5];
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      CellProducer cellProducer0 = CellProducer.from(indexProducer0);
      cellProducer0.asIndexArray();
      int[] intArray1 = cellProducer0.asIndexArray();
      assertArrayEquals(new int[] {0}, intArray1);
  }
}
