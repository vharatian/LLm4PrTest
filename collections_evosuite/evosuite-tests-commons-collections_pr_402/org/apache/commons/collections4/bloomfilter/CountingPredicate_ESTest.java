/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 09:14:43 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Converter;
import com.google.common.base.Equivalence;
import com.google.common.base.Function;
import java.io.InputStream;
import java.util.function.BiPredicate;
import org.apache.commons.collections4.bloomfilter.CountingPredicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CountingPredicate_ESTest extends CountingPredicate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      CountingPredicate<Object> countingPredicate0 = new CountingPredicate<Object>(objectArray0, (BiPredicate<Object, Object>) null);
      // Undeclared exception!
      try { 
        countingPredicate0.test((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.CountingPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Equivalence<Object> equivalence0 = Equivalence.identity();
      Function<Object, InputStream> function0 = (Function<Object, InputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Converter<Object, InputStream> converter0 = Converter.from((Function<? super Object, ? extends InputStream>) function0, (Function<? super InputStream, ?>) function0);
      Equivalence<Object> equivalence1 = equivalence0.onResultOf((Function<? super Object, ?>) converter0);
      CountingPredicate<Object> countingPredicate0 = new CountingPredicate<Object>(objectArray0, equivalence1);
      // Undeclared exception!
      try { 
        countingPredicate0.test(equivalence0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      CountingPredicate<Object> countingPredicate0 = new CountingPredicate<Object>(objectArray0, (BiPredicate<Object, Object>) null);
      // Undeclared exception!
      try { 
        countingPredicate0.forEachRemaining();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.CountingPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Equivalence<Object> equivalence0 = Equivalence.identity();
      CountingPredicate<Object> countingPredicate0 = new CountingPredicate<Object>(objectArray0, equivalence0);
      boolean boolean0 = countingPredicate0.forEachRemaining();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = objectArray0[0];
      objectArray0[2] = objectArray0[0];
      objectArray0[3] = object0;
      Equivalence<Object> equivalence0 = Equivalence.identity();
      BiPredicate<Object, Object> biPredicate0 = equivalence0.negate();
      CountingPredicate<Object> countingPredicate0 = new CountingPredicate<Object>(objectArray0, biPredicate0);
      boolean boolean0 = countingPredicate0.forEachRemaining();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      Equivalence<Object> equivalence0 = Equivalence.identity();
      CountingPredicate<Object> countingPredicate0 = new CountingPredicate<Object>(objectArray0, equivalence0);
      Integer integer0 = new Integer(0);
      countingPredicate0.test(integer0);
      countingPredicate0.test(integer0);
      countingPredicate0.test(objectArray0[1]);
      boolean boolean0 = countingPredicate0.test(object0);
      boolean boolean1 = countingPredicate0.test(objectArray0[0]);
      assertFalse(boolean1 == boolean0);
  }
}
