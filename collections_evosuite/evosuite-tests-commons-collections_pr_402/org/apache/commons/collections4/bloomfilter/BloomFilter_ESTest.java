/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 09:06:19 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter;
import org.apache.commons.collections4.bloomfilter.BitMapProducer;
import org.apache.commons.collections4.bloomfilter.BloomFilter;
import org.apache.commons.collections4.bloomfilter.EnhancedDoubleHasher;
import org.apache.commons.collections4.bloomfilter.Hasher;
import org.apache.commons.collections4.bloomfilter.LayerManager;
import org.apache.commons.collections4.bloomfilter.LayeredBloomFilter;
import org.apache.commons.collections4.bloomfilter.Shape;
import org.apache.commons.collections4.bloomfilter.SimpleBloomFilter;
import org.apache.commons.collections4.bloomfilter.SparseBloomFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class BloomFilter_ESTest extends BloomFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1193, 1193);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1193, 1193);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      simpleBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      int int0 = simpleBloomFilter0.estimateIntersection(simpleBloomFilter0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Shape shape0 = Shape.fromNM(611, 611);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      ArrayCountingBloomFilter arrayCountingBloomFilter1 = arrayCountingBloomFilter0.copy();
      byte[] byteArray0 = new byte[2];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      arrayCountingBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      int int0 = arrayCountingBloomFilter1.estimateIntersection(arrayCountingBloomFilter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Shape shape0 = Shape.fromNM(611, 611);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      byte[] byteArray0 = new byte[4];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      arrayCountingBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      boolean boolean0 = arrayCountingBloomFilter0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1193, 1193);
      LayeredBloomFilter layeredBloomFilter0 = LayeredBloomFilter.fixed(shape0, 1193);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1193, 1193);
      boolean boolean0 = layeredBloomFilter0.contains((Hasher) enhancedDoubleHasher0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1304, 1304);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      boolean boolean0 = sparseBloomFilter0.merge((BloomFilter) simpleBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1273, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1, 1);
      simpleBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      int int0 = arrayCountingBloomFilter0.estimateUnion(simpleBloomFilter0);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1273, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1, 1);
      simpleBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      boolean boolean0 = simpleBloomFilter0.contains((Hasher) enhancedDoubleHasher0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1310, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1, 1);
      simpleBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      boolean boolean0 = sparseBloomFilter0.contains((BloomFilter) simpleBloomFilter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1289, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      LayeredBloomFilter layeredBloomFilter0 = LayeredBloomFilter.fixed(shape0, 1);
      boolean boolean0 = simpleBloomFilter0.contains((BitMapProducer) layeredBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1273, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 1;
      BitMapProducer bitMapProducer0 = BitMapProducer.fromBitMapArray(longArray0);
      boolean boolean0 = simpleBloomFilter0.contains(bitMapProducer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Shape shape0 = Shape.fromKM(Integer.MAX_VALUE, Integer.MAX_VALUE);
      LayeredBloomFilter layeredBloomFilter0 = LayeredBloomFilter.fixed(shape0, Integer.MAX_VALUE);
      byte[] byteArray0 = new byte[9];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      // Undeclared exception!
      layeredBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Shape shape0 = Shape.fromNM(39, 39);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.merge((Hasher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // hasher
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Shape shape0 = Shape.fromNM(46, 46);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.merge((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Shape shape0 = Shape.fromKM(41, 1073741824);
      LayeredBloomFilter layeredBloomFilter0 = LayeredBloomFilter.fixed(shape0, 1073741824);
      // Undeclared exception!
      layeredBloomFilter0.isFull();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Shape shape0 = Shape.fromKM(23, 23);
      LayeredBloomFilter layeredBloomFilter0 = new LayeredBloomFilter(shape0, (LayerManager) null);
      // Undeclared exception!
      try { 
        layeredBloomFilter0.isFull();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.LayeredBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Shape shape0 = Shape.fromKM(Integer.MAX_VALUE, Integer.MAX_VALUE);
      LayeredBloomFilter layeredBloomFilter0 = LayeredBloomFilter.fixed(shape0, Integer.MAX_VALUE);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      sparseBloomFilter0.estimateUnion(layeredBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Shape shape0 = Shape.fromKM(23, 23);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.estimateUnion((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(Integer.MAX_VALUE, 204168259760283631L);
      Shape shape0 = Shape.fromKM(2110, 2110);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      simpleBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      Shape shape1 = Shape.fromNM(485, 485);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape1);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.estimateUnion(simpleBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Filter only accepts values in the [0,485) range
         //
         verifyException("org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1310, 3810779);
      LayeredBloomFilter layeredBloomFilter0 = LayeredBloomFilter.fixed(shape0, 3810779);
      // Undeclared exception!
      layeredBloomFilter0.estimateN();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LayeredBloomFilter layeredBloomFilter0 = new LayeredBloomFilter((Shape) null, (LayerManager) null);
      // Undeclared exception!
      try { 
        layeredBloomFilter0.estimateN();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // shape
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Shape shape0 = Shape.fromKM(Integer.MAX_VALUE, Integer.MAX_VALUE);
      LayeredBloomFilter layeredBloomFilter0 = LayeredBloomFilter.fixed(shape0, Integer.MAX_VALUE);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      sparseBloomFilter0.estimateIntersection(layeredBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1554, 1554);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.estimateIntersection((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      Shape shape1 = Shape.fromNP(1, 4.9E-324);
      SimpleBloomFilter simpleBloomFilter1 = new SimpleBloomFilter(shape1);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.estimateIntersection(simpleBloomFilter1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BitMapProducer should send at most 1 maps
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SimpleBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Shape shape0 = Shape.fromNM(9, 9);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.contains((Hasher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Hasher
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(1, 1, 1);
      LayeredBloomFilter layeredBloomFilter0 = LayeredBloomFilter.fixed(shape0, 1);
      // Undeclared exception!
      try { 
        layeredBloomFilter0.contains((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1554, 1554);
      LayeredBloomFilter layeredBloomFilter0 = LayeredBloomFilter.fixed(shape0, 1554);
      int int0 = layeredBloomFilter0.estimateN();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.contains((BitMapProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SimpleBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(1, 1, 1);
      LayeredBloomFilter layeredBloomFilter0 = LayeredBloomFilter.fixed(shape0, 1);
      LayeredBloomFilter layeredBloomFilter1 = (LayeredBloomFilter)layeredBloomFilter0.uniqueIndices();
      assertEquals(0, layeredBloomFilter1.characteristics());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Shape shape0 = Shape.fromKM(59, 59);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      byte[] byteArray0 = new byte[5];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      arrayCountingBloomFilter0.remove((Hasher) enhancedDoubleHasher0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      int int0 = sparseBloomFilter0.estimateIntersection(arrayCountingBloomFilter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1, 1);
      simpleBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      int int0 = sparseBloomFilter0.estimateIntersection(simpleBloomFilter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1, 1);
      simpleBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      SimpleBloomFilter simpleBloomFilter1 = new SimpleBloomFilter(shape0);
      int int0 = simpleBloomFilter0.estimateIntersection(simpleBloomFilter1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1, 1);
      simpleBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      int int0 = simpleBloomFilter0.estimateIntersection(simpleBloomFilter0);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1289, 1289);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1289, 1289);
      arrayCountingBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      boolean boolean0 = arrayCountingBloomFilter0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1, 1);
      simpleBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      boolean boolean0 = simpleBloomFilter0.isFull();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1273, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      boolean boolean0 = simpleBloomFilter0.isFull();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1536, 1536);
      LayeredBloomFilter layeredBloomFilter0 = LayeredBloomFilter.fixed(shape0, 1536);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      boolean boolean0 = sparseBloomFilter0.contains((BloomFilter) layeredBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2110, 2110);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      int int0 = arrayCountingBloomFilter0.estimateUnion(simpleBloomFilter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1, 1);
      LayeredBloomFilter layeredBloomFilter0 = LayeredBloomFilter.fixed(shape0, 1);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1, 1);
      layeredBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      int int0 = layeredBloomFilter0.estimateN();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Shape shape0 = Shape.fromKM(23, 23);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(23, 23);
      boolean boolean0 = sparseBloomFilter0.contains((Hasher) enhancedDoubleHasher0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Shape shape0 = Shape.fromKM(Integer.MAX_VALUE, Integer.MAX_VALUE);
      LayeredBloomFilter layeredBloomFilter0 = LayeredBloomFilter.fixed(shape0, Integer.MAX_VALUE);
      // Undeclared exception!
      layeredBloomFilter0.contains((BloomFilter) layeredBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1289, 1289);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.isEmpty();
      assertTrue(boolean0);
  }
}
