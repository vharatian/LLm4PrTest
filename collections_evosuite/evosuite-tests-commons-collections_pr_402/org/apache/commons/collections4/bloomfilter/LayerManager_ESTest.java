/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 09:16:55 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.Supplier;
import org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter;
import org.apache.commons.collections4.bloomfilter.BloomFilter;
import org.apache.commons.collections4.bloomfilter.EnhancedDoubleHasher;
import org.apache.commons.collections4.bloomfilter.Hasher;
import org.apache.commons.collections4.bloomfilter.LayerManager;
import org.apache.commons.collections4.bloomfilter.Shape;
import org.apache.commons.collections4.bloomfilter.SimpleBloomFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class LayerManager_ESTest extends LayerManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LayerManager.Builder layerManager_Builder0 = LayerManager.builder();
      Shape shape0 = Shape.fromNM(1290, 1290);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      Supplier<BloomFilter> supplier0 = (Supplier<BloomFilter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(arrayCountingBloomFilter0).when(supplier0).get();
      LayerManager.Builder layerManager_Builder1 = layerManager_Builder0.setSupplier(supplier0);
      LayerManager layerManager0 = layerManager_Builder1.build();
      // Undeclared exception!
      try { 
        layerManager0.get(1290);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Depth must be in the range [0,1)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.LayerManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1302, 1302);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      Supplier<BloomFilter> supplier0 = (Supplier<BloomFilter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(arrayCountingBloomFilter0).when(supplier0).get();
      LayerManager.Builder layerManager_Builder0 = LayerManager.builder();
      LayerManager.Builder layerManager_Builder1 = layerManager_Builder0.setSupplier(supplier0);
      LayerManager layerManager0 = layerManager_Builder1.build();
      BloomFilter bloomFilter0 = layerManager0.get(0);
      assertSame(bloomFilter0, arrayCountingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        LayerManager.Cleanup.onMaxSize((-2559));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'maxSize' must be greater than 0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.LayerManager$Cleanup", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        LayerManager.ExtendCheck.advanceOnSaturation((-541.84));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'maxN' must be greater than 0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.LayerManager$ExtendCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        LayerManager.ExtendCheck.advanceOnCount(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'breakAt' must be greater than 0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.LayerManager$ExtendCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LayerManager.Builder layerManager_Builder0 = LayerManager.builder();
      Shape shape0 = Shape.fromNM(1290, 1290);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      Supplier<BloomFilter> supplier0 = (Supplier<BloomFilter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(arrayCountingBloomFilter0).when(supplier0).get();
      LayerManager.Builder layerManager_Builder1 = layerManager_Builder0.setSupplier(supplier0);
      LayerManager layerManager0 = layerManager_Builder1.build();
      layerManager0.getTarget();
      assertEquals(1, layerManager0.getDepth());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LayerManager.Builder layerManager_Builder0 = LayerManager.builder();
      Shape shape0 = Shape.fromKM(1290, 1290);
      LayerManager.ExtendCheck.advanceOnSaturation(1290);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      Supplier<BloomFilter> supplier0 = (Supplier<BloomFilter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(arrayCountingBloomFilter0, (Object) null).when(supplier0).get();
      LayerManager.Builder layerManager_Builder1 = layerManager_Builder0.setSupplier(supplier0);
      LayerManager layerManager0 = layerManager_Builder1.build();
      // Undeclared exception!
      try { 
        layerManager0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // filterSupplier returned null.
         //
         verifyException("org.apache.commons.collections4.bloomfilter.LayerManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LayerManager.Builder layerManager_Builder0 = LayerManager.builder();
      Shape shape0 = Shape.fromNM(40, 40);
      Predicate<LayerManager> predicate0 = LayerManager.ExtendCheck.advanceOnPopulated();
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      byte[] byteArray0 = new byte[4];
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      LayerManager.Builder layerManager_Builder1 = layerManager_Builder0.setExtendCheck(predicate0);
      arrayCountingBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      Supplier<BloomFilter> supplier0 = (Supplier<BloomFilter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(arrayCountingBloomFilter0, simpleBloomFilter0).when(supplier0).get();
      layerManager_Builder1.setSupplier(supplier0);
      LayerManager layerManager0 = layerManager_Builder0.build();
      layerManager0.getTarget();
      assertEquals(2, layerManager0.getDepth());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LayerManager.Builder layerManager_Builder0 = LayerManager.builder();
      Shape shape0 = Shape.fromNM(92, 92);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      Supplier<BloomFilter> supplier0 = (Supplier<BloomFilter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(arrayCountingBloomFilter0).when(supplier0).get();
      layerManager_Builder0.setSupplier(supplier0);
      LayerManager layerManager0 = layerManager_Builder0.build();
      // Undeclared exception!
      try { 
        layerManager0.forEachBloomFilter((Predicate<BloomFilter>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.LayerManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Consumer<LinkedList<BloomFilter>> consumer0 = LayerManager.Cleanup.noCleanup();
      assertNotNull(consumer0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Predicate<LayerManager> predicate0 = LayerManager.ExtendCheck.neverAdvance();
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LayerManager.Builder layerManager_Builder0 = LayerManager.builder();
      Shape shape0 = Shape.fromNM(1290, 1290);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      Supplier<BloomFilter> supplier0 = (Supplier<BloomFilter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(arrayCountingBloomFilter0).when(supplier0).get();
      LayerManager.Builder layerManager_Builder1 = layerManager_Builder0.setSupplier(supplier0);
      LayerManager layerManager0 = layerManager_Builder1.build();
      Predicate<BloomFilter> predicate0 = Predicate.isEqual((Object) layerManager_Builder0);
      boolean boolean0 = layerManager0.forEachBloomFilter(predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LayerManager.Builder layerManager_Builder0 = LayerManager.builder();
      Shape shape0 = Shape.fromNM(40, 40);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      Supplier<BloomFilter> supplier0 = (Supplier<BloomFilter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(arrayCountingBloomFilter0).when(supplier0).get();
      layerManager_Builder0.setSupplier(supplier0);
      LayerManager layerManager0 = layerManager_Builder0.build();
      Predicate<BloomFilter> predicate0 = Predicate.isEqual((Object) arrayCountingBloomFilter0);
      boolean boolean0 = layerManager0.forEachBloomFilter(predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LayerManager.Builder layerManager_Builder0 = LayerManager.builder();
      Shape shape0 = Shape.fromNM(1, 1);
      Predicate<LayerManager> predicate0 = LayerManager.ExtendCheck.advanceOnCount(1);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      Supplier<BloomFilter> supplier0 = (Supplier<BloomFilter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(arrayCountingBloomFilter0, (Object) null).when(supplier0).get();
      LayerManager.Builder layerManager_Builder1 = layerManager_Builder0.setExtendCheck(predicate0);
      layerManager_Builder1.setSupplier(supplier0);
      LayerManager layerManager0 = layerManager_Builder0.build();
      // Undeclared exception!
      try { 
        layerManager0.getTarget();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // filterSupplier returned null.
         //
         verifyException("org.apache.commons.collections4.bloomfilter.LayerManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LayerManager.Builder layerManager_Builder0 = LayerManager.builder();
      Shape shape0 = Shape.fromNM(1, 1);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      Supplier<BloomFilter> supplier0 = (Supplier<BloomFilter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(arrayCountingBloomFilter0).when(supplier0).get();
      layerManager_Builder0.setSupplier(supplier0);
      LayerManager layerManager0 = layerManager_Builder0.build();
      // Undeclared exception!
      try { 
        layerManager0.get(1);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Depth must be in the range [0,1)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.LayerManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LayerManager.Builder layerManager_Builder0 = LayerManager.builder();
      Shape shape0 = Shape.fromKM(1302, 1302);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      Supplier<BloomFilter> supplier0 = (Supplier<BloomFilter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(arrayCountingBloomFilter0).when(supplier0).get();
      LayerManager.Builder layerManager_Builder1 = layerManager_Builder0.setSupplier(supplier0);
      LayerManager layerManager0 = layerManager_Builder1.build();
      // Undeclared exception!
      try { 
        layerManager0.get((-154));
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Depth must be in the range [0,1)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.LayerManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LayerManager.Builder layerManager_Builder0 = LayerManager.builder();
      Shape shape0 = Shape.fromKM(1290, 1290);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      Supplier<BloomFilter> supplier0 = (Supplier<BloomFilter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(arrayCountingBloomFilter0).when(supplier0).get();
      LayerManager.Builder layerManager_Builder1 = layerManager_Builder0.setSupplier(supplier0);
      LayerManager layerManager0 = layerManager_Builder1.build();
      LayerManager layerManager1 = layerManager0.copy();
      assertNotSame(layerManager1, layerManager0);
      assertEquals(1, layerManager1.getDepth());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LayerManager.Builder layerManager_Builder0 = LayerManager.builder();
      Shape shape0 = Shape.fromNM(33, 33);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      byte[] byteArray0 = new byte[4];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      arrayCountingBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      Supplier<BloomFilter> supplier0 = (Supplier<BloomFilter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(arrayCountingBloomFilter0, (Object) null).when(supplier0).get();
      LayerManager.Builder layerManager_Builder1 = layerManager_Builder0.setSupplier(supplier0);
      Consumer<LinkedList<BloomFilter>> consumer0 = LayerManager.Cleanup.removeEmptyTarget();
      LayerManager.Builder layerManager_Builder2 = layerManager_Builder1.setCleanup(consumer0);
      LayerManager layerManager0 = layerManager_Builder2.build();
      // Undeclared exception!
      try { 
        layerManager0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // filterSupplier returned null.
         //
         verifyException("org.apache.commons.collections4.bloomfilter.LayerManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LayerManager.Builder layerManager_Builder0 = LayerManager.builder();
      Shape shape0 = Shape.fromNM(108, 108);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      Supplier<BloomFilter> supplier0 = (Supplier<BloomFilter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(arrayCountingBloomFilter0, (Object) null).when(supplier0).get();
      layerManager_Builder0.setSupplier(supplier0);
      Consumer<LinkedList<BloomFilter>> consumer0 = LayerManager.Cleanup.onMaxSize(108);
      LayerManager.Builder layerManager_Builder1 = layerManager_Builder0.setCleanup(consumer0);
      LayerManager layerManager0 = layerManager_Builder1.build();
      // Undeclared exception!
      try { 
        layerManager0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // filterSupplier returned null.
         //
         verifyException("org.apache.commons.collections4.bloomfilter.LayerManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        LayerManager.Cleanup.onMaxSize(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'maxSize' must be greater than 0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.LayerManager$Cleanup", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LayerManager.Builder layerManager_Builder0 = LayerManager.builder();
      Shape shape0 = Shape.fromNM(1, 1);
      Predicate<LayerManager> predicate0 = LayerManager.ExtendCheck.advanceOnSaturation(1);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      byte[] byteArray0 = new byte[1];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      arrayCountingBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      Supplier<BloomFilter> supplier0 = (Supplier<BloomFilter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(arrayCountingBloomFilter0, (Object) null).when(supplier0).get();
      LayerManager.Builder layerManager_Builder1 = layerManager_Builder0.setExtendCheck(predicate0);
      LayerManager.Builder layerManager_Builder2 = layerManager_Builder1.setSupplier(supplier0);
      LayerManager layerManager0 = layerManager_Builder2.build();
      // Undeclared exception!
      try { 
        layerManager0.getTarget();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // filterSupplier returned null.
         //
         verifyException("org.apache.commons.collections4.bloomfilter.LayerManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LayerManager.Builder layerManager_Builder0 = LayerManager.builder();
      Shape shape0 = Shape.fromNM(40, 40);
      Predicate<LayerManager> predicate0 = LayerManager.ExtendCheck.advanceOnSaturation(40);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      Supplier<BloomFilter> supplier0 = (Supplier<BloomFilter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(arrayCountingBloomFilter0).when(supplier0).get();
      LayerManager.Builder layerManager_Builder1 = layerManager_Builder0.setExtendCheck(predicate0);
      layerManager_Builder1.setSupplier(supplier0);
      LayerManager layerManager0 = layerManager_Builder0.build();
      layerManager0.getTarget();
      assertEquals(1, layerManager0.getDepth());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        LayerManager.ExtendCheck.advanceOnSaturation(0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'maxN' must be greater than 0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.LayerManager$ExtendCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LayerManager.Builder layerManager_Builder0 = LayerManager.builder();
      Shape shape0 = Shape.fromNM(92, 92);
      Predicate<LayerManager> predicate0 = LayerManager.ExtendCheck.advanceOnCount(92);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      Supplier<BloomFilter> supplier0 = (Supplier<BloomFilter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(arrayCountingBloomFilter0).when(supplier0).get();
      layerManager_Builder0.setExtendCheck(predicate0);
      layerManager_Builder0.setSupplier(supplier0);
      LayerManager layerManager0 = layerManager_Builder0.build();
      layerManager0.getTarget();
      assertEquals(1, layerManager0.getDepth());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        LayerManager.ExtendCheck.advanceOnCount((-549));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'breakAt' must be greater than 0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.LayerManager$ExtendCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LayerManager.Builder layerManager_Builder0 = LayerManager.builder();
      Shape shape0 = Shape.fromNM(6, 6);
      Predicate<LayerManager> predicate0 = LayerManager.ExtendCheck.advanceOnPopulated();
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      Supplier<BloomFilter> supplier0 = (Supplier<BloomFilter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(arrayCountingBloomFilter0).when(supplier0).get();
      LayerManager.Builder layerManager_Builder1 = layerManager_Builder0.setExtendCheck(predicate0);
      layerManager_Builder0.setSupplier(supplier0);
      LayerManager layerManager0 = layerManager_Builder1.build();
      layerManager0.getTarget();
      assertEquals(1, layerManager0.getDepth());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LayerManager.Builder layerManager_Builder0 = LayerManager.builder();
      Consumer<LinkedList<BloomFilter>> consumer0 = LayerManager.Cleanup.removeEmptyTarget();
      LayerManager.Builder layerManager_Builder1 = layerManager_Builder0.setCleanup(consumer0);
      Shape shape0 = Shape.fromKM(1302, 1302);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      Supplier<BloomFilter> supplier0 = (Supplier<BloomFilter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(arrayCountingBloomFilter0, arrayCountingBloomFilter0).when(supplier0).get();
      layerManager_Builder1.setSupplier(supplier0);
      LayerManager layerManager0 = layerManager_Builder0.build();
      layerManager0.next();
      assertEquals(1, layerManager0.getDepth());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LayerManager.Builder layerManager_Builder0 = LayerManager.builder();
      Shape shape0 = Shape.fromNM(1290, 1290);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      Supplier<BloomFilter> supplier0 = (Supplier<BloomFilter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(arrayCountingBloomFilter0).when(supplier0).get();
      LayerManager.Builder layerManager_Builder1 = layerManager_Builder0.setSupplier(supplier0);
      LayerManager layerManager0 = layerManager_Builder1.build();
      int int0 = layerManager0.getDepth();
      assertEquals(1, int0);
  }
}
