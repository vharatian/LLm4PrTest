/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 09:30:19 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter;
import org.apache.commons.collections4.bloomfilter.BitMapProducer;
import org.apache.commons.collections4.bloomfilter.BloomFilter;
import org.apache.commons.collections4.bloomfilter.CountingLongPredicate;
import org.apache.commons.collections4.bloomfilter.EnhancedDoubleHasher;
import org.apache.commons.collections4.bloomfilter.Hasher;
import org.apache.commons.collections4.bloomfilter.IndexFilter;
import org.apache.commons.collections4.bloomfilter.IndexProducer;
import org.apache.commons.collections4.bloomfilter.LayeredBloomFilter;
import org.apache.commons.collections4.bloomfilter.LongBiPredicate;
import org.apache.commons.collections4.bloomfilter.Shape;
import org.apache.commons.collections4.bloomfilter.SimpleBloomFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SimpleBloomFilter_ESTest extends SimpleBloomFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Shape shape0 = Shape.fromKM(162, 162);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-44);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      boolean boolean0 = simpleBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      boolean boolean1 = simpleBloomFilter0.isEmpty();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1, 1);
      boolean boolean0 = simpleBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      int int0 = simpleBloomFilter0.cardinality();
      assertEquals(1, int0);
      
      boolean boolean1 = simpleBloomFilter0.isEmpty();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1, 1);
      boolean boolean0 = simpleBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      boolean boolean1 = simpleBloomFilter0.merge((BloomFilter) simpleBloomFilter0);
      assertEquals(0, simpleBloomFilter0.characteristics());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Shape shape0 = Shape.fromKM(162, 162);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      int[] intArray0 = new int[8];
      intArray0[0] = 1114;
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.merge(indexProducer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // IndexProducer should only send values in the range[0,162)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SimpleBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      boolean boolean0 = simpleBloomFilter0.merge((IndexProducer) simpleBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      Shape shape1 = simpleBloomFilter0.getShape();
      assertEquals(0.6931471805599453, shape1.estimateMaxN(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1, 1);
      boolean boolean0 = simpleBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      IndexFilter.ArrayTracker indexFilter_ArrayTracker0 = new IndexFilter.ArrayTracker(shape0);
      IntPredicate intPredicate0 = indexFilter_ArrayTracker0.negate();
      boolean boolean1 = simpleBloomFilter0.forEachIndex(intPredicate0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1702, 1702);
      shape0.toString();
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      long[] longArray0 = new long[0];
      BitMapProducer.fromBitMapArray(longArray0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      ArrayCountingBloomFilter arrayCountingBloomFilter1 = arrayCountingBloomFilter0.copy();
      simpleBloomFilter0.estimateIntersection(arrayCountingBloomFilter1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)92;
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      boolean boolean0 = simpleBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      LayeredBloomFilter layeredBloomFilter0 = LayeredBloomFilter.fixed(shape0, 448);
      BitMapProducer.fromBitMapArray(longArray0);
      BloomFilter bloomFilter0 = layeredBloomFilter0.flatten();
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(longBiPredicate0).test(anyLong() , anyLong());
      boolean boolean1 = simpleBloomFilter0.forEachBitMapPair(bloomFilter0, longBiPredicate0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, bloomFilter0.characteristics());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      SimpleBloomFilter simpleBloomFilter1 = simpleBloomFilter0.copy();
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1, 1);
      boolean boolean0 = simpleBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      boolean boolean1 = simpleBloomFilter1.contains((IndexProducer) simpleBloomFilter0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1702, 1702);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      int int0 = simpleBloomFilter0.characteristics();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      int int0 = simpleBloomFilter0.cardinality();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1, 1);
      boolean boolean0 = simpleBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      assertTrue(boolean0);
      
      simpleBloomFilter0.cardinality();
      int int0 = simpleBloomFilter0.cardinality();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Shape shape0 = Shape.fromKM(59544, 2642246);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      simpleBloomFilter0.merge((IndexProducer) simpleBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Shape shape0 = Shape.fromKM(158, 158);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.merge((IndexProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // indexProducer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Shape shape0 = Shape.fromKM(78721, 78721);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(78721, 78721);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      simpleBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Shape shape0 = Shape.fromKM(170, 170);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.merge((Hasher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // hasher
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Shape shape0 = Shape.fromKM(78721, 78721);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      simpleBloomFilter0.merge((BloomFilter) arrayCountingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Shape shape0 = Shape.fromKM(162, 162);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.merge((BloomFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Shape shape0 = Shape.fromKM(3781, 3781);
      Shape shape1 = Shape.fromKM(626, 626);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape1);
      LayeredBloomFilter layeredBloomFilter0 = LayeredBloomFilter.fixed(shape0, 3781);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.merge((BloomFilter) layeredBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BitMapProducer should send at most 10 maps
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SimpleBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Shape shape0 = Shape.fromKM(78721, 78721);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      simpleBloomFilter0.merge((BitMapProducer) arrayCountingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Shape shape0 = Shape.fromNM(123, 123);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.merge((BitMapProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // bitMapProducer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2642274, 2642274);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      IndexFilter.BitMapTracker indexFilter_BitMapTracker0 = new IndexFilter.BitMapTracker(shape0);
      // Undeclared exception!
      simpleBloomFilter0.forEachIndex(indexFilter_BitMapTracker0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(15, 15, 15);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.forEachIndex((IntPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // consumer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Shape shape0 = Shape.fromKM(96, 96);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(96, 96);
      simpleBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      Shape shape1 = Shape.fromNM(96, 96);
      IndexFilter.BitMapTracker indexFilter_BitMapTracker0 = new IndexFilter.BitMapTracker(shape1);
      IndexFilter.ArrayTracker indexFilter_ArrayTracker0 = new IndexFilter.ArrayTracker(shape1);
      IntPredicate intPredicate0 = indexFilter_ArrayTracker0.or(indexFilter_BitMapTracker0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.forEachIndex(intPredicate0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.collections4.bloomfilter.IndexFilter$ArrayTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Shape shape0 = Shape.fromNM(6, 6);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.forEachBitMapPair(simpleBloomFilter0, (LongBiPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2642246, 2642246);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      long[] longArray0 = new long[7];
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(longBiPredicate0).test(anyLong() , anyLong());
      CountingLongPredicate countingLongPredicate0 = new CountingLongPredicate(longArray0, longBiPredicate0);
      LongPredicate longPredicate0 = countingLongPredicate0.negate();
      // Undeclared exception!
      simpleBloomFilter0.forEachBitMap(longPredicate0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Shape shape0 = Shape.fromNM(162, 162);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.forEachBitMap((LongPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // consumer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Shape shape0 = Shape.fromKM(59544, 2642246);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      simpleBloomFilter0.contains((IndexProducer) simpleBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Shape shape0 = Shape.fromKM(158, 158);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.contains((IndexProducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SimpleBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Shape shape0 = Shape.fromNM(157, 157);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      int[] intArray0 = new int[1];
      intArray0[0] = 522;
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.contains(indexProducer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.collections4.bloomfilter.BitMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleBloomFilter simpleBloomFilter0 = null;
      try {
        simpleBloomFilter0 = new SimpleBloomFilter((Shape) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // shape
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      long[] longArray0 = simpleBloomFilter0.asBitMapArray();
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(longBiPredicate0).test(anyLong() , anyLong());
      CountingLongPredicate countingLongPredicate0 = new CountingLongPredicate(longArray0, longBiPredicate0);
      boolean boolean0 = simpleBloomFilter0.forEachBitMap(countingLongPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      boolean boolean0 = simpleBloomFilter0.merge((BitMapProducer) simpleBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1702, 1702);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      long[] longArray0 = new long[0];
      BitMapProducer bitMapProducer0 = BitMapProducer.fromBitMapArray(longArray0);
      boolean boolean0 = simpleBloomFilter0.merge(bitMapProducer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      IndexFilter.ArrayTracker indexFilter_ArrayTracker0 = new IndexFilter.ArrayTracker(shape0);
      boolean boolean0 = simpleBloomFilter0.forEachIndex(indexFilter_ArrayTracker0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Shape shape0 = Shape.fromKM(39, 39);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      boolean boolean0 = simpleBloomFilter0.merge((BloomFilter) simpleBloomFilter0);
      boolean boolean1 = simpleBloomFilter0.isEmpty();
      assertEquals(0, simpleBloomFilter0.characteristics());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      boolean boolean0 = simpleBloomFilter0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Shape shape0 = Shape.fromKM(259, 259);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      long[] longArray0 = new long[5];
      longArray0[4] = (long) 259;
      BitMapProducer bitMapProducer0 = BitMapProducer.fromBitMapArray(longArray0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.merge(bitMapProducer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BitMapProducer set a bit higher than the limit for the shape: 259
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SimpleBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Shape shape0 = Shape.fromNM(8, 8);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      int[] intArray0 = new int[1];
      intArray0[0] = 8;
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.merge(indexProducer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // IndexProducer should only send values in the range[0,8)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SimpleBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1468, 1468);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      int[] intArray0 = new int[6];
      intArray0[1] = (-1606);
      IndexProducer indexProducer0 = IndexProducer.fromIndexArray(intArray0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.merge(indexProducer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // IndexProducer should only send values in the range[0,1468)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SimpleBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Shape shape0 = Shape.fromNM(118, 118);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      long[] longArray0 = new long[0];
      BitMapProducer bitMapProducer0 = BitMapProducer.fromBitMapArray(longArray0);
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(longBiPredicate0).test(anyLong() , anyLong());
      boolean boolean0 = simpleBloomFilter0.forEachBitMapPair(bitMapProducer0, longBiPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      long[] longArray0 = simpleBloomFilter0.asBitMapArray();
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(longBiPredicate0).test(anyLong() , anyLong());
      CountingLongPredicate countingLongPredicate0 = new CountingLongPredicate(longArray0, longBiPredicate0);
      boolean boolean0 = simpleBloomFilter0.forEachBitMap(countingLongPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      simpleBloomFilter0.clear();
      assertEquals(0, simpleBloomFilter0.characteristics());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      boolean boolean0 = simpleBloomFilter0.contains((IndexProducer) simpleBloomFilter0);
      assertTrue(boolean0);
  }
}
