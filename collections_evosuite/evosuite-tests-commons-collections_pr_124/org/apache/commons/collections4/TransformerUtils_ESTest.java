/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 18:08:44 GMT 2025
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.TransformerUtils;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NOPTransformer;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class TransformerUtils_ESTest extends TransformerUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      IdentityPredicate<Boolean> identityPredicate0 = new IdentityPredicate<Boolean>(boolean0);
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) null, (Object[]) null);
      Transformer<Boolean, Object> transformer1 = TransformerUtils.switchTransformer((Predicate<? super Boolean>) identityPredicate0, (Transformer<? super Boolean, ?>) transformer0, (Transformer<? super Boolean, ?>) null);
      assertNotNull(transformer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      Transformer<Object, Boolean> transformer1 = TransformerUtils.exceptionTransformer();
      // Undeclared exception!
      try { 
        TransformerUtils.ifTransformer((Predicate<? super Object>) null, (Transformer<? super Object, ? extends Boolean>) transformer0, (Transformer<? super Object, ? extends Boolean>) transformer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Object, Transformer<Object, Boolean>> hashMap0 = new HashMap<Object, Transformer<Object, Boolean>>();
      Object object0 = new Object();
      hashMap0.put(object0, (Transformer<Object, Boolean>) null);
      // Undeclared exception!
      try { 
        TransformerUtils.switchMapTransformer((Map<Object, Transformer<Object, Boolean>>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The transformer array must not contain a null transformer, index 0 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      predicateArray1[0] = (Predicate<Object>) onePredicate0;
      predicateArray1[1] = (Predicate<Object>) onePredicate0;
      predicateArray1[2] = (Predicate<Object>) onePredicate0;
      Transformer<Object, Boolean> transformer0 = TransformerUtils.nullTransformer();
      Transformer<Object, Boolean>[] transformerArray0 = (Transformer<Object, Boolean>[]) Array.newInstance(Transformer.class, 3);
      transformerArray0[0] = transformer0;
      transformerArray0[1] = transformer0;
      transformerArray0[2] = transformer0;
      InvokerTransformer<Object, Boolean> invokerTransformer0 = new InvokerTransformer<Object, Boolean>((String) null, (Class<?>[]) null, predicateArray1);
      Transformer<Object, Boolean> transformer1 = TransformerUtils.switchTransformer((Predicate<? super Object>[]) predicateArray1, (Transformer<? super Object, ? extends Boolean>[]) transformerArray0, (Transformer<? super Object, ? extends Boolean>) invokerTransformer0);
      assertFalse(transformer1.equals((Object)transformer0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Predicate<Boolean>[] predicateArray0 = (Predicate<Boolean>[]) Array.newInstance(Predicate.class, 0);
      Transformer<Object, Predicate<Boolean>>[] transformerArray0 = (Transformer<Object, Predicate<Boolean>>[]) Array.newInstance(Transformer.class, 0);
      Transformer<Boolean, Predicate<Boolean>> transformer0 = TransformerUtils.switchTransformer((Predicate<? super Boolean>[]) predicateArray0, (Transformer<? super Boolean, ? extends Predicate<Boolean>>[]) transformerArray0);
      assertNotNull(transformer0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Transformer<Object, Object> transformer0 = TransformerUtils.nopTransformer();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Transformer<Class<Boolean>, Object> transformer1 = TransformerUtils.switchTransformer((Predicate<? super Class<Boolean>>) predicate0, (Transformer<? super Class<Boolean>, ?>) transformer0, (Transformer<? super Class<Boolean>, ?>) transformer0);
      assertNotNull(transformer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      Transformer<Class<Object>, Class<Boolean>> transformer0 = TransformerUtils.invokerTransformer(":0LZ`Xs&Vd:k", (Class<?>[]) classArray0, (Object[]) classArray0);
      assertNotNull(transformer0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Transformer<Class<?>, Object> transformer0 = TransformerUtils.instantiateTransformer((Class<?>[]) null, (Object[]) null);
      assertNotNull(transformer0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      Transformer<Object, Object> transformer0 = TransformerUtils.cloneTransformer();
      Transformer<Class<Object>, Object> transformer1 = TransformerUtils.ifTransformer((Predicate<? super Class<Object>>) predicate0, (Transformer<? super Class<Object>, ?>) transformer0, (Transformer<? super Class<Object>, ?>) transformer0);
      assertNotNull(transformer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Predicate<Boolean> predicate0 = NotNullPredicate.notNullPredicate();
      Transformer<Boolean, Boolean> transformer0 = NOPTransformer.nopTransformer();
      Transformer<Boolean, Boolean> transformer1 = TransformerUtils.ifTransformer((Predicate<? super Boolean>) predicate0, (Transformer<? super Boolean, ? extends Boolean>) transformer0);
      assertFalse(transformer1.equals((Object)transformer0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Transformer<Boolean, Boolean>[] transformerArray0 = (Transformer<Boolean, Boolean>[]) Array.newInstance(Transformer.class, 0);
      Transformer<Boolean, Boolean> transformer0 = TransformerUtils.chainedTransformer((Transformer<? super Boolean, ? extends Boolean>[]) transformerArray0);
      assertNotNull(transformer0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Transformer<Object, Boolean>> linkedList0 = new LinkedList<Transformer<Object, Boolean>>();
      Transformer<Boolean, Boolean> transformer0 = TransformerUtils.chainedTransformer((Collection<? extends Transformer<? super Boolean, ? extends Boolean>>) linkedList0);
      assertNotNull(transformer0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Transformer<Class<Object>, Boolean> transformer0 = TransformerUtils.asTransformer((Predicate<? super Class<Object>>) uniquePredicate0);
      assertNotNull(transformer0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Boolean boolean0 = new Boolean("");
      ConstantFactory<Boolean> constantFactory0 = new ConstantFactory<Boolean>(boolean0);
      Transformer<Object, Object> transformer0 = TransformerUtils.asTransformer((Factory<?>) constantFactory0);
      assertNotNull(transformer0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Closure<Boolean> closure0 = ExceptionClosure.exceptionClosure();
      Transformer<Boolean, Boolean> transformer0 = TransformerUtils.asTransformer((Closure<? super Boolean>) closure0);
      assertNotNull(transformer0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Transformer<Object, Boolean>[] transformerArray0 = (Transformer<Object, Boolean>[]) Array.newInstance(Transformer.class, 1);
      Transformer<Object, Boolean> transformer0 = TransformerUtils.invokerTransformer("`c[sLD~]|L");
      transformerArray0[0] = transformer0;
      // Undeclared exception!
      try { 
        TransformerUtils.switchTransformer((Predicate<? super Class<Object>>[]) predicateArray0, (Transformer<? super Class<Object>, ?>[]) transformerArray0, (Transformer<? super Class<Object>, ?>) transformer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate and transformer arrays must be the same size
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) allPredicate0;
      Transformer<Object, Boolean>[] transformerArray0 = (Transformer<Object, Boolean>[]) Array.newInstance(Transformer.class, 0);
      // Undeclared exception!
      try { 
        TransformerUtils.switchTransformer((Predicate<? super Predicate<Object>>[]) predicateArray0, (Transformer<? super Predicate<Object>, ?>[]) transformerArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate and transformer arrays must be the same size
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        TransformerUtils.switchTransformer((Map<Predicate<Object>, Transformer<Object, Transformer<Predicate, Boolean>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The predicate and transformer map must not be null
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        TransformerUtils.invokerTransformer((String) null, (Class<?>[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The method to invoke must not be null
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        TransformerUtils.invokerTransformer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The method to invoke must not be null
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        TransformerUtils.switchMapTransformer((Map<Object, Transformer<Object, Class<Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The object and transformer map must not be null
         //
         verifyException("org.apache.commons.collections4.TransformerUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Boolean>[] classArray0 = (Class<Boolean>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
      try { 
        TransformerUtils.invokerTransformer("`;#Z{o|", (Class<?>[]) classArray0, (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter types must match the arguments
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Transformer<Object, Boolean> transformer0 = TransformerUtils.exceptionTransformer();
      // Undeclared exception!
      try { 
        TransformerUtils.ifTransformer((Predicate<? super Boolean>) null, (Transformer<? super Boolean, ? extends Boolean>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<Object, Predicate<Object>> hashMap0 = new HashMap<Object, Predicate<Object>>();
      Transformer<Object, Predicate<Object>> transformer0 = TransformerUtils.mapTransformer((Map<? super Object, ? extends Predicate<Object>>) hashMap0);
      assertNotNull(transformer0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Transformer<Boolean, Boolean> transformer0 = TransformerUtils.constantTransformer(boolean0);
      assertNotNull(transformer0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        TransformerUtils.asTransformer((Factory<? extends Transformer<Boolean, Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Factory must not be null
         //
         verifyException("org.apache.commons.collections4.functors.FactoryTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Transformer<Class<Boolean>, String> transformer0 = TransformerUtils.stringValueTransformer();
      assertNotNull(transformer0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Transformer<Object, Boolean>[] transformerArray0 = (Transformer<Object, Boolean>[]) Array.newInstance(Transformer.class, 1);
      Transformer<Object, Boolean> transformer0 = TransformerUtils.invokerTransformer("`c[sLD~]|L");
      // Undeclared exception!
      try { 
        TransformerUtils.switchTransformer((Predicate<? super Class<Object>>[]) predicateArray0, (Transformer<? super Class<Object>, ?>[]) transformerArray0, (Transformer<? super Class<Object>, ?>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The transformer array must not contain a null transformer, index 0 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        TransformerUtils.asTransformer((Closure<? super Transformer<Boolean, Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.functors.ClosureTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        TransformerUtils.chainedTransformer((Transformer<? super Boolean, ? extends Boolean>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The transformer array must not be null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
      try { 
        TransformerUtils.instantiateTransformer((Class<?>[]) classArray0, (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter types must match the arguments
         //
         verifyException("org.apache.commons.collections4.functors.InstantiateTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        TransformerUtils.chainedTransformer((Collection<? extends Transformer<? super Boolean, ? extends Boolean>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer collection must not be null
         //
         verifyException("org.apache.commons.collections4.functors.ChainedTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        TransformerUtils.asTransformer((Predicate<? super Boolean>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.functors.PredicateTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Transformer<Object, Boolean> transformer0 = TransformerUtils.exceptionTransformer();
      // Undeclared exception!
      try { 
        TransformerUtils.switchTransformer((Predicate<? super Object>) null, (Transformer<? super Object, ? extends Boolean>) transformer0, (Transformer<? super Object, ? extends Boolean>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The predicate array must not contain a null predicate, index 0 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Transformer<Object, Boolean>[] transformerArray0 = (Transformer<Object, Boolean>[]) Array.newInstance(Transformer.class, 0);
      // Undeclared exception!
      try { 
        TransformerUtils.switchTransformer((Predicate<? super Object>[]) null, (Transformer<? super Object, ? extends Boolean>[]) transformerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The predicate array must not be null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }
}
