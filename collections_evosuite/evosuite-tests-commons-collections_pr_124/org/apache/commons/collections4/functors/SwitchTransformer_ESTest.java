/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 18:10:58 GMT 2025
 */

package org.apache.commons.collections4.functors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedTransformer;
import org.apache.commons.collections4.functors.CloneTransformer;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateTransformer;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SwitchTransformer_ESTest extends SwitchTransformer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Predicate<InstanceofPredicate>[] predicateArray0 = (Predicate<InstanceofPredicate>[]) Array.newInstance(Predicate.class, 5);
      Predicate<InstanceofPredicate> predicate0 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[0] = predicate0;
      NullIsExceptionPredicate<InstanceofPredicate> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<InstanceofPredicate>(predicate0);
      predicateArray0[1] = (Predicate<InstanceofPredicate>) nullIsExceptionPredicate0;
      Class<Boolean> class0 = Boolean.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IdentityPredicate<InstanceofPredicate> identityPredicate0 = new IdentityPredicate<InstanceofPredicate>(instanceofPredicate0);
      predicateArray0[2] = (Predicate<InstanceofPredicate>) identityPredicate0;
      NonePredicate<InstanceofPredicate> nonePredicate0 = new NonePredicate<InstanceofPredicate>(predicateArray0);
      predicateArray0[3] = (Predicate<InstanceofPredicate>) nonePredicate0;
      AllPredicate<InstanceofPredicate> allPredicate0 = new AllPredicate<InstanceofPredicate>(predicateArray0);
      predicateArray0[4] = (Predicate<InstanceofPredicate>) allPredicate0;
      Transformer<InstanceofPredicate, Boolean>[] transformerArray0 = (Transformer<InstanceofPredicate, Boolean>[]) Array.newInstance(Transformer.class, 2);
      HashMap<InstanceofPredicate, Boolean> hashMap0 = new HashMap<InstanceofPredicate, Boolean>();
      Transformer<InstanceofPredicate, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super InstanceofPredicate, ? extends Boolean>) hashMap0);
      transformerArray0[0] = transformer0;
      transformerArray0[1] = transformer0;
      // Undeclared exception!
      try { 
        SwitchTransformer.switchTransformer((Predicate<? super InstanceofPredicate>[]) predicateArray0, (Transformer<? super InstanceofPredicate, ? extends Boolean>[]) transformerArray0, (Transformer<? super InstanceofPredicate, ? extends Boolean>) transformerArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate and transformer arrays must be the same size
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Predicate<InstantiateTransformer<InstanceofPredicate>>[] predicateArray0 = (Predicate<InstantiateTransformer<InstanceofPredicate>>[]) Array.newInstance(Predicate.class, 1);
      Predicate<InstantiateTransformer<InstanceofPredicate>> predicate0 = TruePredicate.truePredicate();
      predicateArray0[0] = predicate0;
      Transformer<InstantiateTransformer<InstanceofPredicate>, InstanceofPredicate>[] transformerArray0 = (Transformer<InstantiateTransformer<InstanceofPredicate>, InstanceofPredicate>[]) Array.newInstance(Transformer.class, 4);
      Class<Boolean> class0 = Boolean.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ConstantTransformer<InstantiateTransformer<InstanceofPredicate>, InstanceofPredicate> constantTransformer0 = new ConstantTransformer<InstantiateTransformer<InstanceofPredicate>, InstanceofPredicate>(instanceofPredicate0);
      transformerArray0[0] = (Transformer<InstantiateTransformer<InstanceofPredicate>, InstanceofPredicate>) constantTransformer0;
      SwitchTransformer<InstantiateTransformer<InstanceofPredicate>, InstanceofPredicate> switchTransformer0 = new SwitchTransformer<InstantiateTransformer<InstanceofPredicate>, InstanceofPredicate>(predicateArray0, transformerArray0, constantTransformer0);
      Class<InstanceofPredicate>[] classArray0 = (Class<InstanceofPredicate>[]) Array.newInstance(Class.class, 7);
      InstantiateTransformer<InstanceofPredicate> instantiateTransformer0 = new InstantiateTransformer<InstanceofPredicate>(classArray0, classArray0);
      InstanceofPredicate instanceofPredicate1 = switchTransformer0.transform(instantiateTransformer0);
      assertSame(instanceofPredicate0, instanceofPredicate1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Transformer<InstanceofPredicate, InstanceofPredicate>[] transformerArray0 = (Transformer<InstanceofPredicate, InstanceofPredicate>[]) Array.newInstance(Transformer.class, 2);
      SwitchTransformer<InstanceofPredicate, InstanceofPredicate> switchTransformer0 = new SwitchTransformer<InstanceofPredicate, InstanceofPredicate>((Predicate<? super InstanceofPredicate>[]) null, transformerArray0, transformerArray0[0]);
      Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>[] transformerArray1 = switchTransformer0.getTransformers();
      assertEquals(2, transformerArray1.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Factory<InstantiateTransformer<InstanceofPredicate>> factory0 = ExceptionFactory.exceptionFactory();
      Predicate<InstantiateTransformer<InstanceofPredicate>>[] predicateArray0 = (Predicate<InstantiateTransformer<InstanceofPredicate>>[]) Array.newInstance(Predicate.class, 1);
      Transformer<InstantiateTransformer<InstanceofPredicate>, InstantiateTransformer<InstanceofPredicate>>[] transformerArray0 = (Transformer<InstantiateTransformer<InstanceofPredicate>, InstantiateTransformer<InstanceofPredicate>>[]) Array.newInstance(Transformer.class, 0);
      Transformer<InstantiateTransformer<InstanceofPredicate>, InstantiateTransformer<InstanceofPredicate>> transformer0 = ChainedTransformer.chainedTransformer((Transformer<? super InstantiateTransformer<InstanceofPredicate>, ? extends InstantiateTransformer<InstanceofPredicate>>[]) transformerArray0);
      FactoryTransformer<InstantiateTransformer<InstanceofPredicate>, InstantiateTransformer<InstanceofPredicate>> factoryTransformer0 = new FactoryTransformer<InstantiateTransformer<InstanceofPredicate>, InstantiateTransformer<InstanceofPredicate>>(factory0);
      IfTransformer<InstantiateTransformer<InstanceofPredicate>, InstantiateTransformer<InstanceofPredicate>> ifTransformer0 = new IfTransformer<InstantiateTransformer<InstanceofPredicate>, InstantiateTransformer<InstanceofPredicate>>(instanceofPredicate0, transformer0, factoryTransformer0);
      SwitchTransformer<InstantiateTransformer<InstanceofPredicate>, InstantiateTransformer<InstanceofPredicate>> switchTransformer0 = new SwitchTransformer<InstantiateTransformer<InstanceofPredicate>, InstantiateTransformer<InstanceofPredicate>>(predicateArray0, transformerArray0, ifTransformer0);
      Transformer<? super InstantiateTransformer<InstanceofPredicate>, ? extends InstantiateTransformer<InstanceofPredicate>>[] transformerArray1 = switchTransformer0.getTransformers();
      assertEquals(0, transformerArray1.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SwitchTransformer<InstanceofPredicate, InstanceofPredicate> switchTransformer0 = new SwitchTransformer<InstanceofPredicate, InstanceofPredicate>((Predicate<? super InstanceofPredicate>[]) null, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>[]) null, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) null);
      Predicate<? super InstanceofPredicate>[] predicateArray0 = switchTransformer0.getPredicates();
      assertNull(predicateArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultEquator<InstanceofPredicate> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<InstanceofPredicate> equalPredicate0 = new EqualPredicate<InstanceofPredicate>((InstanceofPredicate) null, defaultEquator0);
      IfTransformer<InstanceofPredicate, InstanceofPredicate> ifTransformer0 = new IfTransformer<InstanceofPredicate, InstanceofPredicate>(equalPredicate0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) null, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) null);
      Predicate<InstanceofPredicate>[] predicateArray0 = (Predicate<InstanceofPredicate>[]) Array.newInstance(Predicate.class, 1);
      SwitchTransformer<InstanceofPredicate, InstanceofPredicate> switchTransformer0 = new SwitchTransformer<InstanceofPredicate, InstanceofPredicate>(predicateArray0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>[]) null, ifTransformer0);
      Predicate<? super InstanceofPredicate>[] predicateArray1 = switchTransformer0.getPredicates();
      assertEquals(1, predicateArray1.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Predicate<InstanceofPredicate>[] predicateArray0 = (Predicate<InstanceofPredicate>[]) Array.newInstance(Predicate.class, 0);
      Transformer<InstanceofPredicate, InstanceofPredicate> transformer0 = ExceptionTransformer.exceptionTransformer();
      SwitchTransformer<InstanceofPredicate, InstanceofPredicate> switchTransformer0 = new SwitchTransformer<InstanceofPredicate, InstanceofPredicate>(predicateArray0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>[]) null, transformer0);
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        switchTransformer0.transform(instanceofPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ConstantTransformer<InstanceofPredicate, InstanceofPredicate> constantTransformer0 = new ConstantTransformer<InstanceofPredicate, InstanceofPredicate>(instanceofPredicate0);
      Predicate<InstanceofPredicate>[] predicateArray0 = (Predicate<InstanceofPredicate>[]) Array.newInstance(Predicate.class, 2);
      Predicate<InstanceofPredicate> predicate0 = UniquePredicate.uniquePredicate();
      predicateArray0[0] = predicate0;
      Transformer<InstanceofPredicate, InstanceofPredicate>[] transformerArray0 = (Transformer<InstanceofPredicate, InstanceofPredicate>[]) Array.newInstance(Transformer.class, 0);
      SwitchTransformer<InstanceofPredicate, InstanceofPredicate> switchTransformer0 = new SwitchTransformer<InstanceofPredicate, InstanceofPredicate>(predicateArray0, transformerArray0, constantTransformer0);
      // Undeclared exception!
      try { 
        switchTransformer0.transform(instanceofPredicate0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Predicate<Boolean>[] predicateArray0 = (Predicate<Boolean>[]) Array.newInstance(Predicate.class, 0);
      Transformer<Boolean, InstanceofPredicate>[] transformerArray0 = (Transformer<Boolean, InstanceofPredicate>[]) Array.newInstance(Transformer.class, 1);
      // Undeclared exception!
      try { 
        SwitchTransformer.switchTransformer((Predicate<? super Boolean>[]) predicateArray0, (Transformer<? super Boolean, ? extends InstanceofPredicate>[]) transformerArray0, (Transformer<? super Boolean, ? extends InstanceofPredicate>) transformerArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The transformer array must not contain a null transformer, index 0 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Predicate<InstantiateTransformer<InstanceofPredicate>>[] predicateArray0 = (Predicate<InstantiateTransformer<InstanceofPredicate>>[]) Array.newInstance(Predicate.class, 1);
      Predicate<InstantiateTransformer<InstanceofPredicate>> predicate0 = TruePredicate.truePredicate();
      predicateArray0[0] = predicate0;
      Transformer<InstantiateTransformer<InstanceofPredicate>, InstanceofPredicate>[] transformerArray0 = (Transformer<InstantiateTransformer<InstanceofPredicate>, InstanceofPredicate>[]) Array.newInstance(Transformer.class, 4);
      SwitchTransformer<InstantiateTransformer<InstanceofPredicate>, InstanceofPredicate> switchTransformer0 = new SwitchTransformer<InstantiateTransformer<InstanceofPredicate>, InstanceofPredicate>(predicateArray0, transformerArray0, transformerArray0[2]);
      Class<InstanceofPredicate>[] classArray0 = (Class<InstanceofPredicate>[]) Array.newInstance(Class.class, 7);
      InstantiateTransformer<InstanceofPredicate> instantiateTransformer0 = new InstantiateTransformer<InstanceofPredicate>(classArray0, classArray0);
      // Undeclared exception!
      try { 
        switchTransformer0.transform(instantiateTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Predicate<InstanceofPredicate> predicate0 = NotNullPredicate.notNullPredicate();
      Transformer<InstanceofPredicate, Boolean> transformer0 = PredicateTransformer.predicateTransformer((Predicate<? super InstanceofPredicate>) predicate0);
      Predicate<InstanceofPredicate>[] predicateArray0 = (Predicate<InstanceofPredicate>[]) Array.newInstance(Predicate.class, 1);
      predicateArray0[0] = predicate0;
      SwitchTransformer<InstanceofPredicate, Boolean> switchTransformer0 = new SwitchTransformer<InstanceofPredicate, Boolean>(predicateArray0, (Transformer<? super InstanceofPredicate, ? extends Boolean>[]) null, transformer0);
      Boolean boolean0 = switchTransformer0.transform((InstanceofPredicate) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Predicate<InstanceofPredicate>[] predicateArray0 = (Predicate<InstanceofPredicate>[]) Array.newInstance(Predicate.class, 0);
      Transformer<InstanceofPredicate, InstanceofPredicate> transformer0 = CloneTransformer.cloneTransformer();
      SwitchTransformer<InstanceofPredicate, InstanceofPredicate> switchTransformer0 = new SwitchTransformer<InstanceofPredicate, InstanceofPredicate>(predicateArray0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>[]) null, transformer0);
      InstanceofPredicate instanceofPredicate0 = switchTransformer0.transform((InstanceofPredicate) null);
      assertNull(instanceofPredicate0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<InstanceofPredicate, Transformer<InstanceofPredicate, InstanceofPredicate>> hashMap0 = new HashMap<InstanceofPredicate, Transformer<InstanceofPredicate, InstanceofPredicate>>();
      Transformer<InstanceofPredicate, InstanceofPredicate> transformer0 = ConstantTransformer.constantTransformer((InstanceofPredicate) null);
      hashMap0.put((InstanceofPredicate) null, transformer0);
      SwitchTransformer.switchTransformer((Map<? extends Predicate<? super InstanceofPredicate>, ? extends Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>>) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<InstanceofPredicate, Transformer<InstanceofPredicate, InstanceofPredicate>> hashMap0 = new HashMap<InstanceofPredicate, Transformer<InstanceofPredicate, InstanceofPredicate>>();
      hashMap0.put((InstanceofPredicate) null, (Transformer<InstanceofPredicate, InstanceofPredicate>) null);
      SwitchTransformer.switchTransformer((Map<? extends Predicate<? super InstanceofPredicate>, ? extends Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      HashMap<InstanceofPredicate, Transformer<InstanceofPredicate, InstanceofPredicate>> hashMap0 = new HashMap<InstanceofPredicate, Transformer<InstanceofPredicate, InstanceofPredicate>>();
      FactoryTransformer<InstanceofPredicate, InstanceofPredicate> factoryTransformer0 = new FactoryTransformer<InstanceofPredicate, InstanceofPredicate>((Factory<? extends InstanceofPredicate>) null);
      hashMap0.put(instanceofPredicate0, factoryTransformer0);
      Transformer<InstanceofPredicate, InstanceofPredicate> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super InstanceofPredicate>, ? extends Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>>) hashMap0);
      assertNotNull(transformer0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        SwitchTransformer.switchTransformer((Map<? extends Predicate<? super InstanceofPredicate>, ? extends Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The predicate and transformer map must not be null
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<InstanceofPredicate, Transformer<InstanceofPredicate, InstanceofPredicate>> hashMap0 = new HashMap<InstanceofPredicate, Transformer<InstanceofPredicate, InstanceofPredicate>>();
      Transformer<InstanceofPredicate, InstanceofPredicate> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super InstanceofPredicate>, ? extends Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>>) hashMap0);
      assertNotNull(transformer0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Predicate<Boolean>[] predicateArray0 = (Predicate<Boolean>[]) Array.newInstance(Predicate.class, 0);
      Transformer<Boolean, InstanceofPredicate>[] transformerArray0 = (Transformer<Boolean, InstanceofPredicate>[]) Array.newInstance(Transformer.class, 0);
      Transformer<Boolean, InstanceofPredicate> transformer0 = InvokerTransformer.invokerTransformer("The p edicate and transformer arrays must be the same size");
      Transformer<Boolean, InstanceofPredicate> transformer1 = SwitchTransformer.switchTransformer((Predicate<? super Boolean>[]) predicateArray0, (Transformer<? super Boolean, ? extends InstanceofPredicate>[]) transformerArray0, (Transformer<? super Boolean, ? extends InstanceofPredicate>) transformer0);
      assertSame(transformer1, transformer0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Transformer<Boolean, InstanceofPredicate> transformer0 = InvokerTransformer.invokerTransformer("");
      Predicate<Boolean>[] predicateArray0 = (Predicate<Boolean>[]) Array.newInstance(Predicate.class, 1);
      AnyPredicate<Boolean> anyPredicate0 = new AnyPredicate<Boolean>(predicateArray0);
      predicateArray0[0] = (Predicate<Boolean>) anyPredicate0;
      Transformer<Boolean, InstanceofPredicate>[] transformerArray0 = (Transformer<Boolean, InstanceofPredicate>[]) Array.newInstance(Transformer.class, 1);
      transformerArray0[0] = transformer0;
      Transformer<Boolean, InstanceofPredicate> transformer1 = SwitchTransformer.switchTransformer((Predicate<? super Boolean>[]) predicateArray0, (Transformer<? super Boolean, ? extends InstanceofPredicate>[]) transformerArray0, (Transformer<? super Boolean, ? extends InstanceofPredicate>) transformer0);
      assertFalse(transformer1.equals((Object)transformer0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultEquator<InstanceofPredicate> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<InstanceofPredicate> equalPredicate0 = new EqualPredicate<InstanceofPredicate>((InstanceofPredicate) null, defaultEquator0);
      Predicate<InstanceofPredicate>[] predicateArray0 = (Predicate<InstanceofPredicate>[]) Array.newInstance(Predicate.class, 1);
      predicateArray0[0] = (Predicate<InstanceofPredicate>) equalPredicate0;
      Transformer<InstanceofPredicate, InstantiateTransformer<InstanceofPredicate>>[] transformerArray0 = (Transformer<InstanceofPredicate, InstantiateTransformer<InstanceofPredicate>>[]) Array.newInstance(Transformer.class, 5);
      InvokerTransformer<InstanceofPredicate, InstantiateTransformer<InstanceofPredicate>> invokerTransformer0 = new InvokerTransformer<InstanceofPredicate, InstantiateTransformer<InstanceofPredicate>>("", (Class<?>[]) null, transformerArray0);
      transformerArray0[0] = (Transformer<InstanceofPredicate, InstantiateTransformer<InstanceofPredicate>>) invokerTransformer0;
      InstantiateTransformer<InstanceofPredicate> instantiateTransformer0 = new InstantiateTransformer<InstanceofPredicate>((Class<?>[]) null, transformerArray0);
      transformerArray0[1] = (Transformer<InstanceofPredicate, InstantiateTransformer<InstanceofPredicate>>) invokerTransformer0;
      SwitchTransformer<InstanceofPredicate, InstantiateTransformer<InstanceofPredicate>> switchTransformer0 = new SwitchTransformer<InstanceofPredicate, InstantiateTransformer<InstanceofPredicate>>(predicateArray0, transformerArray0, transformerArray0[0]);
      transformerArray0[2] = (Transformer<InstanceofPredicate, InstantiateTransformer<InstanceofPredicate>>) switchTransformer0;
      transformerArray0[3] = transformerArray0[0];
      ConstantTransformer<InstanceofPredicate, InstantiateTransformer<InstanceofPredicate>> constantTransformer0 = new ConstantTransformer<InstanceofPredicate, InstantiateTransformer<InstanceofPredicate>>(instantiateTransformer0);
      transformerArray0[4] = (Transformer<InstanceofPredicate, InstantiateTransformer<InstanceofPredicate>>) constantTransformer0;
      // Undeclared exception!
      try { 
        SwitchTransformer.switchTransformer((Predicate<? super InstanceofPredicate>[]) predicateArray0, (Transformer<? super InstanceofPredicate, ? extends InstantiateTransformer<InstanceofPredicate>>[]) transformerArray0, (Transformer<? super InstanceofPredicate, ? extends InstantiateTransformer<InstanceofPredicate>>) switchTransformer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate and transformer arrays must be the same size
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Predicate<Boolean>[] predicateArray0 = (Predicate<Boolean>[]) Array.newInstance(Predicate.class, 0);
      Transformer<Boolean, Boolean>[] transformerArray0 = (Transformer<Boolean, Boolean>[]) Array.newInstance(Transformer.class, 0);
      Transformer<Boolean, Boolean> transformer0 = SwitchTransformer.switchTransformer((Predicate<? super Boolean>[]) predicateArray0, (Transformer<? super Boolean, ? extends Boolean>[]) transformerArray0, (Transformer<? super Boolean, ? extends Boolean>) null);
      assertNotNull(transformer0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Predicate<InstanceofPredicate>[] predicateArray0 = (Predicate<InstanceofPredicate>[]) Array.newInstance(Predicate.class, 0);
      Transformer<InstanceofPredicate, InstanceofPredicate> transformer0 = CloneTransformer.cloneTransformer();
      SwitchTransformer<InstanceofPredicate, InstanceofPredicate> switchTransformer0 = new SwitchTransformer<InstanceofPredicate, InstanceofPredicate>(predicateArray0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>[]) null, transformer0);
      Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>[] transformerArray0 = switchTransformer0.getTransformers();
      assertNull(transformerArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Predicate<InstanceofPredicate>[] predicateArray0 = (Predicate<InstanceofPredicate>[]) Array.newInstance(Predicate.class, 0);
      Transformer<InstanceofPredicate, InstanceofPredicate> transformer0 = CloneTransformer.cloneTransformer();
      SwitchTransformer<InstanceofPredicate, InstanceofPredicate> switchTransformer0 = new SwitchTransformer<InstanceofPredicate, InstanceofPredicate>(predicateArray0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>[]) null, transformer0);
      Predicate<? super InstanceofPredicate>[] predicateArray1 = switchTransformer0.getPredicates();
      assertEquals(0, predicateArray1.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Predicate<InstanceofPredicate>[] predicateArray0 = (Predicate<InstanceofPredicate>[]) Array.newInstance(Predicate.class, 1);
      Transformer<InstanceofPredicate, InstanceofPredicate>[] transformerArray0 = (Transformer<InstanceofPredicate, InstanceofPredicate>[]) Array.newInstance(Transformer.class, 11);
      SwitchTransformer<InstanceofPredicate, InstanceofPredicate> switchTransformer0 = new SwitchTransformer<InstanceofPredicate, InstanceofPredicate>(predicateArray0, transformerArray0, transformerArray0[1]);
      Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate> transformer0 = switchTransformer0.getDefaultTransformer();
      assertNotNull(transformer0);
  }
}
