/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 09:50:39 GMT 2025
 */

package org.apache.commons.collections4.set;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.DayOfWeek;
import java.time.chrono.MinguoEra;
import java.util.ArrayList;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Predicate;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.set.ListOrderedSet;
import org.apache.commons.io.IOCase;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ListOrderedSet_ESTest extends ListOrderedSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<IOCase> class0 = IOCase.class;
      EnumSet<IOCase> enumSet0 = EnumSet.allOf(class0);
      ListOrderedSet<IOCase> listOrderedSet0 = ListOrderedSet.listOrderedSet((Set<IOCase>) enumSet0);
      boolean boolean0 = listOrderedSet0.removeAll(enumSet0);
      assertEquals(0, enumSet0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DayOfWeek dayOfWeek0 = DayOfWeek.FRIDAY;
      DayOfWeek dayOfWeek1 = DayOfWeek.THURSDAY;
      EnumSet<DayOfWeek> enumSet0 = EnumSet.of(dayOfWeek0, dayOfWeek1, dayOfWeek1);
      ListOrderedSet<DayOfWeek> listOrderedSet0 = new ListOrderedSet<DayOfWeek>();
      boolean boolean0 = listOrderedSet0.addAll((Collection<? extends DayOfWeek>) enumSet0);
      assertTrue(listOrderedSet0.contains(dayOfWeek0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      listOrderedSet0.add((Object) treeSet0);
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = listOrderedSet0.toArray(objectArray0);
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ListOrderedSet<DayOfWeek> listOrderedSet0 = new ListOrderedSet<DayOfWeek>();
      DayOfWeek[] dayOfWeekArray0 = new DayOfWeek[0];
      DayOfWeek[] dayOfWeekArray1 = listOrderedSet0.toArray(dayOfWeekArray0);
      assertEquals(0, dayOfWeekArray1.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      listOrderedSet0.add((Object) treeSet0);
      Object[] objectArray0 = listOrderedSet0.toArray();
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ListOrderedSet<Integer> listOrderedSet0 = new ListOrderedSet<Integer>();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      hashSet0.add(listOrderedSet0);
      ListOrderedSet<Object> listOrderedSet1 = new ListOrderedSet<Object>(hashSet0);
      Object object0 = listOrderedSet1.remove(0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ListOrderedSet<Integer> listOrderedSet0 = new ListOrderedSet<Integer>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSet0.add(listOrderedSet0);
      ListOrderedSet<Object> listOrderedSet1 = ListOrderedSet.listOrderedSet((Set<Object>) linkedHashSet0);
      int int0 = listOrderedSet1.indexOf(listOrderedSet0);
      assertFalse(listOrderedSet0.contains(int0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<DayOfWeek> class0 = DayOfWeek.class;
      EnumSet<DayOfWeek> enumSet0 = EnumSet.allOf(class0);
      ListOrderedSet<DayOfWeek> listOrderedSet0 = ListOrderedSet.listOrderedSet((Set<DayOfWeek>) enumSet0);
      DayOfWeek dayOfWeek0 = DayOfWeek.FRIDAY;
      int int0 = listOrderedSet0.indexOf(dayOfWeek0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ListOrderedSet<LinkedList<Integer>> listOrderedSet0 = new ListOrderedSet<LinkedList<Integer>>();
      Vector<Object> vector0 = new Vector<Object>();
      vector0.add((Object) listOrderedSet0);
      ListOrderedSet<Object> listOrderedSet1 = new ListOrderedSet<Object>();
      boolean boolean0 = listOrderedSet1.addAll(0, (Collection<?>) vector0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ListOrderedSet<Integer> listOrderedSet0 = new ListOrderedSet<Integer>();
      ListOrderedSet<Object> listOrderedSet1 = new ListOrderedSet<Object>();
      listOrderedSet1.add((Object) listOrderedSet0);
      IOCase[] iOCaseArray0 = new IOCase[1];
      // Undeclared exception!
      try { 
        listOrderedSet1.toArray(iOCaseArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ListOrderedSet<Integer> listOrderedSet0 = new ListOrderedSet<Integer>();
      ListOrderedSet<Object> listOrderedSet1 = new ListOrderedSet<Object>();
      listOrderedSet1.add((Object) listOrderedSet0);
      List<Object> list0 = listOrderedSet1.asList();
      ListOrderedSet<Object> listOrderedSet2 = ListOrderedSet.listOrderedSet(list0);
      // Undeclared exception!
      try { 
        listOrderedSet2.retainAll(listOrderedSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      listOrderedSet0.add((Object) listOrderedSet0);
      // Undeclared exception!
      try { 
        listOrderedSet0.retainAll(listOrderedSet0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      // Undeclared exception!
      try { 
        listOrderedSet0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      listOrderedSet0.add((Object) listOrderedSet0);
      TreeSet<IOCase> treeSet0 = new TreeSet<IOCase>();
      // Undeclared exception!
      try { 
        listOrderedSet0.retainAll(treeSet0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      listOrderedSet0.add((Object) listOrderedSet0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) listOrderedSet0);
      // Undeclared exception!
      try { 
        listOrderedSet0.removeIf(predicate0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      listOrderedSet0.add((Object) iOCase0);
      List<Object> list0 = listOrderedSet0.asList();
      // Undeclared exception!
      try { 
        listOrderedSet0.removeAll(list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ListOrderedSet<Integer> listOrderedSet0 = new ListOrderedSet<Integer>();
      ListOrderedSet<Object> listOrderedSet1 = new ListOrderedSet<Object>();
      listOrderedSet1.add((Object) listOrderedSet1);
      // Undeclared exception!
      try { 
        listOrderedSet0.removeAll(listOrderedSet1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      // Undeclared exception!
      try { 
        listOrderedSet0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.ListOrderedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      ListOrderedSet<Integer> listOrderedSet0 = ListOrderedSet.listOrderedSet((Set<Integer>) treeSet0);
      // Undeclared exception!
      try { 
        listOrderedSet0.remove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      ListOrderedSet<Integer> listOrderedSet0 = new ListOrderedSet<Integer>(treeSet0);
      // Undeclared exception!
      try { 
        listOrderedSet0.remove((Object) treeSet0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      List<Object> list0 = listOrderedSet0.asList();
      ListOrderedSet<Object> listOrderedSet1 = ListOrderedSet.listOrderedSet(list0);
      // Undeclared exception!
      try { 
        listOrderedSet1.remove((-360));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      listOrderedSet0.add((Object) listOrderedSet0);
      // Undeclared exception!
      try { 
        listOrderedSet0.remove(0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      TreeSet<ListOrderedSet<Object>> treeSet0 = new TreeSet<ListOrderedSet<Object>>();
      LinkedList<ListOrderedSet<Object>> linkedList0 = new LinkedList<ListOrderedSet<Object>>();
      ListOrderedSet<ListOrderedSet<Object>> listOrderedSet1 = ListOrderedSet.listOrderedSet((Set<ListOrderedSet<Object>>) treeSet0, (List<ListOrderedSet<Object>>) linkedList0);
      linkedList0.offer(listOrderedSet0);
      // Undeclared exception!
      try { 
        listOrderedSet1.remove(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      // Undeclared exception!
      try { 
        listOrderedSet0.remove((-1620));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      // Undeclared exception!
      try { 
        ListOrderedSet.listOrderedSet((Set<Object>) listOrderedSet0, (List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // list
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListOrderedSet.listOrderedSet((Set<MinguoEra>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      listOrderedSet0.add((Object) listOrderedSet0);
      ArrayList<ListOrderedSet<Object>> arrayList0 = new ArrayList<ListOrderedSet<Object>>();
      arrayList0.add(listOrderedSet0);
      // Undeclared exception!
      try { 
        ListOrderedSet.listOrderedSet((List<ListOrderedSet<Object>>) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListOrderedSet.listOrderedSet((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // list
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ListOrderedSet<Integer> listOrderedSet0 = new ListOrderedSet<Integer>();
      // Undeclared exception!
      try { 
        listOrderedSet0.get(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ListOrderedSet<Integer> listOrderedSet0 = new ListOrderedSet<Integer>();
      // Undeclared exception!
      try { 
        listOrderedSet0.get((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ListOrderedSet<Integer> listOrderedSet0 = new ListOrderedSet<Integer>();
      List<Integer> list0 = listOrderedSet0.asList();
      ListOrderedSet<Integer> listOrderedSet1 = new ListOrderedSet<Integer>(listOrderedSet0, list0);
      // Undeclared exception!
      try { 
        listOrderedSet1.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Stack<LinkedList<Integer>> stack0 = new Stack<LinkedList<Integer>>();
      ListOrderedSet<LinkedList<Integer>> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<LinkedList<Integer>>) stack0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      stack0.add(linkedList0);
      // Undeclared exception!
      try { 
        listOrderedSet0.addAll((Collection<? extends LinkedList<Integer>>) stack0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      // Undeclared exception!
      try { 
        listOrderedSet0.addAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.ListOrderedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ArrayList<ListOrderedSet<Object>> arrayList0 = new ArrayList<ListOrderedSet<Object>>();
      ListOrderedSet<ListOrderedSet<Object>> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<ListOrderedSet<Object>>) arrayList0);
      ListOrderedSet<ListOrderedSet<Object>> listOrderedSet1 = ListOrderedSet.listOrderedSet((Set<ListOrderedSet<Object>>) listOrderedSet0);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      ListOrderedSet<Object> listOrderedSet2 = new ListOrderedSet<Object>(hashSet0);
      arrayList0.add(listOrderedSet2);
      // Undeclared exception!
      try { 
        listOrderedSet1.addAll((-1), (Collection<? extends ListOrderedSet<Object>>) listOrderedSet0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ListOrderedSet<Integer> listOrderedSet0 = new ListOrderedSet<Integer>();
      // Undeclared exception!
      try { 
        listOrderedSet0.addAll(1, (Collection<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.ListOrderedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      Class<IOCase> class0 = IOCase.class;
      EnumSet<IOCase> enumSet0 = EnumSet.allOf(class0);
      // Undeclared exception!
      try { 
        listOrderedSet0.addAll(2147483645, (Collection<?>) enumSet0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483645, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Stack<Object> stack0 = new Stack<Object>();
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>(treeSet0, stack0);
      stack0.add((Object) listOrderedSet0);
      // Undeclared exception!
      try { 
        listOrderedSet0.addAll(2147483645, (Collection<?>) stack0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Set<Integer> set0 = hashMap0.keySet();
      ListOrderedSet<Integer> listOrderedSet0 = ListOrderedSet.listOrderedSet(set0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        listOrderedSet0.add(integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      List<Object> list0 = listOrderedSet0.asList();
      ListOrderedSet<Object> listOrderedSet1 = ListOrderedSet.listOrderedSet(list0);
      IOCase iOCase0 = IOCase.SYSTEM;
      // Undeclared exception!
      try { 
        listOrderedSet1.add((Object) iOCase0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      listOrderedSet0.add((Object) listOrderedSet0);
      // Undeclared exception!
      try { 
        listOrderedSet0.add((Object) listOrderedSet0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      ListOrderedSet<Object> listOrderedSet0 = ListOrderedSet.listOrderedSet((Set<Object>) treeSet0);
      // Undeclared exception!
      try { 
        listOrderedSet0.add((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ListOrderedSet<Object> listOrderedSet0 = ListOrderedSet.listOrderedSet((Set<Object>) treeSet0, (List<Object>) arrayList0);
      // Undeclared exception!
      try { 
        listOrderedSet0.add((Object) arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.ArrayList cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<Integer, ListOrderedSet<IOCase>> hashMap0 = new HashMap<Integer, ListOrderedSet<IOCase>>();
      Set<Integer> set0 = hashMap0.keySet();
      Stack<Integer> stack0 = new Stack<Integer>();
      ListOrderedSet<Integer> listOrderedSet0 = new ListOrderedSet<Integer>(set0, stack0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        listOrderedSet0.add(2261, integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>();
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>(hashSet0);
      List<Object> list0 = listOrderedSet0.asList();
      ListOrderedSet<Object> listOrderedSet1 = ListOrderedSet.listOrderedSet(list0);
      // Undeclared exception!
      try { 
        listOrderedSet1.add((-27), (Object) list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      listOrderedSet0.add((Object) listOrderedSet0);
      ListOrderedSet<ListOrderedSet<Object>> listOrderedSet1 = new ListOrderedSet<ListOrderedSet<Object>>();
      // Undeclared exception!
      try { 
        listOrderedSet1.add(4, listOrderedSet0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TreeSet<LinkedList<Object>> treeSet0 = new TreeSet<LinkedList<Object>>();
      ListOrderedSet<LinkedList<Object>> listOrderedSet0 = ListOrderedSet.listOrderedSet((Set<LinkedList<Object>>) treeSet0);
      // Undeclared exception!
      try { 
        listOrderedSet0.add(643, (LinkedList<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      TreeSet<IOCase> treeSet0 = new TreeSet<IOCase>();
      SortedSet<IOCase> sortedSet0 = treeSet0.headSet(iOCase0);
      LinkedList<IOCase> linkedList0 = new LinkedList<IOCase>();
      ListOrderedSet<IOCase> listOrderedSet0 = ListOrderedSet.listOrderedSet((Set<IOCase>) sortedSet0, (List<IOCase>) linkedList0);
      // Undeclared exception!
      try { 
        listOrderedSet0.add(140, iOCase0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // key out of range
         //
         verifyException("java.util.TreeMap$NavigableSubMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      TreeSet<ListOrderedSet<Object>> treeSet0 = new TreeSet<ListOrderedSet<Object>>();
      ListOrderedSet<ListOrderedSet<Object>> listOrderedSet1 = ListOrderedSet.listOrderedSet((Set<ListOrderedSet<Object>>) treeSet0);
      // Undeclared exception!
      try { 
        listOrderedSet1.add(0, listOrderedSet0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      ListOrderedSet<Object> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<Object>) stack0);
      // Undeclared exception!
      try { 
        listOrderedSet0.add((-2045), (Object) stack0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TreeSet<MinguoEra> treeSet0 = new TreeSet<MinguoEra>();
      ListOrderedSet<MinguoEra> listOrderedSet0 = null;
      try {
        listOrderedSet0 = new ListOrderedSet<MinguoEra>(treeSet0, (List<MinguoEra>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // list
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = null;
      try {
        listOrderedSet0 = new ListOrderedSet<Object>((Set<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ListOrderedSet<Integer> listOrderedSet0 = new ListOrderedSet<Integer>();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      boolean boolean0 = hashSet0.add(listOrderedSet0);
      ListOrderedSet<Object> listOrderedSet1 = new ListOrderedSet<Object>(hashSet0);
      boolean boolean1 = listOrderedSet1.remove((Object) listOrderedSet0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      ListOrderedSet<Integer> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<Integer>) stack0);
      boolean boolean0 = listOrderedSet0.remove((Object) stack0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      OrderedIterator<Object> orderedIterator0 = listOrderedSet0.iterator();
      assertFalse(orderedIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Set<Integer> set0 = hashMap0.keySet();
      ListOrderedSet<Integer> listOrderedSet0 = ListOrderedSet.listOrderedSet(set0);
      Object[] objectArray0 = listOrderedSet0.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      EnumSet<IOCase> enumSet0 = EnumSet.of(iOCase0, iOCase0, iOCase0);
      ListOrderedSet<IOCase> listOrderedSet0 = new ListOrderedSet<IOCase>(enumSet0);
      boolean boolean0 = listOrderedSet0.addAll((-7), (Collection<? extends IOCase>) enumSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      ListOrderedSet<Object> listOrderedSet0 = ListOrderedSet.listOrderedSet((List<Object>) vector0);
      vector0.add((Object) listOrderedSet0);
      // Undeclared exception!
      try { 
        listOrderedSet0.addAll((-435), (Collection<?>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -435
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      listOrderedSet0.add((Object) listOrderedSet0);
      // Undeclared exception!
      try { 
        listOrderedSet0.addAll(1, (Collection<?>) listOrderedSet0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      TreeSet<IOCase> treeSet0 = new TreeSet<IOCase>();
      LinkedList<IOCase> linkedList0 = new LinkedList<IOCase>();
      ListOrderedSet<IOCase> listOrderedSet0 = ListOrderedSet.listOrderedSet((Set<IOCase>) treeSet0, (List<IOCase>) linkedList0);
      // Undeclared exception!
      try { 
        listOrderedSet0.add(140, iOCase0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 140, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ListOrderedSet<Integer> listOrderedSet0 = new ListOrderedSet<Integer>();
      ListOrderedSet<Object> listOrderedSet1 = new ListOrderedSet<Object>();
      listOrderedSet1.add((Object) listOrderedSet0);
      listOrderedSet1.add((-1), (Object) listOrderedSet0);
      assertFalse(listOrderedSet0.contains((-1)));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ListOrderedSet<Integer> listOrderedSet0 = new ListOrderedSet<Integer>();
      ListOrderedSet<Object> listOrderedSet1 = new ListOrderedSet<Object>();
      IOCase iOCase0 = IOCase.SYSTEM;
      boolean boolean0 = listOrderedSet1.add((Object) iOCase0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ListOrderedSet<Object> listOrderedSet2 = ListOrderedSet.listOrderedSet((List<Object>) arrayList0);
      listOrderedSet1.add((Object) listOrderedSet2);
      Object object0 = new Object();
      listOrderedSet2.add(object0);
      boolean boolean1 = listOrderedSet1.retainAll(listOrderedSet0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ListOrderedSet<Integer> listOrderedSet0 = new ListOrderedSet<Integer>();
      ListOrderedSet<Object> listOrderedSet1 = new ListOrderedSet<Object>();
      boolean boolean0 = listOrderedSet1.retainAll(listOrderedSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ListOrderedSet<Integer> listOrderedSet0 = new ListOrderedSet<Integer>();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      boolean boolean0 = hashSet0.add(listOrderedSet0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ListOrderedSet<Object> listOrderedSet1 = new ListOrderedSet<Object>(hashSet0, arrayList0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) listOrderedSet0);
      boolean boolean1 = listOrderedSet1.removeIf(predicate0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      boolean boolean0 = listOrderedSet0.removeIf((Predicate<? super Object>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) listOrderedSet0);
      boolean boolean0 = listOrderedSet0.removeIf(predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) listOrderedSet0);
      boolean boolean0 = listOrderedSet0.removeAll(arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DayOfWeek dayOfWeek0 = DayOfWeek.WEDNESDAY;
      EnumSet<DayOfWeek> enumSet0 = EnumSet.of(dayOfWeek0, dayOfWeek0, dayOfWeek0);
      ListOrderedSet<DayOfWeek> listOrderedSet0 = ListOrderedSet.listOrderedSet((Set<DayOfWeek>) enumSet0);
      boolean boolean0 = listOrderedSet0.addAll((Collection<? extends DayOfWeek>) listOrderedSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ListOrderedSet<Integer> listOrderedSet0 = new ListOrderedSet<Integer>();
      ListOrderedSet<Object> listOrderedSet1 = new ListOrderedSet<Object>();
      boolean boolean0 = listOrderedSet1.add((Object) listOrderedSet0);
      assertTrue(boolean0);
      
      boolean boolean1 = listOrderedSet1.add((Object) listOrderedSet0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) listOrderedSet0);
      // Undeclared exception!
      try { 
        ListOrderedSet.listOrderedSet((Set<Object>) listOrderedSet0, (List<Object>) arrayList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Set and List must be empty
         //
         verifyException("org.apache.commons.collections4.set.ListOrderedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      listOrderedSet0.add((Object) listOrderedSet0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        ListOrderedSet.listOrderedSet((Set<Object>) listOrderedSet0, (List<Object>) arrayList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Set and List must be empty
         //
         verifyException("org.apache.commons.collections4.set.ListOrderedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListOrderedSet<Object> listOrderedSet0 = ListOrderedSet.listOrderedSet((Set<Object>) treeSet0, (List<Object>) linkedList0);
      linkedList0.add((Object) listOrderedSet0);
      // Undeclared exception!
      try { 
        listOrderedSet0.removeAll(listOrderedSet0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListOrderedSet<Object> listOrderedSet0 = ListOrderedSet.listOrderedSet((Set<Object>) treeSet0, (List<Object>) linkedList0);
      List<Object> list0 = listOrderedSet0.asList();
      linkedList0.add((Object) listOrderedSet0);
      ListOrderedSet<Object> listOrderedSet1 = ListOrderedSet.listOrderedSet(list0);
      // Undeclared exception!
      try { 
        listOrderedSet1.removeAll(listOrderedSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      HashSet<DayOfWeek> hashSet0 = new HashSet<DayOfWeek>();
      ListOrderedSet<DayOfWeek> listOrderedSet0 = new ListOrderedSet<DayOfWeek>(hashSet0);
      String string0 = listOrderedSet0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      TreeSet<ListOrderedSet<Object>> treeSet0 = new TreeSet<ListOrderedSet<Object>>();
      LinkedList<ListOrderedSet<Object>> linkedList0 = new LinkedList<ListOrderedSet<Object>>();
      ListOrderedSet<ListOrderedSet<Object>> listOrderedSet0 = ListOrderedSet.listOrderedSet((Set<ListOrderedSet<Object>>) treeSet0, (List<ListOrderedSet<Object>>) linkedList0);
      // Undeclared exception!
      try { 
        listOrderedSet0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DayOfWeek dayOfWeek0 = DayOfWeek.THURSDAY;
      EnumSet<DayOfWeek> enumSet0 = EnumSet.of(dayOfWeek0, dayOfWeek0, dayOfWeek0, dayOfWeek0, dayOfWeek0);
      ListOrderedSet<DayOfWeek> listOrderedSet0 = new ListOrderedSet<DayOfWeek>(enumSet0);
      DayOfWeek dayOfWeek1 = listOrderedSet0.get(0);
      assertSame(dayOfWeek0, dayOfWeek1);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ListOrderedSet<Integer> listOrderedSet0 = new ListOrderedSet<Integer>();
      listOrderedSet0.clear();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ListOrderedSet<Integer> listOrderedSet0 = new ListOrderedSet<Integer>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      ListOrderedSet<Object> listOrderedSet1 = ListOrderedSet.listOrderedSet((Set<Object>) linkedHashSet0);
      int int0 = listOrderedSet1.indexOf(listOrderedSet0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ListOrderedSet<Object> listOrderedSet0 = new ListOrderedSet<Object>();
      // Undeclared exception!
      try { 
        listOrderedSet0.toArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
