/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 18:14:02 GMT 2025
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.CloneTransformer;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.InstantiateTransformer;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.map.DefaultedMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class DefaultedMap_ESTest extends DefaultedMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Transformer<Integer, Integer> transformer0 = CloneTransformer.cloneTransformer();
      DefaultedMap<Integer, Integer> defaultedMap0 = new DefaultedMap<Integer, Integer>(transformer0);
      DefaultedMap<Integer, Integer> defaultedMap1 = new DefaultedMap<Integer, Integer>(defaultedMap0, transformer0);
      assertTrue(defaultedMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer((-193));
      DefaultedMap<Object, Integer> defaultedMap0 = new DefaultedMap<Object, Integer>(integer0);
      defaultedMap0.put(integer0, integer0);
      Transformer<Object, Integer> transformer0 = InvokerTransformer.invokerTransformer("Transformer must not be null");
      Map<Object, Integer> map0 = DefaultedMap.defaultedMap((Map<Object, Integer>) defaultedMap0, (Transformer<? super Object, ? extends Integer>) transformer0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      DefaultedMap<Integer, Integer> defaultedMap0 = new DefaultedMap<Integer, Integer>(transformer0);
      // Undeclared exception!
      try { 
        defaultedMap0.get(transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>((Predicate<? super Object>) null);
      DefaultedMap<Predicate<Object>, Boolean> defaultedMap0 = new DefaultedMap<Predicate<Object>, Boolean>((Transformer<? super Predicate<Object>, ? extends Boolean>) predicateTransformer0);
      TransformedPredicate<Boolean> transformedPredicate0 = new TransformedPredicate<Boolean>(predicateTransformer0, (Predicate<? super Boolean>) null);
      // Undeclared exception!
      try { 
        defaultedMap0.get(transformedPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.PredicateTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Transformer<Integer, Integer> transformer0 = CloneTransformer.cloneTransformer();
      DefaultedMap<Integer, Integer> defaultedMap0 = new DefaultedMap<Integer, Integer>(transformer0);
      // Undeclared exception!
      try { 
        defaultedMap0.get(transformer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The prototype must be cloneable via a public clone method
         //
         verifyException("org.apache.commons.collections4.functors.PrototypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        DefaultedMap.defaultedMap((Map<Integer, InstantiateTransformer<Integer>>) null, (Factory<? extends InstantiateTransformer<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Factory must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Factory<Predicate<Object>> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
      try { 
        DefaultedMap.defaultedMap((Map<Object, Predicate<Object>>) null, (Factory<? extends Predicate<Object>>) factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        DefaultedMap.defaultedMap((Map<Integer, Object>) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DefaultedMap<Integer, Integer> defaultedMap0 = null;
      try {
        defaultedMap0 = new DefaultedMap<Integer, Integer>(hashMap0, (Transformer<? super Integer, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null.
         //
         verifyException("org.apache.commons.collections4.map.DefaultedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, (Integer) null);
      DefaultedMap<Integer, Integer> defaultedMap0 = DefaultedMap.defaultedMap((Map<Integer, Integer>) hashMap0, (Integer) null);
      Integer integer1 = defaultedMap0.get(integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultedMap<InstantiateTransformer<Object>, Object> defaultedMap0 = null;
      try {
        defaultedMap0 = new DefaultedMap<InstantiateTransformer<Object>, Object>((Transformer<? super InstantiateTransformer<Object>, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null.
         //
         verifyException("org.apache.commons.collections4.map.DefaultedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer((-193));
      DefaultedMap<Object, Integer> defaultedMap0 = new DefaultedMap<Object, Integer>(integer0);
      Transformer<Object, Integer> transformer0 = InvokerTransformer.invokerTransformer("Transformer must not be null");
      Map<Object, Integer> map0 = DefaultedMap.defaultedMap((Map<Object, Integer>) defaultedMap0, (Transformer<? super Object, ? extends Integer>) transformer0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Transformer<Integer, Integer> transformer0 = CloneTransformer.cloneTransformer();
      DefaultedMap<Integer, Integer> defaultedMap0 = new DefaultedMap<Integer, Integer>(transformer0);
      Integer integer0 = new Integer(1);
      DefaultedMap<Integer, Object> defaultedMap1 = new DefaultedMap<Integer, Object>(integer0);
      boolean boolean0 = defaultedMap0.remove((Object) defaultedMap1, (Object) transformer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Transformer<Integer, Integer> transformer0 = CloneTransformer.cloneTransformer();
      DefaultedMap<CloneTransformer<Integer>, Object> defaultedMap0 = new DefaultedMap<CloneTransformer<Integer>, Object>((Object) transformer0);
      DefaultedMap<CloneTransformer<Integer>, Object> defaultedMap1 = DefaultedMap.defaultedMap((Map<CloneTransformer<Integer>, Object>) defaultedMap0, (Object) transformer0);
      Object object0 = defaultedMap1.get(defaultedMap0);
      assertNotNull(object0);
  }
}
