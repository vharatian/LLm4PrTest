/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 17:08:42 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import java.util.LinkedList;
import org.apache.commons.collections4.bloomfilter.BitSetBloomFilter;
import org.apache.commons.collections4.bloomfilter.BloomFilter;
import org.apache.commons.collections4.bloomfilter.HasherBloomFilter;
import org.apache.commons.collections4.bloomfilter.hasher.DynamicHasher;
import org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentity;
import org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentityImpl;
import org.apache.commons.collections4.bloomfilter.hasher.Hasher;
import org.apache.commons.collections4.bloomfilter.hasher.Shape;
import org.apache.commons.collections4.bloomfilter.hasher.StaticHasher;
import org.apache.commons.collections4.bloomfilter.hasher.function.MD5Cyclic;
import org.apache.commons.collections4.bloomfilter.hasher.function.Murmur32x86Iterative;
import org.apache.commons.collections4.bloomfilter.hasher.function.ObjectsHashIterative;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class HasherBloomFilter_ESTest extends HasherBloomFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) mD5Cyclic0, 2293, 2293);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)1;
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(mD5Cyclic0, linkedList0);
      hasherBloomFilter0.merge((Hasher) dynamicHasher0);
      long[] longArray0 = hasherBloomFilter0.getBits();
      assertEquals(28, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) mD5Cyclic0, 2396, 2396);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      hasherBloomFilter0.merge((BloomFilter) hasherBloomFilter0);
      assertEquals(0, hasherBloomFilter0.cardinality());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) mD5Cyclic0, 2293, 2293);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[4];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(mD5Cyclic0, linkedList0);
      hasherBloomFilter0.merge((Hasher) dynamicHasher0);
      StaticHasher staticHasher0 = hasherBloomFilter0.getHasher();
      assertEquals(1, staticHasher0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      int int0 = hasherBloomFilter0.cardinality();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) mD5Cyclic0, 2293, 2293);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[4];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(mD5Cyclic0, linkedList0);
      hasherBloomFilter0.merge((Hasher) dynamicHasher0);
      int int0 = hasherBloomFilter0.cardinality();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[4];
      linkedList0.add(byteArray0);
      Shape shape0 = new Shape((HashFunctionIdentity) mD5Cyclic0, 15, 2956, 2956);
      DynamicHasher dynamicHasher0 = new DynamicHasher(mD5Cyclic0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      // Undeclared exception!
      hasherBloomFilter0.merge((Hasher) dynamicHasher0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.merge((Hasher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      linkedList0.add((byte[]) null);
      Shape shape0 = new Shape((HashFunctionIdentity) mD5Cyclic0, 25, 25, 25);
      DynamicHasher dynamicHasher0 = new DynamicHasher(mD5Cyclic0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.merge((Hasher) dynamicHasher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 26, 26, 26);
      DynamicHasher dynamicHasher0 = new DynamicHasher(mD5Cyclic0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.merge((Hasher) dynamicHasher0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hasher (MD5-SIGNED-CYCLIC) is not the hasher for shape (Shape[ Murmur3_x86_32-SIGNED-ITERATIVE n=26 m=26 k=26 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      Shape shape0 = new Shape((HashFunctionIdentity) mD5Cyclic0, 32, 32, 32);
      DynamicHasher dynamicHasher0 = new DynamicHasher(mD5Cyclic0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      Shape shape1 = new Shape((HashFunctionIdentity) mD5Cyclic0, 32, 693, 32);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape1);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.merge((BloomFilter) bitSetBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // shape (Shape[ MD5-SIGNED-CYCLIC n=32 m=32 k=32 ]) does not match internal shape (Shape[ MD5-SIGNED-CYCLIC n=32 m=693 k=32 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.StaticHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[4];
      linkedList0.add(byteArray0);
      Shape shape0 = new Shape((HashFunctionIdentity) mD5Cyclic0, 15, 2956, 2956);
      DynamicHasher dynamicHasher0 = new DynamicHasher(mD5Cyclic0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      // Undeclared exception!
      hasherBloomFilter0.contains((Hasher) dynamicHasher0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      StaticHasher staticHasher0 = hasherBloomFilter0.getHasher();
      // Undeclared exception!
      try { 
        hasherBloomFilter0.contains((Hasher) staticHasher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      linkedList0.add((byte[]) null);
      Shape shape0 = new Shape((HashFunctionIdentity) mD5Cyclic0, 25, 25, 25);
      DynamicHasher dynamicHasher0 = new DynamicHasher(mD5Cyclic0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.contains((Hasher) dynamicHasher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) mD5Cyclic0, 2462, 2462);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur32x86Iterative0, linkedList0);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.contains((Hasher) dynamicHasher0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hasher (Murmur3_x86_32-SIGNED-ITERATIVE) is not the hasher for shape (Shape[ MD5-SIGNED-CYCLIC n=2462 m=2462 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[11];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(mD5Cyclic0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) mD5Cyclic0, 23, 2147391898);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = null;
      try {
        hasherBloomFilter0 = new HasherBloomFilter((Hasher) null, (Shape) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      linkedList0.add((byte[]) null);
      Shape shape0 = new Shape((HashFunctionIdentity) mD5Cyclic0, 22, 22, 22);
      DynamicHasher dynamicHasher0 = new DynamicHasher(mD5Cyclic0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = null;
      try {
        hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) mD5Cyclic0, 2462, 2462);
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = null;
      try {
        hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hasher (Objects32-SIGNED-ITERATIVE) is not the hasher for shape (Shape[ MD5-SIGNED-CYCLIC n=2462 m=2462 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[4];
      linkedList0.add(byteArray0);
      Shape shape0 = new Shape((HashFunctionIdentity) mD5Cyclic0, 2, 2271, 2271);
      DynamicHasher dynamicHasher0 = new DynamicHasher(mD5Cyclic0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      long[] longArray0 = hasherBloomFilter0.getBits();
      assertEquals(36, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) mD5Cyclic0, 2271, 2271);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      long[] longArray0 = hasherBloomFilter0.getBits();
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[4];
      linkedList0.add(byteArray0);
      Shape shape0 = new Shape((HashFunctionIdentity) mD5Cyclic0, 15, 2956, 27);
      DynamicHasher dynamicHasher0 = new DynamicHasher(mD5Cyclic0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      boolean boolean0 = hasherBloomFilter0.contains((Hasher) dynamicHasher0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) mD5Cyclic0, 2293, 2293);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      StaticHasher staticHasher0 = bitSetBloomFilter0.getHasher();
      boolean boolean0 = hasherBloomFilter0.contains((Hasher) staticHasher0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl(murmur32x86Iterative0);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 117, 117);
      StaticHasher staticHasher0 = new StaticHasher(iterator0, shape0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(staticHasher0, shape0);
      assertEquals(0, hasherBloomFilter0.cardinality());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.merge((BloomFilter) bitSetBloomFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }
}
