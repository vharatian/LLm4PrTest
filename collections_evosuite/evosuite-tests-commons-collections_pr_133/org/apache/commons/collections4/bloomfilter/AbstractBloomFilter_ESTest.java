/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 17:04:31 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import org.apache.commons.collections4.bloomfilter.BitSetBloomFilter;
import org.apache.commons.collections4.bloomfilter.BloomFilter;
import org.apache.commons.collections4.bloomfilter.CountingBloomFilter;
import org.apache.commons.collections4.bloomfilter.HasherBloomFilter;
import org.apache.commons.collections4.bloomfilter.hasher.DynamicHasher;
import org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentity;
import org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentityImpl;
import org.apache.commons.collections4.bloomfilter.hasher.Hasher;
import org.apache.commons.collections4.bloomfilter.hasher.Shape;
import org.apache.commons.collections4.bloomfilter.hasher.StaticHasher;
import org.apache.commons.collections4.bloomfilter.hasher.function.MD5Cyclic;
import org.apache.commons.collections4.bloomfilter.hasher.function.Murmur128x86Cyclic;
import org.apache.commons.collections4.bloomfilter.hasher.function.Murmur32x86Iterative;
import org.apache.commons.collections4.bloomfilter.hasher.function.ObjectsHashIterative;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AbstractBloomFilter_ESTest extends AbstractBloomFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(1940);
      hashMap0.put(integer0, integer0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 1940, 2371, 1);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      int int0 = countingBloomFilter0.orCardinality(bitSetBloomFilter0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 1941, 1941);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(628);
      hashMap0.put(integer0, integer0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(staticHasher0, shape0);
      int int0 = countingBloomFilter0.xorCardinality(bitSetBloomFilter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 9, 9);
      Integer integer0 = new Integer(2);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.put(integer0, integer0);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      int int0 = bitSetBloomFilter0.orCardinality(countingBloomFilter0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 9, 9);
      Integer integer0 = new Integer(2);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer(7);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      hashMap0.put(integer1, integer0);
      CountingBloomFilter countingBloomFilter1 = new CountingBloomFilter(hashMap0, shape0);
      int int0 = countingBloomFilter0.xorCardinality(countingBloomFilter1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.ITERATIVE;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl(")wWr+hKM!R9c++w", "Murmur3_x64_128", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, (-6790451487108189226L));
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 2154, 1941);
      BitSetBloomFilter bitSetBloomFilter0 = null;
      try {
        bitSetBloomFilter0 = new BitSetBloomFilter(dynamicHasher0, shape0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hasher (Murmur3_x64_128-SIGNED-CYCLIC) is not the hasher for shape (Shape[ Murmur3_x64_128-SIGNED-ITERATIVE n=2154 m=1941 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 9, 9);
      Integer integer0 = new Integer(2);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer(7);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      hashMap0.put(integer1, integer1);
      CountingBloomFilter countingBloomFilter1 = new CountingBloomFilter(hashMap0, shape0);
      int int0 = countingBloomFilter0.orCardinality(countingBloomFilter1);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 9, 9);
      Integer integer0 = new Integer(2);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.put(integer0, integer0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(staticHasher0, shape0);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)13;
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      boolean boolean0 = hasherBloomFilter0.contains((BloomFilter) bitSetBloomFilter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 1641, 3053);
      Integer integer0 = new Integer(1641);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.put(integer0, integer0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(staticHasher0, shape0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(staticHasher0, shape0);
      boolean boolean0 = hasherBloomFilter0.contains((BloomFilter) bitSetBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      countingBloomFilter0.verifyShape(shape0);
      assertEquals(268435456, shape0.getNumberOfBytes());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 1938, 1938);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(staticHasher0, shape0);
      countingBloomFilter0.verifyShape(hasherBloomFilter0);
      assertEquals(0, hasherBloomFilter0.cardinality());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 1978, 1978);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(shape0);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(staticHasher0, shape0);
      bitSetBloomFilter0.verifyHasher(staticHasher0);
      assertEquals(0, bitSetBloomFilter0.cardinality());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      Shape shape0 = hasherBloomFilter0.getShape();
      assertNull(shape0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 1978, 1978);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(shape0);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(staticHasher0, shape0);
      Shape shape1 = bitSetBloomFilter0.getShape();
      assertSame(shape1, shape0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 9, 9);
      Integer integer0 = new Integer(2);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.put(integer0, integer0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      assertEquals(1, staticHasher0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 9, 9);
      Integer integer0 = new Integer(2);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.put(integer0, integer0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(staticHasher0, shape0);
      long[] longArray0 = bitSetBloomFilter0.getBits();
      assertArrayEquals(new long[] {4L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      long[] longArray0 = hasherBloomFilter0.getBits();
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 1978, 1978);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(shape0);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      boolean boolean0 = countingBloomFilter0.contains((Hasher) staticHasher0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 14, 707);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      StaticHasher staticHasher0 = hasherBloomFilter0.getHasher();
      boolean boolean0 = hasherBloomFilter0.contains((Hasher) staticHasher0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 1978, 1978);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      int int0 = countingBloomFilter0.cardinality();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 9, 9);
      Integer integer0 = new Integer(2);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.put(integer0, integer0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      int int0 = countingBloomFilter0.cardinality();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      Integer integer0 = new Integer(25);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.put(integer0, integer0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(staticHasher0, shape0);
      // Undeclared exception!
      countingBloomFilter0.xorCardinality(hasherBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.xorCardinality(hasherBloomFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.verifyShape((Shape) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 54, 54);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        countingBloomFilter0.verifyShape((Shape) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape null is not the same as Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=54 m=54 k=1 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.verifyShape(hasherBloomFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) mD5Cyclic0, 84, 84);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(shape0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>(84);
      CountingBloomFilter countingBloomFilter1 = new CountingBloomFilter(hashMap0, (Shape) null);
      // Undeclared exception!
      try { 
        countingBloomFilter0.verifyShape(countingBloomFilter1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape null is not the same as Shape[ MD5-SIGNED-CYCLIC n=84 m=84 k=1 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      StaticHasher staticHasher0 = hasherBloomFilter0.getHasher();
      // Undeclared exception!
      try { 
        hasherBloomFilter0.verifyHasher(staticHasher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 2464, 2464);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.verifyHasher(dynamicHasher0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hasher (Objects32-SIGNED-ITERATIVE) is not the hasher for shape (Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=2464 m=2464 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 4049, Integer.MAX_VALUE);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(4049);
      linkedList0.add(integer0);
      Iterator<Integer> iterator0 = linkedList0.descendingIterator();
      StaticHasher staticHasher0 = new StaticHasher(iterator0, shape0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(staticHasher0, shape0);
      // Undeclared exception!
      countingBloomFilter0.orCardinality(hasherBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.orCardinality(hasherBloomFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 14, 14);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(shape0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        countingBloomFilter0.orCardinality(hasherBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape null is not the same as Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=14 m=14 k=1 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      StaticHasher staticHasher0 = hasherBloomFilter0.getHasher();
      // Undeclared exception!
      try { 
        hasherBloomFilter0.merge((Hasher) staticHasher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.merge((BloomFilter) hasherBloomFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 2607, 2607);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(shape0);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        countingBloomFilter0.merge((BloomFilter) bitSetBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape null is not the same as Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=2607 m=2607 k=1 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.isFull();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.contains((Hasher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 9, 9);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur32x86Iterative0, linkedList0);
      // Undeclared exception!
      try { 
        countingBloomFilter0.contains((Hasher) dynamicHasher0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hasher (Murmur3_x86_32-SIGNED-ITERATIVE) is not the hasher for shape (Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=9 m=9 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      Integer integer0 = new Integer(35);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.put(integer0, integer0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(staticHasher0, shape0);
      // Undeclared exception!
      hasherBloomFilter0.contains((BloomFilter) countingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.contains((BloomFilter) hasherBloomFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 1377, 1377);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter((Shape) null);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.contains((BloomFilter) countingBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape null is not the same as Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=1377 m=1377 k=1 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.andCardinality(bitSetBloomFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 4003, 4003);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      HasherBloomFilter hasherBloomFilter1 = new HasherBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.andCardinality(hasherBloomFilter1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape null is not the same as Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=4003 m=4003 k=1 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 9, 9);
      Integer integer0 = new Integer(2);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.put(integer0, integer0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(staticHasher0, shape0);
      int int0 = bitSetBloomFilter0.andCardinality(countingBloomFilter0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 9, 9);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      int int0 = bitSetBloomFilter0.andCardinality(countingBloomFilter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 1941, 1941);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(shape0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        countingBloomFilter0.xorCardinality(hasherBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape null is not the same as Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=1941 m=1941 k=1 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 32, 32);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(shape0);
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur32x86Iterative0, linkedList0);
      // Undeclared exception!
      try { 
        countingBloomFilter0.merge((Hasher) dynamicHasher0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hasher (Murmur3_x86_32-SIGNED-ITERATIVE) is not the hasher for shape (Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=32 m=32 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 8, 8);
      Integer integer0 = new Integer(2);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer1 = new Integer(6);
      hashMap0.put(integer1, integer0);
      hashMap0.put(integer0, integer0);
      Integer integer2 = new Integer(4);
      hashMap0.put(integer2, integer0);
      Integer integer3 = new Integer(7);
      Integer integer4 = new Integer(1);
      Integer integer5 = new Integer(5);
      hashMap0.put(integer5, integer4);
      Integer integer6 = new Integer(0);
      hashMap0.put(integer6, integer3);
      hashMap0.put(integer4, integer5);
      hashMap0.put(integer3, integer3);
      Integer integer7 = new Integer(3);
      hashMap0.put(integer7, integer4);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      boolean boolean0 = countingBloomFilter0.isFull();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 9, 9);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      boolean boolean0 = countingBloomFilter0.isFull();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 8, 8);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(staticHasher0, shape0);
      int int0 = countingBloomFilter0.orCardinality(bitSetBloomFilter0);
      assertEquals(0, int0);
  }
}
