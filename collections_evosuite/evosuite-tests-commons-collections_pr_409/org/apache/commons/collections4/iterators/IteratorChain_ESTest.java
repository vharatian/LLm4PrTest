/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 08:19:31 GMT 2025
 */

package org.apache.commons.collections4.iterators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.ArrayDeque;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.function.Consumer;
import org.apache.commons.collections4.iterators.IteratorChain;
import org.apache.commons.io.IOCase;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class IteratorChain_ESTest extends IteratorChain_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      Iterator<Integer> iterator0 = priorityQueue0.iterator();
      IteratorChain<Object> iteratorChain0 = new IteratorChain<Object>(iterator0, iterator0);
      iteratorChain0.addIterator(iterator0);
      assertFalse(iteratorChain0.isLocked());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 2);
      iteratorArray0[0] = (Iterator<Integer>) listIterator0;
      iteratorArray0[1] = (Iterator<Integer>) listIterator0;
      IteratorChain<Object> iteratorChain0 = new IteratorChain<Object>(iteratorArray0);
      int int0 = iteratorChain0.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      IteratorChain<Integer> iteratorChain0 = new IteratorChain<Integer>(listIterator0);
      iteratorChain0.next();
      assertTrue(iteratorChain0.isLocked());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IteratorChain<IOCase> iteratorChain0 = new IteratorChain<IOCase>();
      IOCase iOCase0 = IOCase.SYSTEM;
      EnumSet<IOCase> enumSet0 = EnumSet.of(iOCase0, iOCase0, iOCase0, iOCase0, iOCase0);
      Iterator<IOCase> iterator0 = enumSet0.iterator();
      IteratorChain<Object> iteratorChain1 = new IteratorChain<Object>(iteratorChain0, iterator0);
      iteratorChain1.next();
      assertTrue(iteratorChain1.isLocked());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      Iterator<Integer> iterator0 = priorityQueue0.iterator();
      IteratorChain<Object> iteratorChain0 = new IteratorChain<Object>(iterator0, iterator0);
      iteratorChain0.hasNext();
      boolean boolean0 = iteratorChain0.isLocked();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      IteratorChain<Integer> iteratorChain0 = new IteratorChain<Integer>(listIterator0);
      iteratorChain0.hasNext();
      assertTrue(iteratorChain0.isLocked());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedList0.descendingIterator();
      Integer integer0 = new Integer((-1954));
      linkedList0.add(integer0);
      IteratorChain<Object> iteratorChain0 = new IteratorChain<Object>(iterator0);
      // Undeclared exception!
      try { 
        iteratorChain0.remove();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.load(class0);
      Iterator<Object> iterator0 = serviceLoader0.iterator();
      IteratorChain<Object> iteratorChain0 = new IteratorChain<Object>(iterator0, iterator0);
      // Undeclared exception!
      try { 
        iteratorChain0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ServiceLoader$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedHashSet<IOCase> linkedHashSet0 = new LinkedHashSet<IOCase>();
      Iterator<IOCase> iterator0 = linkedHashSet0.iterator();
      IteratorChain<IOCase> iteratorChain0 = new IteratorChain<IOCase>(iterator0, iterator0);
      // Undeclared exception!
      try { 
        iteratorChain0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedHashMap$LinkedHashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Stack<IOCase> stack0 = new Stack<IOCase>();
      ListIterator<IOCase> listIterator0 = stack0.listIterator();
      IteratorChain<IOCase> iteratorChain0 = new IteratorChain<IOCase>(listIterator0, listIterator0);
      // Undeclared exception!
      try { 
        iteratorChain0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Stack<IOCase> stack0 = new Stack<IOCase>();
      ListIterator<IOCase> listIterator0 = stack0.listIterator();
      IOCase iOCase0 = IOCase.SENSITIVE;
      stack0.add(iOCase0);
      IteratorChain<IOCase> iteratorChain0 = new IteratorChain<IOCase>(listIterator0, listIterator0);
      // Undeclared exception!
      try { 
        iteratorChain0.next();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IteratorChain<IOCase> iteratorChain0 = new IteratorChain<IOCase>();
      // Undeclared exception!
      try { 
        iteratorChain0.addIterator((Iterator<? extends IOCase>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IteratorChain<IOCase> iteratorChain0 = null;
      try {
        iteratorChain0 = new IteratorChain<IOCase>((Iterator<? extends IOCase>) null, (Iterator<? extends IOCase>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IteratorChain<Object> iteratorChain0 = null;
      try {
        iteratorChain0 = new IteratorChain<Object>((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IteratorChain<IOCase> iteratorChain0 = new IteratorChain<IOCase>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      iteratorChain0.forEachRemaining(consumer0);
      // Undeclared exception!
      try { 
        iteratorChain0.addIterator((Iterator<? extends IOCase>) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // IteratorChain cannot be changed after the first use of a method from the Iterator interface
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 2);
      IteratorChain<Integer> iteratorChain0 = new IteratorChain<Integer>();
      iteratorArray0[0] = (Iterator<Integer>) iteratorChain0;
      iteratorArray0[1] = (Iterator<Integer>) iteratorChain0;
      IteratorChain<Integer> iteratorChain1 = new IteratorChain<Integer>(iteratorArray0);
      // Undeclared exception!
      try { 
        iteratorChain1.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator contains no elements
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractEmptyIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 2);
      IteratorChain<Integer> iteratorChain0 = new IteratorChain<Integer>();
      iteratorArray0[0] = (Iterator<Integer>) iteratorChain0;
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Integer integer0 = new Integer((-2206));
      arrayDeque0.add(integer0);
      Iterator<Integer> iterator0 = arrayDeque0.iterator();
      iteratorArray0[1] = iterator0;
      IteratorChain<Integer> iteratorChain1 = new IteratorChain<Integer>(iteratorArray0);
      iteratorChain1.next();
      iteratorChain1.remove();
      assertTrue(iteratorChain1.isLocked());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      IteratorChain<Integer> iteratorChain0 = new IteratorChain<Integer>(listIterator0);
      iteratorChain0.updateCurrentIterator();
      assertFalse(iteratorChain0.isLocked());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 2);
      iteratorArray0[0] = (Iterator<Integer>) listIterator0;
      iteratorArray0[1] = (Iterator<Integer>) listIterator0;
      IteratorChain<Object> iteratorChain0 = new IteratorChain<Object>(iteratorArray0);
      boolean boolean0 = iteratorChain0.isLocked();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 2);
      IteratorChain<Integer> iteratorChain0 = new IteratorChain<Integer>();
      iteratorArray0[0] = (Iterator<Integer>) iteratorChain0;
      iteratorArray0[1] = iteratorArray0[0];
      IteratorChain<Integer> iteratorChain1 = new IteratorChain<Integer>(iteratorArray0);
      // Undeclared exception!
      try { 
        iteratorChain1.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Iterator contains no elements
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractEmptyIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 2);
      IteratorChain<Integer> iteratorChain0 = null;
      try {
        iteratorChain0 = new IteratorChain<Integer>(iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IteratorChain<Integer> iteratorChain0 = new IteratorChain<Integer>();
      int int0 = iteratorChain0.size();
      assertEquals(0, int0);
  }
}
