/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 08:06:28 GMT 2025
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Converter;
import com.google.common.base.Function;
import java.lang.reflect.Array;
import java.nio.file.FileVisitResult;
import java.nio.file.StandardCopyOption;
import java.time.DayOfWeek;
import java.time.Month;
import java.time.chrono.HijrahEra;
import java.time.format.FormatStyle;
import java.time.format.ResolverStyle;
import java.time.format.TextStyle;
import java.time.temporal.ChronoField;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.SortedMap;
import java.util.Stack;
import java.util.TreeMap;
import java.util.concurrent.TimeUnit;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IterableMap;
import org.apache.commons.collections4.IterableSortedMap;
import org.apache.commons.collections4.MapUtils;
import org.apache.commons.collections4.OrderedMap;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.bidimap.DualLinkedHashBidiMap;
import org.apache.commons.collections4.bidimap.DualTreeBidiMap;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedTransformer;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.keyvalue.UnmodifiableMapEntry;
import org.apache.commons.collections4.map.AbstractReferenceMap;
import org.apache.commons.collections4.map.CaseInsensitiveMap;
import org.apache.commons.collections4.map.CompositeMap;
import org.apache.commons.collections4.map.DefaultedMap;
import org.apache.commons.collections4.map.Flat3Map;
import org.apache.commons.collections4.map.HashedMap;
import org.apache.commons.collections4.map.LRUMap;
import org.apache.commons.collections4.map.LazyMap;
import org.apache.commons.collections4.map.LinkedMap;
import org.apache.commons.collections4.map.ListOrderedMap;
import org.apache.commons.collections4.map.PassiveExpiringMap;
import org.apache.commons.collections4.map.ReferenceIdentityMap;
import org.apache.commons.collections4.map.ReferenceMap;
import org.apache.commons.collections4.map.SingletonMap;
import org.apache.commons.collections4.map.StaticBucketMap;
import org.apache.commons.collections4.map.TransformedSortedMap;
import org.apache.commons.io.IOCase;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class MapUtils_ESTest extends MapUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<DayOfWeek, DayOfWeek> referenceMap0 = new ReferenceMap<DayOfWeek, DayOfWeek>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 343, 0.75F);
      DayOfWeek dayOfWeek0 = DayOfWeek.SATURDAY;
      DayOfWeek dayOfWeek1 = DayOfWeek.WEDNESDAY;
      referenceMap0.put(dayOfWeek1, dayOfWeek0);
      Short short0 = new Short((short) (-1464));
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.io.filefilter.PathVisitorFileFilter");
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(short0, defaultEquator0);
      MapUtils.debugPrint(mockPrintStream0, equalPredicate0, referenceMap0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<DayOfWeek, DayOfWeek> referenceMap0 = new ReferenceMap<DayOfWeek, DayOfWeek>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 343, 0.75F);
      DayOfWeek dayOfWeek0 = DayOfWeek.SATURDAY;
      DayOfWeek dayOfWeek1 = DayOfWeek.MONDAY;
      referenceMap0.put(dayOfWeek0, dayOfWeek1);
      Short short0 = new Short((short) (-1464));
      Short short1 = MapUtils.getShort((Map<? super DayOfWeek, ?>) referenceMap0, dayOfWeek0, short0);
      assertEquals((short) (-1464), (short)short1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TreeMap<Predicate<Object>, AbstractMap.SimpleImmutableEntry<Predicate<Object>, Object>> treeMap0 = new TreeMap<Predicate<Object>, AbstractMap.SimpleImmutableEntry<Predicate<Object>, Object>>();
      SortedMap<Predicate<Object>, AbstractMap.SimpleImmutableEntry<Predicate<Object>, Object>> sortedMap0 = MapUtils.synchronizedSortedMap((SortedMap<Predicate<Object>, AbstractMap.SimpleImmutableEntry<Predicate<Object>, Object>>) treeMap0);
      assertTrue(sortedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Transformer<Byte, Byte> transformer0 = InvokerTransformer.invokerTransformer("");
      DualTreeBidiMap<Byte, Byte> dualTreeBidiMap0 = new DualTreeBidiMap<Byte, Byte>();
      IterableSortedMap<Byte, Byte> iterableSortedMap0 = MapUtils.iterableSortedMap((SortedMap<Byte, Byte>) dualTreeBidiMap0);
      Byte byte0 = new Byte((byte)51);
      Transformer<Object, Byte> transformer1 = ConstantTransformer.constantTransformer(byte0);
      SortedMap<Byte, Byte> sortedMap0 = MapUtils.transformedSortedMap((SortedMap<Byte, Byte>) iterableSortedMap0, (Transformer<? super Byte, ? extends Byte>) transformer1, (Transformer<? super Byte, ? extends Byte>) transformer0);
      assertTrue(sortedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Transformer<Byte, Byte> transformer0 = InvokerTransformer.invokerTransformer("");
      DualTreeBidiMap<Byte, Byte> dualTreeBidiMap0 = new DualTreeBidiMap<Byte, Byte>();
      IterableSortedMap<Byte, Byte> iterableSortedMap0 = MapUtils.iterableSortedMap((SortedMap<Byte, Byte>) dualTreeBidiMap0);
      Byte byte0 = new Byte((byte)54);
      dualTreeBidiMap0.put(byte0, byte0);
      Transformer<Object, Byte> transformer1 = ConstantTransformer.constantTransformer((Byte) null);
      SortedMap<Byte, Byte> sortedMap0 = MapUtils.transformedSortedMap((SortedMap<Byte, Byte>) iterableSortedMap0, (Transformer<? super Byte, ? extends Byte>) transformer0, (Transformer<? super Byte, ? extends Byte>) transformer1);
      assertEquals(1, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultedMap<Object, Object> defaultedMap0 = new DefaultedMap<Object, Object>((Object) null);
      HashedMap<Object, Object> hashedMap0 = new HashedMap<Object, Object>(0);
      OrderedMap<Object, Object> orderedMap0 = MapUtils.orderedMap((Map<Object, Object>) hashedMap0);
      MapUtils.safeAddToMap((Map<? super Object, Object>) orderedMap0, (Object) defaultedMap0, (Object) orderedMap0);
      int int0 = MapUtils.size(orderedMap0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StaticBucketMap<Float, Float> staticBucketMap0 = new StaticBucketMap<Float, Float>();
      Object[] objectArray0 = new Object[1];
      Map<Float, Float> map0 = MapUtils.putAll((Map<Float, Float>) staticBucketMap0, objectArray0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<DayOfWeek, DayOfWeek> referenceMap0 = new ReferenceMap<DayOfWeek, DayOfWeek>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 343, 0.75F);
      DayOfWeek dayOfWeek0 = DayOfWeek.SATURDAY;
      referenceMap0.put(dayOfWeek0, dayOfWeek0);
      IterableMap<DayOfWeek, DayOfWeek> iterableMap0 = MapUtils.predicatedMap((Map<DayOfWeek, DayOfWeek>) referenceMap0, (Predicate<? super DayOfWeek>) null, (Predicate<? super DayOfWeek>) null);
      assertFalse(iterableMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<DayOfWeek, DayOfWeek> referenceMap0 = new ReferenceMap<DayOfWeek, DayOfWeek>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 343, 0.75F);
      DayOfWeek dayOfWeek0 = DayOfWeek.SATURDAY;
      Short short0 = new Short((short) (-1464));
      Short short1 = MapUtils.getShort((Map<? super DayOfWeek, ?>) referenceMap0, dayOfWeek0, short0);
      assertEquals((short) (-1464), (short)short1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CaseInsensitiveMap<Object, Object> caseInsensitiveMap0 = new CaseInsensitiveMap<Object, Object>(15);
      ListOrderedMap<Object, Object> listOrderedMap0 = ListOrderedMap.listOrderedMap((Map<Object, Object>) caseInsensitiveMap0);
      StaticBucketMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> staticBucketMap0 = new StaticBucketMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = MapUtils.getObject((Map<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>) staticBucketMap0, (Object) listOrderedMap0, (AbstractMap.SimpleImmutableEntry<Object, Object>) null);
      assertNull(abstractMap_SimpleImmutableEntry0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TreeMap<Object, Object> treeMap0 = new TreeMap<Object, Object>();
      Map<Object, Object> map0 = MapUtils.invertMap((Map<Object, Object>) treeMap0);
      long long0 = MapUtils.getLongValue((Map<? super Object, ?>) map0, (Object) treeMap0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DualTreeBidiMap<ResolverStyle, Byte> dualTreeBidiMap0 = new DualTreeBidiMap<ResolverStyle, Byte>();
      ResolverStyle resolverStyle0 = ResolverStyle.SMART;
      Long long0 = new Long(3100L);
      Long long1 = MapUtils.getLong((Map<? super ResolverStyle, ?>) dualTreeBidiMap0, resolverStyle0, long0);
      assertEquals(3100L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PassiveExpiringMap<Object, Object> passiveExpiringMap0 = new PassiveExpiringMap<Object, Object>(367L);
      Integer integer0 = new Integer(1664);
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(function0).apply(any());
      Converter<Object, Integer> converter0 = Converter.from((Function<? super Object, ? extends Integer>) function0, (Function<? super Integer, ?>) function0);
      Integer integer1 = MapUtils.getInteger((Map<? super Object, ?>) passiveExpiringMap0, (Object) passiveExpiringMap0, (java.util.function.Function<Object, Integer>) converter0);
      assertEquals(1664, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PassiveExpiringMap<Object, Object> passiveExpiringMap0 = new PassiveExpiringMap<Object, Object>(367L);
      Integer integer0 = new Integer(1664);
      Integer integer1 = MapUtils.getInteger((Map<? super Predicate<Object>, ?>) passiveExpiringMap0, (Predicate<Object>) null, integer0);
      assertEquals(1664, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Properties properties0 = MapUtils.toProperties((Map<Locale.Category, LinkedList<Predicate>>) null);
      Integer integer0 = MapUtils.getInteger((Map<? super Object, ?>) properties0, (Object) properties0, (Integer) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CaseInsensitiveMap<Object, Object> caseInsensitiveMap0 = new CaseInsensitiveMap<Object, Object>(0);
      int int0 = MapUtils.getIntValue((Map<? super AbstractMap.SimpleImmutableEntry<Predicate<Object>, Object>, ?>) caseInsensitiveMap0, (AbstractMap.SimpleImmutableEntry<Predicate<Object>, Object>) null, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TreeMap<Object, Object> treeMap0 = new TreeMap<Object, Object>();
      Map<Object, Object> map0 = MapUtils.invertMap((Map<Object, Object>) treeMap0);
      Object object0 = new Object();
      int int0 = MapUtils.getIntValue((Map<? super Object, ?>) map0, object0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceMap<Object, Object> referenceMap0 = new ReferenceMap<Object, Object>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, true);
      double double0 = MapUtils.getDoubleValue((Map<? super Object, ?>) referenceMap0, (Object) null, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LRUMap<Object, Object> lRUMap0 = new LRUMap<Object, Object>(3088, 2382, false);
      double double0 = MapUtils.getDoubleValue((Map<? super Object, ?>) lRUMap0, (Object) null, (-1138.0934199));
      assertEquals((-1138.0934199), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PassiveExpiringMap<Long, Long> passiveExpiringMap0 = new PassiveExpiringMap<Long, Long>();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) passiveExpiringMap0;
      objectArray0[4] = (Object) passiveExpiringMap0;
      // Undeclared exception!
      try { 
        MapUtils.putAll((Map<Long, Long>) passiveExpiringMap0, objectArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-82));
      SingletonMap<LinkedList<Byte>, Byte> singletonMap0 = new SingletonMap<LinkedList<Byte>, Byte>(linkedList0, byte0);
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        MapUtils.putAll((Map<LinkedList<Byte>, Byte>) singletonMap0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot put new key/value pair - Map is fixed size singleton
         //
         verifyException("org.apache.commons.collections4.map.SingletonMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CaseInsensitiveMap<Object, Object> caseInsensitiveMap0 = new CaseInsensitiveMap<Object, Object>(0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(caseInsensitiveMap0, defaultEquator0);
      Converter<DayOfWeek, DayOfWeek> converter0 = Converter.identity();
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceMap<DayOfWeek, DayOfWeek> referenceMap0 = new ReferenceMap<DayOfWeek, DayOfWeek>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, true);
      DayOfWeek dayOfWeek0 = DayOfWeek.WEDNESDAY;
      referenceMap0.computeIfAbsent(dayOfWeek0, converter0);
      // Undeclared exception!
      try { 
        MapUtils.predicatedMap((Map<DayOfWeek, DayOfWeek>) referenceMap0, (Predicate<? super DayOfWeek>) equalPredicate0, (Predicate<? super DayOfWeek>) equalPredicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add key - Predicate rejected it
         //
         verifyException("org.apache.commons.collections4.map.PredicatedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedHashSet<Transformer<Object, Object>> linkedHashSet0 = new LinkedHashSet<Transformer<Object, Object>>();
      Transformer<Object, Object> transformer0 = ChainedTransformer.chainedTransformer((Collection<? extends Transformer<? super Object, ?>>) linkedHashSet0);
      // Undeclared exception!
      try { 
        MapUtils.lazySortedMap((SortedMap<Object, Object>) null, (Transformer<? super Object, ?>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedMap<Float, Byte> linkedMap0 = new LinkedMap<Float, Byte>(0, 84.681755F);
      HashedMap<Float, Byte> hashedMap0 = new HashedMap<Float, Byte>(linkedMap0);
      // Undeclared exception!
      try { 
        MapUtils.lazyMap((Map<Float, Byte>) hashedMap0, (Factory<? extends Byte>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // factory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtils.invertMap((Map<Map<DayOfWeek, DayOfWeek>, Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<DayOfWeek, DayOfWeek> referenceMap0 = new ReferenceMap<DayOfWeek, DayOfWeek>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 343, 0.75F);
      DayOfWeek dayOfWeek0 = DayOfWeek.SATURDAY;
      DayOfWeek dayOfWeek1 = DayOfWeek.WEDNESDAY;
      referenceMap0.put(dayOfWeek1, dayOfWeek0);
      Converter<DayOfWeek, DayOfWeek> converter0 = Converter.identity();
      DayOfWeek dayOfWeek2 = referenceMap0.computeIfAbsent(dayOfWeek1, converter0);
      Transformer<DayOfWeek, DayOfWeek> transformer0 = InvokerTransformer.invokerTransformer("");
      IterableMap<DayOfWeek, DayOfWeek> iterableMap0 = MapUtils.lazyMap((Map<DayOfWeek, DayOfWeek>) referenceMap0, (Transformer<? super DayOfWeek, ? extends DayOfWeek>) transformer0);
      Short short0 = new Short((short)0);
      // Undeclared exception!
      try { 
        MapUtils.getShort((Map<? super DayOfWeek, ?>) iterableMap0, dayOfWeek2, short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.time.DayOfWeek' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TreeMap<Object, Object> treeMap0 = new TreeMap<Object, Object>();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) null);
      // Undeclared exception!
      try { 
        MapUtils.getShort((Map<? super Object, ?>) treeMap0, (Object) predicate0, (Short) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<DayOfWeek, DayOfWeek> referenceMap0 = new ReferenceMap<DayOfWeek, DayOfWeek>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 327, 327);
      DayOfWeek dayOfWeek0 = DayOfWeek.WEDNESDAY;
      Transformer<DayOfWeek, DayOfWeek> transformer0 = InvokerTransformer.invokerTransformer("");
      IterableMap<DayOfWeek, DayOfWeek> iterableMap0 = MapUtils.lazyMap((Map<DayOfWeek, DayOfWeek>) referenceMap0, (Transformer<? super DayOfWeek, ? extends DayOfWeek>) transformer0);
      // Undeclared exception!
      try { 
        MapUtils.getNumber((Map<? super DayOfWeek, ?>) iterableMap0, dayOfWeek0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.time.DayOfWeek' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DualTreeBidiMap<Object, Object> dualTreeBidiMap0 = new DualTreeBidiMap<Object, Object>();
      // Undeclared exception!
      try { 
        MapUtils.getNumber((Map<? super Object, ?>) dualTreeBidiMap0, (Object) dualTreeBidiMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ListOrderedMap<Object, Object> listOrderedMap0 = new ListOrderedMap<Object, Object>();
      Transformer<Object, Object> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ?>) listOrderedMap0);
      LazyMap<Object, Object> lazyMap0 = LazyMap.lazyMap((Map<Object, Object>) listOrderedMap0, (Transformer<? super Object, ?>) transformer0);
      lazyMap0.put(listOrderedMap0, listOrderedMap0);
      // Undeclared exception!
      try { 
        MapUtils.getMap((Map<? super Object, ?>) listOrderedMap0, (Object) listOrderedMap0, (Map<?, ?>) lazyMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PassiveExpiringMap<Object, Object> passiveExpiringMap0 = new PassiveExpiringMap<Object, Object>(367L);
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Converter<Object, Integer> converter0 = Converter.from((Function<? super Object, ? extends Integer>) function0, (Function<? super Integer, ?>) function0);
      // Undeclared exception!
      try { 
        MapUtils.getInteger((Map<? super Object, ?>) passiveExpiringMap0, (Object) passiveExpiringMap0, (java.util.function.Function<Object, Integer>) converter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Short short0 = new Short((short) (-1464));
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(short0, defaultEquator0);
      PassiveExpiringMap<Object, Object> passiveExpiringMap0 = new PassiveExpiringMap<Object, Object>();
      Function<Object, Float> function0 = (Function<Object, Float>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Float, Predicate<Object>> function1 = (Function<Float, Predicate<Object>>) mock(Function.class, new ViolatedAssumptionAnswer());
      Converter<Predicate<Object>, Float> converter0 = Converter.from((Function<? super Predicate<Object>, ? extends Float>) function0, (Function<? super Float, ? extends Predicate<Object>>) function1);
      // Undeclared exception!
      try { 
        MapUtils.getFloatValue((Map<? super Predicate<Object>, ?>) passiveExpiringMap0, (Predicate<Object>) equalPredicate0, (java.util.function.Function<Predicate<Object>, Float>) converter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CaseInsensitiveMap<Predicate<Object>, Object> caseInsensitiveMap0 = new CaseInsensitiveMap<Predicate<Object>, Object>(7);
      Properties properties0 = MapUtils.toProperties((Map<Predicate<Object>, Object>) caseInsensitiveMap0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>((Object) null);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(identityPredicate0);
      Function<Object, Double> function0 = (Function<Object, Double>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Converter<Object, Double> converter0 = Converter.from((Function<? super Object, ? extends Double>) function0, (Function<? super Double, ?>) function0);
      // Undeclared exception!
      try { 
        MapUtils.getDoubleValue((Map<? super Object, ?>) properties0, (Object) nullIsExceptionPredicate0, (java.util.function.Function<Object, Double>) converter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ListOrderedMap<Object, Object> listOrderedMap0 = new ListOrderedMap<Object, Object>();
      Transformer<Object, Object> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ?>) listOrderedMap0);
      LazyMap<Object, Object> lazyMap0 = LazyMap.lazyMap((Map<Object, Object>) listOrderedMap0, (Transformer<? super Object, ?>) transformer0);
      lazyMap0.put(listOrderedMap0, listOrderedMap0);
      // Undeclared exception!
      try { 
        MapUtils.getBooleanValue((Map<? super Object, ?>) listOrderedMap0, (Object) lazyMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Properties properties0 = MapUtils.toProperties((Map<LinkedList<Month>, Month>) null);
      Function<Object, Boolean> function0 = (Function<Object, Boolean>) mock(Function.class, new ViolatedAssumptionAnswer());
      Converter<Object, Boolean> converter0 = Converter.from((Function<? super Object, ? extends Boolean>) function0, (Function<? super Boolean, ?>) function0);
      Function<Boolean, Predicate<Object>> function1 = (Function<Boolean, Predicate<Object>>) mock(Function.class, new ViolatedAssumptionAnswer());
      Converter<Predicate<Object>, Boolean> converter1 = Converter.from((Function<? super Predicate<Object>, ? extends Boolean>) converter0, (Function<? super Boolean, ? extends Predicate<Object>>) function1);
      // Undeclared exception!
      try { 
        MapUtils.getBoolean((Map<? super Predicate<Object>, ?>) properties0, (Predicate<Object>) null, (java.util.function.Function<Predicate<Object>, Boolean>) converter1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LRUMap<Byte, Byte> lRUMap0 = new LRUMap<Byte, Byte>();
      boolean boolean0 = MapUtils.isEmpty(lRUMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CaseInsensitiveMap<Object, Object> caseInsensitiveMap0 = new CaseInsensitiveMap<Object, Object>(0);
      Long long0 = new Long(0);
      Map<?, ?> map0 = MapUtils.getMap((Map<? super Long, ?>) caseInsensitiveMap0, long0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Transformer<DayOfWeek, DayOfWeek> transformer0 = InvokerTransformer.invokerTransformer("");
      HashedMap<Object, Object> hashedMap0 = new HashedMap<Object, Object>(0);
      Long long0 = MapUtils.getLong((Map<? super Object, ?>) hashedMap0, (Object) transformer0);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      Integer integer0 = MapUtils.getInteger((Map<? super IOCase, ?>) null, iOCase0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Predicate<ResolverStyle>[] predicateArray0 = (Predicate<ResolverStyle>[]) Array.newInstance(Predicate.class, 3);
      AnyPredicate<ResolverStyle> anyPredicate0 = new AnyPredicate<ResolverStyle>(predicateArray0);
      CompositeMap<Object, Object> compositeMap0 = new CompositeMap<Object, Object>();
      Float float0 = MapUtils.getFloat((Map<? super Object, ?>) compositeMap0, (Object) anyPredicate0);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ReferenceIdentityMap<Object, Object> referenceIdentityMap0 = new ReferenceIdentityMap<Object, Object>();
      CompositeMap<Object, Object> compositeMap0 = new CompositeMap<Object, Object>(referenceIdentityMap0, referenceIdentityMap0);
      HashedMap<Object, Object> hashedMap0 = new HashedMap<Object, Object>(compositeMap0);
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) stack0);
      Double double0 = MapUtils.getDouble((Map<? super Predicate<Object>, ?>) hashedMap0, predicate0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Float, Float> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Float, Float>(0L);
      PassiveExpiringMap<Float, Float> passiveExpiringMap0 = new PassiveExpiringMap<Float, Float>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      Float float0 = new Float((double) 0L);
      Byte byte0 = MapUtils.getByte((Map<? super Float, ?>) passiveExpiringMap0, float0);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Properties properties0 = MapUtils.toProperties((Map<Locale.Category, LinkedList<Predicate>>) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("sortedMap");
      MapUtils.debugPrint(mockPrintStream0, (Object) null, properties0);
      assertEquals(0, properties0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      MockPrintStream mockPrintStream0 = new MockPrintStream("sortedMap");
      MapUtils.debugPrint(mockPrintStream0, timeUnit0, (Map<?, ?>) null);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = MapUtils.size((Map<?, ?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceMap<Object, Object> referenceMap0 = new ReferenceMap<Object, Object>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, true);
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        MapUtils.putAll((Map<Object, Object>) referenceMap0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<DayOfWeek, DayOfWeek> referenceMap0 = new ReferenceMap<DayOfWeek, DayOfWeek>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 343, 0.75F);
      DayOfWeek dayOfWeek0 = DayOfWeek.SATURDAY;
      referenceMap0.put(dayOfWeek0, dayOfWeek0);
      boolean boolean0 = MapUtils.isNotEmpty(referenceMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultedMap<Object, Object> defaultedMap0 = new DefaultedMap<Object, Object>((Object) null);
      HashedMap<Object, Object> hashedMap0 = new HashedMap<Object, Object>(0);
      OrderedMap<Object, Object> orderedMap0 = MapUtils.orderedMap((Map<Object, Object>) hashedMap0);
      MapUtils.safeAddToMap((Map<? super Object, Object>) orderedMap0, (Object) defaultedMap0, (Object) orderedMap0);
      boolean boolean0 = MapUtils.isEmpty(orderedMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CompositeMap<Boolean, Boolean> compositeMap0 = new CompositeMap<Boolean, Boolean>();
      boolean boolean0 = MapUtils.isNotEmpty(compositeMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TreeMap<Object, Object> treeMap0 = new TreeMap<Object, Object>();
      Map<Object, Object> map0 = MapUtils.invertMap((Map<Object, Object>) treeMap0);
      Byte byte0 = new Byte((byte)14);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Byte byte1 = MapUtils.getByte((Map<? super LinkedList<Object>, ?>) map0, linkedList0, byte0);
      assertEquals((byte)14, (byte)byte1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DualTreeBidiMap<ResolverStyle, LinkedList<ResolverStyle>> dualTreeBidiMap0 = new DualTreeBidiMap<ResolverStyle, LinkedList<ResolverStyle>>();
      ResolverStyle resolverStyle0 = ResolverStyle.STRICT;
      LinkedList<ResolverStyle> linkedList0 = MapUtils.getObject((Map<? super ResolverStyle, LinkedList<ResolverStyle>>) dualTreeBidiMap0, resolverStyle0);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Predicate<Byte> predicate0 = FalsePredicate.falsePredicate();
      Short short0 = MapUtils.getShort((Map<? super Predicate<Byte>, ?>) null, predicate0);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Predicate<Predicate<Object>> predicate0 = ExceptionPredicate.exceptionPredicate();
      DefaultedMap<Object, Object> defaultedMap0 = new DefaultedMap<Object, Object>(predicate0);
      Function<Object, Boolean> function0 = (Function<Object, Boolean>) mock(Function.class, new ViolatedAssumptionAnswer());
      Converter<Object, Boolean> converter0 = Converter.from((Function<? super Object, ? extends Boolean>) function0, (Function<? super Boolean, ?>) function0);
      Function<Boolean, Predicate<Object>> function1 = (Function<Boolean, Predicate<Object>>) mock(Function.class, new ViolatedAssumptionAnswer());
      Converter<Predicate<Object>, Boolean> converter1 = Converter.from((Function<? super Predicate<Object>, ? extends Boolean>) converter0, (Function<? super Boolean, ? extends Predicate<Object>>) function1);
      Boolean boolean0 = MapUtils.getBoolean((Map<? super Predicate<Object>, ?>) defaultedMap0, (Predicate<Object>) null, (java.util.function.Function<Predicate<Object>, Boolean>) converter1);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Map<AbstractMap.SimpleImmutableEntry<Predicate, FormatStyle>, Predicate<AbstractMap.SimpleImmutableEntry>> map0 = MapUtils.emptyIfNull((Map<AbstractMap.SimpleImmutableEntry<Predicate, FormatStyle>, Predicate<AbstractMap.SimpleImmutableEntry>>) null);
      DualLinkedHashBidiMap<Object, Object> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Object, Object>(map0);
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>(dualLinkedHashBidiMap0);
      Long long0 = MapUtils.getLong((Map<? super Object, ?>) linkedMap0, (Object) map0, (Long) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TreeMap<Predicate<Object>, AbstractMap.SimpleImmutableEntry<Predicate<Object>, Object>> treeMap0 = new TreeMap<Predicate<Object>, AbstractMap.SimpleImmutableEntry<Predicate<Object>, Object>>();
      IterableMap<Predicate<Object>, AbstractMap.SimpleImmutableEntry<Predicate<Object>, Object>> iterableMap0 = MapUtils.iterableMap((Map<Predicate<Object>, AbstractMap.SimpleImmutableEntry<Predicate<Object>, Object>>) treeMap0);
      assertNotNull(iterableMap0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceMap<Object, Object> referenceMap0 = new ReferenceMap<Object, Object>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, true);
      Short short0 = MapUtils.getShort((Map<? super Object, ?>) referenceMap0, (Object) abstractReferenceMap_ReferenceStrength0, (java.util.function.Function<Object, Short>) null);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ReferenceIdentityMap<Object, Object> referenceIdentityMap0 = new ReferenceIdentityMap<Object, Object>();
      CompositeMap<Object, Object> compositeMap0 = new CompositeMap<Object, Object>(referenceIdentityMap0, referenceIdentityMap0);
      HashedMap<Object, Object> hashedMap0 = new HashedMap<Object, Object>(compositeMap0);
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) stack0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      EqualPredicate<Predicate<Object>> equalPredicate0 = new EqualPredicate<Predicate<Object>>(nullIsFalsePredicate0);
      Object object0 = hashedMap0.put(equalPredicate0, compositeMap0);
      short short0 = MapUtils.getShortValue((Map<? super Object, ?>) referenceIdentityMap0, object0, (short)7);
      assertEquals((short)7, short0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtils.unmodifiableSortedMap((SortedMap<TextStyle, ? extends TextStyle>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PassiveExpiringMap<Byte, Predicate<Byte>> passiveExpiringMap0 = new PassiveExpiringMap<Byte, Predicate<Byte>>(304L);
      DualLinkedHashBidiMap<Byte, Predicate<Byte>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Byte, Predicate<Byte>>(passiveExpiringMap0);
      Map<Byte, Predicate<Byte>> map0 = MapUtils.synchronizedMap((Map<Byte, Predicate<Byte>>) dualLinkedHashBidiMap0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PassiveExpiringMap<Object, Object> passiveExpiringMap0 = new PassiveExpiringMap<Object, Object>(367L);
      Function<Object, Float> function0 = (Function<Object, Float>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Float, Predicate<Object>> function1 = (Function<Float, Predicate<Object>>) mock(Function.class, new ViolatedAssumptionAnswer());
      Converter<Predicate<Object>, Float> converter0 = Converter.from((Function<? super Predicate<Object>, ? extends Float>) function0, (Function<? super Float, ? extends Predicate<Object>>) function1);
      float float0 = MapUtils.getFloatValue((Map<? super Predicate<Object>, ?>) passiveExpiringMap0, (Predicate<Object>) null, (java.util.function.Function<Predicate<Object>, Float>) converter0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CaseInsensitiveMap<Object, Predicate<Object>> caseInsensitiveMap0 = new CaseInsensitiveMap<Object, Predicate<Object>>();
      Map<Object, Predicate<Object>> map0 = MapUtils.unmodifiableMap((Map<?, ? extends Predicate<Object>>) caseInsensitiveMap0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StaticBucketMap<Float, Float> staticBucketMap0 = new StaticBucketMap<Float, Float>();
      Float float0 = new Float(708.4996);
      long long0 = MapUtils.getLongValue((Map<? super Float, ?>) staticBucketMap0, float0, 1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Object, Object> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Object, Object>(4358L, timeUnit0);
      PassiveExpiringMap<Object, Object> passiveExpiringMap0 = new PassiveExpiringMap<Object, Object>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      Predicate<Closure<Object>> predicate0 = UniquePredicate.uniquePredicate();
      Function<Object, Double> function0 = (Function<Object, Double>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Converter<Object, Double> converter0 = Converter.from((Function<? super Object, ? extends Double>) function0, (Function<? super Double, ?>) function0);
      // Undeclared exception!
      try { 
        MapUtils.getDouble((Map<? super Object, ?>) passiveExpiringMap0, (Object) predicate0, (java.util.function.Function<Object, Double>) converter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TreeMap<Short, Short> treeMap0 = new TreeMap<Short, Short>();
      Short short0 = new Short((short)64);
      Transformer<Short, Short> transformer0 = ConstantTransformer.constantTransformer(short0);
      TransformedSortedMap<Short, Short> transformedSortedMap0 = TransformedSortedMap.transformingSortedMap((SortedMap<Short, Short>) treeMap0, (Transformer<? super Short, ? extends Short>) transformer0, (Transformer<? super Short, ? extends Short>) transformer0);
      double double0 = MapUtils.getDoubleValue((Map<? super Short, ?>) transformedSortedMap0, short0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ReferenceIdentityMap<Object, Object> referenceIdentityMap0 = new ReferenceIdentityMap<Object, Object>();
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) stack0);
      boolean boolean0 = MapUtils.getBooleanValue((Map<? super Predicate<Object>, ?>) referenceIdentityMap0, predicate0, (java.util.function.Function<Predicate<Object>, Boolean>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      HijrahEra hijrahEra0 = HijrahEra.AH;
      long long0 = MapUtils.getLongValue((Map<? super HijrahEra, ?>) null, hijrahEra0, (java.util.function.Function<HijrahEra, Long>) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PassiveExpiringMap<Object, Object> passiveExpiringMap0 = new PassiveExpiringMap<Object, Object>(367L);
      Integer integer0 = Integer.valueOf((-1219));
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(function0).apply(any());
      Converter<Object, Integer> converter0 = Converter.from((Function<? super Object, ? extends Integer>) function0, (Function<? super Integer, ?>) function0);
      Integer integer1 = MapUtils.getInteger((Map<? super Object, ?>) passiveExpiringMap0, (Object) passiveExpiringMap0, (java.util.function.Function<Object, Integer>) converter0);
      assertEquals((-1219), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      PassiveExpiringMap<Object, Object> passiveExpiringMap0 = new PassiveExpiringMap<Object, Object>(367L);
      String string0 = MapUtils.getString((Map<? super Predicate<Object>, ?>) passiveExpiringMap0, (Predicate<Object>) null, "CharMatcher.anyOf(\"");
      assertEquals("CharMatcher.anyOf(\"", string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Transformer<Byte, Byte> transformer0 = InvokerTransformer.invokerTransformer("glJJ~!sumB|B");
      // Undeclared exception!
      try { 
        MapUtils.transformedSortedMap((SortedMap<Byte, Byte>) null, (Transformer<? super Byte, ? extends Byte>) transformer0, (Transformer<? super Byte, ? extends Byte>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ListOrderedMap<Object, Object> listOrderedMap0 = new ListOrderedMap<Object, Object>();
      Transformer<Object, Object> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ?>) listOrderedMap0);
      LazyMap<Object, Object> lazyMap0 = LazyMap.lazyMap((Map<Object, Object>) listOrderedMap0, (Transformer<? super Object, ?>) transformer0);
      boolean boolean0 = MapUtils.getBooleanValue((Map<? super Object, ?>) listOrderedMap0, (Object) lazyMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      LRUMap<FileVisitResult, Predicate<FileVisitResult>> lRUMap0 = new LRUMap<FileVisitResult, Predicate<FileVisitResult>>(13, 13);
      Properties properties0 = MapUtils.toProperties((Map<FileVisitResult, Predicate<FileVisitResult>>) lRUMap0);
      StandardCopyOption standardCopyOption0 = StandardCopyOption.ATOMIC_MOVE;
      Short short0 = new Short((short)4);
      Short short1 = MapUtils.getShort((Map<? super StandardCopyOption, ?>) properties0, standardCopyOption0, short0);
      assertEquals((short)4, (short)short1);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DualTreeBidiMap<Byte, Byte> dualTreeBidiMap0 = new DualTreeBidiMap<Byte, Byte>();
      Byte byte0 = new Byte((byte)0);
      Float float0 = new Float(0.0F);
      Float float1 = MapUtils.getFloat((Map<? super Byte, ?>) dualTreeBidiMap0, byte0, float0);
      assertEquals(0.0F, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DualTreeBidiMap<Byte, Byte> dualTreeBidiMap0 = new DualTreeBidiMap<Byte, Byte>();
      Byte byte0 = new Byte((byte)0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("2#MAWk?ZbZ-A");
      MapUtils.verbosePrint(mockPrintStream0, byte0, dualTreeBidiMap0);
      assertTrue(dualTreeBidiMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      LRUMap<Object, Object> lRUMap0 = new LRUMap<Object, Object>(3088, 2382, false);
      Float float0 = new Float((double) 3088);
      short short0 = MapUtils.getShortValue((Map<? super Float, ?>) lRUMap0, float0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Flat3Map<Object, Object> flat3Map0 = new Flat3Map<Object, Object>();
      Function<Object, Byte> function0 = (Function<Object, Byte>) mock(Function.class, new ViolatedAssumptionAnswer());
      Converter<Object, Byte> converter0 = Converter.from((Function<? super Object, ? extends Byte>) function0, (Function<? super Byte, ?>) function0);
      Byte byte0 = MapUtils.getByte((Map<? super Object, ?>) flat3Map0, (Object) null, (java.util.function.Function<Object, Byte>) converter0);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ListOrderedMap<Object, Object> listOrderedMap0 = new ListOrderedMap<Object, Object>();
      Transformer<Object, Object> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ?>) listOrderedMap0);
      LazyMap<Object, Object> lazyMap0 = LazyMap.lazyMap((Map<Object, Object>) listOrderedMap0, (Transformer<? super Object, ?>) transformer0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      int int0 = MapUtils.getIntValue((Map<? super Predicate<Object>, ?>) lazyMap0, predicate0, 699);
      assertFalse(lazyMap0.isEmpty());
      assertEquals(699, int0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceMap<Object, Object> referenceMap0 = new ReferenceMap<Object, Object>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, true);
      ResolverStyle resolverStyle0 = ResolverStyle.STRICT;
      byte byte0 = MapUtils.getByteValue((Map<? super ResolverStyle, ?>) referenceMap0, resolverStyle0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      TreeMap<Object, Object> treeMap0 = new TreeMap<Object, Object>();
      // Undeclared exception!
      try { 
        MapUtils.getLongValue((Map<? super Object, ?>) treeMap0, (Object) treeMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      TreeMap<Object, Object> treeMap0 = new TreeMap<Object, Object>();
      Transformer<Object, Object> transformer0 = ExceptionTransformer.exceptionTransformer();
      SortedMap<Object, Object> sortedMap0 = MapUtils.lazySortedMap((SortedMap<Object, Object>) treeMap0, (Transformer<? super Object, ?>) transformer0);
      assertTrue(sortedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      LRUMap<Object, Object> lRUMap0 = new LRUMap<Object, Object>(3088, 2382, false);
      double double0 = MapUtils.getDoubleValue((Map<? super Object, ?>) lRUMap0, (Object) null, (double) 3088);
      assertEquals(3088.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CaseInsensitiveMap<Object, Object> caseInsensitiveMap0 = new CaseInsensitiveMap<Object, Object>(0);
      ListOrderedMap<Object, Object> listOrderedMap0 = ListOrderedMap.listOrderedMap((Map<Object, Object>) caseInsensitiveMap0);
      Converter<Object, Object> converter0 = Converter.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Converter<Object, Integer> converter1 = Converter.from((Function<? super Object, ? extends Integer>) function0, (Function<? super Integer, ?>) converter0);
      // Undeclared exception!
      try { 
        MapUtils.getIntValue((Map<? super Object, ?>) listOrderedMap0, (Object) converter0, (java.util.function.Function<Object, Integer>) converter1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      LRUMap<FileVisitResult, Predicate<FileVisitResult>> lRUMap0 = new LRUMap<FileVisitResult, Predicate<FileVisitResult>>(13, 13);
      Properties properties0 = MapUtils.toProperties((Map<FileVisitResult, Predicate<FileVisitResult>>) lRUMap0);
      StandardCopyOption standardCopyOption0 = StandardCopyOption.ATOMIC_MOVE;
      Function<StandardCopyOption, Byte> function0 = (Function<StandardCopyOption, Byte>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any(java.nio.file.StandardCopyOption.class));
      Function<Object, StandardCopyOption> function1 = (Function<Object, StandardCopyOption>) mock(Function.class, new ViolatedAssumptionAnswer());
      Converter<StandardCopyOption, Number> converter0 = Converter.from((Function<? super StandardCopyOption, ? extends Number>) function0, (Function<? super Number, ? extends StandardCopyOption>) function1);
      // Undeclared exception!
      try { 
        MapUtils.getNumber((Map<? super StandardCopyOption, ?>) properties0, standardCopyOption0, (java.util.function.Function<StandardCopyOption, Number>) converter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      PassiveExpiringMap<Object, Object> passiveExpiringMap0 = new PassiveExpiringMap<Object, Object>(367L);
      Integer integer0 = Integer.valueOf((-1219));
      Integer integer1 = MapUtils.getInteger((Map<? super Predicate<Object>, ?>) passiveExpiringMap0, (Predicate<Object>) null, integer0);
      assertEquals((-1219), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      ListOrderedMap<Object, Object> listOrderedMap0 = new ListOrderedMap<Object, Object>();
      Transformer<Object, Object> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ?>) listOrderedMap0);
      LazyMap<Object, Object> lazyMap0 = LazyMap.lazyMap((Map<Object, Object>) listOrderedMap0, (Transformer<? super Object, ?>) transformer0);
      Map<?, ?> map0 = MapUtils.getMap((Map<? super Object, ?>) listOrderedMap0, (Object) listOrderedMap0, (Map<?, ?>) lazyMap0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtils.synchronizedSortedMap((SortedMap<Byte, Float>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtils.fixedSizeMap((Map<LinkedList<AbstractMap.SimpleImmutableEntry>, AbstractMap.SimpleImmutableEntry<LinkedList, LinkedList>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      Double double0 = new Double((-690.79807954246));
      Double double1 = MapUtils.getDouble((Map<? super IOCase, ?>) null, iOCase0, double0);
      assertEquals((-690.79807954246), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      ChronoField chronoField0 = ChronoField.ALIGNED_WEEK_OF_YEAR;
      UnmodifiableMapEntry<ChronoField, ChronoField> unmodifiableMapEntry0 = new UnmodifiableMapEntry<ChronoField, ChronoField>(chronoField0, chronoField0);
      SingletonMap<ChronoField, ChronoField> singletonMap0 = new SingletonMap<ChronoField, ChronoField>((Map.Entry<? extends ChronoField, ? extends ChronoField>) unmodifiableMapEntry0);
      byte byte0 = MapUtils.getByteValue((Map<? super ChronoField, ?>) singletonMap0, chronoField0, (byte) (-18));
      assertEquals((byte) (-18), byte0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<Object, Transformer<Object, Object>> referenceMap0 = new ReferenceMap<Object, Transformer<Object, Object>>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, true);
      Factory<Transformer<Object, Object>> factory0 = ExceptionFactory.exceptionFactory();
      IterableMap<Object, Transformer<Object, Object>> iterableMap0 = MapUtils.lazyMap((Map<Object, Transformer<Object, Object>>) referenceMap0, (Factory<? extends Transformer<Object, Object>>) factory0);
      assertTrue(iterableMap0.isEmpty());
  }
}
