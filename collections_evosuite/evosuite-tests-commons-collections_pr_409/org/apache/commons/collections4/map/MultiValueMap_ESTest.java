/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 08:36:54 GMT 2025
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.BoundType;
import java.nio.file.FileVisitResult;
import java.time.Month;
import java.time.format.FormatStyle;
import java.time.format.ResolverStyle;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.apache.commons.io.IOCase;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, Collection<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, Collection<Object>>();
      MultiValueMap<Integer, Integer> multiValueMap1 = new MultiValueMap<Integer, Integer>();
      MultiValueMap<Object, Object> multiValueMap2 = new MultiValueMap<Object, Object>();
      Object object0 = multiValueMap2.put(multiValueMap1, multiValueMap1);
      assertFalse(multiValueMap2.isEmpty());
      
      boolean boolean0 = multiValueMap2.removeMapping(multiValueMap0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<HashMap<Integer, Integer>, Integer> multiValueMap0 = new MultiValueMap<HashMap<Integer, Integer>, Integer>();
      int int0 = multiValueMap0.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, HashMap<Integer, Object>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, HashMap<Integer, Object>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      multiValueMap0.put(arrayList0, (Object) null);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, HashMap<Integer, Object>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, HashMap<Integer, Object>>();
      MultiValueMap<ArrayList<Integer>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<Integer>>) multiValueMap0);
      Integer integer0 = new Integer((-1));
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      multiValueMap0.putIfAbsent(arrayList0, integer0);
      multiValueMap1.getCollection(arrayList0);
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Integer>>();
      Factory<Collection<Object>> factory0 = ConstantFactory.constantFactory((Collection<Object>) null);
      MultiValueMap<Integer, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) multiValueMap0, factory0);
      Collection<Object> collection0 = multiValueMap1.createCollection((-2705));
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<Object, Collection<Integer>> multiValueMap0 = new MultiValueMap<Object, Collection<Integer>>();
      Collection<Collection<Integer>> collection0 = multiValueMap0.createCollection((-1169));
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Factory<Collection<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(arrayList0, factory0);
      MultiValueMap<Object, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: org.apache.commons.collections4.functors.ExceptionFactory
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, HashMap<ArrayList<Integer>, Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<HashMap<ArrayList<Integer>, Integer>>>) hashMap0);
      Factory<ArrayList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>((Map<Object, ? super ArrayList<Object>>) multiValueMap0, factory0);
      hashMap0.put((Object) null, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.ExceptionFactory cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, HashMap<Integer, Object>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, HashMap<Integer, Object>>();
      MultiValueMap<ArrayList<Integer>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<Integer>>) multiValueMap0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Object object0 = multiValueMap0.putIfAbsent(arrayList0, multiValueMap1);
      MultiValueMap<Integer, Integer> multiValueMap2 = new MultiValueMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        multiValueMap2.size(object0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<Locale.Category, Integer> multiValueMap0 = new MultiValueMap<Locale.Category, Integer>();
      MultiValueMap<HashMap<Integer, Integer>, Locale.Category> multiValueMap1 = new MultiValueMap<HashMap<Integer, Integer>, Locale.Category>();
      MultiValueMap<Locale.Category, ArrayList<Locale.Category>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Locale.Category, ? super Collection<ArrayList<Locale.Category>>>) multiValueMap0);
      Integer integer0 = new Integer(81);
      BiFunction<Locale.Category, Object, Integer> biFunction0 = (BiFunction<Locale.Category, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(biFunction0).apply(any(java.util.Locale.Category.class) , any());
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      multiValueMap2.putIfAbsent(locale_Category0, multiValueMap1);
      multiValueMap0.replaceAll(biFunction0);
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      // Undeclared exception!
      try { 
        multiValueMap2.size((Object) locale_Category1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, HashMap<Integer, Object>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, HashMap<Integer, Object>>();
      MultiValueMap<ArrayList<Integer>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<Integer>>) multiValueMap0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      multiValueMap0.putIfAbsent(arrayList0, multiValueMap1);
      MultiValueMap<Object, Object> multiValueMap2 = new MultiValueMap<Object, Object>();
      // Undeclared exception!
      try { 
        multiValueMap2.removeMapping(multiValueMap0, multiValueMap2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Integer, Collection<Integer>> hashMap0 = new HashMap<Integer, Collection<Integer>>();
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, treeSet0);
      ConstantFactory<Collection<Integer>> constantFactory0 = new ConstantFactory<Collection<Integer>>(treeSet0);
      MultiValueMap<Integer, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) hashMap0, (Factory<Collection<Integer>>) constantFactory0);
      Vector<HashMap<Integer, Integer>> vector0 = new Vector<HashMap<Integer, Integer>>();
      Factory<Collection<HashMap<Integer, Integer>>> factory0 = ConstantFactory.constantFactory((Collection<HashMap<Integer, Integer>>) vector0);
      MultiValueMap<Integer, HashMap<Integer, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<HashMap<Integer, Integer>>>) multiValueMap0, factory0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping(integer0, arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.ArrayList cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<Object, HashMap<Integer, Integer>> multiValueMap0 = new MultiValueMap<Object, HashMap<Integer, Integer>>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<ArrayList<FileVisitResult>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<FileVisitResult>, Integer>();
      ArrayList<FileVisitResult> arrayList0 = new ArrayList<FileVisitResult>();
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      Integer integer0 = new Integer(498);
      hashSet0.add(integer0);
      Factory<Collection<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<FileVisitResult>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<FileVisitResult>, ? super Collection<Integer>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll(arrayList0, (Collection<Integer>) hashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<ResolverStyle, Collection<ResolverStyle>> hashMap0 = new HashMap<ResolverStyle, Collection<ResolverStyle>>();
      Factory<Collection<ResolverStyle>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ResolverStyle, ResolverStyle> multiValueMap0 = MultiValueMap.multiValueMap((Map<ResolverStyle, ? super Collection<ResolverStyle>>) hashMap0, factory0);
      ResolverStyle resolverStyle0 = ResolverStyle.STRICT;
      // Undeclared exception!
      try { 
        multiValueMap0.put(resolverStyle0, resolverStyle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<ArrayList<FormatStyle>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<FormatStyle>, Integer>();
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      ConstantFactory<Collection<Integer>> constantFactory0 = new ConstantFactory<Collection<Integer>>(treeSet0);
      MultiValueMap<ArrayList<FormatStyle>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<FormatStyle>, ? super Collection<Integer>>) multiValueMap0, (Factory<Collection<Integer>>) constantFactory0);
      ArrayList<FormatStyle> arrayList0 = new ArrayList<FormatStyle>();
      // Undeclared exception!
      try { 
        multiValueMap1.put(arrayList0, arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Factory<Collection<Collection<Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Collection<ArrayList<Object>>, ? super Collection<Collection<Integer>>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Integer>>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) multiValueMap0, (Factory<Collection<Integer>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<IOCase, ? super Collection<IOCase>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer((byte) (-3));
      hashMap0.put(integer0, integer0);
      MultiValueMap<Integer, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Collection<FileVisitResult>, Collection<FileVisitResult>> hashMap0 = new HashMap<Collection<FileVisitResult>, Collection<FileVisitResult>>();
      Factory<Collection<FileVisitResult>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<FileVisitResult>, FileVisitResult> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<FileVisitResult>, ? super Collection<FileVisitResult>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.createCollection((-3));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, HashMap<Integer, Object>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, HashMap<Integer, Object>>();
      MultiValueMap<ArrayList<Integer>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<Integer>>) multiValueMap0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Object object0 = multiValueMap0.putIfAbsent(arrayList0, multiValueMap1);
      MultiValueMap<ArrayList<Integer>, Month> multiValueMap2 = new MultiValueMap<ArrayList<Integer>, Month>();
      // Undeclared exception!
      try { 
        multiValueMap2.containsValue((Object) multiValueMap0, object0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put((Object) null, (Object) null);
      MultiValueMap<Object, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<HashMap<Object, Integer>, Object> multiValueMap0 = new MultiValueMap<HashMap<Object, Integer>, Object>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Object object0 = multiValueMap0.put(hashMap0, hashMap0);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer((-1));
      hashMap1.put(integer0, integer0);
      MultiValueMap<Integer, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) hashMap1);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<ArrayList<FileVisitResult>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<FileVisitResult>, Integer>();
      ArrayList<FileVisitResult> arrayList0 = new ArrayList<FileVisitResult>();
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      Integer integer0 = new Integer(498);
      hashSet0.add(integer0);
      boolean boolean0 = multiValueMap0.putAll(arrayList0, (Collection<Integer>) hashSet0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<Object, Collection<Integer>> multiValueMap0 = new MultiValueMap<Object, Collection<Integer>>();
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)multiValueMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<Integer, Collection<Integer>> hashMap0 = new HashMap<Integer, Collection<Integer>>();
      Factory<Collection<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) hashMap0, factory0);
      Collection<Integer> collection0 = multiValueMap0.getCollection(hashMap0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<Object, HashMap<Integer, Integer>> multiValueMap0 = new MultiValueMap<Object, HashMap<Integer, Integer>>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Iterator<HashMap<Integer, Integer>> iterator0 = multiValueMap0.iterator((Object) hashMap0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<FormatStyle, Collection<Integer>> hashMap0 = new HashMap<FormatStyle, Collection<Integer>>();
      FormatStyle formatStyle0 = FormatStyle.MEDIUM;
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>(hashSet0);
      hashMap0.put(formatStyle0, priorityQueue0);
      MultiValueMap<FormatStyle, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<FormatStyle, ? super Collection<Integer>>) hashMap0);
      MultiValueMap<FormatStyle, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<FormatStyle, ? super Collection<ArrayList<Integer>>>) multiValueMap0);
      HashSet<ArrayList<Integer>> hashSet1 = new HashSet<ArrayList<Integer>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      hashSet1.add(arrayList0);
      boolean boolean0 = multiValueMap1.putAll(formatStyle0, (Collection<ArrayList<Integer>>) hashSet1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      Integer integer0 = new Integer((-2));
      boolean boolean0 = multiValueMap0.putAll((Object) integer0, (Collection<Integer>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<BoundType, Collection<Integer>> hashMap0 = new HashMap<BoundType, Collection<Integer>>();
      MultiValueMap<BoundType, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<BoundType, ? super Collection<Integer>>) hashMap0);
      HashMap<Collection<Integer>, Collection<Integer>> hashMap1 = new HashMap<Collection<Integer>, Collection<Integer>>();
      MultiValueMap<Collection<Integer>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<Integer>>) hashMap1);
      int int0 = multiValueMap1.size((Object) multiValueMap0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<Collection<Object>, Integer> multiValueMap0 = new MultiValueMap<Collection<Object>, Integer>();
      Stack<Object> stack0 = new Stack<Object>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Object object0 = multiValueMap0.put(stack0, arrayList0);
      int int0 = multiValueMap0.size(object0);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, Month> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, Month>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0, (Object) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<Collection<Integer>, Integer> multiValueMap0 = new MultiValueMap<Collection<Integer>, Integer>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) hashMap0);
      Function<Object, Object> function0 = Function.identity();
      multiValueMap0.computeIfAbsent(arrayList0, function0);
      multiValueMap0.putAll((Map<?, ?>) hashMap0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, HashMap<Integer, Object>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, HashMap<Integer, Object>>();
      MultiValueMap<ArrayList<Integer>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<Integer>>) multiValueMap0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Object object0 = multiValueMap0.putIfAbsent(arrayList0, multiValueMap1);
      boolean boolean0 = multiValueMap1.containsValue(object0);
      assertFalse(multiValueMap1.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<Collection<Integer>, Integer> multiValueMap0 = new MultiValueMap<Collection<Integer>, Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      multiValueMap0.put(linkedHashSet0, linkedHashSet0);
      boolean boolean0 = multiValueMap0.containsValue((Object) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, Collection<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, Collection<Object>>();
      MultiValueMap<Integer, Integer> multiValueMap1 = new MultiValueMap<Integer, Integer>();
      MultiValueMap<Object, Object> multiValueMap2 = new MultiValueMap<Object, Object>();
      ArrayList<FormatStyle> arrayList0 = new ArrayList<FormatStyle>();
      multiValueMap2.putIfAbsent(multiValueMap1, arrayList0);
      multiValueMap2.put(multiValueMap1, multiValueMap1);
      boolean boolean0 = multiValueMap2.removeMapping(multiValueMap0, multiValueMap0);
      assertFalse(multiValueMap2.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MultiValueMap<Integer, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Integer>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      boolean boolean0 = multiValueMap0.removeMapping(fileSystemHandling0, arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<FormatStyle, Collection<Integer>> hashMap0 = new HashMap<FormatStyle, Collection<Integer>>();
      FormatStyle formatStyle0 = FormatStyle.MEDIUM;
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>(hashSet0);
      hashMap0.put(formatStyle0, priorityQueue0);
      MultiValueMap<FormatStyle, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<FormatStyle, ? super Collection<Integer>>) hashMap0);
      HashSet<ArrayList<Integer>> hashSet1 = new HashSet<ArrayList<Integer>>();
      MultiValueMap<FormatStyle, FormatStyle> multiValueMap1 = MultiValueMap.multiValueMap((Map<FormatStyle, ? super Collection<FormatStyle>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.removeMapping(formatStyle0, hashSet1);
      assertEquals(1, hashMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, HashMap<Integer, Object>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, HashMap<Integer, Object>>();
      MultiValueMap<ArrayList<Integer>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<Integer>>) multiValueMap0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      multiValueMap0.putIfAbsent(arrayList0, multiValueMap1);
      int int0 = multiValueMap1.totalSize();
      assertEquals(1, multiValueMap1.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<Collection<Integer>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Collection<Integer>, ArrayList<Object>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Collection<Object> collection0 = multiValueMap0.values();
      assertNotNull(collection0);
      
      HashMap<ArrayList<Integer>, Object> hashMap0 = new HashMap<ArrayList<Integer>, Object>();
      MultiValueMap<ArrayList<Integer>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<Object>>) hashMap0);
      boolean boolean0 = multiValueMap1.putAll(arrayList0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, HashMap<Integer, Object>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, HashMap<Integer, Object>>();
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>();
      multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, HashMap<Integer, Object>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, HashMap<Integer, Object>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      multiValueMap0.putIfAbsent(arrayList0, arrayList0);
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>();
      multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
      assertFalse(multiValueMap0.isEmpty());
      
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      multiValueMap1.iterator((Object) arrayList1);
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<Collection<Integer>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Collection<Integer>, ArrayList<Object>>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, HashMap<Integer, Object>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, HashMap<Integer, Object>>();
      Iterator<Map.Entry<ArrayList<Integer>, HashMap<Integer, Object>>> iterator0 = (Iterator<Map.Entry<ArrayList<Integer>, HashMap<Integer, Object>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TreeSet<BoundType> treeSet0 = new TreeSet<BoundType>();
      ConstantFactory<Collection<BoundType>> constantFactory0 = new ConstantFactory<Collection<BoundType>>(treeSet0);
      HashMap<MultiValueMap<Integer, Integer>, Collection<BoundType>> hashMap0 = new HashMap<MultiValueMap<Integer, Integer>, Collection<BoundType>>();
      MultiValueMap<MultiValueMap<Integer, Integer>, BoundType> multiValueMap0 = MultiValueMap.multiValueMap((Map<MultiValueMap<Integer, Integer>, ? super Collection<BoundType>>) hashMap0, (Factory<Collection<BoundType>>) constantFactory0);
      MultiValueMap<Integer, Integer> multiValueMap1 = new MultiValueMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        multiValueMap0.put(multiValueMap1, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
