/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 08:34:39 GMT 2025
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Converter;
import java.time.Clock;
import java.time.LocalDate;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.HijrahDate;
import java.time.chrono.HijrahEra;
import java.time.chrono.IsoEra;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.Stack;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.map.ListOrderedMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ListOrderedMap_ESTest extends ListOrderedMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ListOrderedMap<IsoEra, IsoEra> listOrderedMap0 = new ListOrderedMap<IsoEra, IsoEra>();
      IsoEra isoEra0 = IsoEra.BCE;
      IsoEra isoEra1 = IsoEra.CE;
      listOrderedMap0.putIfAbsent(isoEra0, isoEra1);
      IsoEra isoEra2 = listOrderedMap0.put(0, isoEra0, isoEra0);
      assertEquals(IsoEra.CE, isoEra2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ListOrderedMap<IsoEra, IsoEra> listOrderedMap0 = new ListOrderedMap<IsoEra, IsoEra>();
      IsoEra isoEra0 = IsoEra.BCE;
      IsoEra isoEra1 = IsoEra.CE;
      BiFunction<IsoEra, IsoEra, IsoEra> biFunction0 = (BiFunction<IsoEra, IsoEra, IsoEra>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      IsoEra isoEra2 = listOrderedMap0.merge(isoEra0, isoEra1, biFunction0);
      Converter<IsoEra, IsoEra> converter0 = Converter.identity();
      IsoEra isoEra3 = listOrderedMap0.computeIfAbsent(isoEra2, converter0);
      IsoEra isoEra4 = listOrderedMap0.put(0, isoEra3, isoEra2);
      assertSame(isoEra4, isoEra3);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IsoEra isoEra0 = IsoEra.BCE;
      ListOrderedMap<IsoEra, IsoEra> listOrderedMap0 = new ListOrderedMap<IsoEra, IsoEra>();
      IsoEra isoEra1 = listOrderedMap0.put(0, isoEra0, isoEra0);
      ListOrderedMap.ValuesView<IsoEra> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<IsoEra>(listOrderedMap0);
      listOrderedMap_ValuesView0.set(0, isoEra1);
      assertEquals(1, listOrderedMap0.size());
      assertFalse(listOrderedMap_ValuesView0.contains(isoEra0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IsoEra isoEra0 = IsoEra.CE;
      HashMap<IsoEra, IsoEra> hashMap0 = new HashMap<IsoEra, IsoEra>();
      ListOrderedMap<IsoEra, IsoEra> listOrderedMap0 = new ListOrderedMap<IsoEra, IsoEra>(hashMap0);
      IsoEra isoEra1 = IsoEra.BCE;
      listOrderedMap0.put(isoEra1, isoEra0);
      String string0 = listOrderedMap0.toString();
      assertEquals("{BCE=CE}", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ListOrderedMap<IsoEra, IsoEra> listOrderedMap0 = new ListOrderedMap<IsoEra, IsoEra>();
      IsoEra isoEra0 = IsoEra.CE;
      IsoEra isoEra1 = IsoEra.BCE;
      BiFunction<Object, IsoEra, IsoEra> biFunction0 = (BiFunction<Object, IsoEra, IsoEra>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      listOrderedMap0.merge(isoEra0, isoEra0, biFunction0);
      IsoEra isoEra2 = listOrderedMap0.put(isoEra0, isoEra1);
      BiFunction<IsoEra, IsoEra, IsoEra> biFunction1 = (BiFunction<IsoEra, IsoEra, IsoEra>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any(java.time.chrono.IsoEra.class) , any(java.time.chrono.IsoEra.class));
      listOrderedMap0.merge(isoEra2, isoEra2, biFunction1);
      assertTrue(listOrderedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ListOrderedMap<ChronoLocalDate, Integer> listOrderedMap0 = new ListOrderedMap<ChronoLocalDate, Integer>();
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Integer integer0 = new Integer(2129);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      listOrderedMap0.merge(localDate0, integer0, biFunction0);
      listOrderedMap0.putAll(0, (Map<? extends ChronoLocalDate, ? extends Integer>) listOrderedMap0);
      assertEquals(1, listOrderedMap0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ListOrderedMap<IsoEra, IsoEra> listOrderedMap0 = new ListOrderedMap<IsoEra, IsoEra>();
      IsoEra isoEra0 = IsoEra.BCE;
      IsoEra isoEra1 = IsoEra.CE;
      listOrderedMap0.putIfAbsent(isoEra0, isoEra1);
      listOrderedMap0.putAll((Map<? extends IsoEra, ? extends IsoEra>) listOrderedMap0);
      assertEquals(1, listOrderedMap0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ListOrderedMap<IsoEra, Integer> listOrderedMap0 = new ListOrderedMap<IsoEra, Integer>();
      IsoEra isoEra0 = IsoEra.CE;
      Integer integer0 = new Integer((-1522));
      BiFunction<Integer, Integer, Integer> biFunction0 = (BiFunction<Integer, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      listOrderedMap0.merge(isoEra0, integer0, biFunction0);
      IsoEra isoEra1 = IsoEra.CE;
      listOrderedMap0.previousKey(isoEra1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IsoEra isoEra0 = IsoEra.CE;
      ListOrderedMap<IsoEra, IsoEra> listOrderedMap0 = new ListOrderedMap<IsoEra, IsoEra>();
      listOrderedMap0.put(isoEra0, isoEra0);
      listOrderedMap0.putIfAbsent((IsoEra) null, isoEra0);
      listOrderedMap0.nextKey((Object) null);
      assertEquals(2, listOrderedMap0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ListOrderedMap<IsoEra, IsoEra> listOrderedMap0 = new ListOrderedMap<IsoEra, IsoEra>();
      IsoEra isoEra0 = IsoEra.CE;
      IsoEra isoEra1 = IsoEra.BCE;
      BiFunction<Object, IsoEra, IsoEra> biFunction0 = (BiFunction<Object, IsoEra, IsoEra>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      listOrderedMap0.merge(isoEra0, isoEra0, biFunction0);
      BiFunction<IsoEra, IsoEra, IsoEra> biFunction1 = (BiFunction<IsoEra, IsoEra, IsoEra>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(isoEra1).when(biFunction1).apply(any(java.time.chrono.IsoEra.class) , any(java.time.chrono.IsoEra.class));
      listOrderedMap0.compute(isoEra1, biFunction1);
      IsoEra isoEra2 = listOrderedMap0.lastKey();
      assertEquals(IsoEra.BCE, isoEra2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ListOrderedMap<AbstractMap.SimpleImmutableEntry<IsoEra, IsoEra>, Integer> listOrderedMap0 = new ListOrderedMap<AbstractMap.SimpleImmutableEntry<IsoEra, IsoEra>, Integer>();
      IsoEra isoEra0 = IsoEra.BCE;
      AbstractMap.SimpleImmutableEntry<IsoEra, IsoEra> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<IsoEra, IsoEra>(isoEra0, isoEra0);
      Integer integer0 = new Integer((-1));
      BiFunction<Integer, Integer, Integer> biFunction0 = (BiFunction<Integer, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      listOrderedMap0.merge(abstractMap_SimpleImmutableEntry0, integer0, biFunction0);
      ListOrderedMap.ListOrderedMapIterator<AbstractMap.SimpleImmutableEntry<IsoEra, IsoEra>, Integer> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<AbstractMap.SimpleImmutableEntry<IsoEra, IsoEra>, Integer>(listOrderedMap0);
      listOrderedMap_ListOrderedMapIterator0.next();
      AbstractMap.SimpleImmutableEntry<IsoEra, IsoEra> abstractMap_SimpleImmutableEntry1 = listOrderedMap_ListOrderedMapIterator0.getKey();
      assertSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ListOrderedMap<HijrahEra, HijrahEra> listOrderedMap0 = new ListOrderedMap<HijrahEra, HijrahEra>();
      HashMap<HijrahEra, Integer> hashMap0 = new HashMap<HijrahEra, Integer>();
      HijrahEra hijrahEra0 = HijrahEra.AH;
      Converter<HijrahEra, HijrahEra> converter0 = Converter.identity();
      HijrahEra hijrahEra1 = listOrderedMap0.computeIfAbsent(hijrahEra0, converter0);
      Integer integer0 = new Integer(526);
      ListOrderedMap<HijrahEra, Integer> listOrderedMap1 = ListOrderedMap.listOrderedMap((Map<HijrahEra, Integer>) hashMap0);
      ListOrderedMap.ListOrderedMapEntry<HijrahEra, Integer> listOrderedMap_ListOrderedMapEntry0 = new ListOrderedMap.ListOrderedMapEntry<HijrahEra, Integer>(listOrderedMap1, hijrahEra1);
      Integer integer1 = listOrderedMap_ListOrderedMapEntry0.setValue(integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ListOrderedMap<Integer, Integer> listOrderedMap0 = ListOrderedMap.listOrderedMap((Map<Integer, Integer>) hashMap0);
      ListOrderedMap.ValuesView<Integer> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<Integer>(listOrderedMap0);
      int int0 = listOrderedMap_ValuesView0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ListOrderedMap<Integer, Integer> listOrderedMap0 = new ListOrderedMap<Integer, Integer>();
      Integer integer0 = new Integer(760);
      ListOrderedMap.ListOrderedMapEntry<Integer, Integer> listOrderedMap_ListOrderedMapEntry0 = new ListOrderedMap.ListOrderedMapEntry<Integer, Integer>(listOrderedMap0, integer0);
      Integer integer1 = listOrderedMap_ListOrderedMapEntry0.getValue();
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ListOrderedMap<HashMap<Integer, Integer>, Integer> listOrderedMap0 = new ListOrderedMap<HashMap<Integer, Integer>, Integer>();
      ListOrderedMap.KeySetView<HashMap<Integer, Integer>> listOrderedMap_KeySetView0 = new ListOrderedMap.KeySetView<HashMap<Integer, Integer>>(listOrderedMap0);
      Iterator<HashMap<Integer, Integer>> iterator0 = listOrderedMap_KeySetView0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ListOrderedMap<Integer, ChronoLocalDate> listOrderedMap0 = new ListOrderedMap<Integer, ChronoLocalDate>();
      ListOrderedMap.EntrySetView<Integer, ChronoLocalDate> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<Integer, ChronoLocalDate>(listOrderedMap0, (List<Integer>) null);
      int int0 = listOrderedMap_EntrySetView0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<IsoEra, IsoEra> hashMap0 = new HashMap<IsoEra, IsoEra>();
      ListOrderedMap<IsoEra, IsoEra> listOrderedMap0 = new ListOrderedMap<IsoEra, IsoEra>(hashMap0);
      Stack<IsoEra> stack0 = new Stack<IsoEra>();
      IsoEra isoEra0 = IsoEra.CE;
      stack0.add(isoEra0);
      ListOrderedMap.ListOrderedIterator<IsoEra, IsoEra> listOrderedMap_ListOrderedIterator0 = new ListOrderedMap.ListOrderedIterator<IsoEra, IsoEra>(listOrderedMap0, stack0);
      listOrderedMap_ListOrderedIterator0.next();
      listOrderedMap_ListOrderedIterator0.remove();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ListOrderedMap<IsoEra, IsoEra> listOrderedMap0 = new ListOrderedMap<IsoEra, IsoEra>();
      IsoEra isoEra0 = IsoEra.CE;
      listOrderedMap0.put(0, isoEra0, isoEra0);
      List<IsoEra> list0 = listOrderedMap0.valueList();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ListOrderedMap<IsoEra, IsoEra> listOrderedMap0 = new ListOrderedMap<IsoEra, IsoEra>();
      IsoEra isoEra0 = IsoEra.CE;
      listOrderedMap0.put(0, isoEra0, isoEra0);
      listOrderedMap0.remove(0);
      assertTrue(listOrderedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UnaryOperator<IsoEra> unaryOperator0 = UnaryOperator.identity();
      ListOrderedMap<IsoEra, IsoEra> listOrderedMap0 = new ListOrderedMap<IsoEra, IsoEra>();
      IsoEra isoEra0 = IsoEra.CE;
      IsoEra isoEra1 = listOrderedMap0.computeIfAbsent(isoEra0, unaryOperator0);
      IsoEra isoEra2 = IsoEra.BCE;
      BiFunction<IsoEra, IsoEra, IsoEra> biFunction0 = (BiFunction<IsoEra, IsoEra, IsoEra>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      listOrderedMap0.merge(isoEra2, isoEra1, biFunction0);
      listOrderedMap0.nextKey(isoEra1);
      assertEquals(2, listOrderedMap0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ListOrderedMap<IsoEra, IsoEra> listOrderedMap0 = new ListOrderedMap<IsoEra, IsoEra>();
      IsoEra isoEra0 = IsoEra.CE;
      listOrderedMap0.put(0, isoEra0, isoEra0);
      OrderedMapIterator<IsoEra, IsoEra> orderedMapIterator0 = listOrderedMap0.mapIterator();
      assertTrue(orderedMapIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer(303);
      HashMap<ChronoLocalDate, Integer> hashMap0 = new HashMap<ChronoLocalDate, Integer>();
      hashMap0.put((ChronoLocalDate) null, integer0);
      ListOrderedMap<ChronoLocalDate, Integer> listOrderedMap0 = ListOrderedMap.listOrderedMap((Map<ChronoLocalDate, Integer>) hashMap0);
      ChronoLocalDate chronoLocalDate0 = listOrderedMap0.lastKey();
      assertNull(chronoLocalDate0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<IsoEra, HashMap<IsoEra, IsoEra>> hashMap0 = new HashMap<IsoEra, HashMap<IsoEra, IsoEra>>();
      ListOrderedMap<IsoEra, HashMap<IsoEra, IsoEra>> listOrderedMap0 = ListOrderedMap.listOrderedMap((Map<IsoEra, HashMap<IsoEra, IsoEra>>) hashMap0);
      IsoEra isoEra0 = IsoEra.BCE;
      HashMap<IsoEra, IsoEra> hashMap1 = new HashMap<IsoEra, IsoEra>();
      HashMap<IsoEra, IsoEra> hashMap2 = listOrderedMap0.putIfAbsent(isoEra0, hashMap1);
      assertNull(hashMap2);
      
      Set<IsoEra> set0 = listOrderedMap0.keySet();
      assertTrue(set0.contains(isoEra0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ListOrderedMap<IsoEra, IsoEra> listOrderedMap0 = new ListOrderedMap<IsoEra, IsoEra>();
      IsoEra isoEra0 = IsoEra.CE;
      listOrderedMap0.put(isoEra0, isoEra0);
      IsoEra isoEra1 = IsoEra.CE;
      int int0 = listOrderedMap0.indexOf(isoEra1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<IsoEra, LinkedList<IsoEra>> hashMap0 = new HashMap<IsoEra, LinkedList<IsoEra>>();
      ListOrderedMap<IsoEra, LinkedList<IsoEra>> listOrderedMap0 = new ListOrderedMap<IsoEra, LinkedList<IsoEra>>(hashMap0);
      IsoEra isoEra0 = IsoEra.BCE;
      LinkedList<IsoEra> linkedList0 = new LinkedList<IsoEra>();
      listOrderedMap0.put(0, isoEra0, linkedList0);
      LinkedList<IsoEra> linkedList1 = listOrderedMap0.getValue(0);
      assertSame(linkedList1, linkedList0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<LinkedList<IsoEra>, LinkedList<IsoEra>> hashMap0 = new HashMap<LinkedList<IsoEra>, LinkedList<IsoEra>>();
      hashMap0.put((LinkedList<IsoEra>) null, (LinkedList<IsoEra>) null);
      ListOrderedMap<LinkedList<IsoEra>, LinkedList<IsoEra>> listOrderedMap0 = new ListOrderedMap<LinkedList<IsoEra>, LinkedList<IsoEra>>(hashMap0);
      Object object0 = listOrderedMap0.get(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ListOrderedMap<IsoEra, LinkedList<Integer>> listOrderedMap0 = new ListOrderedMap<IsoEra, LinkedList<Integer>>();
      IsoEra isoEra0 = IsoEra.BCE;
      listOrderedMap0.put(isoEra0, (LinkedList<Integer>) null);
      IsoEra isoEra1 = listOrderedMap0.get(0);
      assertEquals(IsoEra.BCE, isoEra1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ListOrderedMap<IsoEra, IsoEra> listOrderedMap0 = new ListOrderedMap<IsoEra, IsoEra>();
      Function<IsoEra, IsoEra> function0 = Function.identity();
      IsoEra isoEra0 = IsoEra.CE;
      listOrderedMap0.computeIfAbsent(isoEra0, function0);
      IsoEra isoEra1 = listOrderedMap0.firstKey();
      assertEquals(IsoEra.CE, isoEra1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ListOrderedMap<IsoEra, IsoEra> listOrderedMap0 = new ListOrderedMap<IsoEra, IsoEra>();
      Set<Map.Entry<IsoEra, IsoEra>> set0 = (Set<Map.Entry<IsoEra, IsoEra>>)listOrderedMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ListOrderedMap<HashMap<IsoEra, IsoEra>, IsoEra> listOrderedMap0 = new ListOrderedMap<HashMap<IsoEra, IsoEra>, IsoEra>();
      HashMap<IsoEra, IsoEra> hashMap0 = new HashMap<IsoEra, IsoEra>();
      IsoEra isoEra0 = IsoEra.CE;
      listOrderedMap0.put(hashMap0, isoEra0);
      Set<Map.Entry<HashMap<IsoEra, IsoEra>, IsoEra>> set0 = (Set<Map.Entry<HashMap<IsoEra, IsoEra>, IsoEra>>)listOrderedMap0.entrySet();
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ListOrderedMap<LinkedList<IsoEra>, IsoEra> listOrderedMap0 = new ListOrderedMap<LinkedList<IsoEra>, IsoEra>();
      IsoEra isoEra0 = IsoEra.CE;
      // Undeclared exception!
      try { 
        listOrderedMap0.setValue(125, isoEra0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 125, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ListOrderedMap<Integer, IsoEra> listOrderedMap0 = new ListOrderedMap<Integer, IsoEra>();
      // Undeclared exception!
      try { 
        listOrderedMap0.remove((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ListOrderedMap<IsoEra, Integer> listOrderedMap0 = new ListOrderedMap<IsoEra, Integer>();
      // Undeclared exception!
      try { 
        listOrderedMap0.putAll((Map<? extends IsoEra, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IsoEra isoEra0 = IsoEra.CE;
      HashMap<IsoEra, IsoEra> hashMap0 = new HashMap<IsoEra, IsoEra>();
      ListOrderedMap<IsoEra, IsoEra> listOrderedMap0 = ListOrderedMap.listOrderedMap((Map<IsoEra, IsoEra>) hashMap0);
      ListOrderedMap<IsoEra, IsoEra> listOrderedMap1 = new ListOrderedMap<IsoEra, IsoEra>(hashMap0);
      Converter<IsoEra, IsoEra> converter0 = Converter.identity();
      IsoEra isoEra1 = listOrderedMap1.computeIfAbsent(isoEra0, converter0);
      // Undeclared exception!
      try { 
        listOrderedMap0.put(0, isoEra1, isoEra0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ListOrderedMap<IsoEra, IsoEra> listOrderedMap0 = new ListOrderedMap<IsoEra, IsoEra>();
      ListOrderedMap<IsoEra, IsoEra> listOrderedMap1 = new ListOrderedMap<IsoEra, IsoEra>(listOrderedMap0);
      IsoEra isoEra0 = IsoEra.BCE;
      IsoEra isoEra1 = IsoEra.CE;
      listOrderedMap0.putIfAbsent(isoEra1, isoEra1);
      Converter<IsoEra, IsoEra> converter0 = Converter.identity();
      listOrderedMap1.computeIfAbsent(isoEra0, converter0);
      // Undeclared exception!
      try { 
        listOrderedMap1.nextKey(isoEra0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListOrderedMap.listOrderedMap((Map<LinkedList<IsoEra>, LinkedList<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ListOrderedMap<IsoEra, IsoEra> listOrderedMap0 = new ListOrderedMap<IsoEra, IsoEra>();
      ListOrderedMap<IsoEra, IsoEra> listOrderedMap1 = ListOrderedMap.listOrderedMap((Map<IsoEra, IsoEra>) listOrderedMap0);
      IsoEra isoEra0 = IsoEra.CE;
      listOrderedMap0.put(isoEra0, isoEra0);
      // Undeclared exception!
      try { 
        listOrderedMap1.lastKey();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ListOrderedMap<HashMap<Integer, IsoEra>, Integer> listOrderedMap0 = new ListOrderedMap<HashMap<Integer, IsoEra>, Integer>();
      // Undeclared exception!
      try { 
        listOrderedMap0.getValue((-800));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<LinkedList<IsoEra>, IsoEra> hashMap0 = new HashMap<LinkedList<IsoEra>, IsoEra>();
      ListOrderedMap<LinkedList<IsoEra>, IsoEra> listOrderedMap0 = ListOrderedMap.listOrderedMap((Map<LinkedList<IsoEra>, IsoEra>) hashMap0);
      // Undeclared exception!
      try { 
        listOrderedMap0.get((-2831));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ListOrderedMap<Integer, ChronoLocalDate> listOrderedMap0 = null;
      try {
        listOrderedMap0 = new ListOrderedMap<Integer, ChronoLocalDate>((Map<Integer, ChronoLocalDate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ListOrderedMap<IsoEra, IsoEra> listOrderedMap0 = new ListOrderedMap<IsoEra, IsoEra>();
      UnaryOperator<IsoEra> unaryOperator0 = UnaryOperator.identity();
      IsoEra isoEra0 = IsoEra.BCE;
      IsoEra isoEra1 = listOrderedMap0.computeIfAbsent(isoEra0, unaryOperator0);
      IsoEra isoEra2 = listOrderedMap0.put(1, isoEra0, isoEra0);
      assertSame(isoEra2, isoEra1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IsoEra isoEra0 = IsoEra.CE;
      ListOrderedMap<IsoEra, IsoEra> listOrderedMap0 = new ListOrderedMap<IsoEra, IsoEra>();
      listOrderedMap0.put(0, isoEra0, isoEra0);
      listOrderedMap0.remove((Object) isoEra0);
      assertTrue(listOrderedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ListOrderedMap<ListOrderedMap<IsoEra, IsoEra>, IsoEra> listOrderedMap0 = new ListOrderedMap<ListOrderedMap<IsoEra, IsoEra>, IsoEra>();
      // Undeclared exception!
      try { 
        listOrderedMap0.get(1073741824);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1073741824, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ListOrderedMap<Integer, Integer> listOrderedMap0 = new ListOrderedMap<Integer, Integer>();
      Set<Integer> set0 = listOrderedMap0.keySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ListOrderedMap<IsoEra, Integer> listOrderedMap0 = new ListOrderedMap<IsoEra, Integer>();
      List<IsoEra> list0 = listOrderedMap0.keyList();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ListOrderedMap<IsoEra, LinkedList<IsoEra>> listOrderedMap0 = new ListOrderedMap<IsoEra, LinkedList<IsoEra>>();
      LinkedList<IsoEra> linkedList0 = new LinkedList<IsoEra>();
      // Undeclared exception!
      try { 
        listOrderedMap0.setValue((-1158), linkedList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ListOrderedMap<IsoEra, LinkedList<Integer>> listOrderedMap0 = new ListOrderedMap<IsoEra, LinkedList<Integer>>();
      listOrderedMap0.clear();
      assertTrue(listOrderedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ListOrderedMap<Object, IsoEra> listOrderedMap0 = new ListOrderedMap<Object, IsoEra>();
      ListOrderedMap.ListOrderedMapIterator<Object, IsoEra> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<Object, IsoEra>(listOrderedMap0);
      String string0 = listOrderedMap_ListOrderedMapIterator0.toString();
      assertEquals("Iterator[]", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ListOrderedMap<Object, IsoEra> listOrderedMap0 = new ListOrderedMap<Object, IsoEra>();
      ListOrderedMap.ListOrderedMapIterator<Object, IsoEra> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<Object, IsoEra>(listOrderedMap0);
      IsoEra isoEra0 = IsoEra.CE;
      // Undeclared exception!
      try { 
        listOrderedMap_ListOrderedMapIterator0.setValue(isoEra0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // setValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ListOrderedMap<IsoEra, Integer> listOrderedMap0 = new ListOrderedMap<IsoEra, Integer>();
      ListOrderedMap.ListOrderedMapIterator<IsoEra, Integer> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<IsoEra, Integer>(listOrderedMap0);
      // Undeclared exception!
      try { 
        listOrderedMap_ListOrderedMapIterator0.getValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ListOrderedMap<ChronoLocalDate, Integer> listOrderedMap0 = new ListOrderedMap<ChronoLocalDate, Integer>();
      ListOrderedMap.ListOrderedMapIterator<ChronoLocalDate, Integer> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<ChronoLocalDate, Integer>(listOrderedMap0);
      // Undeclared exception!
      try { 
        listOrderedMap_ListOrderedMapIterator0.getKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getKey() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ListOrderedMap<Object, LinkedList<IsoEra>> listOrderedMap0 = new ListOrderedMap<Object, LinkedList<IsoEra>>();
      ListOrderedMap<IsoEra, IsoEra> listOrderedMap1 = new ListOrderedMap<IsoEra, IsoEra>();
      LinkedList<IsoEra> linkedList0 = new LinkedList<IsoEra>();
      listOrderedMap0.putIfAbsent(listOrderedMap1, linkedList0);
      ListOrderedMap.ListOrderedMapIterator<Object, LinkedList<IsoEra>> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<Object, LinkedList<IsoEra>>(listOrderedMap0);
      assertTrue(listOrderedMap_ListOrderedMapIterator0.hasNext());
      
      listOrderedMap_ListOrderedMapIterator0.next();
      String string0 = listOrderedMap_ListOrderedMapIterator0.toString();
      assertEquals("Iterator[{}=[]]", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ListOrderedMap<ChronoLocalDate, Integer> listOrderedMap0 = new ListOrderedMap<ChronoLocalDate, Integer>();
      ListOrderedMap.ListOrderedMapIterator<ChronoLocalDate, Integer> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<ChronoLocalDate, Integer>(listOrderedMap0);
      // Undeclared exception!
      try { 
        listOrderedMap_ListOrderedMapIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // remove() can only be called once after next()
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      IsoEra isoEra0 = IsoEra.CE;
      ListOrderedMap<IsoEra, IsoEra> listOrderedMap0 = new ListOrderedMap<IsoEra, IsoEra>();
      ArrayList<IsoEra> arrayList0 = new ArrayList<IsoEra>();
      ListOrderedMap.EntrySetView<IsoEra, IsoEra> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<IsoEra, IsoEra>(listOrderedMap0, arrayList0);
      boolean boolean0 = listOrderedMap_EntrySetView0.equals(isoEra0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ListOrderedMap<Integer, IsoEra> listOrderedMap0 = new ListOrderedMap<Integer, IsoEra>();
      List<Integer> list0 = listOrderedMap0.asList();
      ListOrderedMap.EntrySetView<Integer, IsoEra> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<Integer, IsoEra>(listOrderedMap0, list0);
      boolean boolean0 = listOrderedMap_EntrySetView0.remove(listOrderedMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ListOrderedMap<IsoEra, Integer> listOrderedMap0 = new ListOrderedMap<IsoEra, Integer>();
      IsoEra isoEra0 = IsoEra.CE;
      AbstractMap.SimpleImmutableEntry<IsoEra, IsoEra> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<IsoEra, IsoEra>(isoEra0, isoEra0);
      ListOrderedMap<Integer, IsoEra> listOrderedMap1 = new ListOrderedMap<Integer, IsoEra>();
      ListOrderedMap.ValuesView<Integer> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<Integer>(listOrderedMap0);
      ListOrderedMap.EntrySetView<Integer, IsoEra> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<Integer, IsoEra>(listOrderedMap1, listOrderedMap_ValuesView0);
      boolean boolean0 = listOrderedMap_EntrySetView0.remove(abstractMap_SimpleImmutableEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ListOrderedMap<IsoEra, IsoEra> listOrderedMap0 = new ListOrderedMap<IsoEra, IsoEra>();
      IsoEra isoEra0 = IsoEra.CE;
      // Undeclared exception!
      try { 
        listOrderedMap0.put(1684, isoEra0, isoEra0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1684, Size: 0
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ListOrderedMap<IsoEra, IsoEra> listOrderedMap0 = new ListOrderedMap<IsoEra, IsoEra>();
      IsoEra isoEra0 = IsoEra.CE;
      // Undeclared exception!
      try { 
        listOrderedMap0.put((-10), isoEra0, isoEra0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -10, Size: 0
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ListOrderedMap<IsoEra, IsoEra> listOrderedMap0 = new ListOrderedMap<IsoEra, IsoEra>();
      IsoEra isoEra0 = IsoEra.BCE;
      IsoEra isoEra1 = listOrderedMap0.put(isoEra0, isoEra0);
      listOrderedMap0.put(isoEra1, isoEra1);
      listOrderedMap0.toString();
      assertEquals(2, listOrderedMap0.size());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ListOrderedMap<IsoEra, Integer> listOrderedMap0 = new ListOrderedMap<IsoEra, Integer>();
      String string0 = listOrderedMap0.toString();
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ListOrderedMap<Integer, ChronoLocalDate> listOrderedMap0 = new ListOrderedMap<Integer, ChronoLocalDate>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ChronoLocalDate chronoLocalDate0 = listOrderedMap0.remove((Object) hashMap0);
      assertNull(chronoLocalDate0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Integer integer0 = new Integer(297);
      HashMap<ChronoLocalDate, Integer> hashMap0 = new HashMap<ChronoLocalDate, Integer>();
      hashMap0.put((ChronoLocalDate) null, integer0);
      ListOrderedMap<ChronoLocalDate, Integer> listOrderedMap0 = ListOrderedMap.listOrderedMap((Map<ChronoLocalDate, Integer>) hashMap0);
      listOrderedMap0.putAll(1, (Map<? extends ChronoLocalDate, ? extends Integer>) hashMap0);
      assertEquals(1, listOrderedMap0.size());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ListOrderedMap<ChronoLocalDate, Integer> listOrderedMap0 = new ListOrderedMap<ChronoLocalDate, Integer>();
      HashMap<ChronoLocalDate, Integer> hashMap0 = new HashMap<ChronoLocalDate, Integer>();
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      Integer integer0 = Integer.valueOf(1);
      hashMap0.put(hijrahDate0, integer0);
      listOrderedMap0.putAll(0, (Map<? extends ChronoLocalDate, ? extends Integer>) hashMap0);
      assertEquals(1, listOrderedMap0.size());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ListOrderedMap<Integer, IsoEra> listOrderedMap0 = new ListOrderedMap<Integer, IsoEra>();
      // Undeclared exception!
      try { 
        listOrderedMap0.putAll(8233, (Map<? extends Integer, ? extends IsoEra>) listOrderedMap0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8233, Size: 0
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ListOrderedMap<ChronoLocalDate, Integer> listOrderedMap0 = new ListOrderedMap<ChronoLocalDate, Integer>();
      // Undeclared exception!
      try { 
        listOrderedMap0.putAll((-2), (Map<? extends ChronoLocalDate, ? extends Integer>) listOrderedMap0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2, Size: 0
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ListOrderedMap<IsoEra, Integer> listOrderedMap0 = new ListOrderedMap<IsoEra, Integer>();
      IsoEra isoEra0 = IsoEra.CE;
      Integer integer0 = new Integer((-1516));
      BiFunction<Integer, Integer, Integer> biFunction0 = (BiFunction<Integer, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      IsoEra isoEra1 = IsoEra.BCE;
      BiFunction<Integer, Integer, Integer> biFunction1 = (BiFunction<Integer, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      listOrderedMap0.merge(isoEra1, integer0, biFunction1);
      listOrderedMap0.merge(isoEra0, integer0, biFunction0);
      listOrderedMap0.previousKey(isoEra0);
      assertEquals(2, listOrderedMap0.size());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ListOrderedMap<IsoEra, IsoEra> listOrderedMap0 = new ListOrderedMap<IsoEra, IsoEra>();
      IsoEra isoEra0 = IsoEra.BCE;
      listOrderedMap0.previousKey(isoEra0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      HashMap<HashMap<IsoEra, IsoEra>, Integer> hashMap0 = new HashMap<HashMap<IsoEra, IsoEra>, Integer>();
      Integer integer0 = new Integer(1073741823);
      ListOrderedMap<HashMap<IsoEra, IsoEra>, Integer> listOrderedMap0 = ListOrderedMap.listOrderedMap((Map<HashMap<IsoEra, IsoEra>, Integer>) hashMap0);
      HashMap<IsoEra, IsoEra> hashMap1 = listOrderedMap0.nextKey(integer0);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ListOrderedMap<Object, Object> listOrderedMap0 = new ListOrderedMap<Object, Object>();
      // Undeclared exception!
      try { 
        listOrderedMap0.lastKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Map is empty
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ListOrderedMap<IsoEra, Integer> listOrderedMap0 = new ListOrderedMap<IsoEra, Integer>();
      // Undeclared exception!
      try { 
        listOrderedMap0.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Map is empty
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      HashMap<HashMap<IsoEra, IsoEra>, Integer> hashMap0 = new HashMap<HashMap<IsoEra, IsoEra>, Integer>();
      Integer integer0 = new Integer(1073741823);
      hashMap0.put((HashMap<IsoEra, IsoEra>) null, integer0);
      ListOrderedMap<HashMap<IsoEra, IsoEra>, Integer> listOrderedMap0 = ListOrderedMap.listOrderedMap((Map<HashMap<IsoEra, IsoEra>, Integer>) hashMap0);
      HashMap<IsoEra, IsoEra> hashMap1 = listOrderedMap0.firstKey();
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ListOrderedMap<IsoEra, Integer> listOrderedMap0 = new ListOrderedMap<IsoEra, Integer>();
      ListOrderedMap.KeySetView<IsoEra> listOrderedMap_KeySetView0 = new ListOrderedMap.KeySetView<IsoEra>(listOrderedMap0);
      listOrderedMap_KeySetView0.clear();
      assertEquals(0, listOrderedMap_KeySetView0.size());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>(0);
      ListOrderedMap<Integer, Integer> listOrderedMap0 = ListOrderedMap.listOrderedMap((Map<Integer, Integer>) hashMap0);
      ListOrderedMap.KeySetView<Integer> listOrderedMap_KeySetView0 = new ListOrderedMap.KeySetView<Integer>(listOrderedMap0);
      boolean boolean0 = listOrderedMap_KeySetView0.contains("%XR%s*>IWw.x3M~sg");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ListOrderedMap<Integer, HashMap<ChronoLocalDate, Integer>> listOrderedMap0 = new ListOrderedMap<Integer, HashMap<ChronoLocalDate, Integer>>();
      ListOrderedMap.ValuesView<HashMap<ChronoLocalDate, Integer>> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<HashMap<ChronoLocalDate, Integer>>(listOrderedMap0);
      listOrderedMap_ValuesView0.clear();
      assertEquals(0, listOrderedMap_ValuesView0.size());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ListOrderedMap<IsoEra, IsoEra> listOrderedMap0 = new ListOrderedMap<IsoEra, IsoEra>();
      ListOrderedMap.ValuesView<IsoEra> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<IsoEra>(listOrderedMap0);
      // Undeclared exception!
      try { 
        listOrderedMap_ValuesView0.remove(713);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 713, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ListOrderedMap<Integer, Integer> listOrderedMap0 = new ListOrderedMap<Integer, Integer>();
      ListOrderedMap.ValuesView<Integer> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<Integer>(listOrderedMap0);
      // Undeclared exception!
      try { 
        listOrderedMap_ValuesView0.get((-3413));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ListOrderedMap.ValuesView<IsoEra> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<IsoEra>((ListOrderedMap<?, IsoEra>) null);
      // Undeclared exception!
      try { 
        listOrderedMap_ValuesView0.contains((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap$ValuesView", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ListOrderedMap<IsoEra, IsoEra> listOrderedMap0 = new ListOrderedMap<IsoEra, IsoEra>();
      IsoEra isoEra0 = IsoEra.CE;
      listOrderedMap0.put(0, isoEra0, isoEra0);
      ListOrderedMap<IsoEra, Integer> listOrderedMap1 = new ListOrderedMap<IsoEra, Integer>();
      ListOrderedMap.ValuesView<IsoEra> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<IsoEra>(listOrderedMap0);
      ListOrderedMap.EntrySetView<IsoEra, Integer> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<IsoEra, Integer>(listOrderedMap1, listOrderedMap_ValuesView0);
      boolean boolean0 = listOrderedMap_EntrySetView0.containsAll(listOrderedMap_ValuesView0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ListOrderedMap<IsoEra, IsoEra> listOrderedMap0 = new ListOrderedMap<IsoEra, IsoEra>();
      ListOrderedMap<IsoEra, Integer> listOrderedMap1 = new ListOrderedMap<IsoEra, Integer>();
      ListOrderedMap.ValuesView<IsoEra> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<IsoEra>(listOrderedMap0);
      ListOrderedMap.EntrySetView<IsoEra, Integer> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<IsoEra, Integer>(listOrderedMap1, listOrderedMap_ValuesView0);
      boolean boolean0 = listOrderedMap_EntrySetView0.containsAll(listOrderedMap_ValuesView0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      HashMap<HashMap<IsoEra, IsoEra>, Integer> hashMap0 = new HashMap<HashMap<IsoEra, IsoEra>, Integer>();
      ListOrderedMap<HashMap<IsoEra, Integer>, IsoEra> listOrderedMap0 = new ListOrderedMap<HashMap<IsoEra, Integer>, IsoEra>();
      int int0 = listOrderedMap0.indexOf(hashMap0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ListOrderedMap<Map.Entry<IsoEra, IsoEra>, IsoEra> listOrderedMap0 = new ListOrderedMap<Map.Entry<IsoEra, IsoEra>, IsoEra>();
      // Undeclared exception!
      try { 
        listOrderedMap0.getValue(4223);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4223, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ListOrderedMap<HashMap<Integer, IsoEra>, LinkedList<Integer>> listOrderedMap0 = new ListOrderedMap<HashMap<Integer, IsoEra>, LinkedList<Integer>>();
      Collection<LinkedList<Integer>> collection0 = listOrderedMap0.values();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      ListOrderedMap<HashMap<IsoEra, Integer>, IsoEra> listOrderedMap0 = new ListOrderedMap<HashMap<IsoEra, Integer>, IsoEra>();
      List<IsoEra> list0 = listOrderedMap0.valueList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      ListOrderedMap<IsoEra, IsoEra> listOrderedMap0 = new ListOrderedMap<IsoEra, IsoEra>();
      // Undeclared exception!
      try { 
        listOrderedMap0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ListOrderedMap<IsoEra, IsoEra> listOrderedMap0 = new ListOrderedMap<IsoEra, IsoEra>();
      OrderedMapIterator<IsoEra, IsoEra> orderedMapIterator0 = listOrderedMap0.mapIterator();
      assertFalse(orderedMapIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      HashMap<LinkedList<IsoEra>, IsoEra> hashMap0 = new HashMap<LinkedList<IsoEra>, IsoEra>();
      ListOrderedMap<LinkedList<IsoEra>, IsoEra> listOrderedMap0 = ListOrderedMap.listOrderedMap((Map<LinkedList<IsoEra>, IsoEra>) hashMap0);
      LinkedList<LinkedList<IsoEra>> linkedList0 = new LinkedList<LinkedList<IsoEra>>();
      ListOrderedMap.EntrySetView<LinkedList<IsoEra>, IsoEra> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<LinkedList<IsoEra>, IsoEra>(listOrderedMap0, linkedList0);
      ListOrderedMap<HashMap<IsoEra, IsoEra>, Object> listOrderedMap1 = new ListOrderedMap<HashMap<IsoEra, IsoEra>, Object>();
      ListOrderedMap.EntrySetView listOrderedMap_EntrySetView1 = (ListOrderedMap.EntrySetView)listOrderedMap1.getOrDefault(listOrderedMap_EntrySetView0, listOrderedMap_EntrySetView0);
      assertEquals(0, listOrderedMap_EntrySetView1.size());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      ListOrderedMap<Integer, ChronoLocalDate> listOrderedMap0 = new ListOrderedMap<Integer, ChronoLocalDate>();
      Stack<Integer> stack0 = new Stack<Integer>();
      ListOrderedMap.EntrySetView<Integer, ChronoLocalDate> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<Integer, ChronoLocalDate>(listOrderedMap0, stack0);
      boolean boolean0 = listOrderedMap_EntrySetView0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Stack<IsoEra> stack0 = new Stack<IsoEra>();
      ListOrderedMap<IsoEra, Integer> listOrderedMap0 = new ListOrderedMap<IsoEra, Integer>();
      ListOrderedMap.EntrySetView<IsoEra, Integer> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<IsoEra, Integer>(listOrderedMap0, stack0);
      String string0 = listOrderedMap_EntrySetView0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      HashMap<Integer, HashMap<Integer, Integer>> hashMap0 = new HashMap<Integer, HashMap<Integer, Integer>>();
      ListOrderedMap<Integer, HashMap<Integer, Integer>> listOrderedMap0 = new ListOrderedMap<Integer, HashMap<Integer, Integer>>(hashMap0);
      ListOrderedMap<Integer, HashMap<Integer, Integer>> listOrderedMap1 = new ListOrderedMap<Integer, HashMap<Integer, Integer>>(listOrderedMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListOrderedMap.EntrySetView<Integer, HashMap<Integer, Integer>> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<Integer, HashMap<Integer, Integer>>(listOrderedMap1, linkedList0);
      Integer integer0 = new Integer(31);
      boolean boolean0 = listOrderedMap_EntrySetView0.contains(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      ListOrderedMap<ChronoLocalDate, Integer> listOrderedMap0 = new ListOrderedMap<ChronoLocalDate, Integer>();
      ListOrderedMap.EntrySetView<ChronoLocalDate, Integer> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<ChronoLocalDate, Integer>(listOrderedMap0, (List<ChronoLocalDate>) null);
      listOrderedMap_EntrySetView0.clear();
      assertTrue(listOrderedMap_EntrySetView0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      ListOrderedMap<Integer, ChronoLocalDate> listOrderedMap0 = new ListOrderedMap<Integer, ChronoLocalDate>();
      ListOrderedMap.ListOrderedMapIterator<Integer, ChronoLocalDate> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<Integer, ChronoLocalDate>(listOrderedMap0);
      boolean boolean0 = listOrderedMap_ListOrderedMapIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      ListOrderedMap<HashMap<IsoEra, Integer>, IsoEra> listOrderedMap0 = new ListOrderedMap<HashMap<IsoEra, Integer>, IsoEra>();
      ListOrderedMap.ListOrderedMapIterator<HashMap<IsoEra, Integer>, IsoEra> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<HashMap<IsoEra, Integer>, IsoEra>(listOrderedMap0);
      // Undeclared exception!
      try { 
        listOrderedMap_ListOrderedMapIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      ListOrderedMap<Integer, IsoEra> listOrderedMap0 = new ListOrderedMap<Integer, IsoEra>();
      ListOrderedMap.ListOrderedMapIterator<Integer, IsoEra> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<Integer, IsoEra>(listOrderedMap0);
      boolean boolean0 = listOrderedMap_ListOrderedMapIterator0.hasPrevious();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      ListOrderedMap<IsoEra, Integer> listOrderedMap0 = new ListOrderedMap<IsoEra, Integer>();
      ListOrderedMap.ListOrderedMapIterator<IsoEra, Integer> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<IsoEra, Integer>(listOrderedMap0);
      listOrderedMap_ListOrderedMapIterator0.reset();
      assertFalse(listOrderedMap_ListOrderedMapIterator0.hasPrevious());
  }
}
