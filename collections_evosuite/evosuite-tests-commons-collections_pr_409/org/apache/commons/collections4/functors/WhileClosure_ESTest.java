/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 08:17:21 GMT 2025
 */

package org.apache.commons.collections4.functors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Locale;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class WhileClosure_ESTest extends WhileClosure_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Closure<Closure<NonePredicate<Object>>> closure1 = WhileClosure.whileClosure((Predicate<? super Closure<NonePredicate<Object>>>) predicate0, (Closure<? super Closure<NonePredicate<Object>>>) closure0, true);
      assertNotNull(closure1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(instanceofPredicate0);
      WhileClosure<Closure<InstanceofPredicate>> whileClosure0 = new WhileClosure<Closure<InstanceofPredicate>>(equalPredicate0, (Closure<? super Closure<InstanceofPredicate>>) null, true);
      boolean boolean0 = whileClosure0.isDoLoop();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      WhileClosure<Closure<InstanceofPredicate>> whileClosure0 = new WhileClosure<Closure<InstanceofPredicate>>(predicate0, closure0, true);
      Predicate<? super Closure<InstanceofPredicate>> predicate1 = whileClosure0.getPredicate();
      assertNotNull(predicate1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate0, (Closure<? super Object>) null, false);
      Closure<? super Object> closure0 = whileClosure0.getClosure();
      assertNull(closure0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      WhileClosure<NonePredicate<Object>> whileClosure0 = new WhileClosure<NonePredicate<Object>>(predicate0, closure0, true);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      // Undeclared exception!
      whileClosure0.execute(nonePredicate0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = (Predicate<Object>) instanceofPredicate0;
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      SwitchClosure<Object> switchClosure0 = new SwitchClosure<Object>(predicateArray0, closureArray0, (Closure<? super Object>) null);
      WhileClosure<Locale.FilteringMode> whileClosure0 = new WhileClosure<Locale.FilteringMode>(instanceofPredicate0, switchClosure0, false);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      // Undeclared exception!
      try { 
        whileClosure0.execute(locale_FilteringMode0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.functors.SwitchClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(instanceofPredicate0);
      WhileClosure<Closure<InstanceofPredicate>> whileClosure0 = new WhileClosure<Closure<InstanceofPredicate>>(equalPredicate0, (Closure<? super Closure<InstanceofPredicate>>) null, false);
      IfClosure<InstanceofPredicate> ifClosure0 = new IfClosure<InstanceofPredicate>(equalPredicate0, (Closure<? super InstanceofPredicate>) null);
      whileClosure0.execute(ifClosure0);
      assertFalse(whileClosure0.isDoLoop());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Closure<InstanceofPredicate> closure0 = ExceptionClosure.exceptionClosure();
      WhileClosure<InstanceofPredicate> whileClosure0 = new WhileClosure<InstanceofPredicate>(predicate0, closure0, true);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        whileClosure0.execute(instanceofPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate0, (Closure<? super Object>) null, false);
      // Undeclared exception!
      try { 
        whileClosure0.execute(predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.WhileClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Closure<Object> closure0 = NOPClosure.nopClosure();
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>((Predicate<? super Object>) null, closure0, false);
      whileClosure0.getClosure();
      assertFalse(whileClosure0.isDoLoop());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>((Predicate<? super Object>) null, (Closure<? super Object>) null, false);
      whileClosure0.getPredicate();
      assertFalse(whileClosure0.isDoLoop());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        WhileClosure.whileClosure((Predicate<? super Object>) null, (Closure<? super Object>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      WhileClosure<Closure<InstanceofPredicate>> whileClosure0 = new WhileClosure<Closure<InstanceofPredicate>>((Predicate<? super Closure<InstanceofPredicate>>) null, (Closure<? super Closure<InstanceofPredicate>>) null, false);
      boolean boolean0 = whileClosure0.isDoLoop();
      assertFalse(boolean0);
  }
}
