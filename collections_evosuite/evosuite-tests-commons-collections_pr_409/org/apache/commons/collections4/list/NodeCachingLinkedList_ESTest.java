/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 08:27:44 GMT 2025
 */

package org.apache.commons.collections4.list;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.BoundType;
import java.time.format.ResolverStyle;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import org.apache.commons.collections4.list.AbstractLinkedList;
import org.apache.commons.collections4.list.CursorableLinkedList;
import org.apache.commons.collections4.list.NodeCachingLinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class NodeCachingLinkedList_ESTest extends NodeCachingLinkedList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>((-852));
      nodeCachingLinkedList0.removeAllNodes();
      assertEquals(0, nodeCachingLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      AbstractLinkedList.Node<Object> abstractLinkedList_Node0 = nodeCachingLinkedList0.createHeaderNode();
      nodeCachingLinkedList0.addNodeToCache(abstractLinkedList_Node0);
      nodeCachingLinkedList0.removeAllNodes();
      assertTrue(nodeCachingLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>(0);
      AbstractLinkedList.Node<Integer> abstractLinkedList_Node0 = nodeCachingLinkedList0.getNodeFromCache();
      nodeCachingLinkedList0.addNodeToCache(abstractLinkedList_Node0);
      assertTrue(nodeCachingLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      AbstractLinkedList.Node<Object> abstractLinkedList_Node0 = nodeCachingLinkedList0.createHeaderNode();
      nodeCachingLinkedList0.addNodeToCache(abstractLinkedList_Node0);
      nodeCachingLinkedList0.addNodeToCache(abstractLinkedList_Node0);
      AbstractLinkedList.Node<Object> abstractLinkedList_Node1 = nodeCachingLinkedList0.getNodeFromCache();
      assertNotNull(abstractLinkedList_Node1);
      assertSame(abstractLinkedList_Node1, abstractLinkedList_Node0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>(0);
      nodeCachingLinkedList0.shrinkCacheToMaximumSize();
      assertTrue(nodeCachingLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>();
      Integer integer0 = Integer.getInteger("", 1251);
      AbstractLinkedList.Node<Integer> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Integer>(integer0);
      nodeCachingLinkedList0.addNodeToCache(abstractLinkedList_Node0);
      nodeCachingLinkedList0.setMaximumCacheSize(3136);
      assertFalse(nodeCachingLinkedList0.contains(integer0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>((-360));
      boolean boolean0 = nodeCachingLinkedList0.isCacheFull();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      boolean boolean0 = nodeCachingLinkedList0.isCacheFull();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>(0);
      int int0 = nodeCachingLinkedList0.getMaximumCacheSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NodeCachingLinkedList<BoundType> nodeCachingLinkedList0 = new NodeCachingLinkedList<BoundType>((-976));
      int int0 = nodeCachingLinkedList0.getMaximumCacheSize();
      assertEquals((-976), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NodeCachingLinkedList<BoundType> nodeCachingLinkedList0 = new NodeCachingLinkedList<BoundType>((-35));
      // Undeclared exception!
      nodeCachingLinkedList0.shrinkCacheToMaximumSize();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      AbstractLinkedList.Node<Object> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Object>(nodeCachingLinkedList0);
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.removeNode(abstractLinkedList_Node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      nodeCachingLinkedList0.size = 4314;
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.removeAllNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.NodeCachingLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>(20);
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.addNodeToCache((AbstractLinkedList.Node<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>(0);
      AbstractLinkedList.LinkedSubList<Integer> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Integer>(nodeCachingLinkedList0, 0, 0);
      nodeCachingLinkedList0.removeAllNodes();
      NodeCachingLinkedList<Object> nodeCachingLinkedList1 = null;
      try {
        nodeCachingLinkedList1 = new NodeCachingLinkedList<Object>(abstractLinkedList_LinkedSubList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = null;
      try {
        nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>((Collection<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      cursorableLinkedList0.size = (-1);
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = null;
      try {
        nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>(cursorableLinkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (0) greater than the size of the list (-1).
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      ResolverStyle resolverStyle0 = ResolverStyle.SMART;
      nodeCachingLinkedList0.addFirst(resolverStyle0);
      nodeCachingLinkedList0.removeAllNodes();
      AbstractLinkedList.Node<Object> abstractLinkedList_Node0 = nodeCachingLinkedList0.createNode(resolverStyle0);
      assertNotNull(abstractLinkedList_Node0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      // Undeclared exception!
      nodeCachingLinkedList0.setMaximumCacheSize((-639));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NodeCachingLinkedList<BoundType> nodeCachingLinkedList0 = new NodeCachingLinkedList<BoundType>();
      AbstractLinkedList.Node<BoundType> abstractLinkedList_Node0 = nodeCachingLinkedList0.createHeaderNode();
      nodeCachingLinkedList0.removeNode(abstractLinkedList_Node0);
      assertFalse(nodeCachingLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>(0);
      AbstractLinkedList.LinkedSubList<Integer> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Integer>(nodeCachingLinkedList0, 0, 0);
      NodeCachingLinkedList<Object> nodeCachingLinkedList1 = new NodeCachingLinkedList<Object>(abstractLinkedList_LinkedSubList0);
      assertTrue(nodeCachingLinkedList1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      int int0 = nodeCachingLinkedList0.getMaximumCacheSize();
      assertEquals(20, int0);
  }
}
