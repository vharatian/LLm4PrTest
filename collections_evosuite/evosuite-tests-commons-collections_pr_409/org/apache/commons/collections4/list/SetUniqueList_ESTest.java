/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 08:30:04 GMT 2025
 */

package org.apache.commons.collections4.list;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.BoundType;
import com.google.common.collect.Range;
import java.nio.file.FileVisitResult;
import java.time.chrono.HijrahEra;
import java.time.chrono.IsoEra;
import java.time.format.TextStyle;
import java.util.ArrayList;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.NavigableSet;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Predicate;
import org.apache.commons.collections4.list.SetUniqueList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SetUniqueList_ESTest extends SetUniqueList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<BoundType> linkedList0 = new LinkedList<BoundType>();
      BoundType boundType0 = BoundType.CLOSED;
      BoundType boundType1 = BoundType.OPEN;
      EnumSet<BoundType> enumSet0 = EnumSet.range(boundType1, boundType1);
      SetUniqueList<BoundType> setUniqueList0 = new SetUniqueList<BoundType>(linkedList0, enumSet0);
      setUniqueList0.add(boundType0);
      assertTrue(setUniqueList0.contains(boundType0));
      
      boolean boolean0 = setUniqueList0.removeAll(enumSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Stack<LinkedHashSet<Object>> stack0 = new Stack<LinkedHashSet<Object>>();
      stack0.setSize(1276);
      LinkedHashSet<LinkedHashSet<Object>> linkedHashSet0 = new LinkedHashSet<LinkedHashSet<Object>>();
      LinkedHashSet<Object> linkedHashSet1 = new LinkedHashSet<Object>();
      stack0.add(linkedHashSet1);
      SetUniqueList<LinkedHashSet<Object>> setUniqueList0 = new SetUniqueList<LinkedHashSet<Object>>(stack0, linkedHashSet0);
      setUniqueList0.set(0, linkedHashSet1);
      assertEquals(1276, stack0.size());
      assertTrue(linkedHashSet0.contains(linkedHashSet1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashSet<Locale.Category> hashSet0 = new HashSet<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      hashSet0.add(locale_Category0);
      Iterator<Locale.Category> iterator0 = hashSet0.iterator();
      SetUniqueList.SetListIterator<Locale.Category> setUniqueList_SetListIterator0 = new SetUniqueList.SetListIterator<Locale.Category>(iterator0, hashSet0);
      Locale.Category locale_Category1 = setUniqueList_SetListIterator0.next();
      assertSame(locale_Category1, locale_Category0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ListIterator<Locale.Category> listIterator0 = (ListIterator<Locale.Category>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(listIterator0).previous();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category0);
      SetUniqueList.SetListListIterator<Locale.Category> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<Locale.Category>(listIterator0, enumSet0);
      Object object0 = setUniqueList_SetListListIterator0.previous();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      List<Object> list0 = setUniqueList0.subList(0, 0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<BoundType> linkedList0 = new LinkedList<BoundType>();
      SetUniqueList<BoundType> setUniqueList0 = SetUniqueList.setUniqueList((List<BoundType>) linkedList0);
      BoundType boundType0 = BoundType.CLOSED;
      linkedList0.add(boundType0);
      Range<BoundType> range0 = Range.downTo(boundType0, boundType0);
      boolean boolean0 = setUniqueList0.removeIf(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Stack<LinkedHashSet<Object>> stack0 = new Stack<LinkedHashSet<Object>>();
      stack0.setSize(1232);
      LinkedHashSet<LinkedHashSet<Object>> linkedHashSet0 = new LinkedHashSet<LinkedHashSet<Object>>();
      SetUniqueList<LinkedHashSet<Object>> setUniqueList0 = new SetUniqueList<LinkedHashSet<Object>>(stack0, linkedHashSet0);
      LinkedHashSet<Object> linkedHashSet1 = setUniqueList0.remove(45);
      assertNull(linkedHashSet1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Stack<BoundType> stack0 = new Stack<BoundType>();
      SetUniqueList<BoundType> setUniqueList0 = SetUniqueList.setUniqueList((List<BoundType>) stack0);
      BoundType boundType0 = BoundType.CLOSED;
      stack0.add(boundType0);
      BoundType boundType1 = setUniqueList0.remove(0);
      assertSame(boundType1, boundType0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedHashSet<IsoEra> linkedHashSet0 = new LinkedHashSet<IsoEra>();
      LinkedList<LinkedHashSet<IsoEra>> linkedList0 = new LinkedList<LinkedHashSet<IsoEra>>();
      TreeSet<LinkedHashSet<IsoEra>> treeSet0 = new TreeSet<LinkedHashSet<IsoEra>>();
      SetUniqueList<LinkedHashSet<IsoEra>> setUniqueList0 = new SetUniqueList<LinkedHashSet<IsoEra>>(linkedList0, treeSet0);
      linkedList0.add(linkedHashSet0);
      ListIterator<LinkedHashSet<IsoEra>> listIterator0 = setUniqueList0.listIterator(1);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector<LinkedHashSet<Integer>> vector0 = new Vector<LinkedHashSet<Integer>>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      vector0.add(linkedHashSet0);
      SetUniqueList<LinkedHashSet<Integer>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedHashSet<Integer>>) vector0);
      setUniqueList0.listIterator(0);
      assertEquals("[[]]", vector0.toString());
      assertTrue(setUniqueList0.contains(linkedHashSet0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector<LinkedHashSet<Integer>> vector0 = new Vector<LinkedHashSet<Integer>>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      vector0.add(linkedHashSet0);
      SetUniqueList<LinkedHashSet<Integer>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedHashSet<Integer>>) vector0);
      setUniqueList0.listIterator();
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Stack<LinkedHashSet<Object>> stack0 = new Stack<LinkedHashSet<Object>>();
      stack0.add(linkedHashSet0);
      HashSet<LinkedHashSet<Object>> hashSet0 = new HashSet<LinkedHashSet<Object>>();
      SetUniqueList<LinkedHashSet<Object>> setUniqueList0 = new SetUniqueList<LinkedHashSet<Object>>(stack0, hashSet0);
      Set<LinkedHashSet<Object>> set0 = setUniqueList0.createSetBasedOnList(hashSet0, stack0);
      assertTrue(set0.contains(linkedHashSet0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(0, 1.0F);
      Integer integer0 = new Integer(0);
      linkedHashSet0.add(integer0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>(0);
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) arrayList0);
      boolean boolean0 = setUniqueList0.addAll((Collection<?>) linkedHashSet0);
      assertTrue(arrayList0.contains(0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      SetUniqueList<Object> setUniqueList0 = new SetUniqueList<Object>(linkedList0, linkedHashSet0);
      boolean boolean0 = setUniqueList0.addAll((Collection<?>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Stack<LinkedHashSet<Integer>> stack0 = new Stack<LinkedHashSet<Integer>>();
      SetUniqueList<LinkedHashSet<Integer>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedHashSet<Integer>>) stack0);
      boolean boolean0 = setUniqueList0.addAll(0, (Collection<? extends LinkedHashSet<Integer>>) stack0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<BoundType> linkedList0 = new LinkedList<BoundType>();
      SetUniqueList<BoundType> setUniqueList0 = SetUniqueList.setUniqueList((List<BoundType>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.subList(1248, 1248);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 1248
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      SetUniqueList.SetListListIterator<Object> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<Object>(listIterator0, linkedHashSet0);
      setUniqueList_SetListListIterator0.add(linkedHashSet0);
      // Undeclared exception!
      try { 
        SetUniqueList.setUniqueList((List<Object>) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUniqueList.setUniqueList((List<Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // list
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<BoundType> linkedList0 = new LinkedList<BoundType>();
      BoundType boundType0 = BoundType.OPEN;
      linkedList0.add(boundType0);
      TreeSet<BoundType> treeSet0 = new TreeSet<BoundType>();
      NavigableSet<BoundType> navigableSet0 = treeSet0.subSet(boundType0, false, boundType0, true);
      SetUniqueList<BoundType> setUniqueList0 = new SetUniqueList<BoundType>(linkedList0, navigableSet0);
      // Undeclared exception!
      try { 
        SetUniqueList.setUniqueList((List<BoundType>) setUniqueList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // key out of range
         //
         verifyException("java.util.TreeMap$NavigableSubMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Stack<LinkedHashSet<Object>> stack0 = new Stack<LinkedHashSet<Object>>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      stack0.add(linkedHashSet0);
      TreeSet<LinkedHashSet<Object>> treeSet0 = new TreeSet<LinkedHashSet<Object>>();
      SetUniqueList<LinkedHashSet<Object>> setUniqueList0 = new SetUniqueList<LinkedHashSet<Object>>(stack0, treeSet0);
      // Undeclared exception!
      try { 
        SetUniqueList.setUniqueList((List<LinkedHashSet<Object>>) setUniqueList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Stack<LinkedHashSet<Object>> stack0 = new Stack<LinkedHashSet<Object>>();
      stack0.add(linkedHashSet0);
      HashSet<LinkedHashSet<Object>> hashSet0 = new HashSet<LinkedHashSet<Object>>();
      SetUniqueList<LinkedHashSet<Object>> setUniqueList0 = new SetUniqueList<LinkedHashSet<Object>>(stack0, hashSet0);
      linkedHashSet0.add(linkedHashSet0);
      // Undeclared exception!
      try { 
        setUniqueList0.set(0, linkedHashSet0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Stack<LinkedHashSet<Object>> stack0 = new Stack<LinkedHashSet<Object>>();
      stack0.setSize(1214);
      TreeSet<LinkedHashSet<Object>> treeSet0 = new TreeSet<LinkedHashSet<Object>>();
      SetUniqueList<LinkedHashSet<Object>> setUniqueList0 = new SetUniqueList<LinkedHashSet<Object>>(stack0, treeSet0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      // Undeclared exception!
      try { 
        setUniqueList0.set(4, linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArrayList<LinkedList<BoundType>> arrayList0 = new ArrayList<LinkedList<BoundType>>();
      SetUniqueList<LinkedList<BoundType>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedList<BoundType>>) arrayList0);
      LinkedList<BoundType> linkedList0 = new LinkedList<BoundType>();
      // Undeclared exception!
      try { 
        setUniqueList0.set(3296, linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3296, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector<LinkedHashSet<BoundType>> vector0 = new Vector<LinkedHashSet<BoundType>>();
      SetUniqueList<LinkedHashSet<BoundType>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedHashSet<BoundType>>) vector0);
      LinkedHashSet<BoundType> linkedHashSet0 = new LinkedHashSet<BoundType>();
      // Undeclared exception!
      try { 
        setUniqueList0.set((-1), linkedHashSet0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ArrayList<BoundType> arrayList0 = new ArrayList<BoundType>();
      SetUniqueList<BoundType> setUniqueList0 = SetUniqueList.setUniqueList((List<BoundType>) arrayList0);
      Set<BoundType> set0 = setUniqueList0.asSet();
      SetUniqueList<BoundType> setUniqueList1 = new SetUniqueList<BoundType>(arrayList0, set0);
      // Undeclared exception!
      try { 
        setUniqueList1.retainAll(arrayList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.UnmodifiableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      SetUniqueList.SetListListIterator<Object> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<Object>(listIterator0, linkedHashSet0);
      setUniqueList_SetListListIterator0.add(linkedHashSet0);
      SetUniqueList<Object> setUniqueList0 = new SetUniqueList<Object>(linkedList0, linkedHashSet0);
      // Undeclared exception!
      try { 
        setUniqueList0.retainAll(linkedHashSet0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector<BoundType> vector0 = new Vector<BoundType>();
      SetUniqueList<BoundType> setUniqueList0 = SetUniqueList.setUniqueList((List<BoundType>) vector0);
      // Undeclared exception!
      try { 
        setUniqueList0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Stack<LinkedHashSet<BoundType>> stack0 = new Stack<LinkedHashSet<BoundType>>();
      TreeSet<LinkedHashSet<BoundType>> treeSet0 = new TreeSet<LinkedHashSet<BoundType>>();
      SetUniqueList<LinkedHashSet<BoundType>> setUniqueList0 = new SetUniqueList<LinkedHashSet<BoundType>>(stack0, treeSet0);
      LinkedHashSet<BoundType> linkedHashSet0 = new LinkedHashSet<BoundType>();
      stack0.add(linkedHashSet0);
      LinkedList<LinkedHashSet<BoundType>> linkedList0 = new LinkedList<LinkedHashSet<BoundType>>(setUniqueList0);
      SetUniqueList<LinkedHashSet<BoundType>> setUniqueList1 = SetUniqueList.setUniqueList((List<LinkedHashSet<BoundType>>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList1.retainAll(treeSet0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector<BoundType> vector0 = new Vector<BoundType>();
      SetUniqueList<BoundType> setUniqueList0 = SetUniqueList.setUniqueList((List<BoundType>) vector0);
      Set<BoundType> set0 = setUniqueList0.asSet();
      SetUniqueList<BoundType> setUniqueList1 = new SetUniqueList<BoundType>(setUniqueList0, set0);
      BoundType boundType0 = BoundType.CLOSED;
      Range<BoundType> range0 = Range.greaterThan(boundType0);
      // Undeclared exception!
      try { 
        setUniqueList1.removeIf(range0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.UnmodifiableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.removeIf((Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      Vector<Integer> vector0 = new Vector<Integer>(priorityQueue0);
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList((List<Integer>) vector0);
      vector0.add((Integer) null);
      Integer integer0 = new Integer(4379);
      Range<Integer> range0 = Range.greaterThan(integer0);
      // Undeclared exception!
      try { 
        setUniqueList0.removeIf(range0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<BoundType> linkedList0 = new LinkedList<BoundType>();
      BoundType boundType0 = BoundType.CLOSED;
      EnumSet<BoundType> enumSet0 = EnumSet.of(boundType0);
      SetUniqueList<BoundType> setUniqueList0 = new SetUniqueList<BoundType>(linkedList0, enumSet0);
      Set<BoundType> set0 = setUniqueList0.asSet();
      SetUniqueList<BoundType> setUniqueList1 = new SetUniqueList<BoundType>(linkedList0, set0);
      // Undeclared exception!
      try { 
        setUniqueList1.removeAll(set0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.UnmodifiableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Stack<LinkedHashSet<Object>> stack0 = new Stack<LinkedHashSet<Object>>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSet0.add(stack0);
      stack0.add(linkedHashSet0);
      SetUniqueList<LinkedHashSet<Object>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedHashSet<Object>>) stack0);
      // Undeclared exception!
      try { 
        setUniqueList0.removeAll(stack0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Stack<LinkedHashSet<Object>> stack0 = new Stack<LinkedHashSet<Object>>();
      SetUniqueList<LinkedHashSet<Object>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedHashSet<Object>>) stack0);
      // Undeclared exception!
      try { 
        setUniqueList0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.SetUniqueList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Stack<LinkedHashSet<Object>> stack0 = new Stack<LinkedHashSet<Object>>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      stack0.add(linkedHashSet0);
      SetUniqueList<LinkedHashSet<Object>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedHashSet<Object>>) stack0);
      TreeSet<LinkedHashSet<Object>> treeSet0 = new TreeSet<LinkedHashSet<Object>>();
      SetUniqueList<LinkedHashSet<Object>> setUniqueList1 = new SetUniqueList<LinkedHashSet<Object>>(setUniqueList0, treeSet0);
      // Undeclared exception!
      try { 
        setUniqueList1.removeAll(setUniqueList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) vector0);
      Set<Object> set0 = setUniqueList0.asSet();
      SetUniqueList<Object> setUniqueList1 = new SetUniqueList<Object>(vector0, set0);
      BoundType boundType0 = BoundType.CLOSED;
      // Undeclared exception!
      try { 
        setUniqueList1.remove((Object) boundType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.UnmodifiableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector<BoundType> vector0 = new Vector<BoundType>();
      TreeSet<BoundType> treeSet0 = new TreeSet<BoundType>();
      SetUniqueList<BoundType> setUniqueList0 = new SetUniqueList<BoundType>(vector0, treeSet0);
      // Undeclared exception!
      try { 
        setUniqueList0.remove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      TreeSet<LinkedHashSet<BoundType>> treeSet0 = new TreeSet<LinkedHashSet<BoundType>>();
      Vector<LinkedHashSet<BoundType>> vector0 = new Vector<LinkedHashSet<BoundType>>();
      SetUniqueList<LinkedHashSet<BoundType>> setUniqueList0 = new SetUniqueList<LinkedHashSet<BoundType>>(vector0, treeSet0);
      // Undeclared exception!
      try { 
        setUniqueList0.remove((Object) linkedHashSet0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vector<FileVisitResult> vector0 = new Vector<FileVisitResult>();
      SetUniqueList<FileVisitResult> setUniqueList0 = SetUniqueList.setUniqueList((List<FileVisitResult>) vector0);
      // Undeclared exception!
      try { 
        setUniqueList0.remove(42);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 42
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      SetUniqueList<Object> setUniqueList0 = new SetUniqueList<Object>(linkedList0, linkedHashSet0);
      setUniqueList0.add((Object) linkedHashSet0);
      // Undeclared exception!
      try { 
        setUniqueList0.createSetBasedOnList(linkedHashSet0, setUniqueList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Stack<LinkedHashSet<BoundType>> stack0 = new Stack<LinkedHashSet<BoundType>>();
      SetUniqueList<LinkedHashSet<BoundType>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedHashSet<BoundType>>) stack0);
      // Undeclared exception!
      try { 
        setUniqueList0.createSetBasedOnList((Set<LinkedHashSet<BoundType>>) null, stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.SetUniqueList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vector<LinkedHashSet<Object>> vector0 = new Vector<LinkedHashSet<Object>>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSet0.add(vector0);
      vector0.add(linkedHashSet0);
      SetUniqueList<LinkedHashSet<Object>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedHashSet<Object>>) vector0);
      // Undeclared exception!
      try { 
        setUniqueList0.containsAll(vector0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<BoundType> linkedList0 = new LinkedList<BoundType>();
      SetUniqueList<BoundType> setUniqueList0 = SetUniqueList.setUniqueList((List<BoundType>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Stack<LinkedHashSet<Object>> stack0 = new Stack<LinkedHashSet<Object>>();
      stack0.add(linkedHashSet0);
      Stack<HijrahEra> stack1 = new Stack<HijrahEra>();
      TreeSet<HijrahEra> treeSet0 = new TreeSet<HijrahEra>();
      SetUniqueList<HijrahEra> setUniqueList0 = new SetUniqueList<HijrahEra>(stack1, treeSet0);
      // Undeclared exception!
      try { 
        setUniqueList0.containsAll(stack0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Vector<FileVisitResult> vector0 = new Vector<FileVisitResult>();
      FileVisitResult fileVisitResult0 = FileVisitResult.TERMINATE;
      vector0.add(fileVisitResult0);
      Stack<Object> stack0 = new Stack<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) stack0);
      Set<Object> set0 = setUniqueList0.asSet();
      SetUniqueList<Object> setUniqueList1 = new SetUniqueList<Object>(stack0, set0);
      // Undeclared exception!
      try { 
        setUniqueList1.addAll(926, (Collection<?>) vector0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.UnmodifiableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<BoundType> linkedList0 = new LinkedList<BoundType>();
      SetUniqueList<BoundType> setUniqueList0 = SetUniqueList.setUniqueList((List<BoundType>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.addAll((-361), (Collection<? extends BoundType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.SetUniqueList", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Vector<LinkedHashSet<BoundType>> vector0 = new Vector<LinkedHashSet<BoundType>>();
      SetUniqueList<LinkedHashSet<BoundType>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedHashSet<BoundType>>) vector0);
      TreeSet<LinkedHashSet<BoundType>> treeSet0 = new TreeSet<LinkedHashSet<BoundType>>();
      // Undeclared exception!
      try { 
        setUniqueList0.addAll(5, (Collection<? extends LinkedHashSet<BoundType>>) treeSet0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 5
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Vector<BoundType> vector0 = new Vector<BoundType>();
      HashMap<BoundType, BoundType> hashMap0 = new HashMap<BoundType, BoundType>();
      Set<BoundType> set0 = hashMap0.keySet();
      SetUniqueList<BoundType> setUniqueList0 = new SetUniqueList<BoundType>(vector0, set0);
      BoundType boundType0 = BoundType.OPEN;
      // Undeclared exception!
      try { 
        setUniqueList0.add(boundType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      SetUniqueList<Object> setUniqueList0 = new SetUniqueList<Object>(linkedList0, linkedHashSet0);
      setUniqueList0.add((Object) linkedHashSet0);
      // Undeclared exception!
      try { 
        setUniqueList0.add((Object) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ArrayList<Vector<BoundType>> arrayList0 = new ArrayList<Vector<BoundType>>();
      TreeSet<Vector<BoundType>> treeSet0 = new TreeSet<Vector<BoundType>>();
      SetUniqueList<Vector<BoundType>> setUniqueList0 = new SetUniqueList<Vector<BoundType>>(arrayList0, treeSet0);
      // Undeclared exception!
      try { 
        setUniqueList0.add((Vector<BoundType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedList<BoundType> linkedList0 = new LinkedList<BoundType>();
      TreeSet<BoundType> treeSet0 = new TreeSet<BoundType>();
      BoundType boundType0 = BoundType.OPEN;
      NavigableSet<BoundType> navigableSet0 = treeSet0.tailSet(boundType0, false);
      SetUniqueList<BoundType> setUniqueList0 = new SetUniqueList<BoundType>(linkedList0, navigableSet0);
      // Undeclared exception!
      try { 
        setUniqueList0.add(boundType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // key out of range
         //
         verifyException("java.util.TreeMap$NavigableSubMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedHashSet<BoundType> linkedHashSet0 = new LinkedHashSet<BoundType>();
      Vector<Object> vector0 = new Vector<Object>();
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      SetUniqueList<Object> setUniqueList0 = new SetUniqueList<Object>(vector0, treeSet0);
      // Undeclared exception!
      try { 
        setUniqueList0.add((Object) linkedHashSet0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      HashMap<Object, LinkedHashSet<Object>> hashMap0 = new HashMap<Object, LinkedHashSet<Object>>();
      Set<Object> set0 = hashMap0.keySet();
      SetUniqueList<Object> setUniqueList0 = new SetUniqueList<Object>(linkedList1, set0);
      // Undeclared exception!
      try { 
        setUniqueList0.add(1795, (Object) linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Vector<BoundType> vector0 = new Vector<BoundType>();
      SetUniqueList<BoundType> setUniqueList0 = SetUniqueList.setUniqueList((List<BoundType>) vector0);
      Set<BoundType> set0 = setUniqueList0.asSet();
      SetUniqueList<BoundType> setUniqueList1 = new SetUniqueList<BoundType>(vector0, set0);
      BoundType boundType0 = BoundType.CLOSED;
      // Undeclared exception!
      try { 
        setUniqueList1.add(13, boundType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.UnmodifiableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ArrayList<Stack<Locale.Category>> arrayList0 = new ArrayList<Stack<Locale.Category>>();
      TreeSet<Stack<Locale.Category>> treeSet0 = new TreeSet<Stack<Locale.Category>>();
      SetUniqueList<Stack<Locale.Category>> setUniqueList0 = new SetUniqueList<Stack<Locale.Category>>(arrayList0, treeSet0);
      // Undeclared exception!
      try { 
        setUniqueList0.add((-358), (Stack<Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LinkedList<BoundType> linkedList0 = new LinkedList<BoundType>();
      TreeSet<BoundType> treeSet0 = new TreeSet<BoundType>();
      BoundType boundType0 = BoundType.OPEN;
      NavigableSet<BoundType> navigableSet0 = treeSet0.headSet(boundType0, false);
      SetUniqueList<BoundType> setUniqueList0 = new SetUniqueList<BoundType>(linkedList0, navigableSet0);
      // Undeclared exception!
      try { 
        setUniqueList0.add((-1280), boundType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // key out of range
         //
         verifyException("java.util.TreeMap$NavigableSubMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LinkedList<LinkedHashSet<BoundType>> linkedList0 = new LinkedList<LinkedHashSet<BoundType>>();
      TreeSet<LinkedHashSet<BoundType>> treeSet0 = new TreeSet<LinkedHashSet<BoundType>>();
      SetUniqueList<LinkedHashSet<BoundType>> setUniqueList0 = new SetUniqueList<LinkedHashSet<BoundType>>(linkedList0, treeSet0);
      LinkedHashSet<BoundType> linkedHashSet0 = new LinkedHashSet<BoundType>();
      // Undeclared exception!
      try { 
        setUniqueList0.add((-705), linkedHashSet0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Stack<LinkedList<BoundType>> stack0 = new Stack<LinkedList<BoundType>>();
      SetUniqueList<LinkedList<BoundType>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedList<BoundType>>) stack0);
      LinkedList<BoundType> linkedList0 = new LinkedList<BoundType>();
      // Undeclared exception!
      try { 
        setUniqueList0.add(73, linkedList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 73 > 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LinkedList<TextStyle> linkedList0 = new LinkedList<TextStyle>();
      SetUniqueList<TextStyle> setUniqueList0 = null;
      try {
        setUniqueList0 = new SetUniqueList<TextStyle>(linkedList0, (Set<TextStyle>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // set
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Integer integer0 = new Integer((-380));
      Vector<Integer> vector0 = new Vector<Integer>();
      vector0.add(integer0);
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList((List<Integer>) vector0);
      boolean boolean0 = setUniqueList0.remove((Object) integer0);
      assertFalse(vector0.contains((-380)));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Stack<LinkedHashSet<Object>> stack0 = new Stack<LinkedHashSet<Object>>();
      stack0.setSize(1276);
      LinkedHashSet<LinkedHashSet<Object>> linkedHashSet0 = new LinkedHashSet<LinkedHashSet<Object>>();
      SetUniqueList<LinkedHashSet<Object>> setUniqueList0 = new SetUniqueList<LinkedHashSet<Object>>(stack0, linkedHashSet0);
      boolean boolean0 = setUniqueList0.addAll(1276, (Collection<? extends LinkedHashSet<Object>>) stack0);
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LinkedList<BoundType> linkedList0 = new LinkedList<BoundType>();
      ArrayList<LinkedList<BoundType>> arrayList0 = new ArrayList<LinkedList<BoundType>>();
      SetUniqueList<LinkedList<BoundType>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedList<BoundType>>) arrayList0);
      // Undeclared exception!
      try { 
        setUniqueList0.add((-1280), linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1280, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Vector<LinkedList<Object>> vector0 = new Vector<LinkedList<Object>>();
      HashSet<LinkedList<Object>> hashSet0 = new HashSet<LinkedList<Object>>();
      SetUniqueList<LinkedList<Object>> setUniqueList0 = new SetUniqueList<LinkedList<Object>>(vector0, hashSet0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashSet0.add(linkedList0);
      setUniqueList0.add((-1), linkedList0);
      assertFalse(vector0.contains(linkedList0));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.addAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.SetUniqueList", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      Iterator<Object> iterator0 = setUniqueList0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      SetUniqueList<Locale.Category> setUniqueList0 = SetUniqueList.setUniqueList((List<Locale.Category>) linkedList0);
      setUniqueList0.clear();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSet0.add(listIterator0);
      SetUniqueList.SetListListIterator<Object> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<Object>(listIterator0, linkedHashSet0);
      setUniqueList_SetListListIterator0.add(listIterator0);
      assertFalse(setUniqueList_SetListListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      SetUniqueList.SetListListIterator<Object> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<Object>(listIterator0, linkedHashSet0);
      setUniqueList_SetListListIterator0.add(linkedHashSet0);
      SetUniqueList<Object> setUniqueList0 = new SetUniqueList<Object>(linkedList0, linkedHashSet0);
      // Undeclared exception!
      try { 
        setUniqueList0.addAll(22, (Collection<?>) linkedHashSet0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Vector<Locale.Category> vector0 = new Vector<Locale.Category>();
      HashSet<Locale.Category> hashSet0 = new HashSet<Locale.Category>();
      SetUniqueList<Locale.Category> setUniqueList0 = new SetUniqueList<Locale.Category>(vector0, hashSet0);
      Set<Locale.Category> set0 = setUniqueList0.createSetBasedOnList(hashSet0, vector0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      LinkedList<BoundType> linkedList0 = new LinkedList<BoundType>();
      BoundType boundType0 = BoundType.CLOSED;
      EnumSet<BoundType> enumSet0 = EnumSet.of(boundType0);
      SetUniqueList<BoundType> setUniqueList0 = new SetUniqueList<BoundType>(linkedList0, enumSet0);
      boolean boolean0 = setUniqueList0.containsAll(enumSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      LinkedList<BoundType> linkedList0 = new LinkedList<BoundType>();
      BoundType boundType0 = BoundType.OPEN;
      EnumSet<BoundType> enumSet0 = EnumSet.of(boundType0);
      SetUniqueList<BoundType> setUniqueList0 = SetUniqueList.setUniqueList((List<BoundType>) linkedList0);
      boolean boolean0 = setUniqueList0.containsAll(enumSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      LinkedList<BoundType> linkedList0 = new LinkedList<BoundType>();
      BoundType boundType0 = BoundType.OPEN;
      EnumSet<BoundType> enumSet0 = EnumSet.of(boundType0);
      SetUniqueList<BoundType> setUniqueList0 = new SetUniqueList<BoundType>(linkedList0, enumSet0);
      boolean boolean0 = setUniqueList0.contains(boundType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      LinkedList<BoundType> linkedList0 = new LinkedList<BoundType>();
      BoundType boundType0 = BoundType.CLOSED;
      EnumSet<BoundType> enumSet0 = EnumSet.of(boundType0);
      SetUniqueList<BoundType> setUniqueList0 = new SetUniqueList<BoundType>(linkedList0, enumSet0);
      boolean boolean0 = setUniqueList0.contains((Object) null);
      assertTrue(setUniqueList0.contains(boundType0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Stack<BoundType> stack0 = new Stack<BoundType>();
      SetUniqueList<BoundType> setUniqueList0 = SetUniqueList.setUniqueList((List<BoundType>) stack0);
      boolean boolean0 = setUniqueList0.retainAll(stack0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      LinkedList<BoundType> linkedList0 = new LinkedList<BoundType>();
      BoundType boundType0 = BoundType.CLOSED;
      EnumSet<BoundType> enumSet0 = EnumSet.of(boundType0);
      SetUniqueList<BoundType> setUniqueList0 = new SetUniqueList<BoundType>(linkedList0, enumSet0);
      boolean boolean0 = setUniqueList0.retainAll(linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      SetUniqueList<Locale.Category> setUniqueList0 = SetUniqueList.setUniqueList((List<Locale.Category>) linkedList0);
      boolean boolean0 = setUniqueList0.remove((Object) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Stack<LinkedHashSet<Object>> stack0 = new Stack<LinkedHashSet<Object>>();
      stack0.add(linkedHashSet0);
      HashSet<LinkedHashSet<Object>> hashSet0 = new HashSet<LinkedHashSet<Object>>();
      SetUniqueList<LinkedHashSet<Object>> setUniqueList0 = new SetUniqueList<LinkedHashSet<Object>>(stack0, hashSet0);
      setUniqueList0.set(0, linkedHashSet0);
      assertTrue(stack0.contains(linkedHashSet0));
      assertFalse(stack0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Stack<LinkedHashSet<Object>> stack0 = new Stack<LinkedHashSet<Object>>();
      stack0.setSize(1232);
      LinkedHashSet<LinkedHashSet<Object>> linkedHashSet0 = new LinkedHashSet<LinkedHashSet<Object>>();
      SetUniqueList<LinkedHashSet<Object>> setUniqueList0 = new SetUniqueList<LinkedHashSet<Object>>(stack0, linkedHashSet0);
      setUniqueList0.set(73, (LinkedHashSet<Object>) null);
      assertEquals(1231, stack0.size());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      BoundType boundType0 = BoundType.OPEN;
      EnumSet<BoundType> enumSet0 = EnumSet.of(boundType0);
      LinkedList<BoundType> linkedList0 = new LinkedList<BoundType>();
      SetUniqueList<BoundType> setUniqueList0 = new SetUniqueList<BoundType>(linkedList0, enumSet0);
      BoundType boundType1 = BoundType.CLOSED;
      setUniqueList0.add(boundType1);
      // Undeclared exception!
      try { 
        setUniqueList0.addAll(1559, (Collection<? extends BoundType>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1559, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      LinkedList<BoundType> linkedList0 = new LinkedList<BoundType>();
      BoundType boundType0 = BoundType.CLOSED;
      EnumSet<BoundType> enumSet0 = EnumSet.of(boundType0);
      SetUniqueList<BoundType> setUniqueList0 = new SetUniqueList<BoundType>(linkedList0, enumSet0);
      BoundType boundType1 = BoundType.OPEN;
      setUniqueList0.add(boundType1);
      boolean boolean0 = setUniqueList0.retainAll(linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      LinkedList<BoundType> linkedList0 = new LinkedList<BoundType>();
      BoundType boundType0 = BoundType.CLOSED;
      EnumSet<BoundType> enumSet0 = EnumSet.of(boundType0);
      SetUniqueList<BoundType> setUniqueList0 = new SetUniqueList<BoundType>(linkedList0, enumSet0);
      boolean boolean0 = setUniqueList0.add(boundType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Stack<LinkedHashSet<Object>> stack0 = new Stack<LinkedHashSet<Object>>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      stack0.add(linkedHashSet0);
      SetUniqueList<LinkedHashSet<Object>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedHashSet<Object>>) stack0);
      // Undeclared exception!
      try { 
        setUniqueList0.removeAll(setUniqueList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      ListIterator<Locale.Category> listIterator0 = (ListIterator<Locale.Category>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      HashSet<Locale.Category> hashSet0 = new HashSet<Locale.Category>();
      SetUniqueList.SetListListIterator<Locale.Category> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<Locale.Category>(listIterator0, hashSet0);
      SetUniqueList.SetListIterator<Locale.Category> setUniqueList_SetListIterator0 = new SetUniqueList.SetListIterator<Locale.Category>(setUniqueList_SetListListIterator0, hashSet0);
      setUniqueList_SetListIterator0.remove();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(listIterator0).next();
      SetUniqueList.SetListListIterator<Object> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<Object>(listIterator0, linkedHashSet0);
      Object object0 = setUniqueList_SetListListIterator0.next();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      SetUniqueList.SetListListIterator<Object> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<Object>(listIterator0, linkedHashSet0);
      // Undeclared exception!
      try { 
        setUniqueList_SetListListIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      SetUniqueList.SetListListIterator<Object> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<Object>(listIterator0, linkedHashSet0);
      // Undeclared exception!
      try { 
        setUniqueList_SetListListIterator0.set(linkedHashSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ListIterator does not support set
         //
         verifyException("org.apache.commons.collections4.list.SetUniqueList$SetListListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      LinkedList<LinkedHashSet<BoundType>> linkedList0 = new LinkedList<LinkedHashSet<BoundType>>();
      SetUniqueList<LinkedHashSet<BoundType>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedHashSet<BoundType>>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.listIterator(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Vector<BoundType> vector0 = new Vector<BoundType>();
      SetUniqueList<BoundType> setUniqueList0 = SetUniqueList.setUniqueList((List<BoundType>) vector0);
      // Undeclared exception!
      try { 
        setUniqueList0.subList(1149, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1149) > toIndex(-1)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      LinkedList<BoundType> linkedList0 = new LinkedList<BoundType>();
      SetUniqueList<BoundType> setUniqueList0 = SetUniqueList.setUniqueList((List<BoundType>) linkedList0);
      Set<BoundType> set0 = setUniqueList0.asSet();
      SetUniqueList<BoundType> setUniqueList1 = new SetUniqueList<BoundType>(linkedList0, set0);
      BoundType boundType0 = BoundType.CLOSED;
      // Undeclared exception!
      try { 
        setUniqueList1.add(boundType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.UnmodifiableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Stack<LinkedHashSet<Object>> stack0 = new Stack<LinkedHashSet<Object>>();
      SetUniqueList<LinkedHashSet<Object>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedHashSet<Object>>) stack0);
      boolean boolean0 = setUniqueList0.removeAll(setUniqueList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      LinkedList<BoundType> linkedList0 = new LinkedList<BoundType>();
      SetUniqueList<BoundType> setUniqueList0 = SetUniqueList.setUniqueList((List<BoundType>) linkedList0);
      BoundType boundType0 = BoundType.CLOSED;
      Range<BoundType> range0 = Range.downTo(boundType0, boundType0);
      boolean boolean0 = setUniqueList0.removeIf(range0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      LinkedList<BoundType> linkedList0 = new LinkedList<BoundType>();
      SetUniqueList<BoundType> setUniqueList0 = SetUniqueList.setUniqueList((List<BoundType>) linkedList0);
      ListIterator<BoundType> listIterator0 = setUniqueList0.listIterator();
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      LinkedList<BoundType> linkedList0 = new LinkedList<BoundType>();
      SetUniqueList<BoundType> setUniqueList0 = SetUniqueList.setUniqueList((List<BoundType>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.remove((-617));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -617, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }
}
