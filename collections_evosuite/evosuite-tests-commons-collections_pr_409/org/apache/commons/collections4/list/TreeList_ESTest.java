/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 08:32:23 GMT 2025
 */

package org.apache.commons.collections4.list;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.chrono.IsoEra;
import java.time.format.TextStyle;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Iterator;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.Stack;
import org.apache.commons.collections4.list.TreeList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class TreeList_ESTest extends TreeList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.NARROW_STANDALONE;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0, textStyle0);
      TreeList<TextStyle> treeList0 = new TreeList<TextStyle>(enumSet0);
      TreeList.TreeListIterator<TextStyle> treeList_TreeListIterator0 = new TreeList.TreeListIterator<TextStyle>(treeList0, 0);
      TextStyle textStyle1 = TextStyle.FULL_STANDALONE;
      treeList_TreeListIterator0.add(textStyle1);
      treeList_TreeListIterator0.add(textStyle0);
      TreeList.TreeListIterator<TextStyle> treeList_TreeListIterator1 = new TreeList.TreeListIterator<TextStyle>(treeList0, 0);
      treeList_TreeListIterator1.add(textStyle1);
      treeList0.removeAll(enumSet0);
      assertFalse(treeList0.contains(textStyle0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      Integer integer0 = Integer.getInteger((String) null, 14);
      priorityQueue0.add(integer0);
      priorityQueue0.add(integer0);
      priorityQueue0.add(integer0);
      priorityQueue0.add(integer0);
      TreeList<Integer> treeList0 = new TreeList<Integer>(priorityQueue0);
      treeList0.remove((Object) integer0);
      treeList0.addAll((Collection<? extends Integer>) priorityQueue0);
      assertEquals(7, treeList0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<TextStyle> class0 = TextStyle.class;
      EnumSet<TextStyle> enumSet0 = EnumSet.allOf(class0);
      TreeList<TextStyle> treeList0 = new TreeList<TextStyle>(enumSet0);
      treeList0.remove(4);
      assertEquals(5, treeList0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.SHORT_STANDALONE;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0, textStyle0);
      TreeList<TextStyle> treeList0 = new TreeList<TextStyle>(enumSet0);
      treeList0.add(textStyle0);
      assertEquals(2, treeList0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TreeList<IsoEra> treeList0 = new TreeList<IsoEra>();
      TreeList.TreeListIterator<IsoEra> treeList_TreeListIterator0 = new TreeList.TreeListIterator<IsoEra>(treeList0, 0);
      int int0 = treeList_TreeListIterator0.nextIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      TreeList<Integer> treeList0 = new TreeList<Integer>(stack0);
      TreeList.TreeListIterator<Integer> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Integer>(treeList0, 0);
      treeList_TreeListIterator0.checkModCount();
      assertEquals((-1), treeList_TreeListIterator0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      Object[] objectArray0 = treeList0.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      int int0 = treeList0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TreeList<TextStyle> treeList0 = new TreeList<TextStyle>();
      TextStyle textStyle0 = TextStyle.SHORT_STANDALONE;
      treeList0.add(textStyle0);
      int int0 = treeList0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.NARROW_STANDALONE;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0, textStyle0);
      TreeList<TextStyle> treeList0 = new TreeList<TextStyle>(enumSet0);
      TreeList.TreeListIterator<TextStyle> treeList_TreeListIterator0 = new TreeList.TreeListIterator<TextStyle>(treeList0, 0);
      treeList_TreeListIterator0.add((TextStyle) null);
      assertTrue(treeList_TreeListIterator0.hasPrevious());
      
      treeList0.remove(0);
      assertTrue(treeList0.contains(textStyle0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(1093);
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      priorityQueue0.add(integer0);
      priorityQueue0.add(integer0);
      TreeList<Integer> treeList0 = new TreeList<Integer>(priorityQueue0);
      treeList0.addAll((Collection<? extends Integer>) priorityQueue0);
      assertEquals(4, treeList0.size());
      
      treeList0.listIterator(3);
      assertTrue(treeList0.contains(1093));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      TreeList<Integer> treeList0 = new TreeList<Integer>(hashSet0);
      ListIterator<Integer> listIterator0 = treeList0.listIterator(0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer((-1159));
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      priorityQueue0.add(integer0);
      TreeList<Integer> treeList0 = new TreeList<Integer>(priorityQueue0);
      ListIterator<Integer> listIterator0 = treeList0.listIterator();
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      ListIterator<Integer> listIterator0 = treeList0.listIterator();
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      Iterator<Object> iterator0 = treeList0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      Integer integer0 = new Integer((-332));
      priorityQueue0.add(integer0);
      TreeList<Integer> treeList0 = new TreeList<Integer>(priorityQueue0);
      int int0 = treeList0.indexOf(integer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      Integer integer0 = new Integer((-1211));
      priorityQueue0.add(integer0);
      TreeList<Integer> treeList0 = new TreeList<Integer>(priorityQueue0);
      boolean boolean0 = treeList0.contains(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      Object object0 = new Object();
      boolean boolean0 = treeList0.contains(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      Integer integer0 = new Integer(29);
      // Undeclared exception!
      try { 
        treeList0.set(29, integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:29, size=0
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      // Undeclared exception!
      try { 
        treeList0.remove((-351));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:-351, size=0
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      // Undeclared exception!
      try { 
        treeList0.get(65535);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:65535, size=0
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      // Undeclared exception!
      try { 
        treeList0.addAll((Collection<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<TextStyle> class0 = TextStyle.class;
      TreeList<Object> treeList0 = new TreeList<Object>();
      // Undeclared exception!
      try { 
        treeList0.add(2, (Object) class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:2, size=0
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TreeList<TextStyle> treeList0 = null;
      try {
        treeList0 = new TreeList<TextStyle>((Collection<? extends TextStyle>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<TextStyle> class0 = TextStyle.class;
      EnumSet<TextStyle> enumSet0 = EnumSet.allOf(class0);
      TreeList<TextStyle> treeList0 = new TreeList<TextStyle>(enumSet0);
      TextStyle textStyle0 = TextStyle.NARROW;
      treeList0.add(3, textStyle0);
      assertEquals(7, treeList0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<TextStyle> class0 = TextStyle.class;
      EnumSet<TextStyle> enumSet0 = EnumSet.allOf(class0);
      TreeList<Object> treeList0 = new TreeList<Object>(enumSet0);
      Object[] objectArray0 = treeList0.toArray();
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<TextStyle> class0 = TextStyle.class;
      EnumSet<TextStyle> enumSet0 = EnumSet.allOf(class0);
      TreeList<TextStyle> treeList0 = new TreeList<TextStyle>(enumSet0);
      TextStyle textStyle0 = TextStyle.SHORT;
      int int0 = treeList0.indexOf(textStyle0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.SHORT_STANDALONE;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0, textStyle0);
      TreeList<TextStyle> treeList0 = new TreeList<TextStyle>(enumSet0);
      TextStyle textStyle1 = treeList0.get(0);
      assertTrue(enumSet0.contains(textStyle1));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TreeList<IsoEra> treeList0 = new TreeList<IsoEra>();
      TreeList.TreeListIterator<IsoEra> treeList_TreeListIterator0 = new TreeList.TreeListIterator<IsoEra>(treeList0, 2944);
      IsoEra isoEra0 = IsoEra.BCE;
      // Undeclared exception!
      try { 
        treeList_TreeListIterator0.set(isoEra0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      Integer integer0 = new Integer((-1237));
      priorityQueue0.add(integer0);
      TreeList<Object> treeList0 = new TreeList<Object>(priorityQueue0);
      treeList0.sort((Comparator<? super Object>) null);
      assertEquals(1, treeList0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<TextStyle> class0 = TextStyle.class;
      EnumSet<TextStyle> enumSet0 = EnumSet.allOf(class0);
      TreeList<TextStyle> treeList0 = new TreeList<TextStyle>(enumSet0);
      TreeList.TreeListIterator<TextStyle> treeList_TreeListIterator0 = new TreeList.TreeListIterator<TextStyle>(treeList0, 1);
      TextStyle textStyle0 = treeList_TreeListIterator0.previous();
      treeList_TreeListIterator0.remove();
      assertEquals(5, treeList0.size());
      assertFalse(treeList0.contains(textStyle0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      TreeList.TreeListIterator<Integer> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Integer>(treeList0, (-1));
      // Undeclared exception!
      try { 
        treeList_TreeListIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TreeList<IsoEra> treeList0 = new TreeList<IsoEra>();
      TreeList.TreeListIterator<IsoEra> treeList_TreeListIterator0 = new TreeList.TreeListIterator<IsoEra>(treeList0, (-1213));
      // Undeclared exception!
      try { 
        treeList_TreeListIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Already at start of list.
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      TreeList.TreeListIterator<Integer> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Integer>(treeList0, 1);
      // Undeclared exception!
      try { 
        treeList_TreeListIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No element at index 1.
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TreeList<IsoEra> treeList0 = new TreeList<IsoEra>();
      TreeList.TreeListIterator<IsoEra> treeList_TreeListIterator0 = new TreeList.TreeListIterator<IsoEra>(treeList0, (-1411));
      treeList0.clear();
      IsoEra isoEra0 = IsoEra.CE;
      // Undeclared exception!
      try { 
        treeList_TreeListIterator0.set(isoEra0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<TextStyle> class0 = TextStyle.class;
      EnumSet<TextStyle> enumSet0 = EnumSet.allOf(class0);
      TreeList<TextStyle> treeList0 = new TreeList<TextStyle>(enumSet0);
      TreeList.TreeListIterator<TextStyle> treeList_TreeListIterator0 = new TreeList.TreeListIterator<TextStyle>(treeList0, 2);
      TextStyle textStyle0 = TextStyle.FULL;
      treeList_TreeListIterator0.add(textStyle0);
      treeList_TreeListIterator0.add(textStyle0);
      treeList0.remove(1);
      assertEquals(7, treeList0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<TextStyle> class0 = TextStyle.class;
      EnumSet<TextStyle> enumSet0 = EnumSet.allOf(class0);
      TreeList<TextStyle> treeList0 = new TreeList<TextStyle>(enumSet0);
      TextStyle textStyle0 = TextStyle.FULL_STANDALONE;
      treeList0.add(textStyle0);
      TextStyle textStyle1 = TextStyle.FULL;
      EnumSet<TextStyle> enumSet1 = EnumSet.of(textStyle1, textStyle0, textStyle0, textStyle1);
      treeList0.addAll((Collection<? extends TextStyle>) enumSet1);
      treeList0.remove(2);
      assertEquals(8, treeList0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      Integer integer0 = new Integer((-3110));
      priorityQueue0.add(integer0);
      priorityQueue0.add(integer0);
      TreeList<Integer> treeList0 = new TreeList<Integer>(priorityQueue0);
      treeList0.addAll((Collection<? extends Integer>) priorityQueue0);
      TreeList<Object> treeList1 = new TreeList<Object>(priorityQueue0);
      boolean boolean0 = treeList1.addAll((Collection<?>) treeList0);
      assertEquals(6, treeList1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Class<TextStyle> class0 = TextStyle.class;
      EnumSet<TextStyle> enumSet0 = EnumSet.allOf(class0);
      TreeList<TextStyle> treeList0 = new TreeList<TextStyle>(enumSet0);
      treeList0.remove(2);
      assertEquals(5, treeList0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      Integer integer0 = new Integer((-1211));
      priorityQueue0.add(integer0);
      priorityQueue0.add(integer0);
      priorityQueue0.add(integer0);
      TreeList<Integer> treeList0 = new TreeList<Integer>(priorityQueue0);
      treeList0.addAll((Collection<? extends Integer>) priorityQueue0);
      treeList0.removeAll(priorityQueue0);
      assertEquals(0, treeList0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      Integer integer0 = new Integer((-1225));
      priorityQueue0.add(integer0);
      Integer integer1 = new Integer((-1));
      priorityQueue0.add(integer1);
      TreeList<Integer> treeList0 = new TreeList<Integer>(priorityQueue0);
      treeList0.addAll((Collection<? extends Integer>) priorityQueue0);
      treeList0.remove((Object) integer1);
      assertEquals(3, treeList0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.NARROW_STANDALONE;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0, textStyle0);
      TreeList<TextStyle> treeList0 = new TreeList<TextStyle>(enumSet0);
      TreeList.TreeListIterator<TextStyle> treeList_TreeListIterator0 = new TreeList.TreeListIterator<TextStyle>(treeList0, 0);
      TextStyle textStyle1 = TextStyle.FULL_STANDALONE;
      treeList_TreeListIterator0.add(textStyle1);
      treeList_TreeListIterator0.add(textStyle0);
      boolean boolean0 = treeList0.removeAll(enumSet0);
      assertFalse(treeList0.contains(textStyle0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      Integer integer0 = new Integer((-1219));
      priorityQueue0.add(integer0);
      priorityQueue0.add(integer0);
      TreeList<Integer> treeList0 = new TreeList<Integer>(priorityQueue0);
      treeList0.addAll((Collection<? extends Integer>) priorityQueue0);
      treeList0.addAll(0, (Collection<? extends Integer>) priorityQueue0);
      TreeList<Object> treeList1 = new TreeList<Object>(treeList0);
      assertEquals(6, treeList0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Class<TextStyle> class0 = TextStyle.class;
      EnumSet<TextStyle> enumSet0 = EnumSet.allOf(class0);
      TreeList<TextStyle> treeList0 = new TreeList<TextStyle>(enumSet0);
      int int0 = treeList0.lastIndexOf(class0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Class<TextStyle> class0 = TextStyle.class;
      EnumSet<TextStyle> enumSet0 = EnumSet.allOf(class0);
      TreeList<TextStyle> treeList0 = new TreeList<TextStyle>(enumSet0);
      boolean boolean0 = treeList0.containsAll(enumSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Integer integer0 = new Integer((-1237));
      TextStyle textStyle0 = TextStyle.NARROW;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0, textStyle0);
      TreeList<TextStyle> treeList0 = new TreeList<TextStyle>(enumSet0);
      treeList0.lastIndexOf(integer0);
      assertEquals(1, treeList0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      TreeList<Object> treeList0 = new TreeList<Object>(priorityQueue0);
      // Undeclared exception!
      try { 
        treeList0.listIterator((-1237));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:-1237, size=0
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      TextStyle textStyle0 = TextStyle.SHORT_STANDALONE;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0, textStyle0);
      TreeList<Object> treeList0 = new TreeList<Object>(priorityQueue0);
      boolean boolean0 = treeList0.addAll((Collection<?>) enumSet0);
      assertEquals(1, treeList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      boolean boolean0 = treeList0.addAll((Collection<?>) treeList0);
      assertEquals(0, treeList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      Integer integer0 = new Integer((-1219));
      priorityQueue0.add(integer0);
      TreeList<Integer> treeList0 = new TreeList<Integer>(priorityQueue0);
      treeList0.addAll((Collection<? extends Integer>) priorityQueue0);
      TreeList<Object> treeList1 = new TreeList<Object>(priorityQueue0);
      boolean boolean0 = treeList1.addAll((Collection<?>) treeList0);
      assertEquals(2, treeList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      TreeList<Integer> treeList0 = new TreeList<Integer>(priorityQueue0);
      TextStyle textStyle0 = TextStyle.FULL_STANDALONE;
      int int0 = treeList0.indexOf(textStyle0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Class<TextStyle> class0 = TextStyle.class;
      EnumSet<TextStyle> enumSet0 = EnumSet.allOf(class0);
      TreeList<TextStyle> treeList0 = new TreeList<TextStyle>(enumSet0);
      treeList0.addAll(0, (Collection<? extends TextStyle>) enumSet0);
      treeList0.remove(2);
      assertEquals(11, treeList0.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.NARROW_STANDALONE;
      EnumSet<TextStyle> enumSet0 = EnumSet.of(textStyle0, textStyle0);
      TreeList<TextStyle> treeList0 = new TreeList<TextStyle>(enumSet0);
      TreeList.TreeListIterator<TextStyle> treeList_TreeListIterator0 = new TreeList.TreeListIterator<TextStyle>(treeList0, 0);
      treeList_TreeListIterator0.add((TextStyle) null);
      assertEquals(2, treeList0.size());
      
      boolean boolean0 = treeList0.removeAll(enumSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      TreeList.TreeListIterator<Object> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Object>(treeList0, (-1));
      int int0 = treeList_TreeListIterator0.previousIndex();
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Class<TextStyle> class0 = TextStyle.class;
      EnumSet<TextStyle> enumSet0 = EnumSet.allOf(class0);
      TreeList<TextStyle> treeList0 = new TreeList<TextStyle>(enumSet0);
      assertEquals(6, treeList0.size());
      
      TextStyle textStyle0 = TextStyle.FULL_STANDALONE;
      TextStyle textStyle1 = treeList0.set(0, textStyle0);
      assertEquals(TextStyle.FULL, textStyle1);
  }
}
