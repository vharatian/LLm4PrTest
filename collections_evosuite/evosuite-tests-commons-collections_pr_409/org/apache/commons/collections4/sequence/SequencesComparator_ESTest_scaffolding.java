/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Sat Aug 23 08:39:55 GMT 2025
 */

package org.apache.commons.collections4.sequence;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class SequencesComparator_ESTest_scaffolding {

  @org.junit.Rule
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.sequence.SequencesComparator"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @AfterClass
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("user.dir", "/home/azureuser/LLm4PrTest/collections_experiments"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(SequencesComparator_ESTest_scaffolding.class.getClassLoader() ,
      "org.apache.commons.collections4.sequence.CommandVisitor",
      "org.apache.commons.io.IOCase",
      "org.apache.commons.collections4.sequence.KeepCommand",
      "org.apache.commons.collections4.Equator",
      "org.apache.commons.collections4.sequence.SequencesComparator$Snake",
      "org.apache.commons.collections4.sequence.InsertCommand",
      "org.apache.commons.collections4.sequence.SequencesComparator",
      "org.apache.commons.collections4.sequence.EditScript",
      "org.apache.commons.collections4.functors.DefaultEquator",
      "org.apache.commons.collections4.sequence.DeleteCommand",
      "org.apache.commons.io.FileSystem",
      "org.apache.commons.io.FilenameUtils",
      "org.apache.commons.collections4.sequence.EditCommand"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(SequencesComparator_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.apache.commons.collections4.sequence.SequencesComparator",
      "org.apache.commons.collections4.sequence.SequencesComparator$Snake",
      "org.apache.commons.collections4.functors.DefaultEquator",
      "org.apache.commons.collections4.sequence.EditScript",
      "org.apache.commons.collections4.sequence.EditCommand",
      "org.apache.commons.collections4.sequence.KeepCommand",
      "org.apache.commons.collections4.sequence.DeleteCommand",
      "org.apache.commons.collections4.sequence.InsertCommand",
      "com.google.common.hash.BloomFilter",
      "com.google.common.hash.BloomFilterStrategies",
      "com.google.common.base.Preconditions",
      "com.google.common.hash.BloomFilterStrategies$LockFreeBitArray",
      "com.google.common.math.LongMath",
      "com.google.common.math.LongMath$1",
      "com.google.common.primitives.IntsMethodsForWeb",
      "com.google.common.primitives.Ints",
      "com.google.common.hash.Striped64$1",
      "com.google.common.hash.Striped64",
      "com.google.common.hash.LongAdder",
      "com.google.common.hash.LongAddables$1",
      "com.google.common.hash.LongAddables",
      "com.google.common.base.Strings",
      "com.google.common.collect.RangeGwtSerializationDependencies",
      "com.google.common.collect.Cut",
      "com.google.common.collect.Cut$BelowAll",
      "com.google.common.collect.Cut$AboveAll",
      "com.google.common.collect.Range",
      "com.google.common.collect.Cut$BelowValue",
      "com.google.common.collect.Cut$AboveValue",
      "com.google.common.primitives.Booleans",
      "com.google.common.hash.Hashing",
      "com.google.common.hash.AbstractHashFunction",
      "com.google.common.hash.Murmur3_128HashFunction",
      "com.google.common.hash.AbstractHasher",
      "com.google.common.hash.AbstractStreamingHasher",
      "com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher",
      "com.google.common.hash.Java8Compatibility",
      "com.google.common.hash.HashCode",
      "com.google.common.hash.HashCode$BytesHashCode",
      "com.google.common.primitives.Longs",
      "com.google.common.base.Converter",
      "com.google.common.base.Converter$FunctionBasedConverter",
      "com.google.common.base.Converter$IdentityConverter",
      "com.google.common.base.Converter$ConverterComposition",
      "org.apache.commons.io.file.SimplePathVisitor",
      "org.apache.commons.io.file.NoopPathVisitor",
      "org.apache.commons.io.filefilter.IOFileFilter",
      "org.apache.commons.io.filefilter.AbstractFileFilter",
      "org.apache.commons.io.filefilter.SuffixFileFilter",
      "org.apache.commons.io.filefilter.NameFileFilter",
      "org.apache.commons.io.file.CountingPathVisitor",
      "org.apache.commons.io.filefilter.DelegateFileFilter",
      "org.apache.commons.io.filefilter.RegexFileFilter",
      "org.apache.commons.io.filefilter.PathVisitorFileFilter",
      "org.apache.commons.io.filefilter.SymbolicLinkFileFilter",
      "org.apache.commons.io.filefilter.OrFileFilter",
      "org.apache.commons.io.filefilter.NotFileFilter",
      "org.apache.commons.io.file.DeletingPathVisitor",
      "org.apache.commons.io.file.Counters",
      "org.apache.commons.io.file.Counters$AbstractPathCounters",
      "org.apache.commons.io.file.Counters$LongPathCounters",
      "org.apache.commons.io.file.Counters$LongCounter",
      "org.apache.commons.io.file.PathUtils",
      "org.apache.commons.io.filefilter.TrueFileFilter",
      "org.apache.commons.io.file.StandardDeleteOption",
      "org.apache.commons.io.StandardLineSeparator",
      "org.apache.commons.io.IOUtils",
      "org.apache.commons.io.filefilter.AndFileFilter",
      "org.apache.commons.io.filefilter.PrefixFileFilter",
      "org.apache.commons.io.file.Counters$BigIntegerPathCounters",
      "org.apache.commons.io.file.Counters$BigIntegerCounter",
      "org.apache.commons.io.filefilter.SizeFileFilter",
      "org.apache.commons.io.file.AccumulatorPathVisitor",
      "org.apache.commons.io.file.CopyDirectoryVisitor",
      "com.google.common.primitives.UnsignedBytes",
      "com.google.common.collect.Range$1",
      "com.google.common.math.DoubleMath",
      "com.google.common.math.DoubleUtils",
      "com.google.common.math.DoubleMath$1",
      "com.google.common.math.MathPreconditions"
    );
  }
}
