/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 08:39:55 GMT 2025
 */

package org.apache.commons.collections4.sequence;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.sequence.EditScript;
import org.apache.commons.collections4.sequence.SequencesComparator;
import org.apache.commons.io.IOCase;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SequencesComparator_ESTest extends SequencesComparator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      IOCase iOCase0 = IOCase.SENSITIVE;
      Object object0 = new Object();
      vector0.add(object0);
      vector0.add((Object) iOCase0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>(vector0);
      arrayList0.add((Object) null);
      SequencesComparator<Object> sequencesComparator0 = new SequencesComparator<Object>(vector0, arrayList0);
      EditScript<Object> editScript0 = sequencesComparator0.getScript();
      assertEquals(1, editScript0.getModifications());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) stack0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>(stack0);
      arrayList0.add((Object) arrayList0);
      SequencesComparator<Object> sequencesComparator0 = new SequencesComparator<Object>(arrayList0, stack0);
      EditScript<Object> editScript0 = sequencesComparator0.getScript();
      assertEquals(1, editScript0.getModifications());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      IOCase iOCase0 = IOCase.SYSTEM;
      arrayList0.add((Object) arrayList0);
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) iOCase0);
      arrayList0.add((Object) stack0);
      SequencesComparator<Object> sequencesComparator0 = new SequencesComparator<Object>(arrayList0, stack0);
      arrayList0.add((Object) iOCase0);
      EditScript<Object> editScript0 = sequencesComparator0.getScript();
      assertEquals(2, editScript0.getModifications());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Stack<IOCase> stack0 = new Stack<IOCase>();
      IOCase iOCase0 = IOCase.SENSITIVE;
      stack0.add(iOCase0);
      stack0.add(iOCase0);
      SequencesComparator<IOCase> sequencesComparator0 = new SequencesComparator<IOCase>(stack0, stack0, defaultEquator0);
      EditScript<IOCase> editScript0 = sequencesComparator0.getScript();
      assertEquals(0, editScript0.getModifications());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>(vector0);
      arrayList0.add((Object) vector0);
      vector0.add((Object) arrayList0);
      SequencesComparator<Object> sequencesComparator0 = new SequencesComparator<Object>(arrayList0, vector0);
      // Undeclared exception!
      try { 
        sequencesComparator0.getScript();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) stack0);
      SequencesComparator<Object> sequencesComparator0 = new SequencesComparator<Object>(stack0, stack0, (Equator<? super Object>) null);
      // Undeclared exception!
      try { 
        sequencesComparator0.getScript();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.sequence.SequencesComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      SequencesComparator<Object> sequencesComparator0 = new SequencesComparator<Object>(stack0, stack0);
      stack0.add((Object) sequencesComparator0);
      // Undeclared exception!
      try { 
        sequencesComparator0.getScript();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.collections4.sequence.SequencesComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      SequencesComparator<Object> sequencesComparator0 = null;
      try {
        sequencesComparator0 = new SequencesComparator<Object>((List<Object>) null, (List<Object>) null, defaultEquator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.sequence.SequencesComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      IOCase iOCase0 = IOCase.SYSTEM;
      arrayList0.add((Object) null);
      Stack<Object> stack0 = new Stack<Object>();
      Integer integer0 = new Integer(909);
      stack0.add((Object) integer0);
      arrayList0.add((Object) iOCase0);
      SequencesComparator<Object> sequencesComparator0 = new SequencesComparator<Object>(stack0, arrayList0);
      arrayList0.add((Object) iOCase0);
      EditScript<Object> editScript0 = sequencesComparator0.getScript();
      assertEquals(4, editScript0.getModifications());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) stack0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>(stack0);
      stack0.add((Object) arrayList0);
      stack0.add((Object) arrayList0);
      SequencesComparator<Object> sequencesComparator0 = new SequencesComparator<Object>(arrayList0, stack0);
      EditScript<Object> editScript0 = sequencesComparator0.getScript();
      assertEquals(2, editScript0.getModifications());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      IOCase iOCase0 = IOCase.INSENSITIVE;
      arrayList0.add((Object) arrayList0);
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) iOCase0);
      stack0.add((Object) stack0);
      stack0.push(iOCase0);
      Object object0 = new Object();
      stack0.add(object0);
      arrayList0.add((Object) iOCase0);
      SequencesComparator<Object> sequencesComparator0 = new SequencesComparator<Object>(arrayList0, stack0);
      EditScript<Object> editScript0 = sequencesComparator0.getScript();
      assertEquals(4, editScript0.getModifications());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      IOCase iOCase0 = IOCase.SYSTEM;
      arrayList0.add((Object) arrayList0);
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) iOCase0);
      stack0.add((Object) stack0);
      arrayList0.add((Object) iOCase0);
      stack0.add((Object) arrayList0);
      SequencesComparator<Object> sequencesComparator0 = new SequencesComparator<Object>(stack0, arrayList0);
      EditScript<Object> editScript0 = sequencesComparator0.getScript();
      assertEquals(3, editScript0.getModifications());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) arrayList0);
      Stack<Object> stack0 = new Stack<Object>();
      stack0.setSize(1539);
      SequencesComparator<Object> sequencesComparator0 = new SequencesComparator<Object>(stack0, arrayList0);
      // Undeclared exception!
      sequencesComparator0.getScript();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) arrayList0);
      SequencesComparator<Object> sequencesComparator0 = new SequencesComparator<Object>(linkedList0, arrayList0);
      EditScript<Object> editScript0 = sequencesComparator0.getScript();
      assertEquals(1, editScript0.getModifications());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SequencesComparator<IOCase> sequencesComparator0 = null;
      try {
        sequencesComparator0 = new SequencesComparator<IOCase>((List<IOCase>) null, (List<IOCase>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.sequence.SequencesComparator", e);
      }
  }
}
