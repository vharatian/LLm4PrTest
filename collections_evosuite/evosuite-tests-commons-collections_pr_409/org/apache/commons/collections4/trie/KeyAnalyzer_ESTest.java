/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 08:42:04 GMT 2025
 */

package org.apache.commons.collections4.trie;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.collections4.trie.KeyAnalyzer;
import org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class KeyAnalyzer_ESTest extends KeyAnalyzer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = KeyAnalyzer.isValidBitIndex(0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = KeyAnalyzer.isNullBitKey(1371);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = KeyAnalyzer.isEqualBitKey((-2564));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = KeyAnalyzer.isOutOfBoundsIndex((-535));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = new StringKeyAnalyzer();
      int int0 = stringKeyAnalyzer0.compare("org.apache.commons.collections4.trie.KeyAnalyzer", (String) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = new StringKeyAnalyzer();
      int int0 = stringKeyAnalyzer0.compare((String) null, "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = StringKeyAnalyzer.INSTANCE;
      int int0 = stringKeyAnalyzer0.compare("c+gm1OuJj,u$WUDO", "novFfy QYz2!XJ");
      assertEquals((-11), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = KeyAnalyzer.isValidBitIndex(1519);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = KeyAnalyzer.isValidBitIndex((-3));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = KeyAnalyzer.isNullBitKey((-1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = KeyAnalyzer.isNullBitKey((-3));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = KeyAnalyzer.isEqualBitKey((-2));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = KeyAnalyzer.isEqualBitKey(1589);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = KeyAnalyzer.isOutOfBoundsIndex((-3));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = KeyAnalyzer.isOutOfBoundsIndex(3067);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringKeyAnalyzer stringKeyAnalyzer0 = new StringKeyAnalyzer();
      int int0 = stringKeyAnalyzer0.compare((String) null, (String) null);
      assertEquals(0, int0);
  }
}
