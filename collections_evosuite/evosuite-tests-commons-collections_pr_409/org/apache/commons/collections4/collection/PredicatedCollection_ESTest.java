/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 08:15:14 GMT 2025
 */

package org.apache.commons.collections4.collection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.time.chrono.HijrahEra;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Set;
import java.util.TreeSet;
import org.apache.commons.collections4.Bag;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.MultiSet;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.SortedBag;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.bag.CollectionSortedBag;
import org.apache.commons.collections4.bag.HashBag;
import org.apache.commons.collections4.bag.PredicatedBag;
import org.apache.commons.collections4.bag.PredicatedSortedBag;
import org.apache.commons.collections4.bag.SynchronizedBag;
import org.apache.commons.collections4.bag.SynchronizedSortedBag;
import org.apache.commons.collections4.bag.TransformedSortedBag;
import org.apache.commons.collections4.bag.TreeBag;
import org.apache.commons.collections4.collection.PredicatedCollection;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.multiset.HashMultiSet;
import org.apache.commons.collections4.multiset.PredicatedMultiSet;
import org.apache.commons.collections4.multiset.SynchronizedMultiSet;
import org.apache.commons.collections4.multiset.UnmodifiableMultiSet;
import org.apache.commons.io.file.StandardDeleteOption;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PredicatedCollection_ESTest extends PredicatedCollection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      PredicatedCollection<Object> predicatedCollection0 = PredicatedCollection.predicatedCollection((Collection<Object>) treeSet0, (Predicate<? super Object>) predicate0);
      predicatedCollection0.validate((Object) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      PredicatedCollection.Builder<Object> predicatedCollection_Builder0 = new PredicatedCollection.Builder<Object>(uniquePredicate0);
      HashMultiSet<Object> hashMultiSet0 = new HashMultiSet<Object>();
      Set<Object> set0 = hashMultiSet0.uniqueSet();
      Set<Object> set1 = predicatedCollection_Builder0.createPredicatedSet(set0);
      assertEquals(0, set1.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(standardDeleteOption0, comparator0, comparatorPredicate_Criterion0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(comparatorPredicate0, comparatorPredicate0);
      PredicatedCollection.Builder<InstanceofPredicate> predicatedCollection_Builder0 = PredicatedCollection.notNullBuilder();
      HashMultiSet<InstanceofPredicate> hashMultiSet0 = new HashMultiSet<InstanceofPredicate>();
      SynchronizedMultiSet<InstanceofPredicate> synchronizedMultiSet0 = SynchronizedMultiSet.synchronizedMultiSet((MultiSet<InstanceofPredicate>) hashMultiSet0);
      PredicatedMultiSet<InstanceofPredicate> predicatedMultiSet0 = PredicatedMultiSet.predicatedMultiSet((MultiSet<InstanceofPredicate>) synchronizedMultiSet0, (Predicate<? super InstanceofPredicate>) andPredicate0);
      MultiSet<InstanceofPredicate> multiSet0 = predicatedCollection_Builder0.createPredicatedMultiSet((MultiSet<InstanceofPredicate>) predicatedMultiSet0);
      assertNotNull(multiSet0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PredicatedCollection.Builder<Transformer<Object, Object>> predicatedCollection_Builder0 = PredicatedCollection.notNullBuilder();
      LinkedList<Transformer<Object, Object>> linkedList0 = new LinkedList<Transformer<Object, Object>>();
      List<Transformer<Object, Object>> list0 = predicatedCollection_Builder0.createPredicatedList((List<Transformer<Object, Object>>) linkedList0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PredicatedCollection.Builder<HijrahEra> predicatedCollection_Builder0 = PredicatedCollection.notNullBuilder();
      TreeBag<HijrahEra> treeBag0 = new TreeBag<HijrahEra>();
      Factory<HijrahEra> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, HijrahEra> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends HijrahEra>) factory0);
      TransformedSortedBag<HijrahEra> transformedSortedBag0 = TransformedSortedBag.transformedSortedBag((SortedBag<HijrahEra>) treeBag0, (Transformer<? super HijrahEra, ? extends HijrahEra>) transformer0);
      Bag<HijrahEra> bag0 = predicatedCollection_Builder0.createPredicatedBag((Bag<HijrahEra>) transformedSortedBag0);
      assertEquals(0, bag0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(standardDeleteOption0, comparator0, comparatorPredicate_Criterion0);
      PredicatedCollection.Builder<NonePredicate<StandardDeleteOption>> predicatedCollection_Builder0 = PredicatedCollection.notNullBuilder();
      Set<NonePredicate<StandardDeleteOption>> set0 = predicatedCollection_Builder0.createPredicatedSet();
      TreeBag<Object> treeBag0 = new TreeBag<Object>();
      PredicatedBag<Object> predicatedBag0 = PredicatedBag.predicatedBag((Bag<Object>) treeBag0, (Predicate<? super Object>) comparatorPredicate0);
      boolean boolean0 = predicatedBag0.addAll(set0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashSet<NonePredicate<InstanceofPredicate>> hashSet0 = new HashSet<NonePredicate<InstanceofPredicate>>();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      PredicatedCollection<NonePredicate<InstanceofPredicate>> predicatedCollection0 = PredicatedCollection.predicatedCollection((Collection<NonePredicate<InstanceofPredicate>>) hashSet0, (Predicate<? super NonePredicate<InstanceofPredicate>>) predicate0);
      Predicate<InstanceofPredicate>[] predicateArray0 = (Predicate<InstanceofPredicate>[]) Array.newInstance(Predicate.class, 8);
      NonePredicate<InstanceofPredicate> nonePredicate0 = new NonePredicate<InstanceofPredicate>(predicateArray0);
      boolean boolean0 = predicatedCollection0.add(nonePredicate0);
      boolean boolean1 = predicatedCollection0.add(nonePredicate0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TreeBag<InstanceofPredicate> treeBag0 = new TreeBag<InstanceofPredicate>((Comparator<? super InstanceofPredicate>) null);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      PredicatedCollection<InstanceofPredicate> predicatedCollection0 = PredicatedCollection.predicatedCollection((Collection<InstanceofPredicate>) treeBag0, (Predicate<? super InstanceofPredicate>) predicate0);
      Class<Boolean> class0 = Boolean.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        predicatedCollection0.validate(instanceofPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      HashMultiSet<Object> hashMultiSet0 = new HashMultiSet<Object>();
      PredicatedCollection<Object> predicatedCollection0 = PredicatedCollection.predicatedCollection((Collection<Object>) hashMultiSet0, (Predicate<? super Object>) predicate0);
      // Undeclared exception!
      try { 
        predicatedCollection0.validate((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'null' - Predicate 'org.apache.commons.collections4.functors.NotNullPredicate@4' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      priorityQueue0.add(instanceofPredicate0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        PredicatedCollection.predicatedCollection((Collection<Object>) priorityQueue0, (Predicate<? super Object>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayDeque<NonePredicate<InstanceofPredicate>> arrayDeque0 = new ArrayDeque<NonePredicate<InstanceofPredicate>>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) arrayDeque0, (Equator<Object>) defaultEquator0);
      predicateArray0[0] = predicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      predicateArray0[1] = (Predicate<Object>) onePredicate0;
      NonePredicate<InstanceofPredicate> nonePredicate0 = new NonePredicate<InstanceofPredicate>(predicateArray0);
      arrayDeque0.add(nonePredicate0);
      NonePredicate<Object> nonePredicate1 = new NonePredicate<Object>(predicateArray0);
      // Undeclared exception!
      PredicatedCollection.predicatedCollection((Collection<NonePredicate<InstanceofPredicate>>) arrayDeque0, (Predicate<? super NonePredicate<InstanceofPredicate>>) nonePredicate1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        PredicatedCollection.builder((Predicate<? super InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMultiSet<InstanceofPredicate> hashMultiSet0 = new HashMultiSet<InstanceofPredicate>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      PredicatedMultiSet<InstanceofPredicate> predicatedMultiSet0 = PredicatedMultiSet.predicatedMultiSet((MultiSet<InstanceofPredicate>) hashMultiSet0, (Predicate<? super InstanceofPredicate>) predicate0);
      MultiSet<InstanceofPredicate> multiSet0 = UnmodifiableMultiSet.unmodifiableMultiSet((MultiSet<? extends InstanceofPredicate>) predicatedMultiSet0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      PredicatedCollection<InstanceofPredicate> predicatedCollection0 = new PredicatedCollection<InstanceofPredicate>(multiSet0, uniquePredicate0);
      // Undeclared exception!
      try { 
        predicatedCollection0.addAll(hashMultiSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multiset.UnmodifiableMultiSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMultiSet<InstanceofPredicate> hashMultiSet0 = new HashMultiSet<InstanceofPredicate>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      PredicatedCollection<InstanceofPredicate> predicatedCollection0 = new PredicatedCollection<InstanceofPredicate>(hashMultiSet0, uniquePredicate0);
      // Undeclared exception!
      try { 
        predicatedCollection0.addAll((Collection<? extends InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      PredicatedCollection<Object> predicatedCollection0 = PredicatedCollection.predicatedCollection((Collection<Object>) priorityQueue0, (Predicate<? super Object>) predicate0);
      // Undeclared exception!
      try { 
        predicatedCollection0.addAll(priorityQueue0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      TreeBag<InstanceofPredicate> treeBag0 = new TreeBag<InstanceofPredicate>(comparator0);
      PredicatedSortedBag<InstanceofPredicate> predicatedSortedBag0 = PredicatedSortedBag.predicatedSortedBag((SortedBag<InstanceofPredicate>) treeBag0, (Predicate<? super InstanceofPredicate>) uniquePredicate0);
      Class<Boolean> class0 = Boolean.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      predicatedSortedBag0.add(instanceofPredicate0);
      // Undeclared exception!
      try { 
        predicatedSortedBag0.addAll(treeBag0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'org.apache.commons.collections4.functors.InstanceofPredicate@5' - Predicate 'org.apache.commons.collections4.functors.UniquePredicate@1' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      PredicatedCollection<Object> predicatedCollection0 = PredicatedCollection.predicatedCollection((Collection<Object>) linkedList0, (Predicate<? super Object>) predicate0);
      // Undeclared exception!
      try { 
        predicatedCollection0.add(linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMultiSet<Object> hashMultiSet0 = new HashMultiSet<Object>();
      Set<Object> set0 = hashMultiSet0.uniqueSet();
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      PredicatedCollection<Object> predicatedCollection0 = PredicatedCollection.predicatedCollection((Collection<Object>) set0, (Predicate<? super Object>) instanceofPredicate0);
      // Undeclared exception!
      try { 
        predicatedCollection0.add(instanceofPredicate0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMultiSet<InstanceofPredicate> hashMultiSet0 = new HashMultiSet<InstanceofPredicate>();
      MultiSet<Object> multiSet0 = UnmodifiableMultiSet.unmodifiableMultiSet((MultiSet<?>) hashMultiSet0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      PredicatedMultiSet<Object> predicatedMultiSet0 = PredicatedMultiSet.predicatedMultiSet(multiSet0, (Predicate<? super Object>) predicate0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        predicatedMultiSet0.add(object0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multiset.UnmodifiableMultiSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TreeBag<Object> treeBag0 = new TreeBag<Object>();
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>((Predicate<? super Object>[]) null);
      PredicatedSortedBag<Object> predicatedSortedBag0 = PredicatedSortedBag.predicatedSortedBag((SortedBag<Object>) treeBag0, (Predicate<? super Object>) nonePredicate0);
      // Undeclared exception!
      try { 
        predicatedSortedBag0.add(treeBag0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NonePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      TreeBag<Boolean> treeBag0 = new TreeBag<Boolean>(linkedList0);
      CollectionSortedBag<Boolean> collectionSortedBag0 = new CollectionSortedBag<Boolean>(treeBag0);
      SynchronizedSortedBag<Boolean> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<Boolean>) collectionSortedBag0);
      TreeBag<InstanceofPredicate> treeBag1 = new TreeBag<InstanceofPredicate>();
      SynchronizedSortedBag<InstanceofPredicate> synchronizedSortedBag1 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<InstanceofPredicate>) treeBag1);
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) synchronizedSortedBag1);
      PredicatedSortedBag<Boolean> predicatedSortedBag0 = PredicatedSortedBag.predicatedSortedBag((SortedBag<Boolean>) synchronizedSortedBag0, (Predicate<? super Boolean>) predicate0);
      // Undeclared exception!
      try { 
        predicatedSortedBag0.add((Boolean) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashBag<Object> hashBag0 = new HashBag<Object>();
      Object object0 = new Object();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate(object0);
      PredicatedBag<Object> predicatedBag0 = PredicatedBag.predicatedBag((Bag<Object>) hashBag0, (Predicate<? super Object>) predicate0);
      // Undeclared exception!
      try { 
        predicatedBag0.add(hashBag0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object '[]' - Predicate 'org.apache.commons.collections4.functors.EqualPredicate@2' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TreeBag<InstanceofPredicate> treeBag0 = new TreeBag<InstanceofPredicate>();
      SortedBag<InstanceofPredicate> sortedBag0 = CollectionSortedBag.collectionSortedBag((SortedBag<InstanceofPredicate>) treeBag0);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      EqualPredicate<InstanceofPredicate> equalPredicate0 = new EqualPredicate<InstanceofPredicate>(instanceofPredicate0);
      PredicatedSortedBag<InstanceofPredicate> predicatedSortedBag0 = PredicatedSortedBag.predicatedSortedBag(sortedBag0, (Predicate<? super InstanceofPredicate>) equalPredicate0);
      // Undeclared exception!
      try { 
        predicatedSortedBag0.add(instanceofPredicate0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.InstanceofPredicate cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      TreeBag<InstanceofPredicate> treeBag0 = new TreeBag<InstanceofPredicate>(linkedList0);
      SortedBag<InstanceofPredicate> sortedBag0 = CollectionSortedBag.collectionSortedBag((SortedBag<InstanceofPredicate>) treeBag0);
      SynchronizedBag<InstanceofPredicate> synchronizedBag0 = SynchronizedBag.synchronizedBag((Bag<InstanceofPredicate>) sortedBag0);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      DefaultEquator<InstanceofPredicate> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<InstanceofPredicate> equalPredicate0 = new EqualPredicate<InstanceofPredicate>(instanceofPredicate0, defaultEquator0);
      PredicatedCollection<InstanceofPredicate> predicatedCollection0 = new PredicatedCollection<InstanceofPredicate>(synchronizedBag0, equalPredicate0);
      // Undeclared exception!
      try { 
        predicatedCollection0.add(instanceofPredicate0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.InstanceofPredicate cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashSet<Boolean> hashSet0 = new HashSet<Boolean>();
      PredicatedCollection<Boolean> predicatedCollection0 = null;
      try {
        predicatedCollection0 = new PredicatedCollection<Boolean>(hashSet0, (Predicate<? super Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMultiSet<Object> hashMultiSet0 = new HashMultiSet<Object>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Object object0 = new Object();
      Object object1 = new Object();
      hashMultiSet0.add(object1);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(object0);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      PredicatedCollection<Object> predicatedCollection0 = null;
      try {
        predicatedCollection0 = new PredicatedCollection<Object>(hashMultiSet0, predicateArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'java.lang.Object@7cfe05f5' - Predicate 'org.apache.commons.collections4.functors.EqualPredicate@3' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PredicatedCollection.Builder<InstanceofPredicate> predicatedCollection_Builder0 = PredicatedCollection.notNullBuilder();
      PredicatedCollection.Builder<InstanceofPredicate> predicatedCollection_Builder1 = predicatedCollection_Builder0.addAll((Collection<? extends InstanceofPredicate>) null);
      assertSame(predicatedCollection_Builder1, predicatedCollection_Builder0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMultiSet<InstanceofPredicate> hashMultiSet0 = new HashMultiSet<InstanceofPredicate>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      PredicatedCollection<InstanceofPredicate> predicatedCollection0 = new PredicatedCollection<InstanceofPredicate>(hashMultiSet0, uniquePredicate0);
      HashBag<InstanceofPredicate> hashBag0 = new HashBag<InstanceofPredicate>();
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      boolean boolean0 = hashBag0.add(instanceofPredicate0);
      boolean boolean1 = predicatedCollection0.addAll(hashBag0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PredicatedCollection.Builder<NonePredicate<NonePredicate>> predicatedCollection_Builder0 = PredicatedCollection.notNullBuilder();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSet0.add(predicatedCollection_Builder0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      // Undeclared exception!
      try { 
        PredicatedCollection.predicatedCollection((Collection<Object>) linkedHashSet0, (Predicate<? super Object>) predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'org.apache.commons.collections4.collection.PredicatedCollection$Builder@1' - Predicate 'org.apache.commons.collections4.functors.NullPredicate@3' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMultiSet<Closure<InstanceofPredicate>> hashMultiSet0 = new HashMultiSet<Closure<InstanceofPredicate>>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      PredicatedMultiSet<Closure<InstanceofPredicate>> predicatedMultiSet0 = PredicatedMultiSet.predicatedMultiSet((MultiSet<Closure<InstanceofPredicate>>) hashMultiSet0, (Predicate<? super Closure<InstanceofPredicate>>) uniquePredicate0);
      Closure<InstanceofPredicate> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super InstanceofPredicate>>) hashMultiSet0);
      predicatedMultiSet0.add(closure0);
      PredicatedCollection.Builder<Object> predicatedCollection_Builder0 = PredicatedCollection.builder((Predicate<? super Object>) uniquePredicate0);
      PredicatedCollection.Builder<Object> predicatedCollection_Builder1 = predicatedCollection_Builder0.addAll(predicatedMultiSet0);
      assertSame(predicatedCollection_Builder0, predicatedCollection_Builder1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PredicatedCollection.Builder<InstanceofPredicate> predicatedCollection_Builder0 = PredicatedCollection.notNullBuilder();
      Collection<InstanceofPredicate> collection0 = predicatedCollection_Builder0.rejectedElements();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      PredicatedCollection.Builder<Object> predicatedCollection_Builder0 = new PredicatedCollection.Builder<Object>(uniquePredicate0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      Queue<Object> queue0 = predicatedCollection_Builder0.createPredicatedQueue((Queue<Object>) priorityQueue0);
      assertNotNull(queue0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      PredicatedCollection.Builder<Object> predicatedCollection_Builder0 = PredicatedCollection.builder((Predicate<? super Object>) predicate0);
      Bag<Object> bag0 = predicatedCollection_Builder0.createPredicatedBag();
      assertEquals(0, bag0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      PredicatedCollection.Builder<Object> predicatedCollection_Builder0 = new PredicatedCollection.Builder<Object>(uniquePredicate0);
      List<Object> list0 = predicatedCollection_Builder0.createPredicatedList();
      assertTrue(list0.isEmpty());
  }
}
