/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 08:13:02 GMT 2025
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.TransformerUtils;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class TransformerUtils_ESTest extends TransformerUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Transformer<Object, Object> transformer0 = TransformerUtils.nullTransformer();
      Transformer<Predicate<Object>, String> transformer1 = TransformerUtils.stringValueTransformer();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) transformer1);
      Transformer<Object, Predicate<Object>> transformer2 = TransformerUtils.constantTransformer(predicate0);
      Transformer<FactoryTransformer<Object, FactoryTransformer>, Object> transformer3 = TransformerUtils.switchTransformer((Predicate<? super FactoryTransformer<Object, FactoryTransformer>>) predicate0, (Transformer<? super FactoryTransformer<Object, FactoryTransformer>, ?>) transformer0, (Transformer<? super FactoryTransformer<Object, FactoryTransformer>, ?>) transformer2);
      assertNotNull(transformer3);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Transformer<Object, Predicate<Object>>[] transformerArray0 = (Transformer<Object, Predicate<Object>>[]) Array.newInstance(Transformer.class, 0);
      Transformer<Object, Predicate<Object>> transformer0 = TransformerUtils.switchTransformer((Predicate<? super Object>[]) predicateArray0, (Transformer<? super Object, ? extends Predicate<Object>>[]) transformerArray0, (Transformer<? super Object, ? extends Predicate<Object>>) null);
      assertNotNull(transformer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) onePredicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[1] = (Predicate<Object>) allPredicate0;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer<Object, Boolean> invokerTransformer0 = new InvokerTransformer<Object, Boolean>("org.apache.commons.collections4.functors.IfTransformer", classArray0, predicateArray0);
      predicateArray0[2] = predicateArray0[1];
      predicateArray0[3] = (Predicate<Object>) onePredicate0;
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(invokerTransformer0, predicateArray0[1]);
      predicateArray0[4] = (Predicate<Object>) transformedPredicate0;
      Transformer<Object, Boolean>[] transformerArray0 = (Transformer<Object, Boolean>[]) Array.newInstance(Transformer.class, 5);
      transformerArray0[0] = (Transformer<Object, Boolean>) invokerTransformer0;
      transformerArray0[1] = (Transformer<Object, Boolean>) invokerTransformer0;
      transformerArray0[2] = (Transformer<Object, Boolean>) invokerTransformer0;
      transformerArray0[3] = (Transformer<Object, Boolean>) invokerTransformer0;
      transformerArray0[4] = transformerArray0[3];
      Transformer<Class<Boolean>, Object> transformer0 = TransformerUtils.switchTransformer((Predicate<? super Class<Boolean>>[]) predicateArray0, (Transformer<? super Class<Boolean>, ?>[]) transformerArray0);
      assertNotNull(transformer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Predicate<Object>, Transformer<Object, Transformer<Object, Object>>> hashMap0 = new HashMap<Predicate<Object>, Transformer<Object, Transformer<Object, Object>>>();
      Transformer<Object, Transformer<Object, Object>> transformer0 = TransformerUtils.switchTransformer((Map<Predicate<Object>, Transformer<Object, Transformer<Object, Object>>>) hashMap0);
      assertNotNull(transformer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Boolean>[] classArray0 = (Class<Boolean>[]) Array.newInstance(Class.class, 3);
      Transformer<Class<Boolean>, Boolean> transformer0 = TransformerUtils.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      assertNotNull(transformer0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Transformer<Class<Boolean>, Predicate<Object>> transformer0 = TransformerUtils.invokerTransformer("FM/a<Y}UO#");
      assertNotNull(transformer0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Transformer<Class<? extends Boolean>, Boolean> transformer0 = TransformerUtils.instantiateTransformer((Class<?>[]) null, (Object[]) null);
      assertNotNull(transformer0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Transformer<Object, Boolean> transformer0 = TransformerUtils.nullTransformer();
      Transformer<Object, Predicate<Object>> transformer1 = InvokerTransformer.invokerTransformer("\"pz L=");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) transformer0, comparator0);
      ConstantTransformer<Object, Predicate<Object>> constantTransformer0 = new ConstantTransformer<Object, Predicate<Object>>(predicate0);
      Transformer<Object, Predicate<Object>> transformer2 = TransformerUtils.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends Predicate<Object>>) transformer1, (Transformer<? super Object, ? extends Predicate<Object>>) constantTransformer0);
      assertFalse(transformer2.equals((Object)transformer1));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Transformer<Boolean, Boolean> transformer0 = TransformerUtils.exceptionTransformer();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      NullIsFalsePredicate<Boolean> nullIsFalsePredicate0 = new NullIsFalsePredicate<Boolean>(predicateArray0[0]);
      TransformedPredicate<Boolean> transformedPredicate0 = new TransformedPredicate<Boolean>(transformer0, nullIsFalsePredicate0);
      Transformer<Boolean, Boolean> transformer1 = TransformerUtils.ifTransformer((Predicate<? super Boolean>) transformedPredicate0, (Transformer<? super Boolean, ? extends Boolean>) transformer0);
      assertFalse(transformer1.equals((Object)transformer0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Transformer<Boolean, Boolean>[] transformerArray0 = (Transformer<Boolean, Boolean>[]) Array.newInstance(Transformer.class, 0);
      Transformer<Boolean, Boolean> transformer0 = TransformerUtils.chainedTransformer((Transformer<? super Boolean, ? extends Boolean>[]) transformerArray0);
      assertNotNull(transformer0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedHashSet<Transformer<Boolean, Boolean>> linkedHashSet0 = new LinkedHashSet<Transformer<Boolean, Boolean>>();
      Transformer<Boolean, Boolean> transformer0 = TransformerUtils.chainedTransformer((Collection<? extends Transformer<? super Boolean, ? extends Boolean>>) linkedHashSet0);
      assertFalse(linkedHashSet0.contains(transformer0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Transformer<Predicate<Object>, String> transformer0 = TransformerUtils.stringValueTransformer();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) transformer0);
      Transformer<Object, Boolean> transformer1 = TransformerUtils.asTransformer((Predicate<? super Object>) predicate0);
      assertNotNull(transformer1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Factory<Class<Boolean>> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Predicate<Object>, Class<Boolean>> transformer0 = TransformerUtils.asTransformer((Factory<? extends Class<Boolean>>) factory0);
      assertNotNull(transformer0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Transformer<Class<Object>, Class<Object>> transformer0 = TransformerUtils.asTransformer((Closure<? super Class<Object>>) closure0);
      assertNotNull(transformer0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Transformer<Object, Boolean>[] transformerArray0 = (Transformer<Object, Boolean>[]) Array.newInstance(Transformer.class, 0);
      ConstantTransformer<Object, Boolean> constantTransformer0 = new ConstantTransformer<Object, Boolean>((Boolean) null);
      // Undeclared exception!
      try { 
        TransformerUtils.switchTransformer((Predicate<? super Boolean>[]) predicateArray0, (Transformer<? super Boolean, ? extends Boolean>[]) transformerArray0, (Transformer<? super Boolean, ? extends Boolean>) constantTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicates[0]
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Transformer<Object, Boolean>[] transformerArray0 = (Transformer<Object, Boolean>[]) Array.newInstance(Transformer.class, 0);
      ConstantTransformer<Object, Boolean> constantTransformer0 = new ConstantTransformer<Object, Boolean>((Boolean) null);
      SwitchTransformer<Object, Boolean> switchTransformer0 = new SwitchTransformer<Object, Boolean>(predicateArray0, transformerArray0, constantTransformer0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(switchTransformer0);
      predicateArray0[0] = (Predicate<Object>) transformerPredicate0;
      // Undeclared exception!
      try { 
        TransformerUtils.switchTransformer((Predicate<? super Boolean>[]) predicateArray0, (Transformer<? super Boolean, ? extends Boolean>[]) transformerArray0, (Transformer<? super Boolean, ? extends Boolean>) constantTransformer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate and transformer arrays must be the same size
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Transformer<InstanceofPredicate, Boolean>[] transformerArray0 = (Transformer<InstanceofPredicate, Boolean>[]) Array.newInstance(Transformer.class, 0);
      // Undeclared exception!
      try { 
        TransformerUtils.switchTransformer((Predicate<? super InstanceofPredicate>[]) null, (Transformer<? super InstanceofPredicate, ? extends Boolean>[]) transformerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicates
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        TransformerUtils.switchMapTransformer((Map<Predicate<Object>, Transformer<Predicate<Object>, Boolean>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // objectsAndTransformers
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        TransformerUtils.invokerTransformer((String) null, (Class<?>[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // methodName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        TransformerUtils.chainedTransformer((Transformer<? super Boolean, ? extends Boolean>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformers
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Transformer<Transformer<Object, Class<Boolean>>, Transformer<Object, Class<Boolean>>> transformer0 = TransformerUtils.nopTransformer();
      HashMap<Object, Transformer<Object, Boolean>> hashMap0 = new HashMap<Object, Transformer<Object, Boolean>>();
      hashMap0.put(transformer0, (Transformer<Object, Boolean>) null);
      // Undeclared exception!
      try { 
        TransformerUtils.switchMapTransformer((Map<Object, Transformer<Object, Boolean>>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformers[0]
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<Object, Transformer<Object, Boolean>> hashMap0 = new HashMap<Object, Transformer<Object, Boolean>>();
      Transformer<Object, Boolean> transformer0 = TransformerUtils.switchMapTransformer((Map<Object, Transformer<Object, Boolean>>) hashMap0);
      assertNotNull(transformer0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        TransformerUtils.invokerTransformer("objectsAndTransformers", (Class<?>[]) null, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter types must match the arguments
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      // Undeclared exception!
      try { 
        TransformerUtils.ifTransformer((Predicate<? super Predicate<Object>>) predicate0, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // trueTransformer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Transformer<Class<Object>, Object> transformer0 = TransformerUtils.mapTransformer((Map<? super Class<Object>, ?>) hashMap0);
      assertNotNull(transformer0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        TransformerUtils.invokerTransformer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // methodName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Transformer<Boolean, Boolean> transformer0 = TransformerUtils.nullTransformer();
      // Undeclared exception!
      try { 
        TransformerUtils.switchTransformer((Predicate<? super Boolean>) null, (Transformer<? super Boolean, ? extends Boolean>) transformer0, (Transformer<? super Boolean, ? extends Boolean>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicates[0]
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        TransformerUtils.asTransformer((Factory<? extends Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // factory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Transformer<Boolean, Boolean> transformer0 = TransformerUtils.cloneTransformer();
      // Undeclared exception!
      try { 
        TransformerUtils.switchTransformer((Predicate<? super Boolean>[]) predicateArray0, (Transformer<? super Boolean, ?>[]) null, (Transformer<? super Boolean, ?>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformers
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        TransformerUtils.asTransformer((Closure<? super FactoryTransformer<Class<Object>, Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // closure
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Transformer<Class<? extends Boolean>, Boolean> transformer0 = TransformerUtils.instantiateTransformer();
      assertNotNull(transformer0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Transformer<Object, Object>[] transformerArray0 = (Transformer<Object, Object>[]) Array.newInstance(Transformer.class, 3);
      // Undeclared exception!
      try { 
        TransformerUtils.chainedTransformer((Transformer<? super Object, ?>[]) transformerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformers[0]
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
      try { 
        TransformerUtils.instantiateTransformer((Class<?>[]) classArray0, (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter types must match the arguments
         //
         verifyException("org.apache.commons.collections4.functors.InstantiateTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        TransformerUtils.chainedTransformer((Collection<? extends Transformer<? super Boolean, ? extends Boolean>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformers
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        TransformerUtils.switchTransformer((Map<Predicate<Predicate<Boolean>>, Transformer<Predicate<Boolean>, Transformer<Predicate<Boolean>, Transformer>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        TransformerUtils.asTransformer((Predicate<? super Transformer<Object, Boolean>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.functors.PredicateTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Predicate<Boolean>[] predicateArray0 = (Predicate<Boolean>[]) Array.newInstance(Predicate.class, 0);
      Transformer<Boolean, Boolean>[] transformerArray0 = (Transformer<Boolean, Boolean>[]) Array.newInstance(Transformer.class, 1);
      // Undeclared exception!
      try { 
        TransformerUtils.switchTransformer((Predicate<? super Boolean>[]) predicateArray0, (Transformer<? super Boolean, ?>[]) transformerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformers[0]
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        TransformerUtils.ifTransformer((Predicate<? super FactoryTransformer<FactoryTransformer, Predicate>>) predicate0, (Transformer<? super FactoryTransformer<FactoryTransformer, Predicate>, ? extends Boolean>) null, (Transformer<? super FactoryTransformer<FactoryTransformer, Predicate>, ? extends Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // trueTransformer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Transformer<Boolean, Boolean> transformer0 = TransformerUtils.nopTransformer();
      Predicate<Boolean>[] predicateArray0 = (Predicate<Boolean>[]) Array.newInstance(Predicate.class, 0);
      Transformer<Boolean, Boolean>[] transformerArray0 = (Transformer<Boolean, Boolean>[]) Array.newInstance(Transformer.class, 1);
      transformerArray0[0] = transformer0;
      // Undeclared exception!
      try { 
        TransformerUtils.switchTransformer((Predicate<? super Boolean>[]) predicateArray0, (Transformer<? super Boolean, ?>[]) transformerArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate and transformer arrays must be the same size
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }
}
