/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 18:43:09 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import org.apache.commons.collections4.bloomfilter.BitSetBloomFilter;
import org.apache.commons.collections4.bloomfilter.BloomFilter;
import org.apache.commons.collections4.bloomfilter.CountingBloomFilter;
import org.apache.commons.collections4.bloomfilter.HasherBloomFilter;
import org.apache.commons.collections4.bloomfilter.hasher.DynamicHasher;
import org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentity;
import org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentityImpl;
import org.apache.commons.collections4.bloomfilter.hasher.Hasher;
import org.apache.commons.collections4.bloomfilter.hasher.Shape;
import org.apache.commons.collections4.bloomfilter.hasher.StaticHasher;
import org.apache.commons.collections4.bloomfilter.hasher.function.MD5Cyclic;
import org.apache.commons.collections4.bloomfilter.hasher.function.Murmur128x86Cyclic;
import org.apache.commons.collections4.bloomfilter.hasher.function.Murmur32x86Iterative;
import org.apache.commons.collections4.bloomfilter.hasher.function.ObjectsHashIterative;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AbstractBloomFilter_ESTest extends AbstractBloomFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 429, 429);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      linkedList0.add((byte[]) null);
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(dynamicHasher0, shape0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      int int0 = hasherBloomFilter0.xorCardinality(bitSetBloomFilter0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 2725, 2725);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      linkedList0.add((byte[]) null);
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(dynamicHasher0, shape0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(5);
      hashMap0.put(integer0, integer0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      int int0 = bitSetBloomFilter0.orCardinality(countingBloomFilter0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 30, 30);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      linkedList0.add((byte[]) null);
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      int int0 = bitSetBloomFilter0.orCardinality(hasherBloomFilter0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 8, 8);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[3];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((byte)4);
      hashMap0.put(integer0, integer0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      boolean boolean0 = hasherBloomFilter0.contains((BloomFilter) countingBloomFilter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) mD5Cyclic0, 64, 611);
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      StaticHasher staticHasher0 = new StaticHasher(iterator0, shape0);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(staticHasher0, shape0);
      bitSetBloomFilter0.verifyShape(shape0);
      assertEquals(77, shape0.getNumberOfBytes());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) mD5Cyclic0, 64, 611);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(staticHasher0, shape0);
      bitSetBloomFilter0.verifyShape(countingBloomFilter0);
      assertEquals("{}", bitSetBloomFilter0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) mD5Cyclic0, 64, 611);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(staticHasher0, shape0);
      hasherBloomFilter0.verifyHasher(staticHasher0);
      assertEquals(0, hasherBloomFilter0.cardinality());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 1698, 1698);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      hasherBloomFilter0.merge((BloomFilter) hasherBloomFilter0);
      assertEquals(0, hasherBloomFilter0.cardinality());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, (Shape) null);
      Shape shape0 = countingBloomFilter0.getShape();
      assertNull(shape0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 1671, 1671);
      StaticHasher staticHasher0 = new StaticHasher(iterator0, shape0);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(staticHasher0, shape0);
      Shape shape1 = bitSetBloomFilter0.getShape();
      assertEquals(1, shape1.getNumberOfHashFunctions());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 1736, 1736);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[2];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      StaticHasher staticHasher0 = hasherBloomFilter0.getHasher();
      assertEquals(1, staticHasher0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 1736, 1736);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[2];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(dynamicHasher0, shape0);
      long[] longArray0 = bitSetBloomFilter0.getBits();
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 1671, 1671);
      StaticHasher staticHasher0 = new StaticHasher(iterator0, shape0);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(staticHasher0, shape0);
      long[] longArray0 = bitSetBloomFilter0.getBits();
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.ITERATIVE;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("Hasher (%s) is not the hasher for shape (%s)", "Hasher (%s) is not the hasher for shape (%s)", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 2862933555777941757L);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 1, 64);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      StaticHasher staticHasher0 = new StaticHasher(iterator0, shape0);
      boolean boolean0 = bitSetBloomFilter0.contains((Hasher) staticHasher0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.ITERATIVE;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentity$Signedness", "qM$=tKTxZEs", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, (-5L));
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 64, 64);
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      StaticHasher staticHasher0 = new StaticHasher(iterator0, shape0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(staticHasher0, shape0);
      boolean boolean0 = hasherBloomFilter0.contains((Hasher) staticHasher0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter((Shape) null);
      int int0 = bitSetBloomFilter0.cardinality();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 461845907, 461845907);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[0];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(dynamicHasher0, shape0);
      int int0 = bitSetBloomFilter0.cardinality();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 2147483646, 2147483646);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      linkedList0.add((byte[]) null);
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      // Undeclared exception!
      hasherBloomFilter0.xorCardinality(hasherBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.xorCardinality(hasherBloomFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 8, 8);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      HasherBloomFilter hasherBloomFilter1 = new HasherBloomFilter(shape0);
      // Undeclared exception!
      try { 
        hasherBloomFilter1.xorCardinality(hasherBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape null is not the same as Shape[ Objects32-SIGNED-ITERATIVE n=8 m=8 k=1 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.verifyShape((Shape) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 882, 882);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      Shape shape1 = new Shape((HashFunctionIdentity) objectsHashIterative0, 279, 279);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.verifyShape(shape1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape Shape[ Objects32-SIGNED-ITERATIVE n=279 m=279 k=1 ] is not the same as Shape[ Objects32-SIGNED-ITERATIVE n=882 m=882 k=1 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.verifyShape(countingBloomFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 1842, 1842);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      Shape shape1 = new Shape((HashFunctionIdentity) objectsHashIterative0, 1842, 1390208809, 1842);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape1);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.verifyShape(bitSetBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape Shape[ Objects32-SIGNED-ITERATIVE n=1842 m=1390208809 k=1842 ] is not the same as Shape[ Objects32-SIGNED-ITERATIVE n=1842 m=1842 k=1 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      StaticHasher staticHasher0 = hasherBloomFilter0.getHasher();
      // Undeclared exception!
      try { 
        hasherBloomFilter0.verifyHasher(staticHasher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 1713, 1713);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur32x86Iterative0, linkedList0);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.verifyHasher(dynamicHasher0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hasher (Murmur3_x86_32-SIGNED-ITERATIVE) is not the hasher for shape (Shape[ Objects32-SIGNED-ITERATIVE n=1713 m=1713 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 461845907, 461845907);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[0];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(dynamicHasher0, shape0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      hasherBloomFilter0.merge((Hasher) dynamicHasher0);
      // Undeclared exception!
      bitSetBloomFilter0.orCardinality(hasherBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        bitSetBloomFilter0.orCardinality(bitSetBloomFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      linkedList0.add((byte[]) null);
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 11, 461845907, 1368);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      hasherBloomFilter0.merge((Hasher) dynamicHasher0);
      assertEquals(23, hasherBloomFilter0.cardinality());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.merge((Hasher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 895, 895);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(mD5Cyclic0, linkedList0);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.merge((Hasher) dynamicHasher0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hasher (MD5-SIGNED-CYCLIC) is not the hasher for shape (Shape[ Objects32-SIGNED-ITERATIVE n=895 m=895 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.merge((BloomFilter) hasherBloomFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 1741, 1741);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(shape0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        countingBloomFilter0.merge((BloomFilter) hasherBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape null is not the same as Shape[ Objects32-SIGNED-ITERATIVE n=1741 m=1741 k=1 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.isFull();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      StaticHasher staticHasher0 = hasherBloomFilter0.getHasher();
      // Undeclared exception!
      try { 
        hasherBloomFilter0.contains((Hasher) staticHasher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 461845907, 461845907);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      linkedList0.add((byte[]) null);
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(dynamicHasher0, shape0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      // Undeclared exception!
      hasherBloomFilter0.contains((BloomFilter) bitSetBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.contains((BloomFilter) hasherBloomFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 240, 240);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.contains((BloomFilter) countingBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape null is not the same as Shape[ Objects32-SIGNED-ITERATIVE n=240 m=240 k=1 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      linkedList0.add((byte[]) null);
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 11, 461845907, 1368);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      // Undeclared exception!
      hasherBloomFilter0.andCardinality(countingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.andCardinality(countingBloomFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 104668, 104668);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        bitSetBloomFilter0.andCardinality(hasherBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape null is not the same as Shape[ Objects32-SIGNED-ITERATIVE n=104668 m=104668 k=1 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 1736, 1736);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[4];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(dynamicHasher0, shape0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      int int0 = hasherBloomFilter0.andCardinality(bitSetBloomFilter0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 1736, 1736);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(dynamicHasher0, shape0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      int int0 = hasherBloomFilter0.andCardinality(bitSetBloomFilter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[3];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 12, 13, (int) (byte)28);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      boolean boolean0 = hasherBloomFilter0.isFull();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) mD5Cyclic0, 64, 64);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      boolean boolean0 = countingBloomFilter0.isFull();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 1736, 1736);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[2];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(dynamicHasher0, shape0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      int int0 = bitSetBloomFilter0.xorCardinality(hasherBloomFilter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 1736, 1736);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[18];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(dynamicHasher0, shape0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(shape0);
      int int0 = bitSetBloomFilter0.xorCardinality(countingBloomFilter0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 1736, 1736);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[2];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(dynamicHasher0, shape0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      int int0 = bitSetBloomFilter0.orCardinality(hasherBloomFilter0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 1736, 1736);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(dynamicHasher0, shape0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      int int0 = bitSetBloomFilter0.orCardinality(hasherBloomFilter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 1736, 1736);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[2];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(dynamicHasher0, shape0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      boolean boolean0 = hasherBloomFilter0.contains((BloomFilter) bitSetBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 897, 897);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.contains((Hasher) dynamicHasher0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hasher (Murmur3_x64_128-SIGNED-CYCLIC) is not the hasher for shape (Shape[ Objects32-SIGNED-ITERATIVE n=897 m=897 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 24, 24);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      Shape shape1 = new Shape((HashFunctionIdentity) objectsHashIterative0, 24, 24, 24);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(shape1);
      // Undeclared exception!
      try { 
        bitSetBloomFilter0.orCardinality(countingBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape Shape[ Objects32-SIGNED-ITERATIVE n=24 m=24 k=24 ] is not the same as Shape[ Objects32-SIGNED-ITERATIVE n=24 m=24 k=1 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }
}
