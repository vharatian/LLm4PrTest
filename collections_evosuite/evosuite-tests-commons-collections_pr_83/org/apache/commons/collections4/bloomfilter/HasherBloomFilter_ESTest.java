/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 18:49:33 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.apache.commons.collections4.bloomfilter.BloomFilter;
import org.apache.commons.collections4.bloomfilter.CountingBloomFilter;
import org.apache.commons.collections4.bloomfilter.HasherBloomFilter;
import org.apache.commons.collections4.bloomfilter.hasher.DynamicHasher;
import org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentity;
import org.apache.commons.collections4.bloomfilter.hasher.Hasher;
import org.apache.commons.collections4.bloomfilter.hasher.Shape;
import org.apache.commons.collections4.bloomfilter.hasher.StaticHasher;
import org.apache.commons.collections4.bloomfilter.hasher.function.MD5Cyclic;
import org.apache.commons.collections4.bloomfilter.hasher.function.Murmur128x86Cyclic;
import org.apache.commons.collections4.bloomfilter.hasher.function.Murmur32x86Iterative;
import org.apache.commons.collections4.bloomfilter.hasher.function.ObjectsHashIterative;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class HasherBloomFilter_ESTest extends HasherBloomFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 2161, 2161);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[1];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur32x86Iterative0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(dynamicHasher0, shape0);
      int int0 = hasherBloomFilter0.orCardinality(countingBloomFilter0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[8];
      linkedList0.add(byteArray0);
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, (int) (byte)15, (int) (byte)15, 33);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      long[] longArray0 = hasherBloomFilter0.getBits();
      assertArrayEquals(new long[] {28087L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 2161, 2161);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[8];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur32x86Iterative0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      StaticHasher staticHasher0 = hasherBloomFilter0.getHasher();
      assertFalse(staticHasher0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 2161, 2161);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      long[] longArray0 = hasherBloomFilter0.getBits();
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 2161, 2161);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[8];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur32x86Iterative0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      int int0 = hasherBloomFilter0.cardinality();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur32x86Iterative0, linkedList0);
      byte[] byteArray0 = HashFunctionIdentity.prepareSignatureBuffer(murmur32x86Iterative0);
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher1 = new DynamicHasher(murmur32x86Iterative0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 8, 1572, 1948);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      // Undeclared exception!
      hasherBloomFilter0.merge((Hasher) dynamicHasher1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      StaticHasher staticHasher0 = hasherBloomFilter0.getHasher();
      // Undeclared exception!
      try { 
        hasherBloomFilter0.merge((Hasher) staticHasher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 104753, 104753);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(mD5Cyclic0, linkedList0);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.merge((Hasher) dynamicHasher0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hasher (MD5-SIGNED-CYCLIC) is not the hasher for shape (Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=104753 m=104753 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.merge((BloomFilter) hasherBloomFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 12, 12);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur32x86Iterative0, linkedList0);
      Shape shape1 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 12, 12, 12);
      HasherBloomFilter hasherBloomFilter1 = new HasherBloomFilter(dynamicHasher0, shape1);
      // Undeclared exception!
      try { 
        hasherBloomFilter1.merge((BloomFilter) hasherBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // shape (Shape[ Murmur3_x86_32-SIGNED-ITERATIVE n=12 m=12 k=12 ]) does not match internal shape (Shape[ Murmur3_x86_32-SIGNED-ITERATIVE n=12 m=12 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.StaticHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[0];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur32x86Iterative0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 12, 4853, 4853);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      // Undeclared exception!
      hasherBloomFilter0.contains((Hasher) dynamicHasher0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      StaticHasher staticHasher0 = hasherBloomFilter0.getHasher();
      // Undeclared exception!
      try { 
        hasherBloomFilter0.contains((Hasher) staticHasher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      linkedList0.add((byte[]) null);
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      DynamicHasher dynamicHasher0 = new DynamicHasher(mD5Cyclic0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) mD5Cyclic0, 17, 17, 17);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.contains((Hasher) dynamicHasher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.security.MessageDigest", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 2147483629, 2147483629);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.contains((Hasher) dynamicHasher0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hasher (Objects32-SIGNED-ITERATIVE) is not the hasher for shape (Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=2147483629 m=2147483629 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[18];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur32x86Iterative0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 20, 461845907, 461845907);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = null;
      try {
        hasherBloomFilter0 = new HasherBloomFilter((Hasher) null, (Shape) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      linkedList0.add((byte[]) null);
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      DynamicHasher dynamicHasher0 = new DynamicHasher(mD5Cyclic0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) mD5Cyclic0, 17, 17, 17);
      HasherBloomFilter hasherBloomFilter0 = null;
      try {
        hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.security.MessageDigest", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 104753, 104753);
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(mD5Cyclic0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = null;
      try {
        hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hasher (MD5-SIGNED-CYCLIC) is not the hasher for shape (Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=104753 m=104753 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur32x86Iterative0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 8, 1572, 1948);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      hasherBloomFilter0.merge((Hasher) dynamicHasher0);
      assertEquals(0, hasherBloomFilter0.cardinality());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[8];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur32x86Iterative0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 12, 1572, 12);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      boolean boolean0 = hasherBloomFilter0.contains((Hasher) dynamicHasher0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 2161, 2161);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur32x86Iterative0, linkedList0);
      boolean boolean0 = hasherBloomFilter0.contains((Hasher) dynamicHasher0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 84, 84);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      StaticHasher staticHasher0 = hasherBloomFilter0.getHasher();
      HasherBloomFilter hasherBloomFilter1 = new HasherBloomFilter(staticHasher0, shape0);
      assertEquals(0, hasherBloomFilter1.cardinality());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 2161, 2161);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      int int0 = hasherBloomFilter0.cardinality();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 12, 12);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      hasherBloomFilter0.merge((BloomFilter) hasherBloomFilter0);
      assertEquals(0, hasherBloomFilter0.cardinality());
  }
}
