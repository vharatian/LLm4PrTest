/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 19:00:59 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter.hasher;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.PrimitiveIterator;
import org.apache.commons.collections4.bloomfilter.hasher.DynamicHasher;
import org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentity;
import org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentityImpl;
import org.apache.commons.collections4.bloomfilter.hasher.Hasher;
import org.apache.commons.collections4.bloomfilter.hasher.Shape;
import org.apache.commons.collections4.bloomfilter.hasher.StaticHasher;
import org.apache.commons.collections4.bloomfilter.hasher.function.MD5Cyclic;
import org.apache.commons.collections4.bloomfilter.hasher.function.Murmur128x86Cyclic;
import org.apache.commons.collections4.bloomfilter.hasher.function.Murmur32x86Iterative;
import org.apache.commons.collections4.bloomfilter.hasher.function.ObjectsHashIterative;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class StaticHasher_ESTest extends StaticHasher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[0];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 1757, 1757);
      StaticHasher staticHasher0 = new StaticHasher(dynamicHasher0, shape0);
      assertFalse(staticHasher0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[5];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 1, 28);
      StaticHasher staticHasher0 = new StaticHasher(dynamicHasher0, shape0);
      PrimitiveIterator.OfInt primitiveIterator_OfInt0 = staticHasher0.getBits(shape0);
      Shape shape1 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 10, 15);
      StaticHasher staticHasher1 = null;
      try {
        staticHasher1 = new StaticHasher(primitiveIterator_OfInt0, shape1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bit index (17) is too big for Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=10 m=15 k=1 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.StaticHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[1];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 1757, 1757);
      StaticHasher staticHasher0 = new StaticHasher(dynamicHasher0, shape0);
      int int0 = staticHasher0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      StaticHasher staticHasher0 = new StaticHasher(iterator0, (Shape) null);
      Shape shape0 = staticHasher0.getShape();
      assertNull(shape0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("", "", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 0L);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 536, 536);
      StaticHasher staticHasher0 = new StaticHasher(iterator0, shape0);
      HashFunctionIdentity hashFunctionIdentity0 = staticHasher0.getHashFunctionIdentity();
      assertEquals(0L, hashFunctionIdentity0.getSignature());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 1746, 1746);
      StaticHasher staticHasher0 = new StaticHasher(dynamicHasher0, shape0);
      HashFunctionIdentity hashFunctionIdentity0 = staticHasher0.getHashFunctionIdentity();
      assertSame(objectsHashIterative0, hashFunctionIdentity0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 28, 28);
      StaticHasher staticHasher0 = new StaticHasher(dynamicHasher0, shape0);
      PrimitiveIterator.OfInt primitiveIterator_OfInt0 = staticHasher0.getBits(shape0);
      StaticHasher staticHasher1 = new StaticHasher(primitiveIterator_OfInt0, (Shape) null);
      // Undeclared exception!
      try { 
        staticHasher1.getHashFunctionIdentity();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.StaticHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 1746, 1746);
      StaticHasher staticHasher0 = new StaticHasher(dynamicHasher0, shape0);
      PrimitiveIterator.OfInt primitiveIterator_OfInt0 = staticHasher0.getBits(shape0);
      StaticHasher staticHasher1 = new StaticHasher(primitiveIterator_OfInt0, (Shape) null);
      // Undeclared exception!
      try { 
        staticHasher1.getBits((Shape) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.StaticHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StaticHasher staticHasher0 = null;
      try {
        staticHasher0 = new StaticHasher((StaticHasher) null, (Shape) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.StaticHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[5];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 204, 306454544);
      StaticHasher staticHasher0 = new StaticHasher(dynamicHasher0, shape0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      linkedList0.add((byte[]) null);
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 1453, 1453);
      StaticHasher staticHasher0 = null;
      try {
        staticHasher0 = new StaticHasher(dynamicHasher0, shape0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      linkedList0.add((byte[]) null);
      DynamicHasher dynamicHasher0 = new DynamicHasher(mD5Cyclic0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) mD5Cyclic0, 204, 204);
      StaticHasher staticHasher0 = null;
      try {
        staticHasher0 = new StaticHasher(dynamicHasher0, shape0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.security.MessageDigest", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 23, 23, 23);
      StaticHasher staticHasher0 = new StaticHasher(dynamicHasher0, shape0);
      StaticHasher staticHasher1 = null;
      try {
        staticHasher1 = new StaticHasher((Hasher) staticHasher0, (Shape) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // shape (null) does not match internal shape (Shape[ Objects32-SIGNED-ITERATIVE n=23 m=23 k=23 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.StaticHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StaticHasher staticHasher0 = null;
      try {
        staticHasher0 = new StaticHasher((Iterator<Integer>) null, (Shape) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.StaticHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      linkedList0.add((byte[]) null);
      DynamicHasher dynamicHasher0 = new DynamicHasher(mD5Cyclic0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) mD5Cyclic0, 25, 25);
      PrimitiveIterator.OfInt primitiveIterator_OfInt0 = dynamicHasher0.getBits(shape0);
      StaticHasher staticHasher0 = null;
      try {
        staticHasher0 = new StaticHasher(primitiveIterator_OfInt0, shape0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.security.MessageDigest", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 4, 2235);
      StaticHasher staticHasher0 = new StaticHasher(iterator0, shape0);
      Shape shape1 = staticHasher0.getShape();
      assertSame(shape1, shape0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 69, 69);
      StaticHasher staticHasher0 = new StaticHasher(dynamicHasher0, shape0);
      // Undeclared exception!
      try { 
        staticHasher0.getBits((Shape) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // shape (null) does not match internal shape (Shape[ Objects32-SIGNED-ITERATIVE n=69 m=69 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.StaticHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 1746, 1746);
      StaticHasher staticHasher0 = new StaticHasher(dynamicHasher0, shape0);
      boolean boolean0 = staticHasher0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[5];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 1, 28);
      StaticHasher staticHasher0 = new StaticHasher(dynamicHasher0, shape0);
      boolean boolean0 = staticHasher0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[5];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 1, 28);
      StaticHasher staticHasher0 = new StaticHasher(dynamicHasher0, shape0);
      PrimitiveIterator.OfInt primitiveIterator_OfInt0 = staticHasher0.getBits(shape0);
      Shape shape1 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 28, 27);
      StaticHasher staticHasher1 = null;
      try {
        staticHasher1 = new StaticHasher(primitiveIterator_OfInt0, shape1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bit index (27) is too big for Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=28 m=27 k=1 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.StaticHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 1, 28);
      StaticHasher staticHasher0 = new StaticHasher(dynamicHasher0, shape0);
      StaticHasher staticHasher1 = new StaticHasher(staticHasher0, shape0);
      assertEquals(0, staticHasher1.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 1757, 1757);
      StaticHasher staticHasher0 = new StaticHasher(dynamicHasher0, shape0);
      int int0 = staticHasher0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 28, 28);
      StaticHasher staticHasher0 = new StaticHasher(dynamicHasher0, shape0);
      HashFunctionIdentity hashFunctionIdentity0 = staticHasher0.getHashFunctionIdentity();
      assertEquals("Murmur3_x64_128", hashFunctionIdentity0.getName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur32x86Iterative0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 2009, 2009);
      StaticHasher staticHasher0 = new StaticHasher(dynamicHasher0, shape0);
      Shape shape1 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 2, 2009, 2009);
      StaticHasher staticHasher1 = null;
      try {
        staticHasher1 = new StaticHasher(staticHasher0, shape1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hasher shape (Shape[ Murmur3_x86_32-SIGNED-ITERATIVE n=2009 m=2009 k=1 ]) is not the same as shape (Shape[ Murmur3_x86_32-SIGNED-ITERATIVE n=2 m=2009 k=2009 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.StaticHasher", e);
      }
  }
}
