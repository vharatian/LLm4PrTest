/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 18:58:52 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter.hasher;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentity;
import org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentityImpl;
import org.apache.commons.collections4.bloomfilter.hasher.Shape;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Shape_ESTest extends Shape_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("s{'$J4Mz8b@x<]${]", "s{'$J4Mz8b@x<]${]", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 0L);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 351, 3553, 319);
      Shape shape1 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 3553, 3553);
      boolean boolean0 = shape0.equals(shape1);
      assertEquals(1, shape1.getNumberOfHashFunctions());
      assertEquals(351, shape0.getNumberOfItems());
      assertEquals(319, shape0.getNumberOfHashFunctions());
      assertFalse(boolean0);
      assertEquals(3553, shape0.getNumberOfBits());
      assertEquals(3553, shape1.getNumberOfBits());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("$;djyWQAc g!=iL", "$;djyWQAc g!=iL", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 0L);
      Shape shape0 = new Shape(hashFunctionIdentityImpl0, 1519, 0.632120558829);
      Shape shape1 = new Shape(hashFunctionIdentityImpl0, 0.6489632048644346, 942, 1519);
      boolean boolean0 = shape0.equals(shape1);
      assertEquals(942, shape1.getNumberOfBits());
      assertEquals(1519, shape0.getNumberOfItems());
      assertFalse(boolean0);
      assertEquals(1451, shape0.getNumberOfBits());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.ITERATIVE;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("Wfs's\"99&+^>q/", "Wfs's\"99&+^>q/", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 1468L);
      Shape shape0 = null;
      try {
        shape0 = new Shape(hashFunctionIdentityImpl0, 0.6489632048644346, 8, (-690));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of hash functions must be greater than or equal to 8
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("%c(23\"6#hH]", "%c(23\"6#hH]", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 1L);
      Shape shape0 = null;
      try {
        shape0 = new Shape(hashFunctionIdentityImpl0, 1L, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Probability must be less than 1.0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("JkV+`YGMx>%?`J", "JkV+`YGMx>%?`J", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, (-1035L));
      Shape shape0 = null;
      try {
        shape0 = new Shape(hashFunctionIdentityImpl0, (-1035L), 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Probability must be greater than 0.0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("8VAd$\"~QZL}2@84tc'", "8VAd$\"~QZL}2@84tc'", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 3312L);
      Shape shape0 = null;
      try {
        shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 594, 8, 2316);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Calculated probability (1.0) is greater than or equal to 1.0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.ITERATIVE;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("vzU}_X=!Wze#{", "org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentity$Signedness", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 0L);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 8, 8);
      assertEquals(8, shape0.getNumberOfItems());
      assertEquals(8, shape0.getNumberOfBits());
      assertEquals(1, shape0.getNumberOfHashFunctions());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("%c(23\"6#hH]", "%c(23\"6#hH]", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 1L);
      Shape shape0 = null;
      try {
        shape0 = new Shape(hashFunctionIdentityImpl0, 3, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Probability must be less than 1.0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.ITERATIVE;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("Wfs's\"99&+^>q/", "p8;3V0Vc", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, (-673L));
      Shape shape0 = null;
      try {
        shape0 = new Shape(hashFunctionIdentityImpl0, 35, (-43.20499014590867));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Probability must be greater than 0.0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.ITERATIVE;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("aeoDOuo,sCQ", "", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 1679L);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 1, 2137);
      double double0 = shape0.getProbability();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1481, shape0.getNumberOfHashFunctions());
      assertEquals(268, shape0.getNumberOfBytes());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentityImpl", "org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentityImpl", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 2303L);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 715, 715);
      shape0.getHashFunctionIdentity();
      assertEquals(715, shape0.getNumberOfBits());
      assertEquals(715, shape0.getNumberOfItems());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.ITERATIVE;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("9LO97`5t9pxLoFjj*:", "Hash function name may not be null", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, (-673L));
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 1073741824, 1073741824);
      shape0.getHashFunctionIdentity();
      assertEquals(1073741824, shape0.getNumberOfItems());
      assertEquals(1073741824, shape0.getNumberOfBits());
      assertEquals(1, shape0.getNumberOfHashFunctions());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("Ed%%s-%", "Ed%%s-%", hashFunctionIdentity_Signedness0, (HashFunctionIdentity.ProcessType) null, 3539);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 3539, 3539);
      // Undeclared exception!
      try { 
        shape0.equals(shape0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentity$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentityImpl", "org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentityImpl", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 2303L);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 715, 715);
      double double0 = shape0.getProbability();
      assertEquals(0.6321205588285577, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentityImpl", "org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentityImpl", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 2303L);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 715, 715);
      int int0 = shape0.getNumberOfHashFunctions();
      assertEquals(715, shape0.getNumberOfItems());
      assertEquals(1, int0);
      assertEquals(715, shape0.getNumberOfBits());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentityImpl", "org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentityImpl", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 2303L);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 715, 715);
      int int0 = shape0.getNumberOfBits();
      assertEquals(715, int0);
      assertEquals(715, shape0.getNumberOfItems());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("s{'$J4Mz8b@x<]${]", "s{'$J4Mz8b@x<]${]", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 0L);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 351, 3553, 338);
      shape0.getHashFunctionIdentity();
      assertEquals(351, shape0.getNumberOfItems());
      assertEquals(338, shape0.getNumberOfHashFunctions());
      assertEquals(3553, shape0.getNumberOfBits());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("s{'$J4Mz8b@x<]${]", "s{'$J4Mz8b@x<]${]", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 0L);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 351, 3553, 319);
      Shape shape1 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 3553, 3553);
      boolean boolean0 = shape1.equals(shape0);
      assertEquals(351, shape0.getNumberOfItems());
      assertEquals(3553, shape1.getNumberOfItems());
      assertFalse(boolean0);
      assertEquals(1, shape1.getNumberOfHashFunctions());
      assertEquals(319, shape0.getNumberOfHashFunctions());
      assertEquals(3553, shape0.getNumberOfBits());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("s{'$J4Mz8b@x<]${]", "s{'$J4Mz8b@x<]${]", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 0L);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 351, 3553, 338);
      boolean boolean0 = shape0.equals(hashFunctionIdentity_Signedness0);
      assertFalse(boolean0);
      assertEquals(3553, shape0.getNumberOfBits());
      assertEquals(351, shape0.getNumberOfItems());
      assertEquals(338, shape0.getNumberOfHashFunctions());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.ITERATIVE;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("Y", "Y", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 2231);
      Shape shape0 = null;
      try {
        shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 2231, 908);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Filter to small: Calculated number of hash functions (0) was less than 1
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.ITERATIVE;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("T43J&1.", "T43J&1.", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 3);
      Shape shape0 = null;
      try {
        shape0 = new Shape(hashFunctionIdentityImpl0, 0.9999999999998029, 3, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be greater than or equal to 8
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("Wfs's\"99&+^>q/", "Wfs's\"99&+^>q/", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 1481L);
      Shape shape0 = new Shape(hashFunctionIdentityImpl0, 0.6321205588285577, 2256, 2256);
      Shape shape1 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 2256, 336, 2);
      boolean boolean0 = shape1.equals(shape0);
      assertFalse(boolean0);
      assertEquals(2256, shape0.getNumberOfHashFunctions());
      assertEquals(2256, shape0.getNumberOfBits());
      assertEquals(2256, shape1.getNumberOfItems());
      assertEquals(336, shape1.getNumberOfBits());
      assertEquals(2, shape1.getNumberOfHashFunctions());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.ITERATIVE;
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("", "", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 0L);
      Shape shape0 = null;
      try {
        shape0 = new Shape(hashFunctionIdentityImpl0, 0L, (-4), (-4));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Probability must be greater than 0.0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Shape shape0 = null;
      try {
        shape0 = new Shape((HashFunctionIdentity) null, (double) 37, 37, 37);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hash function name may not be null
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("s{'$J4Mz8b@x<]${]", "s{'$J4Mz8b@x<]${]", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 0L);
      Shape shape0 = null;
      try {
        shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, (double) 445, 351, 3553);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Probability must be less than 1.0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("Q85bNuUeqR", "Q85bNuUeqR", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, (-828));
      Shape shape0 = null;
      try {
        shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 387, 387, (-828));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of Hash Functions must be greater than or equal to 8
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("f", "f", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 1);
      Shape shape0 = null;
      try {
        shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 1, 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of Bits must be greater than or equal to 8
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("m.*};X{#", "m.*};X{#", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, (-1204));
      Shape shape0 = null;
      try {
        shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, (-1204), (-1204), (-1204));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of Items must be greater than 0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Shape shape0 = null;
      try {
        shape0 = new Shape((HashFunctionIdentity) null, 9, 9, 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hash function name may not be null
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("#['M30^GXvo", "#['M30^GXvo", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 2);
      Shape shape0 = null;
      try {
        shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 2, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of Bits must be greater than or equal to 8
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.ITERATIVE;
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("I: w{fzpV0Sa=\"", "$;djyWQAc g!=iL", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 0L);
      Shape shape0 = null;
      try {
        shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 0, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of Items must be greater than 0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Shape shape0 = null;
      try {
        shape0 = new Shape((HashFunctionIdentity) null, (-30), (-30));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hash function name may not be null
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("s{'$J4Mz8b@x<]${]", "s{'$J4Mz8b@x<]${]", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 0L);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 3553, 3553);
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness1 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentityImpl hashFunctionIdentityImpl1 = new HashFunctionIdentityImpl("~yFfqEL_6Sa1X", "s{'$J4Mz8b@x<]${]", hashFunctionIdentity_Signedness1, hashFunctionIdentity_ProcessType0, 733L);
      Shape shape1 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl1, 3553, 3553);
      boolean boolean0 = shape0.equals(shape1);
      assertEquals(1, shape1.getNumberOfHashFunctions());
      assertFalse(shape1.equals((Object)shape0));
      assertEquals(3553, shape1.getNumberOfBits());
      assertEquals(3553, shape1.getNumberOfItems());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("$'Ux'1w?^X6r", "$'Ux'1w?^X6r", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, (-1L));
      Shape shape0 = null;
      try {
        shape0 = new Shape(hashFunctionIdentityImpl0, 1431655765, 0.442847);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Resulting filter has more than 2147483647 bits
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("", "", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 42);
      Shape shape0 = null;
      try {
        shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 42, (double) 42);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Probability must be less than 1.0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("$;djyWQAc g!=iL", "$;djyWQAc g!=iL", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 0L);
      Shape shape0 = null;
      try {
        shape0 = new Shape(hashFunctionIdentityImpl0, 954, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Probability must be greater than 0.0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl((String) null, (String) null, hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, (-1));
      Shape shape0 = null;
      try {
        shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, (-1), (double) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of Items must be greater than 0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Shape shape0 = null;
      try {
        shape0 = new Shape((HashFunctionIdentity) null, (-30), (double) (-30));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hash function identity may not be null
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.Shape", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("s{'$J4Mz8b@x<]${]", "s{'$J4Mz8b@x<]${]", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 0L);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 351, 3553, 338);
      int int0 = shape0.getNumberOfBytes();
      assertEquals(445, int0);
      assertEquals(338, shape0.getNumberOfHashFunctions());
      assertEquals(351, shape0.getNumberOfItems());
      assertEquals(3553, shape0.getNumberOfBits());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("s{'$J4Mz8b@x<]${]", "s{'$J4Mz8b@x<]${]", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 0L);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 351, 3553, 319);
      String string0 = shape0.toString();
      assertEquals("Shape[ s{'$J4Mz8b@x<]${]-UNSIGNED-CYCLIC n=351 m=3553 k=319 ]", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.ITERATIVE;
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("I: w{fzpV0Sa=\"", "$;djyWQAc g!=iL", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 0L);
      Shape shape0 = new Shape(hashFunctionIdentityImpl0, 1519, 0.6321205588285577);
      shape0.hashCode();
      assertEquals(1451, shape0.getNumberOfBits());
      assertEquals(1, shape0.getNumberOfHashFunctions());
      assertEquals(1519, shape0.getNumberOfItems());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("s{'$J4Mz8b@x<]${]", "s{'$J4Mz8b@x<]${]", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 0L);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 351, 3553, 338);
      int int0 = shape0.getNumberOfItems();
      assertEquals(338, shape0.getNumberOfHashFunctions());
      assertEquals(351, int0);
      assertEquals(3553, shape0.getNumberOfBits());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.SIGNED;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("s{'$J4Mz8b@x<]${]", "s{'$J4Mz8b@x<]${]", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, 0L);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 351, 3553, 338);
      boolean boolean0 = shape0.equals(shape0);
      assertEquals(3553, shape0.getNumberOfBits());
      assertEquals(351, shape0.getNumberOfItems());
      assertEquals(338, shape0.getNumberOfHashFunctions());
      assertTrue(boolean0);
  }
}
