/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 18:47:26 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.stream.Stream;
import org.apache.commons.collections4.bloomfilter.BitSetBloomFilter;
import org.apache.commons.collections4.bloomfilter.BloomFilter;
import org.apache.commons.collections4.bloomfilter.CountingBloomFilter;
import org.apache.commons.collections4.bloomfilter.HasherBloomFilter;
import org.apache.commons.collections4.bloomfilter.hasher.DynamicHasher;
import org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentity;
import org.apache.commons.collections4.bloomfilter.hasher.Hasher;
import org.apache.commons.collections4.bloomfilter.hasher.Shape;
import org.apache.commons.collections4.bloomfilter.hasher.StaticHasher;
import org.apache.commons.collections4.bloomfilter.hasher.function.MD5Cyclic;
import org.apache.commons.collections4.bloomfilter.hasher.function.Murmur128x86Cyclic;
import org.apache.commons.collections4.bloomfilter.hasher.function.Murmur32x86Iterative;
import org.apache.commons.collections4.bloomfilter.hasher.function.ObjectsHashIterative;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CountingBloomFilter_ESTest extends CountingBloomFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 597, 799);
      Integer integer0 = new Integer(597);
      Integer integer1 = new Integer(398);
      hashMap0.putIfAbsent(integer0, integer1);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      countingBloomFilter0.merge((BloomFilter) countingBloomFilter0);
      assertEquals(1, countingBloomFilter0.cardinality());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 736, 1561);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(1973);
      hashMap0.putIfAbsent(integer0, integer0);
      CountingBloomFilter countingBloomFilter0 = null;
      try {
        countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // dataMap has an item with an index larger than 1560
         //
         verifyException("org.apache.commons.collections4.bloomfilter.CountingBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 419, 419);
      Integer integer0 = new Integer(2);
      hashMap0.putIfAbsent(integer0, integer0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      CountingBloomFilter countingBloomFilter1 = new CountingBloomFilter(staticHasher0, shape0);
      assertEquals(1, countingBloomFilter1.cardinality());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 1561, 1561);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      countingBloomFilter0.merge((Hasher) staticHasher0);
      assertEquals(0, countingBloomFilter0.cardinality());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 419, 419);
      Integer integer0 = new Integer(2);
      hashMap0.putIfAbsent(integer0, integer0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      long[] longArray0 = countingBloomFilter0.getBits();
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 736, 1561);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(11);
      hashMap0.putIfAbsent(integer0, integer0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      int int0 = countingBloomFilter0.cardinality();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 736, 1561);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(11);
      hashMap0.putIfAbsent(integer0, integer0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(staticHasher0, shape0);
      int int0 = countingBloomFilter0.andCardinality(hasherBloomFilter0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 398, 398);
      Integer integer0 = new Integer(1);
      hashMap0.putIfAbsent(integer0, integer0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      CountingBloomFilter countingBloomFilter1 = new CountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        countingBloomFilter1.remove((Hasher) staticHasher0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Underflow on index 1
         //
         verifyException("org.apache.commons.collections4.bloomfilter.CountingBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 363, 363);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(shape0);
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur32x86Iterative0, linkedList0);
      // Undeclared exception!
      try { 
        countingBloomFilter0.remove((Hasher) dynamicHasher0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hasher (Murmur3_x86_32-SIGNED-ITERATIVE) is not the hasher for shape (Shape[ Objects32-SIGNED-ITERATIVE n=363 m=363 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      Integer integer0 = new Integer(1);
      hashMap0.putIfAbsent(integer0, integer0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(staticHasher0, shape0);
      // Undeclared exception!
      countingBloomFilter0.remove((BloomFilter) hasherBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter((Shape) null);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        countingBloomFilter0.remove((BloomFilter) bitSetBloomFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      Shape shape1 = new Shape((HashFunctionIdentity) objectsHashIterative0, 1947, 1947);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape1);
      // Undeclared exception!
      try { 
        countingBloomFilter0.remove((BloomFilter) bitSetBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape Shape[ Objects32-SIGNED-ITERATIVE n=1947 m=1947 k=1 ] is not the same as Shape[ Objects32-SIGNED-ITERATIVE n=2147483647 m=2147483647 k=1 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      Integer integer1 = new Integer(12);
      hashMap0.put(integer1, integer0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      // Undeclared exception!
      try { 
        countingBloomFilter0.merge((Hasher) staticHasher0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Overflow on index 12
         //
         verifyException("org.apache.commons.collections4.bloomfilter.CountingBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 2147483599, 2147483599);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      // Undeclared exception!
      try { 
        countingBloomFilter0.merge((Hasher) dynamicHasher0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hasher (Murmur3_x64_128-SIGNED-CYCLIC) is not the hasher for shape (Shape[ Objects32-SIGNED-ITERATIVE n=2147483599 m=2147483599 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 2147483625, 2147483625);
      Integer integer0 = new Integer(1);
      hashMap0.putIfAbsent(integer0, integer0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(staticHasher0, shape0);
      // Undeclared exception!
      countingBloomFilter0.merge((BloomFilter) hasherBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter((Shape) null);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        countingBloomFilter0.merge((BloomFilter) bitSetBloomFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 382, 382);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        countingBloomFilter0.merge((BloomFilter) hasherBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape null is not the same as Shape[ Objects32-SIGNED-ITERATIVE n=382 m=382 k=1 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter((Shape) null);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      // Undeclared exception!
      try { 
        countingBloomFilter0.contains((Hasher) staticHasher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 402, 402);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(shape0);
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur32x86Iterative0, linkedList0);
      // Undeclared exception!
      try { 
        countingBloomFilter0.contains((Hasher) dynamicHasher0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hasher (Murmur3_x86_32-SIGNED-ITERATIVE) is not the hasher for shape (Shape[ Objects32-SIGNED-ITERATIVE n=402 m=402 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 2147483637, 2147483637);
      Integer integer0 = new Integer(1);
      hashMap0.putIfAbsent(integer0, integer0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(staticHasher0, shape0);
      // Undeclared exception!
      countingBloomFilter0.andCardinality(hasherBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 391, 391);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        countingBloomFilter0.andCardinality(bitSetBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape null is not the same as Shape[ Objects32-SIGNED-ITERATIVE n=391 m=391 k=1 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) mD5Cyclic0, 2607, 2607);
      CountingBloomFilter countingBloomFilter0 = null;
      try {
        countingBloomFilter0 = new CountingBloomFilter(dynamicHasher0, shape0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hasher (Murmur3_x64_128-SIGNED-CYCLIC) is not the hasher for shape (Shape[ MD5-SIGNED-CYCLIC n=2607 m=2607 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter((Shape) null);
      int int0 = countingBloomFilter0.andCardinality(countingBloomFilter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter((Shape) null);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        countingBloomFilter0.andCardinality(bitSetBloomFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 330, 330);
      Integer integer0 = new Integer(1);
      hashMap0.putIfAbsent(integer0, integer0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      boolean boolean0 = countingBloomFilter0.contains((Hasher) staticHasher0);
      assertTrue(boolean0);
      assertFalse(staticHasher0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 736, 1557);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(736);
      hashMap0.putIfAbsent(integer0, integer0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      countingBloomFilter0.remove((Hasher) staticHasher0);
      assertEquals(1, countingBloomFilter0.cardinality());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 398, 398);
      Integer integer0 = new Integer(1);
      hashMap0.putIfAbsent(integer0, integer0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      countingBloomFilter0.remove((Hasher) staticHasher0);
      boolean boolean0 = countingBloomFilter0.contains((Hasher) staticHasher0);
      assertFalse(boolean0);
      assertEquals(0, countingBloomFilter0.cardinality());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 2147483541, 2147483541);
      Integer integer0 = new Integer(1);
      hashMap0.putIfAbsent(integer0, integer0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      CountingBloomFilter countingBloomFilter1 = new CountingBloomFilter(shape0);
      // Undeclared exception!
      try { 
        countingBloomFilter1.remove((BloomFilter) countingBloomFilter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Underflow on index 1
         //
         verifyException("org.apache.commons.collections4.bloomfilter.CountingBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 363, 363);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      StaticHasher staticHasher0 = hasherBloomFilter0.getHasher();
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(staticHasher0, shape0);
      countingBloomFilter0.remove((BloomFilter) hasherBloomFilter0);
      assertEquals(0, countingBloomFilter0.cardinality());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      Integer integer1 = new Integer(612);
      hashMap0.put(integer1, integer0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      // Undeclared exception!
      try { 
        countingBloomFilter0.merge((BloomFilter) countingBloomFilter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Overflow on index 612
         //
         verifyException("org.apache.commons.collections4.bloomfilter.CountingBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 368, 368);
      Integer integer0 = new Integer(1);
      hashMap0.putIfAbsent(integer0, integer0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      CountingBloomFilter countingBloomFilter1 = new CountingBloomFilter(shape0);
      countingBloomFilter1.merge((BloomFilter) countingBloomFilter0);
      assertEquals(1, countingBloomFilter1.cardinality());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 368, 368);
      Integer integer0 = new Integer(1);
      hashMap0.putIfAbsent(integer0, integer0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      String string0 = countingBloomFilter0.toString();
      assertEquals("{ (1,1) }", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 391, 391);
      Integer integer0 = new Integer((byte)0);
      Integer integer1 = new Integer((-295));
      hashMap0.putIfAbsent(integer0, integer1);
      CountingBloomFilter countingBloomFilter0 = null;
      try {
        countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // dataMap has an item with an value less than 0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.CountingBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 391, 391);
      Integer integer0 = new Integer((byte)0);
      hashMap0.putIfAbsent(integer0, integer0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      assertEquals(0, countingBloomFilter0.cardinality());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 410, 410);
      Integer integer0 = new Integer(410);
      hashMap0.putIfAbsent(integer0, integer0);
      CountingBloomFilter countingBloomFilter0 = null;
      try {
        countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // dataMap has an item with an index larger than 409
         //
         verifyException("org.apache.commons.collections4.bloomfilter.CountingBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 391, 391);
      Integer integer0 = new Integer((byte) (-10));
      hashMap0.putIfAbsent(integer0, integer0);
      CountingBloomFilter countingBloomFilter0 = null;
      try {
        countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // dataMap has an item with an index less than 0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.CountingBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter((Shape) null);
      int int0 = countingBloomFilter0.cardinality();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CountingBloomFilter countingBloomFilter0 = null;
      try {
        countingBloomFilter0 = new CountingBloomFilter((Map<Integer, Integer>) null, (Shape) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.CountingBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter((Shape) null);
      long[] longArray0 = countingBloomFilter0.getBits();
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter((Shape) null);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      // Undeclared exception!
      try { 
        countingBloomFilter0.remove((Hasher) staticHasher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter((Shape) null);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      // Undeclared exception!
      try { 
        countingBloomFilter0.merge((Hasher) staticHasher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter((Shape) null);
      Stream<Map.Entry<Integer, Integer>> stream0 = (Stream<Map.Entry<Integer, Integer>>)countingBloomFilter0.getCounts();
      assertNotNull(stream0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CountingBloomFilter countingBloomFilter0 = null;
      try {
        countingBloomFilter0 = new CountingBloomFilter((Hasher) null, (Shape) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }
}
