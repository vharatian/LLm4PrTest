/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 18:45:15 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import org.apache.commons.collections4.bloomfilter.BitSetBloomFilter;
import org.apache.commons.collections4.bloomfilter.BloomFilter;
import org.apache.commons.collections4.bloomfilter.CountingBloomFilter;
import org.apache.commons.collections4.bloomfilter.HasherBloomFilter;
import org.apache.commons.collections4.bloomfilter.hasher.DynamicHasher;
import org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentity;
import org.apache.commons.collections4.bloomfilter.hasher.Hasher;
import org.apache.commons.collections4.bloomfilter.hasher.Shape;
import org.apache.commons.collections4.bloomfilter.hasher.StaticHasher;
import org.apache.commons.collections4.bloomfilter.hasher.function.MD5Cyclic;
import org.apache.commons.collections4.bloomfilter.hasher.function.Murmur128x86Cyclic;
import org.apache.commons.collections4.bloomfilter.hasher.function.Murmur32x86Iterative;
import org.apache.commons.collections4.bloomfilter.hasher.function.ObjectsHashIterative;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class BitSetBloomFilter_ESTest extends BitSetBloomFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 2335, 2335);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(718);
      hashMap0.put(integer0, integer0);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(hashMap0, shape0);
      int int0 = bitSetBloomFilter0.xorCardinality(countingBloomFilter0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 24, 1241);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[9];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur32x86Iterative0, linkedList0);
      bitSetBloomFilter0.merge((Hasher) dynamicHasher0);
      long[] longArray0 = bitSetBloomFilter0.getBits();
      assertEquals(20, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 24, 1241);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[9];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur32x86Iterative0, linkedList0);
      bitSetBloomFilter0.merge((Hasher) dynamicHasher0);
      int int0 = bitSetBloomFilter0.cardinality();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 24, 1241);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[9];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur32x86Iterative0, linkedList0);
      bitSetBloomFilter0.merge((Hasher) dynamicHasher0);
      StaticHasher staticHasher0 = bitSetBloomFilter0.getHasher();
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(staticHasher0, shape0);
      int int0 = bitSetBloomFilter0.andCardinality(countingBloomFilter0);
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        bitSetBloomFilter0.xorCardinality(bitSetBloomFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 1245, 1245);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        bitSetBloomFilter0.xorCardinality(hasherBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape null is not the same as Shape[ Murmur3_x86_32-SIGNED-ITERATIVE n=1245 m=1245 k=1 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        bitSetBloomFilter0.merge((Hasher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 1389, 1389);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      // Undeclared exception!
      try { 
        bitSetBloomFilter0.merge((Hasher) dynamicHasher0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hasher (Murmur3_x64_128-SIGNED-CYCLIC) is not the hasher for shape (Shape[ Murmur3_x86_32-SIGNED-ITERATIVE n=1389 m=1389 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter((Shape) null);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        bitSetBloomFilter0.merge((BloomFilter) hasherBloomFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 1245, 1245);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        bitSetBloomFilter0.merge((BloomFilter) hasherBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape null is not the same as Shape[ Murmur3_x86_32-SIGNED-ITERATIVE n=1245 m=1245 k=1 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter((Shape) null);
      StaticHasher staticHasher0 = bitSetBloomFilter0.getHasher();
      // Undeclared exception!
      try { 
        bitSetBloomFilter0.contains((Hasher) staticHasher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 1389, 1389);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x86Cyclic0, linkedList0);
      // Undeclared exception!
      try { 
        bitSetBloomFilter0.contains((Hasher) dynamicHasher0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hasher (Murmur3_x64_128-SIGNED-CYCLIC) is not the hasher for shape (Shape[ Murmur3_x86_32-SIGNED-ITERATIVE n=1389 m=1389 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        bitSetBloomFilter0.andCardinality(bitSetBloomFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 1230, 1230);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      BitSetBloomFilter bitSetBloomFilter1 = new BitSetBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        bitSetBloomFilter0.andCardinality(bitSetBloomFilter1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape null is not the same as Shape[ Murmur3_x86_32-SIGNED-ITERATIVE n=1230 m=1230 k=1 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BitSetBloomFilter bitSetBloomFilter0 = null;
      try {
        bitSetBloomFilter0 = new BitSetBloomFilter((Hasher) null, (Shape) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 1230, 1230);
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(mD5Cyclic0, linkedList0);
      BitSetBloomFilter bitSetBloomFilter0 = null;
      try {
        bitSetBloomFilter0 = new BitSetBloomFilter(dynamicHasher0, shape0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hasher (MD5-SIGNED-CYCLIC) is not the hasher for shape (Shape[ Objects32-SIGNED-ITERATIVE n=1230 m=1230 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 1389, 1389, 9);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(shape0);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(staticHasher0, shape0);
      long[] longArray0 = bitSetBloomFilter0.getBits();
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 1389, 1389, 9);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(shape0);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(staticHasher0, shape0);
      int int0 = bitSetBloomFilter0.xorCardinality(bitSetBloomFilter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 1389, 1389);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      int int0 = bitSetBloomFilter0.andCardinality(bitSetBloomFilter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 24, 1241);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[9];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur32x86Iterative0, linkedList0);
      BitSetBloomFilter bitSetBloomFilter1 = new BitSetBloomFilter(dynamicHasher0, shape0);
      StaticHasher staticHasher0 = bitSetBloomFilter1.getHasher();
      boolean boolean0 = bitSetBloomFilter0.contains((Hasher) staticHasher0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 24, 1241);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[9];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur32x86Iterative0, linkedList0);
      bitSetBloomFilter0.merge((Hasher) dynamicHasher0);
      StaticHasher staticHasher0 = bitSetBloomFilter0.getHasher();
      boolean boolean0 = bitSetBloomFilter0.contains((Hasher) staticHasher0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 1389, 1389, 9);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(shape0);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(staticHasher0, shape0);
      bitSetBloomFilter0.merge((BloomFilter) bitSetBloomFilter0);
      assertEquals(0, bitSetBloomFilter0.cardinality());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Murmur128x86Cyclic murmur128x86Cyclic0 = new Murmur128x86Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x86Cyclic0, 1389, 1389, 9);
      CountingBloomFilter countingBloomFilter0 = new CountingBloomFilter(shape0);
      StaticHasher staticHasher0 = countingBloomFilter0.getHasher();
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(staticHasher0, shape0);
      bitSetBloomFilter0.merge((BloomFilter) countingBloomFilter0);
      assertEquals("{}", bitSetBloomFilter0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 24, 1241);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      int int0 = bitSetBloomFilter0.cardinality();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 24, 1241);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      String string0 = bitSetBloomFilter0.toString();
      assertEquals("{}", string0);
  }
}
