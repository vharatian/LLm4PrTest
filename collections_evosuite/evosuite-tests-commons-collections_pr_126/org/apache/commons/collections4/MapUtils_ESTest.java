/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 18:00:41 GMT 2025
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintStream;
import java.lang.reflect.Array;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.time.LocalDate;
import java.time.Month;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.IsoEra;
import java.time.chrono.MinguoEra;
import java.time.format.FormatStyle;
import java.time.format.TextStyle;
import java.time.temporal.ChronoField;
import java.time.temporal.ChronoUnit;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.concurrent.TimeUnit;
import java.util.function.Function;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IterableMap;
import org.apache.commons.collections4.MapUtils;
import org.apache.commons.collections4.OrderedMap;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.bidimap.DualHashBidiMap;
import org.apache.commons.collections4.bidimap.DualTreeBidiMap;
import org.apache.commons.collections4.bidimap.TreeBidiMap;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.CloneTransformer;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.NOPTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.map.AbstractReferenceMap;
import org.apache.commons.collections4.map.CaseInsensitiveMap;
import org.apache.commons.collections4.map.CompositeMap;
import org.apache.commons.collections4.map.DefaultedMap;
import org.apache.commons.collections4.map.Flat3Map;
import org.apache.commons.collections4.map.HashedMap;
import org.apache.commons.collections4.map.LRUMap;
import org.apache.commons.collections4.map.LazyMap;
import org.apache.commons.collections4.map.LinkedMap;
import org.apache.commons.collections4.map.PassiveExpiringMap;
import org.apache.commons.collections4.map.PredicatedSortedMap;
import org.apache.commons.collections4.map.ReferenceIdentityMap;
import org.apache.commons.collections4.map.ReferenceMap;
import org.apache.commons.collections4.map.SingletonMap;
import org.apache.commons.collections4.map.StaticBucketMap;
import org.apache.commons.io.IOCase;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class MapUtils_ESTest extends MapUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Byte byte0 = new Byte((byte)15);
      ChronoField chronoField0 = ChronoField.CLOCK_HOUR_OF_DAY;
      DefaultedMap<ChronoField, ChronoField> defaultedMap0 = new DefaultedMap<ChronoField, ChronoField>(chronoField0);
      ChronoField chronoField1 = defaultedMap0.put(chronoField0, chronoField0);
      Number number0 = MapUtils.getNumber((Map<? super ChronoField, ?>) defaultedMap0, chronoField1, (Number) byte0);
      assertEquals((byte)15, number0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PassiveExpiringMap<ChronoField, ChronoField> passiveExpiringMap0 = new PassiveExpiringMap<ChronoField, ChronoField>(2750L);
      ChronoField chronoField0 = ChronoField.MICRO_OF_SECOND;
      passiveExpiringMap0.put(chronoField0, chronoField0);
      int int0 = MapUtils.size(passiveExpiringMap0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceIdentityMap<LinkedList<Predicate<Object>>, Object> referenceIdentityMap0 = new ReferenceIdentityMap<LinkedList<Predicate<Object>>, Object>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, (byte)23, (byte)23);
      CompositeMap.MapMutator<LinkedList<Predicate<Object>>, Object> compositeMap_MapMutator0 = (CompositeMap.MapMutator<LinkedList<Predicate<Object>>, Object>) mock(CompositeMap.MapMutator.class, new ViolatedAssumptionAnswer());
      CompositeMap<LinkedList<Predicate<Object>>, Object> compositeMap0 = new CompositeMap<LinkedList<Predicate<Object>>, Object>(referenceIdentityMap0, referenceIdentityMap0, compositeMap_MapMutator0);
      Map<LinkedList<Predicate<Object>>, Object> map0 = MapUtils.putAll((Map<LinkedList<Predicate<Object>>, Object>) compositeMap0, objectArray0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Flat3Map<ChronoUnit, Byte> flat3Map0 = new Flat3Map<ChronoUnit, Byte>();
      OrderedMap<ChronoUnit, Byte> orderedMap0 = MapUtils.orderedMap((Map<ChronoUnit, Byte>) flat3Map0);
      assertEquals(0, orderedMap0.size());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedMap<LinkedList<Predicate<MinguoEra>>, MinguoEra> linkedMap0 = new LinkedMap<LinkedList<Predicate<MinguoEra>>, MinguoEra>();
      LinkedList<Predicate<MinguoEra>> linkedList0 = new LinkedList<Predicate<MinguoEra>>();
      MinguoEra minguoEra0 = MinguoEra.ROC;
      linkedMap0.put(linkedList0, minguoEra0);
      OrderedMap<LinkedList<Predicate<MinguoEra>>, MinguoEra> orderedMap0 = MapUtils.orderedMap((Map<LinkedList<Predicate<MinguoEra>>, MinguoEra>) linkedMap0);
      assertEquals(1, orderedMap0.size());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TreeMap<Object, Object> treeMap0 = new TreeMap<Object, Object>();
      Transformer<Object, Object>[] transformerArray0 = (Transformer<Object, Object>[]) Array.newInstance(Transformer.class, 2);
      Transformer<Object, Object> transformer0 = ConstantTransformer.constantTransformer((Object) treeMap0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      SwitchTransformer<Object, Object> switchTransformer0 = new SwitchTransformer<Object, Object>(predicateArray0, transformerArray0, transformer0);
      transformerArray0[1] = (Transformer<Object, Object>) switchTransformer0;
      SortedMap<Object, Object> sortedMap0 = MapUtils.lazySortedMap((SortedMap<Object, Object>) treeMap0, (Transformer<? super Object, ?>) transformerArray0[1]);
      assertEquals(0, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PassiveExpiringMap<LinkedList<MinguoEra>, LinkedList<MinguoEra>> passiveExpiringMap0 = new PassiveExpiringMap<LinkedList<MinguoEra>, LinkedList<MinguoEra>>(1523L);
      Transformer<LinkedList<MinguoEra>, LinkedList<MinguoEra>> transformer0 = NOPTransformer.nopTransformer();
      IterableMap<LinkedList<MinguoEra>, LinkedList<MinguoEra>> iterableMap0 = MapUtils.lazyMap((Map<LinkedList<MinguoEra>, LinkedList<MinguoEra>>) passiveExpiringMap0, (Transformer<? super LinkedList<MinguoEra>, ? extends LinkedList<MinguoEra>>) transformer0);
      assertEquals(0, iterableMap0.size());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DualHashBidiMap<Byte, ChronoLocalDate> dualHashBidiMap0 = new DualHashBidiMap<Byte, ChronoLocalDate>();
      DualTreeBidiMap<Byte, ChronoLocalDate> dualTreeBidiMap0 = new DualTreeBidiMap<Byte, ChronoLocalDate>(dualHashBidiMap0);
      Byte byte0 = new Byte((byte)95);
      Function<Byte, String> function0 = (Function<Byte, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any(java.lang.Byte.class));
      String string0 = MapUtils.getString((Map<? super Byte, ?>) dualTreeBidiMap0, byte0, function0);
      assertNull(string0);
      assertEquals("org.apache.commons.collections4.MapUtils$2", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DualHashBidiMap<Byte, ChronoLocalDate> dualHashBidiMap0 = new DualHashBidiMap<Byte, ChronoLocalDate>();
      DualTreeBidiMap<Byte, ChronoLocalDate> dualTreeBidiMap0 = new DualTreeBidiMap<Byte, ChronoLocalDate>(dualHashBidiMap0);
      Byte byte0 = new Byte((byte)95);
      Function<Byte, String> function0 = (Function<Byte, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn("").when(function0).apply(any(java.lang.Byte.class));
      String string0 = MapUtils.getString((Map<? super Byte, ?>) dualTreeBidiMap0, byte0, function0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TreeBidiMap<IsoEra, Byte> treeBidiMap0 = new TreeBidiMap<IsoEra, Byte>();
      IsoEra isoEra0 = IsoEra.BCE;
      short short0 = MapUtils.getShortValue((Map<? super IsoEra, ?>) treeBidiMap0, isoEra0, (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StaticBucketMap<Object, Object> staticBucketMap0 = new StaticBucketMap<Object, Object>((short)32);
      Function<Object, Short> function0 = (Function<Object, Short>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      short short0 = MapUtils.getShortValue((Map<? super Object, ?>) staticBucketMap0, (Object) null, function0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LRUMap<Object, Byte> lRUMap0 = new LRUMap<Object, Byte>();
      MinguoEra minguoEra0 = MinguoEra.ROC;
      Number number0 = MapUtils.getNumber((Map<? super MinguoEra, ?>) lRUMap0, minguoEra0, (Number) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-33));
      DefaultedMap<Object, Object> defaultedMap0 = new DefaultedMap<Object, Object>(byte0);
      LinkedList<Predicate<MinguoEra>> linkedList0 = new LinkedList<Predicate<MinguoEra>>();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      PassiveExpiringMap<Object, Object> passiveExpiringMap0 = new PassiveExpiringMap<Object, Object>((-1318L), timeUnit0, defaultedMap0);
      Long long0 = MapUtils.getLong((Map<? super LinkedList<Predicate<MinguoEra>>, ?>) passiveExpiringMap0, linkedList0);
      assertEquals((-33L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Function<LinkedList<Byte>, Integer> function0 = (Function<LinkedList<Byte>, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any(java.util.LinkedList.class));
      Integer integer0 = MapUtils.getInteger((Map<? super LinkedList<Byte>, ?>) null, (LinkedList<Byte>) null, function0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LRUMap<Object, Byte> lRUMap0 = new LRUMap<Object, Byte>();
      MinguoEra minguoEra0 = MinguoEra.ROC;
      Integer integer0 = new Integer(2);
      Function<MinguoEra, Integer> function0 = (Function<MinguoEra, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(function0).apply(any(java.time.chrono.MinguoEra.class));
      int int0 = MapUtils.getIntValue((Map<? super MinguoEra, ?>) lRUMap0, minguoEra0, function0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CaseInsensitiveMap<MinguoEra, MinguoEra> caseInsensitiveMap0 = new CaseInsensitiveMap<MinguoEra, MinguoEra>();
      MinguoEra minguoEra0 = MinguoEra.ROC;
      Function<MinguoEra, Float> function0 = (Function<MinguoEra, Float>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any(java.time.chrono.MinguoEra.class));
      float float0 = MapUtils.getFloatValue((Map<? super MinguoEra, ?>) caseInsensitiveMap0, minguoEra0, function0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LRUMap<Byte, Byte> lRUMap0 = new LRUMap<Byte, Byte>(614, 614, 614, false);
      Byte byte0 = new Byte((byte)7);
      Object object0 = lRUMap0.put(byte0, byte0);
      Byte byte1 = new Byte((byte) (-33));
      DefaultedMap<Object, Object> defaultedMap0 = new DefaultedMap<Object, Object>(byte1);
      Function<Object, Float> function0 = (Function<Object, Float>) mock(Function.class, new ViolatedAssumptionAnswer());
      float float0 = MapUtils.getFloatValue((Map<? super Object, ?>) defaultedMap0, object0, function0);
      assertEquals((-33.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LRUMap<Object, Byte> lRUMap0 = new LRUMap<Object, Byte>();
      LinkedHashSet<Predicate<MinguoEra>> linkedHashSet0 = new LinkedHashSet<Predicate<MinguoEra>>();
      Predicate<MinguoEra> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super MinguoEra>>) linkedHashSet0);
      float float0 = MapUtils.getFloatValue((Map<? super Predicate<MinguoEra>, ?>) lRUMap0, predicate0, 423.35352F);
      assertEquals(423.35352F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PriorityQueue<Predicate<MinguoEra>> priorityQueue0 = new PriorityQueue<Predicate<MinguoEra>>();
      Predicate<MinguoEra> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super MinguoEra>>) priorityQueue0);
      StaticBucketMap<Predicate<MinguoEra>, MinguoEra> staticBucketMap0 = new StaticBucketMap<Predicate<MinguoEra>, MinguoEra>();
      float float0 = MapUtils.getFloatValue((Map<? super Predicate<MinguoEra>, ?>) staticBucketMap0, predicate0, (-725.0F));
      assertEquals((-725.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StaticBucketMap<Object, Object> staticBucketMap0 = new StaticBucketMap<Object, Object>((short)32);
      MinguoEra minguoEra0 = MinguoEra.ROC;
      Float float0 = new Float(0.0);
      Function<MinguoEra, Float> function0 = (Function<MinguoEra, Float>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(float0).when(function0).apply(any(java.time.chrono.MinguoEra.class));
      Float float1 = MapUtils.getFloat((Map<? super MinguoEra, ?>) staticBucketMap0, minguoEra0, function0);
      assertEquals(0.0F, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StaticBucketMap<Object, Object> staticBucketMap0 = new StaticBucketMap<Object, Object>((short)32);
      MinguoEra minguoEra0 = MinguoEra.ROC;
      Function<MinguoEra, Float> function0 = (Function<MinguoEra, Float>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any(java.time.chrono.MinguoEra.class));
      Float float0 = MapUtils.getFloat((Map<? super MinguoEra, ?>) staticBucketMap0, minguoEra0, function0);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-33));
      DefaultedMap<Object, Object> defaultedMap0 = new DefaultedMap<Object, Object>(byte0);
      MinguoEra minguoEra0 = MinguoEra.ROC;
      Function<MinguoEra, Float> function0 = (Function<MinguoEra, Float>) mock(Function.class, new ViolatedAssumptionAnswer());
      Float float0 = MapUtils.getFloat((Map<? super MinguoEra, ?>) defaultedMap0, minguoEra0, function0);
      assertEquals((-33.0F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Comparator<CharBuffer> comparator0 = (Comparator<CharBuffer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<CharBuffer, CharBuffer> dualTreeBidiMap0 = new DualTreeBidiMap<CharBuffer, CharBuffer>(comparator0, comparator0);
      Double double0 = new Double(2);
      Function<CharBuffer, Double> function0 = (Function<CharBuffer, Double>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(double0).when(function0).apply(any(java.nio.CharBuffer.class));
      double double1 = MapUtils.getDoubleValue((Map<? super CharBuffer, ?>) dualTreeBidiMap0, (CharBuffer) null, function0);
      assertEquals(2.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Flat3Map<Object, Object> flat3Map0 = new Flat3Map<Object, Object>();
      Object object0 = new Object();
      Double double0 = new Double(0.0);
      Double double1 = MapUtils.getDouble((Map<? super Object, ?>) flat3Map0, object0, double0);
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<Byte, IOCase> hashMap0 = new HashMap<Byte, IOCase>();
      Byte byte0 = new Byte((byte)102);
      byte byte1 = MapUtils.getByteValue((Map<? super Byte, ?>) hashMap0, byte0, (byte)0);
      assertEquals((byte)0, byte1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LRUMap<Object, Byte> lRUMap0 = new LRUMap<Object, Byte>();
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      byte byte0 = MapUtils.getByteValue((Map<? super Predicate<Object>, ?>) lRUMap0, (Predicate<Object>) instanceofPredicate0, (byte)1);
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      DefaultedMap<Object, Object> defaultedMap0 = new DefaultedMap<Object, Object>(byte0);
      MinguoEra minguoEra0 = MinguoEra.ROC;
      Function<MinguoEra, Byte> function0 = (Function<MinguoEra, Byte>) mock(Function.class, new ViolatedAssumptionAnswer());
      Byte byte1 = MapUtils.getByte((Map<? super MinguoEra, ?>) defaultedMap0, minguoEra0, function0);
      assertEquals((byte)0, (byte)byte1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceIdentityMap<Object, Object> referenceIdentityMap0 = new ReferenceIdentityMap<Object, Object>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, false);
      MinguoEra minguoEra0 = MinguoEra.ROC;
      Byte byte0 = new Byte((byte)4);
      Function<MinguoEra, Byte> function0 = (Function<MinguoEra, Byte>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(byte0).when(function0).apply(any(java.time.chrono.MinguoEra.class));
      Byte byte1 = MapUtils.getByte((Map<? super MinguoEra, ?>) referenceIdentityMap0, minguoEra0, function0);
      assertEquals((byte)4, (byte)byte1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-33));
      DefaultedMap<Object, Object> defaultedMap0 = new DefaultedMap<Object, Object>(byte0);
      MinguoEra minguoEra0 = MinguoEra.ROC;
      Function<MinguoEra, Byte> function0 = (Function<MinguoEra, Byte>) mock(Function.class, new ViolatedAssumptionAnswer());
      Byte byte1 = MapUtils.getByte((Map<? super MinguoEra, ?>) defaultedMap0, minguoEra0, function0);
      assertEquals((byte) (-33), (byte)byte1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Byte byte0 = new Byte((byte)7);
      Byte byte1 = MapUtils.getByte((Map<? super Predicate<Object>, ?>) null, (Predicate<Object>) null, byte0);
      assertEquals((byte)7, (byte)byte1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtils.unmodifiableSortedMap((SortedMap<ChronoField, ? extends ChronoField>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtils.unmodifiableMap((Map<? extends LinkedList<Byte>, ? extends Byte>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtils.transformedSortedMap((SortedMap<Closure<Object>, Closure<Object>>) null, (Transformer<? super Closure<Object>, ? extends Closure<Object>>) null, (Transformer<? super Closure<Object>, ? extends Closure<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtils.synchronizedSortedMap((SortedMap<ChronoField, ChronoField>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtils.putAll((Map<Month, Month>) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtils.iterableSortedMap((SortedMap<Byte, Byte>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sortedMap
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtils.iterableMap((Map<AbstractMap.SimpleImmutableEntry<Predicate, Predicate>, Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtils.invertMap((Map<Transformer<LinkedList, Predicate<Object>>, LinkedList<Predicate<Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DualTreeBidiMap<MinguoEra, MinguoEra> dualTreeBidiMap0 = new DualTreeBidiMap<MinguoEra, MinguoEra>();
      // Undeclared exception!
      try { 
        MapUtils.getNumber((Map<? super MinguoEra, ?>) dualTreeBidiMap0, (MinguoEra) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SingletonMap<Object, Object> singletonMap0 = new SingletonMap<Object, Object>();
      Transformer<Object, Object> transformer0 = ExceptionTransformer.exceptionTransformer();
      LazyMap<Object, Object> lazyMap0 = LazyMap.lazyMap((Map<Object, Object>) singletonMap0, (Transformer<? super Object, ?>) transformer0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        MapUtils.getNumber((Map<? super LinkedList<Object>, ?>) lazyMap0, linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DualTreeBidiMap<Object, Object> dualTreeBidiMap0 = new DualTreeBidiMap<Object, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        MapUtils.getNumber((Map<? super LinkedList<Object>, ?>) dualTreeBidiMap0, linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LinkedHashSet<Predicate<MinguoEra>> linkedHashSet0 = new LinkedHashSet<Predicate<MinguoEra>>();
      Predicate<MinguoEra> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super MinguoEra>>) linkedHashSet0);
      DualTreeBidiMap<Object, Object> dualTreeBidiMap0 = new DualTreeBidiMap<Object, Object>();
      // Undeclared exception!
      try { 
        MapUtils.getFloatValue((Map<? super Predicate<MinguoEra>, ?>) dualTreeBidiMap0, predicate0, 930.34F);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DualTreeBidiMap<CharBuffer, CharBuffer> dualTreeBidiMap0 = new DualTreeBidiMap<CharBuffer, CharBuffer>();
      Function<CharBuffer, Double> function0 = (Function<CharBuffer, Double>) mock(Function.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        MapUtils.getDoubleValue((Map<? super CharBuffer, ?>) dualTreeBidiMap0, (CharBuffer) null, function0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Map<LinkedList<Byte>, Byte>[] mapArray0 = (Map<LinkedList<Byte>, Byte>[]) Array.newInstance(Map.class, 1);
      DualTreeBidiMap<LinkedList<Byte>, Byte> dualTreeBidiMap0 = new DualTreeBidiMap<LinkedList<Byte>, Byte>();
      mapArray0[0] = (Map<LinkedList<Byte>, Byte>) dualTreeBidiMap0;
      CompositeMap<LinkedList<Byte>, Byte> compositeMap0 = new CompositeMap<LinkedList<Byte>, Byte>(mapArray0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      // Undeclared exception!
      try { 
        MapUtils.getByteValue((Map<? super LinkedList<Byte>, ?>) compositeMap0, linkedList0, (byte) (-1));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) allPredicate0;
      Byte byte0 = new Byte((byte) (-2));
      TreeMap<Object, Object> treeMap0 = new TreeMap<Object, Object>();
      PredicatedSortedMap<Object, Object> predicatedSortedMap0 = PredicatedSortedMap.predicatedSortedMap((SortedMap<Object, Object>) treeMap0, (Predicate<? super Object>) predicateArray0[0], (Predicate<? super Object>) predicateArray0[1]);
      // Undeclared exception!
      try { 
        MapUtils.getByte((Map<? super Predicate<Object>, ?>) predicatedSortedMap0, predicateArray0[0], byte0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtils.fixedSizeSortedMap((SortedMap<LinkedList<Predicate<Object>>, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtils.fixedSizeMap((Map<TextStyle, LinkedList<Transformer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = MapUtils.isEmpty((Map<?, ?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CaseInsensitiveMap<MinguoEra, MinguoEra> caseInsensitiveMap0 = new CaseInsensitiveMap<MinguoEra, MinguoEra>();
      MinguoEra minguoEra0 = MinguoEra.ROC;
      Short short0 = MapUtils.getShort((Map<? super MinguoEra, ?>) caseInsensitiveMap0, minguoEra0);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Byte byte0 = new Byte((byte)7);
      DefaultedMap<Object, Object> defaultedMap0 = new DefaultedMap<Object, Object>(byte0);
      MinguoEra minguoEra0 = MinguoEra.ROC;
      Number number0 = MapUtils.getNumber((Map<? super Object, ?>) defaultedMap0, (Object) minguoEra0);
      assertEquals((byte)7, number0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LRUMap<Object, Byte> lRUMap0 = new LRUMap<Object, Byte>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Number number0 = MapUtils.getNumber((Map<? super LinkedList<Object>, ?>) lRUMap0, linkedList0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LinkedMap<Predicate<MinguoEra>, MinguoEra> linkedMap0 = new LinkedMap<Predicate<MinguoEra>, MinguoEra>(97);
      UniquePredicate<MinguoEra> uniquePredicate0 = new UniquePredicate<MinguoEra>();
      Map<?, ?> map0 = MapUtils.getMap((Map<? super Predicate<MinguoEra>, ?>) linkedMap0, (Predicate<MinguoEra>) uniquePredicate0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Byte byte0 = new Byte((byte)7);
      DefaultedMap<Object, Object> defaultedMap0 = new DefaultedMap<Object, Object>(byte0);
      LinkedList<Predicate<MinguoEra>> linkedList0 = new LinkedList<Predicate<MinguoEra>>();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      PassiveExpiringMap<Object, Object> passiveExpiringMap0 = new PassiveExpiringMap<Object, Object>((-1318L), timeUnit0, defaultedMap0);
      Long long0 = MapUtils.getLong((Map<? super LinkedList<Predicate<MinguoEra>>, ?>) passiveExpiringMap0, linkedList0);
      assertEquals(7L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StaticBucketMap<Object, Object> staticBucketMap0 = new StaticBucketMap<Object, Object>((short)32);
      LinkedList<Predicate<MinguoEra>> linkedList0 = new LinkedList<Predicate<MinguoEra>>();
      Long long0 = MapUtils.getLong((Map<? super LinkedList<Predicate<MinguoEra>>, ?>) staticBucketMap0, linkedList0);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LRUMap<FormatStyle, FormatStyle> lRUMap0 = new LRUMap<FormatStyle, FormatStyle>(1303);
      FormatStyle formatStyle0 = FormatStyle.FULL;
      Integer integer0 = MapUtils.getInteger((Map<? super FormatStyle, ?>) lRUMap0, formatStyle0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Comparator<Locale.Category> comparator0 = (Comparator<Locale.Category>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeMap<Locale.Category, Byte> treeMap0 = new TreeMap<Locale.Category, Byte>(comparator0);
      DualTreeBidiMap<Locale.Category, Byte> dualTreeBidiMap0 = new DualTreeBidiMap<Locale.Category, Byte>(treeMap0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Double double0 = MapUtils.getDouble((Map<? super Locale.Category, ?>) dualTreeBidiMap0, locale_Category0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LRUMap<Object, Byte> lRUMap0 = new LRUMap<Object, Byte>();
      MinguoEra minguoEra0 = MinguoEra.ROC;
      Byte byte0 = MapUtils.getByte((Map<? super MinguoEra, ?>) lRUMap0, minguoEra0);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LRUMap<Byte, Byte> lRUMap0 = new LRUMap<Byte, Byte>(1, 1, 1, false);
      Byte byte0 = new Byte((byte)32);
      lRUMap0.put(byte0, byte0);
      Boolean boolean0 = MapUtils.getBoolean((Map<? super Byte, ?>) lRUMap0, byte0);
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LRUMap<Byte, Byte> lRUMap0 = new LRUMap<Byte, Byte>();
      Byte byte0 = new Byte((byte)0);
      Boolean boolean0 = MapUtils.getBoolean((Map<? super Byte, ?>) lRUMap0, byte0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StaticBucketMap<MinguoEra, MinguoEra> staticBucketMap0 = new StaticBucketMap<MinguoEra, MinguoEra>();
      // Undeclared exception!
      try { 
        MapUtils.debugPrint((PrintStream) null, (Object) null, staticBucketMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.MapUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LinkedMap<Predicate<MinguoEra>, MinguoEra> linkedMap0 = new LinkedMap<Predicate<MinguoEra>, MinguoEra>(125);
      int int0 = MapUtils.size(linkedMap0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LRUMap<Object, Byte> lRUMap0 = new LRUMap<Object, Byte>();
      Object object0 = new Object();
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.collections4.map.AbstractOrderedMapDecorator");
      Flat3Map<Object, Object> flat3Map0 = new Flat3Map<Object, Object>(lRUMap0);
      flat3Map0.put(object0, mockPrintStream0);
      MapUtils.verbosePrint(mockPrintStream0, lRUMap0, flat3Map0);
      assertFalse(lRUMap0.isFull());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Byte byte0 = new Byte((byte)102);
      PassiveExpiringMap<Byte, IOCase> passiveExpiringMap0 = new PassiveExpiringMap<Byte, IOCase>();
      passiveExpiringMap0.put(byte0, (IOCase) null);
      boolean boolean0 = MapUtils.isNotEmpty(passiveExpiringMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LRUMap<Object, Byte> lRUMap0 = new LRUMap<Object, Byte>();
      Byte byte0 = new Byte((byte)0);
      lRUMap0.put(byte0, byte0);
      boolean boolean0 = MapUtils.isEmpty(lRUMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LRUMap<Object, Byte> lRUMap0 = new LRUMap<Object, Byte>();
      boolean boolean0 = MapUtils.isEmpty(lRUMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = MapUtils.isNotEmpty((Map<?, ?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<Byte, Byte> hashMap0 = new HashMap<Byte, Byte>();
      Map<Byte, Byte> map0 = MapUtils.invertMap((Map<Byte, Byte>) hashMap0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      UniquePredicate<MinguoEra> uniquePredicate0 = new UniquePredicate<MinguoEra>();
      Map<?, ?> map0 = MapUtils.getMap((Map<? super Predicate<MinguoEra>, ?>) null, (Predicate<MinguoEra>) uniquePredicate0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LRUMap<Byte, Byte> lRUMap0 = new LRUMap<Byte, Byte>();
      Byte byte0 = new Byte((byte)0);
      lRUMap0.put(byte0, byte0);
      Boolean boolean0 = MapUtils.getBoolean((Map<? super Byte, ?>) lRUMap0, byte0, (Boolean) null);
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Byte byte0 = new Byte((byte)15);
      SingletonMap<Byte, Byte> singletonMap0 = new SingletonMap<Byte, Byte>(byte0, byte0);
      Boolean boolean0 = MapUtils.getBoolean((Map<? super Byte, ?>) singletonMap0, byte0, (Boolean) null);
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Map<MinguoEra, Byte> map0 = MapUtils.emptyIfNull((Map<MinguoEra, Byte>) null);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DualTreeBidiMap<MinguoEra, MinguoEra> dualTreeBidiMap0 = new DualTreeBidiMap<MinguoEra, MinguoEra>();
      Map<MinguoEra, MinguoEra> map0 = MapUtils.emptyIfNull((Map<MinguoEra, MinguoEra>) dualTreeBidiMap0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TreeMap<Object, Object> treeMap0 = new TreeMap<Object, Object>();
      IterableMap<Object, Object> iterableMap0 = MapUtils.iterableMap((Map<Object, Object>) treeMap0);
      assertNotNull(iterableMap0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TreeMap<Transformer<Byte, Byte>, Closure<Byte>> treeMap0 = new TreeMap<Transformer<Byte, Byte>, Closure<Byte>>();
      SortedMap<Transformer<Byte, Byte>, Closure<Byte>> sortedMap0 = MapUtils.fixedSizeSortedMap((SortedMap<Transformer<Byte, Byte>, Closure<Byte>>) treeMap0);
      assertEquals(0, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Byte byte0 = new Byte((byte)10);
      Short short0 = MapUtils.getShort((Map<? super Byte, ?>) null, byte0, (Function<Byte, Short>) null);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LRUMap<Object, Byte> lRUMap0 = new LRUMap<Object, Byte>();
      LinkedHashSet<Predicate<MinguoEra>> linkedHashSet0 = new LinkedHashSet<Predicate<MinguoEra>>();
      Predicate<MinguoEra> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super MinguoEra>>) linkedHashSet0);
      float float0 = MapUtils.getFloatValue((Map<? super Predicate<MinguoEra>, ?>) lRUMap0, predicate0, (float) 0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceIdentityMap<Object, Object> referenceIdentityMap0 = new ReferenceIdentityMap<Object, Object>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, false);
      LinkedList<MinguoEra> linkedList0 = new LinkedList<MinguoEra>();
      float float0 = MapUtils.getFloatValue((Map<? super LinkedList<MinguoEra>, ?>) referenceIdentityMap0, linkedList0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DualTreeBidiMap<Object, Object> dualTreeBidiMap0 = new DualTreeBidiMap<Object, Object>();
      // Undeclared exception!
      try { 
        MapUtils.lazySortedMap((SortedMap<Object, Object>) dualTreeBidiMap0, (Factory<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // factory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LRUMap<ChronoField, ChronoField> lRUMap0 = new LRUMap<ChronoField, ChronoField>(2);
      HashedMap<ChronoField, ChronoField> hashedMap0 = new HashedMap<ChronoField, ChronoField>(lRUMap0);
      ChronoField chronoField0 = ChronoField.YEAR;
      short short0 = MapUtils.getShortValue((Map<? super ChronoField, ?>) hashedMap0, chronoField0, (short)32);
      assertEquals((short)32, short0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TreeMap<Object, Object> treeMap0 = new TreeMap<Object, Object>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      SortedMap<Object, Object> sortedMap0 = MapUtils.predicatedSortedMap((SortedMap<Object, Object>) treeMap0, (Predicate<? super Object>) nonePredicate0, (Predicate<? super Object>) predicate0);
      assertEquals(0, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Comparator<LinkedList<ChronoField>> comparator0 = (Comparator<LinkedList<ChronoField>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeMap<LinkedList<ChronoField>, ChronoField> treeMap0 = new TreeMap<LinkedList<ChronoField>, ChronoField>(comparator0);
      LinkedList<ChronoField> linkedList0 = new LinkedList<ChronoField>();
      Function<LinkedList<ChronoField>, Boolean> function0 = (Function<LinkedList<ChronoField>, Boolean>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any(java.util.LinkedList.class));
      Boolean boolean0 = MapUtils.getBoolean((Map<? super LinkedList<ChronoField>, ?>) treeMap0, linkedList0, function0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Comparator<CharBuffer> comparator0 = (Comparator<CharBuffer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<CharBuffer, CharBuffer> dualTreeBidiMap0 = new DualTreeBidiMap<CharBuffer, CharBuffer>(comparator0, comparator0);
      SortedMap<CharBuffer, CharBuffer> sortedMap0 = MapUtils.unmodifiableSortedMap((SortedMap<CharBuffer, ? extends CharBuffer>) dualTreeBidiMap0);
      assertEquals(0, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ReferenceMap<Charset, Charset> referenceMap0 = new ReferenceMap<Charset, Charset>();
      Map<Charset, Charset> map0 = MapUtils.synchronizedMap((Map<Charset, Charset>) referenceMap0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceIdentityMap<MinguoEra, MinguoEra> referenceIdentityMap0 = new ReferenceIdentityMap<MinguoEra, MinguoEra>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, true);
      Map<MinguoEra, MinguoEra> map0 = MapUtils.unmodifiableMap((Map<? extends MinguoEra, ? extends MinguoEra>) referenceIdentityMap0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LRUMap<Object, Byte> lRUMap0 = new LRUMap<Object, Byte>();
      Object object0 = new Object();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(object0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(equalPredicate0);
      long long0 = MapUtils.getLongValue((Map<? super Predicate<Object>, ?>) lRUMap0, (Predicate<Object>) identityPredicate0, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ReferenceMap<Charset, Charset> referenceMap0 = new ReferenceMap<Charset, Charset>();
      Function<Charset, Double> function0 = (Function<Charset, Double>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any(java.nio.charset.Charset.class));
      Double double0 = MapUtils.getDouble((Map<? super Charset, ?>) referenceMap0, (Charset) null, function0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LRUMap<Object, Byte> lRUMap0 = new LRUMap<Object, Byte>();
      MinguoEra minguoEra0 = MinguoEra.BEFORE_ROC;
      Byte byte0 = new Byte((byte) (-1));
      Byte byte1 = MapUtils.getByte((Map<? super MinguoEra, ?>) lRUMap0, minguoEra0, byte0);
      assertEquals((byte) (-1), (byte)byte1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PassiveExpiringMap<Object, Byte> passiveExpiringMap0 = new PassiveExpiringMap<Object, Byte>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      double double0 = MapUtils.getDoubleValue((Map<? super Predicate<Object>, ?>) passiveExpiringMap0, (Predicate<Object>) onePredicate0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      boolean boolean0 = MapUtils.getBooleanValue((Map<? super Byte, ?>) null, byte0, (Function<Byte, Boolean>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LRUMap<Object, Byte> lRUMap0 = new LRUMap<Object, Byte>();
      LinkedHashSet<Predicate<MinguoEra>> linkedHashSet0 = new LinkedHashSet<Predicate<MinguoEra>>();
      Predicate<MinguoEra> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super MinguoEra>>) linkedHashSet0);
      Function<Predicate<MinguoEra>, Long> function0 = (Function<Predicate<MinguoEra>, Long>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any(org.apache.commons.collections4.Predicate.class));
      long long0 = MapUtils.getLongValue((Map<? super Predicate<MinguoEra>, ?>) lRUMap0, predicate0, function0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      SingletonMap<Byte, Byte> singletonMap0 = new SingletonMap<Byte, Byte>(byte0, byte0);
      Transformer<Byte, Byte> transformer0 = CloneTransformer.cloneTransformer();
      IterableMap<Byte, Byte> iterableMap0 = MapUtils.lazyMap((Map<Byte, Byte>) singletonMap0, (Transformer<? super Byte, ? extends Byte>) transformer0);
      assertEquals(1, iterableMap0.size());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LRUMap<Object, Byte> lRUMap0 = new LRUMap<Object, Byte>();
      Object object0 = new Object();
      String string0 = MapUtils.getString((Map<? super Object, ?>) lRUMap0, object0, "}");
      assertEquals("}", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DualHashBidiMap<Byte, ChronoLocalDate> dualHashBidiMap0 = new DualHashBidiMap<Byte, ChronoLocalDate>();
      DualTreeBidiMap<Byte, ChronoLocalDate> dualTreeBidiMap0 = new DualTreeBidiMap<Byte, ChronoLocalDate>(dualHashBidiMap0);
      Transformer<Byte, Byte> transformer0 = ExceptionTransformer.exceptionTransformer();
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1558L));
      Transformer<ChronoLocalDate, ChronoLocalDate> transformer1 = ConstantTransformer.constantTransformer((ChronoLocalDate) localDate0);
      SortedMap<Byte, ChronoLocalDate> sortedMap0 = MapUtils.transformedSortedMap((SortedMap<Byte, ChronoLocalDate>) dualTreeBidiMap0, (Transformer<? super Byte, ? extends Byte>) transformer0, (Transformer<? super ChronoLocalDate, ? extends ChronoLocalDate>) transformer1);
      assertTrue(sortedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = MapUtils.getBooleanValue((Map<? super AbstractMap.SimpleImmutableEntry<Object, Predicate<Object>>, ?>) null, (AbstractMap.SimpleImmutableEntry<Object, Predicate<Object>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Float float0 = new Float((-1.0));
      CompositeMap<MinguoEra, MinguoEra> compositeMap0 = new CompositeMap<MinguoEra, MinguoEra>();
      MinguoEra minguoEra0 = MinguoEra.ROC;
      Float float1 = MapUtils.getFloat((Map<? super MinguoEra, ?>) compositeMap0, minguoEra0, float0);
      assertEquals((-1.0F), (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtils.orderedMap((Map<Predicate<Predicate>, Byte>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(hashMap0);
      short short0 = MapUtils.getShortValue((Map<? super Predicate<Object>, ?>) hashMap0, (Predicate<Object>) equalPredicate0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ChronoField chronoField0 = ChronoField.YEAR_OF_ERA;
      Long long0 = new Long((-1796L));
      Long long1 = MapUtils.getLong((Map<? super ChronoField, ?>) null, chronoField0, long0);
      assertEquals((-1796L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(hashMap0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(equalPredicate0);
      Function<Object, Double> function0 = (Function<Object, Double>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      double double0 = MapUtils.getDoubleValue((Map<? super Object, ?>) hashMap0, (Object) nullIsExceptionPredicate0, function0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LRUMap<Object, Byte> lRUMap0 = new LRUMap<Object, Byte>();
      Byte byte0 = new Byte((byte) (-1));
      Boolean boolean0 = MapUtils.getBoolean((Map<? super Byte, ?>) lRUMap0, byte0, (Boolean) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      byte byte0 = MapUtils.getByteValue((Map<? super LinkedList<Predicate<Object>>, ?>) null, linkedList0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TreeMap<Object, Object> treeMap0 = new TreeMap<Object, Object>();
      // Undeclared exception!
      try { 
        MapUtils.lazySortedMap((SortedMap<Object, Object>) treeMap0, (Transformer<? super Object, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // factory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = MapUtils.getDoubleValue((Map<? super AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Byte>, ?>) null, (AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Byte>) null, (double)  (-106));
      assertEquals((-106.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LRUMap<Object, Byte> lRUMap0 = new LRUMap<Object, Byte>();
      MinguoEra minguoEra0 = MinguoEra.ROC;
      Integer integer0 = new Integer((-273));
      Function<MinguoEra, Integer> function0 = (Function<MinguoEra, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(function0).apply(any(java.time.chrono.MinguoEra.class));
      int int0 = MapUtils.getIntValue((Map<? super MinguoEra, ?>) lRUMap0, minguoEra0, function0);
      assertEquals((-17), int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LRUMap<Byte, Byte> lRUMap0 = new LRUMap<Byte, Byte>(614, 614, 614, false);
      Byte byte0 = new Byte((byte)7);
      DefaultedMap<Object, Object> defaultedMap0 = new DefaultedMap<Object, Object>(byte0);
      Number number0 = MapUtils.getNumber((Map<? super Object, ?>) defaultedMap0, (Object) lRUMap0, (Function<Object, Number>) null);
      assertEquals((byte)7, number0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LRUMap<Object, Byte> lRUMap0 = new LRUMap<Object, Byte>();
      LinkedHashSet<Predicate<MinguoEra>> linkedHashSet0 = new LinkedHashSet<Predicate<MinguoEra>>();
      Predicate<MinguoEra> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super MinguoEra>>) linkedHashSet0);
      Integer integer0 = new Integer((-273));
      Integer integer1 = MapUtils.getInteger((Map<? super Predicate<MinguoEra>, ?>) lRUMap0, predicate0, integer0);
      assertEquals((-273), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CompositeMap<AbstractMap.SimpleImmutableEntry<Predicate<Object>, Object>, AbstractMap.SimpleImmutableEntry<Predicate<Object>, Object>> compositeMap0 = new CompositeMap<AbstractMap.SimpleImmutableEntry<Predicate<Object>, Object>, AbstractMap.SimpleImmutableEntry<Predicate<Object>, Object>>();
      IterableMap<AbstractMap.SimpleImmutableEntry<Predicate<Object>, Object>, AbstractMap.SimpleImmutableEntry<Predicate<Object>, Object>> iterableMap0 = MapUtils.fixedSizeMap((Map<AbstractMap.SimpleImmutableEntry<Predicate<Object>, Object>, AbstractMap.SimpleImmutableEntry<Predicate<Object>, Object>>) compositeMap0);
      assertEquals(0, iterableMap0.size());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Map<LinkedList<Byte>, Byte>[] mapArray0 = (Map<LinkedList<Byte>, Byte>[]) Array.newInstance(Map.class, 1);
      CompositeMap<LinkedList<Byte>, Byte> compositeMap0 = new CompositeMap<LinkedList<Byte>, Byte>(mapArray0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      byte byte0 = MapUtils.getByteValue((Map<? super LinkedList<Byte>, ?>) compositeMap0, linkedList0, (byte) (-1));
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashedMap<MinguoEra, Transformer<MinguoEra, MinguoEra>> hashedMap0 = new HashedMap<MinguoEra, Transformer<MinguoEra, MinguoEra>>(1, 1.0F);
      // Undeclared exception!
      try { 
        MapUtils.lazyMap((Map<MinguoEra, Transformer<MinguoEra, MinguoEra>>) hashedMap0, (Factory<? extends Transformer<MinguoEra, MinguoEra>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // factory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Byte byte0 = new Byte((byte)7);
      DefaultedMap<Object, Object> defaultedMap0 = new DefaultedMap<Object, Object>(byte0);
      MinguoEra minguoEra0 = MinguoEra.ROC;
      Function<MinguoEra, Float> function0 = (Function<MinguoEra, Float>) mock(Function.class, new ViolatedAssumptionAnswer());
      Float float0 = MapUtils.getFloat((Map<? super MinguoEra, ?>) defaultedMap0, minguoEra0, function0);
      assertEquals(7.0F, (float)float0, 0.01F);
  }
}
