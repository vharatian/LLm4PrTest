/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 13:03:56 GMT 2025
 */

package org.apache.commons.collections4.functors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SwitchClosure_ESTest extends SwitchClosure_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      predicateArray0[0] = predicate0;
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(predicate0);
      Object object0 = new Object();
      predicateArray0[1] = predicateArray0[0];
      predicateArray0[2] = predicateArray0[1];
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(object0);
      predicateArray0[3] = (Predicate<Object>) equalPredicate0;
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 2);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) predicateTransformer0);
      closureArray0[0] = closure0;
      Closure<Object>[] closureArray1 = (Closure<Object>[]) Array.newInstance(Closure.class, 8);
      closureArray1[0] = closureArray0[0];
      closureArray1[1] = closureArray0[0];
      closureArray1[2] = closureArray0[0];
      closureArray1[3] = closure0;
      closureArray1[4] = closureArray0[0];
      closureArray1[5] = closure0;
      closureArray1[6] = closure0;
      closureArray1[7] = closure0;
      // Undeclared exception!
      try { 
        SwitchClosure.switchClosure((Predicate<? super NonePredicate<Boolean>>[]) predicateArray0, (Closure<? super NonePredicate<Boolean>>[]) closureArray1, (Closure<? super NonePredicate<Boolean>>) closure0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate and closure arrays must be the same size
         //
         verifyException("org.apache.commons.collections4.functors.SwitchClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      Object object0 = new Object();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate(object0, (Equator<Object>) defaultEquator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(predicate0, comparator0, comparatorPredicate_Criterion0);
      Predicate<Object> predicate1 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) comparatorPredicate0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate1);
      predicateArray0[0] = (Predicate<Object>) nullIsTruePredicate0;
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ConstantTransformer<Object, InstanceofPredicate> constantTransformer0 = new ConstantTransformer<Object, InstanceofPredicate>(instanceofPredicate0);
      IfTransformer<Object, InstanceofPredicate> ifTransformer0 = new IfTransformer<Object, InstanceofPredicate>(nullIsTruePredicate0, constantTransformer0, constantTransformer0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(ifTransformer0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 3);
      closureArray0[0] = (Closure<Object>) transformerClosure0;
      SwitchClosure<InstanceofPredicate> switchClosure0 = new SwitchClosure<InstanceofPredicate>(predicateArray0, closureArray0, closureArray0[0]);
      switchClosure0.execute(instanceofPredicate0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Predicate<Boolean>, Closure<Boolean>> hashMap0 = new HashMap<Predicate<Boolean>, Closure<Boolean>>();
      Closure<Boolean> closure0 = SwitchClosure.switchClosure((Map<Predicate<Boolean>, Closure<Boolean>>) hashMap0);
      Closure<Boolean>[] closureArray0 = (Closure<Boolean>[]) Array.newInstance(Closure.class, 3);
      SwitchClosure<Boolean> switchClosure0 = new SwitchClosure<Boolean>((Predicate<? super Boolean>[]) null, closureArray0, closure0);
      Predicate<? super Boolean>[] predicateArray0 = switchClosure0.getPredicates();
      assertNull(predicateArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      SwitchClosure<NonePredicate<Object>> switchClosure0 = new SwitchClosure<NonePredicate<Object>>(predicateArray0, closureArray0, closure0);
      Predicate<? super NonePredicate<Object>>[] predicateArray1 = switchClosure0.getPredicates();
      assertEquals(0, predicateArray1.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Predicate<InstanceofPredicate>[] predicateArray0 = (Predicate<InstanceofPredicate>[]) Array.newInstance(Predicate.class, 5);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      SwitchClosure<InstanceofPredicate> switchClosure0 = new SwitchClosure<InstanceofPredicate>(predicateArray0, (Closure<? super InstanceofPredicate>[]) null, closure0);
      Closure<? super InstanceofPredicate>[] closureArray0 = switchClosure0.getClosures();
      assertNull(closureArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      Object object0 = new Object();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate(object0, (Equator<Object>) defaultEquator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(predicate0, comparator0, comparatorPredicate_Criterion0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(comparatorPredicate0);
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ConstantTransformer<Object, InstanceofPredicate> constantTransformer0 = new ConstantTransformer<Object, InstanceofPredicate>(instanceofPredicate0);
      IfTransformer<Object, InstanceofPredicate> ifTransformer0 = new IfTransformer<Object, InstanceofPredicate>(nullIsTruePredicate0, constantTransformer0, constantTransformer0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(ifTransformer0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 3);
      SwitchClosure<Boolean> switchClosure0 = new SwitchClosure<Boolean>(predicateArray0, closureArray0, transformerClosure0);
      Closure<? super Boolean>[] closureArray1 = switchClosure0.getClosures();
      assertEquals(3, closureArray1.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Predicate<InstanceofPredicate>[] predicateArray0 = (Predicate<InstanceofPredicate>[]) Array.newInstance(Predicate.class, 5);
      OnePredicate<InstanceofPredicate> onePredicate0 = new OnePredicate<InstanceofPredicate>(predicateArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(uniquePredicate0);
      Boolean boolean0 = predicateTransformer0.transform(onePredicate0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(boolean0, comparator0, comparatorPredicate_Criterion0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray1[0] = (Predicate<Object>) comparatorPredicate0;
      predicateArray1[1] = (Predicate<Object>) comparatorPredicate0;
      // Undeclared exception!
      try { 
        SwitchClosure.switchClosure((Predicate<? super Object>[]) predicateArray1, (Closure<? super Object>[]) null, (Closure<? super Object>) closure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // closures
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 3);
      // Undeclared exception!
      try { 
        SwitchClosure.switchClosure((Predicate<? super InstanceofPredicate>[]) predicateArray0, (Closure<? super InstanceofPredicate>[]) closureArray0, (Closure<? super InstanceofPredicate>) closureArray0[2]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicates[0]
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        SwitchClosure.switchClosure((Map<Predicate<NonePredicate<NonePredicate>>, Closure<NonePredicate<NonePredicate>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicatesAndClosures
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      SwitchClosure<Object> switchClosure0 = new SwitchClosure<Object>(predicateArray0, closureArray0, closure0);
      // Undeclared exception!
      try { 
        switchClosure0.execute(closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[0] = (Predicate<Object>) uniquePredicate0;
      SwitchClosure<Closure<Object>> switchClosure0 = new SwitchClosure<Closure<Object>>(predicateArray0, closureArray0, closure0);
      // Undeclared exception!
      try { 
        switchClosure0.execute(closure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.functors.SwitchClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      Object object0 = new Object();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate(object0, (Equator<Object>) defaultEquator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(predicate0, comparator0, comparatorPredicate_Criterion0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(comparatorPredicate0);
      predicateArray0[0] = (Predicate<Object>) nullIsTruePredicate0;
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 3);
      SwitchClosure<InstanceofPredicate> switchClosure0 = new SwitchClosure<InstanceofPredicate>(predicateArray0, closureArray0, closureArray0[0]);
      // Undeclared exception!
      try { 
        switchClosure0.execute(instanceofPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.SwitchClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      predicateArray0[0] = predicate0;
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(predicate0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 2);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) predicateTransformer0);
      SwitchClosure<Closure<Boolean>> switchClosure0 = new SwitchClosure<Closure<Boolean>>(predicateArray0, closureArray0, closure0);
      TransformerClosure<Boolean> transformerClosure0 = new TransformerClosure<Boolean>(predicateTransformer0);
      // Undeclared exception!
      try { 
        switchClosure0.execute(transformerClosure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.SwitchClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      SwitchClosure<Object> switchClosure0 = new SwitchClosure<Object>(predicateArray0, closureArray0, closure0);
      switchClosure0.execute((Object) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Predicate<Boolean>, Closure<Boolean>> hashMap0 = new HashMap<Predicate<Boolean>, Closure<Boolean>>();
      Predicate<Boolean> predicate0 = NotNullPredicate.notNullPredicate();
      Closure<Boolean> closure0 = NOPClosure.nopClosure();
      hashMap0.put(predicate0, closure0);
      Closure<Boolean> closure1 = SwitchClosure.switchClosure((Map<Predicate<Boolean>, Closure<Boolean>>) hashMap0);
      assertFalse(closure1.equals((Object)closure0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Predicate<Boolean>, Closure<Boolean>> hashMap0 = new HashMap<Predicate<Boolean>, Closure<Boolean>>();
      Closure<Boolean> closure0 = ExceptionClosure.exceptionClosure();
      hashMap0.put((Predicate<Boolean>) null, closure0);
      Closure<Boolean> closure1 = SwitchClosure.switchClosure((Map<Predicate<Boolean>, Closure<Boolean>>) hashMap0);
      assertSame(closure1, closure0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      Closure<AbstractMap.SimpleImmutableEntry<Closure, Object>> closure0 = SwitchClosure.switchClosure((Predicate<? super AbstractMap.SimpleImmutableEntry<Closure, Object>>[]) predicateArray0, (Closure<? super AbstractMap.SimpleImmutableEntry<Closure, Object>>[]) closureArray0, (Closure<? super AbstractMap.SimpleImmutableEntry<Closure, Object>>) null);
      assertNotNull(closure0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[0] = (Predicate<Object>) uniquePredicate0;
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 1);
      closureArray0[0] = closure0;
      Closure<Object> closure1 = SwitchClosure.switchClosure((Predicate<? super Object>[]) predicateArray0, (Closure<? super Object>[]) closureArray0, (Closure<? super Object>) closure0);
      assertFalse(closure1.equals((Object)closure0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      predicateArray0[0] = predicate0;
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      ForClosure<Object> forClosure0 = new ForClosure<Object>((-600), closure0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, forClosure0, forClosure0);
      SwitchClosure<Object> switchClosure0 = new SwitchClosure<Object>(predicateArray0, closureArray0, closure0);
      Closure<? super Object>[] closureArray1 = switchClosure0.getClosures();
      // Undeclared exception!
      try { 
        SwitchClosure.switchClosure((Predicate<? super Object>[]) predicateArray0, closureArray1, (Closure<? super Object>) ifClosure0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate and closure arrays must be the same size
         //
         verifyException("org.apache.commons.collections4.functors.SwitchClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      Closure<Object> closure1 = SwitchClosure.switchClosure((Predicate<? super Object>[]) predicateArray0, (Closure<? super Object>[]) closureArray0, (Closure<? super Object>) closure0);
      assertSame(closure1, closure0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 3);
      SwitchClosure<AbstractMap.SimpleImmutableEntry<InstanceofPredicate, InstanceofPredicate>> switchClosure0 = new SwitchClosure<AbstractMap.SimpleImmutableEntry<InstanceofPredicate, InstanceofPredicate>>(predicateArray0, closureArray0, closureArray0[0]);
      Predicate<? super AbstractMap.SimpleImmutableEntry<InstanceofPredicate, InstanceofPredicate>>[] predicateArray1 = switchClosure0.getPredicates();
      assertEquals(6, predicateArray1.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      SwitchClosure<Object> switchClosure0 = new SwitchClosure<Object>(predicateArray0, closureArray0, closure0);
      Closure<Object>[] closureArray1 = (Closure<Object>[]) Array.newInstance(Closure.class, 1);
      SwitchClosure<NonePredicate<InstanceofPredicate>> switchClosure1 = new SwitchClosure<NonePredicate<InstanceofPredicate>>((Predicate<? super NonePredicate<InstanceofPredicate>>[]) null, closureArray1, switchClosure0);
      Closure<? super NonePredicate<InstanceofPredicate>> closure1 = switchClosure1.getDefaultClosure();
      assertNotNull(closure1);
  }
}
