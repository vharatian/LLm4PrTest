/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 13:06:04 GMT 2025
 */

package org.apache.commons.collections4.functors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.CloneTransformer;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateTransformer;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SwitchTransformer_ESTest extends SwitchTransformer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Predicate<InstanceofPredicate>[] predicateArray0 = (Predicate<InstanceofPredicate>[]) Array.newInstance(Predicate.class, 0);
      Transformer<InstanceofPredicate, Object> transformer0 = ConstantTransformer.nullTransformer();
      Transformer<InstanceofPredicate, Object>[] transformerArray0 = (Transformer<InstanceofPredicate, Object>[]) Array.newInstance(Transformer.class, 1);
      transformerArray0[0] = transformer0;
      // Undeclared exception!
      try { 
        SwitchTransformer.switchTransformer((Predicate<? super InstanceofPredicate>[]) predicateArray0, (Transformer<? super InstanceofPredicate, ?>[]) transformerArray0, (Transformer<? super InstanceofPredicate, ?>) transformer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate and transformer arrays must be the same size
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Transformer<Object, InstanceofPredicate>[] transformerArray0 = (Transformer<Object, InstanceofPredicate>[]) Array.newInstance(Transformer.class, 1);
      HashMap<Object, InstanceofPredicate> hashMap0 = new HashMap<Object, InstanceofPredicate>();
      Transformer<Object, InstanceofPredicate> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends InstanceofPredicate>) hashMap0);
      SwitchTransformer<InstantiateTransformer<Object>, InstanceofPredicate> switchTransformer0 = new SwitchTransformer<InstantiateTransformer<Object>, InstanceofPredicate>(predicateArray0, transformerArray0, transformer0);
      InstantiateTransformer<Object> instantiateTransformer0 = new InstantiateTransformer<Object>((Class<?>[]) null, transformerArray0);
      InstanceofPredicate instanceofPredicate0 = switchTransformer0.transform(instantiateTransformer0);
      assertNull(instanceofPredicate0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<InstanceofPredicate, Transformer<Object, InstanceofPredicate>> hashMap0 = new HashMap<InstanceofPredicate, Transformer<Object, InstanceofPredicate>>();
      Transformer<Object, Object> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ?>>) hashMap0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Transformer<Object, InstanceofPredicate>[] transformerArray0 = (Transformer<Object, InstanceofPredicate>[]) Array.newInstance(Transformer.class, 2);
      SwitchTransformer<Object, Object> switchTransformer0 = new SwitchTransformer<Object, Object>(predicateArray0, transformerArray0, transformer0);
      Transformer<? super Object, ?>[] transformerArray1 = switchTransformer0.getTransformers();
      assertEquals(2, transformerArray1.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Transformer<Object, InstanceofPredicate>[] transformerArray0 = (Transformer<Object, InstanceofPredicate>[]) Array.newInstance(Transformer.class, 0);
      Transformer<Object, Object> transformer0 = NOPTransformer.nopTransformer();
      SwitchTransformer<Object, Object> switchTransformer0 = new SwitchTransformer<Object, Object>(predicateArray0, transformerArray0, transformer0);
      Transformer<? super Object, ?>[] transformerArray1 = switchTransformer0.getTransformers();
      assertEquals(0, transformerArray1.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ConstantTransformer<Object, InstanceofPredicate> constantTransformer0 = new ConstantTransformer<Object, InstanceofPredicate>(instanceofPredicate0);
      Transformer<Object, InstanceofPredicate>[] transformerArray0 = (Transformer<Object, InstanceofPredicate>[]) Array.newInstance(Transformer.class, 2);
      SwitchTransformer<InstantiateTransformer<Object>, InstanceofPredicate> switchTransformer0 = new SwitchTransformer<InstantiateTransformer<Object>, InstanceofPredicate>((Predicate<? super InstantiateTransformer<Object>>[]) null, transformerArray0, constantTransformer0);
      Predicate<? super InstantiateTransformer<Object>>[] predicateArray0 = switchTransformer0.getPredicates();
      assertNull(predicateArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Transformer<Object, InstanceofPredicate>[] transformerArray0 = (Transformer<Object, InstanceofPredicate>[]) Array.newInstance(Transformer.class, 1);
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ConstantTransformer<Object, InstanceofPredicate> constantTransformer0 = new ConstantTransformer<Object, InstanceofPredicate>(instanceofPredicate0);
      SwitchTransformer<InstantiateTransformer<Object>, InstanceofPredicate> switchTransformer0 = new SwitchTransformer<InstantiateTransformer<Object>, InstanceofPredicate>(predicateArray0, transformerArray0, constantTransformer0);
      Predicate<? super InstantiateTransformer<Object>>[] predicateArray1 = switchTransformer0.getPredicates();
      assertEquals(0, predicateArray1.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Transformer<Object, Object>[] transformerArray0 = (Transformer<Object, Object>[]) Array.newInstance(Transformer.class, 0);
      Transformer<Object, Object> transformer0 = CloneTransformer.cloneTransformer();
      SwitchTransformer<Object, Object> switchTransformer0 = new SwitchTransformer<Object, Object>(predicateArray0, transformerArray0, transformer0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        switchTransformer0.transform(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The prototype must be cloneable via a public clone method
         //
         verifyException("org.apache.commons.collections4.functors.PrototypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Transformer<InstanceofPredicate, Object>[] transformerArray0 = (Transformer<InstanceofPredicate, Object>[]) Array.newInstance(Transformer.class, 0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      predicateArray0[0] = (Predicate<Object>) instanceofPredicate0;
      Class<InstanceofPredicate>[] classArray0 = (Class<InstanceofPredicate>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer<Object, InstanceofPredicate> invokerTransformer0 = new InvokerTransformer<Object, InstanceofPredicate>("a;vZz*|e3", classArray0, transformerArray0);
      SwitchTransformer<InstanceofPredicate, Object> switchTransformer0 = new SwitchTransformer<InstanceofPredicate, Object>(predicateArray0, transformerArray0, invokerTransformer0);
      // Undeclared exception!
      try { 
        switchTransformer0.transform(instanceofPredicate0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Transformer<Object, InstanceofPredicate> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        SwitchTransformer.switchTransformer((Predicate<? super InstanceofPredicate>[]) null, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>[]) null, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicates
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Predicate<Closure<InstanceofPredicate>>[] predicateArray0 = (Predicate<Closure<InstanceofPredicate>>[]) Array.newInstance(Predicate.class, 1);
      Predicate<InstantiateTransformer<InstanceofPredicate>>[] predicateArray1 = (Predicate<InstantiateTransformer<InstanceofPredicate>>[]) Array.newInstance(Predicate.class, 0);
      Transformer<InstantiateTransformer<InstanceofPredicate>, InstanceofPredicate>[] transformerArray0 = (Transformer<InstantiateTransformer<InstanceofPredicate>, InstanceofPredicate>[]) Array.newInstance(Transformer.class, 8);
      Class<InstanceofPredicate>[] classArray0 = (Class<InstanceofPredicate>[]) Array.newInstance(Class.class, 9);
      InvokerTransformer<InstantiateTransformer<InstanceofPredicate>, InstanceofPredicate> invokerTransformer0 = new InvokerTransformer<InstantiateTransformer<InstanceofPredicate>, InstanceofPredicate>("", classArray0, predicateArray0);
      // Undeclared exception!
      try { 
        SwitchTransformer.switchTransformer((Predicate<? super InstantiateTransformer<InstanceofPredicate>>[]) predicateArray1, (Transformer<? super InstantiateTransformer<InstanceofPredicate>, ? extends InstanceofPredicate>[]) transformerArray0, (Transformer<? super InstantiateTransformer<InstanceofPredicate>, ? extends InstanceofPredicate>) invokerTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformers[0]
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        SwitchTransformer.switchTransformer((Map<? extends Predicate<? super InstanceofPredicate>, ? extends Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<InstanceofPredicate, Transformer<Object, InstanceofPredicate>> hashMap0 = new HashMap<InstanceofPredicate, Transformer<Object, InstanceofPredicate>>();
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Transformer<Object, InstanceofPredicate> transformer0 = hashMap0.put(instanceofPredicate0, (Transformer<Object, InstanceofPredicate>) null);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      Transformer<Object, InstanceofPredicate>[] transformerArray0 = (Transformer<Object, InstanceofPredicate>[]) Array.newInstance(Transformer.class, 4);
      SwitchTransformer<FactoryTransformer<InstanceofPredicate, InstanceofPredicate>, InstanceofPredicate> switchTransformer0 = new SwitchTransformer<FactoryTransformer<InstanceofPredicate, InstanceofPredicate>, InstanceofPredicate>(predicateArray0, transformerArray0, transformer0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ConstantTransformer<Object, InstanceofPredicate> constantTransformer0 = new ConstantTransformer<Object, InstanceofPredicate>(instanceofPredicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      predicateArray0[0] = (Predicate<Object>) instanceofPredicate0;
      Transformer<Object, InstanceofPredicate>[] transformerArray0 = (Transformer<Object, InstanceofPredicate>[]) Array.newInstance(Transformer.class, 2);
      SwitchTransformer<InstanceofPredicate, Object> switchTransformer0 = new SwitchTransformer<InstanceofPredicate, Object>(predicateArray0, transformerArray0, constantTransformer0);
      // Undeclared exception!
      try { 
        switchTransformer0.transform(instanceofPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ConstantTransformer<Object, InstanceofPredicate> constantTransformer0 = new ConstantTransformer<Object, InstanceofPredicate>(instanceofPredicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      predicateArray0[0] = (Predicate<Object>) instanceofPredicate0;
      Transformer<Object, InstanceofPredicate>[] transformerArray0 = (Transformer<Object, InstanceofPredicate>[]) Array.newInstance(Transformer.class, 2);
      SwitchTransformer<Closure<InstanceofPredicate>, InstanceofPredicate> switchTransformer0 = new SwitchTransformer<Closure<InstanceofPredicate>, InstanceofPredicate>(predicateArray0, transformerArray0, constantTransformer0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      Closure<InstanceofPredicate> closure0 = ChainedClosure.chainedClosure((Closure<? super InstanceofPredicate>[]) closureArray0);
      InstanceofPredicate instanceofPredicate1 = switchTransformer0.transform(closure0);
      assertSame(instanceofPredicate0, instanceofPredicate1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Transformer<Object, Object>[] transformerArray0 = (Transformer<Object, Object>[]) Array.newInstance(Transformer.class, 0);
      Transformer<Object, InstanceofPredicate> transformer0 = ExceptionTransformer.exceptionTransformer();
      SwitchTransformer<Object, Object> switchTransformer0 = new SwitchTransformer<Object, Object>(predicateArray0, transformerArray0, transformer0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        switchTransformer0.transform(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<InstanceofPredicate, Transformer<InstanceofPredicate, InstanceofPredicate>> hashMap0 = new HashMap<InstanceofPredicate, Transformer<InstanceofPredicate, InstanceofPredicate>>();
      hashMap0.put((InstanceofPredicate) null, (Transformer<InstanceofPredicate, InstanceofPredicate>) null);
      SwitchTransformer.switchTransformer((Map<? extends Predicate<? super InstanceofPredicate>, ? extends Transformer<? super InstanceofPredicate, ?>>) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<InstanceofPredicate, Transformer<InstanceofPredicate, InstanceofPredicate>> hashMap0 = new HashMap<InstanceofPredicate, Transformer<InstanceofPredicate, InstanceofPredicate>>();
      HashMap<InstanceofPredicate, InstanceofPredicate> hashMap1 = new HashMap<InstanceofPredicate, InstanceofPredicate>();
      Transformer<InstanceofPredicate, InstanceofPredicate> transformer0 = MapTransformer.mapTransformer((Map<? super InstanceofPredicate, ? extends InstanceofPredicate>) hashMap1);
      hashMap0.put((InstanceofPredicate) null, transformer0);
      SwitchTransformer.switchTransformer((Map<? extends Predicate<? super InstanceofPredicate>, ? extends Transformer<? super InstanceofPredicate, ?>>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<InstanceofPredicate, Transformer<InstanceofPredicate, InstanceofPredicate>> hashMap0 = new HashMap<InstanceofPredicate, Transformer<InstanceofPredicate, InstanceofPredicate>>();
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      HashMap<InstanceofPredicate, InstanceofPredicate> hashMap1 = new HashMap<InstanceofPredicate, InstanceofPredicate>();
      Transformer<InstanceofPredicate, InstanceofPredicate> transformer0 = MapTransformer.mapTransformer((Map<? super InstanceofPredicate, ? extends InstanceofPredicate>) hashMap1);
      IfTransformer<InstanceofPredicate, InstanceofPredicate> ifTransformer0 = new IfTransformer<InstanceofPredicate, InstanceofPredicate>(instanceofPredicate0, transformer0, transformer0);
      hashMap0.put(instanceofPredicate0, ifTransformer0);
      Transformer<InstanceofPredicate, Object> transformer1 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super InstanceofPredicate>, ? extends Transformer<? super InstanceofPredicate, ?>>) hashMap0);
      assertNotNull(transformer1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Predicate<InstanceofPredicate>[] predicateArray0 = (Predicate<InstanceofPredicate>[]) Array.newInstance(Predicate.class, 0);
      Transformer<InstanceofPredicate, Object>[] transformerArray0 = (Transformer<InstanceofPredicate, Object>[]) Array.newInstance(Transformer.class, 0);
      Transformer<InstanceofPredicate, Object> transformer0 = ConstantTransformer.nullTransformer();
      Transformer<InstanceofPredicate, Object> transformer1 = SwitchTransformer.switchTransformer((Predicate<? super InstanceofPredicate>[]) predicateArray0, (Transformer<? super InstanceofPredicate, ?>[]) transformerArray0, (Transformer<? super InstanceofPredicate, ?>) transformer0);
      assertSame(transformer1, transformer0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(instanceofPredicate0, (Equator<Object>) null);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      Transformer<InstanceofPredicate, InstanceofPredicate>[] transformerArray0 = (Transformer<InstanceofPredicate, InstanceofPredicate>[]) Array.newInstance(Transformer.class, 1);
      HashMap<InstanceofPredicate, InstanceofPredicate> hashMap0 = new HashMap<InstanceofPredicate, InstanceofPredicate>();
      Transformer<InstanceofPredicate, InstanceofPredicate> transformer0 = MapTransformer.mapTransformer((Map<? super InstanceofPredicate, ? extends InstanceofPredicate>) hashMap0);
      transformerArray0[0] = transformer0;
      Transformer<InstanceofPredicate, InstanceofPredicate> transformer1 = SwitchTransformer.switchTransformer((Predicate<? super InstanceofPredicate>[]) predicateArray0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>[]) transformerArray0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) transformer0);
      assertFalse(transformer1.equals((Object)transformer0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      HashMap<Object, InstanceofPredicate> hashMap0 = new HashMap<Object, InstanceofPredicate>();
      Transformer<Object, InstanceofPredicate> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends InstanceofPredicate>) hashMap0);
      Transformer<Object, InstanceofPredicate>[] transformerArray0 = (Transformer<Object, InstanceofPredicate>[]) Array.newInstance(Transformer.class, 0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      predicateArray0[0] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[1] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[2] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[3] = (Predicate<Object>) instanceofPredicate0;
      SwitchTransformer<Object, InstanceofPredicate> switchTransformer0 = new SwitchTransformer<Object, InstanceofPredicate>(predicateArray0, transformerArray0, transformer0);
      Transformer<Object, InstanceofPredicate>[] transformerArray1 = (Transformer<Object, InstanceofPredicate>[]) Array.newInstance(Transformer.class, 2);
      transformerArray1[0] = (Transformer<Object, InstanceofPredicate>) switchTransformer0;
      transformerArray1[1] = (Transformer<Object, InstanceofPredicate>) switchTransformer0;
      // Undeclared exception!
      try { 
        SwitchTransformer.switchTransformer((Predicate<? super Object>[]) predicateArray0, (Transformer<? super Object, ? extends InstanceofPredicate>[]) transformerArray1, (Transformer<? super Object, ? extends InstanceofPredicate>) switchTransformer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate and transformer arrays must be the same size
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Predicate<InstanceofPredicate>[] predicateArray0 = (Predicate<InstanceofPredicate>[]) Array.newInstance(Predicate.class, 0);
      Transformer<InstanceofPredicate, Object>[] transformerArray0 = (Transformer<InstanceofPredicate, Object>[]) Array.newInstance(Transformer.class, 0);
      Transformer<InstanceofPredicate, Object> transformer0 = SwitchTransformer.switchTransformer((Predicate<? super InstanceofPredicate>[]) predicateArray0, (Transformer<? super InstanceofPredicate, ?>[]) transformerArray0, (Transformer<? super InstanceofPredicate, ?>) null);
      assertNotNull(transformer0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Transformer<Object, Object> transformer0 = ExceptionTransformer.exceptionTransformer();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      SwitchTransformer<Object, Object> switchTransformer0 = new SwitchTransformer<Object, Object>(predicateArray0, (Transformer<? super Object, ?>[]) null, transformer0);
      Transformer<? super Object, ?>[] transformerArray0 = switchTransformer0.getTransformers();
      assertNull(transformerArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Transformer<Object, InstanceofPredicate>[] transformerArray0 = (Transformer<Object, InstanceofPredicate>[]) Array.newInstance(Transformer.class, 0);
      Transformer<Object, Object> transformer0 = NOPTransformer.nopTransformer();
      SwitchTransformer<InstantiateTransformer<Object>, Object> switchTransformer0 = new SwitchTransformer<InstantiateTransformer<Object>, Object>(predicateArray0, transformerArray0, transformer0);
      Predicate<? super InstantiateTransformer<Object>>[] predicateArray1 = switchTransformer0.getPredicates();
      assertEquals(3, predicateArray1.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Transformer<Object, InstanceofPredicate> transformer0 = ExceptionTransformer.exceptionTransformer();
      SwitchTransformer<InstantiateTransformer<InstanceofPredicate>, InstanceofPredicate> switchTransformer0 = new SwitchTransformer<InstantiateTransformer<InstanceofPredicate>, InstanceofPredicate>((Predicate<? super InstantiateTransformer<InstanceofPredicate>>[]) null, (Transformer<? super InstantiateTransformer<InstanceofPredicate>, ? extends InstanceofPredicate>[]) null, transformer0);
      Transformer<? super InstantiateTransformer<InstanceofPredicate>, ? extends InstanceofPredicate> transformer1 = switchTransformer0.getDefaultTransformer();
      assertNotNull(transformer1);
  }
}
