/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 13:01:47 GMT 2025
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.ComparatorUtils;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedTransformer;
import org.apache.commons.collections4.functors.ClosureTransformer;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ComparatorUtils_ESTest extends ComparatorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(930);
      LinkedList<Transformer<Integer, Integer>> linkedList0 = new LinkedList<Transformer<Integer, Integer>>();
      Transformer<Integer, Integer> transformer0 = ChainedTransformer.chainedTransformer((Collection<? extends Transformer<? super Integer, ? extends Integer>>) linkedList0);
      Comparator<Integer> comparator0 = ComparatorUtils.transformedComparator((Comparator<Integer>) null, (Transformer<? super Integer, ? extends Integer>) transformer0);
      Integer integer1 = new Integer(0);
      Integer integer2 = ComparatorUtils.max(integer1, integer0, comparator0);
      assertEquals(930, (int)integer2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(930);
      Integer integer1 = new Integer((-2325));
      Comparator<Integer> comparator0 = ComparatorUtils.naturalComparator();
      Integer integer2 = ComparatorUtils.min(integer0, integer1, comparator0);
      assertEquals((-2325), (int)integer2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparator<Object>[] comparatorArray0 = (Comparator<Object>[]) Array.newInstance(Comparator.class, 5);
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      Comparator<Object> comparator0 = ComparatorUtils.chainedComparator((Collection<Comparator<Object>>) linkedList0);
      Comparator<Object> comparator1 = ComparatorUtils.nullLowComparator(comparator0);
      comparatorArray0[0] = comparator1;
      Object object0 = ComparatorUtils.min((Object) null, (Object) null, comparatorArray0[0]);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Transformer<Object, Predicate<Object>> transformer0 = ExceptionTransformer.exceptionTransformer();
      Comparator<Predicate<Object>> comparator0 = ComparatorUtils.transformedComparator((Comparator<Predicate<Object>>) null, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) transformer0);
      // Undeclared exception!
      try { 
        ComparatorUtils.min((Predicate<Object>) uniquePredicate0, (Predicate<Object>) uniquePredicate0, comparator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Comparator<Boolean>[] comparatorArray0 = (Comparator<Boolean>[]) Array.newInstance(Comparator.class, 5);
      Comparator<Boolean> comparator0 = ComparatorUtils.booleanComparator(false);
      comparatorArray0[0] = comparator0;
      LinkedList<Predicate<Boolean>> linkedList0 = new LinkedList<Predicate<Boolean>>();
      Predicate<Boolean> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Boolean>>) linkedList0);
      Closure<Boolean> closure0 = NOPClosure.nopClosure();
      Closure<Boolean> closure1 = WhileClosure.whileClosure((Predicate<? super Boolean>) predicate0, (Closure<? super Boolean>) closure0, false);
      ClosureTransformer<Boolean> closureTransformer0 = new ClosureTransformer<Boolean>(closure1);
      comparatorArray0[1] = comparator0;
      Comparator<Boolean> comparator1 = ComparatorUtils.transformedComparator(comparator0, (Transformer<? super Boolean, ? extends Boolean>) closureTransformer0);
      comparatorArray0[2] = comparator1;
      comparatorArray0[3] = comparatorArray0[2];
      comparatorArray0[4] = comparatorArray0[0];
      Comparator<Boolean> comparator2 = ComparatorUtils.chainedComparator(comparatorArray0);
      // Undeclared exception!
      ComparatorUtils.min(boolean0, boolean0, comparator2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        ComparatorUtils.min((Comparator<Transformer>) null, (Comparator<Transformer>) null, (Comparator<Comparator<Transformer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      predicateArray0[0] = (Predicate<Object>) nullIsFalsePredicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(anyPredicate0);
      LinkedList<Comparator<Predicate<Object>>> linkedList0 = new LinkedList<Comparator<Predicate<Object>>>();
      Comparator<Predicate<Object>> comparator0 = ComparatorUtils.chainedComparator((Collection<Comparator<Predicate<Object>>>) linkedList0);
      Transformer<Object, Predicate<Object>>[] transformerArray0 = (Transformer<Object, Predicate<Object>>[]) Array.newInstance(Transformer.class, 0);
      Transformer<Object, Predicate<Object>> transformer0 = ExceptionTransformer.exceptionTransformer();
      SwitchTransformer<Object, Predicate<Object>> switchTransformer0 = new SwitchTransformer<Object, Predicate<Object>>(predicateArray0, transformerArray0, transformer0);
      Comparator<Predicate<Object>> comparator1 = ComparatorUtils.transformedComparator(comparator0, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) switchTransformer0);
      // Undeclared exception!
      try { 
        ComparatorUtils.min((Predicate<Object>) notPredicate0, predicateArray0[2], comparator1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      Comparator<Object> comparator0 = ComparatorUtils.chainedComparator((Collection<Comparator<Object>>) linkedList0);
      // Undeclared exception!
      try { 
        ComparatorUtils.max((Object) comparator0, (Object) linkedList0, comparator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ComparatorChains must contain at least one Comparator
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        ComparatorUtils.max((Comparator<Comparator>) null, (Comparator<Comparator>) null, (Comparator<Comparator<Comparator>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        ComparatorUtils.chainedComparator((Collection<Comparator<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ComparatorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comparator<InstanceofPredicate>[] comparatorArray0 = (Comparator<InstanceofPredicate>[]) Array.newInstance(Comparator.class, 3);
      // Undeclared exception!
      try { 
        ComparatorUtils.chainedComparator(comparatorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // comparator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comparator<Integer> comparator0 = ComparatorUtils.naturalComparator();
      Comparator<Object> comparator1 = ComparatorUtils.nullHighComparator((Comparator<Object>) null);
      Object object0 = ComparatorUtils.max((Object) null, (Object) comparator0, comparator1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Comparator<Comparable<Integer>>> linkedList0 = new LinkedList<Comparator<Comparable<Integer>>>();
      Comparator<Comparable<Integer>> comparator0 = ComparatorUtils.chainedComparator((Collection<Comparator<Comparable<Integer>>>) linkedList0);
      Comparator<Comparable<Integer>> comparator1 = ComparatorUtils.nullHighComparator(comparator0);
      assertFalse(linkedList0.contains(comparator1));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comparator<Integer> comparator0 = ComparatorUtils.nullLowComparator((Comparator<Integer>) null);
      assertNotNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Comparator<Boolean> comparator0 = ComparatorUtils.naturalComparator();
      Boolean boolean0 = Boolean.FALSE;
      Boolean boolean1 = Boolean.TRUE;
      Boolean boolean2 = ComparatorUtils.min(boolean0, boolean1, comparator0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comparator<Boolean> comparator0 = ComparatorUtils.booleanComparator(false);
      // Undeclared exception!
      try { 
        ComparatorUtils.min((Object) comparator0, (Object) null, (Comparator<Object>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.comparators.BooleanComparator cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.collections4.comparators.ComparableComparator", e);
      }
  }
}
