/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 12:07:57 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter;
import org.apache.commons.collections4.bloomfilter.BloomFilter;
import org.apache.commons.collections4.bloomfilter.HasherBloomFilter;
import org.apache.commons.collections4.bloomfilter.hasher.DynamicHasher;
import org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentity;
import org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentityImpl;
import org.apache.commons.collections4.bloomfilter.hasher.Hasher;
import org.apache.commons.collections4.bloomfilter.hasher.Shape;
import org.apache.commons.collections4.bloomfilter.hasher.StaticHasher;
import org.apache.commons.collections4.bloomfilter.hasher.function.MD5Cyclic;
import org.apache.commons.collections4.bloomfilter.hasher.function.Murmur32x86Iterative;
import org.apache.commons.collections4.bloomfilter.hasher.function.ObjectsHashIterative;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class HasherBloomFilter_ESTest extends HasherBloomFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)30;
      linkedList0.add(byteArray0);
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur32x86Iterative0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 415, 415);
      StaticHasher staticHasher0 = new StaticHasher(dynamicHasher0, shape0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(staticHasher0, shape0);
      long[] longArray0 = hasherBloomFilter0.getBits();
      assertArrayEquals(new long[] {0L, 0L, (-9223372036854775808L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[6];
      linkedList0.add(byteArray0);
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur32x86Iterative0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 415, 415);
      StaticHasher staticHasher0 = new StaticHasher(dynamicHasher0, shape0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(staticHasher0, shape0);
      StaticHasher staticHasher1 = hasherBloomFilter0.getHasher();
      assertSame(staticHasher1, staticHasher0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      int int0 = hasherBloomFilter0.cardinality();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[6];
      linkedList0.add(byteArray0);
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur32x86Iterative0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 415, 415);
      StaticHasher staticHasher0 = new StaticHasher(dynamicHasher0, shape0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(staticHasher0, shape0);
      int int0 = hasherBloomFilter0.cardinality();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[0];
      linkedList0.add(byteArray0);
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 1, 2816);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur32x86Iterative0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      // Undeclared exception!
      hasherBloomFilter0.merge((Hasher) dynamicHasher0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      StaticHasher staticHasher0 = hasherBloomFilter0.getHasher();
      // Undeclared exception!
      try { 
        hasherBloomFilter0.merge((Hasher) staticHasher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 2, 2, 2);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      Shape shape1 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 2, 2);
      HasherBloomFilter hasherBloomFilter1 = new HasherBloomFilter(shape1);
      StaticHasher staticHasher0 = hasherBloomFilter0.getHasher();
      // Undeclared exception!
      try { 
        hasherBloomFilter1.merge((Hasher) staticHasher0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // shape (Shape[ Murmur3_x86_32-SIGNED-ITERATIVE n=2 m=2 k=1 ]) does not match internal shape (Shape[ Murmur3_x86_32-SIGNED-ITERATIVE n=2 m=2 k=2 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.StaticHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 27, 65280);
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      hasherBloomFilter0.merge((BloomFilter) arrayCountingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.merge((BloomFilter) hasherBloomFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 2, 2, 2);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      Shape shape1 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 2, 2);
      HasherBloomFilter hasherBloomFilter1 = new HasherBloomFilter(shape1);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.merge((BloomFilter) hasherBloomFilter1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // shape (Shape[ Murmur3_x86_32-SIGNED-ITERATIVE n=2 m=2 k=2 ]) does not match internal shape (Shape[ Murmur3_x86_32-SIGNED-ITERATIVE n=2 m=2 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.hasher.StaticHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[0];
      linkedList0.add(byteArray0);
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 17, 65280);
      DynamicHasher dynamicHasher0 = new DynamicHasher(objectsHashIterative0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      // Undeclared exception!
      hasherBloomFilter0.contains((Hasher) dynamicHasher0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      StaticHasher staticHasher0 = hasherBloomFilter0.getHasher();
      // Undeclared exception!
      try { 
        hasherBloomFilter0.contains((Hasher) staticHasher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      ObjectsHashIterative objectsHashIterative0 = new ObjectsHashIterative();
      Shape shape0 = new Shape((HashFunctionIdentity) objectsHashIterative0, 981, 981);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur32x86Iterative0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.contains((Hasher) dynamicHasher0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hasher (Murmur3_x86_32-SIGNED-ITERATIVE) is not the hasher for shape (Shape[ Objects32-SIGNED-ITERATIVE n=981 m=981 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[1];
      linkedList0.add(byteArray0);
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 24, 2147483645);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur32x86Iterative0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = null;
      try {
        hasherBloomFilter0 = new HasherBloomFilter((Hasher) null, (Shape) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      linkedList0.add((byte[]) null);
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) mD5Cyclic0, 94, 94);
      DynamicHasher dynamicHasher0 = new DynamicHasher(mD5Cyclic0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = null;
      try {
        hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.security.MessageDigest", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(mD5Cyclic0, linkedList0);
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 5337, 5337);
      HasherBloomFilter hasherBloomFilter0 = null;
      try {
        hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hasher (MD5-SIGNED-CYCLIC) is not the hasher for shape (Shape[ Murmur3_x86_32-SIGNED-ITERATIVE n=5337 m=5337 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashFunctionIdentity.Signedness hashFunctionIdentity_Signedness0 = HashFunctionIdentity.Signedness.UNSIGNED;
      HashFunctionIdentity.ProcessType hashFunctionIdentity_ProcessType0 = HashFunctionIdentity.ProcessType.CYCLIC;
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl("?w0$$U3X~o@z.I^:Se", "Number of bits in Shape is 0", hashFunctionIdentity_Signedness0, hashFunctionIdentity_ProcessType0, (-1472L));
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 1, 4);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      StaticHasher staticHasher0 = arrayCountingBloomFilter0.getHasher();
      boolean boolean0 = hasherBloomFilter0.merge((Hasher) staticHasher0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[6];
      linkedList0.add(byteArray0);
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur32x86Iterative0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 6, 6);
      StaticHasher staticHasher0 = new StaticHasher(dynamicHasher0, shape0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(staticHasher0, shape0);
      long[] longArray0 = hasherBloomFilter0.getBits();
      assertArrayEquals(new long[] {8L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, (int) (byte)1, 1436);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      long[] longArray0 = hasherBloomFilter0.getBits();
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[6];
      linkedList0.add(byteArray0);
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur32x86Iterative0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 415, 415);
      StaticHasher staticHasher0 = new StaticHasher(dynamicHasher0, shape0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      HasherBloomFilter hasherBloomFilter1 = new HasherBloomFilter(staticHasher0, shape0);
      boolean boolean0 = hasherBloomFilter0.merge((BloomFilter) hasherBloomFilter1);
      assertTrue(boolean0);
      
      long[] longArray0 = hasherBloomFilter0.getBits();
      assertArrayEquals(new long[] {64L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[6];
      linkedList0.add(byteArray0);
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur32x86Iterative0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, (int) (byte)1, 1436);
      StaticHasher staticHasher0 = new StaticHasher(dynamicHasher0, shape0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(staticHasher0, shape0);
      boolean boolean0 = hasherBloomFilter0.contains((Hasher) staticHasher0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur32x86Iterative0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 415, 415);
      StaticHasher staticHasher0 = new StaticHasher(dynamicHasher0, shape0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      boolean boolean0 = hasherBloomFilter0.contains((Hasher) staticHasher0);
      assertFalse(boolean0);
  }
}
