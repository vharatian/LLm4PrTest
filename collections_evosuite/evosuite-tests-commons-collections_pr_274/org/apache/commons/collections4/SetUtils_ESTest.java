/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 12:05:49 GMT 2025
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.NavigableSet;
import java.util.Set;
import java.util.SortedSet;
import java.util.TreeSet;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.SetUtils;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.CloneTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NOPTransformer;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.set.UnmodifiableSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SetUtils_ESTest extends SetUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TreeSet<LinkedHashSet<Object>> treeSet0 = new TreeSet<LinkedHashSet<Object>>();
      Integer[] integerArray0 = new Integer[5];
      Set<Integer> set0 = SetUtils.unmodifiableSet(integerArray0);
      boolean boolean0 = SetUtils.isEqualSet(treeSet0, set0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      SortedSet<Integer> sortedSet0 = SetUtils.unmodifiableSortedSet((SortedSet<Integer>) treeSet0);
      assertTrue(sortedSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      SortedSet<Integer> sortedSet0 = SetUtils.unmodifiableNavigableSet((NavigableSet<Integer>) treeSet0);
      assertEquals(0, sortedSet0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Transformer<Integer, Integer> transformer0 = NOPTransformer.nopTransformer();
      SortedSet<Integer> sortedSet0 = SetUtils.transformedSortedSet((SortedSet<Integer>) treeSet0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      assertEquals(0, sortedSet0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 1);
      InvokerTransformer<Object, Integer> invokerTransformer0 = new InvokerTransformer<Object, Integer>("HN;3Avj^u;?>)|X?MTV", classArray0, classArray0);
      SortedSet<Object> sortedSet0 = SetUtils.transformedNavigableSet((NavigableSet<Object>) treeSet0, (Transformer<? super Object, ?>) invokerTransformer0);
      assertEquals(0, sortedSet0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SortedSet<Integer> sortedSet0 = SetUtils.emptySortedSet();
      SortedSet<Integer> sortedSet1 = SetUtils.synchronizedSortedSet(sortedSet0);
      assertTrue(sortedSet1.equals((Object)sortedSet0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Set<Integer> set0 = SetUtils.synchronizedSet((Set<Integer>) treeSet0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SortedSet<Integer> sortedSet0 = SetUtils.emptySortedSet();
      Predicate<Integer> predicate0 = UniquePredicate.uniquePredicate();
      SortedSet<Integer> sortedSet1 = SetUtils.predicatedSortedSet(sortedSet0, (Predicate<? super Integer>) predicate0);
      assertTrue(sortedSet1.equals((Object)sortedSet0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SortedSet<Integer> sortedSet0 = SetUtils.emptySortedSet();
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.disjunction((Set<? extends Integer>) sortedSet0, (Set<? extends Integer>) sortedSet0);
      TreeSet<LinkedHashSet<Object>> treeSet0 = new TreeSet<LinkedHashSet<Object>>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(setUtils_SetView0, comparator0, comparatorPredicate_Criterion0);
      SortedSet<LinkedHashSet<Object>> sortedSet1 = SetUtils.predicatedNavigableSet((NavigableSet<LinkedHashSet<Object>>) treeSet0, (Predicate<? super LinkedHashSet<Object>>) comparatorPredicate0);
      assertTrue(sortedSet1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Set<Integer> set0 = SetUtils.newIdentityHashSet();
      Set<Integer> set1 = SetUtils.orderedSet(set0);
      assertTrue(set1.equals((Object)set0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TreeSet<LinkedHashSet<Object>> treeSet0 = new TreeSet<LinkedHashSet<Object>>();
      SetUtils.SetView<Object> setUtils_SetView0 = SetUtils.union((Set<?>) treeSet0, (Set<?>) treeSet0);
      int int0 = setUtils_SetView0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Set<Integer> set0 = SetUtils.unmodifiableSet(integerArray0);
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.difference((Set<? extends Integer>) set0, (Set<? extends Integer>) set0);
      Iterator<Integer> iterator0 = setUtils_SetView0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      HashSet<Integer> hashSet0 = SetUtils.hashSet(integerArray0);
      Set<Integer> set0 = SetUtils.emptyIfNull((Set<Integer>) hashSet0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer((-197));
      linkedHashSet0.add(integer0);
      Set<Integer> set0 = SetUtils.emptyIfNull((Set<Integer>) linkedHashSet0);
      assertTrue(set0.contains((-197)));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Integer, Object>[] hashMapArray0 = (HashMap<Integer, Object>[]) Array.newInstance(HashMap.class, 8);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      hashMapArray0[0] = hashMap0;
      Integer integer0 = new Integer(1081);
      hashMap0.put(integer0, hashMap0);
      // Undeclared exception!
      try { 
        SetUtils.unmodifiableSet((Object[]) hashMapArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Transformer<InstanceofPredicate, InstanceofPredicate> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        SetUtils.transformedSet((Set<InstanceofPredicate>) null, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Integer integer0 = new Integer(1955);
      treeSet0.add(integer0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Transformer<Object, Boolean> transformer0 = PredicateTransformer.predicateTransformer((Predicate<? super Object>) predicate0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      // Undeclared exception!
      try { 
        SetUtils.predicatedSortedSet((SortedSet<Integer>) treeSet0, (Predicate<? super Integer>) transformerPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(3890);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) integerArray0[2], (Equator<Object>) defaultEquator0);
      treeSet0.add(integer0);
      // Undeclared exception!
      try { 
        SetUtils.predicatedSortedSet((SortedSet<Integer>) treeSet0, (Predicate<? super Integer>) predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object '3890' - Predicate 'org.apache.commons.collections4.functors.NullPredicate@2' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Set<Integer> set0 = SetUtils.unmodifiableSet(integerArray0);
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.difference((Set<? extends Integer>) set0, (Set<? extends Integer>) set0);
      SetUtils.SetView<Integer> setUtils_SetView1 = SetUtils.union((Set<? extends Integer>) setUtils_SetView0, (Set<? extends Integer>) set0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        SetUtils.predicatedSet((Set<Integer>) setUtils_SetView1, (Predicate<? super Integer>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Set<Integer> set0 = SetUtils.unmodifiableSet(integerArray0);
      Predicate<Integer> predicate0 = NotNullPredicate.notNullPredicate();
      // Undeclared exception!
      try { 
        SetUtils.predicatedSet(set0, (Predicate<? super Integer>) predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'null' - Predicate 'org.apache.commons.collections4.functors.NotNullPredicate@5' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Integer integer0 = new Integer((-1834));
      treeSet0.add(integer0);
      // Undeclared exception!
      try { 
        SetUtils.predicatedNavigableSet((NavigableSet<Integer>) treeSet0, (Predicate<? super Integer>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Predicate<Integer> predicate0 = FalsePredicate.falsePredicate();
      Integer integer0 = new Integer((-1070));
      treeSet0.add(integer0);
      // Undeclared exception!
      try { 
        SetUtils.predicatedNavigableSet((NavigableSet<Integer>) treeSet0, (Predicate<? super Integer>) predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object '-1070' - Predicate 'org.apache.commons.collections4.functors.FalsePredicate@2' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Set<Integer> set0 = SetUtils.unmodifiableSet(integerArray0);
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.intersection((Set<? extends Integer>) set0, (Set<? extends Integer>) treeSet0);
      // Undeclared exception!
      try { 
        SetUtils.isEqualSet(set0, setUtils_SetView0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.disjunction((Set<? extends TreeSet<Object>>) null, (Set<? extends TreeSet<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // setA
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.difference((Set<? extends Integer>) null, (Set<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // setA
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Set<Predicate<Object>> set0 = SetUtils.unmodifiableSet((Predicate<Object>[]) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Integer[] integerArray0 = new Integer[11];
      HashSet<Integer> hashSet0 = SetUtils.hashSet(integerArray0);
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.difference((Set<? extends Integer>) hashSet0, (Set<? extends Integer>) hashSet0);
      SetUtils.SetView<Integer> setUtils_SetView1 = SetUtils.union((Set<? extends Integer>) setUtils_SetView0, (Set<? extends Integer>) hashSet0);
      boolean boolean0 = setUtils_SetView1.isEmpty();
      assertFalse(setUtils_SetView1.equals((Object)setUtils_SetView0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.union((Set<? extends Integer>) treeSet0, (Set<? extends Integer>) treeSet0);
      boolean boolean0 = setUtils_SetView0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Set<Integer> set0 = SetUtils.unmodifiableSet(integerArray0);
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.union((Set<? extends Integer>) set0, (Set<? extends Integer>) set0);
      boolean boolean0 = setUtils_SetView0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Set<Integer> set0 = SetUtils.unmodifiableSet(integerArray0);
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.union((Set<? extends Integer>) set0, (Set<? extends Integer>) set0);
      boolean boolean0 = SetUtils.isEqualSet(setUtils_SetView0, set0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Set<Integer> set0 = SetUtils.unmodifiableSet(integerArray0);
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.union((Set<? extends Integer>) set0, (Set<? extends Integer>) set0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) setUtils_SetView0;
      HashSet<Object> hashSet0 = SetUtils.hashSet(objectArray0);
      boolean boolean0 = SetUtils.isEqualSet(setUtils_SetView0, hashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Set<Integer> set0 = SetUtils.unmodifiableSet(integerArray0);
      boolean boolean0 = SetUtils.isEqualSet(set0, (Collection<?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.disjunction((Set<? extends Integer>) treeSet0, (Set<? extends Integer>) treeSet0);
      boolean boolean0 = SetUtils.isEqualSet((Collection<?>) null, setUtils_SetView0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean0 = SetUtils.isEqualSet(linkedHashSet0, linkedHashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer[] integerArray0 = new Integer[1];
      Set<Integer> set0 = SetUtils.unmodifiableSet(integerArray0);
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.intersection((Set<? extends Integer>) set0, (Set<? extends Integer>) linkedHashSet0);
      boolean boolean0 = setUtils_SetView0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Set<Integer> set0 = SetUtils.unmodifiableSet(integerArray0);
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.intersection((Set<? extends Integer>) set0, (Set<? extends Integer>) set0);
      boolean boolean0 = SetUtils.isEqualSet(setUtils_SetView0, set0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashSet<Integer> hashSet0 = SetUtils.hashSet((Integer[]) null);
      assertNull(hashSet0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Set<Integer> set0 = SetUtils.unmodifiableSet(integerArray0);
      int int0 = SetUtils.hashCodeForSet((Collection<Integer>) set0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = SetUtils.hashCodeForSet((Collection<Object>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Set<Predicate<FactoryTransformer<Object, Integer>>> set0 = SetUtils.emptyIfNull((Set<Predicate<FactoryTransformer<Object, Integer>>>) null);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Set<Integer> set0 = SetUtils.unmodifiableSet(integerArray0);
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.difference((Set<? extends Integer>) set0, (Set<? extends Integer>) set0);
      SetUtils.SetView<Integer> setUtils_SetView1 = SetUtils.disjunction((Set<? extends Integer>) setUtils_SetView0, (Set<? extends Integer>) set0);
      boolean boolean0 = setUtils_SetView1.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.disjunction((Set<? extends Integer>) treeSet0, (Set<? extends Integer>) treeSet0);
      boolean boolean0 = setUtils_SetView0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      HashSet<Integer> hashSet0 = SetUtils.hashSet(integerArray0);
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.disjunction((Set<? extends Integer>) hashSet0, (Set<? extends Integer>) hashSet0);
      boolean boolean0 = setUtils_SetView0.containsAll(hashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Set<Integer> set0 = SetUtils.unmodifiableSet(integerArray0);
      assertNotNull(set0);
      
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.difference((Set<? extends Integer>) set0, (Set<? extends Integer>) set0);
      boolean boolean0 = setUtils_SetView0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.difference((Set<? extends Integer>) linkedHashSet0, (Set<? extends Integer>) linkedHashSet0);
      boolean boolean0 = setUtils_SetView0.contains(linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      HashSet<Integer> hashSet0 = SetUtils.hashSet(integerArray0);
      assertNotNull(hashSet0);
      
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.difference((Set<? extends Integer>) hashSet0, (Set<? extends Integer>) hashSet0);
      SetUtils.SetView<Integer> setUtils_SetView1 = SetUtils.union((Set<? extends Integer>) setUtils_SetView0, (Set<? extends Integer>) hashSet0);
      boolean boolean0 = SetUtils.isEqualSet(setUtils_SetView1, setUtils_SetView0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.disjunction((Set<? extends Integer>) treeSet0, (Set<? extends Integer>) treeSet0);
      setUtils_SetView0.copyInto((Set<Integer>) treeSet0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.predicatedNavigableSet((NavigableSet<LinkedHashSet<InstanceofPredicate>>) null, (Predicate<? super LinkedHashSet<InstanceofPredicate>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SortedSet<Object> sortedSet0 = SetUtils.emptySortedSet();
      Transformer<Object, Object> transformer0 = CloneTransformer.cloneTransformer();
      Set<Object> set0 = SetUtils.transformedSet((Set<Object>) sortedSet0, (Transformer<? super Object, ?>) transformer0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.unmodifiableSet((Set<? extends ExceptionTransformer<Integer, Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.synchronizedSet((Set<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.unmodifiableNavigableSet((NavigableSet<InvokerTransformer<Integer, Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.unmodifiableSortedSet((SortedSet<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.union((Set<? extends Integer>) null, (Set<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // setA
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.synchronizedSortedSet((SortedSet<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.orderedSet((Set<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SortedSet<Integer> sortedSet0 = SetUtils.emptySortedSet();
      // Undeclared exception!
      try { 
        SetUtils.transformedSortedSet(sortedSet0, (Transformer<? super Integer, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.intersection((Set<?>) null, (Set<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // setA
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Set<Boolean> set0 = SetUtils.emptySet();
      Set<Boolean> set1 = SetUtils.unmodifiableSet((Set<? extends Boolean>) set0);
      assertEquals(0, set1.size());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      // Undeclared exception!
      try { 
        SetUtils.predicatedSortedSet((SortedSet<Integer>) treeSet0, (Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LinkedHashSet<UnmodifiableSet<Object>> linkedHashSet0 = new LinkedHashSet<UnmodifiableSet<Object>>();
      // Undeclared exception!
      try { 
        SetUtils.predicatedSet((Set<UnmodifiableSet<Object>>) linkedHashSet0, (Predicate<? super UnmodifiableSet<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // predicate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TreeSet<LinkedHashSet<Object>> treeSet0 = new TreeSet<LinkedHashSet<Object>>();
      // Undeclared exception!
      try { 
        SetUtils.transformedNavigableSet((NavigableSet<LinkedHashSet<Object>>) treeSet0, (Transformer<? super LinkedHashSet<Object>, ? extends LinkedHashSet<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer
         //
         verifyException("java.util.Objects", e);
      }
  }
}
