/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 12:02:45 GMT 2025
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.lang.ref.Reference;
import java.lang.ref.ReferenceQueue;
import java.lang.ref.SoftReference;
import java.lang.ref.WeakReference;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.map.AbstractHashedMap;
import org.apache.commons.collections4.map.AbstractReferenceMap;
import org.apache.commons.collections4.map.ReferenceIdentityMap;
import org.apache.commons.collections4.map.ReferenceMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AbstractReferenceMap_ESTest extends AbstractReferenceMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceMap<Integer, Integer> referenceMap0 = new ReferenceMap<Integer, Integer>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, true);
      AbstractReferenceMap.ReferenceMapIterator<Integer, Integer> abstractReferenceMap_ReferenceMapIterator0 = new AbstractReferenceMap.ReferenceMapIterator<Integer, Integer>(referenceMap0);
      abstractReferenceMap_ReferenceMapIterator0.expectedModCount = 1160;
      // Undeclared exception!
      try { 
        abstractReferenceMap_ReferenceMapIterator0.getKey();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceMap<Integer, WeakReference<Integer>> referenceMap0 = new ReferenceMap<Integer, WeakReference<Integer>>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      Integer integer0 = new Integer(2929);
      ReferenceQueue<Integer> referenceQueue0 = new ReferenceQueue<Integer>();
      WeakReference<Integer> weakReference0 = new WeakReference<Integer>(integer0, referenceQueue0);
      referenceMap0.put(integer0, weakReference0);
      WeakReference<Integer> weakReference1 = new WeakReference<Integer>(integer0, referenceQueue0);
      WeakReference<Integer> weakReference2 = referenceMap0.put(integer0, weakReference1);
      assertFalse(weakReference2.isEnqueued());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<Integer, Integer> referenceMap0 = new ReferenceMap<Integer, Integer>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      Integer integer0 = new Integer(3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      int int0 = referenceMap0.hashEntry(integer0, pipedInputStream0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AbstractHashedMap<Integer, WeakReference<Integer>> abstractHashedMap0 = new AbstractHashedMap<Integer, WeakReference<Integer>>(5);
      AbstractReferenceMap.ReferenceValues<WeakReference<Integer>> abstractReferenceMap_ReferenceValues0 = new AbstractReferenceMap.ReferenceValues<WeakReference<Integer>>(abstractHashedMap0);
      AbstractMap.SimpleImmutableEntry<Integer, PipedInputStream>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, PipedInputStream>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 3);
      AbstractMap.SimpleImmutableEntry<Integer, PipedInputStream>[] abstractMap_SimpleImmutableEntryArray1 = abstractReferenceMap_ReferenceValues0.toArray(abstractMap_SimpleImmutableEntryArray0);
      assertSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceIdentityMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> referenceIdentityMap0 = new ReferenceIdentityMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, false);
      AbstractReferenceMap.ReferenceKeySet<AbstractMap.SimpleImmutableEntry<Integer, Integer>> abstractReferenceMap_ReferenceKeySet0 = new AbstractReferenceMap.ReferenceKeySet<AbstractMap.SimpleImmutableEntry<Integer, Integer>>(referenceIdentityMap0);
      Integer[] integerArray0 = new Integer[2];
      Integer[] integerArray1 = abstractReferenceMap_ReferenceKeySet0.toArray(integerArray0);
      assertSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      Integer[] integerArray0 = new Integer[5];
      ReferenceMap<PipedInputStream, PipedInputStream> referenceMap0 = new ReferenceMap<PipedInputStream, PipedInputStream>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      AbstractReferenceMap.ReferenceEntrySet<PipedInputStream, PipedInputStream> abstractReferenceMap_ReferenceEntrySet0 = new AbstractReferenceMap.ReferenceEntrySet<PipedInputStream, PipedInputStream>(referenceMap0);
      Integer[] integerArray1 = abstractReferenceMap_ReferenceEntrySet0.toArray(integerArray0);
      assertSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ReferenceQueue<Integer> referenceQueue0 = new ReferenceQueue<Integer>();
      AbstractReferenceMap.SoftRef<Integer> abstractReferenceMap_SoftRef0 = new AbstractReferenceMap.SoftRef<Integer>(0, integer0, referenceQueue0);
      assertFalse(abstractReferenceMap_SoftRef0.isEnqueued());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceIdentityMap<PipedInputStream, Integer> referenceIdentityMap0 = new ReferenceIdentityMap<PipedInputStream, Integer>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      AbstractReferenceMap.ReferenceMapIterator<PipedInputStream, Integer> abstractReferenceMap_ReferenceMapIterator0 = new AbstractReferenceMap.ReferenceMapIterator<PipedInputStream, Integer>(referenceIdentityMap0);
      // Undeclared exception!
      try { 
        abstractReferenceMap_ReferenceMapIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceMap<Integer, WeakReference<Integer>> referenceMap0 = new ReferenceMap<Integer, WeakReference<Integer>>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      AbstractReferenceMap.ReferenceEntrySetIterator<Integer, WeakReference<Integer>> abstractReferenceMap_ReferenceEntrySetIterator0 = new AbstractReferenceMap.ReferenceEntrySetIterator<Integer, WeakReference<Integer>>(referenceMap0);
      // Undeclared exception!
      try { 
        abstractReferenceMap_ReferenceEntrySetIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      Integer integer0 = new Integer((-1277));
      ReferenceIdentityMap<WeakReference<Integer>, Integer> referenceIdentityMap0 = new ReferenceIdentityMap<WeakReference<Integer>, Integer>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, true);
      AbstractReferenceMap.WeakRef<Integer> abstractReferenceMap_WeakRef0 = new AbstractReferenceMap.WeakRef<Integer>(1748, integer0, (ReferenceQueue<? super Integer>) null);
      AbstractReferenceMap.ReferenceEntry<WeakReference<Integer>, Integer> abstractReferenceMap_ReferenceEntry0 = new AbstractReferenceMap.ReferenceEntry<WeakReference<Integer>, Integer>(referenceIdentityMap0, (AbstractHashedMap.HashEntry<WeakReference<Integer>, Integer>) null, 1943, abstractReferenceMap_WeakRef0, integer0);
      Integer integer1 = abstractReferenceMap_ReferenceEntry0.setValue(integer0);
      assertEquals((-1277), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceIdentityMap<Integer, Integer> referenceIdentityMap0 = new ReferenceIdentityMap<Integer, Integer>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 10, 1.0F);
      Integer integer0 = new Integer(3);
      AbstractReferenceMap.ReferenceEntry<Integer, Integer> abstractReferenceMap_ReferenceEntry0 = new AbstractReferenceMap.ReferenceEntry<Integer, Integer>(referenceIdentityMap0, (AbstractHashedMap.HashEntry<Integer, Integer>) null, 0, integer0, integer0);
      AbstractReferenceMap.ReferenceEntry<Integer, Integer> abstractReferenceMap_ReferenceEntry1 = abstractReferenceMap_ReferenceEntry0.next();
      assertNull(abstractReferenceMap_ReferenceEntry1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      Integer integer0 = new Integer((-1277));
      ReferenceIdentityMap<WeakReference<Integer>, Integer> referenceIdentityMap0 = new ReferenceIdentityMap<WeakReference<Integer>, Integer>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, true);
      AbstractReferenceMap.WeakRef<Integer> abstractReferenceMap_WeakRef0 = new AbstractReferenceMap.WeakRef<Integer>(1748, integer0, (ReferenceQueue<? super Integer>) null);
      AbstractReferenceMap.ReferenceEntry<WeakReference<Integer>, Integer> abstractReferenceMap_ReferenceEntry0 = new AbstractReferenceMap.ReferenceEntry<WeakReference<Integer>, Integer>(referenceIdentityMap0, (AbstractHashedMap.HashEntry<WeakReference<Integer>, Integer>) null, 1943, abstractReferenceMap_WeakRef0, integer0);
      AbstractReferenceMap.ReferenceEntry<WeakReference<Integer>, Integer> abstractReferenceMap_ReferenceEntry1 = new AbstractReferenceMap.ReferenceEntry<WeakReference<Integer>, Integer>(referenceIdentityMap0, abstractReferenceMap_ReferenceEntry0, 0, abstractReferenceMap_WeakRef0, integer0);
      WeakReference<Integer> weakReference0 = abstractReferenceMap_ReferenceEntry1.getKey();
      assertFalse(weakReference0.isEnqueued());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceIdentityMap<Integer, Integer> referenceIdentityMap0 = new ReferenceIdentityMap<Integer, Integer>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 0, 1.0F);
      AbstractReferenceMap.ReferenceMapIterator<Integer, Integer> abstractReferenceMap_ReferenceMapIterator0 = new AbstractReferenceMap.ReferenceMapIterator<Integer, Integer>(referenceIdentityMap0);
      // Undeclared exception!
      try { 
        abstractReferenceMap_ReferenceMapIterator0.nextEntry();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, WeakReference<Integer>> referenceMap0 = new ReferenceMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, WeakReference<Integer>>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, true);
      AbstractReferenceMap.ReferenceEntrySetIterator<AbstractMap.SimpleImmutableEntry<Integer, Integer>, WeakReference<Integer>> abstractReferenceMap_ReferenceEntrySetIterator0 = new AbstractReferenceMap.ReferenceEntrySetIterator<AbstractMap.SimpleImmutableEntry<Integer, Integer>, WeakReference<Integer>>(referenceMap0);
      boolean boolean0 = abstractReferenceMap_ReferenceEntrySetIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceIdentityMap<WeakReference<Integer>, WeakReference<Integer>> referenceIdentityMap0 = new ReferenceIdentityMap<WeakReference<Integer>, WeakReference<Integer>>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, false);
      AbstractReferenceMap.ReferenceMapIterator<WeakReference<Integer>, WeakReference<Integer>> abstractReferenceMap_ReferenceMapIterator0 = new AbstractReferenceMap.ReferenceMapIterator<WeakReference<Integer>, WeakReference<Integer>>(referenceIdentityMap0);
      AbstractReferenceMap.ReferenceEntry<WeakReference<Integer>, WeakReference<Integer>> abstractReferenceMap_ReferenceEntry0 = abstractReferenceMap_ReferenceMapIterator0.currentEntry();
      assertNull(abstractReferenceMap_ReferenceEntry0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<Integer, Integer> referenceMap0 = new ReferenceMap<Integer, Integer>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, true);
      AbstractReferenceMap.ReferenceBaseIterator<Integer, Integer> abstractReferenceMap_ReferenceBaseIterator0 = new AbstractReferenceMap.ReferenceBaseIterator<Integer, Integer>(referenceMap0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ReferenceIdentityMap<WeakReference<Integer>, Integer> referenceIdentityMap0 = new ReferenceIdentityMap<WeakReference<Integer>, Integer>();
      referenceIdentityMap0.purgeBeforeWrite();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<Integer, WeakReference<PipedInputStream>> referenceMap0 = new ReferenceMap<Integer, WeakReference<PipedInputStream>>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 259, 1.0F, false);
      referenceMap0.purgeBeforeRead();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<WeakReference<PipedInputStream>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> referenceMap0 = new ReferenceMap<WeakReference<PipedInputStream>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      referenceMap0.purge();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, WeakReference<Integer>> referenceMap0 = new ReferenceMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, WeakReference<Integer>>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      MapIterator<AbstractMap.SimpleImmutableEntry<Integer, Integer>, WeakReference<Integer>> mapIterator0 = referenceMap0.mapIterator();
      assertFalse(mapIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ReferenceIdentityMap<Integer, WeakReference<PipedInputStream>> referenceIdentityMap0 = new ReferenceIdentityMap<Integer, WeakReference<PipedInputStream>>();
      referenceIdentityMap0.init();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<Integer, WeakReference<Integer>> referenceMap0 = new ReferenceMap<Integer, WeakReference<Integer>>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, false);
      Set<Map.Entry<Integer, WeakReference<Integer>>> set0 = (Set<Map.Entry<Integer, WeakReference<Integer>>>)referenceMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ReferenceIdentityMap<Integer, WeakReference<Integer>> referenceIdentityMap0 = new ReferenceIdentityMap<Integer, WeakReference<Integer>>();
      Integer integer0 = new Integer(547);
      ReferenceQueue<Integer> referenceQueue0 = new ReferenceQueue<Integer>();
      AbstractReferenceMap.WeakRef<Integer> abstractReferenceMap_WeakRef0 = new AbstractReferenceMap.WeakRef<Integer>(547, integer0, referenceQueue0);
      referenceIdentityMap0.put(integer0, abstractReferenceMap_WeakRef0);
      int int0 = referenceIdentityMap0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ReferenceMap<WeakReference<PipedInputStream>, WeakReference<Integer>> referenceMap0 = new ReferenceMap<WeakReference<PipedInputStream>, WeakReference<Integer>>();
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      boolean boolean0 = referenceMap0.isKeyType(abstractReferenceMap_ReferenceStrength0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceMap<Integer, WeakReference<PipedInputStream>> referenceMap0 = new ReferenceMap<Integer, WeakReference<PipedInputStream>>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.SOFT;
      boolean boolean0 = referenceMap0.isKeyType(abstractReferenceMap_ReferenceStrength1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Integer integer0 = new Integer(1);
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceIdentityMap<PipedInputStream, PipedInputStream> referenceIdentityMap0 = new ReferenceIdentityMap<PipedInputStream, PipedInputStream>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 1, 1);
      Integer integer1 = new Integer(1);
      boolean boolean0 = referenceIdentityMap0.isEqualKey(integer1, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceMap<Integer, WeakReference<Integer>> referenceMap0 = new ReferenceMap<Integer, WeakReference<Integer>>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      Integer integer0 = new Integer(1);
      ReferenceQueue<Integer> referenceQueue0 = new ReferenceQueue<Integer>();
      AbstractReferenceMap.WeakRef<Integer> abstractReferenceMap_WeakRef0 = new AbstractReferenceMap.WeakRef<Integer>(3760, integer0, referenceQueue0);
      referenceMap0.put(integer0, abstractReferenceMap_WeakRef0);
      boolean boolean0 = referenceMap0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ReferenceIdentityMap<WeakReference<Integer>, WeakReference<Integer>> referenceIdentityMap0 = new ReferenceIdentityMap<WeakReference<Integer>, WeakReference<Integer>>();
      Integer integer0 = new Integer((-624));
      AbstractHashedMap.HashEntry<WeakReference<Integer>, WeakReference<Integer>> abstractHashedMap_HashEntry0 = referenceIdentityMap0.getEntry(integer0);
      assertNull(abstractHashedMap_HashEntry0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceIdentityMap<WeakReference<Integer>, WeakReference<PipedInputStream>> referenceIdentityMap0 = new ReferenceIdentityMap<WeakReference<Integer>, WeakReference<PipedInputStream>>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      Iterator<WeakReference<Integer>> iterator0 = referenceIdentityMap0.createKeySetIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceIdentityMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, WeakReference<Integer>> referenceIdentityMap0 = new ReferenceIdentityMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, WeakReference<Integer>>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      Iterator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, WeakReference<Integer>>> iterator0 = (Iterator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, WeakReference<Integer>>>)referenceIdentityMap0.createEntrySetIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceIdentityMap<WeakReference<Integer>, WeakReference<Integer>> referenceIdentityMap0 = new ReferenceIdentityMap<WeakReference<Integer>, WeakReference<Integer>>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, false);
      AbstractReferenceMap.ReferenceEntry<WeakReference<Integer>, WeakReference<Integer>> abstractReferenceMap_ReferenceEntry0 = referenceIdentityMap0.createEntry((AbstractHashedMap.HashEntry<WeakReference<Integer>, WeakReference<Integer>>) null, 1, (WeakReference<Integer>) null, (WeakReference<Integer>) null);
      assertNotNull(abstractReferenceMap_ReferenceEntry0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceIdentityMap<Integer, Integer> referenceIdentityMap0 = new ReferenceIdentityMap<Integer, Integer>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 0, 1.0F);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        referenceIdentityMap0.put(integer0, (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // value
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceIdentityMap<PipedInputStream, PipedInputStream> referenceIdentityMap0 = new ReferenceIdentityMap<PipedInputStream, PipedInputStream>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 3079, 3079);
      // Undeclared exception!
      try { 
        referenceIdentityMap0.isEqualKey((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.ReferenceIdentityMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Integer integer0 = new Integer((-1));
      ReferenceIdentityMap<PipedInputStream, PipedInputStream> referenceIdentityMap0 = new ReferenceIdentityMap<PipedInputStream, PipedInputStream>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 61, 61, true);
      // Undeclared exception!
      try { 
        referenceIdentityMap0.isEqualKey(integer0, pipedInputStream0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.PipedInputStream cannot be cast to java.lang.ref.Reference
         //
         verifyException("org.apache.commons.collections4.map.ReferenceIdentityMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceMap<Integer, WeakReference<Integer>> referenceMap0 = new ReferenceMap<Integer, WeakReference<Integer>>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      boolean boolean0 = referenceMap0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ReferenceIdentityMap<Integer, WeakReference<Integer>> referenceIdentityMap0 = new ReferenceIdentityMap<Integer, WeakReference<Integer>>();
      int int0 = referenceIdentityMap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceIdentityMap<PipedInputStream, WeakReference<Integer>> referenceIdentityMap0 = new ReferenceIdentityMap<PipedInputStream, WeakReference<Integer>>();
      boolean boolean0 = referenceIdentityMap0.isValueType(abstractReferenceMap_ReferenceStrength0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ReferenceIdentityMap<PipedInputStream, WeakReference<Integer>> referenceIdentityMap0 = new ReferenceIdentityMap<PipedInputStream, WeakReference<Integer>>();
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      boolean boolean0 = referenceIdentityMap0.isValueType(abstractReferenceMap_ReferenceStrength0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Integer integer0 = new Integer(1);
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceIdentityMap<PipedInputStream, PipedInputStream> referenceIdentityMap0 = new ReferenceIdentityMap<PipedInputStream, PipedInputStream>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 1, 1);
      boolean boolean0 = referenceIdentityMap0.isEqualKey(integer0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceIdentityMap<PipedInputStream, Integer> referenceIdentityMap0 = new ReferenceIdentityMap<PipedInputStream, Integer>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Integer integer0 = new Integer((-1));
      referenceIdentityMap0.put(pipedInputStream0, integer0);
      Integer integer1 = referenceIdentityMap0.put(pipedInputStream0, integer0);
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ReferenceIdentityMap<PipedInputStream, AbstractMap.SimpleImmutableEntry<Integer, PipedInputStream>> referenceIdentityMap0 = new ReferenceIdentityMap<PipedInputStream, AbstractMap.SimpleImmutableEntry<Integer, PipedInputStream>>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 0, 1338, true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
      referenceIdentityMap0.doWriteObject(objectOutputStream0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<Integer, Integer> referenceMap0 = new ReferenceMap<Integer, Integer>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      AbstractReferenceMap.ReferenceMapIterator<Integer, Integer> abstractReferenceMap_ReferenceMapIterator0 = new AbstractReferenceMap.ReferenceMapIterator<Integer, Integer>(referenceMap0);
      // Undeclared exception!
      try { 
        abstractReferenceMap_ReferenceMapIterator0.getValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ReferenceMap<Integer, Integer> referenceMap0 = new ReferenceMap<Integer, Integer>();
      AbstractReferenceMap.ReferenceMapIterator<Integer, Integer> abstractReferenceMap_ReferenceMapIterator0 = new AbstractReferenceMap.ReferenceMapIterator<Integer, Integer>(referenceMap0);
      // Undeclared exception!
      try { 
        abstractReferenceMap_ReferenceMapIterator0.getKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getKey() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<PipedInputStream, AbstractMap.SimpleImmutableEntry<PipedInputStream, Integer>> referenceMap0 = new ReferenceMap<PipedInputStream, AbstractMap.SimpleImmutableEntry<PipedInputStream, Integer>>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      AbstractReferenceMap.ReferenceMapIterator<PipedInputStream, AbstractMap.SimpleImmutableEntry<PipedInputStream, Integer>> abstractReferenceMap_ReferenceMapIterator0 = new AbstractReferenceMap.ReferenceMapIterator<PipedInputStream, AbstractMap.SimpleImmutableEntry<PipedInputStream, Integer>>(referenceMap0);
      // Undeclared exception!
      try { 
        abstractReferenceMap_ReferenceMapIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceIdentityMap<WeakReference<Integer>, Integer> referenceIdentityMap0 = new ReferenceIdentityMap<WeakReference<Integer>, Integer>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, true);
      AbstractReferenceMap.ReferenceValuesIterator<Integer> abstractReferenceMap_ReferenceValuesIterator0 = new AbstractReferenceMap.ReferenceValuesIterator<Integer>(referenceIdentityMap0);
      Integer integer0 = new Integer(786);
      WeakReference<Integer> weakReference0 = new WeakReference<Integer>(integer0);
      referenceIdentityMap0.put(weakReference0, integer0);
      // Undeclared exception!
      try { 
        abstractReferenceMap_ReferenceValuesIterator0.next();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      Integer integer0 = new Integer(3);
      ReferenceMap<Integer, Integer> referenceMap0 = new ReferenceMap<Integer, Integer>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      AbstractReferenceMap.ReferenceEntry<Integer, Integer> abstractReferenceMap_ReferenceEntry0 = new AbstractReferenceMap.ReferenceEntry<Integer, Integer>(referenceMap0, (AbstractHashedMap.HashEntry<Integer, Integer>) null, 16, integer0, (Integer) null);
      boolean boolean0 = abstractReferenceMap_ReferenceEntry0.purge((Reference<?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<Integer, Integer> referenceMap0 = new ReferenceMap<Integer, Integer>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, false);
      Integer integer0 = new Integer(2);
      AbstractReferenceMap.ReferenceEntry<Integer, Integer> abstractReferenceMap_ReferenceEntry0 = new AbstractReferenceMap.ReferenceEntry<Integer, Integer>(referenceMap0, (AbstractHashedMap.HashEntry<Integer, Integer>) null, 6, integer0, integer0);
      SoftReference<Integer> softReference0 = new SoftReference<Integer>(integer0);
      boolean boolean0 = abstractReferenceMap_ReferenceEntry0.purge(softReference0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceMap<Integer, WeakReference<Integer>> referenceMap0 = new ReferenceMap<Integer, WeakReference<Integer>>((AbstractReferenceMap.ReferenceStrength) null, abstractReferenceMap_ReferenceStrength0, true);
      Integer integer0 = new Integer((-707));
      ReferenceQueue<Integer> referenceQueue0 = new ReferenceQueue<Integer>();
      AbstractReferenceMap.WeakRef<Integer> abstractReferenceMap_WeakRef0 = new AbstractReferenceMap.WeakRef<Integer>(0, integer0, referenceQueue0);
      // Undeclared exception!
      try { 
        referenceMap0.put(integer0, abstractReferenceMap_WeakRef0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ReferenceMap<Integer, WeakReference<Integer>> referenceMap0 = new ReferenceMap<Integer, WeakReference<Integer>>();
      Integer integer0 = new Integer(1);
      ReferenceQueue<Integer> referenceQueue0 = new ReferenceQueue<Integer>();
      WeakReference<Integer> weakReference0 = new WeakReference<Integer>(integer0, referenceQueue0);
      referenceMap0.put(integer0, weakReference0);
      AbstractReferenceMap.ReferenceValues<WeakReference<Integer>> abstractReferenceMap_ReferenceValues0 = new AbstractReferenceMap.ReferenceValues<WeakReference<Integer>>(referenceMap0);
      AbstractMap.SimpleImmutableEntry<Integer, PipedInputStream>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, PipedInputStream>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 8);
      // Undeclared exception!
      try { 
        abstractReferenceMap_ReferenceValues0.toArray(abstractMap_SimpleImmutableEntryArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceIdentityMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> referenceIdentityMap0 = new ReferenceIdentityMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, false);
      AbstractReferenceMap.ReferenceKeySet<AbstractMap.SimpleImmutableEntry<Integer, Integer>> abstractReferenceMap_ReferenceKeySet0 = new AbstractReferenceMap.ReferenceKeySet<AbstractMap.SimpleImmutableEntry<Integer, Integer>>(referenceIdentityMap0);
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(2060);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      referenceIdentityMap0.put(abstractMap_SimpleImmutableEntry0, integer0);
      // Undeclared exception!
      try { 
        abstractReferenceMap_ReferenceKeySet0.toArray(integerArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ReferenceMap<Integer, WeakReference<Integer>> referenceMap0 = new ReferenceMap<Integer, WeakReference<Integer>>();
      Integer integer0 = new Integer(1);
      ReferenceQueue<Integer> referenceQueue0 = new ReferenceQueue<Integer>();
      WeakReference<Integer> weakReference0 = new WeakReference<Integer>(integer0, referenceQueue0);
      referenceMap0.put(integer0, weakReference0);
      WeakReference<Integer> weakReference1 = referenceMap0.put(integer0, weakReference0);
      assertFalse(weakReference1.isEnqueued());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Integer integer0 = new Integer(3097);
      ReferenceMap<Integer, Integer> referenceMap0 = new ReferenceMap<Integer, Integer>();
      int int0 = referenceMap0.hashEntry((Object) null, integer0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<Integer, Integer> referenceMap0 = new ReferenceMap<Integer, Integer>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      Integer integer0 = new Integer(13);
      int int0 = referenceMap0.hashEntry(integer0, integer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceIdentityMap<PipedInputStream, Integer> referenceIdentityMap0 = new ReferenceIdentityMap<PipedInputStream, Integer>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      boolean boolean0 = referenceIdentityMap0.containsKey((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Integer integer0 = new Integer(2060);
      WeakReference<Integer> weakReference0 = new WeakReference<Integer>(integer0);
      ReferenceIdentityMap<AbstractMap.SimpleImmutableEntry<PipedInputStream, PipedInputStream>, WeakReference<Integer>> referenceIdentityMap0 = new ReferenceIdentityMap<AbstractMap.SimpleImmutableEntry<PipedInputStream, PipedInputStream>, WeakReference<Integer>>();
      referenceIdentityMap0.purge(weakReference0);
      assertFalse(weakReference0.isEnqueued());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceMap<Integer, PipedInputStream> referenceMap0 = new ReferenceMap<Integer, PipedInputStream>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 3078, 3078, true);
      Set<Integer> set0 = referenceMap0.keySet();
      assertFalse(set0.contains(3078));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ReferenceMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> referenceMap0 = new ReferenceMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      referenceMap0.clear();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceIdentityMap<PipedInputStream, Integer> referenceIdentityMap0 = new ReferenceIdentityMap<PipedInputStream, Integer>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      Integer integer0 = referenceIdentityMap0.remove((Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceIdentityMap<PipedInputStream, WeakReference<PipedInputStream>> referenceIdentityMap0 = new ReferenceIdentityMap<PipedInputStream, WeakReference<PipedInputStream>>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      Integer integer0 = new Integer(14);
      WeakReference<PipedInputStream> weakReference0 = referenceIdentityMap0.remove((Object) integer0);
      assertNull(weakReference0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      Integer integer0 = new Integer(3);
      ReferenceMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> referenceMap0 = new ReferenceMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      Integer integer1 = referenceMap0.get(integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<WeakReference<Integer>, PipedInputStream> referenceMap0 = new ReferenceMap<WeakReference<Integer>, PipedInputStream>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 3760, 1, true);
      boolean boolean0 = referenceMap0.containsValue((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ReferenceMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> referenceMap0 = new ReferenceMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      Integer integer0 = new Integer(3085);
      boolean boolean0 = referenceMap0.containsValue(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceIdentityMap<Integer, PipedInputStream> referenceIdentityMap0 = new ReferenceIdentityMap<Integer, PipedInputStream>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      boolean boolean0 = referenceIdentityMap0.containsKey(pipedInputStream0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      // Undeclared exception!
      try { 
        AbstractReferenceMap.ReferenceStrength.resolve(12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.resolve(1);
      assertEquals(AbstractReferenceMap.ReferenceStrength.SOFT, abstractReferenceMap_ReferenceStrength0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.resolve(2);
      assertEquals(AbstractReferenceMap.ReferenceStrength.WEAK, abstractReferenceMap_ReferenceStrength0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.resolve(0);
      assertEquals(AbstractReferenceMap.ReferenceStrength.HARD, abstractReferenceMap_ReferenceStrength0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<PipedInputStream, PipedInputStream> referenceMap0 = new ReferenceMap<PipedInputStream, PipedInputStream>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      AbstractReferenceMap.ReferenceEntrySet<PipedInputStream, PipedInputStream> abstractReferenceMap_ReferenceEntrySet0 = new AbstractReferenceMap.ReferenceEntrySet<PipedInputStream, PipedInputStream>(referenceMap0);
      Integer[] integerArray0 = new Integer[7];
      PipedInputStream pipedInputStream0 = new PipedInputStream(5);
      referenceMap0.put(pipedInputStream0, pipedInputStream0);
      // Undeclared exception!
      try { 
        abstractReferenceMap_ReferenceEntrySet0.toArray(integerArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceIdentityMap<Integer, PipedInputStream> referenceIdentityMap0 = new ReferenceIdentityMap<Integer, PipedInputStream>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, false);
      AbstractReferenceMap.ReferenceKeySetIterator<Integer> abstractReferenceMap_ReferenceKeySetIterator0 = new AbstractReferenceMap.ReferenceKeySetIterator<Integer>(referenceIdentityMap0);
      // Undeclared exception!
      try { 
        abstractReferenceMap_ReferenceKeySetIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Integer integer0 = new Integer(3097);
      ReferenceMap<Integer, Integer> referenceMap0 = new ReferenceMap<Integer, Integer>();
      AbstractReferenceMap.ReferenceMapIterator<Integer, Integer> abstractReferenceMap_ReferenceMapIterator0 = new AbstractReferenceMap.ReferenceMapIterator<Integer, Integer>(referenceMap0);
      // Undeclared exception!
      try { 
        abstractReferenceMap_ReferenceMapIterator0.setValue(integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // setValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceMap<PipedInputStream, Integer> referenceMap0 = new ReferenceMap<PipedInputStream, Integer>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      AbstractReferenceMap.ReferenceEntrySet<PipedInputStream, Integer> abstractReferenceMap_ReferenceEntrySet0 = new AbstractReferenceMap.ReferenceEntrySet<PipedInputStream, Integer>(referenceMap0);
      Object[] objectArray0 = abstractReferenceMap_ReferenceEntrySet0.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      AbstractHashedMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> abstractHashedMap0 = new AbstractHashedMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(6, (-1.0F), 3048);
      AbstractReferenceMap.ReferenceValues<AbstractMap.SimpleImmutableEntry<Integer, Integer>> abstractReferenceMap_ReferenceValues0 = new AbstractReferenceMap.ReferenceValues<AbstractMap.SimpleImmutableEntry<Integer, Integer>>(abstractHashedMap0);
      Object[] objectArray0 = abstractReferenceMap_ReferenceValues0.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceIdentityMap<PipedInputStream, Integer> referenceIdentityMap0 = new ReferenceIdentityMap<PipedInputStream, Integer>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      Collection<Integer> collection0 = referenceIdentityMap0.values();
      Collection<Integer> collection1 = referenceIdentityMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ReferenceIdentityMap<WeakReference<Integer>, Integer> referenceIdentityMap0 = new ReferenceIdentityMap<WeakReference<Integer>, Integer>();
      BiFunction<WeakReference<Integer>, Integer, Integer> biFunction0 = (BiFunction<WeakReference<Integer>, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      referenceIdentityMap0.replaceAll(biFunction0);
      Set<Map.Entry<WeakReference<Integer>, Integer>> set0 = (Set<Map.Entry<WeakReference<Integer>, Integer>>)referenceIdentityMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceMap<WeakReference<Integer>, Integer> referenceMap0 = new ReferenceMap<WeakReference<Integer>, Integer>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 1338, 64.8839F, true);
      Iterator<Integer> iterator0 = referenceMap0.createValuesIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceIdentityMap<Integer, Integer> referenceIdentityMap0 = new ReferenceIdentityMap<Integer, Integer>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, true);
      AbstractReferenceMap.ReferenceKeySet<Integer> abstractReferenceMap_ReferenceKeySet0 = new AbstractReferenceMap.ReferenceKeySet<Integer>(referenceIdentityMap0);
      Object[] objectArray0 = abstractReferenceMap_ReferenceKeySet0.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Integer integer0 = new Integer(2060);
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<Integer, Integer> referenceMap0 = new ReferenceMap<Integer, Integer>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      AbstractReferenceMap.ReferenceEntry<Integer, Integer> abstractReferenceMap_ReferenceEntry0 = new AbstractReferenceMap.ReferenceEntry<Integer, Integer>(referenceMap0, (AbstractHashedMap.HashEntry<Integer, Integer>) null, 1, integer0, (Integer) null);
      abstractReferenceMap_ReferenceEntry0.onPurge();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Integer integer0 = new Integer(2060);
      ReferenceIdentityMap<PipedInputStream, AbstractMap.SimpleImmutableEntry<Integer, PipedInputStream>> referenceIdentityMap0 = new ReferenceIdentityMap<PipedInputStream, AbstractMap.SimpleImmutableEntry<Integer, PipedInputStream>>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      AbstractMap.SimpleImmutableEntry<Integer, PipedInputStream> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, PipedInputStream>(integer0, pipedInputStream0);
      AbstractMap.SimpleEntry<Integer, PipedInputStream> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, PipedInputStream>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<Integer, PipedInputStream> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, PipedInputStream>(abstractMap_SimpleEntry0);
      referenceIdentityMap0.put(pipedInputStream0, abstractMap_SimpleImmutableEntry1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("f6", true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      try { 
        referenceIdentityMap0.doWriteObject(objectOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceIdentityMap<Integer, PipedInputStream> referenceIdentityMap0 = new ReferenceIdentityMap<Integer, PipedInputStream>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, false);
      Integer integer0 = new Integer(3);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      referenceIdentityMap0.put(integer0, pipedInputStream0);
      AbstractReferenceMap.ReferenceKeySetIterator<Integer> abstractReferenceMap_ReferenceKeySetIterator0 = new AbstractReferenceMap.ReferenceKeySetIterator<Integer>(referenceIdentityMap0);
      Object object0 = abstractReferenceMap_ReferenceKeySetIterator0.next();
      assertEquals(3, object0);
  }
}
