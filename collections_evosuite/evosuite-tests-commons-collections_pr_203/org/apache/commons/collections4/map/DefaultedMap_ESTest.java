/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 15:13:06 GMT 2025
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.CloneTransformer;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateTransformer;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.map.DefaultedMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class DefaultedMap_ESTest extends DefaultedMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(648);
      hashMap0.put(integer0, integer0);
      Transformer<Object, Integer> transformer0 = InvokerTransformer.invokerTransformer("&QQ5SN&RI/");
      Map<Integer, Integer> map0 = DefaultedMap.defaultedMap((Map<Integer, Integer>) hashMap0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 2);
      HashMap<Integer, InstantiateTransformer<Integer>> hashMap0 = new HashMap<Integer, InstantiateTransformer<Integer>>(0);
      InstantiateTransformer<Integer> instantiateTransformer0 = new InstantiateTransformer<Integer>(classArray0, classArray0);
      InstantiateTransformer<Integer> instantiateTransformer1 = hashMap0.put(integer0, instantiateTransformer0);
      DefaultedMap<Integer, InstantiateTransformer<Integer>> defaultedMap0 = DefaultedMap.defaultedMap((Map<Integer, InstantiateTransformer<Integer>>) hashMap0, instantiateTransformer1);
      assertEquals(1, defaultedMap0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Transformer<Object, InstanceofPredicate> transformer0 = ExceptionTransformer.exceptionTransformer();
      DefaultedMap<Object, InstanceofPredicate> defaultedMap0 = new DefaultedMap<Object, InstanceofPredicate>(transformer0);
      // Undeclared exception!
      try { 
        defaultedMap0.get(transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FactoryTransformer<Object, Class<Object>> factoryTransformer0 = new FactoryTransformer<Object, Class<Object>>((Factory<? extends Class<Object>>) null);
      DefaultedMap<Class<Object>, Class<Object>> defaultedMap0 = new DefaultedMap<Class<Object>, Class<Object>>((Transformer<? super Class<Object>, ? extends Class<Object>>) factoryTransformer0);
      // Undeclared exception!
      try { 
        defaultedMap0.get(factoryTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.FactoryTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Transformer<InstanceofPredicate, InstanceofPredicate> transformer0 = CloneTransformer.cloneTransformer();
      DefaultedMap<InstanceofPredicate, Object> defaultedMap0 = new DefaultedMap<InstanceofPredicate, Object>(transformer0);
      // Undeclared exception!
      try { 
        defaultedMap0.get(transformer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The prototype must be cloneable via a public clone method
         //
         verifyException("org.apache.commons.collections4.functors.PrototypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<InstantiateTransformer<Object>, InstantiateTransformer<Object>> hashMap0 = new HashMap<InstantiateTransformer<Object>, InstantiateTransformer<Object>>();
      // Undeclared exception!
      try { 
        DefaultedMap.defaultedMap((Map<InstantiateTransformer<Object>, InstantiateTransformer<Object>>) hashMap0, (Transformer<? super InstantiateTransformer<Object>, ? extends InstantiateTransformer<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        DefaultedMap.defaultedMap((Map<Predicate<Object>, Object>) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultedMap<Object, InstanceofPredicate> defaultedMap0 = null;
      try {
        defaultedMap0 = new DefaultedMap<Object, InstanceofPredicate>((Transformer<? super Object, ? extends InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // defaultValueTransformer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<InstanceofPredicate, Object> hashMap0 = new HashMap<InstanceofPredicate, Object>();
      DefaultedMap<InstanceofPredicate, Object> defaultedMap0 = null;
      try {
        defaultedMap0 = new DefaultedMap<InstanceofPredicate, Object>(hashMap0, (Transformer<? super InstanceofPredicate, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // defaultValueTransformer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Transformer<Object, InstanceofPredicate> transformer0 = ExceptionTransformer.exceptionTransformer();
      DefaultedMap<Object, InstanceofPredicate> defaultedMap0 = new DefaultedMap<Object, InstanceofPredicate>(transformer0);
      defaultedMap0.put(transformer0, (InstanceofPredicate) null);
      InstanceofPredicate instanceofPredicate0 = defaultedMap0.get(transformer0);
      assertNull(instanceofPredicate0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<InstanceofPredicate, Predicate<InstanceofPredicate>> hashMap0 = new HashMap<InstanceofPredicate, Predicate<InstanceofPredicate>>();
      Transformer<InstanceofPredicate, Predicate<InstanceofPredicate>> transformer0 = ConstantTransformer.nullTransformer();
      Map<InstanceofPredicate, Predicate<InstanceofPredicate>> map0 = DefaultedMap.defaultedMap((Map<InstanceofPredicate, Predicate<InstanceofPredicate>>) hashMap0, (Transformer<? super InstanceofPredicate, ? extends Predicate<InstanceofPredicate>>) transformer0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantFactory<InstanceofPredicate> constantFactory0 = new ConstantFactory<InstanceofPredicate>((InstanceofPredicate) null);
      FactoryTransformer<Object, InstanceofPredicate> factoryTransformer0 = new FactoryTransformer<Object, InstanceofPredicate>(constantFactory0);
      DefaultedMap<Predicate<Object>, InstanceofPredicate> defaultedMap0 = new DefaultedMap<Predicate<Object>, InstanceofPredicate>((Transformer<? super Predicate<Object>, ? extends InstanceofPredicate>) factoryTransformer0);
      BiFunction<Object, Object, InstanceofPredicate> biFunction0 = (BiFunction<Object, Object, InstanceofPredicate>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      InstanceofPredicate instanceofPredicate0 = defaultedMap0.computeIfPresent((Predicate<Object>) null, biFunction0);
      DefaultedMap<Predicate<Object>, InstanceofPredicate> defaultedMap1 = DefaultedMap.defaultedMap((Map<Predicate<Object>, InstanceofPredicate>) defaultedMap0, instanceofPredicate0);
      assertTrue(defaultedMap1.equals((Object)defaultedMap0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Transformer<Object, InstanceofPredicate> transformer0 = ExceptionTransformer.exceptionTransformer();
      DefaultedMap<InstanceofPredicate, Object> defaultedMap0 = new DefaultedMap<InstanceofPredicate, Object>((Object) transformer0);
      DefaultedMap<InstanceofPredicate, Object> defaultedMap1 = new DefaultedMap<InstanceofPredicate, Object>(defaultedMap0, transformer0);
      Object object0 = defaultedMap1.get(transformer0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Factory<Class<InstanceofPredicate>> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
      try { 
        DefaultedMap.defaultedMap((Map<DefaultedMap<InstanceofPredicate, InstanceofPredicate>, Class<InstanceofPredicate>>) null, (Factory<? extends Class<InstanceofPredicate>>) factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }
}
