/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 15:06:07 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import java.util.LinkedList;
import org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter;
import org.apache.commons.collections4.bloomfilter.BitSetBloomFilter;
import org.apache.commons.collections4.bloomfilter.BloomFilter;
import org.apache.commons.collections4.bloomfilter.HasherBloomFilter;
import org.apache.commons.collections4.bloomfilter.hasher.DynamicHasher;
import org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentity;
import org.apache.commons.collections4.bloomfilter.hasher.HashFunctionIdentityImpl;
import org.apache.commons.collections4.bloomfilter.hasher.Hasher;
import org.apache.commons.collections4.bloomfilter.hasher.Shape;
import org.apache.commons.collections4.bloomfilter.hasher.StaticHasher;
import org.apache.commons.collections4.bloomfilter.hasher.function.MD5Cyclic;
import org.apache.commons.collections4.bloomfilter.hasher.function.Murmur128x64Cyclic;
import org.apache.commons.collections4.bloomfilter.hasher.function.Murmur32x86Iterative;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AbstractBloomFilter_ESTest extends AbstractBloomFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Murmur128x64Cyclic murmur128x64Cyclic0 = new Murmur128x64Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x64Cyclic0, 56, 2659);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[4];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x64Cyclic0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      int int0 = hasherBloomFilter0.xorCardinality(bitSetBloomFilter0);
      assertEquals(33, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Murmur128x64Cyclic murmur128x64Cyclic0 = new Murmur128x64Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x64Cyclic0, 1, 1);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[1];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x64Cyclic0, linkedList0);
      LinkedList<byte[]> linkedList1 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher1 = new DynamicHasher(murmur128x64Cyclic0, linkedList1);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher1, shape0);
      HasherBloomFilter hasherBloomFilter1 = new HasherBloomFilter(dynamicHasher0, shape0);
      int int0 = hasherBloomFilter0.xorCardinality(hasherBloomFilter1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Murmur128x64Cyclic murmur128x64Cyclic0 = new Murmur128x64Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[12];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x64Cyclic0, linkedList0);
      byte[] byteArray1 = new byte[2];
      linkedList0.add(byteArray1);
      DynamicHasher dynamicHasher1 = new DynamicHasher(murmur128x64Cyclic0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x64Cyclic0, 80, 80, 8);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      HasherBloomFilter hasherBloomFilter1 = new HasherBloomFilter(dynamicHasher1, shape0);
      int int0 = hasherBloomFilter0.xorCardinality(hasherBloomFilter1);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Murmur128x64Cyclic murmur128x64Cyclic0 = new Murmur128x64Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[6];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x64Cyclic0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x64Cyclic0, (int) (byte)12, 7, (int) (byte)15);
      LinkedList<byte[]> linkedList1 = new LinkedList<byte[]>();
      byte[] byteArray1 = new byte[8];
      byteArray1[2] = (byte)12;
      byteArray1[4] = (byte)12;
      linkedList1.add(byteArray1);
      DynamicHasher dynamicHasher1 = new DynamicHasher(murmur128x64Cyclic0, linkedList1);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher1, shape0);
      HasherBloomFilter hasherBloomFilter1 = new HasherBloomFilter(dynamicHasher0, shape0);
      boolean boolean0 = hasherBloomFilter0.contains((BloomFilter) hasherBloomFilter1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Murmur128x64Cyclic murmur128x64Cyclic0 = new Murmur128x64Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x64Cyclic0, 4, 1652);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[8];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x64Cyclic0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      int int0 = hasherBloomFilter0.andCardinality(hasherBloomFilter0);
      assertEquals(286, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Murmur128x64Cyclic murmur128x64Cyclic0 = new Murmur128x64Cyclic();
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl(murmur128x64Cyclic0);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 1719, 1719);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      hasherBloomFilter0.verifyShape(shape0);
      assertEquals(1, shape0.getNumberOfHashFunctions());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Murmur128x64Cyclic murmur128x64Cyclic0 = new Murmur128x64Cyclic();
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl(murmur128x64Cyclic0);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 1719, 1719);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      hasherBloomFilter0.verifyShape(bitSetBloomFilter0);
      assertEquals(0, hasherBloomFilter0.cardinality());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Murmur128x64Cyclic murmur128x64Cyclic0 = new Murmur128x64Cyclic();
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl(murmur128x64Cyclic0);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 1719, 1719);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedList0.descendingIterator();
      StaticHasher staticHasher0 = new StaticHasher(iterator0, shape0);
      hasherBloomFilter0.verifyHasher(staticHasher0);
      assertEquals(0, hasherBloomFilter0.cardinality());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Murmur128x64Cyclic murmur128x64Cyclic0 = new Murmur128x64Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x64Cyclic0, 22, 22);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[3];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x64Cyclic0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      int int0 = hasherBloomFilter0.orCardinality(hasherBloomFilter0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      Shape shape0 = hasherBloomFilter0.getShape();
      assertNull(shape0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Murmur128x64Cyclic murmur128x64Cyclic0 = new Murmur128x64Cyclic();
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl(murmur128x64Cyclic0);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 1719, 1719);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      Shape shape1 = hasherBloomFilter0.getShape();
      assertSame(shape1, shape0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Murmur128x64Cyclic murmur128x64Cyclic0 = new Murmur128x64Cyclic();
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl(murmur128x64Cyclic0);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 1, 5382);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      Shape shape1 = arrayCountingBloomFilter0.getShape();
      assertEquals(5382, shape1.getNumberOfBits());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Murmur128x64Cyclic murmur128x64Cyclic0 = new Murmur128x64Cyclic();
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl(murmur128x64Cyclic0);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 1719, 1719);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      StaticHasher staticHasher0 = bitSetBloomFilter0.getHasher();
      boolean boolean0 = bitSetBloomFilter0.contains((Hasher) staticHasher0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Murmur128x64Cyclic murmur128x64Cyclic0 = new Murmur128x64Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x64Cyclic0, 27, 27);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      StaticHasher staticHasher0 = hasherBloomFilter0.getHasher();
      boolean boolean0 = hasherBloomFilter0.contains((Hasher) staticHasher0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Murmur128x64Cyclic murmur128x64Cyclic0 = new Murmur128x64Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x64Cyclic0, 27, 27);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      int int0 = hasherBloomFilter0.cardinality();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Murmur128x64Cyclic murmur128x64Cyclic0 = new Murmur128x64Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x64Cyclic0, 22, 22);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[3];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x64Cyclic0, linkedList0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      int int0 = hasherBloomFilter0.cardinality();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) mD5Cyclic0, 65280, 65280);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      hasherBloomFilter0.xorCardinality(arrayCountingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.xorCardinality(hasherBloomFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Murmur128x64Cyclic murmur128x64Cyclic0 = new Murmur128x64Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x64Cyclic0, 1, 1);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        bitSetBloomFilter0.xorCardinality(hasherBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape null is not the same as Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=1 m=1 k=1 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        bitSetBloomFilter0.verifyShape((Shape) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Murmur128x64Cyclic murmur128x64Cyclic0 = new Murmur128x64Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x64Cyclic0, 13, 13);
      Shape shape1 = new Shape((HashFunctionIdentity) murmur128x64Cyclic0, 13, 13, 13);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape1);
      // Undeclared exception!
      try { 
        arrayCountingBloomFilter0.verifyShape(shape0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=13 m=13 k=1 ] is not the same as Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=13 m=13 k=13 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter((Shape) null);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        bitSetBloomFilter0.verifyShape(hasherBloomFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Murmur128x64Cyclic murmur128x64Cyclic0 = new Murmur128x64Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x64Cyclic0, 56, 56);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter((Shape) null);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.verifyShape(bitSetBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape null is not the same as Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=56 m=56 k=1 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      StaticHasher staticHasher0 = hasherBloomFilter0.getHasher();
      // Undeclared exception!
      try { 
        hasherBloomFilter0.verifyHasher(staticHasher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 42, 42);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(mD5Cyclic0, linkedList0);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.verifyHasher(dynamicHasher0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hasher (MD5-SIGNED-CYCLIC) is not the hasher for shape (Shape[ Murmur3_x86_32-SIGNED-ITERATIVE n=42 m=42 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 104718, 104718);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      hasherBloomFilter0.orCardinality(arrayCountingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        bitSetBloomFilter0.orCardinality(bitSetBloomFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Murmur128x64Cyclic murmur128x64Cyclic0 = new Murmur128x64Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x64Cyclic0, 19702, 19702);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      arrayCountingBloomFilter0.isFull();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        bitSetBloomFilter0.isFull();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Murmur128x64Cyclic murmur128x64Cyclic0 = new Murmur128x64Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[6];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x64Cyclic0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x64Cyclic0, 7, 1719, 3885);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      // Undeclared exception!
      hasherBloomFilter0.contains((Hasher) dynamicHasher0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      StaticHasher staticHasher0 = hasherBloomFilter0.getHasher();
      // Undeclared exception!
      try { 
        hasherBloomFilter0.contains((Hasher) staticHasher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 118, 118);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      MD5Cyclic mD5Cyclic0 = new MD5Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(mD5Cyclic0, linkedList0);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.contains((Hasher) dynamicHasher0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hasher (MD5-SIGNED-CYCLIC) is not the hasher for shape (Shape[ Murmur3_x86_32-SIGNED-ITERATIVE n=118 m=118 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Murmur128x64Cyclic murmur128x64Cyclic0 = new Murmur128x64Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x64Cyclic0, 2, 104729);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      // Undeclared exception!
      hasherBloomFilter0.contains((BloomFilter) arrayCountingBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.contains((BloomFilter) hasherBloomFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Murmur128x64Cyclic murmur128x64Cyclic0 = new Murmur128x64Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x64Cyclic0, 56, 56);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter((Shape) null);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.contains((BloomFilter) bitSetBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape null is not the same as Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=56 m=56 k=1 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      Shape shape0 = new Shape(murmur32x86Iterative0, 967, 0.015625);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      bitSetBloomFilter0.xorCardinality(arrayCountingBloomFilter0);
      // Undeclared exception!
      arrayCountingBloomFilter0.andCardinality(bitSetBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.andCardinality(hasherBloomFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 44, 44);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter((Shape) null);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.andCardinality(bitSetBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape null is not the same as Shape[ Murmur3_x86_32-SIGNED-ITERATIVE n=44 m=44 k=1 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Murmur128x64Cyclic murmur128x64Cyclic0 = new Murmur128x64Cyclic();
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl(murmur128x64Cyclic0);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 1719, 1719);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      int int0 = bitSetBloomFilter0.andCardinality(hasherBloomFilter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Murmur128x64Cyclic murmur128x64Cyclic0 = new Murmur128x64Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[6];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x64Cyclic0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x64Cyclic0, (int) (byte)12, 7, (int) (byte)15);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      int int0 = hasherBloomFilter0.xorCardinality(hasherBloomFilter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Murmur128x64Cyclic murmur128x64Cyclic0 = new Murmur128x64Cyclic();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x64Cyclic0, 13, 13);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(shape0);
      Shape shape1 = new Shape((HashFunctionIdentity) murmur128x64Cyclic0, 13, 13, 13);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape1);
      // Undeclared exception!
      try { 
        hasherBloomFilter0.orCardinality(arrayCountingBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Shape Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=13 m=13 k=13 ] is not the same as Shape[ Murmur3_x64_128-SIGNED-CYCLIC n=13 m=13 k=1 ]
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Murmur128x64Cyclic murmur128x64Cyclic0 = new Murmur128x64Cyclic();
      Murmur32x86Iterative murmur32x86Iterative0 = new Murmur32x86Iterative();
      Shape shape0 = new Shape((HashFunctionIdentity) murmur32x86Iterative0, 1, 1);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x64Cyclic0, linkedList0);
      // Undeclared exception!
      try { 
        bitSetBloomFilter0.contains((Hasher) dynamicHasher0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hasher (Murmur3_x64_128-SIGNED-CYCLIC) is not the hasher for shape (Shape[ Murmur3_x86_32-SIGNED-ITERATIVE n=1 m=1 k=1 ])
         //
         verifyException("org.apache.commons.collections4.bloomfilter.AbstractBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Murmur128x64Cyclic murmur128x64Cyclic0 = new Murmur128x64Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[6];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x64Cyclic0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x64Cyclic0, (int) (byte)12, 7, (int) (byte)15);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      bitSetBloomFilter0.merge((BloomFilter) hasherBloomFilter0);
      boolean boolean0 = bitSetBloomFilter0.isFull();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Murmur128x64Cyclic murmur128x64Cyclic0 = new Murmur128x64Cyclic();
      HashFunctionIdentityImpl hashFunctionIdentityImpl0 = new HashFunctionIdentityImpl(murmur128x64Cyclic0);
      Shape shape0 = new Shape((HashFunctionIdentity) hashFunctionIdentityImpl0, 1719, 1719);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      boolean boolean0 = bitSetBloomFilter0.isFull();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Murmur128x64Cyclic murmur128x64Cyclic0 = new Murmur128x64Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      byte[] byteArray0 = new byte[6];
      linkedList0.add(byteArray0);
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x64Cyclic0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x64Cyclic0, (int) (byte)12, 7, (int) (byte)15);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      BitSetBloomFilter bitSetBloomFilter0 = new BitSetBloomFilter(shape0);
      bitSetBloomFilter0.merge((BloomFilter) hasherBloomFilter0);
      boolean boolean0 = hasherBloomFilter0.contains((BloomFilter) bitSetBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Murmur128x64Cyclic murmur128x64Cyclic0 = new Murmur128x64Cyclic();
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      DynamicHasher dynamicHasher0 = new DynamicHasher(murmur128x64Cyclic0, linkedList0);
      Shape shape0 = new Shape((HashFunctionIdentity) murmur128x64Cyclic0, (int) (byte)12, 7, (int) (byte)15);
      HasherBloomFilter hasherBloomFilter0 = new HasherBloomFilter(dynamicHasher0, shape0);
      int int0 = hasherBloomFilter0.orCardinality(hasherBloomFilter0);
      assertEquals(0, int0);
  }
}
