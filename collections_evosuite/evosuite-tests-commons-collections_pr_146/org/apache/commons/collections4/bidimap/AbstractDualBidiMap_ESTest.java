/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 16:10:49 GMT 2025
 */

package org.apache.commons.collections4.bidimap;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.SortedMap;
import java.util.function.BiFunction;
import java.util.function.Predicate;
import org.apache.commons.collections4.BidiMap;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedBidiMap;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.bidimap.AbstractDualBidiMap;
import org.apache.commons.collections4.bidimap.DualHashBidiMap;
import org.apache.commons.collections4.bidimap.DualLinkedHashBidiMap;
import org.apache.commons.collections4.bidimap.DualTreeBidiMap;
import org.apache.commons.collections4.bidimap.TreeBidiMap;
import org.apache.commons.collections4.bidimap.UnmodifiableBidiMap;
import org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AbstractDualBidiMap_ESTest extends AbstractDualBidiMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(469);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      DualLinkedHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      dualLinkedHashBidiMap0.put(integer0, abstractMap_SimpleImmutableEntry0);
      AbstractDualBidiMap.EntrySet<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> abstractDualBidiMap_EntrySet0 = new AbstractDualBidiMap.EntrySet<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(dualLinkedHashBidiMap0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      boolean boolean0 = abstractDualBidiMap_EntrySet0.remove(abstractMap_SimpleImmutableEntry1);
      assertFalse(dualLinkedHashBidiMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(469);
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      Integer integer1 = new Integer(469);
      dualLinkedHashBidiMap0.put(integer0, integer1);
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Integer>(dualLinkedHashBidiMap0);
      boolean boolean0 = abstractDualBidiMap_Values0.remove(integer1);
      assertEquals(0, dualLinkedHashBidiMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>();
      AbstractDualBidiMap.KeySet<Integer> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<Integer>(dualHashBidiMap0);
      Integer integer0 = new Integer(469);
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>(dualHashBidiMap0, dualHashBidiMap0, dualHashBidiMap0);
      Integer integer1 = new Integer(0);
      dualLinkedHashBidiMap0.put(integer0, integer1);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) integer1);
      boolean boolean0 = abstractDualBidiMap_KeySet0.removeIf(predicate0);
      assertEquals(1, dualHashBidiMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(469);
      Integer integer1 = new Integer((-2147483644));
      DualHashBidiMap<Comparable<Integer>, Integer> dualHashBidiMap0 = new DualHashBidiMap<Comparable<Integer>, Integer>();
      dualHashBidiMap0.put(integer1, integer0);
      AbstractDualBidiMap.KeySet<Comparable<Integer>> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<Comparable<Integer>>(dualHashBidiMap0);
      boolean boolean0 = abstractDualBidiMap_KeySet0.remove(integer1);
      assertFalse(abstractDualBidiMap_KeySet0.contains((-2147483644)));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>();
      DualHashBidiMap<Integer, Integer> dualHashBidiMap1 = new DualHashBidiMap<Integer, Integer>(dualHashBidiMap0, dualHashBidiMap0, dualHashBidiMap0);
      AbstractDualBidiMap.KeySet<Integer> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<Integer>(dualHashBidiMap1);
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Integer>(dualHashBidiMap1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>();
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      DualHashBidiMap<Integer, Integer> dualHashBidiMap1 = new DualHashBidiMap<Integer, Integer>(dualHashBidiMap0, dualHashBidiMap0, dualLinkedHashBidiMap0);
      dualHashBidiMap0.putAll(dualHashBidiMap1);
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Integer>(dualHashBidiMap1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(469);
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      Integer integer1 = new Integer(469);
      dualLinkedHashBidiMap0.put(integer0, integer1);
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(dualLinkedHashBidiMap0);
      DualTreeBidiMap<Integer, Object> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Object>(treeBidiMap0);
      Object object0 = dualTreeBidiMap0.removeValue(integer1);
      assertNotNull(object0);
      assertTrue(dualTreeBidiMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      dualTreeBidiMap0.put(integer0, integer0);
      Integer integer1 = new Integer(0);
      dualTreeBidiMap0.remove((Object) integer1);
      assertTrue(dualTreeBidiMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>();
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>(dualTreeBidiMap0);
      Integer integer0 = new Integer((-3183));
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, (Integer) null);
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      AbstractDualBidiMap.MapEntry<Integer, Integer> abstractDualBidiMap_MapEntry0 = new AbstractDualBidiMap.MapEntry<Integer, Integer>(abstractMap_SimpleEntry0, dualLinkedHashBidiMap0);
      Integer integer1 = abstractDualBidiMap_MapEntry0.setValue(integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<AbstractMap.SimpleImmutableEntry<Integer, Integer>> comparator1 = (Comparator<AbstractMap.SimpleImmutableEntry<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(comparator0, comparator1);
      Set<AbstractMap.SimpleImmutableEntry<Integer, Integer>> set0 = dualTreeBidiMap0.values();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DualTreeBidiMap<DualTreeBidiMap<Integer, Integer>, AbstractDualBidiMap.KeySet<Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<DualTreeBidiMap<Integer, Integer>, AbstractDualBidiMap.KeySet<Integer>>();
      dualTreeBidiMap0.clear();
      assertTrue(dualTreeBidiMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>(dualLinkedHashBidiMap0);
      OrderedMapIterator<Integer, Integer> orderedMapIterator0 = treeBidiMap0.mapIterator();
      AbstractDualBidiMap.KeySetIterator<Integer> abstractDualBidiMap_KeySetIterator0 = new AbstractDualBidiMap.KeySetIterator<Integer>(orderedMapIterator0, dualLinkedHashBidiMap0);
      // Undeclared exception!
      try { 
        abstractDualBidiMap_KeySetIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator remove() can only be called once after next()
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$KeySetIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DualHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> dualHashBidiMap0 = new DualHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      DualHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualHashBidiMap1 = new DualHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      Comparator<AbstractMap.SimpleImmutableEntry<Integer, Integer>> comparator0 = (Comparator<AbstractMap.SimpleImmutableEntry<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(comparator0, comparator0);
      AbstractDualBidiMap.BidiMapIterator<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(dualTreeBidiMap0);
      AbstractDualBidiMap.ValuesIterator<AbstractMap.SimpleImmutableEntry<Integer, Integer>> abstractDualBidiMap_ValuesIterator0 = new AbstractDualBidiMap.ValuesIterator<AbstractMap.SimpleImmutableEntry<Integer, Integer>>(abstractDualBidiMap_BidiMapIterator0, dualHashBidiMap1);
      AbstractDualBidiMap.KeySetIterator<AbstractMap.SimpleImmutableEntry<Integer, Integer>> abstractDualBidiMap_KeySetIterator0 = new AbstractDualBidiMap.KeySetIterator<AbstractMap.SimpleImmutableEntry<Integer, Integer>>(abstractDualBidiMap_ValuesIterator0, dualHashBidiMap0);
      // Undeclared exception!
      try { 
        abstractDualBidiMap_KeySetIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap$PrivateEntryIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>(treeBidiMap0);
      Set<Map.Entry<Integer, Integer>> set0 = (Set<Map.Entry<Integer, Integer>>)dualTreeBidiMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>();
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Integer>(dualHashBidiMap0);
      dualHashBidiMap0.put((Integer) null, (Integer) null);
      AbstractDualBidiMap.KeySet<Integer> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<Integer>(dualHashBidiMap0);
      boolean boolean0 = abstractDualBidiMap_KeySet0.retainAll(abstractDualBidiMap_Values0);
      assertEquals(1, dualHashBidiMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DualTreeBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      DualTreeBidiMap<AbstractDualBidiMap.KeySet<Integer>, Integer> dualTreeBidiMap1 = new DualTreeBidiMap<AbstractDualBidiMap.KeySet<Integer>, Integer>(comparator0, comparator0);
      AbstractDualBidiMap.KeySet<Integer> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<Integer>(dualTreeBidiMap0);
      dualTreeBidiMap1.put(abstractDualBidiMap_KeySet0, (Integer) null);
      int int0 = dualTreeBidiMap1.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      DualHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualHashBidiMap0 = new DualHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      dualHashBidiMap0.put(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry0);
      dualHashBidiMap0.put(abstractMap_SimpleImmutableEntry0, (AbstractMap.SimpleImmutableEntry<Integer, Integer>) null);
      assertEquals(1, dualHashBidiMap0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>(hashMap0);
      boolean boolean0 = dualLinkedHashBidiMap0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(469);
      Integer integer1 = dualLinkedHashBidiMap0.put(integer0, integer0);
      assertNull(integer1);
      
      BidiMap<Integer, Integer> bidiMap0 = dualLinkedHashBidiMap0.inverseBidiMap();
      assertNotNull(bidiMap0);
      assertEquals(1, bidiMap0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>();
      Integer integer0 = dualHashBidiMap0.getKey((Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DualTreeBidiMap<DualHashBidiMap<String, String>, String> dualTreeBidiMap0 = new DualTreeBidiMap<DualHashBidiMap<String, String>, String>();
      String string0 = dualTreeBidiMap0.get("aD',9|hY$ZFds");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      DualHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualHashBidiMap0 = new DualHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      boolean boolean0 = dualLinkedHashBidiMap0.equals(dualHashBidiMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      DualTreeBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      AbstractDualBidiMap.BidiMapIterator<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(dualTreeBidiMap0);
      AbstractDualBidiMap.ValuesIterator<Integer> abstractDualBidiMap_ValuesIterator0 = new AbstractDualBidiMap.ValuesIterator<Integer>(abstractDualBidiMap_BidiMapIterator0, dualLinkedHashBidiMap0);
      Iterator<Integer> iterator0 = dualLinkedHashBidiMap0.createValuesIterator(abstractDualBidiMap_ValuesIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      DualHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualHashBidiMap0 = new DualHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(dualTreeBidiMap0, dualTreeBidiMap0, dualTreeBidiMap0);
      Iterator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>> iterator0 = (Iterator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      Iterator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>> iterator1 = (Iterator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>>)dualHashBidiMap0.createEntrySetIterator(iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>((Map<Integer, Integer>) null, (Map<Integer, Integer>) null, dualLinkedHashBidiMap0);
      // Undeclared exception!
      try { 
        dualHashBidiMap0.values();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$Values", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>(comparator0, comparator0);
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>((Map<Integer, Integer>) null, (Map<Integer, Integer>) null, dualTreeBidiMap0);
      // Undeclared exception!
      try { 
        dualLinkedHashBidiMap0.removeValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DualTreeBidiMap<Comparable<Integer>, DualTreeBidiMap<Integer, Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<Comparable<Integer>, DualTreeBidiMap<Integer, Integer>>();
      DualHashBidiMap<DualTreeBidiMap<Integer, Integer>, Comparable<Integer>> dualHashBidiMap0 = new DualHashBidiMap<DualTreeBidiMap<Integer, Integer>, Comparable<Integer>>((Map<DualTreeBidiMap<Integer, Integer>, Comparable<Integer>>) null, (Map<Comparable<Integer>, DualTreeBidiMap<Integer, Integer>>) null, dualTreeBidiMap0);
      // Undeclared exception!
      try { 
        dualHashBidiMap0.remove((Object) dualTreeBidiMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        dualHashBidiMap0.putAll((Map<? extends Integer, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Integer integer0 = new Integer(469);
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      BidiMap<Comparable<Integer>, Comparable<Integer>> bidiMap0 = UnmodifiableBidiMap.unmodifiableBidiMap((BidiMap<? extends Comparable<Integer>, ? extends Comparable<Integer>>) dualLinkedHashBidiMap0);
      DualLinkedHashBidiMap<Comparable<Integer>, Comparable<Integer>> dualLinkedHashBidiMap1 = new DualLinkedHashBidiMap<Comparable<Integer>, Comparable<Integer>>(bidiMap0, bidiMap0, bidiMap0);
      // Undeclared exception!
      try { 
        dualLinkedHashBidiMap1.put(integer0, integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.UnmodifiableBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>(hashMap0);
      Integer integer0 = new Integer(61);
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>(dualLinkedHashBidiMap0);
      // Undeclared exception!
      try { 
        dualTreeBidiMap0.put(integer0, (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>(comparator0, comparator0);
      SortedMap<Integer, Integer> sortedMap0 = dualTreeBidiMap0.subMap(integer0, integer0);
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>(dualTreeBidiMap0, sortedMap0, dualTreeBidiMap0);
      // Undeclared exception!
      try { 
        dualHashBidiMap0.put(integer0, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // key out of range
         //
         verifyException("java.util.TreeMap$NavigableSubMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      DualTreeBidiMap<Object, DualLinkedHashBidiMap<Object, Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<Object, DualLinkedHashBidiMap<Object, Integer>>();
      DualLinkedHashBidiMap<Object, Integer> dualLinkedHashBidiMap1 = new DualLinkedHashBidiMap<Object, Integer>(dualLinkedHashBidiMap0);
      // Undeclared exception!
      try { 
        dualTreeBidiMap0.put(dualLinkedHashBidiMap0, dualLinkedHashBidiMap1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DualTreeBidiMap<Comparable<String>, Comparable<Object>> dualTreeBidiMap0 = new DualTreeBidiMap<Comparable<String>, Comparable<Object>>();
      DualLinkedHashBidiMap<Comparable<Object>, Comparable<String>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Comparable<Object>, Comparable<String>>((Map<Comparable<Object>, Comparable<String>>) null, dualTreeBidiMap0, dualTreeBidiMap0);
      // Undeclared exception!
      try { 
        dualLinkedHashBidiMap0.mapIterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>();
      DualLinkedHashBidiMap<AbstractDualBidiMap.KeySet<Integer>, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<AbstractDualBidiMap.KeySet<Integer>, Integer>();
      DualTreeBidiMap<AbstractDualBidiMap.KeySet<Integer>, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<AbstractDualBidiMap.KeySet<Integer>, Integer>(dualLinkedHashBidiMap0);
      // Undeclared exception!
      try { 
        dualTreeBidiMap0.getKey(dualHashBidiMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DualTreeBidiMap<DualHashBidiMap<Integer, Integer>, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<DualHashBidiMap<Integer, Integer>, Integer>();
      // Undeclared exception!
      try { 
        dualTreeBidiMap0.get((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      DualTreeBidiMap<Comparable<Integer>, UnmodifiableBidiMap<Object, Integer>> dualTreeBidiMap0 = new DualTreeBidiMap<Comparable<Integer>, UnmodifiableBidiMap<Object, Integer>>();
      // Undeclared exception!
      try { 
        dualTreeBidiMap0.get(dualLinkedHashBidiMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        dualTreeBidiMap0.createValuesIterator((Iterator<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DualHashBidiMap<Object, AbstractDualBidiMap.KeySet<Integer>> dualHashBidiMap0 = new DualHashBidiMap<Object, AbstractDualBidiMap.KeySet<Integer>>();
      // Undeclared exception!
      try { 
        dualHashBidiMap0.createEntrySetIterator((Iterator<Map.Entry<Object, AbstractDualBidiMap.KeySet<Integer>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> dualTreeBidiMap1 = new DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>(dualTreeBidiMap0);
      OrderedMapIterator<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> orderedMapIterator0 = dualTreeBidiMap0.mapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DualHashBidiMap<Object, Integer> dualHashBidiMap0 = new DualHashBidiMap<Object, Integer>();
      Set<Object> set0 = dualHashBidiMap0.keySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(469);
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>(dualHashBidiMap0, dualHashBidiMap0, dualHashBidiMap0);
      dualLinkedHashBidiMap0.put(integer0, integer0);
      AbstractDualBidiMap.KeySet<Integer> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<Integer>(dualLinkedHashBidiMap0);
      assertEquals(1, dualLinkedHashBidiMap0.size());
      assertEquals(1, dualHashBidiMap0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      Integer integer1 = dualTreeBidiMap0.remove((Object) integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Integer integer0 = new Integer(469);
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      dualLinkedHashBidiMap0.put((Integer) null, integer0);
      dualLinkedHashBidiMap0.put(integer0, integer0);
      assertEquals(1, dualLinkedHashBidiMap0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>(hashMap0);
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>(dualLinkedHashBidiMap0, dualLinkedHashBidiMap0, dualLinkedHashBidiMap0);
      boolean boolean0 = dualHashBidiMap0.containsKey((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      assertTrue(dualLinkedHashBidiMap0.isEmpty());
      
      Integer integer0 = new Integer(469);
      dualLinkedHashBidiMap0.put(integer0, integer0);
      boolean boolean0 = dualLinkedHashBidiMap0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Comparator<AbstractMap.SimpleImmutableEntry<Integer, Integer>> comparator0 = (Comparator<AbstractMap.SimpleImmutableEntry<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>(comparator0, comparator1);
      dualTreeBidiMap0.hashCode();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>((Map<Integer, Integer>) null, (Map<Integer, Integer>) null, dualLinkedHashBidiMap0);
      // Undeclared exception!
      try { 
        dualHashBidiMap0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DualHashBidiMap<Object, Integer> dualHashBidiMap0 = new DualHashBidiMap<Object, Integer>();
      AbstractDualBidiMap.BidiMapIterator<Object, Integer> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<Object, Integer>(dualHashBidiMap0);
      String string0 = abstractDualBidiMap_BidiMapIterator0.toString();
      assertEquals("MapIterator[]", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Integer integer0 = new Integer(469);
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      Integer integer1 = dualLinkedHashBidiMap0.put(integer0, integer0);
      dualLinkedHashBidiMap0.put(integer1, (Integer) null);
      AbstractDualBidiMap.BidiMapIterator<Integer, Integer> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<Integer, Integer>(dualLinkedHashBidiMap0);
      abstractDualBidiMap_BidiMapIterator0.next();
      // Undeclared exception!
      try { 
        abstractDualBidiMap_BidiMapIterator0.setValue((Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot use setValue() when the object being set is already in the map
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Integer integer0 = new Integer(469);
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      dualLinkedHashBidiMap0.put(integer0, (Integer) null);
      AbstractDualBidiMap.BidiMapIterator<Integer, Integer> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<Integer, Integer>(dualLinkedHashBidiMap0);
      abstractDualBidiMap_BidiMapIterator0.next();
      abstractDualBidiMap_BidiMapIterator0.setValue((Integer) null);
      assertEquals(1, dualLinkedHashBidiMap0.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      AbstractDualBidiMap.BidiMapIterator<Integer, Integer> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<Integer, Integer>(dualLinkedHashBidiMap0);
      // Undeclared exception!
      try { 
        abstractDualBidiMap_BidiMapIterator0.setValue((Integer) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator setValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Integer integer0 = new Integer(469);
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      dualLinkedHashBidiMap0.put(integer0, integer0);
      AbstractDualBidiMap.BidiMapIterator<Integer, Integer> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<Integer, Integer>(dualLinkedHashBidiMap0);
      abstractDualBidiMap_BidiMapIterator0.next();
      abstractDualBidiMap_BidiMapIterator0.setValue((Integer) null);
      assertEquals(1, dualLinkedHashBidiMap0.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DualHashBidiMap<Object, Integer> dualHashBidiMap0 = new DualHashBidiMap<Object, Integer>();
      AbstractDualBidiMap.BidiMapIterator<Object, Integer> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<Object, Integer>(dualHashBidiMap0);
      // Undeclared exception!
      try { 
        abstractDualBidiMap_BidiMapIterator0.getValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator getValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DualHashBidiMap<Object, Integer> dualHashBidiMap0 = new DualHashBidiMap<Object, Integer>();
      AbstractDualBidiMap.BidiMapIterator<Object, Integer> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<Object, Integer>(dualHashBidiMap0);
      // Undeclared exception!
      try { 
        abstractDualBidiMap_BidiMapIterator0.getKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator getKey() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Integer integer0 = new Integer(469);
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      dualLinkedHashBidiMap0.put(integer0, integer0);
      AbstractDualBidiMap.BidiMapIterator<Integer, Integer> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<Integer, Integer>(dualLinkedHashBidiMap0);
      abstractDualBidiMap_BidiMapIterator0.next();
      Integer integer1 = abstractDualBidiMap_BidiMapIterator0.getKey();
      assertEquals(469, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      AbstractDualBidiMap.BidiMapIterator<Integer, Integer> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<Integer, Integer>(dualLinkedHashBidiMap0);
      // Undeclared exception!
      try { 
        abstractDualBidiMap_BidiMapIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator remove() can only be called once after next()
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(2);
      dualLinkedHashBidiMap0.put(integer0, integer0);
      AbstractDualBidiMap.BidiMapIterator<Integer, Integer> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<Integer, Integer>(dualLinkedHashBidiMap0);
      abstractDualBidiMap_BidiMapIterator0.next();
      abstractDualBidiMap_BidiMapIterator0.remove();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Integer integer0 = new Integer(469);
      Integer integer1 = new Integer(469);
      AbstractMap.SimpleImmutableEntry<Integer, AbstractDualBidiMap.KeySet<Integer>> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, AbstractDualBidiMap.KeySet<Integer>>(integer0, (AbstractDualBidiMap.KeySet<Integer>) null);
      AbstractMap.SimpleImmutableEntry<Comparable<Integer>, AbstractDualBidiMap.KeySet<Integer>> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Comparable<Integer>, AbstractDualBidiMap.KeySet<Integer>>(abstractMap_SimpleImmutableEntry0);
      DualLinkedHashBidiMap<Comparable<Integer>, AbstractDualBidiMap.KeySet<Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Comparable<Integer>, AbstractDualBidiMap.KeySet<Integer>>();
      dualLinkedHashBidiMap0.put(integer1, (AbstractDualBidiMap.KeySet<Integer>) null);
      AbstractDualBidiMap.MapEntry<Comparable<Integer>, AbstractDualBidiMap.KeySet<Integer>> abstractDualBidiMap_MapEntry0 = new AbstractDualBidiMap.MapEntry<Comparable<Integer>, AbstractDualBidiMap.KeySet<Integer>>(abstractMap_SimpleImmutableEntry1, dualLinkedHashBidiMap0);
      // Undeclared exception!
      try { 
        abstractDualBidiMap_MapEntry0.setValue((AbstractDualBidiMap.KeySet<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot use setValue() when the object being set is already in the map
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$MapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(2);
      dualLinkedHashBidiMap0.put(integer0, integer0);
      BiFunction<Integer, Object, Integer> biFunction0 = (BiFunction<Integer, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(biFunction0).apply(anyInt() , any());
      dualLinkedHashBidiMap0.replaceAll(biFunction0);
      assertEquals(1, dualLinkedHashBidiMap0.size());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Iterator<Map.Entry<Integer, DualHashBidiMap<Integer, Object>>> iterator0 = (Iterator<Map.Entry<Integer, DualHashBidiMap<Integer, Object>>>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<Integer, DualHashBidiMap<Integer, Object>> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, DualHashBidiMap<Integer, Object>>(comparator0, comparator0);
      AbstractDualBidiMap.EntrySetIterator<Integer, DualHashBidiMap<Integer, Object>> abstractDualBidiMap_EntrySetIterator0 = new AbstractDualBidiMap.EntrySetIterator<Integer, DualHashBidiMap<Integer, Object>>(iterator0, dualTreeBidiMap0);
      // Undeclared exception!
      try { 
        abstractDualBidiMap_EntrySetIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator remove() can only be called once after next()
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$EntrySetIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Iterator<Map.Entry<Integer, DualHashBidiMap<Integer, Object>>> iterator0 = (Iterator<Map.Entry<Integer, DualHashBidiMap<Integer, Object>>>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<Integer, DualHashBidiMap<Integer, Object>> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, DualHashBidiMap<Integer, Object>>(comparator0, comparator0);
      AbstractDualBidiMap.EntrySetIterator<Integer, DualHashBidiMap<Integer, Object>> abstractDualBidiMap_EntrySetIterator0 = new AbstractDualBidiMap.EntrySetIterator<Integer, DualHashBidiMap<Integer, Object>>(iterator0, dualTreeBidiMap0);
      abstractDualBidiMap_EntrySetIterator0.canRemove = true;
      // Undeclared exception!
      try { 
        abstractDualBidiMap_EntrySetIterator0.remove();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$EntrySetIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Integer integer0 = new Integer(469);
      DualLinkedHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      AbstractDualBidiMap.EntrySet<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> abstractDualBidiMap_EntrySet0 = new AbstractDualBidiMap.EntrySet<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(dualLinkedHashBidiMap0);
      boolean boolean0 = abstractDualBidiMap_EntrySet0.remove(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      DualHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> dualHashBidiMap0 = new DualHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      DualHashBidiMap<Integer, Integer> dualHashBidiMap1 = new DualHashBidiMap<Integer, Integer>(dualLinkedHashBidiMap0);
      AbstractDualBidiMap.KeySet<Integer> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<Integer>(dualHashBidiMap1);
      Iterator<Integer> iterator0 = abstractDualBidiMap_KeySet0.iterator();
      AbstractDualBidiMap.ValuesIterator<Integer> abstractDualBidiMap_ValuesIterator0 = new AbstractDualBidiMap.ValuesIterator<Integer>(iterator0, dualHashBidiMap0);
      // Undeclared exception!
      try { 
        abstractDualBidiMap_ValuesIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator remove() can only be called once after next()
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$ValuesIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Integer>(dualLinkedHashBidiMap0);
      boolean boolean0 = abstractDualBidiMap_Values0.remove(dualLinkedHashBidiMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      Integer integer0 = new Integer((-1007));
      dualLinkedHashBidiMap0.put((Integer) null, integer0);
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Integer>(dualLinkedHashBidiMap0);
      boolean boolean0 = abstractDualBidiMap_Values0.contains(integer0);
      assertFalse(dualLinkedHashBidiMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Integer integer0 = new Integer(469);
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Integer>(dualLinkedHashBidiMap0);
      boolean boolean0 = abstractDualBidiMap_Values0.contains(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>();
      DualLinkedHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      AbstractDualBidiMap.KeySet<Integer> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<Integer>(dualLinkedHashBidiMap0);
      Iterator<Integer> iterator0 = abstractDualBidiMap_KeySet0.iterator();
      AbstractDualBidiMap.ValuesIterator<Integer> abstractDualBidiMap_ValuesIterator0 = new AbstractDualBidiMap.ValuesIterator<Integer>(iterator0, dualHashBidiMap0);
      abstractDualBidiMap_ValuesIterator0.canRemove = true;
      // Undeclared exception!
      try { 
        abstractDualBidiMap_ValuesIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator remove() can only be called once after next()
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$KeySetIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Integer integer0 = new Integer(469);
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      AbstractDualBidiMap.KeySet<Integer> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<Integer>(dualLinkedHashBidiMap0);
      boolean boolean0 = abstractDualBidiMap_KeySet0.remove(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Integer integer0 = new Integer(469);
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      dualLinkedHashBidiMap0.put(integer0, integer0);
      AbstractDualBidiMap.KeySet<Integer> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<Integer>(dualLinkedHashBidiMap0);
      boolean boolean0 = abstractDualBidiMap_KeySet0.contains(integer0);
      assertEquals(1, dualLinkedHashBidiMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      Integer integer0 = new Integer(469);
      AbstractDualBidiMap.KeySet<Integer> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<Integer>(dualLinkedHashBidiMap0);
      boolean boolean0 = abstractDualBidiMap_KeySet0.contains(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      AbstractDualBidiMap.KeySet<Integer> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<Integer>(dualLinkedHashBidiMap0);
      Integer integer0 = new Integer(469);
      dualLinkedHashBidiMap0.put(integer0, integer0);
      assertEquals(1, dualLinkedHashBidiMap0.size());
      
      DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      Collection<Integer> collection0 = dualTreeBidiMap0.values();
      boolean boolean0 = abstractDualBidiMap_KeySet0.retainAll(collection0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>();
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Integer>(dualLinkedHashBidiMap0);
      AbstractDualBidiMap.KeySet<Integer> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<Integer>(dualHashBidiMap0);
      boolean boolean0 = abstractDualBidiMap_KeySet0.retainAll(abstractDualBidiMap_Values0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Integer integer0 = new Integer(469);
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      dualLinkedHashBidiMap0.put(integer0, integer0);
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Integer>(dualLinkedHashBidiMap0);
      assertEquals(1, dualLinkedHashBidiMap0.size());
      
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add(integer0);
      boolean boolean0 = abstractDualBidiMap_Values0.removeAll(linkedHashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>();
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Integer>(dualHashBidiMap0);
      BidiMap<Integer, Object> bidiMap0 = UnmodifiableBidiMap.unmodifiableBidiMap((BidiMap<? extends Integer, ?>) dualLinkedHashBidiMap0);
      DualHashBidiMap<Object, Integer> dualHashBidiMap1 = new DualHashBidiMap<Object, Integer>(dualHashBidiMap0);
      DualLinkedHashBidiMap<Integer, Object> dualLinkedHashBidiMap1 = new DualLinkedHashBidiMap<Integer, Object>(bidiMap0, dualHashBidiMap1, dualHashBidiMap1);
      AbstractDualBidiMap.Values<Object> abstractDualBidiMap_Values1 = new AbstractDualBidiMap.Values<Object>(dualLinkedHashBidiMap1);
      boolean boolean0 = abstractDualBidiMap_Values0.removeAll(abstractDualBidiMap_Values1);
      assertFalse(boolean0);
      assertTrue(dualLinkedHashBidiMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Integer integer0 = new Integer(469);
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      dualLinkedHashBidiMap0.put(integer0, integer0);
      AbstractDualBidiMap.KeySet<Integer> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<Integer>(dualLinkedHashBidiMap0);
      boolean boolean0 = abstractDualBidiMap_KeySet0.removeIf((Predicate<? super Integer>) null);
      assertEquals(1, dualLinkedHashBidiMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Integer integer0 = new Integer(469);
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>();
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>(dualHashBidiMap0);
      dualLinkedHashBidiMap0.put(integer0, integer0);
      AbstractDualBidiMap.KeySet<Integer> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<Integer>(dualLinkedHashBidiMap0);
      AbstractDualBidiMap.KeySet<Integer> abstractDualBidiMap_KeySet1 = new AbstractDualBidiMap.KeySet<Integer>(dualLinkedHashBidiMap0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) abstractDualBidiMap_KeySet1);
      boolean boolean0 = abstractDualBidiMap_KeySet0.removeIf(predicate0);
      assertEquals(1, dualLinkedHashBidiMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>(dualLinkedHashBidiMap0);
      dualHashBidiMap0.inverseBidiMap();
      BidiMap<Integer, Integer> bidiMap0 = dualHashBidiMap0.inverseBidiMap();
      assertEquals(0, bidiMap0.size());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      Integer integer0 = dualLinkedHashBidiMap0.removeValue((Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Integer integer0 = new Integer(469);
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      dualLinkedHashBidiMap0.put(integer0, integer0);
      boolean boolean0 = dualLinkedHashBidiMap0.containsValue(integer0);
      assertFalse(dualLinkedHashBidiMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      boolean boolean0 = dualLinkedHashBidiMap0.containsValue(dualTreeBidiMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Integer integer0 = new Integer(30);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      DualLinkedHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      AbstractDualBidiMap.EntrySet<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> abstractDualBidiMap_EntrySet0 = new AbstractDualBidiMap.EntrySet<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(dualLinkedHashBidiMap0);
      boolean boolean0 = abstractDualBidiMap_EntrySet0.remove(abstractMap_SimpleImmutableEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      AbstractDualBidiMap.KeySet<Integer> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<Integer>(dualLinkedHashBidiMap0);
      AbstractDualBidiMap.KeySet<Integer> abstractDualBidiMap_KeySet1 = new AbstractDualBidiMap.KeySet<Integer>(dualLinkedHashBidiMap0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) abstractDualBidiMap_KeySet1);
      boolean boolean0 = abstractDualBidiMap_KeySet0.removeIf(predicate0);
      assertTrue(dualLinkedHashBidiMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Integer integer0 = new Integer(469);
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      dualLinkedHashBidiMap0.put(integer0, integer0);
      AbstractDualBidiMap.Values<Integer> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Integer>(dualLinkedHashBidiMap0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean0 = abstractDualBidiMap_Values0.removeAll(linkedHashSet0);
      assertEquals(1, dualLinkedHashBidiMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      DualHashBidiMap<Object, Integer> dualHashBidiMap0 = new DualHashBidiMap<Object, Integer>();
      AbstractDualBidiMap.BidiMapIterator<Object, Integer> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<Object, Integer>(dualHashBidiMap0);
      abstractDualBidiMap_BidiMapIterator0.reset();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      AbstractDualBidiMap.BidiMapIterator<Integer, Integer> abstractDualBidiMap_BidiMapIterator0 = new AbstractDualBidiMap.BidiMapIterator<Integer, Integer>(dualLinkedHashBidiMap0);
      boolean boolean0 = abstractDualBidiMap_BidiMapIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      TreeBidiMap.Inverse treeBidiMap_Inverse0 = treeBidiMap0.new Inverse();
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>(treeBidiMap_Inverse0);
      OrderedMapIterator<Integer, Integer> orderedMapIterator0 = treeBidiMap_Inverse0.mapIterator();
      AbstractDualBidiMap.ValuesIterator<Integer> abstractDualBidiMap_ValuesIterator0 = new AbstractDualBidiMap.ValuesIterator<Integer>(orderedMapIterator0, dualTreeBidiMap0);
      // Undeclared exception!
      try { 
        abstractDualBidiMap_ValuesIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Iterator contains no elements
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractEmptyIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      DualHashBidiMap<AbstractDualBidiMap.KeySet<Integer>, Object> dualHashBidiMap0 = new DualHashBidiMap<AbstractDualBidiMap.KeySet<Integer>, Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<Integer, Object> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Object>(comparator0, comparator0);
      AbstractDualBidiMap.KeySet<Integer> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<Integer>(dualTreeBidiMap0);
      dualHashBidiMap0.put(abstractDualBidiMap_KeySet0, integer0);
      assertFalse(dualHashBidiMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      DualHashBidiMap<Integer, Integer> dualHashBidiMap0 = new DualHashBidiMap<Integer, Integer>();
      MapIterator<Integer, Integer> mapIterator0 = dualHashBidiMap0.mapIterator();
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>();
      DualTreeBidiMap<Comparable<Integer>, Comparable<Integer>> dualTreeBidiMap1 = new DualTreeBidiMap<Comparable<Integer>, Comparable<Integer>>(dualTreeBidiMap0);
      AbstractDualBidiMap.Values<Comparable<Integer>> abstractDualBidiMap_Values0 = new AbstractDualBidiMap.Values<Comparable<Integer>>(dualTreeBidiMap1);
      Iterator<Comparable<Integer>> iterator0 = abstractDualBidiMap_Values0.iterator();
      AbstractDualBidiMap.KeySetIterator<Comparable<Integer>> abstractDualBidiMap_KeySetIterator0 = new AbstractDualBidiMap.KeySetIterator<Comparable<Integer>>(iterator0, dualTreeBidiMap1);
      Iterator<Comparable<Integer>> iterator1 = dualTreeBidiMap1.createKeySetIterator(abstractDualBidiMap_KeySetIterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      Integer integer0 = new Integer((-2144195003));
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer0, integer0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      boolean boolean0 = dualLinkedHashBidiMap0.equals(abstractMap_SimpleImmutableEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      DualLinkedHashBidiMap<Integer, Integer> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Integer>();
      AbstractDualBidiMap.KeySet<Integer> abstractDualBidiMap_KeySet0 = new AbstractDualBidiMap.KeySet<Integer>(dualLinkedHashBidiMap0);
      abstractDualBidiMap_KeySet0.clear();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DualTreeBidiMap<AbstractDualBidiMap.KeySet<Integer>, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<AbstractDualBidiMap.KeySet<Integer>, Integer>(comparator0, comparator0);
      int int0 = dualTreeBidiMap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      DualTreeBidiMap<Integer, Integer> dualTreeBidiMap0 = new DualTreeBidiMap<Integer, Integer>();
      DualTreeBidiMap<Integer, Comparable<Integer>> dualTreeBidiMap1 = new DualTreeBidiMap<Integer, Comparable<Integer>>();
      OrderedBidiMap<Comparable<Integer>, Integer> orderedBidiMap0 = UnmodifiableOrderedBidiMap.unmodifiableOrderedBidiMap((OrderedBidiMap<? extends Comparable<Integer>, ? extends Integer>) dualTreeBidiMap0);
      DualLinkedHashBidiMap<Integer, Comparable<Integer>> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Comparable<Integer>>(dualTreeBidiMap1, (Map<Comparable<Integer>, Integer>) null, orderedBidiMap0);
      DualLinkedHashBidiMap<Comparable<Integer>, Integer> dualLinkedHashBidiMap1 = new DualLinkedHashBidiMap<Comparable<Integer>, Integer>((Map<Comparable<Integer>, Integer>) null, (Map<Integer, Comparable<Integer>>) null, dualLinkedHashBidiMap0);
      // Undeclared exception!
      try { 
        dualLinkedHashBidiMap1.getKey(orderedBidiMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      DualHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> dualHashBidiMap0 = new DualHashBidiMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      String string0 = dualHashBidiMap0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Integer integer0 = new Integer(2);
      TreeBidiMap<Integer, Integer> treeBidiMap0 = new TreeBidiMap<Integer, Integer>();
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(integer0, (Object) null);
      DualLinkedHashBidiMap<Integer, Object> dualLinkedHashBidiMap0 = new DualLinkedHashBidiMap<Integer, Object>(treeBidiMap0);
      DualLinkedHashBidiMap<Object, Integer> dualLinkedHashBidiMap1 = new DualLinkedHashBidiMap<Object, Integer>(treeBidiMap0);
      DualLinkedHashBidiMap<Object, Integer> dualLinkedHashBidiMap2 = new DualLinkedHashBidiMap<Object, Integer>(dualLinkedHashBidiMap1, dualLinkedHashBidiMap0, dualLinkedHashBidiMap0);
      DualLinkedHashBidiMap<Integer, Object> dualLinkedHashBidiMap3 = new DualLinkedHashBidiMap<Integer, Object>(dualLinkedHashBidiMap0, dualLinkedHashBidiMap2, dualLinkedHashBidiMap2);
      AbstractDualBidiMap.MapEntry<Integer, Object> abstractDualBidiMap_MapEntry0 = new AbstractDualBidiMap.MapEntry<Integer, Object>(abstractMap_SimpleImmutableEntry0, dualLinkedHashBidiMap3);
      // Undeclared exception!
      try { 
        abstractDualBidiMap_MapEntry0.setValue(abstractMap_SimpleImmutableEntry0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap$SimpleImmutableEntry", e);
      }
  }
}
