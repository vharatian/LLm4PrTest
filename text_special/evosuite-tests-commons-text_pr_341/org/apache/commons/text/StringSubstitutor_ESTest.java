/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 19:13:35 GMT 2025
 */

package org.apache.commons.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.nio.file.StandardCopyOption;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import org.apache.commons.io.file.StandardDeleteOption;
import org.apache.commons.text.StringSubstitutor;
import org.apache.commons.text.TextStringBuilder;
import org.apache.commons.text.lookup.StringLookup;
import org.apache.commons.text.matcher.StringMatcher;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class StringSubstitutor_ESTest extends StringSubstitutor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = StringSubstitutor.replaceSystemProperties("4$${:}");
      assertEquals("4${:}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEscapeChar('<');
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('<', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('<', stringSubstitutor1.getEscapeChar());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append('$');
      assertEquals("$", stringWriter0.toString());
      assertEquals("$", stringWriter1.toString());
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "${");
      assertEquals("$${", stringWriter0.toString());
      assertEquals("$${", stringWriter1.toString());
      assertEquals("$${", stringWriter2.toString());
      assertNotNull(stringWriter2);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals("$${", stringWriter0.toString());
      assertEquals("$${", stringBuffer0.toString());
      assertEquals(3, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuffer0);
      assertFalse(boolean0);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('<', stringSubstitutor0.getEscapeChar());
      assertEquals("$${", stringWriter0.toString());
      assertEquals("$${", stringBuffer0.toString());
      assertEquals(3, stringBuffer0.length());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "${");
      assertEquals("${", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append("}");
      assertEquals("${}", stringBuilder0.toString());
      assertEquals("${}", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      StringBuilder stringBuilder2 = stringBuilder1.append("${${${$36.0");
      assertEquals("${}${${${$36.0", stringBuilder0.toString());
      assertEquals("${}${${${$36.0", stringBuilder1.toString());
      assertEquals("${}${${${$36.0", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      
      StringBuilder stringBuilder3 = stringBuilder1.insert(2, (CharSequence) ":-");
      assertEquals("${:-}${${${$36.0", stringBuilder0.toString());
      assertEquals("${:-}${${${$36.0", stringBuilder1.toString());
      assertEquals("${:-}${${${$36.0", stringBuilder3.toString());
      assertNotNull(stringBuilder3);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuilder3);
      assertTrue(boolean0);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals("${${${$36.0", stringBuilder0.toString());
      assertEquals("${${${$36.0", stringBuilder1.toString());
      assertEquals("${${${$36.0", stringBuilder3.toString());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((CharSequence) "${");
      assertEquals(34, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(2, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(2, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertNotNull(textStringBuilder0);
      
      // Undeclared exception!
      try { 
        stringSubstitutor0.replaceIn(textStringBuilder0, 0, 3179);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((StringLookup) null, "tx/ R&lM<eQ&` PIWrJ", "tx/ R&lM<eQ&` PIWrJ", '+');
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('+', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("${");
      assertEquals(2, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(34, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(2, textStringBuilder0.length());
      assertNotNull(textStringBuilder0);
      
      String string0 = stringSubstitutor0.replace(textStringBuilder0, 2, 0);
      assertEquals("", string0);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('+', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals(2, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(34, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(2, textStringBuilder0.length());
      assertNotNull(string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(map0, "lGKD\"E36$~#4^", "lGKD\"E36$~#4^", 'm', "lGKD\"E36$~#4^");
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('m', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(829);
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(829, textStringBuilder0.capacity());
      assertNotNull(textStringBuilder0);
      
      // Undeclared exception!
      try { 
        stringSubstitutor0.replace(textStringBuilder0, 1699, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((StringLookup) null);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      char[] charArray0 = new char[9];
      String string0 = stringSubstitutor0.replace(charArray0, 2, 4);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("\u0000\u0000\u0000\u0000", string0);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertNotNull(string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((StringLookup) null);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        stringSubstitutor0.replace(charArray0, (-2770), (-2882));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: -2882
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringLookup stringLookup1 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor1 = new StringSubstitutor(stringLookup1, stringSubstitutor0.DEFAULT_PREFIX, stringSubstitutor0.DEFAULT_SUFFIX, 't', stringSubstitutor0.DEFAULT_PREFIX);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('t', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor1);
      assertFalse(stringSubstitutor1.equals((Object)stringSubstitutor0));
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_VALUE_DELIMITER;
      assertEquals(2, stringMatcher0.size());
      assertNotNull(stringMatcher0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, '}', stringMatcher0);
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('}', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "</m4^&t[;-xsNs", "</m4^&t[;-xsNs", '}');
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals('}', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      char[] charArray0 = new char[1];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(1, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(1, textStringBuilder0.length());
      assertEquals(1, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertNotNull(textStringBuilder0);
      assertEquals(1, charArray0.length);
      
      boolean boolean0 = stringSubstitutor0.substitute(textStringBuilder0, (-1709), (-1709));
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(boolean0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals('}', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(1, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(1, textStringBuilder0.length());
      assertEquals(1, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableSuffixMatcher(stringSubstitutor0.DEFAULT_PREFIX);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((StringLookup) null);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableSuffixMatcher(stringSubstitutor1.DEFAULT_SUFFIX);
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, String>) hashMap0, "/S", ": ");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariableSuffixMatcher(stringSubstitutor0.DEFAULT_VALUE_DELIMITER);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableSuffixMatcher(stringSubstitutor0.DEFAULT_PREFIX);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_VALUE_DELIMITER;
      assertEquals(2, stringMatcher0.size());
      assertNotNull(stringMatcher0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, '\'');
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('\'', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertEquals('\'', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertEquals('\'', stringSubstitutor1.getEscapeChar());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariableSuffix(":-");
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertEquals('\'', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertEquals('\'', stringSubstitutor1.getEscapeChar());
      assertEquals('\'', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(map0, "${", "0.0", 'c');
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertEquals('c', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertEquals('c', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('c', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableSuffix("${");
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertEquals('c', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('c', stringSubstitutor2.getEscapeChar());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableSuffix(":-");
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableSuffix("<k");
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_SUFFIX;
      assertEquals(1, stringMatcher0.size());
      assertNotNull(stringMatcher0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, 'l');
      assertEquals(1, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('l', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertEquals(1, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('l', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('l', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariableSuffix('k');
      assertEquals(1, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('l', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('l', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('l', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableSuffix('$');
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariableSuffix('S');
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((StringLookup) null);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariableSuffix('$');
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "f1~|=`{C!Jq!tJv", "blank_blank_blank_2014", 'q');
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('q', stringSubstitutor0.getEscapeChar());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('q', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('q', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringLookup stringLookup1 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableResolver(stringLookup1);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('q', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertEquals('q', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableResolver(stringLookup0);
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(map0, ":", ":", 'F');
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('F', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('F', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('F', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableResolver(stringLookup0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('F', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('F', stringSubstitutor2.getEscapeChar());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((StringLookup) null);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableResolver((StringLookup) null);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariablePrefixMatcher(stringSubstitutor0.DEFAULT_SUFFIX);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "9q#30XkjysH}xa", "9q#30XkjysH}xa", 'N');
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('N', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('N', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('N', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariablePrefixMatcher(stringSubstitutor0.DEFAULT_PREFIX);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('N', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('N', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariablePrefixMatcher(stringSubstitutor0.DEFAULT_VALUE_DELIMITER);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariablePrefix("com.oracle.truffle.polyglot.PolyglotThreadLocalActions$AbstractTLHandshake");
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariablePrefix(":-");
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariablePrefix("com.oracle.truffle.polyglot.PolyglotThreadLocalActions$AbstractTLHandshake");
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(map0, "0.0", "0.0", 'c');
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('c', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('c', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('c', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariablePrefix("SDaR");
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('c', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals('c', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariablePrefix('$');
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariablePrefix('$');
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "org.apache.commons.text.StringSubstitutor$Result", "org.apache.commons.text.StringSubstitutor$Result", '4', "org.apache.commons.text.StringSubstitutor$Result");
      assertEquals('4', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertEquals('4', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('4', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariablePrefix('4');
      assertEquals('4', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('4', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariablePrefix('%');
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setValueDelimiterMatcher(stringSubstitutor1.DEFAULT_PREFIX);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setValueDelimiterMatcher(stringSubstitutor0.DEFAULT_PREFIX);
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0);
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setValueDelimiterMatcher(stringSubstitutor0.DEFAULT_PREFIX);
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((StringLookup) null);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setValueDelimiterMatcher(stringSubstitutor0.DEFAULT_SUFFIX);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, ">e&(\"V`+6Z/o*q3Pma", ">e&(\"V`+6Z/o*q3Pma", 'A', ">e&(\"V`+6Z/o*q3Pma");
      assertEquals('A', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertEquals('A', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('A', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setValueDelimiter("twr?-~O");
      assertEquals('A', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('A', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('A', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((StringLookup) null);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setValueDelimiter("${");
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((StringLookup) null);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setValueDelimiter(":-");
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setValueDelimiter("b");
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setValueDelimiter('O');
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "9q#30XkjysH}xa", "9q#30XkjysH}xa", 'N');
      assertEquals('N', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('N', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('N', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setValueDelimiter('j');
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('N', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('N', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setValueDelimiter('H');
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "R?", "R?", '%', "org.apache.commons.text.lookup.DateStringLookup");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('%', stringSubstitutor0.getEscapeChar());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('%', stringSubstitutor0.getEscapeChar());
      assertEquals('%', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setValueDelimiter('y');
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('%', stringSubstitutor0.getEscapeChar());
      assertEquals('%', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_SUFFIX;
      assertEquals(1, stringMatcher0.size());
      assertNotNull(stringMatcher0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, '1');
      assertEquals(1, stringMatcher0.size());
      assertEquals('1', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertEquals(1, stringMatcher0.size());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('1', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('1', stringSubstitutor1.getEscapeChar());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setPreserveEscapes(true);
      assertEquals(1, stringMatcher0.size());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertEquals('1', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('1', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setPreserveEscapes(true);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setPreserveEscapes(false);
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "36.", "0.0");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setEscapeChar('$');
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "9q#30XkjysH}xa", "9q#30XkjysH}xa", 'N');
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('N', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('N', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('N', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setEscapeChar('a');
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('a', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('a', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setEscapeChar('`');
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('`', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals('`', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setEscapeChar('`');
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('`', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('`', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('`', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(map0, ":", ":", 'F');
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('F', stringSubstitutor0.getEscapeChar());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('F', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('F', stringSubstitutor1.getEscapeChar());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('F', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('F', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setEnableUndefinedVariableException(true);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setEnableSubstitutionInVariables(false);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "f1~|=`{C!Jq!tJv", "blank_blank_blank_2014", 'q');
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('q', stringSubstitutor0.getEscapeChar());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertEquals('q', stringSubstitutor0.getEscapeChar());
      assertEquals('q', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setDisableSubstitutionInValues(false);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertEquals('q', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('q', stringSubstitutor2.getEscapeChar());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "9q#30XkjysH}xa", "9q#30XkjysH}xa", 'N');
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('N', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('N', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('N', stringSubstitutor1.getEscapeChar());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('N', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals('N', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((StringLookup) null);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setDisableSubstitutionInValues(false);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(stringLookup0).toString();
      doReturn((String) null).when(stringLookup0).lookup(anyString());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertNotNull(textStringBuilder0);
      
      String string0 = stringSubstitutor0.resolveVariable("", textStringBuilder0, 0, 2209);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.text.lookup.JavaPlatformStringLookup").when(stringLookup0).toString();
      doReturn("org.apache.commons.text.lookup.JavaPlatformStringLookup").when(stringLookup0).lookup(anyString());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(32, textStringBuilder0.capacity());
      assertNotNull(textStringBuilder0);
      
      String string0 = stringSubstitutor0.resolveVariable("", textStringBuilder0, 0, 2209);
      assertEquals("org.apache.commons.text.lookup.JavaPlatformStringLookup", string0);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(32, textStringBuilder0.capacity());
      assertNotNull(string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      doReturn("").when(stringLookup0).toString();
      doReturn("").when(stringLookup0).lookup(anyString());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isEmpty());
      assertNotNull(textStringBuilder0);
      
      String string0 = stringSubstitutor0.resolveVariable("", textStringBuilder0, 0, 2209);
      assertEquals("", string0);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isEmpty());
      assertNotNull(string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = StringSubstitutor.replaceSystemProperties((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((-156));
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNotNull(textStringBuilder0);
      
      String string0 = StringSubstitutor.replaceSystemProperties(textStringBuilder0);
      assertEquals("", string0);
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) null, "n[8$&PrYTU$S", "java.version", 'D', "[Diq(,FJk");
      assertEquals('D', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      char[] charArray0 = new char[5];
      String string0 = stringSubstitutor0.replace(charArray0, 0, 0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertEquals('D', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertNotNull(string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>(8);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, String>) hashMap0, "GN", "GN", 'Y');
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('Y', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      char[] charArray0 = new char[0];
      String string0 = stringSubstitutor0.replace(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("", string0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('Y', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertNotNull(string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertNotNull(textStringBuilder0);
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln(2466);
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(5, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(5, textStringBuilder0.length());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(5, textStringBuilder1.length());
      assertEquals(32, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isReallocated());
      assertEquals(5, textStringBuilder1.size());
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      
      String string0 = stringSubstitutor0.replace(textStringBuilder0, 1, 1);
      assertEquals("4", string0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(5, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(5, textStringBuilder0.length());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertNotNull(string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(textStringBuilder0, textStringBuilder1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("IF_ANNOTATED");
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(44, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(12, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(12, textStringBuilder0.size());
      assertNotNull(textStringBuilder0);
      
      String string0 = stringSubstitutor0.replace(textStringBuilder0);
      assertEquals("IF_ANNOTATED", string0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(44, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(12, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(12, textStringBuilder0.size());
      assertNotNull(string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "%,d files, %,d directories, %,d bytes");
      assertEquals(37, stringBuffer0.length());
      assertEquals("%,d files, %,d directories, %,d bytes", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      HashMap<String, StandardCopyOption> hashMap0 = new HashMap<String, StandardCopyOption>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, StandardCopyOption>) hashMap0, "%,d files, %,d directories, %,d bytes", "%,d files, %,d directories, %,d bytes");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      String string0 = stringSubstitutor0.replace(stringBuffer0, 1, 15);
      assertEquals(",d files, %,d d", string0);
      assertEquals(37, stringBuffer0.length());
      assertEquals("%,d files, %,d directories, %,d bytes", stringBuffer0.toString());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertNotNull(string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_VALUE_DELIMITER;
      assertEquals(2, stringMatcher0.size());
      assertNotNull(stringMatcher0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, 'd');
      assertEquals(2, stringMatcher0.size());
      assertEquals('d', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringBuffer stringBuffer0 = new StringBuffer("O5PU[R?5qX'1");
      assertEquals(12, stringBuffer0.length());
      assertEquals("O5PU[R?5qX'1", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      String string0 = stringSubstitutor0.replace(stringBuffer0, 0, 0);
      assertEquals("", string0);
      assertEquals(2, stringMatcher0.size());
      assertEquals('d', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals(12, stringBuffer0.length());
      assertEquals("O5PU[R?5qX'1", stringBuffer0.toString());
      assertNotNull(string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "net.bytebuddy.asm.Advice$AssignReturned", "net.bytebuddy.asm.Advice$AssignReturned");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringBuffer stringBuffer0 = new StringBuffer("org.apache.commons.text.StringSubstitutor$1");
      assertEquals(43, stringBuffer0.length());
      assertEquals("org.apache.commons.text.StringSubstitutor$1", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      String string0 = stringSubstitutor0.replace(stringBuffer0);
      assertEquals("org.apache.commons.text.StringSubstitutor$1", string0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertEquals(43, stringBuffer0.length());
      assertEquals("org.apache.commons.text.StringSubstitutor$1", stringBuffer0.toString());
      assertNotNull(string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      String string0 = stringSubstitutor0.replace("${", 1, 1);
      assertEquals("{", string0);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertNotNull(string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_SUFFIX;
      assertEquals(1, stringMatcher0.size());
      assertNotNull(stringMatcher0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, 'l');
      assertEquals(1, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('l', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      String string0 = stringSubstitutor0.replace("");
      assertEquals("", string0);
      assertEquals(1, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('l', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      String string0 = StringSubstitutor.replace((Object) null, properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      String string0 = StringSubstitutor.replace((Object) "", properties0);
      assertEquals("", string0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string0 = StringSubstitutor.replace((Object) null, (Map<String, Object>) hashMap0, "}", "");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = StringSubstitutor.replace((Object) "", (Map<String, Object>) hashMap0, "", "");
      assertEquals("", string0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringSubstitutor.replace(object0, (Map<String, Object>) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<String, StandardCopyOption> hashMap0 = new HashMap<String, StandardCopyOption>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string0 = StringSubstitutor.replace((Object) "", (Map<String, StandardCopyOption>) hashMap0);
      assertEquals("", string0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "</m4^&t[;-xsNs", "</m4^&t[;-xsNs", '}');
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals('}', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = stringSubstitutor0.replace(object0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals('}', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringBuilder stringBuilder0 = new StringBuilder("${");
      assertEquals("${", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      String string0 = stringSubstitutor0.replace((CharSequence) stringBuilder0, 1, 1);
      assertEquals("{", string0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals("${", stringBuilder0.toString());
      assertNotNull(string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "O5PU[R?5qX'1", "O5PU[R?5qX'1", 'u');
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('u', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      String string0 = stringSubstitutor0.replace((CharSequence) "O5PU[R?5qX'1", 0, 0);
      assertEquals("", string0);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('u', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertNotNull(string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((StringLookup) null);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((-1478));
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.size());
      assertNotNull(textStringBuilder0);
      
      String string0 = stringSubstitutor0.replace((CharSequence) textStringBuilder0);
      assertEquals("", string0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.size());
      assertNotNull(string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_VALUE_DELIMITER;
      assertEquals(2, stringMatcher0.size());
      assertNotNull(stringMatcher0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, 'o');
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('o', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('o', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('o', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      boolean boolean0 = stringSubstitutor0.isPreserveEscapes();
      assertTrue(boolean0);
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('o', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      boolean boolean0 = stringSubstitutor1.isEnableUndefinedVariableException();
      assertTrue(boolean0);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      boolean boolean0 = stringSubstitutor0.isEnableSubstitutionInVariables();
      assertTrue(boolean0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      boolean boolean0 = stringSubstitutor0.isDisableSubstitutionInValues();
      assertTrue(boolean0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((StringLookup) null);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringLookup stringLookup0 = stringSubstitutor0.getStringLookup();
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertNull(stringLookup0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      char char0 = stringSubstitutor0.getEscapeChar();
      assertEquals('$', char0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, String>) hashMap0, " for writing, IO error: ", "...", 'p');
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('p', stringSubstitutor0.getEscapeChar());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      char char0 = stringSubstitutor0.getEscapeChar();
      assertEquals('p', char0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('p', stringSubstitutor0.getEscapeChar());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.length());
      assertNotNull(textStringBuilder0);
      
      // Undeclared exception!
      try { 
        stringSubstitutor0.substitute(textStringBuilder0, '$', '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 36
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      // Undeclared exception!
      try { 
        stringSubstitutor0.substitute((TextStringBuilder) null, (-848), (-848));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // builder
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(3373704);
      assertEquals(3373704, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(3373704, charBuffer0.remaining());
      assertEquals(3373704, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(3373704, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      
      // Undeclared exception!
      StringSubstitutor.replaceSystemProperties(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringBuilder stringBuilder0 = new StringBuilder("}");
      assertEquals("}", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      // Undeclared exception!
      try { 
        stringSubstitutor0.replaceIn(stringBuilder0, (int) '$', (int) '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringBuilder stringBuilder0 = new StringBuilder("${");
      assertEquals("${", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "}");
      assertEquals("${}", stringBuilder0.toString());
      assertEquals("${}", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      // Undeclared exception!
      try { 
        stringSubstitutor0.replaceIn(stringBuilder1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot resolve variable '' (enableSubstitutionInVariables=false).
         //
         verifyException("org.apache.commons.text.StringSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringSubstitutor.replace((Object) null, (Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      Properties properties0 = new Properties();
      properties0.put(stringSubstitutor0, stringSubstitutor0);
      // Undeclared exception!
      try { 
        StringSubstitutor.replace((Object) stringSubstitutor0, properties0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.text.StringSubstitutor cannot be cast to java.lang.String
         //
         verifyException("java.util.Properties", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      CharBuffer charBuffer0 = CharBuffer.allocate(3373707);
      // Undeclared exception!
      stringSubstitutor0.replace((CharSequence) charBuffer0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = null;
      try {
        stringSubstitutor0 = new StringSubstitutor((StringLookup) null, (StringMatcher) null, (StringMatcher) null, 'I');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix matcher must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = null;
      try {
        stringSubstitutor0 = new StringSubstitutor((StringLookup) null, (String) null, (String) null, '}', (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = null;
      try {
        stringSubstitutor0 = new StringSubstitutor((StringLookup) null, (String) null, (String) null, 'y');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = null;
      try {
        stringSubstitutor0 = new StringSubstitutor((StringSubstitutor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.StringSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StringSubstitutor stringSubstitutor0 = null;
      try {
        stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, (String) null, (String) null, '{', (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<String, StandardDeleteOption> hashMap0 = new HashMap<String, StandardDeleteOption>();
      StringSubstitutor stringSubstitutor0 = null;
      try {
        stringSubstitutor0 = new StringSubstitutor((Map<String, StandardDeleteOption>) hashMap0, (String) null, (String) null, 'Q');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StringSubstitutor stringSubstitutor0 = null;
      try {
        stringSubstitutor0 = new StringSubstitutor((Map<String, String>) hashMap0, (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      // Undeclared exception!
      try { 
        stringSubstitutor0.setVariableSuffixMatcher((StringMatcher) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable suffix matcher must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      // Undeclared exception!
      try { 
        stringSubstitutor0.setVariableSuffix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable suffix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      // Undeclared exception!
      try { 
        stringSubstitutor0.setVariablePrefix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setValueDelimiter((String) null);
      assertEquals('$', stringSubstitutor1.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      StringBuilder stringBuilder0 = new StringBuilder("${");
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuilder0, 1, 1);
      assertFalse(boolean0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.append((CharSequence) ":-");
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuffer0, 1, 1);
      assertFalse(boolean0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      StringBuffer stringBuffer0 = new StringBuffer(":-");
      // Undeclared exception!
      try { 
        stringSubstitutor0.replaceIn(stringBuffer0, (int) '$', (int) '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0);
      stringSubstitutor0.replace((Object) stringBuffer0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((StringLookup) null);
      String string0 = stringSubstitutor0.replace((Object) null);
      assertNull(string0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      // Undeclared exception!
      try { 
        stringSubstitutor0.replace((CharSequence) "We6pZ+UnLw", 2878, 2878);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      StringMatcher stringMatcher0 = stringSubstitutor0.getVariableSuffixMatcher();
      assertEquals(1, stringMatcher0.size());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((StringLookup) null);
      stringSubstitutor0.isEnableSubstitutionInVariables();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((StringLookup) null);
      stringSubstitutor0.isPreserveEscapes();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(stringLookup0).toString();
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "&", "com.oracle.truffle.api.TruffleLanguage$Env$TruffleFileFactory", 'W', "");
      stringSubstitutor0.getStringLookup();
      assertEquals('W', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((StringLookup) null, "", "", 'e', "");
      StringMatcher stringMatcher0 = stringSubstitutor0.getValueDelimiterMatcher();
      assertNull(stringMatcher0);
      assertEquals('e', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "Fn6Oa1w60|Vc D?", "Fn6Oa1w60|Vc D?", '}', "::");
      stringSubstitutor0.isDisableSubstitutionInValues();
      assertEquals('}', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, String>) hashMap0, " [bundleName=", "java.runtime.version", '9');
      char char0 = stringSubstitutor0.getEscapeChar();
      assertEquals('9', char0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, String>) hashMap0, "B_", "B_", 'd');
      stringSubstitutor0.isEnableUndefinedVariableException();
      assertEquals('d', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(map0, "${", "0.0", 'c');
      StringMatcher stringMatcher0 = stringSubstitutor0.getVariablePrefixMatcher();
      assertEquals('c', stringSubstitutor0.getEscapeChar());
      assertEquals(2, stringMatcher0.size());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.write("${");
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.write("}");
      stringSubstitutor0.setEnableUndefinedVariableException(true);
      // Undeclared exception!
      try { 
        stringSubstitutor0.replaceIn(stringBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot resolve variable '' (enableSubstitutionInVariables=false).
         //
         verifyException("org.apache.commons.text.StringSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "${");
      stringSubstitutor0.setDisableSubstitutionInValues(true);
      stringBuilder0.append("}");
      StringBuilder stringBuilder1 = stringBuilder0.insert(2, (CharSequence) ":-");
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuilder1);
      assertEquals("", stringBuilder1.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((StringLookup) null);
      StringBuilder stringBuilder0 = new StringBuilder("${");
      StringBuilder stringBuilder1 = stringBuilder0.append("${");
      stringBuilder0.append((CharSequence) "}");
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuilder1);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((StringLookup) null);
      StringBuilder stringBuilder0 = new StringBuilder("${");
      stringBuilder0.append("O5PU[R?5qX'1");
      stringSubstitutor0.setEnableSubstitutionInVariables(true);
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "}");
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuilder1);
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "${");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) ":-");
      stringBuffer0.append(stringBuffer1);
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "${", ":-", 'H', (String) null);
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuffer0);
      assertEquals("${:-", stringBuffer0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((StringLookup) null);
      StringBuilder stringBuilder0 = new StringBuilder("${");
      StringBuilder stringBuilder1 = stringBuilder0.append("${");
      stringSubstitutor0.setEnableSubstitutionInVariables(true);
      stringBuilder0.append((CharSequence) "}");
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuilder1);
      assertEquals("${${}", stringBuilder1.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0);
      stringSubstitutor0.setPreserveEscapes(true);
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((CharSequence) "$${OI");
      boolean boolean0 = stringSubstitutor0.replaceIn(textStringBuilder0);
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "${");
      StringBuilder stringBuilder1 = stringBuilder0.append("}");
      StringBuilder stringBuilder2 = stringBuilder0.append((CharSequence) stringBuilder1);
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuilder2);
      assertEquals("${}${}", stringBuilder1.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_PREFIX;
      StringSubstitutor stringSubstitutor0 = null;
      try {
        stringSubstitutor0 = new StringSubstitutor((StringLookup) null, stringMatcher0, (StringMatcher) null, 'H', stringMatcher0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable suffix matcher must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        StringSubstitutor.replace(object0, map0, "${", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable suffix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((StringLookup) null);
      // Undeclared exception!
      try { 
        stringSubstitutor0.setVariablePrefixMatcher((StringMatcher) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix matcher must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setValueDelimiter("");
      assertEquals('$', stringSubstitutor1.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(2);
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "36.", "0.0");
      boolean boolean0 = stringSubstitutor0.replaceIn((TextStringBuilder) null, 2, 172);
      assertFalse(boolean0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      boolean boolean0 = stringSubstitutor0.replaceIn((TextStringBuilder) null);
      assertFalse(boolean0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      boolean boolean0 = stringSubstitutor0.replaceIn((StringBuilder) null, (int) '$', (int) '$');
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      boolean boolean0 = stringSubstitutor0.replaceIn((StringBuilder) null);
      assertFalse(boolean0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append('$');
      stringWriter0.write("${");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      stringWriter0.write("}");
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuffer0);
      assertEquals("${}", stringBuffer0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      boolean boolean0 = stringSubstitutor0.replaceIn((StringBuffer) null, 256, 256);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      boolean boolean0 = stringSubstitutor0.replaceIn((StringBuffer) null);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      stringSubstitutor0.replace((TextStringBuilder) null, (int) '$', (int) '$');
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((StringLookup) null);
      stringSubstitutor0.replace((TextStringBuilder) null);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      String string0 = stringSubstitutor0.replace(textStringBuilder0);
      assertNotNull(string0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(map0);
      stringSubstitutor0.replace((StringBuffer) null, 870, 13);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      StringBuffer stringBuffer0 = new StringBuffer(38);
      // Undeclared exception!
      try { 
        stringSubstitutor0.replace(stringBuffer0, 38, 38);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      stringSubstitutor0.replace((StringBuffer) null);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = stringSubstitutor0.replace(stringBuffer0);
      assertNotNull(string0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      String string0 = stringSubstitutor0.replace("6G", 1, 0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      stringSubstitutor0.replace((String) null, (int) '$', (int) '$');
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      // Undeclared exception!
      try { 
        stringSubstitutor0.replace("}", (int) '$', (int) '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      stringSubstitutor0.setVariableSuffixMatcher(stringSubstitutor0.DEFAULT_VALUE_DELIMITER);
      String string0 = stringSubstitutor0.replace("$${:-");
      assertEquals("${:-", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      stringSubstitutor0.replace((String) null);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = StringSubstitutor.replace((Object) null, (Map<String, Object>) hashMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      stringSubstitutor0.replace((CharSequence) null, 399, 399);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((StringLookup) null);
      stringSubstitutor0.replace((CharSequence) null);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((StringLookup) null);
      String string0 = stringSubstitutor0.replace((CharSequence) "${");
      assertEquals("${", string0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      stringSubstitutor0.replace((char[]) null, 33, 33);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((StringLookup) null);
      stringSubstitutor0.replace((char[]) null);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      char[] charArray0 = new char[9];
      stringSubstitutor0.replace(charArray0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Properties properties0 = new Properties();
      properties0.put("NV2?Nr>1GJOm", "IF_ANNOTATED");
      String string0 = StringSubstitutor.replace((Object) "IF_ANNOTATED", properties0);
      assertEquals("IF_ANNOTATED", string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      StringSubstitutor stringSubstitutor1 = new StringSubstitutor(stringSubstitutor0);
      assertEquals('$', stringSubstitutor1.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      stringSubstitutor0.setVariablePrefixMatcher(stringSubstitutor1.DEFAULT_SUFFIX);
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(map0, "0.0", "0.0", 'c');
      stringSubstitutor0.setDisableSubstitutionInValues(true);
      stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(false);
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = StringSubstitutor.replace((Object) "6\"N4", (Map<String, Object>) hashMap0, "6\"N4", "6\"N4");
      assertEquals("6\"N4", string0);
  }
}
