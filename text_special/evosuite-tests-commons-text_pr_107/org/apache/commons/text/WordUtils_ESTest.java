/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 21:56:15 GMT 2025
 */

package org.apache.commons.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.regex.PatternSyntaxException;
import org.apache.commons.text.WordUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class WordUtils_ESTest extends WordUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = WordUtils.abbreviate("MMEi;O 1fz*Qo>pJT8EMEi;O 1fz*Qo>pJT8iMEi;O 1fz*Qo>pJT8;MEi;O 1fz*Qo>pJT8OMEi;O 1fz*Qo>pJT81MEi;O 1fz*Qo>pJT8fMEi;O 1fz*Qo>pJT8zMEi;O 1fz*Qo>pJT8*MEi;O 1fz*Qo>pJT8QMEi;O 1fz*Qo>pJT8oMEi;O 1fz*Qo>pJT8>MEi;O 1fz*Qo>pJT8pMEi;O 1fz*Qo>pJT8JMEi;O 1fz*Qo>pJT8TMEi;O 1fz*Qo>pJT88", 0, 1, "Le/d~9)E/t$$CEwnx");
      assertEquals("MLe/d~9)E/t$$CEwnx", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = WordUtils.abbreviate("upper value is less than lower value", 20, 20, "Rz");
      assertEquals("upper value is less Rz", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = WordUtils.abbreviate("AD1[v<~|u", 1, 1, "AD1[v<~|u");
      assertEquals("AAD1[v<~|u", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = WordUtils.abbreviate("zN1M]!GhK'1", 90, 90, "zN1M]!GhK'1");
      assertEquals("zN1M]!GhK'1", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = WordUtils.abbreviate("A", 1, 1, "|@rT");
      assertEquals("A", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = WordUtils.abbreviate("", 0, (-1), "org.apache.commons.text.WordUtils");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = WordUtils.abbreviate("upper value is less than lower value", 24, 24, "Rz");
      assertEquals("upper value is less thanRz", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = WordUtils.abbreviate("Tc4c\"", (-2371), 0, "Tc4c\"");
      assertEquals("Tc4c\"", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = WordUtils.isDelimiter((-1610612734), charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'b';
      boolean boolean0 = WordUtils.isDelimiter('a', charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = WordUtils.wrap((String) null, (-4058), "bi]wHi}#G%kub", false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = WordUtils.wrap(" ", 2590, "!L", false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[6];
      String string0 = WordUtils.uncapitalize((String) null, charArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = WordUtils.uncapitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = WordUtils.swapCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[8];
      String string0 = WordUtils.initials((String) null, charArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = WordUtils.initials("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[8];
      String string0 = WordUtils.capitalizeFully((String) null, charArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = WordUtils.capitalizeFully("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[3];
      String string0 = WordUtils.capitalize((String) null, charArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = WordUtils.capitalize("3Oli616rUzemdpCai");
      assertEquals("3Oli616rUzemdpCai", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = WordUtils.capitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = WordUtils.abbreviate((String) null, 321, 321, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        WordUtils.wrap("BYDF~HUq}V@O(Z~q|Z", 4, "BYDF~HUq}V@O(Z~q|Z", true, "BYDF~HUq}V@O(Z~q|Z");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 19
         // BYDF~HUq}V@O(Z~q|Z
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        WordUtils.wrap("NBa&`U|", (-2082408384), "NBa&`U|", true, "NBa&`U|");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 8, end 7, s.length() 7
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "[ L>ozo#m-j;0";
      // Undeclared exception!
      try { 
        WordUtils.containsAllWords("[ L>ozo#m-j;0", charSequenceArray0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal character range near index 14
         // .*\\b[ L>ozo#m-j;0\\b.*
         //               ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "0q2";
      charSequenceArray0[1] = (CharSequence) "0-OMnnq%\t9MqVB2P27";
      boolean boolean0 = WordUtils.containsAllWords("0q2", charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[3] = 'b';
      String string0 = WordUtils.initials("upper value cannot be less than -1", charArray0);
      assertEquals("ue", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[6];
      String string0 = WordUtils.initials("", charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = WordUtils.uncapitalize("The validated collection is empty", (char[]) null);
      assertEquals("the validated collection is empty", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = WordUtils.uncapitalize("", charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = WordUtils.capitalizeFully("T_rg8", charArray0);
      assertEquals("T_rg8", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[5];
      String string0 = WordUtils.capitalizeFully("", charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = WordUtils.capitalize("Comparator should not be null.", (char[]) null);
      assertEquals("Comparator Should Not Be Null.", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = WordUtils.capitalize("", charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = WordUtils.wrap("upper value cannot be less than -1", (-2121294821), " ", true, "");
      assertEquals("u p p e r v a l u e c a n n o t b e l e s s t h a n - 1", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = WordUtils.wrap("The value %s is not in the specified inclusive range of %s to %s", (-1775), "4`mFmx8IUQ=Xg~<\"!0", false, "");
      assertEquals("The4`mFmx8IUQ=Xg~<\"!0value4`mFmx8IUQ=Xg~<\"!0%s4`mFmx8IUQ=Xg~<\"!0is4`mFmx8IUQ=Xg~<\"!0not4`mFmx8IUQ=Xg~<\"!0in4`mFmx8IUQ=Xg~<\"!0the4`mFmx8IUQ=Xg~<\"!0specified4`mFmx8IUQ=Xg~<\"!0inclusive4`mFmx8IUQ=Xg~<\"!0range4`mFmx8IUQ=Xg~<\"!0of4`mFmx8IUQ=Xg~<\"!0%s4`mFmx8IUQ=Xg~<\"!0to4`mFmx8IUQ=Xg~<\"!0%s", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = WordUtils.wrap("AD1[v<~|u", 0, (String) null, true, "l");
      assertEquals("A\nD\n1\n[\nv\n<\n~\n|\nu", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = WordUtils.wrap((String) null, 0, "}w{bJPyQc", true, "*p&qvPxFL_@$bK[EZ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = WordUtils.wrap("MEi;O 1fz*Qo>pJT8", 1, "MEi;O 1fz*Qo>pJT8", true);
      assertEquals("MMEi;O 1fz*Qo>pJT8EMEi;O 1fz*Qo>pJT8iMEi;O 1fz*Qo>pJT8;MEi;O 1fz*Qo>pJT8OMEi;O 1fz*Qo>pJT81MEi;O 1fz*Qo>pJT8fMEi;O 1fz*Qo>pJT8zMEi;O 1fz*Qo>pJT8*MEi;O 1fz*Qo>pJT8QMEi;O 1fz*Qo>pJT8oMEi;O 1fz*Qo>pJT8>MEi;O 1fz*Qo>pJT8pMEi;O 1fz*Qo>pJT8JMEi;O 1fz*Qo>pJT8TMEi;O 1fz*Qo>pJT88", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = WordUtils.capitalize("bbbbb", charArray0);
      assertEquals("Bbbbb", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        WordUtils.abbreviate("BR0di+qT]+^{A", 3456, 338, "BR0di+qT]+^{A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // upper value is less than lower value
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = WordUtils.abbreviate("b in an array ofb", 2, (-1), "b in an array ofb");
      assertEquals("b inb in an array ofb", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        WordUtils.abbreviate("", (-1073), (-1073), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // upper value cannot be less than -1
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = WordUtils.isDelimiter(0, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      boolean boolean0 = WordUtils.isDelimiter(2780, (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      char[] charArray0 = new char[7];
      boolean boolean0 = WordUtils.isDelimiter(2, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'y';
      boolean boolean0 = WordUtils.isDelimiter('y', charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      boolean boolean0 = WordUtils.isDelimiter('k', (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "b:rb";
      boolean boolean0 = WordUtils.containsAllWords("b:rb", charSequenceArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = WordUtils.containsAllWords("Tc4c\"", charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      boolean boolean0 = WordUtils.containsAllWords("b}b", charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[11];
      boolean boolean0 = WordUtils.containsAllWords(charSequenceArray0[0], charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = WordUtils.initials("bbThe\nvalidated\nvalue\nis\nnot\na\nnumberbb", (char[]) null);
      assertEquals("bvvinan", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = WordUtils.initials("Object varargs must not be null", charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = WordUtils.initials((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = WordUtils.swapCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = WordUtils.swapCase("bzN1M]!GhK'1b");
      assertEquals("BZn1m]!gHk'1B", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = WordUtils.uncapitalize("MEi;O 1z*Qo>pJT8");
      assertEquals("mEi;O 1z*Qo>pJT8", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = WordUtils.capitalizeFully((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = WordUtils.wrap("The validated collection is empty", (-33));
      assertEquals("The\nvalidated\ncollection\nis\nempty", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = WordUtils.wrap("bttb=HCKb]VIbtb=HCKb]VI=tb=HCKb]VIHtb=HCKb]VICtb=HCKb]VIKtb=HCKb]VIbtb=HCKb]VI]tb=HCKb]VIVtb=HCKb]VI_tb=HCKb]Vtb=HCKb]VIIb", (-2106185883), "bttb=HCKb]VIbtb=HCKb]VI=tb=HCKb]VIHtb=HCKb]VICtb=HCKb]VIKtb=HCKb]VIbtb=HCKb]VI]tb=HCKb]VIVtb=HCKb]VI_tb=HCKb]Vtb=HCKb]VIIb", true, "b\u0000\u0000\u0000b");
      // Undeclared exception!
      WordUtils.wrap(string0, (-2092419962), string0, true, "bB=#7mvfEbb");
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = WordUtils.wrap("The validated map is empty", 1, "_A^$O{[1UCA}", true, "JdKzZ|");
      assertEquals("he_A^$O{[1UCA}al_A^$O{[1UCA}at_A^$O{[1UCA} m_A^$O{[1UCA} i_A^$O{[1UCA}em_A^$O{[1UCA}ty", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = WordUtils.wrap("G", (-287), "JdKzZ|", false, "JdKzZ|");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      // Undeclared exception!
      try { 
        WordUtils.wrap(" .!<", Integer.MAX_VALUE, ".", true, ".");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = WordUtils.wrap((String) null, (-199));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      WordUtils wordUtils0 = new WordUtils();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String string0 = WordUtils.capitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = WordUtils.capitalizeFully("up&\"r Dah&%Iannot ce less War -1");
      assertEquals("Up&\"r Dah&%iannot Ce Less War -1", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String string0 = WordUtils.initials(" .!<");
      assertEquals(".", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      String string0 = WordUtils.uncapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String string0 = WordUtils.wrap(" ", 322);
      assertEquals("", string0);
      assertNotNull(string0);
  }
}
