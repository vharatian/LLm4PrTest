/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 19:42:01 GMT 2025
 */

package org.apache.commons.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.CharArrayReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.time.chrono.MinguoEra;
import java.time.format.TextStyle;
import java.util.ArrayDeque;
import java.util.EnumSet;
import java.util.Iterator;
import java.util.List;
import java.util.ServiceLoader;
import java.util.TreeSet;
import org.apache.commons.text.TextStringBuilder;
import org.apache.commons.text.matcher.StringMatcher;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class TextStringBuilder_ESTest extends TextStringBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        textStringBuilder0.insert(0, object0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 0
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("{ 8;c*");
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendNewLine();
      textStringBuilder1.trim();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(" ");
      textStringBuilder0.trim();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(263);
      ArrayDeque<MinguoEra> arrayDeque0 = new ArrayDeque<MinguoEra>();
      MinguoEra minguoEra0 = MinguoEra.BEFORE_ROC;
      arrayDeque0.add(minguoEra0);
      textStringBuilder0.appendWithSeparators((Iterable<?>) arrayDeque0, "PtZ9R.Y5");
      textStringBuilder0.startsWith("PtZ9R.Y5");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(charBuffer0);
      textStringBuilder0.rightString(2);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder('z');
      textStringBuilder0.rightString(0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = new TextStringBuilder(".");
      textStringBuilder0.appendNewLine();
      TextStringBuilder textStringBuilder2 = textStringBuilder0.append(textStringBuilder1);
      textStringBuilder2.replaceFirst(".", ".");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.replaceFirst('0', '7');
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendFixedWidthPadRight((Object) textStringBuilder_TextStringBuilderTokenizer0, 598, 'e');
      textStringBuilder1.replaceAll("k", (String) null);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((-157));
      PipedReader pipedReader0 = new PipedReader();
      textStringBuilder0.readFrom((Reader) pipedReader0, 0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(";'");
      textStringBuilder0.midString(1, 1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.midString(0, 3);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("");
      textStringBuilder0.midString(0, 0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      char[] charArray0 = new char[5];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0, 2);
      textStringBuilder0.leftString(2);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      char[] charArray0 = new char[5];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.leftString(0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.lastIndexOf("jV#", 0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      MinguoEra minguoEra0 = MinguoEra.BEFORE_ROC;
      ArrayDeque<MinguoEra> arrayDeque0 = new ArrayDeque<MinguoEra>();
      arrayDeque0.add(minguoEra0);
      textStringBuilder0.appendWithSeparators((Iterable<?>) arrayDeque0, "");
      textStringBuilder0.indexOf("U7_m)42C-K`HD", 34);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.indexOf("M(;+!8@16V6]kp'gM", 270);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      char[] charArray0 = new char[8];
      textStringBuilder0.getChars(charArray0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      TextStringBuilder textStringBuilder1 = new TextStringBuilder("|     ");
      textStringBuilder1.equalsIgnoreCase(textStringBuilder0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.appendSeparator('7', (int) '7');
      TextStringBuilder textStringBuilder1 = TextStringBuilder.wrap(charArray0);
      textStringBuilder1.equalsIgnoreCase(textStringBuilder0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(", length=");
      TextStringBuilder textStringBuilder1 = new TextStringBuilder(textStringBuilder0);
      textStringBuilder0.equals(textStringBuilder1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder.TextStringBuilderWriter textStringBuilder_TextStringBuilderWriter0 = textStringBuilder0.new TextStringBuilderWriter();
      textStringBuilder_TextStringBuilderWriter0.append((CharSequence) "org.apache.commons.text.TextStringBuilder");
      textStringBuilder_TextStringBuilderWriter0.append('M');
      textStringBuilder0.endsWith("org.apache.commons.text.TextStringBuilder");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(")M9]3}T");
      char[] charArray0 = new char[1];
      charArray0[0] = '7';
      TextStringBuilder textStringBuilder1 = textStringBuilder0.insert(2, charArray0);
      textStringBuilder1.deleteAll('7');
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[6] = '^';
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.deleteAll('^');
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(263);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "PtZ9R.Y5");
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln(stringBuffer0);
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getDelimiterMatcher();
      textStringBuilder1.contains(stringMatcher0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((CharSequence) "No proxy target found for ");
      textStringBuilder0.contains('7');
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("(?/%]JRPi|V2=8");
      textStringBuilder0.appendSeparator("", (-1455));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.appendPadding('\u0000', ' ');
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder('z');
      textStringBuilder0.appendFixedWidthPadLeft(0, 0, 'z');
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      Object object0 = new Object();
      textStringBuilder0.appendFixedWidthPadRight(object0, 23, ':');
      StringBuffer stringBuffer0 = new StringBuffer(textStringBuilder0);
      textStringBuilder0.appendln(stringBuffer0, 2, 2);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(263);
      // Undeclared exception!
      try { 
        textStringBuilder0.append((CharSequence) "PtZ9R.Y5", 2162, 38);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // endIndex must be greater than startIndex
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      try { 
        textStringBuilder0.append((CharSequence) stringBuilder0, 45, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // endIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      char[] charArray0 = new char[2];
      TextStringBuilder.wrap(charArray0, (int) '\u0000');
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      char[] charArray0 = new char[2];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0, 2);
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      textStringBuilder_TextStringBuilderReader0.skip(2);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(", length=");
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      textStringBuilder_TextStringBuilderReader0.read(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(", length=");
      char[] charArray0 = new char[7];
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      textStringBuilder_TextStringBuilderReader0.read(charArray0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln(charArray0);
      textStringBuilder1.validateIndex(0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(".");
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      textStringBuilder_TextStringBuilderReader0.ready();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("");
      char[] charArray0 = new char[4];
      TextStringBuilder.TextStringBuilderWriter textStringBuilder_TextStringBuilderWriter0 = textStringBuilder0.new TextStringBuilderWriter();
      textStringBuilder_TextStringBuilderWriter0.write(charArray0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder.TextStringBuilderWriter textStringBuilder_TextStringBuilderWriter0 = textStringBuilder0.new TextStringBuilderWriter();
      textStringBuilder_TextStringBuilderWriter0.write("\u0003", 0, 0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder.wrap(charArray0, 0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      textStringBuilder0.validateRange(0, 0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(119);
      textStringBuilder0.appendFixedWidthPadRight((Object) textStringBuilder0, 119, '=');
      textStringBuilder0.validateRange(1, 1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.minimizeCapacity();
      textStringBuilder0.trim();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(".");
      textStringBuilder0.toStringBuffer();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(".");
      textStringBuilder0.toString();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      Object object0 = new Object();
      textStringBuilder0.appendFixedWidthPadRight(object0, 23, ':');
      textStringBuilder0.substring(2, 23);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.substring(0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) '\u0000';
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendAll(objectArray0);
      textStringBuilder0.append((CharSequence) textStringBuilder1);
      textStringBuilder0.subSequence(18, 32);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(263);
      StringBuffer stringBuffer0 = new StringBuffer("PtZ9R.Y5");
      textStringBuilder0.appendln(stringBuffer0);
      textStringBuilder0.size();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      char[] charArray0 = new char[5];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln("e");
      textStringBuilder1.setNullText("e");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      textStringBuilder0.appendFixedWidthPadRight((Object) textStringBuilder_TextStringBuilderTokenizer0, 598, 'e');
      textStringBuilder0.setNewLineText((String) null);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(".");
      textStringBuilder0.setNewLineText("Q#COrD&TjNT\"e)0 M#");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(263);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "PtZ9R.Y5");
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln(stringBuffer0);
      textStringBuilder1.setCharAt(0, 'q');
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.appendFixedWidthPadRight(827, 827, 'W');
      textStringBuilder0.setCharAt(256, '{');
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("QHD:C~^g,ezYfk65Ec");
      char[] charArray0 = new char[1];
      TextStringBuilder textStringBuilder1 = TextStringBuilder.wrap(charArray0);
      textStringBuilder1.set(textStringBuilder0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      TextStringBuilder textStringBuilder1 = new TextStringBuilder("QHD:C~^g,ezYfk65Ec");
      textStringBuilder0.set(textStringBuilder1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(")M9]3}T");
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendFixedWidthPadRight((Object) ")M9]3}T", 80, '7');
      textStringBuilder1.reverse();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.reverse();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      textStringBuilder0.appendFixedWidthPadRight((Object) textStringBuilder_TextStringBuilderTokenizer0, 80, 'Y');
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getQuoteMatcher();
      textStringBuilder0.replaceFirst(stringMatcher0, "");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      textStringBuilder0.appendFixedWidthPadRight((Object) textStringBuilder_TextStringBuilderTokenizer0, 80, 'Y');
      textStringBuilder0.replaceFirst((String) null, "");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.replaceFirst("", "");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.minimizeCapacity();
      textStringBuilder0.replaceFirst('o', 'U');
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(101);
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(stringBuilder0);
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendFixedWidthPadRight((Object) stringBuilder0, 116, 'd');
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getIgnoredMatcher();
      textStringBuilder1.replaceAll(stringMatcher0, "6PhPd}G6N");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(101);
      StringBuilder stringBuilder1 = stringBuilder0.append((float) 0);
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(stringBuilder1);
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getIgnoredMatcher();
      textStringBuilder0.replaceAll(stringMatcher0, "6PhPd}G6N");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getQuoteMatcher();
      textStringBuilder0.replaceAll(stringMatcher0, "Sm5*}^");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(".");
      textStringBuilder0.replaceAll(".", "org.assertj.core.xtractor.ByNameMultipleExtractor");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      char[] charArray0 = new char[2];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0, 2);
      textStringBuilder0.append((float) 2);
      textStringBuilder0.replaceAll('/', 'O');
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.replaceAll('J', 'J');
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getDelimiterMatcher();
      textStringBuilder0.replace(stringMatcher0, "!A\"Rl!Ow<", 0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      char[] charArray0 = new char[5];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.replace((StringMatcher) null, "", 0, 21, (-1044));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      char[] charArray0 = new char[2];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0, 2);
      textStringBuilder0.replace(2, 715, "6SihdS");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) textStringBuilder0);
      textStringBuilder0.readFrom(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.length();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      char[] charArray0 = new char[2];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0, 2);
      textStringBuilder0.length();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendNewLine();
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getDelimiterMatcher();
      textStringBuilder1.lastIndexOf(stringMatcher0, 30);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      textStringBuilder0.appendln(2);
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getDelimiterMatcher();
      textStringBuilder0.lastIndexOf(stringMatcher0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("QHD:C~^g,ezYfk65Ec");
      textStringBuilder0.lastIndexOf("", 1415);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.appendln(':');
      textStringBuilder0.lastIndexOf("");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.lastIndexOf("{ 8;c*");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.appendSeparator('7', (int) '7');
      textStringBuilder0.lastIndexOf('7', 1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '7';
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.lastIndexOf('7');
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(274);
      textStringBuilder0.appendSeparator(",s<X", "Index: ");
      textStringBuilder0.insert(1, true);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln(':');
      textStringBuilder1.insert(0, (Object) textStringBuilder1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(", length=");
      textStringBuilder0.insert(5, (Object) null);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      char[] charArray0 = new char[2];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0, 2);
      textStringBuilder0.appendFixedWidthPadLeft(177, 951, 'O');
      textStringBuilder0.insert(6, (-1634L));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("org.apache.commons.text.TextStringBuilder$TextStringBuilderTokenizer");
      textStringBuilder0.insert(67, 29);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendFixedWidthPadLeft(1514, 1514, '|');
      textStringBuilder1.insert(67, 29);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(256);
      textStringBuilder0.append(false);
      textStringBuilder0.insert(2, 2397.0F);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendFixedWidthPadLeft((Object) textStringBuilder_TextStringBuilderTokenizer0, 560, 'F');
      textStringBuilder1.insert(2, (float) 560);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendNewLine();
      textStringBuilder1.insert(0, (-1.0));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(263);
      StringBuffer stringBuffer0 = new StringBuffer("PtZ9R.Y5");
      textStringBuilder0.appendln(stringBuffer0);
      textStringBuilder0.insert(4, '@');
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      Object[] objectArray0 = new Object[14];
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      objectArray0[2] = (Object) textStringBuilder_TextStringBuilderTokenizer0;
      textStringBuilder0.appendAll(objectArray0);
      textStringBuilder0.insert(41, 'H');
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      textStringBuilder0.appendln("");
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getDelimiterMatcher();
      textStringBuilder0.indexOf(stringMatcher0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln("E");
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder1.new TextStringBuilderTokenizer();
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getDelimiterMatcher();
      textStringBuilder0.indexOf(stringMatcher0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.indexOf("");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      char[] charArray0 = new char[3];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.indexOf('\u0000');
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) '\u0000';
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendAll(objectArray0);
      textStringBuilder1.indexOf('c');
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.getBuffer();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.appendln(':');
      textStringBuilder0.drainChar(0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) '\u0000';
      objectArray0[2] = (Object) '\u0000';
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendAll(objectArray0);
      textStringBuilder1.drainChar(38);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln("E");
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder1.new TextStringBuilderTokenizer();
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getDelimiterMatcher();
      textStringBuilder0.deleteFirst(stringMatcher0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getDelimiterMatcher();
      textStringBuilder0.deleteFirst(stringMatcher0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.deleteFirst("Q^lg9\"0lm;G!8;");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("net.bytebuddy.build.RepeatedAnnotationPlugin$RepeatedAnnotationAppender");
      textStringBuilder0.appendSeparator("net.bytebuddy.build.RepeatedAnnotationPlugin$RepeatedAnnotationAppender");
      textStringBuilder0.deleteFirst('q');
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.deleteFirst('O');
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.appendln("E");
      textStringBuilder0.deleteCharAt(1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      Object object0 = new Object();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendFixedWidthPadRight(object0, 23, ':');
      TextStringBuilder textStringBuilder2 = textStringBuilder1.append(true);
      textStringBuilder2.deleteCharAt(23);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      textStringBuilder0.readFrom((Reader) textStringBuilder_TextStringBuilderReader0, 870);
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getQuoteMatcher();
      textStringBuilder0.deleteAll(stringMatcher0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(", length=");
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getQuoteMatcher();
      textStringBuilder0.deleteAll(stringMatcher0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getTrimmerMatcher();
      textStringBuilder0.deleteAll(stringMatcher0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.appendln("e");
      textStringBuilder0.deleteAll("e");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = (Object) '\u0000';
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendAll(objectArray0);
      textStringBuilder0.append((CharSequence) textStringBuilder1);
      textStringBuilder1.deleteAll(' ');
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.deleteAll('z');
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(".");
      TextStringBuilder textStringBuilder1 = textStringBuilder0.setLength(77);
      textStringBuilder1.delete(6, 77);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      textStringBuilder0.appendWithSeparators(objectArray0, "");
      textStringBuilder0.clear();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendSeparator('m', 'm');
      textStringBuilder1.append(true);
      textStringBuilder1.appendNewLine();
      TextStringBuilder textStringBuilder2 = textStringBuilder1.appendln(0.0F);
      textStringBuilder2.charAt(6);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("QZ0]/oQNEU -_Q.>9Di");
      textStringBuilder0.charAt(17);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.minimizeCapacity();
      textStringBuilder1.capacity();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.build();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) '\u0000';
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendAll(objectArray0);
      textStringBuilder1.appendln(true);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(", length=");
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      String[] stringArray0 = textStringBuilder_TextStringBuilderTokenizer0.getTokenArray();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendWithSeparators((Object[]) stringArray0, "startIndex must be valid");
      textStringBuilder0.appendln(textStringBuilder1, 1, 25);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(", length=");
      TextStringBuilder textStringBuilder1 = textStringBuilder0.minimizeCapacity();
      textStringBuilder1.appendln(textStringBuilder0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("XFN<");
      textStringBuilder0.appendln((StringBuilder) null, 102, (-1202));
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.appendln((StringBuilder) null, 114, 76);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      char[] charArray0 = new char[7];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.appendln((StringBuilder) null);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(", length=");
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendSeparator("com.oracle.truffle.api.TruffleLanguage$Env");
      textStringBuilder1.appendln((StringBuffer) null, 61, 61);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("");
      Object[] objectArray0 = new Object[1];
      MinguoEra minguoEra0 = MinguoEra.ROC;
      textStringBuilder0.appendln((Object) minguoEra0);
      textStringBuilder0.appendln("", objectArray0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(".");
      textStringBuilder0.appendln((String) null, 11, 198);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(263);
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      textStringBuilder0.appendFixedWidthPadRight((Object) textStringBuilder_TextStringBuilderTokenizer0, 263, '^');
      textStringBuilder0.appendln(0.0F);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendFixedWidthPadRight((Object) textStringBuilder_TextStringBuilderReader0, 565, 'G');
      textStringBuilder1.appendln((double) (-1));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.appendln('0');
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      String[] stringArray0 = textStringBuilder_TextStringBuilderTokenizer0.getTokenArray();
      textStringBuilder0.appendWithSeparators((Object[]) stringArray0, "startIndex must be valid");
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      ArrayDeque<MinguoEra> arrayDeque0 = new ArrayDeque<MinguoEra>();
      textStringBuilder0.appendWithSeparators((Iterable<?>) arrayDeque0, "Sm5*}^");
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.appendSeparator("RBXi3", "");
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.appendSeparator("", "");
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) '\u0000';
      objectArray0[2] = (Object) '\u0000';
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendAll(objectArray0);
      textStringBuilder1.appendSeparator("s", 58);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.appendSeparator("1>J!uOK+5)[H#^");
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.appendSeparator('s', 0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      char[] charArray0 = new char[2];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0, 2);
      textStringBuilder0.appendSeparator('k', 'A');
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      ArrayDeque<MinguoEra> arrayDeque0 = new ArrayDeque<MinguoEra>();
      textStringBuilder0.appendln((Object) arrayDeque0);
      textStringBuilder0.appendSeparator('t');
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.appendSeparator('P');
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(", length=");
      TextStringBuilder textStringBuilder1 = textStringBuilder0.minimizeCapacity();
      textStringBuilder1.appendNull();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.appendNull();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.appendNewLine();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.appendFixedWidthPadRight(2492, 0, 'I');
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.appendFixedWidthPadLeft((-286), (-286), ':');
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      Object object0 = new Object();
      textStringBuilder0.appendFixedWidthPadRight(object0, 477, 'B');
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      textStringBuilder0.appendAll((Iterator<?>) textStringBuilder_TextStringBuilderTokenizer0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      textStringBuilder0.appendAll((Iterator<?>) textStringBuilder_TextStringBuilderTokenizer0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      char[] charArray0 = new char[2];
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      textStringBuilder0.appendFixedWidthPadLeft((Object) textStringBuilder_TextStringBuilderTokenizer0, 560, 'F');
      List<String> list0 = textStringBuilder_TextStringBuilderTokenizer0.tokenize(charArray0, 4229, 1);
      textStringBuilder0.appendAll((Iterable<?>) list0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      Object[] objectArray0 = new Object[9];
      TextStringBuilder textStringBuilder1 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.appendWithSeparators(objectArray0, ", length=");
      textStringBuilder1.append(textStringBuilder0, 3, 0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("com.oracle.truffle.api.CompilerDirectives");
      textStringBuilder0.append(textStringBuilder0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((-2254));
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder1 = TextStringBuilder.wrap(charArray0);
      textStringBuilder1.append(textStringBuilder0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) textStringBuilder0;
      textStringBuilder0.appendWithSeparators(objectArray0, "F[&aCF$XGu");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) textStringBuilder0);
      textStringBuilder0.append(charBuffer0);
      textStringBuilder0.append((char[]) null, 32, 1102);
      assertEquals(80, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      Object[] objectArray0 = new Object[2];
      textStringBuilder0.appendWithSeparators(objectArray0, "F[&aCF$XGu");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) textStringBuilder0);
      textStringBuilder0.append(charBuffer0);
      assertFalse(textStringBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln((StringBuilder) null);
      textStringBuilder0.appendSeparator("net.bytebuddy.build.RepeatedAnnotationPlugin$RepeatedAnnotationAppender");
      textStringBuilder1.append((StringBuilder) null, (-3571), 108);
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(144, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append((StringBuilder) null, 607, 263);
      assertSame(textStringBuilder0, textStringBuilder1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(263);
      StringBuffer stringBuffer0 = new StringBuffer(263);
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln(stringBuffer0);
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder1.new TextStringBuilderTokenizer();
      textStringBuilder0.appendFixedWidthPadRight((Object) textStringBuilder_TextStringBuilderTokenizer0, 263, '^');
      textStringBuilder0.append((StringBuilder) null);
      assertTrue(textStringBuilder0.isReallocated());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append((StringBuilder) null);
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(44);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 'z';
      objectArray0[1] = (Object) textStringBuilder0;
      textStringBuilder0.appendAll(objectArray0);
      textStringBuilder0.append((StringBuffer) null, 0, (-418));
      assertTrue(textStringBuilder0.isNotEmpty());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(76);
      textStringBuilder0.appendFixedWidthPadRight(76, 76, 'W');
      textStringBuilder0.append((StringBuffer) null, 5, 76);
      assertEquals(76, textStringBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      Object object0 = new Object();
      textStringBuilder0.appendFixedWidthPadRight(object0, (int) ':', ':');
      StringBuffer stringBuffer0 = new StringBuffer(1404);
      textStringBuilder0.append(stringBuffer0);
      assertTrue(textStringBuilder0.isReallocated());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      StringBuffer stringBuffer0 = new StringBuffer();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append(stringBuffer0);
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(119);
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendFixedWidthPadRight((Object) textStringBuilder0, 119, '=');
      textStringBuilder1.appendln("endIndex must be valid");
      Object[] objectArray0 = new Object[3];
      textStringBuilder0.append("", objectArray0);
      assertTrue(textStringBuilder0.isReallocated());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      Object[] objectArray0 = new Object[8];
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append("", objectArray0);
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.append("Recursive synchronous thread local action detected. They are disallowed as they may cause deadlocks. Schedule an asynchronous thread local action instead.", 41, 41);
      assertTrue(textStringBuilder0.isReallocated());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(", length=");
      textStringBuilder0.append("org.apache.commons.text.TextStringBuilder");
      textStringBuilder0.deleteFirst(", length=");
      assertEquals(100, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append("");
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      MinguoEra minguoEra0 = MinguoEra.BEFORE_ROC;
      textStringBuilder0.append((Object) minguoEra0);
      textStringBuilder0.appendln(2);
      assertEquals(74, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ArrayDeque<MinguoEra> arrayDeque0 = new ArrayDeque<MinguoEra>();
      MinguoEra minguoEra0 = MinguoEra.BEFORE_ROC;
      arrayDeque0.add(minguoEra0);
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((CharSequence) "PtZ9R.Y5");
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendWithSeparators((Iterable<?>) arrayDeque0, (String) null);
      textStringBuilder1.append((CharSequence) null, 397, 574);
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(45, textStringBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((CharSequence) "PtZ9R.Y5");
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append((CharSequence) null, 397, 574);
      assertEquals(8, textStringBuilder1.length());
      assertEquals(40, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.append(0L);
      assertFalse(textStringBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      char[] charArray0 = new char[2];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.append(101);
      assertTrue(textStringBuilder0.isReallocated());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(27);
      textStringBuilder0.append((-1.0));
      assertEquals(4, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      char[] charArray0 = new char[5];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.append('~');
      textStringBuilder0.replace((StringMatcher) null, "", 0, 21, (-1044));
      assertEquals(12, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      // Undeclared exception!
      try { 
        TextStringBuilder.wrap((char[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // initialBuffer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      // Undeclared exception!
      try { 
        TextStringBuilder.wrap((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // initialBuffer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("Nm:58E,LmCYj*R&");
      // Undeclared exception!
      try { 
        textStringBuilder0.validateRange(426, 426);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      // Undeclared exception!
      try { 
        textStringBuilder0.validateIndex(40);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 40
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      try { 
        textStringBuilder0.substring(25, 25);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      try { 
        textStringBuilder0.replace(3057, 3, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      try { 
        textStringBuilder0.readFrom((CharBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      PipedReader pipedReader0 = new PipedReader('O');
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(bufferedReader0, 'O');
      try { 
        textStringBuilder0.readFrom((Readable) lineNumberReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.appendNewLine();
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      // Undeclared exception!
      textStringBuilder0.readFrom((Reader) textStringBuilder_TextStringBuilderReader0, 4006);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(")M9]3}T");
      // Undeclared exception!
      try { 
        textStringBuilder0.readFrom((Reader) null, 160);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0);
      PushbackReader pushbackReader0 = new PushbackReader(inputStreamReader0, 2);
      LineNumberReader lineNumberReader0 = new LineNumberReader(pushbackReader0);
      try { 
        textStringBuilder0.readFrom((Reader) lineNumberReader0, 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      try { 
        textStringBuilder0.readFrom((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      PipedReader pipedReader0 = new PipedReader();
      try { 
        textStringBuilder0.readFrom((Reader) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        textStringBuilder0.insert(1, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      try { 
        textStringBuilder0.insert(358, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 358
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("ir=7#u~#");
      // Undeclared exception!
      try { 
        textStringBuilder0.insert(177, "ir=7#u~#");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 177
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      try { 
        textStringBuilder0.equalsIgnoreCase((TextStringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      try { 
        textStringBuilder0.delete(32, 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        textStringBuilder0.appendln(charArray0, (-1296), 958);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 958
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        textStringBuilder0.appendln((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      char[] charArray0 = new char[5];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.appendln("e");
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        textStringBuilder0.appendTo(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("");
      // Undeclared exception!
      try { 
        textStringBuilder0.appendTo((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        textStringBuilder0.appendTo(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      // Undeclared exception!
      textStringBuilder0.appendFixedWidthPadRight((Object) textStringBuilder_TextStringBuilderTokenizer0, 19986, 'q');
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      char[] charArray0 = new char[7];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      // Undeclared exception!
      textStringBuilder0.appendFixedWidthPadRight((-704), 16384, 'R');
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getIgnoredMatcher();
      // Undeclared exception!
      textStringBuilder0.appendFixedWidthPadLeft((Object) stringMatcher0, 16384, 'Y');
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(263);
      // Undeclared exception!
      textStringBuilder0.appendFixedWidthPadLeft((-507), 14846, '~');
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendFixedWidthPadLeft(6, 6, 'B');
      // Undeclared exception!
      try { 
        textStringBuilder1.appendFixedWidthPadLeft(6, Integer.MAX_VALUE, 'B');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      char[] charArray0 = new char[2];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0, 2);
      TextStringBuilder textStringBuilder1 = TextStringBuilder.wrap(charArray0);
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder1.new TextStringBuilderReader();
      int int0 = textStringBuilder0.readFrom((Reader) textStringBuilder_TextStringBuilderReader0);
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(".");
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      // Undeclared exception!
      textStringBuilder0.readFrom((Reader) textStringBuilder_TextStringBuilderReader0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      int int0 = textStringBuilder0.readFrom((Reader) textStringBuilder_TextStringBuilderReader0);
      assertEquals(0, textStringBuilder0.size());
      assertEquals((-1), int0);
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(278);
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(108);
      textStringBuilder0.appendln(stringBuffer0);
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getQuoteMatcher();
      int int0 = textStringBuilder0.lastIndexOf(stringMatcher0, 278);
      assertEquals(1, textStringBuilder0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln(':');
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getDelimiterMatcher();
      int int0 = textStringBuilder1.lastIndexOf(stringMatcher0, 60);
      assertEquals(2, textStringBuilder0.length());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getTrimmerMatcher();
      int int0 = textStringBuilder0.lastIndexOf(stringMatcher0, 0);
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(")M9]3}T");
      int int0 = textStringBuilder0.lastIndexOf(")M9]3}T", 80);
      assertEquals(39, textStringBuilder0.capacity());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      int int0 = textStringBuilder0.lastIndexOf("Zd25} Lsx", (-1244));
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      char[] charArray0 = new char[21];
      charArray0[1] = '7';
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln(charArray0);
      int int0 = textStringBuilder1.lastIndexOf('7', 44);
      assertEquals(22, textStringBuilder0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("6rlD$gp=k0R9O5Q");
      int int0 = textStringBuilder0.lastIndexOf('C', 4);
      assertEquals((-1), int0);
      assertEquals(15, textStringBuilder0.length());
      assertEquals(47, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.appendSeparator('B', '(');
      boolean boolean0 = textStringBuilder0.isNotEmpty();
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      boolean boolean0 = textStringBuilder0.isNotEmpty();
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.appendln(':');
      boolean boolean0 = textStringBuilder0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      Object object0 = new Object();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendFixedWidthPadRight(object0, 23, ':');
      TextStringBuilder textStringBuilder2 = textStringBuilder1.append(false);
      textStringBuilder2.insert(23, (String) null);
      assertEquals(28, textStringBuilder0.length());
      assertEquals(28, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("endIndex must be greater than startIndex");
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(stringBuilder0);
      textStringBuilder0.insert(0, "endIndex must be greater than startIndex");
      assertEquals(80, textStringBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("No proxy target found for ");
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getDelimiterMatcher();
      int int0 = textStringBuilder0.indexOf(stringMatcher0, (-279));
      assertEquals(2, int0);
      assertEquals(58, textStringBuilder0.capacity());
      assertEquals(26, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getDelimiterMatcher();
      int int0 = textStringBuilder0.indexOf(stringMatcher0, 7);
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(".");
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getTrimmerMatcher();
      int int0 = textStringBuilder0.indexOf(stringMatcher0, (-283));
      assertEquals((-1), int0);
      assertEquals(33, textStringBuilder0.capacity());
      assertEquals(1, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(263);
      ArrayDeque<MinguoEra> arrayDeque0 = new ArrayDeque<MinguoEra>();
      MinguoEra minguoEra0 = MinguoEra.BEFORE_ROC;
      arrayDeque0.add(minguoEra0);
      textStringBuilder0.appendWithSeparators((Iterable<?>) arrayDeque0, "Sm5*}^");
      int int0 = textStringBuilder0.indexOf("<b.!", (-954));
      assertEquals(37, textStringBuilder0.length());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      char[] charArray0 = new char[2];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      int int0 = textStringBuilder0.indexOf("length must be valid", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("{ 8;c*");
      int int0 = textStringBuilder0.indexOf("{ 8;c*", 0);
      assertEquals(6, textStringBuilder0.length());
      assertEquals(0, int0);
      assertEquals(38, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(".");
      int int0 = textStringBuilder0.indexOf(".", (-1));
      assertEquals(0, int0);
      assertEquals(33, textStringBuilder0.capacity());
      assertEquals(1, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("");
      textStringBuilder0.appendFixedWidthPadLeft(30, 30, 'I');
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln('I');
      int int0 = textStringBuilder1.indexOf("", 30);
      assertEquals(32, textStringBuilder0.size());
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      int int0 = textStringBuilder0.indexOf((String) null, 23);
      assertEquals((-1), int0);
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(", length=");
      char[] charArray0 = new char[7];
      charArray0[0] = '#';
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendSeparator("com.oracle.truffle.api.TruffleLanguage$Env");
      TextStringBuilder textStringBuilder2 = textStringBuilder1.append(charArray0);
      int int0 = textStringBuilder2.indexOf('#', 22);
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(51, int0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(", length=");
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendSeparator("com.oracle.truffle.api.TruffleLanguage$Env");
      int int0 = textStringBuilder1.indexOf('#', 22);
      assertEquals(51, textStringBuilder0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      int int0 = textStringBuilder0.indexOf('b', 3503);
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      char[] charArray0 = new char[2];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      StringBuffer stringBuffer0 = new StringBuffer(1426);
      textStringBuilder0.appendln(stringBuffer0);
      // Undeclared exception!
      try { 
        textStringBuilder0.getChars(494, 3, charArray0, 1851);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(".");
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        textStringBuilder0.getChars(5, (-1), charArray0, 160);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      char[] charArray0 = new char[0];
      textStringBuilder0.appendFixedWidthPadLeft((-514), 111, '|');
      // Undeclared exception!
      try { 
        textStringBuilder0.getChars(111, 111, charArray0, 225);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = new TextStringBuilder((CharSequence) "<L");
      boolean boolean0 = textStringBuilder0.equals(textStringBuilder1);
      assertEquals(34, textStringBuilder1.capacity());
      assertFalse(boolean0);
      assertEquals(2, textStringBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      boolean boolean0 = textStringBuilder0.equals(textStringBuilder0);
      assertTrue(boolean0);
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.ensureCapacity(437);
      assertTrue(textStringBuilder0.isReallocated());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      TextStringBuilder textStringBuilder1 = textStringBuilder0.ensureCapacity(0);
      assertFalse(textStringBuilder1.isReallocated());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.appendln('`');
      textStringBuilder0.delete(0, 1);
      assertTrue(textStringBuilder0.isNotEmpty());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      char[] charArray0 = new char[1];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendSeparator((String) null, "\"U");
      assertFalse(textStringBuilder1.isReallocated());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("");
      textStringBuilder0.setNullText("T_'ck>Ez");
      textStringBuilder0.appendNull();
      assertTrue(textStringBuilder0.isNotEmpty());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      char[] charArray0 = new char[4];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      textStringBuilder0.appendFixedWidthPadLeft((Object) textStringBuilder_TextStringBuilderTokenizer0, 38, 'x');
      assertEquals(42, textStringBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendFixedWidthPadLeft((Object) textStringBuilder_TextStringBuilderTokenizer0, (-887), '<');
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      Object[] objectArray0 = new Object[9];
      textStringBuilder0.appendWithSeparators(objectArray0, ", length=");
      textStringBuilder0.append(textStringBuilder0, 3, 0);
      assertTrue(textStringBuilder0.isReallocated());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = (Object) '\u0000';
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendAll(objectArray0);
      textStringBuilder1.append(textStringBuilder1, 13, 13);
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(43, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(".");
      // Undeclared exception!
      try { 
        textStringBuilder0.append(textStringBuilder0, 2147, 2147);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append((TextStringBuilder) null, 524, (-1843));
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      StringBuilder stringBuilder0 = new StringBuilder("initialBuffer.length=");
      textStringBuilder0.append(stringBuilder0, 7, 1);
      assertFalse(textStringBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append(stringBuffer0, 0, 0);
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        textStringBuilder0.append(stringBuffer0, (-2694), (-2694));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      try { 
        textStringBuilder0.append("W", 1, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.append("<L", 1, 1);
      assertEquals(1, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      char[] charArray0 = new char[2];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0, 2);
      // Undeclared exception!
      try { 
        textStringBuilder0.append("uARE&Gv8", 177, 19);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append((Object) textStringBuilder0);
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append((Object) null);
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((-2254));
      char[] charArray0 = textStringBuilder0.toCharArray();
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append((CharSequence) charBuffer0);
      assertFalse(textStringBuilder1.isNotEmpty());
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      char[] charArray0 = new char[2];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0, 2);
      StringWriter stringWriter0 = new StringWriter(2);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append((CharSequence) stringBuffer0);
      assertEquals(2, textStringBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      TextStringBuilder textStringBuilder0 = new TextStringBuilder('z');
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append((CharSequence) stringBuilder0);
      assertEquals(122, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append((CharSequence) "");
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(", length=");
      CharBuffer charBuffer0 = CharBuffer.allocate(2813);
      textStringBuilder0.append(charBuffer0, 2, 486);
      assertTrue(textStringBuilder0.isReallocated());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ":");
      // Undeclared exception!
      try { 
        textStringBuilder0.append(charBuffer0, (-290), 60);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append((CharBuffer) null, 115, 115);
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        textStringBuilder0.append(charArray0, 56, 56);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 56
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append((char[]) null, (-536), 0);
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append(charArray0);
      assertTrue(textStringBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(3196);
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append((char[]) null);
      assertEquals(3196, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.clear();
      assertEquals(32, textStringBuilder1.capacity());
      assertEquals(0, textStringBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.append(0.0F);
      assertEquals(3, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.append(101);
      assertEquals(3, textStringBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.append((long) 0);
      assertFalse(textStringBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      char[] charArray0 = new char[2];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.append((-252.83189));
      assertTrue(textStringBuilder0.isReallocated());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        textStringBuilder0.append((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(3174);
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getDelimiterMatcher();
      // Undeclared exception!
      try { 
        textStringBuilder0.replace(stringMatcher0, "QJ_L8TTH*)N", 3174, 9, 9);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      CharBuffer charBuffer0 = CharBuffer.allocate(1840);
      int int0 = textStringBuilder0.readFrom(charBuffer0);
      assertEquals(0, charBuffer0.length());
      assertEquals(1840, int0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      String string0 = textStringBuilder0.toString();
      assertEquals("", string0);
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      try { 
        textStringBuilder0.toCharArray((-1), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.appendln(textStringBuilder0);
      assertTrue(textStringBuilder0.isNotEmpty());
      
      textStringBuilder0.trim();
      assertFalse(textStringBuilder0.isNotEmpty());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      char[] charArray0 = textStringBuilder0.toCharArray(0, 0);
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("QJ1z$");
      char[] charArray0 = textStringBuilder0.toCharArray(2, 312);
      assertArrayEquals(new char[] {'1', 'z', '$'}, charArray0);
      assertEquals(37, textStringBuilder0.capacity());
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      char[] charArray1 = textStringBuilder0.toCharArray();
      assertEquals(6, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      CharSequence charSequence0 = textStringBuilder0.subSequence(0, 0);
      assertEquals("", charSequence0);
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      try { 
        textStringBuilder0.subSequence(9, (-522));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -531
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      try { 
        textStringBuilder0.subSequence((-726), (-726));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -726
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      try { 
        textStringBuilder0.subSequence(1958, 1958);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1958
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln((long) 1073741824);
      boolean boolean0 = textStringBuilder1.startsWith("shortName");
      assertTrue(textStringBuilder0.isReallocated());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("O?-T!:Artf1|XW");
      boolean boolean0 = textStringBuilder0.startsWith("O?-T!:Artf1|XW");
      assertEquals(14, textStringBuilder0.size());
      assertTrue(boolean0);
      assertEquals(46, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      boolean boolean0 = textStringBuilder0.startsWith("F[&aCF$XGu");
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      boolean boolean0 = textStringBuilder0.startsWith((String) null);
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      boolean boolean0 = textStringBuilder0.startsWith("");
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.setNullText("");
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.setNullText((String) null);
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.setLength(0);
      assertEquals(32, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isNotEmpty());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("O?-T!:Artf1|XW");
      textStringBuilder0.setLength(0);
      assertFalse(textStringBuilder0.isNotEmpty());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      try { 
        textStringBuilder0.setLength((-2822));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2822
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(", length=");
      String string0 = textStringBuilder0.rightString(2);
      assertEquals(41, textStringBuilder0.capacity());
      assertEquals("h=", string0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.rightString((-15));
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      String string0 = textStringBuilder0.rightString(9);
      assertEquals("", string0);
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln(textStringBuilder0);
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getDelimiterMatcher();
      textStringBuilder1.replaceAll(stringMatcher0, "");
      assertFalse(textStringBuilder1.isNotEmpty());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((CharSequence) "No proxy target found for ");
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getDelimiterMatcher();
      textStringBuilder0.deleteFirst(stringMatcher0);
      assertEquals(25, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append('_');
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder1.new TextStringBuilderTokenizer();
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getDelimiterMatcher();
      textStringBuilder1.replaceFirst(stringMatcher0, "L,18Nk");
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(1, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(", length=");
      textStringBuilder0.replaceFirst(", length=", (String) null);
      assertFalse(textStringBuilder0.isNotEmpty());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.replaceFirst("org.apache.commons.text.matcher.AbstractStringMatcher$NoneMatcher", "org.apache.commons.text.matcher.AbstractStringMatcher$NoneMatcher");
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.append(true);
      textStringBuilder0.replaceFirst('e', 'P');
      assertTrue(textStringBuilder0.isNotEmpty());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("ofe");
      TextStringBuilder textStringBuilder1 = textStringBuilder0.replaceFirst('k', 'j');
      assertEquals(35, textStringBuilder1.capacity());
      assertEquals(3, textStringBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.replaceFirst('j', 'j');
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      char[] charArray0 = new char[2];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      TextStringBuilder textStringBuilder1 = textStringBuilder0.replaceAll("org.apache.commons.text.matcher.AbstractStringMatcher$CharSetMatcher", (String) null);
      assertEquals(2, textStringBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.replaceAll((String) null, (String) null);
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("lengt must be1 vald");
      TextStringBuilder textStringBuilder1 = textStringBuilder0.replaceAll('m', 'q');
      assertEquals(51, textStringBuilder1.capacity());
      assertEquals(19, textStringBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("No proxy target found for ");
      TextStringBuilder textStringBuilder1 = textStringBuilder0.replaceAll('_', '\\');
      assertEquals(58, textStringBuilder1.capacity());
      assertEquals(26, textStringBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.replace(0, 0, "z2+s+:lBZIVYSS");
      assertTrue(textStringBuilder0.isNotEmpty());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      int int0 = textStringBuilder0.readFrom((Reader) textStringBuilder_TextStringBuilderReader0, (-2564));
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = new TextStringBuilder();
      textStringBuilder1.appendNewLine();
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder1.new TextStringBuilderReader();
      int int0 = textStringBuilder0.readFrom((Readable) textStringBuilder_TextStringBuilderReader0);
      assertFalse(textStringBuilder_TextStringBuilderReader0.ready());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendNewLine();
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      // Undeclared exception!
      textStringBuilder1.readFrom((Readable) textStringBuilder_TextStringBuilderReader0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      try { 
        textStringBuilder0.readFrom((Readable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.minimizeCapacity();
      textStringBuilder1.append(true);
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(8, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      TextStringBuilder textStringBuilder1 = textStringBuilder0.minimizeCapacity();
      assertFalse(textStringBuilder1.isReallocated());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.appendln('&');
      textStringBuilder0.midString(0, 3);
      assertEquals(2, textStringBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(")M9]3}T");
      String string0 = textStringBuilder0.midString(2, 2);
      assertEquals(39, textStringBuilder0.capacity());
      assertEquals("9]", string0);
      assertEquals(7, textStringBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      String string0 = textStringBuilder0.midString((-603), (-603));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(614);
      textStringBuilder0.midString(79, 614);
      assertEquals(614, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append('L');
      textStringBuilder0.appendFixedWidthPadLeft(115, 64, 'k');
      textStringBuilder1.leftString(64);
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(130, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(25);
      textStringBuilder0.leftString((-3842));
      assertEquals(25, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      String string0 = textStringBuilder0.leftString(91);
      assertEquals("", string0);
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("No proxy target found for ");
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getIgnoredMatcher();
      textStringBuilder0.lastIndexOf(stringMatcher0);
      assertEquals(26, textStringBuilder0.size());
      assertEquals(58, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      int int0 = textStringBuilder0.lastIndexOf((StringMatcher) null, (-414));
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.appendFixedWidthPadRight((Object) textStringBuilder0, (int) '7', '7');
      int int0 = textStringBuilder0.lastIndexOf("S^^#5[fa`8&", 322);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.appendln(textStringBuilder0);
      int int0 = textStringBuilder0.lastIndexOf("s", 2373);
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.appendln(textStringBuilder0);
      int int0 = textStringBuilder0.lastIndexOf(";'", 1415);
      assertEquals(1, textStringBuilder0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      int int0 = textStringBuilder0.lastIndexOf((String) null, 1415);
      assertEquals((-1), int0);
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("INSTANCE");
      int int0 = textStringBuilder0.lastIndexOf('A');
      assertEquals(40, textStringBuilder0.capacity());
      assertEquals(4, int0);
      assertEquals(8, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(")M9]3}T");
      int int0 = textStringBuilder0.lastIndexOf('n');
      assertEquals(39, textStringBuilder0.capacity());
      assertEquals(7, textStringBuilder0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      int int0 = textStringBuilder0.lastIndexOf('G', 1);
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(")M9]3}T");
      textStringBuilder0.appendFixedWidthPadRight((Object) ")M9]3}T", 80, '6');
      boolean boolean0 = textStringBuilder0.isReallocated();
      assertEquals(87, textStringBuilder0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      boolean boolean0 = textStringBuilder0.isReallocated();
      assertFalse(boolean0);
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((CharSequence) "No proxy target found for ");
      textStringBuilder0.insert(0, (long) 0);
      assertEquals(27, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("O?-T!:Artf1|XW");
      char[] charArray0 = new char[7];
      textStringBuilder0.insert(1, charArray0, 0, 1);
      assertEquals(15, textStringBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("Pj0Z_N^(");
      // Undeclared exception!
      try { 
        textStringBuilder0.insert(0, charArray0, 0, (-1663));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -1663
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("O?-T!:Artf1|XW");
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        textStringBuilder0.insert(1, charArray0, 317, 108);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: 317
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("O?-T!:Artf1|XW");
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        textStringBuilder0.insert(1, charArray0, (-25), 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: -25
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("O?-T!:Artf1|XW");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        textStringBuilder0.insert(1, charArray0, 0, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 1
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(", length=");
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder1 = textStringBuilder0.insert(0, charArray0);
      assertEquals(41, textStringBuilder1.capacity());
      assertEquals(9, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append(false);
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      textStringBuilder1.appendFixedWidthPadRight((Object) textStringBuilder_TextStringBuilderTokenizer0, 80, 'v');
      textStringBuilder0.insert(80, (char[]) null);
      assertEquals(170, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      char[] charArray0 = new char[9];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.insert(0, true);
      assertEquals(13, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(")M9]3}T");
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendFixedWidthPadRight((Object) ")M9]3}T", 80, '6');
      textStringBuilder1.insert(80, false);
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(174, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      int int0 = textStringBuilder0.indexOf((StringMatcher) null, (-1492));
      assertEquals((-1), int0);
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendNewLine();
      boolean boolean0 = textStringBuilder1.contains("");
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      boolean boolean0 = textStringBuilder0.contains((String) null);
      assertFalse(boolean0);
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      textStringBuilder0.readFrom((Reader) charArrayReader0, 108);
      // Undeclared exception!
      try { 
        textStringBuilder0.drainChars(108, 1023, charArray0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        textStringBuilder0.getChars(2686, 2686, charArray0, 2686);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2686
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      try { 
        textStringBuilder0.getChars((-4342), (-494), (char[]) null, (-494));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -4342
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendSeparator('0', (int) '0');
      char[] charArray1 = textStringBuilder1.getChars(charArray0);
      assertFalse(textStringBuilder0.isEmpty());
      assertArrayEquals(new char[] {'0'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertFalse(textStringBuilder0.isNotEmpty());
      
      char[] charArray1 = textStringBuilder0.getChars(charArray0);
      assertSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(263);
      char[] charArray0 = textStringBuilder0.getChars((char[]) null);
      assertEquals(0, charArray0.length);
      assertEquals(263, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      TextStringBuilder textStringBuilder1 = new TextStringBuilder("|     ");
      boolean boolean0 = textStringBuilder0.equalsIgnoreCase(textStringBuilder1);
      assertFalse(boolean0);
      assertEquals(38, textStringBuilder1.capacity());
      assertEquals(6, textStringBuilder1.length());
      assertEquals(6, textStringBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      char[] charArray0 = new char[15];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      TextStringBuilder textStringBuilder1 = new TextStringBuilder();
      boolean boolean0 = textStringBuilder0.equalsIgnoreCase(textStringBuilder1);
      assertEquals(32, textStringBuilder1.capacity());
      assertFalse(boolean0);
      assertEquals(15, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      boolean boolean0 = textStringBuilder0.equalsIgnoreCase(textStringBuilder0);
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("O?-T!:Artf1|XW");
      TextStringBuilder textStringBuilder1 = new TextStringBuilder("O?-T!:Artf1|XW");
      boolean boolean0 = textStringBuilder1.equalsIgnoreCase(textStringBuilder0);
      assertEquals(46, textStringBuilder1.capacity());
      assertEquals(14, textStringBuilder1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      boolean boolean0 = textStringBuilder0.equals((TextStringBuilder) null);
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      char[] charArray0 = new char[2];
      TextStringBuilder textStringBuilder1 = new TextStringBuilder(textStringBuilder0);
      TextStringBuilder textStringBuilder2 = textStringBuilder1.appendln(charArray0);
      boolean boolean0 = textStringBuilder2.equals((Object) textStringBuilder0);
      assertEquals(3, textStringBuilder1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      boolean boolean0 = textStringBuilder0.equals((Object) textStringBuilder0);
      assertTrue(boolean0);
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      Object object0 = new Object();
      boolean boolean0 = textStringBuilder0.equals(object0);
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln(charArray0);
      boolean boolean0 = textStringBuilder1.endsWith("'Q5>/xYD");
      assertEquals(24, textStringBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      boolean boolean0 = textStringBuilder0.endsWith("7Xw!D]/n2");
      assertFalse(boolean0);
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      boolean boolean0 = textStringBuilder0.endsWith("");
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      boolean boolean0 = textStringBuilder0.endsWith((String) null);
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(".");
      boolean boolean0 = textStringBuilder0.endsWith(".");
      assertEquals(33, textStringBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append(true);
      char[] charArray0 = new char[0];
      int int0 = textStringBuilder1.drainChars(1418, 1073741824, charArray0, 1073741824);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      // Undeclared exception!
      try { 
        textStringBuilder0.drainChars(1073741824, 102, charArray0, 1073741824);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1073741818
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      char[] charArray0 = textStringBuilder0.toCharArray();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append(true);
      int int0 = textStringBuilder1.drainChars((-2029), (-2029), charArray0, (-2029));
      assertEquals(4, textStringBuilder0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("O?-T!:Artf1|XW");
      // Undeclared exception!
      try { 
        textStringBuilder0.drainChars((-1), 1418, (char[]) null, 1418);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertTrue(textStringBuilder0.isEmpty());
      
      int int0 = textStringBuilder0.drainChars((-1), 0, (char[]) null, 0);
      assertEquals(0, int0);
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.deleteFirst((String) null);
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(")M9]3}T");
      textStringBuilder0.deleteFirst(')');
      assertEquals(6, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(")M9]3}T");
      TextStringBuilder textStringBuilder1 = textStringBuilder0.deleteAll((String) null);
      assertEquals(39, textStringBuilder1.capacity());
      assertEquals(7, textStringBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("No proxy target found for ");
      textStringBuilder0.appendln((long) 0);
      textStringBuilder0.deleteAll('0');
      assertEquals(27, textStringBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((CharSequence) "No proxy target found for ");
      textStringBuilder0.trim();
      assertEquals(25, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.delete(0, 0);
      assertEquals(32, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("");
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln((StringBuilder) null);
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder1.new TextStringBuilderTokenizer();
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getDelimiterMatcher();
      boolean boolean0 = textStringBuilder0.contains(stringMatcher0);
      assertEquals(1, textStringBuilder0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getDelimiterMatcher();
      boolean boolean0 = textStringBuilder0.contains(stringMatcher0);
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(263);
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendFixedWidthPadLeft(263, 111, 'I');
      boolean boolean0 = textStringBuilder1.contains('I');
      assertTrue(textStringBuilder0.isNotEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((CharSequence) "x,|pR&MW>Joh<");
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendWithSeparators((Object[]) null, "x,|pR&MW>Joh<");
      assertEquals(13, textStringBuilder1.length());
      assertEquals(45, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      Class<MinguoEra> class0 = MinguoEra.class;
      EnumSet<MinguoEra> enumSet0 = EnumSet.allOf(class0);
      Iterator<MinguoEra> iterator0 = enumSet0.iterator();
      textStringBuilder0.appendWithSeparators(iterator0, "");
      assertEquals(86, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("startIndex must be valid");
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Iterator<Object> iterator0 = treeSet0.iterator();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendWithSeparators(iterator0, "startIndex must be valid");
      assertEquals(24, textStringBuilder1.length());
      assertEquals(56, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendWithSeparators((Iterator<?>) null, "$");
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      Class<TextStyle> class0 = TextStyle.class;
      EnumSet<TextStyle> enumSet0 = EnumSet.allOf(class0);
      textStringBuilder0.appendWithSeparators((Iterable<?>) enumSet0, "length must be valid");
      assertTrue(textStringBuilder0.isReallocated());
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendWithSeparators((Iterable<?>) null, "gvi}u?!]l;;A%|Vw");
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      char[] charArray0 = new char[5];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      textStringBuilder0.appendTo(charBuffer0);
      assertEquals(0, charBuffer0.remaining());
      assertEquals("", charBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      StringBuilder stringBuilder0 = new StringBuilder();
      textStringBuilder0.appendTo(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      StringBuffer stringBuffer0 = new StringBuffer();
      textStringBuilder0.appendTo(stringBuffer0);
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals(0, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendSeparator(")a,s`?^QwpV_&G}qix", 0);
      assertEquals(32, textStringBuilder1.capacity());
      assertEquals(0, textStringBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendSeparator((String) null, (-1766));
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((CharSequence) "No proxy target found for ");
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendSeparator('J', (-1));
      assertEquals(58, textStringBuilder1.capacity());
      assertEquals(26, textStringBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.appendPadding('D', 'D');
      assertTrue(textStringBuilder0.isNotEmpty());
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendPadding((-686), '2');
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("");
      textStringBuilder0.setNewLineText("#COrD&TjNT\"e)0 M#");
      textStringBuilder0.appendln(true);
      assertEquals(21, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      Object object0 = new Object();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendFixedWidthPadRight(object0, 23, ':');
      textStringBuilder1.replace(13, 13, (String) null);
      assertEquals(23, textStringBuilder0.length());
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("b\"(lArylP!Q");
      textStringBuilder0.appendFixedWidthPadRight((Object) null, 177, '6');
      assertTrue(textStringBuilder0.isReallocated());
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendFixedWidthPadRight((Object) "F[&aCF$XGu", (-2896), '');
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((-2254));
      textStringBuilder0.appendFixedWidthPadLeft((Object) null, 149, ')');
      assertTrue(textStringBuilder0.isNotEmpty());
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      Object[] objectArray0 = new Object[0];
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendAll(objectArray0);
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendAll((Object[]) null);
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendAll((Iterator<?>) null);
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(263);
      ArrayDeque<MinguoEra> arrayDeque0 = new ArrayDeque<MinguoEra>();
      MinguoEra minguoEra0 = MinguoEra.BEFORE_ROC;
      arrayDeque0.add(minguoEra0);
      textStringBuilder0.appendAll((Iterable<?>) arrayDeque0);
      assertEquals(37, textStringBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.load(class0, (ClassLoader) null);
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendAll((Iterable<?>) serviceLoader0);
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(80);
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendAll((Iterable<?>) null);
      assertEquals(80, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      try { 
        textStringBuilder0.append(textStringBuilder0, 0, 845);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(")M9]3}T");
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendFixedWidthPadRight((Object) ")M9]3}T", 80, '7');
      // Undeclared exception!
      try { 
        textStringBuilder0.append(textStringBuilder1, 80, (-573));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((CharSequence) ".");
      // Undeclared exception!
      try { 
        textStringBuilder0.append(textStringBuilder0, (-3863), (-3863));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("com.oracle.truffle.api.CompilerDirectives");
      StringBuilder stringBuilder0 = new StringBuilder("xy@;`O;*pxvoBbOf");
      // Undeclared exception!
      try { 
        textStringBuilder0.append(stringBuilder0, 14, 122);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.setLength(115);
      StringBuilder stringBuilder0 = new StringBuilder(textStringBuilder0);
      // Undeclared exception!
      try { 
        textStringBuilder0.append(stringBuilder0, 109, (-304));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      StringBuilder stringBuilder0 = new StringBuilder(textStringBuilder0);
      // Undeclared exception!
      try { 
        textStringBuilder0.append(stringBuilder0, (-1437), 11);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      StringBuffer stringBuffer0 = new StringBuffer(0);
      // Undeclared exception!
      try { 
        textStringBuilder0.append(stringBuffer0, 0, 3752);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        textStringBuilder0.append(stringBuffer0, 0, (-2895));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      StringBuffer stringBuffer0 = new StringBuffer(textStringBuilder0);
      // Undeclared exception!
      try { 
        textStringBuilder0.append(stringBuffer0, 117, 117);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      try { 
        textStringBuilder0.append("aqsg$x}(ju>9}I", 0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      try { 
        textStringBuilder0.append("<L", (-2), (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append((String) null, 1, (-530));
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("No proxy target found for ");
      // Undeclared exception!
      try { 
        textStringBuilder0.append((CharSequence) "No proxy target found for ", 116, 116);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // endIndex must be greater than startIndex
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((CharSequence) "R>42@Luc6");
      // Undeclared exception!
      try { 
        textStringBuilder0.append((CharSequence) "R>42@Luc6", 1988, (-220));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // endIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append((CharSequence) null, (-937), 23);
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      try { 
        textStringBuilder0.append((CharSequence) "Cannot resolve Byte Buddy lookup via dispatcher", 2, 182);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((-1686));
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append((CharSequence) null);
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      CharBuffer charBuffer0 = CharBuffer.allocate(35);
      // Undeclared exception!
      try { 
        textStringBuilder0.append(charBuffer0, 35, 35);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      char[] charArray0 = new char[9];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      CharBuffer charBuffer0 = CharBuffer.allocate(1846);
      // Undeclared exception!
      try { 
        textStringBuilder0.append(charBuffer0, 108, (-1190));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      // Undeclared exception!
      try { 
        textStringBuilder0.append(charBuffer0, 27, 2725);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      CharBuffer charBuffer0 = CharBuffer.allocate(1534);
      // Undeclared exception!
      try { 
        textStringBuilder0.append(charBuffer0, (-1154), 390);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) textStringBuilder0);
      TextStringBuilder textStringBuilder1 = textStringBuilder0.set(charBuffer0);
      assertEquals(32, textStringBuilder1.capacity());
      assertEquals(0, textStringBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append((CharBuffer) null);
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      char[] charArray0 = new char[2];
      textStringBuilder0.append(charArray0, 0, 2);
      assertEquals(2, textStringBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        textStringBuilder0.append(charArray0, 3, 118);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 118
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(", length=");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        textStringBuilder0.append(charArray0, 0, (-1196));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -1196
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      char[] charArray0 = new char[1];
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append(charArray0, 0, 0);
      assertEquals(32, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((-3571));
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        textStringBuilder0.append(charArray0, (-4235), (-3571));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: -3571
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln(charArray0);
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder1.new TextStringBuilderTokenizer();
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getDelimiterMatcher();
      int int0 = textStringBuilder1.lastIndexOf(stringMatcher0);
      assertEquals(1, textStringBuilder0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((String) null);
      boolean boolean0 = textStringBuilder0.isEmpty();
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((CharSequence) null);
      // Undeclared exception!
      try { 
        textStringBuilder0.charAt(4533);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 4533
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        TextStringBuilder.wrap(charArray0, (-396));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initialBuffer.length=0, length=-396
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("");
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      String string0 = textStringBuilder_TextStringBuilderTokenizer0.getContent();
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      long long0 = textStringBuilder_TextStringBuilderReader0.skip(1L);
      assertFalse(textStringBuilder_TextStringBuilderReader0.ready());
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals(0L, long0);
      assertEquals(0, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      long long0 = textStringBuilder_TextStringBuilderReader0.skip((-385L));
      assertEquals(0, textStringBuilder0.size());
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendNewLine();
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder1.new TextStringBuilderReader();
      int int0 = textStringBuilder0.readFrom((Reader) textStringBuilder_TextStringBuilderReader0, 870);
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(870, int0);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(263);
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        textStringBuilder_TextStringBuilderReader0.read(charArray0, 0, 974);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.TextStringBuilder$TextStringBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        textStringBuilder_TextStringBuilderReader0.read(charArray0, 57, 57);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.TextStringBuilder$TextStringBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(",Xlength=");
      char[] charArray0 = new char[0];
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      // Undeclared exception!
      try { 
        textStringBuilder_TextStringBuilderReader0.read(charArray0, 0, (-804));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.TextStringBuilder$TextStringBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      int int0 = textStringBuilder0.readFrom((Readable) textStringBuilder_TextStringBuilderReader0);
      assertEquals(0, textStringBuilder0.size());
      assertEquals((-1), int0);
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((-434));
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        textStringBuilder_TextStringBuilderReader0.read(charArray0, (-434), (-434));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.TextStringBuilder$TextStringBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      assertFalse(textStringBuilder_TextStringBuilderReader0.ready());
      
      int int0 = textStringBuilder_TextStringBuilderReader0.read();
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals((-1), int0);
      assertEquals(0, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(".");
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      int int0 = textStringBuilder_TextStringBuilderReader0.read();
      assertEquals(46, int0);
      assertFalse(textStringBuilder_TextStringBuilderReader0.ready());
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((-1810));
      TextStringBuilder.TextStringBuilderWriter textStringBuilder_TextStringBuilderWriter0 = textStringBuilder0.new TextStringBuilderWriter();
      char[] charArray0 = new char[5];
      textStringBuilder_TextStringBuilderWriter0.write(charArray0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      TextStringBuilder.TextStringBuilderWriter textStringBuilder_TextStringBuilderWriter0 = textStringBuilder0.new TextStringBuilderWriter();
      textStringBuilder_TextStringBuilderWriter0.close();
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder.TextStringBuilderWriter textStringBuilder_TextStringBuilderWriter0 = textStringBuilder0.new TextStringBuilderWriter();
      textStringBuilder_TextStringBuilderWriter0.flush();
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder.TextStringBuilderWriter textStringBuilder_TextStringBuilderWriter0 = textStringBuilder0.new TextStringBuilderWriter();
      textStringBuilder_TextStringBuilderWriter0.write(":nHl");
      assertEquals(4, textStringBuilder0.length());
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      StringBuilder stringBuilder0 = textStringBuilder0.toStringBuilder();
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.getNewLineText();
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        TextStringBuilder.wrap(charArray0, 2479);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initialBuffer.length=6, length=2479
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) textStringBuilder0);
      int int0 = textStringBuilder0.readFrom((Readable) charBuffer0);
      assertEquals(0, int0);
      assertEquals(0, textStringBuilder0.length());
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      int int0 = textStringBuilder0.size();
      assertEquals(0, int0);
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(")M9]3}T");
      assertTrue(textStringBuilder0.isNotEmpty());
      
      textStringBuilder0.deleteAll(")M9]3}T");
      assertEquals(0, textStringBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((-1929));
      textStringBuilder0.asReader();
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      try { 
        textStringBuilder0.insert(863, 103.758464967461);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 863
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("TP");
      textStringBuilder0.getNullText();
      assertEquals(2, textStringBuilder0.length());
      assertEquals(34, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getQuoteMatcher();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.replaceFirst(stringMatcher0, "");
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      try { 
        textStringBuilder0.insert(91, (long) 91);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 91
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      try { 
        textStringBuilder0.substring(54);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      char[] charArray0 = textStringBuilder0.getBuffer();
      assertEquals(32, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.hashCode();
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("kKC$0&G*B\"");
      StringBuffer stringBuffer0 = new StringBuffer("kKC$0&G*B\"");
      // Undeclared exception!
      try { 
        textStringBuilder0.appendln(stringBuffer0, (-864), 693);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      int int0 = textStringBuilder0.indexOf('c');
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      int int0 = textStringBuilder0.capacity();
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      try { 
        textStringBuilder0.appendln(textStringBuilder0, 1, 97);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getDelimiterMatcher();
      int int0 = textStringBuilder0.indexOf(stringMatcher0);
      assertEquals((-1), int0);
      assertEquals(6, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(stringBuilder0);
      // Undeclared exception!
      try { 
        textStringBuilder0.append(stringBuilder0, 114, 8);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      try { 
        textStringBuilder0.insert(25, 25);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 25
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.asTokenizer();
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("{ 8;c*");
      int int0 = textStringBuilder0.lastIndexOf("{ 8;c*");
      assertEquals(0, int0);
      assertEquals(38, textStringBuilder0.capacity());
      assertEquals(6, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(5);
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(charBuffer0);
      String string0 = textStringBuilder0.substring(5, Integer.MAX_VALUE);
      assertEquals(37, textStringBuilder0.capacity());
      assertEquals("", string0);
      assertEquals(5, textStringBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      try { 
        textStringBuilder0.setCharAt(256, '{');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 256
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.appendln("", (Object[]) null);
      assertEquals(1, textStringBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      StringBuffer stringBuffer0 = textStringBuilder0.toStringBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      // Undeclared exception!
      try { 
        textStringBuilder0.insert(115, (float) 115);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 115
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("");
      StringBuilder stringBuilder0 = new StringBuilder("");
      // Undeclared exception!
      try { 
        textStringBuilder0.appendln(stringBuilder0, 572, 572);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("Invalid offset: ");
      String string0 = textStringBuilder0.build();
      assertEquals("Invalid offset: ", string0);
      assertEquals(48, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(53);
      // Undeclared exception!
      try { 
        textStringBuilder0.appendln("%n8[wG\"{`<!UX;:", 53, 53);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("INSTANCE");
      textStringBuilder0.appendln((char[]) null, (-1), (-1));
      assertEquals(9, textStringBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((CharSequence) ")M9]3}T");
      int int0 = textStringBuilder0.indexOf("Method not available on current VM: ");
      assertEquals(39, textStringBuilder0.capacity());
      assertEquals(7, textStringBuilder0.length());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      try { 
        textStringBuilder0.deleteCharAt((-2811));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2811
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      try { 
        textStringBuilder0.drainChar((-431));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -431
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      try { 
        textStringBuilder0.insert((-1), 'F');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.asWriter();
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.appendln(0.9999);
      assertFalse(textStringBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(32);
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      textStringBuilder_TextStringBuilderReader0.close();
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(",Xlength=");
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      boolean boolean0 = textStringBuilder_TextStringBuilderReader0.markSupported();
      assertEquals(9, textStringBuilder0.length());
      assertTrue(boolean0);
      assertEquals(41, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(", length=");
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      textStringBuilder_TextStringBuilderReader0.reset();
      assertEquals(9, textStringBuilder0.length());
      assertEquals(41, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      textStringBuilder_TextStringBuilderReader0.mark(1532);
      assertEquals(32, textStringBuilder0.capacity());
  }
}
