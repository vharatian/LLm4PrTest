/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 20:06:55 GMT 2025
 */

package org.apache.commons.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import org.apache.commons.text.StrLookup;
import org.apache.commons.text.StrMatcher;
import org.apache.commons.text.StrSubstitutor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class StrSubstitutor_ESTest extends StrSubstitutor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, "+rh[Yq2d", (String) null).when(strMatcher0).toString();
      doReturn(1605).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '|', strMatcher0);
      strSubstitutor0.replace("org.apache.commons.text.StrSubstitutor@0000000001");
      assertEquals('|', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StrLookup<String> strLookup0 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "QCBZ", "qf$&9Fo$5L&JSbv{", 'd', "QCBZ");
      char[] charArray0 = new char[8];
      String string0 = strSubstitutor0.replace(charArray0, 5, 0);
      assertNotNull(string0);
      assertEquals('d', strSubstitutor0.getEscapeChar());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StrLookup<String> strLookup0 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "QCBZ", "qf$&9Fo$5L&JSbv{", 'd', "QCBZ");
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        strSubstitutor0.replace(charArray0, 527, 773);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 773
         //
         verifyException("org.apache.commons.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StrLookup<String> strLookup0 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "QCBZ", "qf$&9Fo$5L&JSbv{", 'd', "QCBZ");
      String string0 = strSubstitutor0.replace("net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Bound", 0, 1);
      assertEquals("n", string0);
      assertEquals('d', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StrLookup<String> strLookup0 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0);
      StringBuilder stringBuilder0 = new StringBuilder(0);
      Properties properties0 = new Properties();
      properties0.put(": ", strSubstitutor0);
      String string0 = StrSubstitutor.replace((Object) stringBuilder0, properties0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'k');
      assertEquals('k', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StrLookup<String> strLookup0 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "QCBZ", "qf$&9Fo$5L&JSbv{", 'd', "QCBZ");
      strSubstitutor0.setPreserveEscapes(true);
      strSubstitutor0.setVariableSuffix("");
      assertTrue(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      strSubstitutor0.setVariableSuffix("H63");
      assertTrue(strSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "(^gsc^U+", "(^gsc^U+", 'V', "Ga.O4{1;QqN:");
      strSubstitutor0.setDisableSubstitutionInValues(true);
      strSubstitutor0.setVariableSuffix("");
      assertTrue(strSubstitutor0.isDisableSubstitutionInValues());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StrLookup<String> strLookup0 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "QCBZ", "qf$&9Fo$5L&JSbv{", 'd', "QCBZ");
      strSubstitutor0.setPreserveEscapes(true);
      strSubstitutor0.setVariableSuffix('$');
      assertTrue(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "", "x", 'l', "net.bytebuddy.build.ToStringPlugin");
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      strSubstitutor0.setVariableSuffix('z');
      assertTrue(strSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0);
      strSubstitutor0.setDisableSubstitutionInValues(true);
      strSubstitutor0.setVariableSuffix('#');
      assertTrue(strSubstitutor0.isDisableSubstitutionInValues());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StrLookup<String> strLookup0 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "QCBZ", "qf$&9Fo$5L&JSbv{", 'd', "QCBZ");
      strSubstitutor0.setPreserveEscapes(true);
      strSubstitutor0.setVariablePrefix("QCBZ");
      assertTrue(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      strSubstitutor0.setVariablePrefix("H63");
      assertTrue(strSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "(^gsc^U+", "(^gsc^U+", 'V', "Ga.O4{1;QqN:");
      strSubstitutor0.setDisableSubstitutionInValues(true);
      strSubstitutor0.setVariablePrefix("Ga.O4{1;QqN:");
      assertTrue(strSubstitutor0.isDisableSubstitutionInValues());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StrLookup<String> strLookup0 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "QCBZ", "qf$&9Fo$5L&JSbv{", 'd', "QCBZ");
      strSubstitutor0.setPreserveEscapes(true);
      strSubstitutor0.setVariablePrefix('$');
      assertTrue(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StrLookup<String> strLookup0 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "", "qf$&9Fo$5L&JSbv{", 'd', "");
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      strSubstitutor0.setVariablePrefix('d');
      assertTrue(strSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.setDisableSubstitutionInValues(true);
      strSubstitutor0.setVariablePrefix('H');
      assertTrue(strSubstitutor0.isDisableSubstitutionInValues());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StrLookup<String> strLookup0 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "QCBZ", "qf$&9Fo$5L&JSbv{", 'd', "QCBZ");
      strSubstitutor0.setPreserveEscapes(true);
      strSubstitutor0.setValueDelimiter("");
      assertTrue(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) null, "", "", '`');
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      strSubstitutor0.setValueDelimiter("");
      assertTrue(strSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.setDisableSubstitutionInValues(true);
      strSubstitutor0.setValueDelimiter("");
      assertTrue(strSubstitutor0.isDisableSubstitutionInValues());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "S:Nl~;f1Jd\"1", "${", 'N');
      strSubstitutor0.setPreserveEscapes(true);
      strSubstitutor0.setValueDelimiter('N');
      assertTrue(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      strSubstitutor0.setValueDelimiter('k');
      assertTrue(strSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.setDisableSubstitutionInValues(true);
      strSubstitutor0.setValueDelimiter('$');
      assertTrue(strSubstitutor0.isDisableSubstitutionInValues());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = StrSubstitutor.replaceSystemProperties((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = StrSubstitutor.replaceSystemProperties("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "oZ0", "oZ0", 'd', "oZ0");
      char[] charArray0 = new char[7];
      String string0 = strSubstitutor0.replace(charArray0, 2, 2);
      assertEquals("\u0000\u0000", string0);
      assertNotNull(string0);
      assertEquals('d', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "Variable suffix matcher must not be null!", ":-");
      char[] charArray0 = new char[7];
      strSubstitutor0.replace(charArray0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StringBuffer stringBuffer0 = new StringBuffer("net.btebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Bound");
      String string0 = strSubstitutor0.replace(stringBuffer0, 0, 7);
      assertNotNull(string0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "gR0g:bg:13gl", "x]", 'W');
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = strSubstitutor0.replace(stringBuffer0, 0, 0);
      assertEquals('W', strSubstitutor0.getEscapeChar());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "}", "}", '&', "}");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "}");
      strSubstitutor0.replace(stringBuffer0);
      assertEquals('&', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StrLookup<String> strLookup0 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, ": ", "", 'd', "Variable suffix matcher must not be null!");
      String string0 = strSubstitutor0.replace("X,b(@o]eki", 0, 0);
      assertEquals('d', strSubstitutor0.getEscapeChar());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "", "", '0', "");
      strSubstitutor0.replace("");
      assertEquals('0', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Properties properties0 = new Properties();
      String string0 = StrSubstitutor.replace((Object) null, properties0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = StrSubstitutor.replace((Object) null, (Map<String, Object>) null, "QCBZ", "Can not adopt ExecutableNode under a different language. Parent ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = StrSubstitutor.replace((Object) "", (Map<String, Object>) hashMap0, "", "com.oracle.truffle.polyglot.PolyglotMapAndFunction");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      String string0 = StrSubstitutor.replace((Object) "", map0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "", "", '0', "");
      String string0 = strSubstitutor0.replace((Object) "");
      assertEquals('0', strSubstitutor0.getEscapeChar());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StrLookup<String> strLookup0 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, ": ", "", 'd', "Variable suffix matcher must not be null!");
      String string0 = strSubstitutor0.replace((CharSequence) "X,b(@o]eki", 0, 1);
      assertNotNull(string0);
      assertEquals("X", string0);
      assertEquals('d', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) null, "", "", '`');
      String string0 = strSubstitutor0.replace((CharSequence) "");
      assertEquals('`', strSubstitutor0.getEscapeChar());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StrLookup<String> strLookup0 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "QCBZ", "qf$&9Fo$5L&JSbv{", 'd', "QCBZ");
      strSubstitutor0.setPreserveEscapes(true);
      boolean boolean0 = strSubstitutor0.isPreserveEscapes();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0);
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      boolean boolean0 = strSubstitutor0.isEnableSubstitutionInVariables();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '0', strMatcher0);
      char char0 = strSubstitutor0.getEscapeChar();
      assertEquals('0', char0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "", "", 'd', "U[!q");
      char char0 = strSubstitutor0.getEscapeChar();
      assertEquals('d', char0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(strLookup0).toString();
      doReturn((String) null).when(strLookup0).lookup(anyString());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0);
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariablePrefix('$');
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "E[$Mo'MQSs1}");
      strSubstitutor1.replaceIn(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(strLookup0).toString();
      doReturn((String) null).when(strLookup0).lookup(anyString());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0);
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariablePrefix('$');
      StringBuffer stringBuffer0 = new StringBuffer("$'s1}");
      strSubstitutor1.replaceIn(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("E^e[$o's1}").when(strLookup0).toString();
      doReturn("E^e[$o's1}").when(strLookup0).lookup(anyString());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0);
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariablePrefix('$');
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "E^e[$o's1}");
      // Undeclared exception!
      try { 
        strSubstitutor1.replace(stringBuffer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Infinite loop in property interpolation of E^e[$o's1}: o's1
         //
         verifyException("org.apache.commons.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("SQYh6Y?", (int) '$', (int) '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Object object0 = new Object();
      Properties properties0 = new Properties();
      properties0.put(object0, object0);
      // Undeclared exception!
      try { 
        StrSubstitutor.replace(object0, properties0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        StrSubstitutor.replace((Object) strSubstitutor0, (Map<String, Object>) hashMap0, (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(strLookup0).toString();
      doReturn((String) null).when(strLookup0).lookup(anyString());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0);
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariablePrefix('$');
      strSubstitutor1.replace((Object) "E[$Mo's1}");
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("E[$Mo's1}").when(strLookup0).toString();
      doReturn("E[$Mo's1}").when(strLookup0).lookup(anyString());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0);
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariablePrefix('$');
      // Undeclared exception!
      try { 
        strSubstitutor1.replace((CharSequence) "E[$Mo's1}");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Infinite loop in property interpolation of E[$Mo's1}: Mo's1
         //
         verifyException("org.apache.commons.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StrLookup<String> strLookup0 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = null;
      try {
        strSubstitutor0 = new StrSubstitutor(strLookup0, (String) null, (String) null, 'k', (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = null;
      try {
        strSubstitutor0 = new StrSubstitutor(strLookup0, (String) null, (String) null, 'N');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = null;
      try {
        strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, (String) null, (String) null, '9', (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      StrSubstitutor strSubstitutor0 = null;
      try {
        strSubstitutor0 = new StrSubstitutor(map0, (String) null, (String) null, '~');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setValueDelimiter("!ndTd\"RrDdJy`Kn|PVS");
      assertEquals('$', strSubstitutor1.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      // Undeclared exception!
      try { 
        strSubstitutor0.setVariablePrefix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(map0, "tKeSa,", "tKeSa,");
      StringBuffer stringBuffer0 = new StringBuffer("tKeSa,");
      StringBuffer stringBuffer1 = stringBuffer0.append((CharSequence) "tKeSa,");
      stringBuffer1.append(stringBuffer0);
      boolean boolean0 = strSubstitutor0.replaceIn(stringBuffer0);
      assertEquals("tKeSa,tKeSa,tKeSa,tKeSa,", stringBuffer0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StrLookup<String> strLookup0 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "", "", 'd', "");
      StringBuilder stringBuilder0 = new StringBuilder("net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$");
      strSubstitutor0.replaceIn(stringBuilder0, 3, 3);
      assertEquals('d', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        strSubstitutor0.replaceIn(stringBuilder0, (int) '$', (int) '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(map0, "tKeSa,", "8[#OmWuS>&%k?d[$");
      StringBuffer stringBuffer0 = new StringBuffer("8[#OmWuS>&%k?d[$");
      boolean boolean0 = strSubstitutor0.replaceIn(stringBuffer0, 4, 4);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StringBuffer stringBuffer0 = new StringBuffer('$');
      // Undeclared exception!
      try { 
        strSubstitutor0.replaceIn(stringBuffer0, (int) '$', (int) '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      String string0 = strSubstitutor0.replace((Object) null);
      assertNull(string0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0);
      strSubstitutor0.replace((Object) "E[$Mo's1}");
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StringBuilder stringBuilder0 = new StringBuilder('$');
      // Undeclared exception!
      try { 
        strSubstitutor0.replace((CharSequence) stringBuilder0, (int) '$', (int) '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.isDisableSubstitutionInValues();
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(map0);
      char char0 = strSubstitutor0.getEscapeChar();
      assertEquals('$', char0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StrLookup<String> strLookup0 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "QCBZ", "qf$&9Fo$5L&JSbv{", 'd', "QCBZ");
      StrLookup<Object> strLookup1 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      strSubstitutor0.setVariableResolver(strLookup1);
      assertEquals('d', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0);
      strSubstitutor0.isEnableSubstitutionInVariables();
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "f~~*Pc)XWT2bRw}", "f~~*Pc)XWT2bRw}", '-');
      assertEquals('-', strSubstitutor0.getEscapeChar());
      
      strSubstitutor0.setEscapeChar('$');
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setValueDelimiter((String) null);
      assertEquals('$', strSubstitutor1.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      // Undeclared exception!
      try { 
        strSubstitutor0.setVariableSuffix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable suffix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = null;
      try {
        strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, (String) null, "The value %s is not in the specified inclusive range of %s to %s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StrLookup<String> strLookup0 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = null;
      try {
        strSubstitutor0 = new StrSubstitutor(strLookup0, (StrMatcher) null, strMatcher0, 'b');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix matcher must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(strLookup0).toString();
      doReturn((String) null).when(strLookup0).lookup(anyString());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0);
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariablePrefix('$');
      strSubstitutor1.setDisableSubstitutionInValues(true);
      //  // Unstable assertion: assertTrue(strSubstitutor1.isDisableSubstitutionInValues());
      
      String string0 = strSubstitutor0.replace("{BE[$sNoc,QSs=}");
      //  // Unstable assertion: assertEquals("{BE[{BE[$sNoc,QSs=}", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(strLookup0).toString();
      doReturn((String) null).when(strLookup0).lookup(anyString());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0);
      strSubstitutor0.setVariablePrefix('$');
      strSubstitutor0.replace("{BE[$Noc,QSs=}");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("t4_-tqx~");
      Object object0 = new Object();
      StringBuffer stringBuffer1 = stringBuffer0.append(object0);
      stringBuffer0.append(stringBuffer1);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "a", "t4_-tqx~");
      boolean boolean0 = strSubstitutor0.replaceIn(stringBuffer1);
      //  // Unstable assertion: assertEquals(68, stringBuffer1.length());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(map0, "6l", "6l", '0', "");
      StringBuffer stringBuffer0 = new StringBuffer("6l");
      StringBuffer stringBuffer1 = stringBuffer0.append(stringBuffer0);
      boolean boolean0 = strSubstitutor0.replaceIn(stringBuffer1);
      assertFalse(boolean0);
      assertEquals('0', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StringBuffer stringBuffer0 = new StringBuffer("->");
      StringBuffer stringBuffer1 = stringBuffer0.append(stringBuffer0);
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, "->", "->");
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      boolean boolean0 = strSubstitutor0.replaceIn(stringBuffer1);
      assertTrue(strSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      strSubstitutor0.replace("FYh2${=sNowNxS]}");
      assertTrue(strSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(map0, "tKeSa,", "8[#OmWuS>&%k?d[$");
      strSubstitutor0.setPreserveEscapes(true);
      StringBuffer stringBuffer0 = new StringBuffer("8[#OmWuS>&%k?d[$");
      StringBuffer stringBuffer1 = new StringBuffer("tKeSa,");
      stringBuffer0.append(stringBuffer1);
      boolean boolean0 = strSubstitutor0.replaceIn(stringBuffer0);
      assertFalse(boolean0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariablePrefix('_');
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "]R3PJxqPh");
      char[] charArray0 = new char[6];
      charArray0[2] = '$';
      charArray0[3] = '_';
      StringBuilder stringBuilder1 = stringBuilder0.insert(7, charArray0);
      boolean boolean0 = strSubstitutor1.replaceIn(stringBuilder1);
      assertEquals("]R3PJxq\u0000\u0000_\u0000\u0000Ph", stringBuilder1.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      boolean boolean0 = strSubstitutor0.replaceIn((StringBuilder) null, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertFalse(boolean0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      boolean boolean0 = strSubstitutor0.replaceIn((StringBuilder) null);
      assertFalse(boolean0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(map0, "tKea,", "8[#OmWuS>&%k?d[$");
      StringBuffer stringBuffer0 = new StringBuffer("8[#OmWuS>&%k?d[$");
      StringBuffer stringBuffer1 = new StringBuffer("tKea,");
      StringBuffer stringBuffer2 = stringBuffer0.append(stringBuffer1);
      boolean boolean0 = strSubstitutor0.replaceIn(stringBuffer2);
      assertEquals(20, stringBuffer2.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      boolean boolean0 = strSubstitutor0.replaceIn((StringBuffer) null, (int) '$', (int) '$');
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      boolean boolean0 = strSubstitutor0.replaceIn((StringBuffer) null);
      assertFalse(boolean0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = StrSubstitutor.replace((Object) null, (Map<String, String>) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      String string0 = strSubstitutor0.replace((CharSequence) null, (int) '$', 1);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.replace((CharSequence) null);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, "$$$B$$$3=", "$$$B$$$3=");
      String string0 = strSubstitutor0.replace((CharSequence) "$$$B$$$3=");
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertEquals("$$$B$$$3=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      String string0 = strSubstitutor0.replace((StringBuffer) null, 39, 39);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        strSubstitutor0.replace(stringBuffer0, (int) '$', (int) '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.replace((StringBuffer) null);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0);
      StringBuffer stringBuffer0 = new StringBuffer();
      strSubstitutor0.replace(stringBuffer0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      String string0 = strSubstitutor0.replace((char[]) null, 34, 34);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.replace((char[]) null);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      char[] charArray0 = new char[0];
      strSubstitutor0.replace(charArray0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StrLookup<String> strLookup0 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("s").when(strLookup0).toString();
      doReturn("s").when(strLookup0).lookup(anyString());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "s", "s", 'f', "s");
      String string0 = strSubstitutor0.replace("net.bytebudy.implementation.bind.annotationTargetMethodAnnotationDrivenBi$dr$DelegationProcessor$Handler$Bound", 0, (int) 'f');
      assertEquals("net.bytebudy.implementation.bind.annotationTargetMethodAnnotationDrivenBi$dr$DelegationProcesor$Handl", string0);
      assertEquals('f', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.replace((String) null, (int) '$', (int) '$');
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.setValueDelimiter('v');
      String string0 = strSubstitutor0.replace("Yjh2${=sNvwNxS]}");
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertEquals("Yjh2wNxS]", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.replace((String) null);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Properties properties0 = new Properties();
      properties0.put("0.0{}", "0.0{}");
      String string0 = StrSubstitutor.replace((Object) "0.0{}", properties0);
      assertEquals("0.0{}", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        StrSubstitutor.replace((Object) null, (Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "", "");
      strSubstitutor0.isPreserveEscapes();
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = StrSubstitutor.replaceSystemProperties(hashMap0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(map0, "tKea,", "tKea,", ')', "tKea,");
      StringBuffer stringBuffer0 = new StringBuffer("E.f%%)");
      String string0 = strSubstitutor0.replace((CharSequence) stringBuffer0, 0, 0);
      assertEquals(')', strSubstitutor0.getEscapeChar());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.setDisableSubstitutionInValues(true);
      boolean boolean0 = strSubstitutor0.isDisableSubstitutionInValues();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Object object0 = new Object();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = StrSubstitutor.replace(object0, (Map<String, Object>) hashMap0, "=:Uh[<<mj3B1", "=:Uh[<<mj3B1");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      String string0 = StrSubstitutor.replace((Object) map0, map0);
      assertNotNull(string0);
  }
}
