/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 21:01:17 GMT 2025
 */

package org.apache.commons.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.time.Month;
import java.time.chrono.ThaiBuddhistEra;
import java.time.format.FormatStyle;
import java.time.temporal.ChronoUnit;
import java.util.ArrayDeque;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.IllegalFormatConversionException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.UnknownFormatConversionException;
import org.apache.commons.text.StringTokenizer;
import org.apache.commons.text.TextStringBuilder;
import org.apache.commons.text.matcher.StringMatcher;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class TextStringBuilder_ESTest extends TextStringBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("No exit advice defined by ");
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(58, textStringBuilder0.capacity());
      assertEquals(26, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(26, textStringBuilder0.length());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.trim();
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(25, textStringBuilder0.size());
      assertEquals(58, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(25, textStringBuilder0.length());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(58, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(25, textStringBuilder1.length());
      assertEquals(25, textStringBuilder1.size());
      assertFalse(textStringBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {' '}, charArray0);
      assertEquals(1, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(1, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(1, textStringBuilder0.size());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.trim();
      assertNotNull(textStringBuilder1);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {' '}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(1, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNullText());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(0, textStringBuilder1.size());
      assertTrue(textStringBuilder1.isEmpty());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertEquals(1, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("~Nu8Zk'N+r");
      assertNotNull(textStringBuilder0);
      assertEquals(42, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(10, textStringBuilder0.length());
      assertEquals(10, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      
      boolean boolean0 = textStringBuilder0.startsWith("s}!+");
      assertEquals(42, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(10, textStringBuilder0.length());
      assertEquals(10, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("");
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.setLength(4031);
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(4031, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(4031, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(8062, textStringBuilder0.capacity());
      assertEquals(8062, textStringBuilder1.capacity());
      assertEquals(4031, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(4031, textStringBuilder1.size());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertTrue(textStringBuilder1.isNotEmpty());
      
      String string0 = textStringBuilder0.rightString(4031);
      assertNotNull(string0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(4031, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(4031, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(8062, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      assertNotNull(textStringBuilder0);
      assertTrue(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      
      String string0 = textStringBuilder0.rightString(0);
      assertNotNull(string0);
      assertTrue(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("G5]C<q`BFZkV");
      assertNotNull(textStringBuilder0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(44, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(12, textStringBuilder0.length());
      assertEquals(12, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(mockFileInputStream0);
      assertNotNull(inputStreamReader0);
      assertFalse(fileDescriptor0.valid());
      
      int int0 = textStringBuilder0.readFrom((Reader) inputStreamReader0, 0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(44, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(12, textStringBuilder0.length());
      assertEquals(12, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(6, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(6, textStringBuilder0.length());
      assertEquals(6, textStringBuilder0.capacity());
      
      String string0 = textStringBuilder0.midString((-995), 856);
      assertNotNull(string0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(6, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(6, textStringBuilder0.length());
      assertEquals(6, textStringBuilder0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNullText());
      
      String string0 = textStringBuilder0.midString(223749, 223749);
      assertNotNull(string0);
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((CharSequence) null);
      assertNotNull(textStringBuilder0);
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      
      String string0 = textStringBuilder0.midString(223749, 0);
      assertNotNull(string0);
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(3);
      assertNotNull(textStringBuilder0);
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(3, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isEmpty());
      
      String string0 = textStringBuilder0.midString(0, 29);
      assertNotNull(string0);
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(3, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isEmpty());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendPadding(477, 'N');
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(477, textStringBuilder0.length());
      assertEquals(477, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(954, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(477, textStringBuilder1.length());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(954, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(477, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder1.isNotEmpty());
      
      String string0 = textStringBuilder0.leftString(477);
      assertNotNull(string0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(477, textStringBuilder0.length());
      assertEquals(477, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(954, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals("NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("*0~h6Yp7hWS+:z9TOR");
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(18, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(50, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(18, textStringBuilder0.size());
      
      String string0 = textStringBuilder0.leftString(0);
      assertNotNull(string0);
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(18, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(50, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(18, textStringBuilder0.size());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      char[] charArray0 = new char[1];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(1, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(1, textStringBuilder0.size());
      assertEquals(1, textStringBuilder0.capacity());
      
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      assertNotNull(textStringBuilder_TextStringBuilderTokenizer0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(1, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(1, textStringBuilder0.size());
      assertEquals(1, textStringBuilder0.capacity());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getTrimmerMatcher();
      assertNotNull(stringMatcher0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(1, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(1, textStringBuilder0.size());
      assertEquals(1, textStringBuilder0.capacity());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, stringMatcher0.size());
      
      int int0 = textStringBuilder0.lastIndexOf(stringMatcher0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(1, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(1, textStringBuilder0.size());
      assertEquals(1, textStringBuilder0.capacity());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, stringMatcher0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      
      int int0 = textStringBuilder0.lastIndexOf("~f~H=5J'sc[c-E~", 0);
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      
      char[] charArray0 = new char[7];
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append(charArray0, 0, 1);
      assertNotNull(textStringBuilder1);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(1, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(1, textStringBuilder0.size());
      assertEquals(1, textStringBuilder1.size());
      assertEquals(1, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isReallocated());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNullText());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(32, textStringBuilder1.capacity());
      assertNull(textStringBuilder1.getNewLineText());
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      TextStringBuilder textStringBuilder2 = textStringBuilder0.insert(0, charArray1, 0, 0);
      assertNotNull(textStringBuilder2);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertNotSame(charArray1, charArray0);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(1, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(1, textStringBuilder0.size());
      assertEquals(32, textStringBuilder2.capacity());
      assertFalse(textStringBuilder2.isEmpty());
      assertNull(textStringBuilder2.getNewLineText());
      assertNull(textStringBuilder2.getNullText());
      assertEquals(1, textStringBuilder2.size());
      assertTrue(textStringBuilder2.isNotEmpty());
      assertEquals(1, textStringBuilder2.length());
      assertFalse(textStringBuilder2.isReallocated());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder0.isNotEmpty());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln("org.apache.commons.io.filefilter.WildcardFileFilter");
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertNull(textStringBuilder0.getNullText());
      assertEquals(52, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(52, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(102, textStringBuilder0.capacity());
      assertEquals(102, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isEmpty());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(52, textStringBuilder1.size());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNullText());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(52, textStringBuilder1.length());
      
      int int0 = textStringBuilder1.indexOf("org.apache.commons.io.filefilter.WildcardFileFilter", 39);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertNull(textStringBuilder0.getNullText());
      assertEquals(52, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(52, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(102, textStringBuilder0.capacity());
      assertEquals(102, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isEmpty());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(52, textStringBuilder1.size());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNullText());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(52, textStringBuilder1.length());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      
      int int0 = textStringBuilder0.indexOf('.', 6671);
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      
      char[] charArray0 = new char[2];
      char[] charArray1 = textStringBuilder0.getChars(charArray0);
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(6, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(6, textStringBuilder0.size());
      
      TextStringBuilder textStringBuilder1 = new TextStringBuilder(textStringBuilder0);
      assertNotNull(textStringBuilder1);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(textStringBuilder1.equals((Object)textStringBuilder0));
      assertEquals(6, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(6, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(6, textStringBuilder0.size());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(6, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(38, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(6, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNewLineText());
      assertFalse(textStringBuilder1.isReallocated());
      
      boolean boolean0 = textStringBuilder0.equalsIgnoreCase(textStringBuilder1);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(textStringBuilder0, textStringBuilder1);
      assertNotSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder0.equals((Object)textStringBuilder1));
      assertFalse(textStringBuilder1.equals((Object)textStringBuilder0));
      assertEquals(6, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(6, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(6, textStringBuilder0.size());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(6, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(38, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(6, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNewLineText());
      assertFalse(textStringBuilder1.isReallocated());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("gej{KPnoZ!:c0l*");
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(15, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(15, textStringBuilder0.length());
      assertEquals(47, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      
      TextStringBuilder textStringBuilder1 = new TextStringBuilder("P5P~Tg K+0>RR");
      assertNotNull(textStringBuilder1);
      assertFalse(textStringBuilder1.equals((Object)textStringBuilder0));
      assertEquals(13, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(13, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNullText());
      assertFalse(textStringBuilder1.isReallocated());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(45, textStringBuilder1.capacity());
      
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder1.new TextStringBuilderTokenizer();
      assertNotNull(textStringBuilder_TextStringBuilderTokenizer0);
      assertFalse(textStringBuilder1.equals((Object)textStringBuilder0));
      assertEquals(13, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(13, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNullText());
      assertFalse(textStringBuilder1.isReallocated());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(45, textStringBuilder1.capacity());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder1.appendFixedWidthPadLeft((Object) textStringBuilder_TextStringBuilderTokenizer0, 2122, '(');
      assertNotNull(textStringBuilder2);
      assertSame(textStringBuilder1, textStringBuilder2);
      assertNotSame(textStringBuilder1, textStringBuilder0);
      assertNotSame(textStringBuilder2, textStringBuilder0);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertFalse(textStringBuilder1.equals((Object)textStringBuilder0));
      assertFalse(textStringBuilder2.equals((Object)textStringBuilder0));
      assertFalse(textStringBuilder1.isEmpty());
      assertTrue(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(2135, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(4270, textStringBuilder1.capacity());
      assertEquals(2135, textStringBuilder1.size());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertNull(textStringBuilder2.getNullText());
      assertTrue(textStringBuilder2.isNotEmpty());
      assertNull(textStringBuilder2.getNewLineText());
      assertFalse(textStringBuilder2.isEmpty());
      assertEquals(4270, textStringBuilder2.capacity());
      assertEquals(2135, textStringBuilder2.length());
      assertEquals(2135, textStringBuilder2.size());
      assertTrue(textStringBuilder2.isReallocated());
      
      boolean boolean0 = textStringBuilder0.equalsIgnoreCase(textStringBuilder1);
      assertNotSame(textStringBuilder0, textStringBuilder1);
      assertNotSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder1, textStringBuilder2);
      assertNotSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder0.equals((Object)textStringBuilder1));
      assertFalse(textStringBuilder0.equals((Object)textStringBuilder2));
      assertFalse(textStringBuilder1.equals((Object)textStringBuilder0));
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(15, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(15, textStringBuilder0.length());
      assertEquals(47, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder1.isEmpty());
      assertTrue(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(2135, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(4270, textStringBuilder1.capacity());
      assertEquals(2135, textStringBuilder1.size());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln(0.0);
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(4, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals(4, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(32, textStringBuilder1.capacity());
      assertEquals(4, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNullText());
      assertNull(textStringBuilder1.getNewLineText());
      assertFalse(textStringBuilder1.isReallocated());
      assertEquals(4, textStringBuilder1.size());
      assertTrue(textStringBuilder1.isNotEmpty());
      
      Object[] objectArray0 = new Object[6];
      TextStringBuilder textStringBuilder2 = textStringBuilder0.append("S5INy", objectArray0);
      assertNotNull(textStringBuilder2);
      assertEquals(6, objectArray0.length);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals(9, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(9, textStringBuilder0.length());
      assertEquals(9, textStringBuilder2.length());
      assertEquals(32, textStringBuilder2.capacity());
      assertTrue(textStringBuilder2.isNotEmpty());
      assertFalse(textStringBuilder2.isReallocated());
      assertNull(textStringBuilder2.getNullText());
      assertEquals(9, textStringBuilder2.size());
      assertFalse(textStringBuilder2.isEmpty());
      assertNull(textStringBuilder2.getNewLineText());
      
      TextStringBuilder textStringBuilder3 = textStringBuilder0.deleteFirst("S5INy");
      assertNotNull(textStringBuilder3);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder3);
      assertSame(textStringBuilder3, textStringBuilder1);
      assertSame(textStringBuilder3, textStringBuilder2);
      assertSame(textStringBuilder3, textStringBuilder0);
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(4, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals(4, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(32, textStringBuilder3.capacity());
      assertTrue(textStringBuilder3.isNotEmpty());
      assertEquals(4, textStringBuilder3.size());
      assertNull(textStringBuilder3.getNullText());
      assertFalse(textStringBuilder3.isReallocated());
      assertEquals(4, textStringBuilder3.length());
      assertFalse(textStringBuilder3.isEmpty());
      assertNull(textStringBuilder3.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "org.apache.commons.io.filefilter.WildcardFileFilter";
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendWithSeparators(objectArray0, "E0gVKy9&m=7TA!n{I8y");
      assertNotNull(textStringBuilder1);
      assertEquals(8, objectArray0.length);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(216, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(184, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(184, textStringBuilder0.size());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(216, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(184, textStringBuilder1.size());
      assertEquals(184, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder0.deleteAll('o');
      assertNotNull(textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(180, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(216, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(180, textStringBuilder0.length());
      assertNull(textStringBuilder2.getNewLineText());
      assertTrue(textStringBuilder2.isNotEmpty());
      assertEquals(180, textStringBuilder2.size());
      assertNull(textStringBuilder2.getNullText());
      assertFalse(textStringBuilder2.isEmpty());
      assertEquals(180, textStringBuilder2.length());
      assertEquals(216, textStringBuilder2.capacity());
      assertTrue(textStringBuilder2.isReallocated());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendSeparator("", (-1487));
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertTrue(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(0, textStringBuilder1.size());
      assertEquals(0, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      assertNotNull(textStringBuilder0);
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendSeparator('z', 0);
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertEquals(32, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(0, textStringBuilder1.length());
      assertTrue(textStringBuilder1.isEmpty());
      assertEquals(0, textStringBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("aQ3,e<kis<;'R{M,0");
      assertNotNull(textStringBuilder0);
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(49, textStringBuilder0.capacity());
      assertEquals(17, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(17, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNullText());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendPadding(0, '+');
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(49, textStringBuilder0.capacity());
      assertEquals(17, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(17, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(17, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(17, textStringBuilder1.size());
      assertEquals(49, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(2);
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(2, textStringBuilder0.capacity());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendFixedWidthPadRight((-443), (-1544), '7');
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(2, textStringBuilder0.capacity());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(0, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder1.isEmpty());
      assertEquals(0, textStringBuilder1.size());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertEquals(2, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      
      // Undeclared exception!
      try { 
        textStringBuilder0.append((CharSequence) "1vd:l`m'iVpP`3", 6080, 850);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // endIndex must be greater than startIndex
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      assertNotNull(textStringBuilder0);
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isEmpty());
      
      // Undeclared exception!
      try { 
        textStringBuilder0.append((CharSequence) textStringBuilder0, 850, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // endIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(6, textStringBuilder0.capacity());
      assertEquals(6, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(6, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      
      Writer writer0 = textStringBuilder0.asWriter();
      assertNotNull(writer0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(6, textStringBuilder0.capacity());
      assertEquals(6, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(6, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      
      textStringBuilder0.appendTo(writer0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(24, textStringBuilder0.capacity());
      assertEquals(12, textStringBuilder0.length());
      assertEquals(12, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((CharSequence) "~Nu8Zk'N+r");
      assertNotNull(textStringBuilder0);
      assertEquals(10, textStringBuilder0.length());
      assertEquals(10, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(42, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isNotEmpty());
      
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      assertNotNull(textStringBuilder_TextStringBuilderReader0);
      assertEquals(10, textStringBuilder0.length());
      assertEquals(10, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(42, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder_TextStringBuilderReader0.ready());
      assertTrue(textStringBuilder_TextStringBuilderReader0.markSupported());
      
      long long0 = textStringBuilder_TextStringBuilderReader0.skip(1943);
      assertEquals(10, textStringBuilder0.length());
      assertEquals(10, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(42, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder_TextStringBuilderReader0.markSupported());
      assertFalse(textStringBuilder_TextStringBuilderReader0.ready());
      assertEquals(10L, long0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      assertNotNull(textStringBuilder_TextStringBuilderReader0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder_TextStringBuilderReader0.ready());
      assertTrue(textStringBuilder_TextStringBuilderReader0.markSupported());
      
      long long0 = textStringBuilder_TextStringBuilderReader0.skip(0L);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder_TextStringBuilderReader0.ready());
      assertTrue(textStringBuilder_TextStringBuilderReader0.markSupported());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      assertNotNull(textStringBuilder_TextStringBuilderReader0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder_TextStringBuilderReader0.markSupported());
      assertFalse(textStringBuilder_TextStringBuilderReader0.ready());
      
      int int0 = textStringBuilder_TextStringBuilderReader0.read(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder_TextStringBuilderReader0.markSupported());
      assertFalse(textStringBuilder_TextStringBuilderReader0.ready());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      
      textStringBuilder0.validateIndices(0, 0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append(0.7);
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(3, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(3, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(6, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(3, textStringBuilder1.length());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNullText());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(6, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isEmpty());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(3, textStringBuilder1.size());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder0.appendFixedWidthPadLeft(31, 31, 'b');
      assertNotNull(textStringBuilder2);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertEquals(68, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(34, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(34, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(68, textStringBuilder2.capacity());
      assertTrue(textStringBuilder2.isReallocated());
      assertEquals(34, textStringBuilder2.size());
      assertNull(textStringBuilder2.getNewLineText());
      assertNull(textStringBuilder2.getNullText());
      assertTrue(textStringBuilder2.isNotEmpty());
      assertEquals(34, textStringBuilder2.length());
      assertFalse(textStringBuilder2.isEmpty());
      
      textStringBuilder0.validateIndex(31);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertEquals(68, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(34, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(34, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isReallocated());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(32, textStringBuilder0.capacity());
      
      TextStringBuilder.TextStringBuilderWriter textStringBuilder_TextStringBuilderWriter0 = textStringBuilder0.new TextStringBuilderWriter();
      assertNotNull(textStringBuilder_TextStringBuilderWriter0);
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(32, textStringBuilder0.capacity());
      
      textStringBuilder_TextStringBuilderWriter0.write(9);
      assertEquals(1, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(1, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      assertNotNull(textStringBuilder_TextStringBuilderReader0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertTrue(textStringBuilder_TextStringBuilderReader0.markSupported());
      assertFalse(textStringBuilder_TextStringBuilderReader0.ready());
      
      boolean boolean0 = textStringBuilder_TextStringBuilderReader0.ready();
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertTrue(textStringBuilder_TextStringBuilderReader0.markSupported());
      assertFalse(textStringBuilder_TextStringBuilderReader0.ready());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      
      TextStringBuilder.TextStringBuilderWriter textStringBuilder_TextStringBuilderWriter0 = textStringBuilder0.new TextStringBuilderWriter();
      assertNotNull(textStringBuilder_TextStringBuilderWriter0);
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      
      textStringBuilder_TextStringBuilderWriter0.write((String) null, 0, 0);
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      char[] charArray0 = new char[22];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0, 2);
      assertNotNull(textStringBuilder0);
      assertEquals(22, charArray0.length);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(2, textStringBuilder0.size());
      assertEquals(22, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(2, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      char[] charArray0 = new char[8];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0, 0);
      assertNotNull(textStringBuilder0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(8, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((String) null);
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      
      char[] charArray0 = new char[7];
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append(charArray0, 0, 1);
      assertNotNull(textStringBuilder1);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(1, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(1, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(1, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(32, textStringBuilder1.capacity());
      assertEquals(1, textStringBuilder1.size());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNullText());
      
      int int0 = textStringBuilder1.validateRange(0, 1);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(1, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(1, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(1, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(32, textStringBuilder1.capacity());
      assertEquals(1, textStringBuilder1.size());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.trim();
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder1.size());
      assertEquals(0, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNullText());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(0, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isEmpty());
      assertFalse(textStringBuilder1.isNotEmpty());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("");
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      assertNotNull(textStringBuilder_TextStringBuilderTokenizer0);
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendFixedWidthPadRight((Object) textStringBuilder_TextStringBuilderTokenizer0, 481, 'I');
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(481, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(481, textStringBuilder0.size());
      assertEquals(962, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertFalse(textStringBuilder1.isEmpty());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(481, textStringBuilder1.size());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(481, textStringBuilder1.length());
      assertEquals(962, textStringBuilder1.capacity());
      assertNull(textStringBuilder1.getNullText());
      assertNull(textStringBuilder1.getNewLineText());
      
      StringBuffer stringBuffer0 = textStringBuilder1.toStringBuffer();
      assertNotNull(stringBuffer0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(481, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(481, textStringBuilder0.size());
      assertEquals(962, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertFalse(textStringBuilder1.isEmpty());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(481, textStringBuilder1.size());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(481, textStringBuilder1.length());
      assertEquals(962, textStringBuilder1.capacity());
      assertNull(textStringBuilder1.getNullText());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(481, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendPadding(477, 'N');
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(477, textStringBuilder0.length());
      assertEquals(954, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(477, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(477, textStringBuilder1.size());
      assertEquals(954, textStringBuilder1.capacity());
      assertEquals(477, textStringBuilder1.length());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNullText());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      
      String string0 = textStringBuilder1.toString(421, 477);
      assertNotNull(string0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(477, textStringBuilder0.length());
      assertEquals(954, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(477, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(477, textStringBuilder1.size());
      assertEquals(954, textStringBuilder1.capacity());
      assertEquals(477, textStringBuilder1.length());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNullText());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals("NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("aJ0A.");
      assertNotNull(textStringBuilder0);
      assertEquals(37, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(5, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(5, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      
      String string0 = textStringBuilder0.toString(0, 0);
      assertNotNull(string0);
      assertEquals(37, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(5, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(5, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      char[] charArray0 = new char[4];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(4, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(4, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isEmpty());
      
      String string0 = textStringBuilder0.toString();
      assertNotNull(string0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(4, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(4, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals("\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder0.isNotEmpty());
      
      String string0 = textStringBuilder0.toString();
      assertNotNull(string0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("O-`A\"EF/X1H6");
      assertNotNull(textStringBuilder0);
      assertEquals(12, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(44, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(12, textStringBuilder0.size());
      
      String string0 = textStringBuilder0.substring(2, 90);
      assertNotNull(string0);
      assertEquals(12, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(44, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(12, textStringBuilder0.size());
      assertEquals("`A\"EF/X1H6", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("aQ3,e<kis<;'R{M,0");
      assertNotNull(textStringBuilder0);
      assertEquals(17, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(17, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(49, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      
      String string0 = textStringBuilder0.substring(0);
      assertNotNull(string0);
      assertEquals(17, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(17, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(49, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals("aQ3,e<kis<;'R{M,0", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      
      String string0 = textStringBuilder0.substring(0);
      assertNotNull(string0);
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      
      int int0 = textStringBuilder0.size();
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln("org.apache.commons.io.filefilter.WildcardFileFilter");
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(52, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(52, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(102, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder1.getNewLineText());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(102, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(52, textStringBuilder1.length());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(52, textStringBuilder1.size());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder0.setNullText("org.apache.commons.io.filefilter.WildcardFileFilter");
      assertNotNull(textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertEquals(52, textStringBuilder0.length());
      assertEquals("org.apache.commons.io.filefilter.WildcardFileFilter", textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(52, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(102, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(52, textStringBuilder2.length());
      assertEquals("org.apache.commons.io.filefilter.WildcardFileFilter", textStringBuilder2.getNullText());
      assertEquals(102, textStringBuilder2.capacity());
      assertTrue(textStringBuilder2.isReallocated());
      assertFalse(textStringBuilder2.isEmpty());
      assertNull(textStringBuilder2.getNewLineText());
      assertTrue(textStringBuilder2.isNotEmpty());
      assertEquals(52, textStringBuilder2.size());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.setNullText("net.bytebuddy.asm.Advice$NoExceptionHandler");
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(0, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals("net.bytebuddy.asm.Advice$NoExceptionHandler", textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isEmpty());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(0, textStringBuilder1.length());
      assertEquals(0, textStringBuilder1.size());
      assertEquals("net.bytebuddy.asm.Advice$NoExceptionHandler", textStringBuilder1.getNullText());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.capacity());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append(0.7);
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(6, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(3, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(3, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(3, textStringBuilder1.length());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(3, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNullText());
      assertNull(textStringBuilder1.getNewLineText());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(6, textStringBuilder1.capacity());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder0.setNewLineText("!yRnb<oGv0h.oJ");
      assertNotNull(textStringBuilder2);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertEquals(6, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(3, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(3, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertEquals("!yRnb<oGv0h.oJ", textStringBuilder0.getNewLineText());
      assertEquals(3, textStringBuilder2.length());
      assertEquals("!yRnb<oGv0h.oJ", textStringBuilder2.getNewLineText());
      assertTrue(textStringBuilder2.isNotEmpty());
      assertEquals(3, textStringBuilder2.size());
      assertFalse(textStringBuilder2.isEmpty());
      assertEquals(6, textStringBuilder2.capacity());
      assertTrue(textStringBuilder2.isReallocated());
      assertNull(textStringBuilder2.getNullText());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.setNewLineText("*0~h6Yp7hWS+:z9TOR");
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.capacity());
      assertEquals("*0~h6Yp7hWS+:z9TOR", textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertEquals(0, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isEmpty());
      assertFalse(textStringBuilder1.isReallocated());
      assertEquals(0, textStringBuilder1.length());
      assertEquals(0, textStringBuilder1.size());
      assertEquals("*0~h6Yp7hWS+:z9TOR", textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      char[] charArray0 = new char[10];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(10, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(10, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(10, textStringBuilder0.size());
      assertEquals(10, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      assertNotNull(textStringBuilder_TextStringBuilderReader0);
      assertEquals(10, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(10, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(10, textStringBuilder0.size());
      assertEquals(10, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder_TextStringBuilderReader0.markSupported());
      assertTrue(textStringBuilder_TextStringBuilderReader0.ready());
      
      int int0 = textStringBuilder0.readFrom((Reader) textStringBuilder_TextStringBuilderReader0, 1162);
      assertEquals(10, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(1172, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(2344, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(1172, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder_TextStringBuilderReader0.markSupported());
      assertTrue(textStringBuilder_TextStringBuilderReader0.ready());
      assertEquals(1162, int0);
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.setCharAt(0, 'V');
      assertNotNull(textStringBuilder1);
      assertEquals(10, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(1172, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(2344, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(1172, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder1.isEmpty());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(2344, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(1172, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNullText());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(1172, textStringBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      
      StringBuffer stringBuffer0 = new StringBuffer(477);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.set(stringBuffer0);
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(0, textStringBuilder1.size());
      assertFalse(textStringBuilder1.isReallocated());
      assertEquals(0, textStringBuilder1.length());
      assertEquals(0, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertFalse(textStringBuilder1.isNotEmpty());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendSeparator("net.bytebuddy.asm.Advice$NoExceptionHandler", "net.bytebuddy.asm.Advice$NoExceptionHandler");
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(43, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(86, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(43, textStringBuilder0.size());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(43, textStringBuilder1.length());
      assertTrue(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(86, textStringBuilder1.capacity());
      assertEquals(43, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNullText());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder0.reverse();
      assertNotNull(textStringBuilder2);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(43, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(86, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(43, textStringBuilder0.size());
      assertEquals(86, textStringBuilder2.capacity());
      assertEquals(43, textStringBuilder2.size());
      assertEquals(43, textStringBuilder2.length());
      assertTrue(textStringBuilder2.isReallocated());
      assertTrue(textStringBuilder2.isNotEmpty());
      assertNull(textStringBuilder2.getNewLineText());
      assertNull(textStringBuilder2.getNullText());
      assertFalse(textStringBuilder2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.reverse();
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder1.length());
      assertEquals(0, textStringBuilder1.size());
      assertTrue(textStringBuilder1.isEmpty());
      assertEquals(0, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNullText());
      assertNull(textStringBuilder1.getNewLineText());
      assertFalse(textStringBuilder1.isNotEmpty());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      char[] charArray0 = new char[4];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(4, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(4, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isEmpty());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendSeparator("[B/Xod+9(mEKoo7%^", "[B/Xod+9(mEKoo7%^");
      assertNotNull(textStringBuilder1);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(42, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(21, textStringBuilder0.length());
      assertEquals(21, textStringBuilder0.size());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(21, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(21, textStringBuilder1.size());
      assertFalse(textStringBuilder1.isEmpty());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(42, textStringBuilder1.capacity());
      assertNull(textStringBuilder1.getNullText());
      
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      assertNotNull(textStringBuilder_TextStringBuilderTokenizer0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(42, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(21, textStringBuilder0.length());
      assertEquals(21, textStringBuilder0.size());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getIgnoredMatcher();
      assertNotNull(stringMatcher0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(42, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(21, textStringBuilder0.length());
      assertEquals(21, textStringBuilder0.size());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, stringMatcher0.size());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder1.replaceFirst(stringMatcher0, "[B/Xod+9(mEKoo7%^");
      assertNotNull(textStringBuilder2);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertSame(textStringBuilder1, textStringBuilder2);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(42, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(21, textStringBuilder0.length());
      assertEquals(21, textStringBuilder0.size());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(21, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(21, textStringBuilder1.size());
      assertFalse(textStringBuilder1.isEmpty());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(42, textStringBuilder1.capacity());
      assertNull(textStringBuilder1.getNullText());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, stringMatcher0.size());
      assertTrue(textStringBuilder2.isNotEmpty());
      assertEquals(21, textStringBuilder2.size());
      assertNull(textStringBuilder2.getNullText());
      assertEquals(21, textStringBuilder2.length());
      assertNull(textStringBuilder2.getNewLineText());
      assertFalse(textStringBuilder2.isEmpty());
      assertTrue(textStringBuilder2.isReallocated());
      assertEquals(42, textStringBuilder2.capacity());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      assertNotNull(textStringBuilder_TextStringBuilderTokenizer0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getTrimmerMatcher();
      assertNotNull(stringMatcher0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertEquals(0, stringMatcher0.size());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.replaceFirst(stringMatcher0, "Dp<7)F^aZZj4l?n");
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertEquals(0, stringMatcher0.size());
      assertTrue(textStringBuilder1.isEmpty());
      assertEquals(0, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(0, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isReallocated());
      assertEquals(0, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.replaceFirst("", "<^2izK");
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder1.size());
      assertEquals(0, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNullText());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(0, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertTrue(textStringBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      char[] charArray0 = new char[9];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(9, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(9, textStringBuilder0.capacity());
      
      StringWriter stringWriter0 = new StringWriter(500);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('s');
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("s", stringWriter0.toString());
      assertEquals("s", stringWriter1.toString());
      
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) textStringBuilder0);
      assertNotNull(stringWriter2);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertEquals(9, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(9, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(9, textStringBuilder0.capacity());
      assertEquals("s\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringWriter0.toString());
      assertEquals("s\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringWriter1.toString());
      assertEquals("s\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringWriter2.toString());
      
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      assertNotNull(stringBuffer0);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter2);
      assertEquals("s\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringWriter0.toString());
      assertEquals("s\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringWriter1.toString());
      assertEquals(10, stringBuffer0.length());
      assertEquals("s\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringBuffer0.toString());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.set(stringBuffer0);
      assertNotNull(textStringBuilder1);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter2);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(10, textStringBuilder0.length());
      assertEquals(10, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(20, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals("s\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringWriter0.toString());
      assertEquals("s\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringWriter1.toString());
      assertEquals(10, stringBuffer0.length());
      assertEquals("s\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringBuffer0.toString());
      assertTrue(textStringBuilder1.isReallocated());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(20, textStringBuilder1.capacity());
      assertEquals(10, textStringBuilder1.size());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(10, textStringBuilder1.length());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder1.replaceFirst('=', 'A');
      assertNotNull(textStringBuilder2);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter2);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertSame(textStringBuilder1, textStringBuilder2);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(10, textStringBuilder0.length());
      assertEquals(10, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(20, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals("s\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringWriter0.toString());
      assertEquals("s\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringWriter1.toString());
      assertEquals(10, stringBuffer0.length());
      assertEquals("s\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringBuffer0.toString());
      assertTrue(textStringBuilder1.isReallocated());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(20, textStringBuilder1.capacity());
      assertEquals(10, textStringBuilder1.size());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(10, textStringBuilder1.length());
      assertFalse(textStringBuilder2.isEmpty());
      assertTrue(textStringBuilder2.isReallocated());
      assertEquals(10, textStringBuilder2.length());
      assertEquals(20, textStringBuilder2.capacity());
      assertTrue(textStringBuilder2.isNotEmpty());
      assertNull(textStringBuilder2.getNullText());
      assertEquals(10, textStringBuilder2.size());
      assertNull(textStringBuilder2.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.replaceFirst('t', 't');
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(0, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNullText());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertEquals(0, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isEmpty());
      assertEquals(0, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isReallocated());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(1963);
      assertNotNull(textStringBuilder0);
      assertEquals(1963, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.size());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln(false);
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(1963, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(6, textStringBuilder0.length());
      assertEquals(6, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(1963, textStringBuilder1.capacity());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(6, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(6, textStringBuilder1.size());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertFalse(textStringBuilder1.isReallocated());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder1.appendFixedWidthPadRight(1963, 1963, 'x');
      assertNotNull(textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder2);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(1969, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(3938, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(1969, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(1969, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNullText());
      assertNull(textStringBuilder1.getNewLineText());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(3938, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isEmpty());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(1969, textStringBuilder1.length());
      assertTrue(textStringBuilder2.isNotEmpty());
      assertEquals(1969, textStringBuilder2.length());
      assertEquals(1969, textStringBuilder2.size());
      assertNull(textStringBuilder2.getNewLineText());
      assertEquals(3938, textStringBuilder2.capacity());
      assertTrue(textStringBuilder2.isReallocated());
      assertFalse(textStringBuilder2.isEmpty());
      assertNull(textStringBuilder2.getNullText());
      
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder1.new TextStringBuilderTokenizer();
      assertNotNull(textStringBuilder_TextStringBuilderTokenizer0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(1969, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(3938, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(1969, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(1969, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNullText());
      assertNull(textStringBuilder1.getNewLineText());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(3938, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isEmpty());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(1969, textStringBuilder1.length());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getTrimmerMatcher();
      assertNotNull(stringMatcher0);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder2);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(1969, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(3938, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(1969, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(1969, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNullText());
      assertNull(textStringBuilder1.getNewLineText());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(3938, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isEmpty());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(1969, textStringBuilder1.length());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertEquals(0, stringMatcher0.size());
      
      TextStringBuilder textStringBuilder3 = textStringBuilder0.replaceAll(stringMatcher0, "&c'h!mIFG*dVh?-y7Rd");
      assertNotNull(textStringBuilder3);
      assertSame(textStringBuilder0, textStringBuilder3);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder2);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertSame(textStringBuilder1, textStringBuilder3);
      assertSame(textStringBuilder3, textStringBuilder1);
      assertSame(textStringBuilder3, textStringBuilder2);
      assertSame(textStringBuilder3, textStringBuilder0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(1969, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(3938, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(1969, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(1969, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNullText());
      assertNull(textStringBuilder1.getNewLineText());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(3938, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isEmpty());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(1969, textStringBuilder1.length());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertEquals(0, stringMatcher0.size());
      assertTrue(textStringBuilder3.isNotEmpty());
      assertEquals(1969, textStringBuilder3.length());
      assertNull(textStringBuilder3.getNewLineText());
      assertNull(textStringBuilder3.getNullText());
      assertFalse(textStringBuilder3.isEmpty());
      assertEquals(3938, textStringBuilder3.capacity());
      assertTrue(textStringBuilder3.isReallocated());
      assertEquals(1969, textStringBuilder3.size());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(1963);
      assertNotNull(textStringBuilder0);
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(1963, textStringBuilder0.capacity());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln(false);
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(6, textStringBuilder0.length());
      assertEquals(1963, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(6, textStringBuilder0.size());
      assertEquals(6, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(6, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(1963, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder1.new TextStringBuilderTokenizer();
      assertNotNull(textStringBuilder_TextStringBuilderTokenizer0);
      assertEquals(6, textStringBuilder0.length());
      assertEquals(1963, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(6, textStringBuilder0.size());
      assertEquals(6, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(6, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(1963, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getTrimmerMatcher();
      assertNotNull(stringMatcher0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(6, textStringBuilder0.length());
      assertEquals(1963, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(6, textStringBuilder0.size());
      assertEquals(6, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(6, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(1963, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, stringMatcher0.size());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder0.replaceAll(stringMatcher0, "&c'h!mIFG*dVh?-y7Rd");
      assertNotNull(textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder1, textStringBuilder2);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertEquals(6, textStringBuilder0.length());
      assertEquals(1963, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(6, textStringBuilder0.size());
      assertEquals(6, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(6, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(1963, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, stringMatcher0.size());
      assertFalse(textStringBuilder2.isEmpty());
      assertNull(textStringBuilder2.getNullText());
      assertEquals(1963, textStringBuilder2.capacity());
      assertEquals(6, textStringBuilder2.size());
      assertTrue(textStringBuilder2.isNotEmpty());
      assertEquals(6, textStringBuilder2.length());
      assertFalse(textStringBuilder2.isReallocated());
      assertNull(textStringBuilder2.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.replaceAll((StringMatcher) null, "K-CH");
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(0, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(0, textStringBuilder1.length());
      assertEquals(0, textStringBuilder1.size());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertTrue(textStringBuilder1.isEmpty());
      assertEquals(0, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      char[] charArray0 = new char[2];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(2, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(2, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(2, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isNotEmpty());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln(charArray0);
      assertNotNull(textStringBuilder1);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(8, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(5, textStringBuilder0.size());
      assertEquals(5, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(5, textStringBuilder1.length());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(5, textStringBuilder1.size());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(8, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isReallocated());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder1.replaceAll("JdbVe.5", "org.apache.commons.io.filefilter.FileFileFilter");
      assertNotNull(textStringBuilder2);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertSame(textStringBuilder1, textStringBuilder2);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(8, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(5, textStringBuilder0.size());
      assertEquals(5, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(5, textStringBuilder1.length());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(5, textStringBuilder1.size());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(8, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(5, textStringBuilder2.length());
      assertEquals(5, textStringBuilder2.size());
      assertNull(textStringBuilder2.getNewLineText());
      assertNull(textStringBuilder2.getNullText());
      assertFalse(textStringBuilder2.isEmpty());
      assertTrue(textStringBuilder2.isReallocated());
      assertEquals(8, textStringBuilder2.capacity());
      assertTrue(textStringBuilder2.isNotEmpty());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.replaceAll("IPW;<ulCI|", "IPW;<ulCI|");
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(0, textStringBuilder1.length());
      assertEquals(0, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isReallocated());
      assertEquals(0, textStringBuilder1.size());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNullText());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("~Nu8Zk'N+r");
      assertNotNull(textStringBuilder0);
      assertNull(textStringBuilder0.getNullText());
      assertEquals(10, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(10, textStringBuilder0.length());
      assertEquals(42, textStringBuilder0.capacity());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.ensureCapacity(119);
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertTrue(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(10, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(238, textStringBuilder0.capacity());
      assertEquals(10, textStringBuilder0.length());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(238, textStringBuilder1.capacity());
      assertEquals(10, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(10, textStringBuilder1.length());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder1.replaceAll('<', 'd');
      assertNotNull(textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder2);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertTrue(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(10, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(238, textStringBuilder0.capacity());
      assertEquals(10, textStringBuilder0.length());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(238, textStringBuilder1.capacity());
      assertEquals(10, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(10, textStringBuilder1.length());
      assertEquals(10, textStringBuilder2.size());
      assertEquals(10, textStringBuilder2.length());
      assertTrue(textStringBuilder2.isReallocated());
      assertNull(textStringBuilder2.getNullText());
      assertNull(textStringBuilder2.getNewLineText());
      assertTrue(textStringBuilder2.isNotEmpty());
      assertFalse(textStringBuilder2.isEmpty());
      assertEquals(238, textStringBuilder2.capacity());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.replaceAll('d', '<');
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder1.length());
      assertEquals(0, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertTrue(textStringBuilder1.isEmpty());
      assertEquals(0, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isReallocated());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isEmpty());
      
      FormatStyle[] formatStyleArray0 = new FormatStyle[2];
      FormatStyle formatStyle0 = FormatStyle.FULL;
      formatStyleArray0[0] = formatStyle0;
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendAll(formatStyleArray0);
      assertNotNull(textStringBuilder1);
      assertEquals(2, formatStyleArray0.length);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(39, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(39, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(78, textStringBuilder0.capacity());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(39, textStringBuilder1.size());
      assertEquals(39, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNewLineText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(78, textStringBuilder1.capacity());
      
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      assertNotNull(textStringBuilder_TextStringBuilderTokenizer0);
      assertEquals(39, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(39, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(78, textStringBuilder0.capacity());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getDelimiterMatcher();
      assertNotNull(stringMatcher0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertEquals(39, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(39, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(78, textStringBuilder0.capacity());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertEquals(1, stringMatcher0.size());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder0.replace(stringMatcher0, "v<t", 2, 2, 2);
      assertNotNull(textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertEquals(39, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(39, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(78, textStringBuilder0.capacity());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertEquals(1, stringMatcher0.size());
      assertEquals(39, textStringBuilder2.length());
      assertEquals(78, textStringBuilder2.capacity());
      assertFalse(textStringBuilder2.isEmpty());
      assertTrue(textStringBuilder2.isNotEmpty());
      assertEquals(39, textStringBuilder2.size());
      assertNull(textStringBuilder2.getNullText());
      assertNull(textStringBuilder2.getNewLineText());
      assertTrue(textStringBuilder2.isReallocated());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append((-484.75342F));
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(10, textStringBuilder0.length());
      assertEquals(10, textStringBuilder0.size());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(10, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(10, textStringBuilder1.length());
      assertEquals(32, textStringBuilder1.capacity());
      assertNull(textStringBuilder1.getNewLineText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertFalse(textStringBuilder1.isReallocated());
      
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      assertNotNull(textStringBuilder_TextStringBuilderTokenizer0);
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(10, textStringBuilder0.length());
      assertEquals(10, textStringBuilder0.size());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getDelimiterMatcher();
      assertNotNull(stringMatcher0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(10, textStringBuilder0.length());
      assertEquals(10, textStringBuilder0.size());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, stringMatcher0.size());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder0.replace(stringMatcher0, "v<t", 2, 2, 2);
      assertNotNull(textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(10, textStringBuilder0.length());
      assertEquals(10, textStringBuilder0.size());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, stringMatcher0.size());
      assertTrue(textStringBuilder2.isNotEmpty());
      assertFalse(textStringBuilder2.isReallocated());
      assertNull(textStringBuilder2.getNewLineText());
      assertEquals(32, textStringBuilder2.capacity());
      assertEquals(10, textStringBuilder2.size());
      assertNull(textStringBuilder2.getNullText());
      assertEquals(10, textStringBuilder2.length());
      assertFalse(textStringBuilder2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((-973));
      assertNotNull(textStringBuilder0);
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      assertNotNull(textStringBuilder_TextStringBuilderTokenizer0);
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getIgnoredMatcher();
      assertNotNull(stringMatcher0);
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, stringMatcher0.size());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.replace(stringMatcher0, "Invalid length: ", 0, 446, 1110);
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, stringMatcher0.size());
      assertTrue(textStringBuilder1.isEmpty());
      assertFalse(textStringBuilder1.isReallocated());
      assertEquals(0, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(0, textStringBuilder1.size());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertEquals(32, textStringBuilder1.capacity());
      assertNull(textStringBuilder1.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("*0Hh6,p1h$S:z9TOR");
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(49, textStringBuilder0.capacity());
      assertEquals(17, textStringBuilder0.size());
      assertEquals(17, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isNotEmpty());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.replace(0, 108, "");
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(49, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(49, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isEmpty());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertEquals(0, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isReallocated());
      
      String string0 = textStringBuilder0.substring(0, 108);
      assertNotNull(string0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(49, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(119);
      assertNotNull(textStringBuilder0);
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(119, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      
      TextStringBuilder textStringBuilder1 = new TextStringBuilder("~Nu8Zk'N+r");
      assertNotNull(textStringBuilder1);
      assertFalse(textStringBuilder1.equals((Object)textStringBuilder0));
      assertEquals(10, textStringBuilder1.length());
      assertEquals(10, textStringBuilder1.size());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNullText());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(42, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isNotEmpty());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) textStringBuilder1);
      assertNotNull(charBuffer0);
      assertNotSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder1.equals((Object)textStringBuilder0));
      assertEquals(10, textStringBuilder1.length());
      assertEquals(10, textStringBuilder1.size());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNullText());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(42, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(10, charBuffer0.capacity());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(10, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals("~Nu8Zk'N+r", charBuffer0.toString());
      assertEquals(10, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(10, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      
      int int0 = textStringBuilder0.readFrom(charBuffer0);
      assertNotSame(textStringBuilder0, textStringBuilder1);
      assertNotSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder0.equals((Object)textStringBuilder1));
      assertFalse(textStringBuilder1.equals((Object)textStringBuilder0));
      assertEquals(10, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(10, textStringBuilder0.length());
      assertEquals(119, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(10, textStringBuilder1.length());
      assertEquals(10, textStringBuilder1.size());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNullText());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(42, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(10, charBuffer0.capacity());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(10, charBuffer0.position());
      assertEquals(10, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(322);
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(322, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) textStringBuilder0);
      assertNotNull(charBuffer0);
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(322, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      
      int int0 = textStringBuilder0.readFrom((Readable) charBuffer0);
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(322, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      char[] charArray0 = new char[1];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(1, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(1, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(1, textStringBuilder0.size());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.minimizeCapacity();
      assertNotNull(textStringBuilder1);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(1, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(1, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(1, textStringBuilder0.size());
      assertEquals(1, textStringBuilder1.size());
      assertEquals(1, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertFalse(textStringBuilder1.isReallocated());
      assertEquals(1, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(1004);
      assertNotNull(textStringBuilder0);
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(1004, textStringBuilder0.capacity());
      
      int int0 = textStringBuilder0.length();
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(1004, textStringBuilder0.capacity());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln((double) 0);
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(4, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(4, textStringBuilder0.length());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(4, textStringBuilder1.size());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(4, textStringBuilder1.length());
      assertEquals(32, textStringBuilder1.capacity());
      
      int int0 = textStringBuilder0.length();
      assertSame(textStringBuilder0, textStringBuilder1);
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(4, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(4, textStringBuilder0.length());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(6, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(6, textStringBuilder0.size());
      
      int int0 = textStringBuilder0.lastIndexOf("", 4);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(6, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(6, textStringBuilder0.size());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      char[] charArray0 = new char[3];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(3, textStringBuilder0.length());
      assertEquals(3, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(3, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      
      int int0 = textStringBuilder0.lastIndexOf("");
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(3, textStringBuilder0.length());
      assertEquals(3, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(3, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      char[] charArray0 = new char[1];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNull(textStringBuilder0.getNullText());
      assertEquals(1, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(1, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(1, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln("6");
      assertNotNull(textStringBuilder1);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(3, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(4, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(3, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(4, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(3, textStringBuilder1.size());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(3, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNewLineText());
      
      int int0 = textStringBuilder1.lastIndexOf('6', 1907);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(3, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(4, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(3, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(4, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(3, textStringBuilder1.size());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(3, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((String) null);
      assertNotNull(textStringBuilder0);
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isNotEmpty());
      
      char[] charArray0 = new char[5];
      charArray0[1] = 't';
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln(charArray0);
      assertNotNull(textStringBuilder1);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 't', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(6, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(6, textStringBuilder0.length());
      assertEquals(6, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(6, textStringBuilder1.size());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(32, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNullText());
      assertNull(textStringBuilder1.getNewLineText());
      
      int int0 = textStringBuilder0.lastIndexOf('t');
      assertSame(textStringBuilder0, textStringBuilder1);
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(6, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(6, textStringBuilder0.length());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isNotEmpty());
      
      ChronoUnit chronoUnit0 = ChronoUnit.YEARS;
      assertEquals(ChronoUnit.YEARS, chronoUnit0);
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendFixedWidthPadRight((Object) chronoUnit0, 79, 's');
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(79, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(158, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(79, textStringBuilder0.size());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertFalse(textStringBuilder1.isEmpty());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(79, textStringBuilder1.size());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(158, textStringBuilder1.capacity());
      assertEquals(79, textStringBuilder1.length());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder0.insert(71, (char[]) null, (-1805), (-1805));
      assertNotNull(textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertEquals(79, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(158, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(79, textStringBuilder0.size());
      assertEquals(158, textStringBuilder2.capacity());
      assertNull(textStringBuilder2.getNewLineText());
      assertEquals(79, textStringBuilder2.length());
      assertTrue(textStringBuilder2.isNotEmpty());
      assertFalse(textStringBuilder2.isEmpty());
      assertTrue(textStringBuilder2.isReallocated());
      assertEquals(79, textStringBuilder2.size());
      assertNull(textStringBuilder2.getNullText());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(32, textStringBuilder0.capacity());
      
      ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BEFORE_BE;
      assertEquals(ThaiBuddhistEra.BEFORE_BE, thaiBuddhistEra0);
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append((Object) thaiBuddhistEra0);
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertNull(textStringBuilder0.getNullText());
      assertEquals(86, textStringBuilder0.capacity());
      assertEquals(43, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(43, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(86, textStringBuilder1.capacity());
      assertEquals(43, textStringBuilder1.length());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(43, textStringBuilder1.size());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertFalse(textStringBuilder1.isEmpty());
      
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder2 = textStringBuilder0.insert(0, charArray0);
      assertNotNull(textStringBuilder2);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertEquals(49, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(86, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(49, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(49, textStringBuilder2.size());
      assertNull(textStringBuilder2.getNewLineText());
      assertTrue(textStringBuilder2.isNotEmpty());
      assertEquals(49, textStringBuilder2.length());
      assertEquals(86, textStringBuilder2.capacity());
      assertFalse(textStringBuilder2.isEmpty());
      assertTrue(textStringBuilder2.isReallocated());
      assertNull(textStringBuilder2.getNullText());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      assertNotNull(textStringBuilder0);
      assertTrue(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(32, textStringBuilder0.capacity());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append((long) 1467);
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(4, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(4, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder1.getNullText());
      assertFalse(textStringBuilder1.isReallocated());
      assertEquals(4, textStringBuilder1.size());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(32, textStringBuilder1.capacity());
      assertEquals(4, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder0.insert(0, false);
      assertNotNull(textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(9, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(9, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder2.getNewLineText());
      assertEquals(9, textStringBuilder2.size());
      assertNull(textStringBuilder2.getNullText());
      assertEquals(9, textStringBuilder2.length());
      assertFalse(textStringBuilder2.isEmpty());
      assertTrue(textStringBuilder2.isNotEmpty());
      assertEquals(32, textStringBuilder2.capacity());
      assertFalse(textStringBuilder2.isReallocated());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln((Object) null);
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(1, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(1, textStringBuilder0.size());
      assertEquals(1, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isReallocated());
      assertEquals(1, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNewLineText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(32, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNullText());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder1.insert(0, (Object) textStringBuilder0);
      assertNotNull(textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertSame(textStringBuilder1, textStringBuilder2);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(53, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(106, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(53, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(106, textStringBuilder1.capacity());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(53, textStringBuilder1.size());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertTrue(textStringBuilder1.isReallocated());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(53, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder2.isNotEmpty());
      assertEquals(53, textStringBuilder2.size());
      assertEquals(106, textStringBuilder2.capacity());
      assertFalse(textStringBuilder2.isEmpty());
      assertTrue(textStringBuilder2.isReallocated());
      assertNull(textStringBuilder2.getNullText());
      assertEquals(53, textStringBuilder2.length());
      assertNull(textStringBuilder2.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append((long) 1467);
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(4, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(4, textStringBuilder0.length());
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertFalse(textStringBuilder1.isReallocated());
      assertEquals(4, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(4, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(32, textStringBuilder1.capacity());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder0.insert(0, (Object) "");
      assertNotNull(textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(31, textStringBuilder0.size());
      assertEquals(31, textStringBuilder0.length());
      assertEquals(32, textStringBuilder2.capacity());
      assertFalse(textStringBuilder2.isReallocated());
      assertNull(textStringBuilder2.getNewLineText());
      assertTrue(textStringBuilder2.isNotEmpty());
      assertEquals(31, textStringBuilder2.size());
      assertFalse(textStringBuilder2.isEmpty());
      assertEquals(31, textStringBuilder2.length());
      assertNull(textStringBuilder2.getNullText());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("C");
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(34, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(2, textStringBuilder0.length());
      assertEquals(2, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isReallocated());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.insert(0, (long) (-1));
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(34, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(4, textStringBuilder0.size());
      assertEquals(4, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(4, textStringBuilder1.size());
      assertEquals(4, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(34, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(6, textStringBuilder0.capacity());
      assertEquals(6, textStringBuilder0.length());
      assertEquals(6, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isEmpty());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.insert(4, (long) 4);
      assertNotNull(textStringBuilder1);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(7, textStringBuilder0.length());
      assertEquals(14, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(7, textStringBuilder0.size());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(7, textStringBuilder1.size());
      assertEquals(14, textStringBuilder1.capacity());
      assertEquals(7, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNewLineText());
      assertTrue(textStringBuilder1.isNotEmpty());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      char[] charArray0 = new char[2];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(2, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(2, textStringBuilder0.length());
      assertEquals(2, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.insert(0, (-1074));
      assertNotNull(textStringBuilder1);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(14, textStringBuilder0.capacity());
      assertEquals(7, textStringBuilder0.size());
      assertEquals(7, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder1.isEmpty());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(7, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNullText());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(7, textStringBuilder1.size());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(14, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      char[] charArray0 = new char[8];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, textStringBuilder0.length());
      assertEquals(8, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(8, textStringBuilder0.size());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.insert(5, (float) (-3));
      assertNotNull(textStringBuilder1);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(12, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(24, textStringBuilder0.capacity());
      assertEquals(12, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(24, textStringBuilder1.capacity());
      assertEquals(12, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(12, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder1.isReallocated());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln((-311));
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals(5, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(5, textStringBuilder0.size());
      assertFalse(textStringBuilder1.isReallocated());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(32, textStringBuilder1.capacity());
      assertEquals(5, textStringBuilder1.length());
      assertEquals(5, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertFalse(textStringBuilder1.isEmpty());
      
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      assertNotNull(textStringBuilder_TextStringBuilderReader0);
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals(5, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(5, textStringBuilder0.size());
      assertTrue(textStringBuilder_TextStringBuilderReader0.ready());
      assertTrue(textStringBuilder_TextStringBuilderReader0.markSupported());
      
      int int0 = textStringBuilder1.readFrom((Reader) textStringBuilder_TextStringBuilderReader0, 3440);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(3445, textStringBuilder0.size());
      assertEquals(3445, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(6890, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder1.isReallocated());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(3445, textStringBuilder1.length());
      assertEquals(3445, textStringBuilder1.size());
      assertEquals(6890, textStringBuilder1.capacity());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertFalse(textStringBuilder1.isEmpty());
      assertTrue(textStringBuilder_TextStringBuilderReader0.ready());
      assertTrue(textStringBuilder_TextStringBuilderReader0.markSupported());
      assertEquals(3440, int0);
      
      TextStringBuilder textStringBuilder2 = textStringBuilder1.insert(3440, (double) (-311));
      assertNotNull(textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder1, textStringBuilder2);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(6890, textStringBuilder0.capacity());
      assertEquals(3451, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(3451, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(3451, textStringBuilder1.length());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(6890, textStringBuilder1.capacity());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(3451, textStringBuilder1.size());
      assertEquals(3451, textStringBuilder2.size());
      assertFalse(textStringBuilder2.isEmpty());
      assertNull(textStringBuilder2.getNewLineText());
      assertNull(textStringBuilder2.getNullText());
      assertTrue(textStringBuilder2.isNotEmpty());
      assertEquals(6890, textStringBuilder2.capacity());
      assertEquals(3451, textStringBuilder2.length());
      assertTrue(textStringBuilder2.isReallocated());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln(0);
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(2, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(2, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(32, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(2, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNullText());
      assertFalse(textStringBuilder1.isReallocated());
      assertEquals(2, textStringBuilder1.size());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder1.insert(0, (double) 0);
      assertNotNull(textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertSame(textStringBuilder1, textStringBuilder2);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(5, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(5, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(32, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(5, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNewLineText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNullText());
      assertFalse(textStringBuilder1.isReallocated());
      assertEquals(5, textStringBuilder1.size());
      assertFalse(textStringBuilder2.isEmpty());
      assertNull(textStringBuilder2.getNullText());
      assertEquals(32, textStringBuilder2.capacity());
      assertEquals(5, textStringBuilder2.length());
      assertNull(textStringBuilder2.getNewLineText());
      assertTrue(textStringBuilder2.isNotEmpty());
      assertFalse(textStringBuilder2.isReallocated());
      assertEquals(5, textStringBuilder2.size());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln(0.0);
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(4, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(4, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(32, textStringBuilder1.capacity());
      assertEquals(4, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertFalse(textStringBuilder1.isEmpty());
      assertFalse(textStringBuilder1.isReallocated());
      assertEquals(4, textStringBuilder1.size());
      assertTrue(textStringBuilder1.isNotEmpty());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder1.insert(0, ']');
      assertNotNull(textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder2);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals(5, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(5, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(32, textStringBuilder1.capacity());
      assertEquals(5, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertFalse(textStringBuilder1.isEmpty());
      assertFalse(textStringBuilder1.isReallocated());
      assertEquals(5, textStringBuilder1.size());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(32, textStringBuilder2.capacity());
      assertEquals(5, textStringBuilder2.length());
      assertEquals(5, textStringBuilder2.size());
      assertFalse(textStringBuilder2.isReallocated());
      assertTrue(textStringBuilder2.isNotEmpty());
      assertNull(textStringBuilder2.getNewLineText());
      assertNull(textStringBuilder2.getNullText());
      assertFalse(textStringBuilder2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(6, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(6, textStringBuilder0.size());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.insert(5, 'G');
      assertNotNull(textStringBuilder1);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(7, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(14, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(7, textStringBuilder0.size());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(7, textStringBuilder1.size());
      assertEquals(14, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(7, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder1.isReallocated());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(6070);
      assertNotNull(textStringBuilder0);
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(6070, textStringBuilder0.capacity());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendFixedWidthPadLeft((Object) "S5INy", 499, ' ');
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(499, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(499, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(6070, textStringBuilder0.capacity());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(6070, textStringBuilder1.capacity());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(499, textStringBuilder1.length());
      assertEquals(499, textStringBuilder1.size());
      
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      assertNotNull(textStringBuilder_TextStringBuilderTokenizer0);
      assertEquals(499, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(499, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(6070, textStringBuilder0.capacity());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getDelimiterMatcher();
      assertNotNull(stringMatcher0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertEquals(499, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(499, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(6070, textStringBuilder0.capacity());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertEquals(1, stringMatcher0.size());
      
      int int0 = textStringBuilder0.indexOf(stringMatcher0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertEquals(499, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(499, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(6070, textStringBuilder0.capacity());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertEquals(1, stringMatcher0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      
      ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BEFORE_BE;
      assertEquals(ThaiBuddhistEra.BEFORE_BE, thaiBuddhistEra0);
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append((Object) thaiBuddhistEra0);
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(86, textStringBuilder0.capacity());
      assertEquals(43, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(43, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(43, textStringBuilder1.size());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(86, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(43, textStringBuilder1.length());
      assertTrue(textStringBuilder1.isReallocated());
      
      int int0 = textStringBuilder1.indexOf("", 39);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(86, textStringBuilder0.capacity());
      assertEquals(43, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(43, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(43, textStringBuilder1.size());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(86, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(43, textStringBuilder1.length());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(39, int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln(477);
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(4, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(4, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder1.isReallocated());
      assertEquals(4, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(4, textStringBuilder1.length());
      assertEquals(32, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNullText());
      
      Object[] objectArray0 = new Object[2];
      TextStringBuilder textStringBuilder2 = textStringBuilder1.appendWithSeparators(objectArray0, "}K3+JzxGF[vR:");
      assertNotNull(textStringBuilder2);
      assertEquals(2, objectArray0.length);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertSame(textStringBuilder1, textStringBuilder2);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals(17, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(17, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(17, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(32, textStringBuilder1.capacity());
      assertEquals(17, textStringBuilder1.size());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder2.isNotEmpty());
      assertNull(textStringBuilder2.getNullText());
      assertEquals(17, textStringBuilder2.length());
      assertFalse(textStringBuilder2.isReallocated());
      assertEquals(17, textStringBuilder2.size());
      assertEquals(32, textStringBuilder2.capacity());
      assertFalse(textStringBuilder2.isEmpty());
      assertNull(textStringBuilder2.getNewLineText());
      
      int int0 = textStringBuilder0.indexOf("}K3+JzxGF[vR:");
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals(17, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(17, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      
      int int0 = textStringBuilder0.indexOf((String) null);
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isEmpty());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendSeparator('@', (int) '@');
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(1, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals(1, textStringBuilder0.size());
      assertEquals(32, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(1, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(1, textStringBuilder1.size());
      
      int int0 = textStringBuilder0.indexOf('@', (-105));
      assertSame(textStringBuilder0, textStringBuilder1);
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(1, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals(1, textStringBuilder0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("Error reading class file of ");
      assertNotNull(stringBuilder0);
      assertEquals("Error reading class file of ", stringBuilder0.toString());
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(stringBuilder0);
      assertNotNull(textStringBuilder0);
      assertEquals("Error reading class file of ", stringBuilder0.toString());
      assertEquals(28, textStringBuilder0.size());
      assertEquals(28, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(60, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      
      int int0 = textStringBuilder0.indexOf('o');
      assertEquals("Error reading class file of ", stringBuilder0.toString());
      assertEquals(28, textStringBuilder0.size());
      assertEquals(28, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(60, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(1481);
      assertNotNull(textStringBuilder0);
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(1481, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      
      char[] charArray0 = textStringBuilder0.getBuffer();
      assertNotNull(charArray0);
      assertEquals(1481, charArray0.length);
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(1481, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.ensureCapacity((-1));
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertEquals(0, textStringBuilder1.size());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(0, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(0, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      char[] charArray0 = new char[2];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(2, textStringBuilder0.size());
      assertEquals(2, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(2, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isEmpty());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln(charArray0);
      assertNotNull(textStringBuilder1);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(5, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(5, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(8, textStringBuilder0.capacity());
      assertEquals(8, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isReallocated());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(5, textStringBuilder1.length());
      assertEquals(5, textStringBuilder1.size());
      assertTrue(textStringBuilder1.isNotEmpty());
      
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      assertNotNull(textStringBuilder_TextStringBuilderTokenizer0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(5, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(5, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(8, textStringBuilder0.capacity());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getDelimiterMatcher();
      assertNotNull(stringMatcher0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertEquals(5, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(5, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(8, textStringBuilder0.capacity());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertEquals(1, stringMatcher0.size());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder1.deleteFirst(stringMatcher0);
      assertNotNull(textStringBuilder2);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder2);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(4, textStringBuilder0.length());
      assertEquals(4, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(8, textStringBuilder0.capacity());
      assertEquals(8, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isReallocated());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(4, textStringBuilder1.length());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(4, textStringBuilder1.size());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertEquals(1, stringMatcher0.size());
      assertEquals(8, textStringBuilder2.capacity());
      assertTrue(textStringBuilder2.isReallocated());
      assertNull(textStringBuilder2.getNullText());
      assertFalse(textStringBuilder2.isEmpty());
      assertNull(textStringBuilder2.getNewLineText());
      assertEquals(4, textStringBuilder2.length());
      assertTrue(textStringBuilder2.isNotEmpty());
      assertEquals(4, textStringBuilder2.size());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      assertNotNull(textStringBuilder_TextStringBuilderTokenizer0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getIgnoredMatcher();
      assertNotNull(stringMatcher0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertEquals(0, stringMatcher0.size());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.deleteFirst(stringMatcher0);
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertEquals(0, stringMatcher0.size());
      assertEquals(0, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(0, textStringBuilder1.size());
      assertEquals(0, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isReallocated());
      assertTrue(textStringBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("*0~h6Yp7hS+:z9TOR");
      assertNotNull(textStringBuilder0);
      assertEquals(49, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(17, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(17, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.deleteFirst((String) null);
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(49, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(17, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(17, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(17, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(49, textStringBuilder1.capacity());
      assertEquals(17, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertTrue(textStringBuilder1.isNotEmpty());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.size());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.deleteFirst("");
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(0, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isReallocated());
      assertTrue(textStringBuilder1.isEmpty());
      assertEquals(0, textStringBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      char[] charArray0 = new char[9];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(9, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(9, textStringBuilder0.length());
      assertEquals(9, textStringBuilder0.capacity());
      
      StringWriter stringWriter0 = new StringWriter(500);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('s');
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("s", stringWriter0.toString());
      assertEquals("s", stringWriter1.toString());
      
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) textStringBuilder0);
      assertNotNull(stringWriter2);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(9, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(9, textStringBuilder0.length());
      assertEquals(9, textStringBuilder0.capacity());
      assertEquals("s\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringWriter0.toString());
      assertEquals("s\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringWriter1.toString());
      assertEquals("s\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringWriter2.toString());
      
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      assertNotNull(stringBuffer0);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter2);
      assertEquals("s\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringWriter0.toString());
      assertEquals("s\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringWriter1.toString());
      assertEquals("s\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringBuffer0.toString());
      assertEquals(10, stringBuffer0.length());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.set(stringBuffer0);
      assertNotNull(textStringBuilder1);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter2);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(10, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(20, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(10, textStringBuilder0.length());
      assertEquals("s\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringWriter0.toString());
      assertEquals("s\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringWriter1.toString());
      assertEquals("s\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringBuffer0.toString());
      assertEquals(10, stringBuffer0.length());
      assertFalse(textStringBuilder1.isEmpty());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(10, textStringBuilder1.length());
      assertEquals(20, textStringBuilder1.capacity());
      assertEquals(10, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNewLineText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNullText());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder1.deleteFirst('A');
      assertNotNull(textStringBuilder2);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter2);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertSame(textStringBuilder1, textStringBuilder2);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(10, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(20, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(10, textStringBuilder0.length());
      assertEquals("s\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringWriter0.toString());
      assertEquals("s\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringWriter1.toString());
      assertEquals("s\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringBuffer0.toString());
      assertEquals(10, stringBuffer0.length());
      assertFalse(textStringBuilder1.isEmpty());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(10, textStringBuilder1.length());
      assertEquals(20, textStringBuilder1.capacity());
      assertEquals(10, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNewLineText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(20, textStringBuilder2.capacity());
      assertEquals(10, textStringBuilder2.size());
      assertTrue(textStringBuilder2.isReallocated());
      assertEquals(10, textStringBuilder2.length());
      assertNull(textStringBuilder2.getNullText());
      assertNull(textStringBuilder2.getNewLineText());
      assertTrue(textStringBuilder2.isNotEmpty());
      assertFalse(textStringBuilder2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isNotEmpty());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.deleteFirst('M');
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(0, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(0, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(0, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertTrue(textStringBuilder1.isEmpty());
      assertEquals(0, textStringBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, textStringBuilder0.length());
      assertEquals(6, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(6, textStringBuilder0.size());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln(4);
      assertNotNull(textStringBuilder1);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(8, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(14, textStringBuilder0.capacity());
      assertEquals(8, textStringBuilder0.size());
      assertEquals(8, textStringBuilder1.size());
      assertEquals(14, textStringBuilder1.capacity());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(8, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isEmpty());
      assertTrue(textStringBuilder1.isReallocated());
      assertTrue(textStringBuilder1.isNotEmpty());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder1.deleteCharAt(4);
      assertNotNull(textStringBuilder2);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder2);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertEquals(7, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(14, textStringBuilder0.capacity());
      assertEquals(7, textStringBuilder0.size());
      assertEquals(7, textStringBuilder1.size());
      assertEquals(14, textStringBuilder1.capacity());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(7, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isEmpty());
      assertTrue(textStringBuilder1.isReallocated());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder2.getNullText());
      assertNull(textStringBuilder2.getNewLineText());
      assertTrue(textStringBuilder2.isReallocated());
      assertEquals(7, textStringBuilder2.length());
      assertFalse(textStringBuilder2.isEmpty());
      assertEquals(7, textStringBuilder2.size());
      assertTrue(textStringBuilder2.isNotEmpty());
      assertEquals(14, textStringBuilder2.capacity());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(6, textStringBuilder0.capacity());
      assertEquals(6, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(6, textStringBuilder0.size());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.deleteCharAt(4);
      assertNotNull(textStringBuilder1);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(6, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(5, textStringBuilder0.length());
      assertEquals(5, textStringBuilder0.size());
      assertEquals(5, textStringBuilder1.size());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(6, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(5, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNullText());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      char[] charArray0 = new char[3];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(3, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(3, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(3, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isNotEmpty());
      
      StringWriter stringWriter0 = new StringWriter(2);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('=');
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("=", stringWriter0.toString());
      assertEquals("=", stringWriter1.toString());
      
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) textStringBuilder0);
      assertNotNull(stringWriter2);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(3, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(3, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(3, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals("=\u0000\u0000\u0000", stringWriter0.toString());
      assertEquals("=\u0000\u0000\u0000", stringWriter1.toString());
      assertEquals("=\u0000\u0000\u0000", stringWriter2.toString());
      
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(3, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(3, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(3, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals("=\u0000\u0000\u0000", stringWriter0.toString());
      assertEquals("=\u0000\u0000\u0000", stringWriter1.toString());
      assertEquals("=\u0000\u0000\u0000", stringWriter2.toString());
      assertEquals("=\u0000\u0000\u0000", stringBuffer0.toString());
      assertEquals(4, stringBuffer0.length());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.set(stringBuffer0);
      assertNotNull(textStringBuilder1);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(4, textStringBuilder0.length());
      assertEquals(8, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(4, textStringBuilder0.size());
      assertEquals("=\u0000\u0000\u0000", stringWriter0.toString());
      assertEquals("=\u0000\u0000\u0000", stringWriter1.toString());
      assertEquals("=\u0000\u0000\u0000", stringWriter2.toString());
      assertEquals("=\u0000\u0000\u0000", stringBuffer0.toString());
      assertEquals(4, stringBuffer0.length());
      assertTrue(textStringBuilder1.isReallocated());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(8, textStringBuilder1.capacity());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(4, textStringBuilder1.length());
      assertEquals(4, textStringBuilder1.size());
      
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder1.new TextStringBuilderTokenizer();
      assertNotNull(textStringBuilder_TextStringBuilderTokenizer0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(4, textStringBuilder0.length());
      assertEquals(8, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(4, textStringBuilder0.size());
      assertEquals("=\u0000\u0000\u0000", stringWriter0.toString());
      assertEquals("=\u0000\u0000\u0000", stringWriter1.toString());
      assertEquals("=\u0000\u0000\u0000", stringWriter2.toString());
      assertEquals("=\u0000\u0000\u0000", stringBuffer0.toString());
      assertEquals(4, stringBuffer0.length());
      assertTrue(textStringBuilder1.isReallocated());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(8, textStringBuilder1.capacity());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(4, textStringBuilder1.length());
      assertEquals(4, textStringBuilder1.size());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getQuoteMatcher();
      assertNotNull(stringMatcher0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(4, textStringBuilder0.length());
      assertEquals(8, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(4, textStringBuilder0.size());
      assertEquals("=\u0000\u0000\u0000", stringWriter0.toString());
      assertEquals("=\u0000\u0000\u0000", stringWriter1.toString());
      assertEquals("=\u0000\u0000\u0000", stringWriter2.toString());
      assertEquals("=\u0000\u0000\u0000", stringBuffer0.toString());
      assertEquals(4, stringBuffer0.length());
      assertTrue(textStringBuilder1.isReallocated());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(8, textStringBuilder1.capacity());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(4, textStringBuilder1.length());
      assertEquals(4, textStringBuilder1.size());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertEquals(0, stringMatcher0.size());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder1.deleteAll(stringMatcher0);
      assertNotNull(textStringBuilder2);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertSame(textStringBuilder1, textStringBuilder2);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(4, textStringBuilder0.length());
      assertEquals(8, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(4, textStringBuilder0.size());
      assertEquals("=\u0000\u0000\u0000", stringWriter0.toString());
      assertEquals("=\u0000\u0000\u0000", stringWriter1.toString());
      assertEquals("=\u0000\u0000\u0000", stringWriter2.toString());
      assertEquals("=\u0000\u0000\u0000", stringBuffer0.toString());
      assertEquals(4, stringBuffer0.length());
      assertTrue(textStringBuilder1.isReallocated());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(8, textStringBuilder1.capacity());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(4, textStringBuilder1.length());
      assertEquals(4, textStringBuilder1.size());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertEquals(0, stringMatcher0.size());
      assertTrue(textStringBuilder2.isNotEmpty());
      assertEquals(4, textStringBuilder2.size());
      assertNull(textStringBuilder2.getNewLineText());
      assertEquals(4, textStringBuilder2.length());
      assertNull(textStringBuilder2.getNullText());
      assertFalse(textStringBuilder2.isEmpty());
      assertEquals(8, textStringBuilder2.capacity());
      assertTrue(textStringBuilder2.isReallocated());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isEmpty());
      
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      assertNotNull(textStringBuilder_TextStringBuilderTokenizer0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getIgnoredMatcher();
      assertNotNull(stringMatcher0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, stringMatcher0.size());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.deleteAll(stringMatcher0);
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, stringMatcher0.size());
      assertEquals(0, textStringBuilder1.size());
      assertTrue(textStringBuilder1.isEmpty());
      assertFalse(textStringBuilder1.isReallocated());
      assertEquals(0, textStringBuilder1.length());
      assertEquals(0, textStringBuilder1.capacity());
      assertNull(textStringBuilder1.getNewLineText());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNullText());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isEmpty());
      
      ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BEFORE_BE;
      assertEquals(ThaiBuddhistEra.BEFORE_BE, thaiBuddhistEra0);
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append((Object) thaiBuddhistEra0);
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(86, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(43, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(43, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(86, textStringBuilder1.capacity());
      assertEquals(43, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isEmpty());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(43, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder1.isNotEmpty());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder0.deleteAll("lEU<");
      assertNotNull(textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertEquals(86, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(43, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(43, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder2.getNewLineText());
      assertFalse(textStringBuilder2.isEmpty());
      assertTrue(textStringBuilder2.isNotEmpty());
      assertEquals(86, textStringBuilder2.capacity());
      assertEquals(43, textStringBuilder2.length());
      assertTrue(textStringBuilder2.isReallocated());
      assertEquals(43, textStringBuilder2.size());
      assertNull(textStringBuilder2.getNullText());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isEmpty());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.deleteAll("");
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertEquals(0, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(0, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder1.isEmpty());
      assertEquals(0, textStringBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.deleteAll('^');
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertEquals(0, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isEmpty());
      assertFalse(textStringBuilder1.isReallocated());
      assertEquals(0, textStringBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      assertNotNull(textStringBuilder0);
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendFixedWidthPadLeft(0, 64, 'i');
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(64, textStringBuilder0.length());
      assertEquals(128, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(64, textStringBuilder0.size());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(128, textStringBuilder1.capacity());
      assertNull(textStringBuilder1.getNewLineText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(64, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(64, textStringBuilder1.size());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder0.delete(0, 74);
      assertNotNull(textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(128, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder2.getNullText());
      assertEquals(0, textStringBuilder2.length());
      assertFalse(textStringBuilder2.isNotEmpty());
      assertEquals(128, textStringBuilder2.capacity());
      assertNull(textStringBuilder2.getNewLineText());
      assertTrue(textStringBuilder2.isReallocated());
      assertTrue(textStringBuilder2.isEmpty());
      assertEquals(0, textStringBuilder2.size());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(6, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(6, textStringBuilder0.length());
      assertEquals(6, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNullText());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendFixedWidthPadRight((-1392), 3206, ' ');
      assertNotNull(textStringBuilder1);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(3212, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(3212, textStringBuilder0.size());
      assertEquals(6424, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(6424, textStringBuilder1.capacity());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(3212, textStringBuilder1.size());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(3212, textStringBuilder1.length());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder0.clear();
      assertNotNull(textStringBuilder2);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(6424, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder2.isEmpty());
      assertNull(textStringBuilder2.getNewLineText());
      assertFalse(textStringBuilder2.isNotEmpty());
      assertEquals(6424, textStringBuilder2.capacity());
      assertNull(textStringBuilder2.getNullText());
      assertEquals(0, textStringBuilder2.size());
      assertTrue(textStringBuilder2.isReallocated());
      assertEquals(0, textStringBuilder2.length());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isNotEmpty());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.clear();
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(0, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(0, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(0, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertTrue(textStringBuilder1.isEmpty());
      assertEquals(0, textStringBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(6, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(6, textStringBuilder0.size());
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) textStringBuilder0;
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      assertNotNull(textStringBuilder_TextStringBuilderTokenizer0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(6, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(6, textStringBuilder0.size());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      
      objectArray0[1] = (Object) textStringBuilder_TextStringBuilderTokenizer0;
      objectArray0[2] = (Object) textStringBuilder0;
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendAll(objectArray0);
      assertNotNull(textStringBuilder1);
      assertEquals(6, charArray0.length);
      assertEquals(3, objectArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(182, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(182, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(182, textStringBuilder0.size());
      assertEquals(182, textStringBuilder1.size());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(182, textStringBuilder1.capacity());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(182, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      
      char char0 = textStringBuilder0.charAtDelete(102);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertEquals(182, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(181, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(181, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendSeparator('.', 17);
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(1, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(1, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(32, textStringBuilder1.capacity());
      assertNull(textStringBuilder1.getNullText());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(1, textStringBuilder1.size());
      assertEquals(1, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertTrue(textStringBuilder1.isNotEmpty());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder0.appendln("org.apache.commons.text.TextStringBuilder", 17, 17);
      assertNotNull(textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(19, textStringBuilder0.length());
      assertEquals(19, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder2.getNewLineText());
      assertNull(textStringBuilder2.getNullText());
      assertFalse(textStringBuilder2.isEmpty());
      assertEquals(32, textStringBuilder2.capacity());
      assertEquals(19, textStringBuilder2.length());
      assertFalse(textStringBuilder2.isReallocated());
      assertTrue(textStringBuilder2.isNotEmpty());
      assertEquals(19, textStringBuilder2.size());
      
      char char0 = textStringBuilder0.charAt(17);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(19, textStringBuilder0.length());
      assertEquals(19, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals('g', char0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      
      int int0 = textStringBuilder0.capacity();
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(6, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(6, textStringBuilder0.length());
      assertEquals(6, textStringBuilder0.size());
      
      String string0 = textStringBuilder0.build();
      assertNotNull(string0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(6, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(6, textStringBuilder0.length());
      assertEquals(6, textStringBuilder0.size());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isEmpty());
      
      char[] charArray0 = new char[11];
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendFixedWidthPadLeft(0, 64, 'i');
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(64, textStringBuilder0.length());
      assertEquals(128, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(64, textStringBuilder0.size());
      assertEquals(128, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isEmpty());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(64, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(64, textStringBuilder1.size());
      assertTrue(textStringBuilder1.isReallocated());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder0.appendln(charArray0, 0, 0);
      assertNotNull(textStringBuilder2);
      assertEquals(11, charArray0.length);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertEquals(65, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(128, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(65, textStringBuilder0.size());
      assertTrue(textStringBuilder2.isReallocated());
      assertFalse(textStringBuilder2.isEmpty());
      assertNull(textStringBuilder2.getNullText());
      assertEquals(65, textStringBuilder2.length());
      assertNull(textStringBuilder2.getNewLineText());
      assertEquals(65, textStringBuilder2.size());
      assertEquals(128, textStringBuilder2.capacity());
      assertTrue(textStringBuilder2.isNotEmpty());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      assertNotNull(textStringBuilder0);
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isEmpty());
      
      char[] charArray0 = new char[11];
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln(charArray0, 0, 0);
      assertNotNull(textStringBuilder1);
      assertEquals(11, charArray0.length);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals(1, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(1, textStringBuilder0.size());
      assertEquals(32, textStringBuilder1.capacity());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(1, textStringBuilder1.size());
      assertFalse(textStringBuilder1.isEmpty());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(1, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isReallocated());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      char[] charArray0 = new char[3];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(3, textStringBuilder0.length());
      assertEquals(3, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln(false);
      assertNotNull(textStringBuilder1);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(9, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(16, textStringBuilder0.capacity());
      assertEquals(9, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(16, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isReallocated());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(9, textStringBuilder1.length());
      assertEquals(9, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNullText());
      assertNull(textStringBuilder1.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((-973));
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln(textStringBuilder0, 0, 0);
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(1, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(1, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(1, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(1, textStringBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendPadding(108, '\"');
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(216, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(108, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(108, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(108, textStringBuilder1.size());
      assertEquals(216, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(108, textStringBuilder1.length());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder0.appendln(textStringBuilder0, 0, 32);
      assertNotNull(textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertEquals(216, textStringBuilder0.capacity());
      assertEquals(141, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(141, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder2.isNotEmpty());
      assertNull(textStringBuilder2.getNewLineText());
      assertNull(textStringBuilder2.getNullText());
      assertTrue(textStringBuilder2.isReallocated());
      assertEquals(141, textStringBuilder2.size());
      assertFalse(textStringBuilder2.isEmpty());
      assertEquals(141, textStringBuilder2.length());
      assertEquals(216, textStringBuilder2.capacity());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isEmpty());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln((StringBuilder) null, Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(1, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(1, textStringBuilder0.size());
      assertEquals(32, textStringBuilder1.capacity());
      assertEquals(1, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(1, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertFalse(textStringBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      char[] charArray0 = new char[1];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(1, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(1, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(1, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln((StringBuilder) null, 32, 115);
      assertNotNull(textStringBuilder1);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(2, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(2, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(4, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder1.getNewLineText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(2, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(2, textStringBuilder1.size());
      assertEquals(4, textStringBuilder1.capacity());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder1.isReallocated());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isEmpty());
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln(stringBuilder0);
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(2, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(1, textStringBuilder0.size());
      assertEquals(1, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals("", stringBuilder0.toString());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(1, textStringBuilder1.length());
      assertEquals(1, textStringBuilder1.size());
      assertTrue(textStringBuilder1.isReallocated());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(2, textStringBuilder1.capacity());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      char[] charArray0 = new char[2];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(2, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(2, textStringBuilder0.capacity());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln((StringBuffer) null, 115, (-636));
      assertNotNull(textStringBuilder1);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(3, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(3, textStringBuilder0.length());
      assertEquals(6, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder1.isReallocated());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(6, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(3, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(3, textStringBuilder1.size());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder0.deleteFirst("7GvKJoN>w%hMS");
      assertNotNull(textStringBuilder2);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertEquals(3, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(3, textStringBuilder0.length());
      assertEquals(6, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder2.getNewLineText());
      assertEquals(3, textStringBuilder2.length());
      assertEquals(6, textStringBuilder2.capacity());
      assertFalse(textStringBuilder2.isEmpty());
      assertTrue(textStringBuilder2.isReallocated());
      assertNull(textStringBuilder2.getNullText());
      assertTrue(textStringBuilder2.isNotEmpty());
      assertEquals(3, textStringBuilder2.size());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("*0~h6Yp7hWS+:z9TOR");
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(50, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(18, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(18, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln((StringBuffer) null, 112, 97);
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(50, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(19, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(19, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(50, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isReallocated());
      assertEquals(19, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNewLineText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(19, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNullText());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      
      StringBuffer stringBuffer0 = new StringBuffer("UOYOhTu E[6H`F;u~P ");
      assertNotNull(stringBuffer0);
      assertEquals("UOYOhTu E[6H`F;u~P ", stringBuffer0.toString());
      assertEquals(19, stringBuffer0.length());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln(stringBuffer0);
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(38, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(20, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(20, textStringBuilder0.size());
      assertEquals("UOYOhTu E[6H`F;u~P ", stringBuffer0.toString());
      assertEquals(19, stringBuffer0.length());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(20, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(20, textStringBuilder1.size());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(38, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      
      Object[] objectArray0 = new Object[9];
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln("", objectArray0);
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertEquals(9, objectArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(1, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(1, textStringBuilder0.size());
      assertEquals(2, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(1, textStringBuilder1.size());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(1, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(2, textStringBuilder1.capacity());
      assertNull(textStringBuilder1.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      char[] charArray0 = new char[9];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, textStringBuilder0.size());
      assertEquals(9, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(9, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      
      ChronoUnit chronoUnit0 = ChronoUnit.MILLENNIA;
      assertEquals(ChronoUnit.MILLENNIA, chronoUnit0);
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln((Object) chronoUnit0);
      assertNotNull(textStringBuilder1);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(98, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(50, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(50, textStringBuilder0.length());
      assertEquals(98, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(50, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNewLineText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(50, textStringBuilder1.size());
      assertTrue(textStringBuilder1.isReallocated());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln("org.apache.commons.io.filefilter.WildcardFileFilter");
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(102, textStringBuilder0.capacity());
      assertEquals(52, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(52, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(52, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(102, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isEmpty());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(52, textStringBuilder1.size());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder0.appendln((-4007.2705F));
      assertNotNull(textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertEquals(102, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(63, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(63, textStringBuilder0.size());
      assertEquals(63, textStringBuilder2.size());
      assertEquals(102, textStringBuilder2.capacity());
      assertTrue(textStringBuilder2.isReallocated());
      assertTrue(textStringBuilder2.isNotEmpty());
      assertEquals(63, textStringBuilder2.length());
      assertNull(textStringBuilder2.getNewLineText());
      assertNull(textStringBuilder2.getNullText());
      assertFalse(textStringBuilder2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      char[] charArray0 = new char[3];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(3, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(3, textStringBuilder0.length());
      assertEquals(3, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isNotEmpty());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln(33.87426391199446);
      assertNotNull(textStringBuilder1);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(40, textStringBuilder0.capacity());
      assertEquals(21, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(21, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(21, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNewLineText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(21, textStringBuilder1.size());
      assertEquals(40, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder1.isReallocated());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      char[] charArray0 = new char[5];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(5, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(5, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(5, textStringBuilder0.capacity());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln('I');
      assertNotNull(textStringBuilder1);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(12, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(7, textStringBuilder0.length());
      assertEquals(7, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(7, textStringBuilder1.length());
      assertEquals(7, textStringBuilder1.size());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(12, textStringBuilder1.capacity());
      assertNull(textStringBuilder1.getNewLineText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder1.isReallocated());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.capacity());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      
      Object[] objectArray0 = new Object[1];
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendWithSeparators(objectArray0, "");
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertEquals(1, objectArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.capacity());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(0, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(0, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isReallocated());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertTrue(textStringBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      assertNotNull(textStringBuilder0);
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.minimizeCapacity();
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertTrue(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNullText());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(0, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertTrue(textStringBuilder1.isEmpty());
      assertEquals(0, textStringBuilder1.size());
      assertTrue(textStringBuilder1.isReallocated());
      
      Class<Object> class0 = Object.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      Iterator<Object> iterator0 = serviceLoader0.iterator();
      assertNotNull(iterator0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder1.appendWithSeparators(iterator0, "org.apache.commons.io.filefilter.SizeFileFilter");
      assertNotNull(textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertSame(textStringBuilder1, textStringBuilder2);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertTrue(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNullText());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(0, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertTrue(textStringBuilder1.isEmpty());
      assertEquals(0, textStringBuilder1.size());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertNull(textStringBuilder2.getNullText());
      assertEquals(0, textStringBuilder2.length());
      assertTrue(textStringBuilder2.isReallocated());
      assertEquals(0, textStringBuilder2.size());
      assertFalse(textStringBuilder2.isNotEmpty());
      assertTrue(textStringBuilder2.isEmpty());
      assertEquals(0, textStringBuilder2.capacity());
      assertNull(textStringBuilder2.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.capacity());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isEmpty());
      
      LinkedList<StringBuilder> linkedList0 = new LinkedList<StringBuilder>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendWithSeparators((Iterable<?>) linkedList0, "#.l!3cummn~");
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.capacity());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNullText());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(0, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isReallocated());
      assertEquals(0, textStringBuilder1.length());
      assertTrue(textStringBuilder1.isEmpty());
      assertEquals(0, textStringBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      assertNotNull(textStringBuilder_TextStringBuilderReader0);
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertTrue(textStringBuilder_TextStringBuilderReader0.markSupported());
      assertFalse(textStringBuilder_TextStringBuilderReader0.ready());
      
      int int0 = textStringBuilder0.readFrom((Reader) textStringBuilder_TextStringBuilderReader0, 3440);
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(6880, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertTrue(textStringBuilder_TextStringBuilderReader0.markSupported());
      assertFalse(textStringBuilder_TextStringBuilderReader0.ready());
      assertEquals((-1), int0);
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendSeparator("#.l!3cummn~", 600);
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(6880, textStringBuilder0.capacity());
      assertEquals(11, textStringBuilder0.size());
      assertEquals(11, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(6880, textStringBuilder1.capacity());
      assertNull(textStringBuilder1.getNewLineText());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(11, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(11, textStringBuilder1.length());
      assertTrue(textStringBuilder1.isReallocated());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      char[] charArray0 = new char[2];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(2, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(2, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(2, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isNotEmpty());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln(charArray0);
      assertNotNull(textStringBuilder1);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(8, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(5, textStringBuilder0.size());
      assertEquals(5, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(5, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNullText());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(5, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(8, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertTrue(textStringBuilder1.isReallocated());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder1.appendSeparator((String) null);
      assertNotNull(textStringBuilder2);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertSame(textStringBuilder1, textStringBuilder2);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(8, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(5, textStringBuilder0.size());
      assertEquals(5, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(5, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNullText());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(5, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(8, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertTrue(textStringBuilder1.isReallocated());
      assertTrue(textStringBuilder2.isReallocated());
      assertEquals(8, textStringBuilder2.capacity());
      assertTrue(textStringBuilder2.isNotEmpty());
      assertNull(textStringBuilder2.getNullText());
      assertEquals(5, textStringBuilder2.size());
      assertFalse(textStringBuilder2.isEmpty());
      assertEquals(5, textStringBuilder2.length());
      assertNull(textStringBuilder2.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      char[] charArray0 = new char[2];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(2, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(2, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(2, textStringBuilder0.size());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendSeparator((String) null);
      assertNotNull(textStringBuilder1);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(2, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(2, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(2, textStringBuilder0.size());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(2, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(2, textStringBuilder1.size());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(2, textStringBuilder1.capacity());
      assertNull(textStringBuilder1.getNullText());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.capacity());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isNotEmpty());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendSeparator('Y', (-1156));
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.capacity());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNullText());
      assertNull(textStringBuilder1.getNewLineText());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertEquals(0, textStringBuilder1.length());
      assertEquals(0, textStringBuilder1.size());
      assertTrue(textStringBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.size());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendSeparator('9');
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder1.capacity());
      assertNull(textStringBuilder1.getNewLineText());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(0, textStringBuilder1.size());
      assertTrue(textStringBuilder1.isEmpty());
      assertFalse(textStringBuilder1.isReallocated());
      assertEquals(0, textStringBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.minimizeCapacity();
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(0, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isEmpty());
      assertEquals(0, textStringBuilder1.size());
      assertEquals(0, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertTrue(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNullText());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder1.appendPadding((-197), 'L');
      assertNotNull(textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder2);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(0, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isEmpty());
      assertEquals(0, textStringBuilder1.size());
      assertEquals(0, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertTrue(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNullText());
      assertNull(textStringBuilder2.getNewLineText());
      assertNull(textStringBuilder2.getNullText());
      assertTrue(textStringBuilder2.isEmpty());
      assertEquals(0, textStringBuilder2.size());
      assertTrue(textStringBuilder2.isReallocated());
      assertFalse(textStringBuilder2.isNotEmpty());
      assertEquals(0, textStringBuilder2.length());
      assertEquals(0, textStringBuilder2.capacity());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      
      ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BEFORE_BE;
      assertEquals(ThaiBuddhistEra.BEFORE_BE, thaiBuddhistEra0);
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append((Object) thaiBuddhistEra0);
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(43, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(43, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(86, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder1.getNewLineText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(43, textStringBuilder1.length());
      assertTrue(textStringBuilder1.isReallocated());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(43, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(86, textStringBuilder1.capacity());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder0.appendNull();
      assertNotNull(textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(43, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(43, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(86, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder2.getNewLineText());
      assertTrue(textStringBuilder2.isNotEmpty());
      assertEquals(86, textStringBuilder2.capacity());
      assertEquals(43, textStringBuilder2.length());
      assertFalse(textStringBuilder2.isEmpty());
      assertTrue(textStringBuilder2.isReallocated());
      assertEquals(43, textStringBuilder2.size());
      assertNull(textStringBuilder2.getNullText());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("aQ3,e<kis<;'R{M,0");
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(17, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(17, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(49, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendNull();
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(17, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(17, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(49, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(49, textStringBuilder1.capacity());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(17, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isReallocated());
      assertEquals(17, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNewLineText());
      assertTrue(textStringBuilder1.isNotEmpty());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.capacity());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendNull();
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.capacity());
      assertEquals(0, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNullText());
      assertFalse(textStringBuilder1.isReallocated());
      assertEquals(0, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertTrue(textStringBuilder1.isEmpty());
      assertEquals(0, textStringBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      
      TextStringBuilder.TextStringBuilderWriter textStringBuilder_TextStringBuilderWriter0 = textStringBuilder0.new TextStringBuilderWriter();
      assertNotNull(textStringBuilder_TextStringBuilderWriter0);
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendFixedWidthPadRight((Object) textStringBuilder_TextStringBuilderWriter0, 0, 'Q');
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder1.size());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(32, textStringBuilder1.capacity());
      assertEquals(0, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isReallocated());
      assertTrue(textStringBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(6, textStringBuilder0.length());
      assertEquals(6, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isEmpty());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendFixedWidthPadRight((-1392), 3206, ' ');
      assertNotNull(textStringBuilder1);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(3212, textStringBuilder0.size());
      assertEquals(3212, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(6424, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(3212, textStringBuilder1.size());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(3212, textStringBuilder1.length());
      assertEquals(6424, textStringBuilder1.capacity());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertTrue(textStringBuilder1.isReallocated());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder1.appendSeparator(' ', (-1392));
      assertNotNull(textStringBuilder2);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder1, textStringBuilder2);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertEquals(3212, textStringBuilder0.size());
      assertEquals(3212, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(6424, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(3212, textStringBuilder1.size());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(3212, textStringBuilder1.length());
      assertEquals(6424, textStringBuilder1.capacity());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(3212, textStringBuilder2.size());
      assertEquals(3212, textStringBuilder2.length());
      assertTrue(textStringBuilder2.isReallocated());
      assertNull(textStringBuilder2.getNewLineText());
      assertTrue(textStringBuilder2.isNotEmpty());
      assertEquals(6424, textStringBuilder2.capacity());
      assertNull(textStringBuilder2.getNullText());
      assertFalse(textStringBuilder2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0, 0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendFixedWidthPadRight(0, 0, '-');
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(0, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder1.size());
      assertTrue(textStringBuilder1.isEmpty());
      assertFalse(textStringBuilder1.isReallocated());
      assertEquals(0, textStringBuilder1.length());
      assertEquals(0, textStringBuilder1.capacity());
      assertNull(textStringBuilder1.getNewLineText());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNullText());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendFixedWidthPadLeft(30, (-911), '`');
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNullText());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(0, textStringBuilder1.size());
      assertTrue(textStringBuilder1.isEmpty());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertEquals(0, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendAll((Object[]) null);
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder1.size());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(0, textStringBuilder1.capacity());
      assertNull(textStringBuilder1.getNewLineText());
      assertTrue(textStringBuilder1.isEmpty());
      assertFalse(textStringBuilder1.isReallocated());
      assertEquals(0, textStringBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      
      ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BEFORE_BE;
      assertEquals(ThaiBuddhistEra.BEFORE_BE, thaiBuddhistEra0);
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append((Object) thaiBuddhistEra0);
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(43, textStringBuilder0.size());
      assertEquals(86, textStringBuilder0.capacity());
      assertEquals(43, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder1.getNullText());
      assertNull(textStringBuilder1.getNewLineText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(43, textStringBuilder1.length());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(86, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(43, textStringBuilder1.size());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder1.appendAll((Iterator<?>) null);
      assertNotNull(textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder2);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(43, textStringBuilder0.size());
      assertEquals(86, textStringBuilder0.capacity());
      assertEquals(43, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder1.getNullText());
      assertNull(textStringBuilder1.getNewLineText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(43, textStringBuilder1.length());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(86, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(43, textStringBuilder1.size());
      assertFalse(textStringBuilder2.isEmpty());
      assertEquals(86, textStringBuilder2.capacity());
      assertEquals(43, textStringBuilder2.length());
      assertTrue(textStringBuilder2.isReallocated());
      assertTrue(textStringBuilder2.isNotEmpty());
      assertEquals(43, textStringBuilder2.size());
      assertNull(textStringBuilder2.getNewLineText());
      assertNull(textStringBuilder2.getNullText());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      assertNotNull(textStringBuilder_TextStringBuilderTokenizer0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendAll((Iterator<?>) textStringBuilder_TextStringBuilderTokenizer0);
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertEquals(32, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertEquals(0, textStringBuilder1.size());
      assertFalse(textStringBuilder1.isReallocated());
      assertEquals(0, textStringBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      
      Month month0 = Month.JUNE;
      Month month1 = Month.MAY;
      EnumSet<Month> enumSet0 = EnumSet.of(month0, month0, month1, month1, month0);
      assertNotNull(enumSet0);
      assertNotSame(month0, month1);
      assertNotSame(month1, month0);
      assertTrue(enumSet0.contains(month1));
      assertFalse(month0.equals((Object)month1));
      assertFalse(month1.equals((Object)month0));
      assertEquals(2, enumSet0.size());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendAll((Iterable<?>) enumSet0);
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertNotSame(month0, month1);
      assertNotSame(month1, month0);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertTrue(enumSet0.contains(month1));
      assertFalse(month0.equals((Object)month1));
      assertFalse(month1.equals((Object)month0));
      assertEquals(104, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(52, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(52, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(2, enumSet0.size());
      assertEquals(52, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNewLineText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(104, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isReallocated());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(52, textStringBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.capacity());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isEmpty());
      
      HashMap<Object, StringBuilder> hashMap0 = new HashMap<Object, StringBuilder>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Set<Object> set0 = hashMap0.keySet();
      assertNotNull(set0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendAll((Iterable<?>) set0);
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.capacity());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, textStringBuilder1.capacity());
      assertEquals(0, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isReallocated());
      assertTrue(textStringBuilder1.isEmpty());
      assertEquals(0, textStringBuilder1.size());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.capacity());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append(0.7);
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(6, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(3, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(3, textStringBuilder0.length());
      assertEquals(6, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isReallocated());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(3, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(3, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder0.append(charArray0);
      assertNotNull(textStringBuilder2);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertEquals(6, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(3, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(3, textStringBuilder0.length());
      assertEquals(6, textStringBuilder2.capacity());
      assertEquals(3, textStringBuilder2.length());
      assertFalse(textStringBuilder2.isEmpty());
      assertNull(textStringBuilder2.getNewLineText());
      assertNull(textStringBuilder2.getNullText());
      assertTrue(textStringBuilder2.isReallocated());
      assertTrue(textStringBuilder2.isNotEmpty());
      assertEquals(3, textStringBuilder2.size());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(6, textStringBuilder0.length());
      assertEquals(6, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(6, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append(textStringBuilder0);
      assertNotNull(textStringBuilder1);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(12, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(12, textStringBuilder0.length());
      assertEquals(24, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(12, textStringBuilder1.size());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(12, textStringBuilder1.length());
      assertEquals(24, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isReallocated());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendFixedWidthPadRight((Object) "w}W![i`B", 1493, ')');
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(2986, textStringBuilder0.capacity());
      assertEquals(1493, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(1493, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(1493, textStringBuilder1.size());
      assertEquals(1493, textStringBuilder1.length());
      assertEquals(2986, textStringBuilder1.capacity());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder1.isReallocated());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder1.append((CharBuffer) null, 9, (-2308));
      assertNotNull(textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder2);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(2986, textStringBuilder0.capacity());
      assertEquals(1493, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(1493, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(1493, textStringBuilder1.size());
      assertEquals(1493, textStringBuilder1.length());
      assertEquals(2986, textStringBuilder1.capacity());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(1493, textStringBuilder2.length());
      assertEquals(1493, textStringBuilder2.size());
      assertNull(textStringBuilder2.getNewLineText());
      assertNull(textStringBuilder2.getNullText());
      assertFalse(textStringBuilder2.isEmpty());
      assertTrue(textStringBuilder2.isReallocated());
      assertTrue(textStringBuilder2.isNotEmpty());
      assertEquals(2986, textStringBuilder2.capacity());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.capacity());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append((CharBuffer) null, (-1), (-1));
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.capacity());
      assertTrue(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(0, textStringBuilder1.length());
      assertEquals(0, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isReallocated());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertEquals(0, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNullText());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      char[] charArray0 = new char[22];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(22, charArray0.length);
      assertEquals(22, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(22, textStringBuilder0.size());
      assertEquals(22, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertEquals(22, charArray0.length);
      assertEquals(0, charBuffer0.position());
      assertEquals(22, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(22, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(22, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(22, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append(charBuffer0);
      assertNotNull(textStringBuilder1);
      assertEquals(22, charArray0.length);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(44, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(88, textStringBuilder0.capacity());
      assertEquals(44, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(0, charBuffer0.position());
      assertEquals(22, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(22, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(22, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(22, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(88, textStringBuilder1.capacity());
      assertEquals(44, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(44, textStringBuilder1.size());
      assertTrue(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertTrue(textStringBuilder1.isNotEmpty());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      
      char[] charArray0 = new char[7];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(7, charBuffer0.capacity());
      assertEquals(7, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(7, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertEquals(7, charBuffer0.limit());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append(charBuffer0);
      assertNotNull(textStringBuilder1);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals(7, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(7, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(7, charBuffer0.capacity());
      assertEquals(7, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(7, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertEquals(7, charBuffer0.limit());
      assertEquals(7, textStringBuilder1.length());
      assertEquals(32, textStringBuilder1.capacity());
      assertEquals(7, textStringBuilder1.size());
      assertFalse(textStringBuilder1.isEmpty());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder1.isNotEmpty());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append(charBuffer0);
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(0, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertEquals(0, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isReallocated());
      assertEquals(0, textStringBuilder1.length());
      assertTrue(textStringBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "&Q#T7KP{5'&lOJR~teTn]B;P{5'&lOJR~teTn]B;$P.&Q#T7KP{5'&lOJR~teTn]B;P{5'&lOJR~teTn]B;P{5'&lOJR~teTn]B;$");
      assertNotNull(stringBuilder0);
      assertEquals("&Q#T7KP{5'&lOJR~teTn]B;P{5'&lOJR~teTn]B;$P.&Q#T7KP{5'&lOJR~teTn]B;P{5'&lOJR~teTn]B;P{5'&lOJR~teTn]B;$", stringBuilder0.toString());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append(stringBuilder0, 0, 3);
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(6, textStringBuilder0.capacity());
      assertEquals(3, textStringBuilder0.size());
      assertEquals(3, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals("&Q#T7KP{5'&lOJR~teTn]B;P{5'&lOJR~teTn]B;$P.&Q#T7KP{5'&lOJR~teTn]B;P{5'&lOJR~teTn]B;P{5'&lOJR~teTn]B;$", stringBuilder0.toString());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(3, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNullText());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(3, textStringBuilder1.length());
      assertEquals(6, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isReallocated());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append((StringBuilder) null, 241, 241);
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertEquals(0, textStringBuilder1.size());
      assertFalse(textStringBuilder1.isReallocated());
      assertEquals(0, textStringBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "~Nu8Zk'N+r");
      assertNotNull(stringBuilder0);
      assertEquals("~Nu8Zk'N+r", stringBuilder0.toString());
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(6070);
      assertNotNull(textStringBuilder0);
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(6070, textStringBuilder0.capacity());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append(stringBuilder0);
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals("~Nu8Zk'N+r", stringBuilder0.toString());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(10, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(6070, textStringBuilder0.capacity());
      assertEquals(10, textStringBuilder0.size());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(6070, textStringBuilder1.capacity());
      assertEquals(10, textStringBuilder1.size());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(10, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isReallocated());
      assertTrue(textStringBuilder1.isNotEmpty());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isEmpty());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append((StringBuffer) null, (-3737), (-1954));
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(0, textStringBuilder1.length());
      assertEquals(32, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isReallocated());
      assertEquals(0, textStringBuilder1.size());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNullText());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("gej{KPnoZ!:c0l*");
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(15, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(15, textStringBuilder0.size());
      assertEquals(47, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isNotEmpty());
      
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      assertNotNull(textStringBuilder_TextStringBuilderTokenizer0);
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(15, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(15, textStringBuilder0.size());
      assertEquals(47, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendFixedWidthPadLeft((Object) textStringBuilder_TextStringBuilderTokenizer0, 2122, ' ');
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(2137, textStringBuilder0.size());
      assertEquals(4274, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(2137, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(2137, textStringBuilder1.size());
      assertEquals(4274, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isReallocated());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(2137, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      
      StringBuffer stringBuffer0 = new StringBuffer(textStringBuilder0);
      assertNotNull(stringBuffer0);
      assertEquals(2137, textStringBuilder0.size());
      assertEquals(4274, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(2137, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(2137, stringBuffer0.length());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder0.append(stringBuffer0);
      assertNotNull(textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertEquals(4274, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(4274, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(4274, textStringBuilder0.length());
      assertEquals(2137, stringBuffer0.length());
      assertEquals(4274, textStringBuilder2.length());
      assertEquals(4274, textStringBuilder2.size());
      assertNull(textStringBuilder2.getNewLineText());
      assertNull(textStringBuilder2.getNullText());
      assertFalse(textStringBuilder2.isEmpty());
      assertTrue(textStringBuilder2.isReallocated());
      assertEquals(4274, textStringBuilder2.capacity());
      assertTrue(textStringBuilder2.isNotEmpty());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append(stringBuffer0);
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertTrue(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNullText());
      assertFalse(textStringBuilder1.isReallocated());
      assertTrue(textStringBuilder1.isEmpty());
      assertEquals(0, textStringBuilder1.size());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertEquals(0, textStringBuilder1.capacity());
      assertNull(textStringBuilder1.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      
      ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BEFORE_BE;
      assertEquals(ThaiBuddhistEra.BEFORE_BE, thaiBuddhistEra0);
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append((Object) thaiBuddhistEra0);
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(43, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(43, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(86, textStringBuilder0.capacity());
      assertEquals(43, textStringBuilder1.size());
      assertEquals(43, textStringBuilder1.length());
      assertTrue(textStringBuilder1.isReallocated());
      assertFalse(textStringBuilder1.isEmpty());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(86, textStringBuilder1.capacity());
      assertNull(textStringBuilder1.getNullText());
      
      Object[] objectArray0 = new Object[0];
      TextStringBuilder textStringBuilder2 = textStringBuilder0.append("", objectArray0);
      assertNotNull(textStringBuilder2);
      assertEquals(0, objectArray0.length);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(43, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(43, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(86, textStringBuilder0.capacity());
      assertNull(textStringBuilder2.getNewLineText());
      assertFalse(textStringBuilder2.isEmpty());
      assertEquals(86, textStringBuilder2.capacity());
      assertEquals(43, textStringBuilder2.length());
      assertTrue(textStringBuilder2.isReallocated());
      assertEquals(43, textStringBuilder2.size());
      assertNull(textStringBuilder2.getNullText());
      assertTrue(textStringBuilder2.isNotEmpty());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isNotEmpty());
      
      Object[] objectArray0 = new Object[0];
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append("", objectArray0);
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertEquals(0, objectArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertEquals(0, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isEmpty());
      assertEquals(0, textStringBuilder1.size());
      assertEquals(0, textStringBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      
      ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BEFORE_BE;
      assertEquals(ThaiBuddhistEra.BEFORE_BE, thaiBuddhistEra0);
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append((Object) thaiBuddhistEra0);
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(43, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(86, textStringBuilder0.capacity());
      assertEquals(43, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(43, textStringBuilder1.length());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(43, textStringBuilder1.size());
      assertEquals(86, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNullText());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder1.append("");
      assertNotNull(textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder1, textStringBuilder2);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(43, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(86, textStringBuilder0.capacity());
      assertEquals(43, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(43, textStringBuilder1.length());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(43, textStringBuilder1.size());
      assertEquals(86, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNullText());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertTrue(textStringBuilder2.isNotEmpty());
      assertNull(textStringBuilder2.getNewLineText());
      assertEquals(43, textStringBuilder2.length());
      assertTrue(textStringBuilder2.isReallocated());
      assertFalse(textStringBuilder2.isEmpty());
      assertEquals(43, textStringBuilder2.size());
      assertNull(textStringBuilder2.getNullText());
      assertEquals(86, textStringBuilder2.capacity());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append("");
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNullText());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(32, textStringBuilder1.capacity());
      assertEquals(0, textStringBuilder1.size());
      assertEquals(0, textStringBuilder1.length());
      assertTrue(textStringBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append((CharSequence) null, 467, 218);
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder1.isEmpty());
      assertEquals(0, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(0, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isReallocated());
      assertEquals(32, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      char[] charArray0 = new char[3];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(3, textStringBuilder0.length());
      assertEquals(3, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(3, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append((-1L));
      assertNotNull(textStringBuilder1);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(5, textStringBuilder0.size());
      assertEquals(10, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(5, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(5, textStringBuilder1.size());
      assertEquals(5, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(10, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append(3282);
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(4, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(4, textStringBuilder0.length());
      assertFalse(textStringBuilder1.isReallocated());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(4, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(32, textStringBuilder1.capacity());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(4, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.size());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln("The suffix must not be null");
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(28, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(28, textStringBuilder0.length());
      assertEquals(28, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(28, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(32, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isReallocated());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder1.append(1254.213F);
      assertNotNull(textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder1, textStringBuilder2);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertEquals(36, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(36, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(72, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder1.isReallocated());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(72, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(36, textStringBuilder1.length());
      assertEquals(36, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNewLineText());
      assertFalse(textStringBuilder2.isEmpty());
      assertEquals(72, textStringBuilder2.capacity());
      assertTrue(textStringBuilder2.isReallocated());
      assertTrue(textStringBuilder2.isNotEmpty());
      assertEquals(36, textStringBuilder2.size());
      assertEquals(36, textStringBuilder2.length());
      assertNull(textStringBuilder2.getNewLineText());
      assertNull(textStringBuilder2.getNullText());
      
      TextStringBuilder textStringBuilder3 = textStringBuilder0.appendSeparator('N', ' ');
      assertNotNull(textStringBuilder3);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder3);
      assertSame(textStringBuilder3, textStringBuilder1);
      assertSame(textStringBuilder3, textStringBuilder0);
      assertSame(textStringBuilder3, textStringBuilder2);
      assertEquals(37, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(37, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(72, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(37, textStringBuilder3.length());
      assertNull(textStringBuilder3.getNullText());
      assertTrue(textStringBuilder3.isReallocated());
      assertEquals(72, textStringBuilder3.capacity());
      assertFalse(textStringBuilder3.isEmpty());
      assertNull(textStringBuilder3.getNewLineText());
      assertTrue(textStringBuilder3.isNotEmpty());
      assertEquals(37, textStringBuilder3.size());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.size());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append(0.7);
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(6, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(3, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(3, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(6, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(3, textStringBuilder1.size());
      assertEquals(3, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNullText());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      
      StringBuilder stringBuilder0 = new StringBuilder("");
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder0.append(stringBuilder0);
      assertNotNull(textStringBuilder2);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(6, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(3, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(3, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals("", stringBuilder0.toString());
      assertFalse(textStringBuilder2.isEmpty());
      assertEquals(6, textStringBuilder2.capacity());
      assertTrue(textStringBuilder2.isReallocated());
      assertTrue(textStringBuilder2.isNotEmpty());
      assertEquals(3, textStringBuilder2.size());
      assertNull(textStringBuilder2.getNullText());
      assertNull(textStringBuilder2.getNewLineText());
      assertEquals(3, textStringBuilder2.length());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      char[] charArray0 = new char[9];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, textStringBuilder0.length());
      assertEquals(9, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(9, textStringBuilder0.capacity());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append('>');
      assertNotNull(textStringBuilder1);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(20, textStringBuilder0.capacity());
      assertEquals(10, textStringBuilder0.length());
      assertEquals(10, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(10, textStringBuilder1.length());
      assertTrue(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNullText());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(20, textStringBuilder1.capacity());
      assertEquals(10, textStringBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      // Undeclared exception!
      try { 
        TextStringBuilder.wrap((char[]) null, (-3032));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // initialBuffer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      // Undeclared exception!
      try { 
        TextStringBuilder.wrap((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // initialBuffer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      
      // Undeclared exception!
      try { 
        textStringBuilder0.validateRange(82, 82);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertEquals(0, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      
      // Undeclared exception!
      try { 
        textStringBuilder0.validateIndices(67, 67);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex > size
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("5p~w# =z$!f[P");
      assertNotNull(textStringBuilder0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(45, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(13, textStringBuilder0.length());
      assertEquals(13, textStringBuilder0.size());
      
      // Undeclared exception!
      try { 
        textStringBuilder0.validateIndex(1948);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1948
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(115);
      assertNotNull(textStringBuilder0);
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(115, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      
      // Undeclared exception!
      try { 
        textStringBuilder0.toCharArray(115, 115);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      
      // Undeclared exception!
      try { 
        textStringBuilder0.setCharAt(8426, '/');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 8426
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("org.apache.commons.io.filefilter.WildcardFileFilter");
      assertNotNull(textStringBuilder0);
      assertEquals(83, textStringBuilder0.capacity());
      assertEquals(51, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(51, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNullText());
      
      // Undeclared exception!
      try { 
        textStringBuilder0.replace(127, (-881), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      
      // Undeclared exception!
      try { 
        textStringBuilder0.readFrom((CharBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isEmpty());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      try { 
        textStringBuilder0.readFrom((Readable) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertTrue(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      
      // Undeclared exception!
      try { 
        textStringBuilder0.readFrom((Reader) null, 1564);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(115);
      assertNotNull(textStringBuilder0);
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(115, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      // Undeclared exception!
      try { 
        textStringBuilder0.readFrom((Reader) pipedReader0, Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      try { 
        textStringBuilder0.readFrom((Reader) pipedReader0, 11);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      
      // Undeclared exception!
      try { 
        textStringBuilder0.readFrom((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
      assertNotNull(bufferedReader0);
      
      try { 
        textStringBuilder0.readFrom((Reader) bufferedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      char[] charArray0 = new char[3];
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(461);
      assertNotNull(textStringBuilder0);
      assertEquals(461, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      
      // Undeclared exception!
      try { 
        textStringBuilder0.insert(461, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 461
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("org.apache.commons.io.filefilter.WildcardFileFilter");
      assertNotNull(textStringBuilder0);
      assertEquals(83, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(51, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(51, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNullText());
      
      // Undeclared exception!
      try { 
        textStringBuilder0.insert(60, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 60
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      
      // Undeclared exception!
      try { 
        textStringBuilder0.insert(1777, "eQ1N,_=");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1777
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      char[] charArray0 = new char[1];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(1, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(1, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(1, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      
      // Undeclared exception!
      try { 
        textStringBuilder0.equalsIgnoreCase((TextStringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.size());
      
      ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BEFORE_BE;
      assertEquals(ThaiBuddhistEra.BEFORE_BE, thaiBuddhistEra0);
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append((Object) thaiBuddhistEra0);
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(43, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(86, textStringBuilder0.capacity());
      assertEquals(43, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder1.getNullText());
      assertNull(textStringBuilder1.getNewLineText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(43, textStringBuilder1.size());
      assertEquals(86, textStringBuilder1.capacity());
      assertEquals(43, textStringBuilder1.length());
      assertTrue(textStringBuilder1.isReallocated());
      
      // Undeclared exception!
      try { 
        textStringBuilder1.drainChars((-838), (-291), (char[]) null, (-838));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(6, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(6, textStringBuilder0.size());
      
      // Undeclared exception!
      try { 
        textStringBuilder0.drainChars(4, 322, charArray0, (-684));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isEmpty());
      
      // Undeclared exception!
      try { 
        textStringBuilder0.delete(37, 37);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isEmpty());
      
      // Undeclared exception!
      try { 
        textStringBuilder0.charAtDelete((-1147));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1147
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      char[] charArray0 = new char[1];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, textStringBuilder0.size());
      assertEquals(1, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(1, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      
      // Undeclared exception!
      try { 
        textStringBuilder0.charAt(70);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 70
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isNotEmpty());
      
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        textStringBuilder0.appendln("~%)9MCvPpN)x", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = ')'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        textStringBuilder0.appendln((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((String) null);
      assertNotNull(textStringBuilder0);
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      try { 
        textStringBuilder0.appendTo(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("org.apache.commons.io.filefilter.WildcardFileFilter");
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(83, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(51, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(51, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      
      // Undeclared exception!
      try { 
        textStringBuilder0.appendPadding(Integer.MAX_VALUE, '@');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("W/+i");
      assertNotNull(textStringBuilder0);
      assertEquals(36, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(4, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(4, textStringBuilder0.size());
      
      Object[] objectArray0 = new Object[8];
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      assertNotNull(textStringBuilder_TextStringBuilderTokenizer0);
      assertEquals(36, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(4, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(4, textStringBuilder0.size());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      
      objectArray0[0] = (Object) textStringBuilder_TextStringBuilderTokenizer0;
      // Undeclared exception!
      try { 
        textStringBuilder0.append("j<BtVd&%af", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // a != org.apache.commons.text.TextStringBuilder$TextStringBuilderTokenizer
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        textStringBuilder0.append((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isEmpty());
      
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      assertNotNull(textStringBuilder_TextStringBuilderReader0);
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder_TextStringBuilderReader0.markSupported());
      assertFalse(textStringBuilder_TextStringBuilderReader0.ready());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendSeparator('n', 101);
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals(1, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(1, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(1, textStringBuilder1.size());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(1, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(32, textStringBuilder1.capacity());
      assertNull(textStringBuilder1.getNullText());
      
      // Undeclared exception!
      textStringBuilder1.readFrom((Reader) textStringBuilder_TextStringBuilderReader0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(322);
      assertNotNull(textStringBuilder0);
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(322, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      assertNotNull(textStringBuilder_TextStringBuilderReader0);
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(322, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder_TextStringBuilderReader0.ready());
      assertTrue(textStringBuilder_TextStringBuilderReader0.markSupported());
      
      int int0 = textStringBuilder0.readFrom((Reader) textStringBuilder_TextStringBuilderReader0);
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(322, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder_TextStringBuilderReader0.ready());
      assertTrue(textStringBuilder_TextStringBuilderReader0.markSupported());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(119);
      assertNotNull(textStringBuilder0);
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(119, textStringBuilder0.capacity());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      assertNotNull(textStringBuilder_TextStringBuilderTokenizer0);
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(119, textStringBuilder0.capacity());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getDelimiterMatcher();
      assertNotNull(stringMatcher0);
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(119, textStringBuilder0.capacity());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertEquals(1, stringMatcher0.size());
      
      Object[] objectArray0 = new Object[9];
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendWithSeparators(objectArray0, " Yy57NbO3~R<jK");
      assertNotNull(textStringBuilder1);
      assertEquals(9, objectArray0.length);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(119, textStringBuilder0.capacity());
      assertEquals(112, textStringBuilder0.size());
      assertEquals(112, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(112, textStringBuilder1.size());
      assertEquals(119, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertFalse(textStringBuilder1.isReallocated());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(112, textStringBuilder1.length());
      
      int int0 = textStringBuilder0.lastIndexOf(stringMatcher0, 119);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertEquals(119, textStringBuilder0.capacity());
      assertEquals(112, textStringBuilder0.size());
      assertEquals(112, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertEquals(1, stringMatcher0.size());
      assertEquals(98, int0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      assertNotNull(textStringBuilder0);
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln(0.0);
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals(4, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(4, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder1.isReallocated());
      assertEquals(4, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNewLineText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(32, textStringBuilder1.capacity());
      assertEquals(4, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isEmpty());
      
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      assertNotNull(textStringBuilder_TextStringBuilderTokenizer0);
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals(4, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(4, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getTrimmerMatcher();
      assertNotNull(stringMatcher0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals(4, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(4, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertEquals(0, stringMatcher0.size());
      
      int int0 = textStringBuilder0.lastIndexOf(stringMatcher0, 32);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals(4, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(4, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertEquals(0, stringMatcher0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("aQ3,e<kis<;'R{M,0");
      assertNotNull(textStringBuilder0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(17, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(49, textStringBuilder0.capacity());
      assertEquals(17, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      
      int int0 = textStringBuilder0.lastIndexOf(">T", 49931);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(17, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(49, textStringBuilder0.capacity());
      assertEquals(17, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("*0~h6Yp7hWS+:z9TOR");
      assertNotNull(textStringBuilder0);
      assertEquals(18, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(18, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(50, textStringBuilder0.capacity());
      
      int int0 = textStringBuilder0.lastIndexOf("$", 32);
      assertEquals(18, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(18, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(50, textStringBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("*0Hh6,p1h$S:z9TOR");
      assertNotNull(textStringBuilder0);
      assertEquals(49, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(17, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(17, textStringBuilder0.size());
      
      int int0 = textStringBuilder0.lastIndexOf("", 0);
      assertEquals(49, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(17, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(17, textStringBuilder0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.length());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln(2728L);
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(8, textStringBuilder0.capacity());
      assertEquals(5, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(5, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(8, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNullText());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(5, textStringBuilder1.length());
      assertEquals(5, textStringBuilder1.size());
      
      int int0 = textStringBuilder0.lastIndexOf("L%VYx9", 832);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(8, textStringBuilder0.capacity());
      assertEquals(5, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(5, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((-973));
      assertNotNull(textStringBuilder0);
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      
      int int0 = textStringBuilder0.lastIndexOf((String) null, (-1));
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '6';
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'6'}, charArray0);
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(1, textStringBuilder0.size());
      assertEquals(1, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(1, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      
      int int0 = textStringBuilder0.lastIndexOf('6', 1907);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'6'}, charArray0);
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(1, textStringBuilder0.size());
      assertEquals(1, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(1, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      char[] charArray0 = new char[2];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(2, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(2, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(2, textStringBuilder0.size());
      
      int int0 = textStringBuilder0.lastIndexOf('Q', 53);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(2, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(2, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(2, textStringBuilder0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      char[] charArray0 = new char[9];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(9, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(9, textStringBuilder0.length());
      assertEquals(9, textStringBuilder0.capacity());
      
      int int0 = textStringBuilder0.lastIndexOf('N', (-299));
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(9, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(9, textStringBuilder0.length());
      assertEquals(9, textStringBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      
      boolean boolean0 = textStringBuilder0.isNotEmpty();
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("*0Hh6,p1h$S:z9TOR");
      assertNotNull(textStringBuilder0);
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(17, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(17, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(49, textStringBuilder0.capacity());
      
      boolean boolean0 = textStringBuilder0.isNotEmpty();
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(17, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(17, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(49, textStringBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      
      boolean boolean0 = textStringBuilder0.isEmpty();
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(6, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(6, textStringBuilder0.capacity());
      
      boolean boolean0 = textStringBuilder0.isEmpty();
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(6, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(6, textStringBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      char[] charArray0 = new char[9];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(9, textStringBuilder0.size());
      assertEquals(9, textStringBuilder0.length());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.insert(1, "asda#0JQw|}ZEYTowOQ");
      assertNotNull(textStringBuilder1);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(28, textStringBuilder0.length());
      assertEquals(56, textStringBuilder0.capacity());
      assertEquals(28, textStringBuilder0.size());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(28, textStringBuilder1.size());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(56, textStringBuilder1.capacity());
      assertEquals(28, textStringBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      char[] charArray0 = new char[1];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(1, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(1, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(1, textStringBuilder0.size());
      
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      assertNotNull(textStringBuilder_TextStringBuilderTokenizer0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(1, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(1, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(1, textStringBuilder0.size());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getTrimmerMatcher();
      assertNotNull(stringMatcher0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(1, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(1, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(1, textStringBuilder0.size());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, stringMatcher0.size());
      
      int int0 = textStringBuilder0.indexOf(stringMatcher0, (-1));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(1, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(1, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(1, textStringBuilder0.size());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, stringMatcher0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      char[] charArray0 = new char[1];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(1, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(1, textStringBuilder0.size());
      
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      assertNotNull(textStringBuilder_TextStringBuilderTokenizer0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(1, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(1, textStringBuilder0.size());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getTrimmerMatcher();
      assertNotNull(stringMatcher0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(1, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(1, textStringBuilder0.size());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, stringMatcher0.size());
      
      int int0 = textStringBuilder0.indexOf(stringMatcher0, 9120);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(1, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(1, textStringBuilder0.size());
      assertEquals(0, textStringBuilder_TextStringBuilderTokenizer0.nextIndex());
      assertFalse(textStringBuilder_TextStringBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), textStringBuilder_TextStringBuilderTokenizer0.previousIndex());
      assertTrue(textStringBuilder_TextStringBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, stringMatcher0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("*0~h6Yp7hWS+:z9TOR");
      assertNotNull(textStringBuilder0);
      assertEquals(18, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(18, textStringBuilder0.length());
      assertEquals(50, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.replaceAll("*0~h6Yp7hWS+:z9TOR", "NG&}\"~u.Y1WYLz9V2");
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(17, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(17, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(50, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(50, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(17, textStringBuilder1.size());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(17, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      
      int int0 = textStringBuilder1.indexOf("NG&}\"~u.Y1WYLz9V2", (-995));
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(17, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(17, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(50, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(50, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(17, textStringBuilder1.size());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(17, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(6, textStringBuilder0.capacity());
      assertEquals(6, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      
      int int0 = textStringBuilder0.indexOf("y`^t=+l{8k*wb6]V1", (-516));
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(6, textStringBuilder0.capacity());
      assertEquals(6, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("*0~h6Yp7hWS+:z9TOR");
      assertNotNull(textStringBuilder0);
      assertEquals(18, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(50, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(18, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      
      int int0 = textStringBuilder0.indexOf("}[iketjhO", (-3312));
      assertEquals(18, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(50, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(18, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      
      int int0 = textStringBuilder0.indexOf((String) null, 0);
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("*0~h6Yp7hWS+:z9TOR");
      assertNotNull(textStringBuilder0);
      assertEquals(18, textStringBuilder0.size());
      assertEquals(18, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(50, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      
      int int0 = textStringBuilder0.indexOf("J@P$Y#[:?\"(W%KF=", 32);
      assertEquals(18, textStringBuilder0.size());
      assertEquals(18, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(50, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      char[] charArray0 = new char[1];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(1, textStringBuilder0.capacity());
      assertEquals(1, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(1, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendFixedWidthPadLeft((-673), 256, '^');
      assertNotNull(textStringBuilder1);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(514, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(257, textStringBuilder0.length());
      assertEquals(257, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(514, textStringBuilder1.capacity());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder1.isReallocated());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(257, textStringBuilder1.size());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(257, textStringBuilder1.length());
      
      int int0 = textStringBuilder1.indexOf('^', (-673));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(514, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(257, textStringBuilder0.length());
      assertEquals(257, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(514, textStringBuilder1.capacity());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertTrue(textStringBuilder1.isReallocated());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(257, textStringBuilder1.size());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(257, textStringBuilder1.length());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      char[] charArray0 = new char[1];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(1, textStringBuilder0.capacity());
      assertEquals(1, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(1, textStringBuilder0.size());
      
      int int0 = textStringBuilder0.indexOf('^', (-673));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(1, textStringBuilder0.capacity());
      assertEquals(1, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(1, textStringBuilder0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      char[] charArray0 = new char[3];
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((CharSequence) "*0~h6Yp7hWS+:z9TOR");
      assertNotNull(textStringBuilder0);
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(18, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(50, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(18, textStringBuilder0.size());
      
      textStringBuilder0.getChars(4, 4, charArray0, 0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(18, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(50, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(18, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        textStringBuilder0.getChars(3292, (-1259), charArray0, (-1682));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1259
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      char[] charArray0 = new char[3];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(3, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(3, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      
      // Undeclared exception!
      try { 
        textStringBuilder0.getChars((-443), 6, (char[]) null, 6);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -443
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      
      TextStringBuilder textStringBuilder1 = new TextStringBuilder(256);
      assertNotNull(textStringBuilder1);
      assertFalse(textStringBuilder1.equals((Object)textStringBuilder0));
      assertEquals(256, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isEmpty());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(0, textStringBuilder1.size());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(0, textStringBuilder1.length());
      
      boolean boolean0 = textStringBuilder0.equals(textStringBuilder1);
      assertNotSame(textStringBuilder0, textStringBuilder1);
      assertNotSame(textStringBuilder1, textStringBuilder0);
      assertFalse(textStringBuilder0.equals((Object)textStringBuilder1));
      assertFalse(textStringBuilder1.equals((Object)textStringBuilder0));
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals(256, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isEmpty());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(0, textStringBuilder1.size());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(0, textStringBuilder1.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      
      boolean boolean0 = textStringBuilder0.equals(textStringBuilder0);
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      assertNotNull(textStringBuilder0);
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln((Object) null);
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(1, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals(1, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(1, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(1, textStringBuilder1.size());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(32, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isNotEmpty());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder0.delete(0, 74);
      assertNotNull(textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder2.isReallocated());
      assertNull(textStringBuilder2.getNewLineText());
      assertNull(textStringBuilder2.getNullText());
      assertEquals(0, textStringBuilder2.length());
      assertEquals(0, textStringBuilder2.size());
      assertTrue(textStringBuilder2.isEmpty());
      assertEquals(32, textStringBuilder2.capacity());
      assertFalse(textStringBuilder2.isNotEmpty());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendSeparator(".v5;", (String) null);
      assertNotNull(textStringBuilder1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(0, textStringBuilder1.length());
      assertEquals(0, textStringBuilder1.size());
      assertFalse(textStringBuilder1.isNotEmpty());
      assertTrue(textStringBuilder1.isEmpty());
      assertEquals(0, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.size());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendNewLine();
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(1, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(1, textStringBuilder0.size());
      assertNull(textStringBuilder1.getNewLineText());
      assertEquals(1, textStringBuilder1.size());
      assertEquals(32, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(1, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isReallocated());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNullText());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      char[] charArray0 = new char[8];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(8, textStringBuilder0.capacity());
      assertEquals(8, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(8, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.setNewLineText("IPW;<ulCI|");
      assertNotNull(textStringBuilder1);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(8, textStringBuilder0.capacity());
      assertEquals(8, textStringBuilder0.length());
      assertEquals("IPW;<ulCI|", textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(8, textStringBuilder0.size());
      assertEquals(8, textStringBuilder1.length());
      assertEquals(8, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertFalse(textStringBuilder1.isReallocated());
      assertNull(textStringBuilder1.getNullText());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(8, textStringBuilder1.size());
      assertEquals("IPW;<ulCI|", textStringBuilder1.getNewLineText());
      
      TextStringBuilder textStringBuilder2 = textStringBuilder0.appendNewLine();
      assertNotNull(textStringBuilder2);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(textStringBuilder0, textStringBuilder2);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder2, textStringBuilder0);
      assertSame(textStringBuilder2, textStringBuilder1);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(18, textStringBuilder0.length());
      assertEquals(18, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals("IPW;<ulCI|", textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(36, textStringBuilder0.capacity());
      assertTrue(textStringBuilder2.isReallocated());
      assertTrue(textStringBuilder2.isNotEmpty());
      assertEquals(18, textStringBuilder2.size());
      assertEquals(18, textStringBuilder2.length());
      assertEquals("IPW;<ulCI|", textStringBuilder2.getNewLineText());
      assertFalse(textStringBuilder2.isEmpty());
      assertEquals(36, textStringBuilder2.capacity());
      assertNull(textStringBuilder2.getNullText());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      assertNotNull(textStringBuilder0);
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      
      ChronoUnit chronoUnit0 = ChronoUnit.YEARS;
      assertEquals(ChronoUnit.YEARS, chronoUnit0);
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendFixedWidthPadRight((Object) chronoUnit0, 32, 'L');
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(32, textStringBuilder0.size());
      assertEquals(32, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(32, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isReallocated());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(32, textStringBuilder1.length());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(32, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("");
      assertNotNull(textStringBuilder0);
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendFixedWidthPadLeft((Object) textStringBuilder0, 32, ' ');
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(32, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(32, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder1.isEmpty());
      assertEquals(32, textStringBuilder1.size());
      assertFalse(textStringBuilder1.isReallocated());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(32, textStringBuilder1.length());
      assertEquals(32, textStringBuilder1.capacity());
      assertNull(textStringBuilder1.getNewLineText());
      assertNull(textStringBuilder1.getNullText());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.appendFixedWidthPadLeft((Object) textStringBuilder0, 1494, 'R');
      String string0 = textStringBuilder0.rightString(1014);
      // Undeclared exception!
      textStringBuilder0.contains(string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendFixedWidthPadLeft((Object) textStringBuilder_TextStringBuilderReader0, (-2549), 'X');
      assertFalse(textStringBuilder1.isNotEmpty());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append(textStringBuilder0, 0, 0);
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      char[] charArray0 = new char[22];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.append(textStringBuilder0, 2, 5);
      assertTrue(textStringBuilder0.isReallocated());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      char[] charArray0 = new char[3];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.appendln(",'V!lX7[MIC(!Y[1w");
      // Undeclared exception!
      try { 
        textStringBuilder0.append(textStringBuilder0, 5, (-1039));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      try { 
        textStringBuilder0.append(textStringBuilder0, 1394, 1394);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append((TextStringBuilder) null, 0, 1192);
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("a43,e<kis<;'R{M,0");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) textStringBuilder0);
      textStringBuilder0.append(stringBuilder1, 1, 1);
      assertEquals("a43,e<kis<;'R{M,0", stringBuilder0.toString());
      assertEquals(18, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("IZltV");
      StringBuilder stringBuilder0 = new StringBuilder("");
      // Undeclared exception!
      try { 
        textStringBuilder0.append(stringBuilder0, 964, 13);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendFixedWidthPadRight((Object) "w}W![i`B", 1493, ')');
      StringBuffer stringBuffer0 = new StringBuffer(textStringBuilder1);
      textStringBuilder1.append(stringBuffer0, (int) (byte)115, (int) (byte)48);
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(1541, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      char[] charArray0 = new char[4];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      StringBuffer stringBuffer0 = new StringBuffer(textStringBuilder0);
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append(stringBuffer0, 0, 0);
      assertTrue(textStringBuilder1.isNotEmpty());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("*0~h6Yp7hWS+:z9TOR");
      StringBuffer stringBuffer0 = new StringBuffer("*0~h6Yp7hWS+:z9TOR");
      // Undeclared exception!
      try { 
        textStringBuilder0.append(stringBuffer0, (-5949), 125);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      char[] charArray0 = new char[4];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      StringBuffer stringBuffer0 = new StringBuffer(textStringBuilder0);
      // Undeclared exception!
      try { 
        textStringBuilder0.append(stringBuffer0, 0, 61);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(32);
      StringBuffer stringBuffer0 = new StringBuffer(">");
      // Undeclared exception!
      try { 
        textStringBuilder0.append(stringBuffer0, 32, 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((CharSequence) "oy6$ek");
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append("INSENSITIVE", 0, 0);
      assertEquals(38, textStringBuilder1.capacity());
      assertEquals(6, textStringBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      char[] charArray0 = new char[9];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(charBuffer0);
      // Undeclared exception!
      try { 
        textStringBuilder0.append("Invalid IOCase name: ", 5, 38);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.append("Invalid startIndex: ", 11, 4);
      assertTrue(textStringBuilder0.isReallocated());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      try { 
        textStringBuilder0.append("", 108, 550);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      try { 
        textStringBuilder0.append("end < start", (-1), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append((String) null, 6, 6);
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append((Object) textStringBuilder0);
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append((Object) null);
      assertTrue(textStringBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("*0Hh6,p1h$S:z9TOR");
      StringBuffer stringBuffer0 = new StringBuffer();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append((CharSequence) stringBuffer0);
      assertEquals(17, textStringBuilder1.length());
      assertEquals(49, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      char[] charArray0 = new char[2];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      StringBuilder stringBuilder0 = new StringBuilder(textStringBuilder0);
      textStringBuilder0.append((CharSequence) stringBuilder0);
      assertTrue(textStringBuilder0.isReallocated());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append((CharSequence) textStringBuilder0);
      assertEquals(0, textStringBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("aQ3,e<kis<;'R{M,0");
      textStringBuilder0.append((CharSequence) "aQ3,e<kis<;'R{M,0");
      assertEquals(34, textStringBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("v{v|");
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(stringBuilder0);
      CharBuffer charBuffer0 = CharBuffer.allocate(76);
      textStringBuilder0.append(charBuffer0, 13, 13);
      assertEquals(17, textStringBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      // Undeclared exception!
      try { 
        textStringBuilder0.append(charBuffer0, 2, (-1542));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      char[] charArray0 = new char[1];
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append(charArray0, 0, 0);
      assertEquals(32, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isNotEmpty());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(102);
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        textStringBuilder0.append(charArray0, 0, (-256));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -256
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      char[] charArray0 = new char[1];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      // Undeclared exception!
      try { 
        textStringBuilder0.append(charArray0, (-108), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 0
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        textStringBuilder0.append(charArray0, 1370, 136);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 136
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append((char[]) null, 1, 1);
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      char[] charArray0 = new char[3];
      StringBuilder stringBuilder0 = new StringBuilder("v{v|");
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(stringBuilder0);
      textStringBuilder0.append(charArray0);
      assertEquals(7, textStringBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append(charArray0);
      assertEquals(0, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.append(false);
      assertEquals(11, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.append(true);
      assertFalse(textStringBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      char[] charArray0 = new char[2];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.append(3282);
      assertTrue(textStringBuilder0.isReallocated());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(322);
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append((StringBuilder) null);
      assertEquals(322, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append(textStringBuilder0);
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        textStringBuilder0.append("YW)yt*0%,{Wmkf}}", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = ','
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("MyP;(Hk<bJ?YXH3");
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getQuoteMatcher();
      // Undeclared exception!
      try { 
        textStringBuilder0.replace(stringMatcher0, "MyP;(Hk<bJ?YXH3", 117, 7, 207);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      String string0 = textStringBuilder0.getNullText();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("*0~h6Yp7hWS+:zlTO<cR");
      int int0 = textStringBuilder0.size();
      assertEquals(20, int0);
      assertEquals(52, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(">SJ{");
      textStringBuilder0.append('@');
      assertEquals(5, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      try { 
        textStringBuilder0.substring((-1226), (-1226));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1226
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      // Undeclared exception!
      try { 
        textStringBuilder0.toString(4, 4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln(477);
      textStringBuilder1.trim();
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(3, textStringBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      char[] charArray1 = textStringBuilder0.toCharArray(4, 4);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("Q]{`E4");
      char[] charArray0 = textStringBuilder0.toCharArray(0, 40);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'Q', ']', '{', '`', 'E', '4'}, charArray0);
      assertEquals(38, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.toCharArray();
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("aQ3,e<@kis<;'R{M,P");
      char[] charArray0 = textStringBuilder0.toCharArray();
      assertEquals(18, charArray0.length);
      assertEquals(50, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      try { 
        textStringBuilder0.subSequence(0, (-2089));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2089
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      try { 
        textStringBuilder0.subSequence(400, 400);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 400
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      try { 
        textStringBuilder0.subSequence((-2696), (-2696));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2696
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("SmN|geZEDuvto{'rB");
      boolean boolean0 = textStringBuilder0.startsWith("SmN|geZEDuvto{'rB");
      assertTrue(boolean0);
      assertEquals(49, textStringBuilder0.capacity());
      assertEquals(17, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      boolean boolean0 = textStringBuilder0.startsWith("{j*:-KH%O4|^^[6");
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("&@?STk/k'|I7Y|v[Xv");
      boolean boolean0 = textStringBuilder0.startsWith("a43,e<kis<;'R{M,0");
      assertEquals(50, textStringBuilder0.capacity());
      assertFalse(boolean0);
      assertEquals(18, textStringBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      boolean boolean0 = textStringBuilder0.startsWith((String) null);
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("");
      boolean boolean0 = textStringBuilder0.startsWith("");
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.setNullText("");
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      char[] charArray0 = new char[1];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      TextStringBuilder textStringBuilder1 = textStringBuilder0.setNullText((String) null);
      assertSame(textStringBuilder1, textStringBuilder0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      TextStringBuilder textStringBuilder1 = textStringBuilder0.setLength(0);
      assertEquals(32, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      textStringBuilder0.appendFixedWidthPadRight((Object) textStringBuilder_TextStringBuilderReader0, 1170, '!');
      textStringBuilder0.setLength(16);
      assertTrue(textStringBuilder0.isReallocated());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((-42));
      // Undeclared exception!
      try { 
        textStringBuilder0.setLength((-42));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -42
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((-794));
      textStringBuilder0.rightString((-794));
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      String string0 = textStringBuilder0.rightString(10);
      assertEquals("", string0);
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      char[] charArray0 = new char[4];
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("*0Hh6,p1h$S:z9TOR");
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln(charArray0);
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder1.new TextStringBuilderTokenizer();
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getDelimiterMatcher();
      textStringBuilder1.deleteAll(stringMatcher0);
      assertEquals(21, textStringBuilder0.length());
      assertEquals(21, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("My_F9*");
      textStringBuilder0.replaceFirst("My_F9*", (String) null);
      assertEquals(0, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("Q]{`E4");
      TextStringBuilder textStringBuilder1 = textStringBuilder0.replaceFirst("Q]{`E4", "Q]{`E4");
      assertEquals(38, textStringBuilder1.capacity());
      assertEquals(6, textStringBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.replaceFirst("*{'9h=nmD.{S5yC!?", "*{'9h=nmD.{S5yC!?");
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((String) null);
      TextStringBuilder textStringBuilder1 = textStringBuilder0.replaceFirst((String) null, (String) null);
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.replaceFirst('K', 'B');
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("a43,e<kis<;'R{M,0");
      TextStringBuilder textStringBuilder1 = textStringBuilder0.replaceFirst('k', '5');
      assertEquals(17, textStringBuilder1.size());
      assertEquals(49, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.replaceAll("endIndex must be valid", (String) null);
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.replaceAll((String) null, (String) null);
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("*0~h6Yp7hWS+:z9TOR");
      TextStringBuilder textStringBuilder1 = textStringBuilder0.replaceAll('z', 'G');
      assertEquals(18, textStringBuilder1.length());
      assertEquals(50, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.replaceAll('+', '+');
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      Object[] objectArray0 = new Object[6];
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      objectArray0[1] = (Object) textStringBuilder_TextStringBuilderTokenizer0;
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendAll(objectArray0);
      textStringBuilder1.replace(9, 1623, (String) null);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(9, textStringBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("");
      textStringBuilder0.replace(0, 108, "}jC-~L5RpYa'|<G");
      assertEquals(15, textStringBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      StringReader stringReader0 = new StringReader("X~V<!*]");
      int int0 = textStringBuilder0.readFrom((Reader) stringReader0, 256);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      Reader reader0 = textStringBuilder0.asReader();
      int int0 = textStringBuilder0.readFrom(reader0, 3020);
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      int int0 = textStringBuilder0.readFrom((Reader) textStringBuilder_TextStringBuilderReader0, (-2957));
      assertEquals(0, int0);
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      StringReader stringReader0 = new StringReader("eAA1^\"^JCH");
      int int0 = textStringBuilder0.readFrom((Reader) stringReader0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      CharBuffer charBuffer0 = CharBuffer.allocate(245);
      int int0 = textStringBuilder0.readFrom((Readable) charBuffer0);
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(245, int0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      // Undeclared exception!
      try { 
        textStringBuilder0.readFrom((Readable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      char[] charArray0 = new char[3];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      String string0 = textStringBuilder0.midString((-995), 2);
      assertEquals("\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      char[] charArray0 = new char[18];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      String string0 = textStringBuilder0.midString((-995), (-995));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      String string0 = textStringBuilder0.midString(2, 4);
      assertEquals("\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("*0~h6Yp7hWS+:z9TOR");
      String string0 = textStringBuilder0.leftString(10);
      assertEquals(50, textStringBuilder0.capacity());
      assertEquals("*0~h6Yp7hW", string0);
      assertEquals(18, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("org.apache.commons.io.filefilter.WildcardFileFilter");
      textStringBuilder0.leftString((-3103));
      assertEquals(83, textStringBuilder0.capacity());
      assertEquals(51, textStringBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      String string0 = textStringBuilder0.leftString(116);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getDelimiterMatcher();
      textStringBuilder0.appendln('B');
      int int0 = textStringBuilder0.lastIndexOf(stringMatcher0);
      assertEquals(2, textStringBuilder0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(115);
      int int0 = textStringBuilder0.lastIndexOf((StringMatcher) null, 4);
      assertEquals(115, textStringBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getDelimiterMatcher();
      int int0 = textStringBuilder0.lastIndexOf(stringMatcher0, (-74));
      assertEquals((-1), int0);
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("aQ3,e<kis<;'R{M,0");
      int int0 = textStringBuilder0.lastIndexOf(".M@gKYi aPR{);");
      assertEquals(17, textStringBuilder0.length());
      assertEquals((-1), int0);
      assertEquals(49, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      char[] charArray0 = new char[1];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      int int0 = textStringBuilder0.lastIndexOf("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("*0~h6Yp7hWS+:zlTO<cR");
      int int0 = textStringBuilder0.lastIndexOf("*0~h6Yp7hWS+:zlTO<cR", 72);
      assertEquals(0, int0);
      assertEquals(52, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((String) null);
      char[] charArray0 = new char[5];
      charArray0[0] = 't';
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln(charArray0);
      int int0 = textStringBuilder1.lastIndexOf('t');
      assertEquals(6, textStringBuilder0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      int int0 = textStringBuilder0.lastIndexOf('+', 0);
      assertEquals((-1), int0);
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.minimizeCapacity();
      boolean boolean0 = textStringBuilder0.isReallocated();
      assertEquals(0, textStringBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      boolean boolean0 = textStringBuilder0.isReallocated();
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append("fZVcwpDMYw13fHGX");
      textStringBuilder1.insert(7, (-1720.538F));
      assertEquals(25, textStringBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("Invalid offset: ");
      TextStringBuilder textStringBuilder1 = textStringBuilder0.insert(0, "");
      assertEquals(48, textStringBuilder1.capacity());
      assertEquals(16, textStringBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((-1640));
      // Undeclared exception!
      try { 
        textStringBuilder0.insert(39, (Object) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 39
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      // Undeclared exception!
      try { 
        textStringBuilder0.insert(0, (Object) textStringBuilder_TextStringBuilderTokenizer0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 0
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      char[] charArray0 = new char[7];
      textStringBuilder0.append(charArray0, 0, 1);
      textStringBuilder0.insert(0, charArray0, 0, 0);
      assertEquals(1, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      textStringBuilder0.appendFixedWidthPadRight((Object) textStringBuilder_TextStringBuilderReader0, 1170, '!');
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        textStringBuilder0.insert(864, charArray0, 201, (-1734));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: 201
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      char[] charArray0 = new char[1];
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      Object[] objectArray0 = new Object[2];
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendWithSeparators(objectArray0, "}K3+JzxGF[vR:");
      // Undeclared exception!
      try { 
        textStringBuilder1.insert(8, charArray0, (-13), (-1020));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: -13
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("org.apache.commons.io.filefilter.WildcardFileFilter");
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        textStringBuilder0.insert(0, charArray0, 0, (-1045));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -1045
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("}V<^9&Ndfi4J#,");
      TextStringBuilder textStringBuilder1 = textStringBuilder0.insert(2, (char[]) null);
      assertEquals(47, textStringBuilder1.capacity());
      assertEquals(15, textStringBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.insert(4, true);
      assertEquals(10, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      int int0 = textStringBuilder0.indexOf((StringMatcher) null, (-2580));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      boolean boolean0 = textStringBuilder0.contains((String) null);
      assertFalse(boolean0);
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("c");
      TextStringBuilder textStringBuilder1 = textStringBuilder0.replaceAll("c", "c");
      assertEquals(33, textStringBuilder1.capacity());
      assertTrue(textStringBuilder1.isNotEmpty());
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      int int0 = textStringBuilder0.indexOf('5', (-343));
      assertEquals((-1), int0);
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      char[] charArray0 = new char[2];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      // Undeclared exception!
      try { 
        textStringBuilder0.getChars(2, 0, charArray0, 2590);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("end < start");
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        textStringBuilder0.getChars(322, 44, charArray0, 322);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 44
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      char[] charArray0 = new char[3];
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("Q]{`E4");
      // Undeclared exception!
      try { 
        textStringBuilder0.drainChars((-1142), 117, charArray0, (-291));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1142
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      char[] charArray0 = new char[3];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln("NFY~(U]cD");
      textStringBuilder1.getChars(charArray0);
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(26, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      char[] charArray0 = new char[8];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      char[] charArray1 = textStringBuilder0.getChars(charArray0);
      assertSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      char[] charArray0 = textStringBuilder0.getChars((char[]) null);
      assertEquals(0, charArray0.length);
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("Q]{`E4");
      TextStringBuilder textStringBuilder1 = new TextStringBuilder(3);
      boolean boolean0 = textStringBuilder0.equalsIgnoreCase(textStringBuilder1);
      assertFalse(boolean0);
      assertEquals(6, textStringBuilder0.length());
      assertEquals(3, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      boolean boolean0 = textStringBuilder0.equalsIgnoreCase(textStringBuilder0);
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      TextStringBuilder textStringBuilder1 = new TextStringBuilder();
      boolean boolean0 = textStringBuilder0.equals((Object) textStringBuilder1);
      assertFalse(boolean0);
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("");
      boolean boolean0 = textStringBuilder0.equals((Object) textStringBuilder0);
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      char[] charArray0 = new char[2];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      boolean boolean0 = textStringBuilder0.equals((Object) "!yRnb<oGv0h.oJ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("end < start");
      boolean boolean0 = textStringBuilder0.endsWith("<.r#M[j7,");
      assertEquals(11, textStringBuilder0.size());
      assertFalse(boolean0);
      assertEquals(43, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      boolean boolean0 = textStringBuilder0.endsWith("endIndex must be valid");
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      boolean boolean0 = textStringBuilder0.endsWith("");
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      boolean boolean0 = textStringBuilder0.endsWith((String) null);
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("aQ3,e<kis<;'R{M,0");
      boolean boolean0 = textStringBuilder0.endsWith("aQ3,e<kis<;'R{M,0");
      assertTrue(boolean0);
      assertEquals(49, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      StringBuffer stringBuffer0 = new StringBuffer(textStringBuilder0);
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendln(stringBuffer0);
      char[] charArray0 = new char[1];
      int int0 = textStringBuilder1.drainChars(103, 103, charArray0, 103);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      char[] charArray0 = new char[1];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      // Undeclared exception!
      try { 
        textStringBuilder0.drainChars(609, 11, charArray0, 609);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -608
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      char[] charArray0 = new char[0];
      int int0 = textStringBuilder0.drainChars(626, 626, charArray0, 101);
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, int0);
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("a43,e<kis<;'R{M,0");
      textStringBuilder0.deleteFirst("a43,e<kis<;'R{M,0");
      assertEquals(0, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 's';
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.deleteFirst('s');
      assertEquals(4, textStringBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("]{`E");
      textStringBuilder0.deleteAll("]{`E");
      assertEquals(0, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.deleteAll((String) null);
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.deleteAll('\u0000');
      assertFalse(textStringBuilder0.isNotEmpty());
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.trim();
      assertTrue(textStringBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("Q]{`E4");
      TextStringBuilder textStringBuilder1 = textStringBuilder0.delete(6, 116);
      assertEquals(6, textStringBuilder0.length());
      assertEquals(38, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.appendln(477);
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getDelimiterMatcher();
      boolean boolean0 = textStringBuilder0.contains(stringMatcher0);
      assertTrue(textStringBuilder0.isReallocated());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getQuoteMatcher();
      boolean boolean0 = textStringBuilder0.contains(stringMatcher0);
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      char[] charArray0 = new char[1];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      boolean boolean0 = textStringBuilder0.contains("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("*0Hh6,p1h$S:z9TOR");
      boolean boolean0 = textStringBuilder0.contains('1');
      assertEquals(17, textStringBuilder0.length());
      assertTrue(boolean0);
      assertEquals(49, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("org.apache.commons.io.filefilter.WildcardFileFilter");
      boolean boolean0 = textStringBuilder0.contains('9');
      assertEquals(83, textStringBuilder0.capacity());
      assertFalse(boolean0);
      assertEquals(51, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("aQ3,e<kis<;'R{M,0");
      Object[] objectArray0 = new Object[0];
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendWithSeparators(objectArray0, "");
      assertEquals(49, textStringBuilder1.capacity());
      assertEquals(17, textStringBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      char[] charArray0 = new char[1];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendWithSeparators((Object[]) null, "");
      assertSame(textStringBuilder0, textStringBuilder1);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      Class<ThaiBuddhistEra> class0 = ThaiBuddhistEra.class;
      EnumSet<ThaiBuddhistEra> enumSet0 = EnumSet.allOf(class0);
      Iterator<ThaiBuddhistEra> iterator0 = enumSet0.iterator();
      textStringBuilder0.appendWithSeparators(iterator0, "");
      assertTrue(textStringBuilder0.isNotEmpty());
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BEFORE_BE;
      EnumSet<ThaiBuddhistEra> enumSet0 = EnumSet.of(thaiBuddhistEra0);
      Iterator<ThaiBuddhistEra> iterator0 = enumSet0.iterator();
      textStringBuilder0.appendWithSeparators(iterator0, "k(1:d<Z%+61V&J-q,R");
      textStringBuilder0.replaceFirst("The offset cannot be negative", "The offset cannot be negative");
      assertTrue(textStringBuilder0.isReallocated());
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      Iterator<Object> iterator0 = arrayDeque0.iterator();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendWithSeparators(iterator0, (String) null);
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendWithSeparators((Iterator<?>) null, "R1\"R");
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("*0~h6Yp7hWS+:z9TOR");
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendWithSeparators((Iterable<?>) null, "}[iketjhO");
      assertEquals(50, textStringBuilder1.capacity());
      assertEquals(18, textStringBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      StringBuffer stringBuffer0 = new StringBuffer("");
      textStringBuilder0.appendTo(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      StringBuilder stringBuilder0 = new StringBuilder();
      textStringBuilder0.appendTo(stringBuilder0);
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      try { 
        textStringBuilder0.appendTo((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(">SJ{");
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendSeparator(">SJ{", 0);
      assertEquals(36, textStringBuilder1.capacity());
      assertEquals(4, textStringBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      char[] charArray0 = new char[1];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendSeparator((String) null, 175);
      assertFalse(textStringBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      textStringBuilder0.appendSeparator('N', ' ');
      assertEquals(1, textStringBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.appendSeparator('k');
      assertEquals(7, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      textStringBuilder0.appendPadding(20472, '.');
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.setNullText("w}W![i`B");
      textStringBuilder1.append((CharBuffer) null, 9, (-2308));
      assertFalse(textStringBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.appendFixedWidthPadLeft((Object) null, 76, '3');
      assertEquals(76, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(0);
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendFixedWidthPadLeft(0, 0, 'r');
      assertEquals(32, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isNotEmpty());
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      Object[] objectArray0 = new Object[0];
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendAll(objectArray0);
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("aQ3,e<kis<;'R{M,0");
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendAll((Iterable<?>) null);
      assertEquals(17, textStringBuilder1.length());
      assertEquals(49, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("Q]{`E4");
      // Undeclared exception!
      try { 
        textStringBuilder0.append(textStringBuilder0, 0, 18);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendFixedWidthPadRight((-1100), 12, '8');
      // Undeclared exception!
      try { 
        textStringBuilder1.appendln(textStringBuilder0, 12, (-1100));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      try { 
        textStringBuilder0.append(textStringBuilder0, (-964), (-964));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.appendln((TextStringBuilder) null);
      assertTrue(textStringBuilder0.isNotEmpty());
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) null);
      // Undeclared exception!
      try { 
        textStringBuilder0.append(stringBuilder1, 1, 413);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("yn@)A${SQM(");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) textStringBuilder0);
      // Undeclared exception!
      try { 
        textStringBuilder0.append(stringBuilder1, 1, (-2149));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("a43,e<kis<;'R{M,0");
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        textStringBuilder0.append(stringBuilder0, (-10), (-10));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.apache.commons.io.filefilter.WildcardFileFilter");
      // Undeclared exception!
      try { 
        textStringBuilder0.appendln(stringBuffer0, 2, 103);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("}I-jXBfi#XI2");
      // Undeclared exception!
      try { 
        textStringBuilder0.appendln("G}mD3xp ", 0, 12);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      // Undeclared exception!
      try { 
        textStringBuilder0.append("8S<~fIP?N", 4, (-2045));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((-794));
      Class<ThaiBuddhistEra> class0 = ThaiBuddhistEra.class;
      EnumSet<ThaiBuddhistEra> enumSet0 = EnumSet.allOf(class0);
      textStringBuilder0.appendWithSeparators((Iterable<?>) enumSet0, "'w(UWfVw9V.d!a>3");
      assertTrue(textStringBuilder0.isReallocated());
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(86);
      // Undeclared exception!
      try { 
        textStringBuilder0.append((CharSequence) "", 1, 108);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      try { 
        textStringBuilder0.append((CharSequence) textStringBuilder0, (-1615), (-1615));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // endIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append((CharSequence) null, 22, 4);
      assertEquals(6, textStringBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("Q]{`E4");
      // Undeclared exception!
      try { 
        textStringBuilder0.append((CharSequence) "Q]{`E4", 32, 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // endIndex must be greater than startIndex
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append((CharSequence) null);
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("*0~h6Yp7hS+:z9TOR");
      CharBuffer charBuffer0 = CharBuffer.allocate(11);
      // Undeclared exception!
      try { 
        textStringBuilder0.append(charBuffer0, 11, 11);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 5);
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("N2#>!ae$['NzA^Vy");
      // Undeclared exception!
      try { 
        textStringBuilder0.append(charBuffer0, 5, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((CharSequence) null);
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        textStringBuilder0.append(charBuffer0, 17, (-2713));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(charBuffer0);
      textStringBuilder0.append((CharSequence) charBuffer0);
      assertEquals(2, textStringBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(charBuffer0);
      // Undeclared exception!
      try { 
        textStringBuilder0.toString(54, 54);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex > size
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      CharBuffer charBuffer0 = CharBuffer.allocate(1207);
      // Undeclared exception!
      try { 
        textStringBuilder0.append(charBuffer0, (-755), 771);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      // Undeclared exception!
      try { 
        textStringBuilder0.append(charArray0, 4, 4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 4
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      char[] charArray0 = new char[1];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      TextStringBuilder.TextStringBuilderWriter textStringBuilder_TextStringBuilderWriter0 = textStringBuilder0.new TextStringBuilderWriter();
      // Undeclared exception!
      try { 
        textStringBuilder_TextStringBuilderWriter0.write(charArray0, 112, 112);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 112
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder.TextStringBuilderWriter textStringBuilder_TextStringBuilderWriter0 = textStringBuilder0.new TextStringBuilderWriter();
      textStringBuilder_TextStringBuilderWriter0.write((char[]) null, 0, 542);
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("aQ3,e<kis<;'R{M,0");
      TextStringBuilder textStringBuilder1 = textStringBuilder0.append((char[]) null);
      assertEquals(49, textStringBuilder1.capacity());
      assertEquals(17, textStringBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        TextStringBuilder.wrap(charArray0, (-676));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initialBuffer.length=0, length=-676
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      char[] charArray0 = new char[0];
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      textStringBuilder_TextStringBuilderTokenizer0.tokenize(charArray0, 116, (-2206));
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      long long0 = textStringBuilder_TextStringBuilderReader0.skip((-1));
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0L, long0);
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((CharSequence) null);
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      int int0 = textStringBuilder0.readFrom((Readable) textStringBuilder_TextStringBuilderReader0);
      assertEquals(0, textStringBuilder0.size());
      assertEquals((-1), int0);
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      // Undeclared exception!
      try { 
        textStringBuilder_TextStringBuilderReader0.read(charArray0, 4, 4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.TextStringBuilder$TextStringBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("");
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        textStringBuilder_TextStringBuilderReader0.read(charArray0, 30, 30);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.TextStringBuilder$TextStringBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      Reader reader0 = textStringBuilder0.asReader();
      // Undeclared exception!
      try { 
        reader0.read(charArray0, 52, (-1199));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.TextStringBuilder$TextStringBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("initialBuffer.length=");
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      // Undeclared exception!
      textStringBuilder0.readFrom((Readable) textStringBuilder_TextStringBuilderReader0);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      // Undeclared exception!
      try { 
        textStringBuilder_TextStringBuilderReader0.read(charArray0, (-650), (-650));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.TextStringBuilder$TextStringBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      assertFalse(textStringBuilder_TextStringBuilderReader0.ready());
      
      int int0 = textStringBuilder_TextStringBuilderReader0.read();
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals((-1), int0);
      assertEquals(0, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      char[] charArray0 = new char[0];
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((String) null);
      TextStringBuilder.TextStringBuilderWriter textStringBuilder_TextStringBuilderWriter0 = textStringBuilder0.new TextStringBuilderWriter();
      textStringBuilder_TextStringBuilderWriter0.write(charArray0);
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder.TextStringBuilderWriter textStringBuilder_TextStringBuilderWriter0 = textStringBuilder0.new TextStringBuilderWriter();
      textStringBuilder_TextStringBuilderWriter0.close();
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder.TextStringBuilderWriter textStringBuilder_TextStringBuilderWriter0 = textStringBuilder0.new TextStringBuilderWriter();
      textStringBuilder_TextStringBuilderWriter0.append((CharSequence) textStringBuilder0);
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals(0, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      char[] charArray0 = new char[1];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      StringBuilder stringBuilder0 = textStringBuilder0.toStringBuilder();
      assertEquals(1, textStringBuilder0.size());
      assertEquals("\u0000", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.getNewLineText();
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("Tp`6>Q%b(");
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      int int0 = textStringBuilder_TextStringBuilderReader0.read();
      assertEquals(41, textStringBuilder0.capacity());
      assertEquals(84, int0);
      assertEquals(9, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        TextStringBuilder.wrap(charArray0, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initialBuffer.length=3, length=5
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) textStringBuilder0);
      int int0 = textStringBuilder0.readFrom(charBuffer0);
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(115);
      textStringBuilder0.appendln((StringBuilder) null);
      assertEquals(1, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      try { 
        textStringBuilder0.insert(1666, (double) 1666);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1666
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("Q]B`E4");
      textStringBuilder0.appendFixedWidthPadRight((Object) null, 6, ' ');
      assertEquals(12, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("");
      // Undeclared exception!
      try { 
        textStringBuilder0.insert(0, (long) 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 0
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      try { 
        textStringBuilder0.substring(421);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("endIndex must be greater than startIndex");
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getDelimiterMatcher();
      textStringBuilder0.deleteFirst(stringMatcher0);
      assertEquals(39, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.hashCode();
      assertEquals(6, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((CharSequence) "*0Hh6,p1h$S:z9TOR");
      int int0 = textStringBuilder0.indexOf('s');
      assertEquals(17, textStringBuilder0.length());
      assertEquals(49, textStringBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      int int0 = textStringBuilder0.capacity();
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("No exit advice defined by ");
      char char0 = textStringBuilder0.charAtDelete(0);
      assertEquals(25, textStringBuilder0.size());
      assertEquals('N', char0);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      char[] charArray0 = new char[1];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      textStringBuilder0.appendln(textStringBuilder0);
      assertEquals(3, textStringBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.appendln((-262L));
      assertEquals(5, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("aQ3,e<kis<;'R{M,0");
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      StringMatcher stringMatcher0 = textStringBuilder_TextStringBuilderTokenizer0.getDelimiterMatcher();
      int int0 = textStringBuilder0.indexOf(stringMatcher0);
      assertEquals(49, textStringBuilder0.capacity());
      assertEquals(17, textStringBuilder0.length());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(stringBuilder0);
      TextStringBuilder.TextStringBuilderWriter textStringBuilder_TextStringBuilderWriter0 = textStringBuilder0.new TextStringBuilderWriter();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        textStringBuilder_TextStringBuilderWriter0.write(charArray0, 0, (-335));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -335
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("a43,e<kis<;'R{M,0");
      textStringBuilder0.appendln((float) 1);
      assertEquals(21, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("org.apache.common.io.filefilter.WildcardFilFilter");
      // Undeclared exception!
      try { 
        textStringBuilder0.insert(164, 285);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 164
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("'=-M");
      StringTokenizer stringTokenizer0 = textStringBuilder0.asTokenizer();
      textStringBuilder0.appendAll((Iterator<?>) stringTokenizer0);
      assertEquals(0, stringTokenizer0.previousIndex());
      assertEquals(8, textStringBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      CharSequence charSequence0 = textStringBuilder0.subSequence(0, 0);
      assertEquals("", charSequence0);
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("org.apache.commons.io.filefilter.WildcardFileFilter");
      TextStringBuilder textStringBuilder1 = textStringBuilder0.setCharAt(5, '9');
      assertEquals(83, textStringBuilder1.capacity());
      assertEquals(51, textStringBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.appendln("", (Object[]) null);
      assertEquals(1, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      StringBuffer stringBuffer0 = textStringBuilder0.toStringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("");
      // Undeclared exception!
      try { 
        textStringBuilder0.insert(256, (float) 256);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 256
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        textStringBuilder0.appendln(stringBuilder0, 612, 6);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("");
      String string0 = textStringBuilder0.build();
      assertEquals("", string0);
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendSeparator("");
      assertTrue(textStringBuilder1.isEmpty());
      assertEquals(32, textStringBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        textStringBuilder0.appendln(charArray0, (-1952), (-1952));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: -1952
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("Q]{`E4");
      int int0 = textStringBuilder0.indexOf("Q]{`E4");
      assertEquals(0, int0);
      assertEquals(38, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((CharSequence) "org.apache.commons.io.filefilter.WildcardFileFilter");
      // Undeclared exception!
      try { 
        textStringBuilder0.toString((-132), 412);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -132
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      try { 
        textStringBuilder0.deleteCharAt((-14));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -14
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((-794));
      int int0 = textStringBuilder0.lastIndexOf('o');
      assertEquals((-1), int0);
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      try { 
        textStringBuilder0.insert(64, '&');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 64
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      Writer writer0 = textStringBuilder0.asWriter();
      writer0.flush();
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      textStringBuilder0.appendFixedWidthPadLeft((-1653), 1487, ' ');
      boolean boolean0 = textStringBuilder0.endsWith("rnpiY6W%!P/~m&V>.W");
      assertFalse(textStringBuilder0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(">SJ{");
      textStringBuilder0.append(1251.492868518584);
      assertEquals(21, textStringBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(102);
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      textStringBuilder_TextStringBuilderReader0.close();
      assertEquals(102, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      boolean boolean0 = textStringBuilder_TextStringBuilderReader0.markSupported();
      assertTrue(boolean0);
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      Reader reader0 = textStringBuilder0.asReader();
      reader0.reset();
      assertFalse(reader0.ready());
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder.TextStringBuilderReader textStringBuilder_TextStringBuilderReader0 = textStringBuilder0.new TextStringBuilderReader();
      textStringBuilder_TextStringBuilderReader0.mark(10);
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      TextStringBuilder.TextStringBuilderTokenizer textStringBuilder_TextStringBuilderTokenizer0 = textStringBuilder0.new TextStringBuilderTokenizer();
      String string0 = textStringBuilder_TextStringBuilderTokenizer0.getContent();
      assertEquals(32, textStringBuilder0.capacity());
      assertNotNull(string0);
      assertEquals("", string0);
  }
}
