/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 20:42:37 GMT 2025
 */

package org.apache.commons.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.time.format.TextStyle;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import org.apache.commons.text.StringSubstitutor;
import org.apache.commons.text.TextStringBuilder;
import org.apache.commons.text.lookup.StringLookup;
import org.apache.commons.text.matcher.StringMatcher;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class StringSubstitutor_ESTest extends StringSubstitutor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_SUFFIX;
      assertEquals(1, stringMatcher0.size());
      assertNotNull(stringMatcher0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, '0', stringMatcher0);
      assertEquals(1, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('0', stringSubstitutor0.getEscapeChar());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      String string0 = stringSubstitutor0.replace("A[g@B1iwi<'A+>~w`pb", 0, 19);
      assertEquals(1, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('0', stringSubstitutor0.getEscapeChar());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(string0);
      assertEquals("A[g@B1iwi<'A+>~w`pb", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      char[] charArray0 = new char[5];
      String string0 = stringSubstitutor0.replace(charArray0, 0, 2);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals("\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      doReturn("q((-7Ko'?]Yi").when(stringLookup0).toString();
      doReturn("q((-7Ko'?]Yi").when(stringLookup0).lookup(anyString());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "q((-7Ko'?]Yi", "q((-7Ko'?]Yi", 'f');
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('f', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("q((-7Ko'?]Yiq((-7Ko'?]Yiorg.apachecommons.text.lookup.StringLookup$MocktoMock1930316326@0000000005org.apacheecommons.text.matcher.AbstractStringMatche$ChaArrayMatcher@0000000006");
      assertEquals(209, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(177, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(177, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertNotNull(textStringBuilder0);
      
      Object[] objectArray0 = new Object[19];
      objectArray0[11] = (Object) textStringBuilder0;
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendAll(objectArray0);
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(708, textStringBuilder0.capacity());
      assertEquals(354, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(354, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(354, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNullText());
      assertNull(textStringBuilder1.getNewLineText());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(354, textStringBuilder1.length());
      assertEquals(708, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isEmpty());
      assertTrue(textStringBuilder1.isReallocated());
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(19, objectArray0.length);
      
      boolean boolean0 = stringSubstitutor0.substitute(textStringBuilder0, 121, 121);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('f', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals(342, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(708, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(342, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("");
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNotNull(textStringBuilder0);
      
      boolean boolean0 = stringSubstitutor0.substitute(textStringBuilder0, (-1355), (-1355));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariableSuffixMatcher(stringSubstitutor0.DEFAULT_PREFIX);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((StringLookup) null);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariableSuffixMatcher(stringSubstitutor1.DEFAULT_VALUE_DELIMITER);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_SUFFIX;
      assertEquals(1, stringMatcher0.size());
      assertNotNull(stringMatcher0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, '\'', stringMatcher0);
      assertEquals(1, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('\'', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertEquals(1, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('\'', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('\'', stringSubstitutor1.getEscapeChar());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableSuffixMatcher(stringSubstitutor0.DEFAULT_SUFFIX);
      assertEquals(1, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('\'', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('\'', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariableSuffixMatcher(stringSubstitutor0.DEFAULT_PREFIX);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariableSuffix(":-");
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((StringLookup) null);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableSuffix("");
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableSuffix("}");
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "GQjEBXKe=5F", "GQjEBXKe=5F", '9');
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('9', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableSuffix("q((-7Ko'?]Yiorg.apache.commons.text.StringSubstitutor@0000000001GQjEBXKe=5F");
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('9', stringSubstitutor2.getEscapeChar());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((StringLookup) null, "zpY$39o&S", "zpY$39o&S", 'x', "zpY$39o&S");
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('x', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertEquals('x', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('x', stringSubstitutor1.getEscapeChar());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariableSuffix('x');
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertEquals('x', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('x', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('x', stringSubstitutor2.getEscapeChar());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableSuffix('3');
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableSuffix('K');
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_VALUE_DELIMITER;
      assertEquals(2, stringMatcher0.size());
      assertNotNull(stringMatcher0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, 'P');
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('P', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('P', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('P', stringSubstitutor1.getEscapeChar());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableSuffix('a');
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('P', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('P', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "q((-7Ko'?c]Ygq((-7Ko'?c]Ygorg.apache.commons.text.StringSubstitutor@0000000001", "", '\'');
      assertEquals('\'', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertEquals('\'', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('\'', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringLookup stringLookup1 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariableResolver(stringLookup1);
      assertEquals('\'', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('\'', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('\'', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableResolver(stringLookup0);
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<String, ChronoLocalDate> hashMap0 = new HashMap<String, ChronoLocalDate>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, ChronoLocalDate>) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariableResolver(stringLookup0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<String, ChronoLocalDate> hashMap0 = new HashMap<String, ChronoLocalDate>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, ChronoLocalDate>) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariableResolver(stringLookup0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "java.lang.Character@0000000005", "z\" ?p_>pYFR(mv)NRP\"");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariablePrefixMatcher(stringSubstitutor0.DEFAULT_VALUE_DELIMITER);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<String, ChronoLocalDate> hashMap0 = new HashMap<String, ChronoLocalDate>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, ChronoLocalDate>) hashMap0, "yZ'2a=m.YU1+|z", "]", 'W', "]");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('W', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('W', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('W', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariablePrefixMatcher(stringSubstitutor0.DEFAULT_VALUE_DELIMITER);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('W', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('W', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('W', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariablePrefixMatcher(stringSubstitutor1.DEFAULT_PREFIX);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariablePrefixMatcher(stringSubstitutor0.DEFAULT_PREFIX);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "q((-7Ko'?c]Ygq((-7Ko'?c]Ygorg.apache.commons.text.StringSubstitutor@0000000001", "", '\'');
      assertEquals('\'', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertEquals('\'', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('\'', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariablePrefix("");
      assertEquals('\'', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertEquals('\'', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariablePrefix("g}}");
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariablePrefix("${");
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "GQjEBXKe=5F", "GQjEBXKe=5F", '9');
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('9', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariablePrefix("cwd=-.");
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('9', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('9', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((StringLookup) null);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariablePrefix('r');
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariablePrefix('P');
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_SUFFIX;
      assertEquals(1, stringMatcher0.size());
      assertNotNull(stringMatcher0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, ';');
      assertEquals(1, stringMatcher0.size());
      assertEquals(';', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertEquals(1, stringMatcher0.size());
      assertEquals(';', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals(';', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariablePrefix('$');
      assertEquals(1, stringMatcher0.size());
      assertEquals(';', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals(';', stringSubstitutor2.getEscapeChar());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_SUFFIX;
      assertEquals(1, stringMatcher0.size());
      assertNotNull(stringMatcher0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, '0', stringMatcher0);
      assertEquals(1, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('0', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertEquals(1, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('0', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('0', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setValueDelimiterMatcher(stringSubstitutor0.DEFAULT_PREFIX);
      assertEquals(1, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('0', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('0', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('0', stringSubstitutor2.getEscapeChar());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((StringLookup) null);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setValueDelimiterMatcher(stringSubstitutor0.DEFAULT_PREFIX);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, ":-", ":-", 'E');
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('E', stringSubstitutor0.getEscapeChar());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('E', stringSubstitutor0.getEscapeChar());
      assertEquals('E', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setValueDelimiterMatcher(stringSubstitutor1.DEFAULT_SUFFIX);
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('E', stringSubstitutor0.getEscapeChar());
      assertEquals('E', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals('E', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setValueDelimiterMatcher(stringSubstitutor0.DEFAULT_PREFIX);
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "GQjEBXKe=5F", "GQjEBXKe=5F", '9');
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('9', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setValueDelimiter("`K#.zH~m'ZM|l,T9P8");
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('9', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertEquals('9', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((StringLookup) null);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setValueDelimiter(":-");
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setValueDelimiter("");
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "q((-7Ko'?]Yi", "q((-7Ko'?]Yi", '3');
      assertEquals('3', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertEquals('3', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('3', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setValueDelimiter("}+h8Uzk2n o/$4#+*}org.apache.commons.text.lookup.StringLookup$MockitoMock$1930316326@0000000005q((-7Ko'?]Yiq((-7Ko'?]Yiorg.apache.commons.text.StringSubstitutor@0000000001org.apache.commons.text.matcher.AbstractStringMatcher$CharMatcher@0000000005");
      assertEquals('3', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('3', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setValueDelimiter('p');
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setValueDelimiter('$');
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setValueDelimiter('.');
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<String, ChronoLocalDate> hashMap0 = new HashMap<String, ChronoLocalDate>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, ChronoLocalDate>) hashMap0, "yZ'2a=m.YU1+|z", "]", 'W', "]");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('W', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('W', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('W', stringSubstitutor1.getEscapeChar());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setPreserveEscapes(false);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('W', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('W', stringSubstitutor2.getEscapeChar());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setPreserveEscapes(true);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_SUFFIX;
      assertEquals(1, stringMatcher0.size());
      assertNotNull(stringMatcher0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, ';');
      assertEquals(1, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals(';', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertEquals(1, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals(';', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals(';', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setPreserveEscapes(true);
      assertEquals(1, stringMatcher0.size());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals(';', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertEquals(';', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "q((-7Ko'?c]Ygq((-7Ko'?c]Ygorg.apache.commons.text.StringSubstitutor@0000000001", "", '\'');
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('\'', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('\'', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('\'', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setEscapeChar('!');
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertEquals('!', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertEquals('!', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((StringLookup) null);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setEscapeChar('$');
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "gX.$3~v1c6M5", ", Length: ", 'V', "gX.$3~v1c6M5");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('V', stringSubstitutor0.getEscapeChar());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('V', stringSubstitutor0.getEscapeChar());
      assertEquals('V', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setEscapeChar('Y');
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('Y', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('Y', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setEscapeChar('?');
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('?', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('?', stringSubstitutor2.getEscapeChar());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, String>) hashMap0, "Variable suffix must not be null!", "Variable suffix must not be null!", 'b', "Variable suffix must not be null!");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('b', stringSubstitutor0.getEscapeChar());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('b', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('b', stringSubstitutor1.getEscapeChar());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setEnableUndefinedVariableException(false);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('b', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('b', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('b', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_SUFFIX;
      assertEquals(1, stringMatcher0.size());
      assertNotNull(stringMatcher0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, ';');
      assertEquals(1, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals(';', stringSubstitutor0.getEscapeChar());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertEquals(1, stringMatcher0.size());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals(';', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals(';', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setEnableUndefinedVariableException(false);
      assertEquals(1, stringMatcher0.size());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals(';', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals(';', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "GQjEBXKe=5F", "GQjEBXKe=5F", '9');
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('9', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('9', stringSubstitutor2.getEscapeChar());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setEnableSubstitutionInVariables(false);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<String, ChronoLocalDate> hashMap0 = new HashMap<String, ChronoLocalDate>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, ChronoLocalDate>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setEnableSubstitutionInVariables(true);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_SUFFIX;
      assertEquals(1, stringMatcher0.size());
      assertNotNull(stringMatcher0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, '0', stringMatcher0);
      assertEquals(1, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('0', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertEquals(1, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('0', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertEquals('0', stringSubstitutor1.getEscapeChar());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertEquals(1, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('0', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('0', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_SUFFIX;
      assertEquals(1, stringMatcher0.size());
      assertNotNull(stringMatcher0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, '\'', stringMatcher0);
      assertEquals(1, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('\'', stringSubstitutor0.getEscapeChar());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertEquals(1, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('\'', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('\'', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setDisableSubstitutionInValues(true);
      assertEquals(1, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('\'', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('\'', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('\'', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((StringLookup) null, "org.apache.commons.text.StringSubstitutor@0000000001", "'9PwA2y0h^D", 'O', "mQ]kj1Pu+>(u");
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('O', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(false);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('O', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('O', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(stringLookup0).toString();
      doReturn((String) null).when(stringLookup0).lookup(anyString());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "", "", 'Y', "");
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('Y', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      char[] charArray0 = new char[1];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNull(textStringBuilder0.getNullText());
      assertEquals(1, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(1, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(1, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertNotNull(textStringBuilder0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      String string0 = stringSubstitutor0.resolveVariable("${", textStringBuilder0, 533, 2);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('Y', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(1, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(1, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(1, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNull(string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      doReturn("Search and Replace array lengths don't match: ").when(stringLookup0).toString();
      doReturn("").when(stringLookup0).lookup(anyString());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "", "", 'Y', "");
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('Y', stringSubstitutor0.getEscapeChar());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      char[] charArray0 = new char[1];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertEquals(1, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(1, textStringBuilder0.size());
      assertEquals(1, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertNotNull(textStringBuilder0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      String string0 = stringSubstitutor0.resolveVariable("${", textStringBuilder0, 533, 2);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('Y', stringSubstitutor0.getEscapeChar());
      assertEquals(1, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(1, textStringBuilder0.size());
      assertEquals(1, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = StringSubstitutor.replaceSystemProperties((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringSubstitutor.replaceSystemProperties(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      doReturn("q((-7Ko'?]Yi").when(stringLookup0).toString();
      doReturn("q((-7Ko'?]Yi").when(stringLookup0).lookup(anyString());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "q((-7Ko'?]Yi", "q((-7Ko'?]Yi", '\u001C');
      assertEquals('\u001C', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("q((-7Ko'?]Yiq((-7Ko'?]Yiorg.apachecommons.text.lookup.StringLookup$MockitoMock$1930316326@0000000005org.apacheecommons.text.matcher.AbstractStringMatche$CharArrayMatcher@0000000006");
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(180, textStringBuilder0.size());
      assertEquals(212, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(180, textStringBuilder0.length());
      assertNotNull(textStringBuilder0);
      
      boolean boolean0 = stringSubstitutor0.replaceIn(textStringBuilder0);
      assertEquals('\u001C', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(212, textStringBuilder0.capacity());
      assertEquals(168, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(168, textStringBuilder0.size());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      doReturn("q((-7Ko'?]Yi").when(stringLookup0).toString();
      doReturn("q((-7Ko'?]Yi").when(stringLookup0).lookup(anyString());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "q((-7Ko'?]Yi", "q((-7Ko'?]Yi", '3');
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('3', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringBuffer stringBuffer0 = new StringBuffer("q((-7Ko'?]Yiq((-7Ko'?]Yiorg.apache.commons.text.StringSubstitutor@0000000001org.apache.commons.text.matcher.AbstractStrngMatcher$CharMatcher@0000000005");
      assertEquals(151, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuffer0);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('3', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals(139, stringBuffer0.length());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      char[] charArray0 = new char[3];
      String string0 = stringSubstitutor0.replace(charArray0, 0, 0);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      char[] charArray0 = new char[8];
      String string0 = stringSubstitutor0.replace(charArray0);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_PREFIX;
      assertEquals(2, stringMatcher0.size());
      assertNotNull(stringMatcher0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, 'E', stringMatcher0);
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('E', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("");
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(32, textStringBuilder0.capacity());
      assertNotNull(textStringBuilder0);
      
      String string0 = stringSubstitutor0.replace(textStringBuilder0, 0, 0);
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('E', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertNotNull(textStringBuilder0);
      
      String string0 = stringSubstitutor0.replace(textStringBuilder0);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((StringLookup) null, "org.apache.commons.text.StringSubstitutor@0000000001", "'9PwA2y0h^D", 'O', "mQ]kj1Pu+>(u");
      assertEquals('O', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringBuffer stringBuffer0 = new StringBuffer("${");
      assertEquals(2, stringBuffer0.length());
      assertEquals("${", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      String string0 = stringSubstitutor0.replace(stringBuffer0, 1, 0);
      assertEquals('O', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals(2, stringBuffer0.length());
      assertEquals("${", stringBuffer0.toString());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      String string0 = stringSubstitutor0.replace(stringBuffer0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      String string0 = stringSubstitutor0.replace(":-", 0, 0);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_SUFFIX;
      assertEquals(1, stringMatcher0.size());
      assertNotNull(stringMatcher0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, '9', stringMatcher0);
      assertEquals(1, stringMatcher0.size());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      String string0 = stringSubstitutor0.replace("");
      assertEquals(1, stringMatcher0.size());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      String string0 = StringSubstitutor.replace((Object) null, properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string0 = StringSubstitutor.replace((Object) null, (Map<String, Object>) hashMap0, "", "}");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = StringSubstitutor.replace((Object) "", (Map<String, Object>) hashMap0, "org.apache.commons.text.StringSubstitutor", "q((-7Ko'?]Yi");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      String string0 = StringSubstitutor.replace(object0, map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = StringSubstitutor.replace((Object) stringBuffer0, (Map<String, Object>) hashMap0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = stringSubstitutor0.replace(object0);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "q((-7Ko'?]Yi", "q((-7Ko'?]Yi", '3');
      assertEquals('3', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      String string0 = stringSubstitutor0.replace((CharSequence) "q((-7Ko'?]Yiorg.apache.commons.text.lookup.StringLookup$MockitoMock$1930316326@0000000006q((-7Ko'?]Yiorg.apache.commons.text.StringSubstitutor@0000000001q((-7Ko'?]Yi", 23, 23);
      assertEquals('3', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(string0);
      assertEquals("commons.text.lookup.Str", string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      String string0 = stringSubstitutor0.replace((CharSequence) "org.apache.commons.text.StringSubstitutor@0000000001", 0, 0);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "GQjEBXKe=5F", "GQjEBXKe=5F", '9');
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      String string0 = stringSubstitutor0.replace((CharSequence) "");
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_SUFFIX;
      assertEquals(1, stringMatcher0.size());
      assertNotNull(stringMatcher0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, '0', stringMatcher0);
      assertEquals(1, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('0', stringSubstitutor0.getEscapeChar());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertEquals(1, stringMatcher0.size());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('0', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertEquals('0', stringSubstitutor1.getEscapeChar());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      boolean boolean0 = stringSubstitutor0.isPreserveEscapes();
      assertEquals(1, stringMatcher0.size());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('0', stringSubstitutor0.getEscapeChar());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      boolean boolean0 = stringSubstitutor1.isEnableUndefinedVariableException();
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      boolean boolean0 = stringSubstitutor0.isEnableSubstitutionInVariables();
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "os.versionjava.lang.Object@0000000002", "os.versionjava.lang.Object@0000000002", '-', "Q8_JtPi+4h,sBJ.7");
      assertEquals('-', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertEquals('-', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('-', stringSubstitutor1.getEscapeChar());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      boolean boolean0 = stringSubstitutor0.isDisableSubstitutionInValues();
      assertEquals('-', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setValueDelimiterMatcher((StringMatcher) null);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringMatcher stringMatcher0 = stringSubstitutor0.getValueDelimiterMatcher();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNull(stringMatcher0);
      assertSame(stringSubstitutor0, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "gX.$3~v1c6M5", ", Length: ", 'V', "gX.$3~v1c6M5");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('V', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringLookup stringLookup0 = stringSubstitutor0.getStringLookup();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('V', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringLookup0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_SUFFIX;
      assertEquals(1, stringMatcher0.size());
      assertNotNull(stringMatcher0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, '9', stringMatcher0);
      assertEquals(1, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      char char0 = stringSubstitutor0.getEscapeChar();
      assertEquals(1, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('9', char0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "", "", 'i');
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('i', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      char char0 = stringSubstitutor0.getEscapeChar();
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('i', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('i', char0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "", "", 'Y', "");
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('Y', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("4,nQIuau");
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(8, textStringBuilder0.size());
      assertEquals(8, textStringBuilder0.length());
      assertEquals(40, textStringBuilder0.capacity());
      assertNotNull(textStringBuilder0);
      
      // Undeclared exception!
      stringSubstitutor0.substitute(textStringBuilder0, Integer.MIN_VALUE, (-1300));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertNotNull(textStringBuilder0);
      
      // Undeclared exception!
      try { 
        stringSubstitutor0.substitute(textStringBuilder0, 56, 56);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 56
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      // Undeclared exception!
      try { 
        stringSubstitutor0.substitute((TextStringBuilder) null, 6, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // builder
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "r", "r", '[');
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('[', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("q((-7Ko'?]Yiq((-7Ko'?]Yiorg.apachecommons.text.lookup.StringLookup$MocktoMock1930316326@0000000005org.apacheecommons.text.matcher.AstractStringMatche$haArrayMatcher@0000000006");
      assertEquals(175, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(175, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(207, textStringBuilder0.capacity());
      assertNotNull(textStringBuilder0);
      
      // Undeclared exception!
      try { 
        stringSubstitutor0.replaceIn(textStringBuilder0, 0, 256);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      doReturn("q((-7Ko'?]Yi", "q((-7Ko'?]Yi", "q((-7Ko'?]Yi", "q((-7Ko'?]Yi", "q((-7Ko'?]Yi").when(stringLookup0).toString();
      doReturn("q((-7Ko'?]Yi", "q((-7Ko'?]Yi", "q((-7Ko'?]Yi", "q((-7Ko'?]Yi", "q((-7Ko'?]Yiq((-7Ko'?]Yiorg.apache.commons.text.lookup.StringLookup$MockitoMock$1930316326@0000000005org.apache.commons.text.matcher.AbstractStringMatcher$CharArrayMatcher@0000000006").when(stringLookup0).lookup(anyString());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "q((-7Ko'?]Yi", "q((-7Ko'?]Yi", '\u001B');
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('\u001B', stringSubstitutor0.getEscapeChar());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("q((-7Ko'?]Yiq((-7Ko'?]Yiorg.apache.commons.text.lookup.StringLookup$MockitoMock$1930316326@0000000005org.apache.commons.text.matcher.AbstractStringMatcher$CharArrayMatcher@0000000006");
      assertEquals(182, textStringBuilder0.length());
      assertEquals(182, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(214, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNotNull(textStringBuilder0);
      
      String string0 = stringSubstitutor0.resolveVariable("q((-7Ko'?]Yi", textStringBuilder0, '$', '\u001B');
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('\u001B', stringSubstitutor0.getEscapeChar());
      assertEquals(182, textStringBuilder0.length());
      assertEquals(182, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(214, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(string0);
      assertEquals("q((-7Ko'?]Yi", string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "q((-7Ko'?]Yi";
      objectArray0[1] = (Object) textStringBuilder0;
      objectArray0[2] = (Object) "q((-7Ko'?]Yiq((-7Ko'?]Yiorg.apache.commons.text.lookup.StringLookup$MockitoMock$1930316326@0000000005org.apache.commons.text.matcher.AbstractStringMatcher$CharArrayMatcher@0000000006";
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendAll(objectArray0);
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(570, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(776, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(570, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertEquals(570, textStringBuilder1.size());
      assertNull(textStringBuilder1.getNullText());
      assertNull(textStringBuilder1.getNewLineText());
      assertFalse(textStringBuilder1.isEmpty());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(776, textStringBuilder1.capacity());
      assertEquals(570, textStringBuilder1.length());
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(3, objectArray0.length);
      
      // Undeclared exception!
      try { 
        stringSubstitutor0.replaceIn(textStringBuilder1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Infinite loop in property interpolation of q((-7Ko'?]Yiq((-7Ko'?]Yiorg.apache.commons.text.lookup.StringLookup$MockitoMock$1930316326@0000000005org.apache.commons.text.matcher.AbstractStringMatcher$CharArrayMatcher@0000000006q((-7Ko'?]Yiq((-7Ko'?]Yiq((-7Ko'?]Yiorg.apache.commons.text.lookup.StringLookup$MockitoMock$1930316326@0000000005org.apache.commons.text.matcher.AbstractStringMatcher$CharArrayMatcher@0000000006q((-7Ko'?]Yiq((-7Ko'?]Yiq((-7Ko'?]Yiorg.apache.commons.text.lookup.StringLookup$MockitoMock$1930316326@0000000005org.apache.commons.text.matcher.AbstractStringMatcher$CharArrayMatcher@0000000006: 
         //
         verifyException("org.apache.commons.text.StringSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringBuilder stringBuilder0 = new StringBuilder("}");
      assertEquals("}", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      // Undeclared exception!
      try { 
        stringSubstitutor0.replaceIn(stringBuilder0, (int) '$', (int) '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      doReturn("r", "r", "r", "r", "r").when(stringLookup0).toString();
      doReturn("r", "r", "r", "r", "q((-7Ko'?]Yiq((-7Ko'?]Yiorg.apachecommons.text.lookup.StringLookup$MocktoMock1930316326@0000000005org.apacheecommons.text.matcher.AbstractStringMatche$ChaArrayMatcher@0000000006").when(stringLookup0).lookup(anyString());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "r", "r", 'I');
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('I', stringSubstitutor0.getEscapeChar());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("q((-7Ko'?]Yiq((-7Ko'?]Yiorg.apachecommons.text.lookup.StringLookup$MocktoMock1930316326@0000000005org.apacheecommons.text.matcher.AbstractStringMatche$ChaArrayMatcher@0000000006");
      assertEquals(209, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(177, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(177, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertNotNull(textStringBuilder0);
      
      String string0 = stringSubstitutor0.replace(textStringBuilder0);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('I', stringSubstitutor0.getEscapeChar());
      assertEquals(209, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(177, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(177, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(string0);
      
      StringBuilder stringBuilder0 = new StringBuilder("q((-7Ko'?]Yiq((-7Ko'?]YioringLookup$MocktoMock1930316326@0000000005or.AbstringMatche$ChaArayMatcher@0000000006");
      assertNotNull(stringBuilder0);
      
      // Undeclared exception!
      try { 
        stringSubstitutor0.replaceIn(stringBuilder0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Infinite loop in property interpolation of q((-7Ko'?]Yiq((-7Ko'?]YioringLookup$MocktoMock1930316326@0000000005or.AbstringMatche$ChaArayMatcher@0000000006: ingLookup$MocktoMock1930316326@0000000005o->g.apachecommons.text.lookup.St
         //
         verifyException("org.apache.commons.text.StringSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "${");
      assertEquals(2, stringBuffer0.length());
      assertEquals("${", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try { 
        stringSubstitutor0.replaceIn(stringBuffer0, (int) '$', (int) '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      doReturn("q((-7Ko'?]Yi", "q((-7Ko'?]Yi", "q((-7Ko'?]Yi", "q((-7Ko'?]Yi", "q((-7Ko'?]Yi").when(stringLookup0).toString();
      doReturn("q((-7Ko'?]Yi", "q((-7Ko'?]Yi", "q((-7Ko'?]Yi", "q((-7Ko'?]Yi", "q((-7Ko'?]Yiq((-7Ko'?]Yiorg.apachecommons.text.lookup.StringLookup$MockitoMock1930316326@0000000005org.apacheecommons.text.matcher.AbstractStringMatche$ChaArrayMatcher@0000000006").when(stringLookup0).lookup(anyString());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "q((-7Ko'?]Yi", "q((-7Ko'?]Yi", 'e');
      assertEquals('e', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("q((-7Ko'?]Yiq((-7Ko'?]Yiorg.apachecommons.text.lookup.StringLookup$MockitoMock1930316326@0000000005org.apacheecommons.text.matcher.AbstractStringMatche$ChaArrayMatcher@0000000006");
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(210, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(178, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(178, textStringBuilder0.size());
      assertNotNull(textStringBuilder0);
      
      Object[] objectArray0 = new Object[23];
      objectArray0[11] = (Object) textStringBuilder0;
      objectArray0[8] = (Object) "q((-7Ko'?]Yiq((-7Ko'?]Yiorg.apachecommons.text.lookup.StringLookup$MockitoMock1930316326@0000000005org.apacheecommons.text.matcher.AbstractStringMatche$ChaArrayMatcher@0000000006";
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendAll(objectArray0);
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(712, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(712, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(712, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder1.isNotEmpty());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(712, textStringBuilder1.capacity());
      assertEquals(712, textStringBuilder1.length());
      assertTrue(textStringBuilder1.isReallocated());
      assertEquals(712, textStringBuilder1.size());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNewLineText());
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(23, objectArray0.length);
      
      String string0 = stringSubstitutor0.replace(textStringBuilder0);
      assertEquals('e', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(712, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(712, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(712, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(string0);
      assertSame(textStringBuilder0, textStringBuilder1);
      
      StringBuffer stringBuffer0 = new StringBuffer(textStringBuilder0);
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(712, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(712, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(712, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isReallocated());
      assertEquals(712, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try { 
        stringSubstitutor0.replaceIn(stringBuffer0, 136, 136);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Infinite loop in property interpolation of actStringMatche$ChaArrayMatcher@0000000006q((-7Ko'?]Yiq((-7Ko'?]Yiorg.apachecommons.text.lookup.StringLookup$MockitoMock1930316326@00000: 
         //
         verifyException("org.apache.commons.text.StringSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        stringSubstitutor0.replace(charArray0, (int) '$', (int) '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 36
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertNotNull(stringSubstitutor0);
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(":-");
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(2, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(34, textStringBuilder0.capacity());
      assertEquals(2, textStringBuilder0.size());
      assertNotNull(textStringBuilder0);
      
      // Undeclared exception!
      try { 
        stringSubstitutor0.replace(textStringBuilder0, 3556, 3556);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) stringSubstitutor0;
      objectArray0[1] = (Object) stringSubstitutor0;
      objectArray0[2] = (Object) textStringBuilder0;
      objectArray0[3] = (Object) textStringBuilder0;
      objectArray0[5] = (Object) textStringBuilder0;
      objectArray0[6] = (Object) textStringBuilder0;
      objectArray0[7] = (Object) textStringBuilder0;
      objectArray0[8] = (Object) textStringBuilder0;
      textStringBuilder0.appendAll(objectArray0);
      stringSubstitutor0.replace(textStringBuilder0);
      // Undeclared exception!
      stringSubstitutor0.replace(textStringBuilder0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      doReturn("q((-7Ko'?]Yi", "q((-7Ko'?]Yi", "q((-7Ko'?]Yi").when(stringLookup0).toString();
      doReturn("q((-7Ko'?]Yi", "q((-7Ko'?]Yi", (String) null).when(stringLookup0).lookup(anyString());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "q((-7Ko'?]Yi", "q((-7Ko'?]Yi", '3');
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      stringSubstitutor0.resolveVariable("q((-7Ko'?]Yi", textStringBuilder0, 181, '3');
      Object[] objectArray0 = new Object[8];
      stringSubstitutor0.replace("q((-7Ko'?]Yiq((-7Ko'?]Yiorg.apache.commons.text.lookup.StringLookup$MockitoMock$1930316326@0000000005org.apache.commons.text.matcher.AbstractStringMatcher$CharMatcher@0000000006");
      objectArray0[1] = (Object) "q((-7Ko'?]Yi";
      objectArray0[2] = (Object) "q((-7Ko'?]Yi";
      textStringBuilder0.appendAll(objectArray0);
      stringSubstitutor0.setEnableUndefinedVariableException(true);
      // Undeclared exception!
      try { 
        stringSubstitutor0.replace(textStringBuilder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot resolve variable '' (enableSubstitutionInVariables=false).
         //
         verifyException("org.apache.commons.text.StringSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "${");
      // Undeclared exception!
      try { 
        stringSubstitutor0.replace(stringBuffer0, 3191, 3191);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      doReturn("r", "r", "r", "r", "r").when(stringLookup0).toString();
      doReturn("r", "r", "r", "r", "q((-7Ko'?]Yiq((-7Ko'?]Yiorg.apachecommons.text.lookup.StringLookup$MocktoMock1930316326@0000000005org.apacheecommons.text.matcher.AbstractStringMatche$ChaArrayMatcher@0000000006").when(stringLookup0).lookup(anyString());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "r", "r", '[');
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("q((-7Ko'?]Yiq((-7Ko'?]Yiorg.apachecommons.text.lookup.StringLookup$MocktoMock1930316326@0000000005org.apacheecommons.text.matcher.AbstractStringMatche$ChaArrayMatcher@0000000006");
      stringSubstitutor0.replace(textStringBuilder0);
      // Undeclared exception!
      try { 
        stringSubstitutor0.replace("q((-7Ko'?]Yiq((-7Ko'?]Yiorg.apachecommons.text.lookup.StringLookup$MocktoMock1930316326@0000000005org.apacheecommons.text.matcher.AbstractStringMatche$ChaArrayMatcher@0000000006");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Infinite loop in property interpolation of q((-7Ko'?]Yiq((-7Ko'?]Yiorg.apachecommons.text.lookup.StringLookup$MocktoMock1930316326@0000000005org.apacheecommons.text.matcher.AbstractStringMatche$ChaArrayMatcher@0000000006: g.apachecommons.text.lookup.St
         //
         verifyException("org.apache.commons.text.StringSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      Properties properties0 = new Properties();
      properties0.put(stringSubstitutor0, "${");
      // Undeclared exception!
      try { 
        StringSubstitutor.replace((Object) stringSubstitutor0, properties0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.text.StringSubstitutor cannot be cast to java.lang.String
         //
         verifyException("java.util.Properties", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      // Undeclared exception!
      try { 
        StringSubstitutor.replace((Object) stringSubstitutor0, (Map<String, Object>) null, "${", "}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.lookup.FunctionStringLookup", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        StringSubstitutor.replace((Object) null, (Map<String, Object>) hashMap0, (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("${");
      // Undeclared exception!
      try { 
        StringSubstitutor.replace((Object) stringBuffer0, (Map<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.lookup.FunctionStringLookup", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      doReturn("q((-7Ko'?]Yi", "q((-7Ko'?]Yi", "q((-7Ko'?]Yi", "q((-7Ko'?]Yi", "q((-7Ko'?]Yi").when(stringLookup0).toString();
      doReturn("q((-7Ko'?]Yi", "q((-7Ko'?]Yi", "q((-7Ko'?]Yi", "q((-7Ko'?]Yi", "q((-7Ko'?]Yiq((-7Ko'?]Yiorg.apachecommons.text.lookup.StringLookup$MockitoMock$1930316326@0000000005org.apacheecommons.text.matcher.AbstractStringMatche$CharArrayMatcher@0000000006").when(stringLookup0).lookup(anyString());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "q((-7Ko'?]Yi", "q((-7Ko'?]Yi", '\u001C');
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("q((-7Ko'?]Yiq((-7Ko'?]Yiorg.apachecommons.text.lookup.StringLookup$MockitoMock$1930316326@0000000005org.apacheecommons.text.matcher.AbstractStringMatche$CharArrayMatcher@0000000006");
      stringSubstitutor0.resolveVariable("q((-7Ko'?]Yi", textStringBuilder0, '$', '\u001C');
      Object[] objectArray0 = new Object[15];
      objectArray0[0] = (Object) "q((-7Ko'?]Yi";
      objectArray0[1] = (Object) textStringBuilder0;
      objectArray0[2] = (Object) "q((-7Ko'?]Yiq((-7Ko'?]Yiorg.apachecommons.text.lookup.StringLookup$MockitoMock$1930316326@0000000005org.apacheecommons.text.matcher.AbstractStringMatche$CharArrayMatcher@0000000006";
      textStringBuilder0.appendAll(objectArray0);
      // Undeclared exception!
      try { 
        stringSubstitutor0.replace(objectArray0[1]);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Infinite loop in property interpolation of q((-7Ko'?]Yiq((-7Ko'?]Yiorg.apachecommons.text.lookup.StringLookup$MockitoMock$1930316326@0000000005org.apacheecommons.text.matcher.AbstractStringMatche$CharArrayMatcher@0000000006q((-7Ko'?]Yiq((-7Ko'?]Yiq((-7Ko'?]Yiorg.apachecommons.text.lookup.StringLookup$MockitoMock$1930316326@0000000005org.apacheecommons.text.matcher.AbstractStringMatche$CharArrayMatcher@0000000006q((-7Ko'?]Yiq((-7Ko'?]Yiq((-7Ko'?]Yiorg.apachecommons.text.lookup.StringLookup$MockitoMock$1930316326@0000000005org.apacheecommons.text.matcher.AbstractStringMatche$CharArrayMatcher@0000000006: 
         //
         verifyException("org.apache.commons.text.StringSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = null;
      try {
        stringSubstitutor0 = new StringSubstitutor((StringLookup) null, (StringMatcher) null, (StringMatcher) null, 'v', (StringMatcher) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix matcher must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_SUFFIX;
      StringSubstitutor stringSubstitutor0 = null;
      try {
        stringSubstitutor0 = new StringSubstitutor((StringLookup) null, (StringMatcher) null, stringMatcher0, 'n');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix matcher must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = null;
      try {
        stringSubstitutor0 = new StringSubstitutor((StringLookup) null, "|iBPKjE>JP4U)", (String) null, ':');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable suffix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = null;
      try {
        stringSubstitutor0 = new StringSubstitutor((StringSubstitutor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.StringSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = null;
      try {
        stringSubstitutor0 = new StringSubstitutor((Map<String, TextStyle>) null, "${", "}", '$', "$.82");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.lookup.FunctionStringLookup", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StringSubstitutor stringSubstitutor0 = null;
      try {
        stringSubstitutor0 = new StringSubstitutor((Map<String, String>) hashMap0, (String) null, "L,_}SeUVcv", 'P', (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = null;
      try {
        stringSubstitutor0 = new StringSubstitutor((Map<String, String>) null, "${", "${", '$');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.lookup.FunctionStringLookup", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StringSubstitutor stringSubstitutor0 = null;
      try {
        stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "7l!TG0PT{/", (String) null, '|');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable suffix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = null;
      try {
        stringSubstitutor0 = new StringSubstitutor((Map<String, String>) null, "", ":-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.lookup.FunctionStringLookup", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StringSubstitutor stringSubstitutor0 = null;
      try {
        stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = null;
      try {
        stringSubstitutor0 = new StringSubstitutor((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.lookup.FunctionStringLookup", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      // Undeclared exception!
      try { 
        stringSubstitutor0.setVariablePrefix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "", "", '9', "U*WiCVM5/R");
      StringBuilder stringBuilder0 = new StringBuilder(0);
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuilder0, 0, 0);
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_SUFFIX;
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((StringLookup) null, stringMatcher0, stringMatcher0, '~', stringMatcher0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ":-");
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuffer0, 0, 0);
      assertFalse(boolean0);
      assertEquals('~', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "gX.$3~v1c6M5", ", Length: ", 'V', "gX.$3~v1c6M5");
      StringBuffer stringBuffer0 = new StringBuffer();
      stringSubstitutor0.replace((Object) stringBuffer0);
      assertEquals('V', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      String string0 = stringSubstitutor0.replace((Object) null);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      // Undeclared exception!
      try { 
        stringSubstitutor0.replace((CharSequence) "${", (int) '$', (int) '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      StringMatcher stringMatcher0 = stringSubstitutor0.getVariableSuffixMatcher();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertEquals(1, stringMatcher0.size());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "q((-7Ko'?c]Ygq((-7Ko'?c]Ygorg.apache.commons.text.StringSubstitutor@0000000001", "", '\'');
      stringSubstitutor0.isEnableSubstitutionInVariables();
      assertEquals('\'', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      stringSubstitutor0.isPreserveEscapes();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "java.lang.Character@0000000005", "z\" ?p_>pYFR(mv)NRP\"");
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      stringSubstitutor1.setVariablePrefix('$');
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      stringSubstitutor0.getStringLookup();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "", "", '9', "U*WiCVM5/R");
      stringSubstitutor0.isDisableSubstitutionInValues();
      assertEquals('9', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      char char0 = stringSubstitutor0.getEscapeChar();
      assertEquals('$', char0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      stringSubstitutor0.isEnableUndefinedVariableException();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "", "", 'Y', "");
      StringMatcher stringMatcher0 = stringSubstitutor0.getVariablePrefixMatcher();
      assertEquals(0, stringMatcher0.size());
      assertEquals('Y', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      StringBuilder stringBuilder0 = new StringBuilder("${");
      stringSubstitutor0.setEnableUndefinedVariableException(true);
      stringBuilder0.append((CharSequence) "}");
      // Undeclared exception!
      try { 
        stringSubstitutor0.replaceIn(stringBuilder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot resolve variable '' (enableSubstitutionInVariables=false).
         //
         verifyException("org.apache.commons.text.StringSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      doReturn("q((-7Ko'?]Yi").when(stringLookup0).toString();
      doReturn("q((-7Ko'?]Yi").when(stringLookup0).lookup(anyString());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "q((-7Ko'?]Yi", "q((-7Ko'?]Yi", '3');
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      Object[] objectArray0 = new Object[9];
      objectArray0[1] = (Object) "q((-7Ko'?]Yi";
      objectArray0[2] = (Object) "q((-7Ko'?]Yi";
      stringSubstitutor0.setDisableSubstitutionInValues(true);
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendAll(objectArray0);
      stringSubstitutor0.replace(textStringBuilder1);
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      doReturn("q((-7Ko'?]Yi").when(stringLookup0).toString();
      doReturn("q((-7Ko'?]Yi").when(stringLookup0).lookup(anyString());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "q((-7Ko'?]Yi", "q((-7Ko'?]Yi", '3');
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      Object[] objectArray0 = new Object[9];
      objectArray0[1] = (Object) "q((-7Ko'?]Yi";
      objectArray0[2] = (Object) "q((-7Ko'?]Yi";
      objectArray0[5] = (Object) "q((-7Ko'?]Yi";
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendAll(objectArray0);
      textStringBuilder1.insert(23, ":-");
      String string0 = stringSubstitutor0.replace(textStringBuilder1);
      assertEquals(38, textStringBuilder1.size());
      assertEquals("q((-7Ko'?]Yi", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append("os.version");
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("]");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) stringBuffer0;
      objectArray0[1] = (Object) stringBuffer0;
      objectArray0[3] = (Object) textStringBuilder0;
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendAll(objectArray0);
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(stringLookup0).toString();
      doReturn((String) null).when(stringLookup0).lookup(anyString());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "os.version", "]", 'W', "0|");
      String string0 = stringSubstitutor0.replace(textStringBuilder1);
      assertEquals("]os.versionos.version]os.versionos.version", string0);
      assertEquals('W', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      StringBuilder stringBuilder0 = new StringBuilder("${");
      stringSubstitutor0.setEnableSubstitutionInVariables(true);
      StringBuilder stringBuilder1 = stringBuilder0.append('$');
      stringBuilder0.append((CharSequence) "}");
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuilder1);
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      stringSubstitutor0.setValueDelimiter((String) null);
      StringBuilder stringBuilder0 = new StringBuilder("${");
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "}");
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuilder1);
      assertEquals("${}", stringBuilder0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      StringBuilder stringBuilder0 = new StringBuilder(":-");
      stringBuilder0.append('$');
      StringBuilder stringBuilder1 = stringBuilder0.append("${");
      stringBuilder1.append((CharSequence) "}");
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuilder0);
      assertEquals(":-${}", stringBuilder0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "GQjEBXKe=5F", "GQjEBXKe=5F", '3');
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      Object[] objectArray0 = new Object[9];
      objectArray0[5] = (Object) "GQjEBXKe=5F";
      stringSubstitutor0.setEnableSubstitutionInVariables(true);
      objectArray0[0] = (Object) "GQjEBXKe=5F";
      textStringBuilder0.appendAll(objectArray0);
      stringSubstitutor0.replace(textStringBuilder0);
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      StringBuilder stringBuilder0 = new StringBuilder();
      stringSubstitutor0.setPreserveEscapes(true);
      StringBuilder stringBuilder1 = stringBuilder0.append('$');
      stringBuilder0.append((CharSequence) "${");
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuilder1);
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0);
      // Undeclared exception!
      try { 
        stringSubstitutor0.setVariableSuffixMatcher((StringMatcher) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable suffix matcher must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_SUFFIX;
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, '0', stringMatcher0);
      // Undeclared exception!
      try { 
        stringSubstitutor0.setVariableSuffix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable suffix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0);
      // Undeclared exception!
      try { 
        stringSubstitutor0.setVariablePrefixMatcher((StringMatcher) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix matcher must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = null;
      try {
        stringSubstitutor0 = new StringSubstitutor((StringLookup) null, (String) null, "Y", 'i', "B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      StringBuilder stringBuilder0 = new StringBuilder("${");
      stringBuilder0.append((CharSequence) "}");
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuilder0);
      assertEquals("${}", stringBuilder0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      boolean boolean0 = stringSubstitutor0.replaceIn((TextStringBuilder) null, 491, 491);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("]");
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "os.version", "]", 'W', "0|");
      // Undeclared exception!
      try { 
        stringSubstitutor0.replaceIn(textStringBuilder0, 16, 16);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 16
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      boolean boolean0 = stringSubstitutor0.replaceIn((TextStringBuilder) null);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      doReturn("q((-7Ko'?]Yi").when(stringLookup0).toString();
      doReturn("q((-7Ko'?]Yi").when(stringLookup0).lookup(anyString());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "q((-7Ko'?]Yi", "q((-7Ko'?]Yi", 'P');
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("q((-7Ko'?]Yiq((-7Ko'?]Yiorg.apachecommons.text.lookup.StringLookup$MockitoMock1930316326@0000000005org.apacheecommons.text.matcher.AbstractStringMatche$ChaArrayMatcher@0000000006");
      StringBuilder stringBuilder0 = new StringBuilder("q((-7Ko'?]Yiq((-7Ko'?]Yiorg.apachecommons.text.lookup.StringLookup$MockitoMock1930316326@0000000005org.apacheecommons.text.matcher.AbstractStringMatche$ChaArrayMatcher@0000000006");
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) textStringBuilder0);
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuilder1, 108, 108);
      assertTrue(boolean0);
      assertEquals('P', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_SUFFIX;
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, '0', stringMatcher0);
      boolean boolean0 = stringSubstitutor0.replaceIn((StringBuilder) null, (int) '$', 0);
      assertEquals('0', stringSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      boolean boolean0 = stringSubstitutor0.replaceIn((StringBuilder) null);
      assertFalse(boolean0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "", "", 'Y', "");
      boolean boolean0 = stringSubstitutor0.replaceIn((StringBuffer) null, (-1284), (-1284));
      assertEquals('Y', stringSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      boolean boolean0 = stringSubstitutor0.replaceIn((StringBuffer) null);
      assertFalse(boolean0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "q((-7Ko'?c]Ygq((-7Ko'?c]Ygorg.apache.commons.text.StringSubstitutor@0000000001", "", '\'');
      String string0 = stringSubstitutor0.replace((TextStringBuilder) null, 63, 63);
      assertNull(string0);
      assertEquals('\'', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0);
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("Minimum abbreviation width is %d");
      String string0 = stringSubstitutor0.replace(textStringBuilder0, 0, 1);
      assertNotNull(string0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertEquals("M", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      stringSubstitutor0.replace((TextStringBuilder) null);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      stringSubstitutor0.replace((StringBuffer) null, 181, 2184);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0);
      StringBuffer stringBuffer0 = new StringBuffer("${");
      String string0 = stringSubstitutor0.replace(stringBuffer0, 1, 1);
      assertNotNull(string0);
      assertEquals("{", string0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "", "", 'Y', "");
      stringSubstitutor0.replace((StringBuffer) null);
      assertEquals('Y', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      doReturn("r").when(stringLookup0).toString();
      doReturn("r").when(stringLookup0).lookup(anyString());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "r", "r", '[');
      stringSubstitutor0.setVariablePrefix(']');
      String string0 = stringSubstitutor0.replace("q((-7Ko'?]Yiq((-7Ko'?]Yiorg.apachecommons.text.lookup.StringLookup$MocktoMock1930316326@0000000005org.apacheecommons.text.matcher.AbstractStringMatche$ChaArrayMatcher@0000000006", 10, (int) '$');
      assertEquals('[', stringSubstitutor0.getEscapeChar());
      assertEquals("Yiq((-7Ko'?rg.apachecommons.text", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      stringSubstitutor0.replace((String) null, (int) '$', (int) '$');
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "q((-7Ko'?]Yi", "q((-7Ko'?]Yi", '3');
      // Undeclared exception!
      try { 
        stringSubstitutor0.replace("Gn*+TagS']", 1157, 23);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "GQjEBXKe=5F", "GQjEBXKe=5F", '_');
      stringSubstitutor0.replace((String) null);
      assertEquals('_', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      stringSubstitutor0.replace((CharSequence) null, (-2381), (-2381));
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      stringSubstitutor0.replace((CharSequence) null);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      String string0 = stringSubstitutor0.replace((CharSequence) ":-");
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertEquals(":-", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "GQjEBXKe=5F", "GQjEBXKe=5F", '3');
      stringSubstitutor0.replace((char[]) null, 23, 181);
      assertEquals('3', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      stringSubstitutor0.replace((char[]) null);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      char[] charArray0 = new char[0];
      String string0 = stringSubstitutor0.replace(charArray0);
      assertNotNull(string0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      doReturn("q((-7Ko'?]Yi", (String) null, (String) null, (String) null, (String) null).when(stringLookup0).toString();
      doReturn("q((-7Ko'?]Yi", (String) null, (String) null, (String) null, (String) null).when(stringLookup0).lookup(anyString());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "q((-7Ko'?]Yi", "q((-7Ko'?]Yi", '3');
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      stringSubstitutor0.resolveVariable("q((-7Ko'?]Yi", textStringBuilder0, 181, 23);
      Object[] objectArray0 = new Object[9];
      objectArray0[1] = (Object) "q((-7Ko'?]Yi";
      objectArray0[2] = (Object) "q((-7Ko'?]Yi";
      objectArray0[5] = (Object) "q((-7Ko'?]Yi";
      objectArray0[8] = (Object) "q((-7Ko'?]Yi";
      textStringBuilder0.appendAll(objectArray0);
      stringSubstitutor0.replace(textStringBuilder0);
      stringSubstitutor0.replace(textStringBuilder0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringSubstitutor.replace((Object) null, (Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      Properties properties0 = new Properties();
      String string0 = StringSubstitutor.replace((Object) stringBuffer0, properties0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(188);
      String string0 = StringSubstitutor.replaceSystemProperties(stringBuffer0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = StringSubstitutor.replace((Object) "]", (Map<String, Object>) hashMap0, "]", "]");
      assertEquals("]", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = hashMap0.put("]", "]");
      String string0 = StringSubstitutor.replace(object0, (Map<String, Object>) hashMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "}");
      stringSubstitutor0.replace(stringBuffer0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "GQjEBXKe=5F", "GQjEBXKe=5F", '3');
      stringSubstitutor0.setDisableSubstitutionInValues(true);
      stringSubstitutor0.setValueDelimiter('$');
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      StringSubstitutor stringSubstitutor1 = new StringSubstitutor(stringSubstitutor0);
      assertEquals('$', stringSubstitutor1.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, ":X0", "LWBZ01;vbR", 'U');
      assertEquals('U', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      stringSubstitutor0.setEnableUndefinedVariableException(true);
      stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      Object object0 = new Object();
      Properties properties0 = new Properties();
      properties0.put("}", stringSubstitutor0);
      String string0 = StringSubstitutor.replace(object0, properties0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(stringLookup0).toString();
      doReturn((String) null, (String) null).when(stringLookup0).lookup(anyString());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "r", "r", ';');
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "q((-7Ko'?]Yiq((-7Ko'?]Yorg.apachecommons.text.lookup.StringLooku$MocktoMock1930316326@0000000005Zrg.apacheecommons.text.matcher.AbstraQtStringMatch$ChaArrayMatcher@0000000006");
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuffer0, 76, 76);
      //  // Unstable assertion: assertEquals(140, stringBuffer0.length());
      //  // Unstable assertion: assertTrue(boolean0);
  }
}
