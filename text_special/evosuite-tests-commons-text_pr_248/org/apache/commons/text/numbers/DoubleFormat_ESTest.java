/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 19:50:24 GMT 2025
 */

package org.apache.commons.text.numbers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormatSymbols;
import java.util.function.DoubleFunction;
import org.apache.commons.text.numbers.DoubleFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class DoubleFormat_ESTest extends DoubleFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleFormat doubleFormat0 = DoubleFormat.MIXED;
      DoubleFormat.Builder doubleFormat_Builder0 = doubleFormat0.builder();
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      decimalFormatSymbols0.setZeroDigit('l');
      DoubleFormat.Builder doubleFormat_Builder1 = doubleFormat_Builder0.formatSymbols(decimalFormatSymbols0);
      assertSame(doubleFormat_Builder1, doubleFormat_Builder0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleFormat doubleFormat0 = DoubleFormat.ENGINEERING;
      DoubleFormat.Builder doubleFormat_Builder0 = doubleFormat0.builder();
      // Undeclared exception!
      try { 
        doubleFormat_Builder0.digits(" &yLpPZN'~eNx%W");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Digits string must contain exactly 10 characters.
         //
         verifyException("org.apache.commons.text.numbers.DoubleFormat$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleFormat doubleFormat0 = DoubleFormat.MIXED;
      DoubleFormat.Builder doubleFormat_Builder0 = doubleFormat0.builder();
      DoubleFormat.Builder doubleFormat_Builder1 = doubleFormat_Builder0.infinity("");
      assertSame(doubleFormat_Builder1, doubleFormat_Builder0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleFormat doubleFormat0 = DoubleFormat.valueOf("PLAIN");
      DoubleFormat.Builder doubleFormat_Builder0 = doubleFormat0.builder();
      DoubleFormat.Builder doubleFormat_Builder1 = doubleFormat_Builder0.nan("PLAIN");
      assertSame(doubleFormat_Builder1, doubleFormat_Builder0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleFormat doubleFormat0 = DoubleFormat.MIXED;
      DoubleFormat.Builder doubleFormat_Builder0 = doubleFormat0.builder();
      DoubleFormat.Builder doubleFormat_Builder1 = doubleFormat_Builder0.minusSign('T');
      assertSame(doubleFormat_Builder1, doubleFormat_Builder0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleFormat doubleFormat0 = DoubleFormat.MIXED;
      DoubleFormat.Builder doubleFormat_Builder0 = doubleFormat0.builder();
      DoubleFormat.Builder doubleFormat_Builder1 = doubleFormat_Builder0.exponentSeparator("");
      assertSame(doubleFormat_Builder1, doubleFormat_Builder0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleFormat doubleFormat0 = DoubleFormat.MIXED;
      DoubleFormat.Builder doubleFormat_Builder0 = doubleFormat0.builder();
      DoubleFormat.Builder doubleFormat_Builder1 = doubleFormat_Builder0.decimalSeparator('>');
      assertSame(doubleFormat_Builder0, doubleFormat_Builder1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleFormat doubleFormat0 = DoubleFormat.valueOf("PLAIN");
      DoubleFormat.Builder doubleFormat_Builder0 = doubleFormat0.builder();
      DoubleFormat.Builder doubleFormat_Builder1 = doubleFormat_Builder0.groupingSeparator(']');
      assertSame(doubleFormat_Builder0, doubleFormat_Builder1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleFormat doubleFormat0 = DoubleFormat.ENGINEERING;
      DoubleFormat.Builder doubleFormat_Builder0 = doubleFormat0.builder();
      DoubleFunction<String> doubleFunction0 = doubleFormat_Builder0.build();
      assertNotNull(doubleFunction0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleFormat doubleFormat0 = DoubleFormat.PLAIN;
      DoubleFormat.Builder doubleFormat_Builder0 = doubleFormat0.builder();
      DoubleFormat.Builder doubleFormat_Builder1 = doubleFormat_Builder0.plainFormatMinDecimalExponent((-1117));
      assertSame(doubleFormat_Builder1, doubleFormat_Builder0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleFormat doubleFormat0 = DoubleFormat.PLAIN;
      DoubleFormat.Builder doubleFormat_Builder0 = doubleFormat0.builder();
      DoubleFormat.Builder doubleFormat_Builder1 = doubleFormat_Builder0.plainFormatMaxDecimalExponent((-1140));
      assertSame(doubleFormat_Builder1, doubleFormat_Builder0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleFormat doubleFormat0 = DoubleFormat.SCIENTIFIC;
      DoubleFormat.Builder doubleFormat_Builder0 = doubleFormat0.builder();
      // Undeclared exception!
      try { 
        doubleFormat_Builder0.digits("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Digits string must contain exactly 10 characters.
         //
         verifyException("org.apache.commons.text.numbers.DoubleFormat$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleFormat doubleFormat0 = DoubleFormat.PLAIN;
      DoubleFormat.Builder doubleFormat_Builder0 = doubleFormat0.builder();
      DoubleFunction<String> doubleFunction0 = doubleFormat_Builder0.build();
      assertNotNull(doubleFunction0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleFormat doubleFormat0 = DoubleFormat.MIXED;
      DoubleFormat.Builder doubleFormat_Builder0 = doubleFormat0.builder();
      DoubleFunction<String> doubleFunction0 = doubleFormat_Builder0.build();
      assertNotNull(doubleFunction0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleFormat doubleFormat0 = DoubleFormat.ENGINEERING;
      DoubleFormat.Builder doubleFormat_Builder0 = doubleFormat0.builder();
      DoubleFormat.Builder doubleFormat_Builder1 = doubleFormat_Builder0.alwaysIncludeExponent(false);
      assertSame(doubleFormat_Builder1, doubleFormat_Builder0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleFormat doubleFormat0 = DoubleFormat.SCIENTIFIC;
      DoubleFormat.Builder doubleFormat_Builder0 = doubleFormat0.builder();
      DoubleFormat.Builder doubleFormat_Builder1 = doubleFormat_Builder0.minDecimalExponent(1509);
      assertSame(doubleFormat_Builder1, doubleFormat_Builder0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleFormat doubleFormat0 = DoubleFormat.SCIENTIFIC;
      DoubleFormat.Builder doubleFormat_Builder0 = doubleFormat0.builder();
      DoubleFormat.Builder doubleFormat_Builder1 = doubleFormat_Builder0.groupThousands(true);
      assertSame(doubleFormat_Builder0, doubleFormat_Builder1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleFormat doubleFormat0 = DoubleFormat.SCIENTIFIC;
      DoubleFormat.Builder doubleFormat_Builder0 = doubleFormat0.builder();
      DoubleFunction<String> doubleFunction0 = doubleFormat_Builder0.build();
      assertNotNull(doubleFunction0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleFormat doubleFormat0 = DoubleFormat.SCIENTIFIC;
      DoubleFormat.Builder doubleFormat_Builder0 = doubleFormat0.builder();
      DoubleFormat.Builder doubleFormat_Builder1 = doubleFormat_Builder0.includeFractionPlaceholder(false);
      assertSame(doubleFormat_Builder0, doubleFormat_Builder1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleFormat doubleFormat0 = DoubleFormat.SCIENTIFIC;
      DoubleFormat.Builder doubleFormat_Builder0 = doubleFormat0.builder();
      DoubleFormat.Builder doubleFormat_Builder1 = doubleFormat_Builder0.maxPrecision((-1117));
      assertSame(doubleFormat_Builder1, doubleFormat_Builder0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleFormat doubleFormat0 = DoubleFormat.ENGINEERING;
      DoubleFormat.Builder doubleFormat_Builder0 = doubleFormat0.builder();
      DoubleFormat.Builder doubleFormat_Builder1 = doubleFormat_Builder0.allowSignedZero(false);
      assertSame(doubleFormat_Builder0, doubleFormat_Builder1);
  }
}
