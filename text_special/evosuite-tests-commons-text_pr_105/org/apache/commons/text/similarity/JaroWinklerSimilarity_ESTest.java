/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 21:59:11 GMT 2025
 */

package org.apache.commons.text.similarity;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import org.apache.commons.text.similarity.JaroWinklerSimilarity;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class JaroWinklerSimilarity_ESTest extends JaroWinklerSimilarity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(108);
      int[] intArray0 = JaroWinklerSimilarity.matches(charBuffer0, charBuffer0);
      assertArrayEquals(new int[] {108, 0, 4}, intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2090);
      // Undeclared exception!
      JaroWinklerSimilarity.matches(charBuffer0, charBuffer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        JaroWinklerSimilarity.matches((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.similarity.JaroWinklerSimilarity", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char[] charArray0 = new char[7];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.get(charArray0);
      CharBuffer charBuffer1 = charBuffer0.compact();
      CharBuffer charBuffer2 = CharBuffer.wrap((CharSequence) charBuffer1);
      CharBuffer charBuffer3 = charBuffer2.slice();
      charBuffer2.limit(1);
      charBuffer0.put(charBuffer2);
      // Undeclared exception!
      try { 
        JaroWinklerSimilarity.matches(charBuffer3, charBuffer3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(108);
      JaroWinklerSimilarity jaroWinklerSimilarity0 = new JaroWinklerSimilarity();
      CharBuffer charBuffer1 = CharBuffer.allocate(1058);
      jaroWinklerSimilarity0.apply(charBuffer1, charBuffer0);
      // Undeclared exception!
      jaroWinklerSimilarity0.apply(charBuffer1, charBuffer0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JaroWinklerSimilarity jaroWinklerSimilarity0 = new JaroWinklerSimilarity();
      CharBuffer charBuffer0 = CharBuffer.allocate(122);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CharBuffer charBuffer2 = charBuffer1.asReadOnlyBuffer();
      charBuffer0.position(122);
      // Undeclared exception!
      try { 
        jaroWinklerSimilarity0.apply(charBuffer1, charBuffer2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(108);
      JaroWinklerSimilarity jaroWinklerSimilarity0 = new JaroWinklerSimilarity();
      Double double0 = jaroWinklerSimilarity0.apply("4 nf`4JI_ZCeMK", charBuffer0);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(108);
      JaroWinklerSimilarity jaroWinklerSimilarity0 = new JaroWinklerSimilarity();
      Double double0 = jaroWinklerSimilarity0.apply(charBuffer0, charBuffer0);
      assertEquals(1.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      JaroWinklerSimilarity jaroWinklerSimilarity0 = new JaroWinklerSimilarity();
      // Undeclared exception!
      try { 
        jaroWinklerSimilarity0.apply(charBuffer0, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // CharSequences must not be null
         //
         verifyException("org.apache.commons.text.similarity.JaroWinklerSimilarity", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JaroWinklerSimilarity jaroWinklerSimilarity0 = new JaroWinklerSimilarity();
      Double double0 = jaroWinklerSimilarity0.apply("4 nf`4JI_ZCeMK", "org.apache.commons.text.similarity.JaroWinklerSimilarity");
      assertEquals(0.2261904761904762, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JaroWinklerSimilarity jaroWinklerSimilarity0 = new JaroWinklerSimilarity();
      // Undeclared exception!
      try { 
        jaroWinklerSimilarity0.apply((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // CharSequences must not be null
         //
         verifyException("org.apache.commons.text.similarity.JaroWinklerSimilarity", e);
      }
  }
}
