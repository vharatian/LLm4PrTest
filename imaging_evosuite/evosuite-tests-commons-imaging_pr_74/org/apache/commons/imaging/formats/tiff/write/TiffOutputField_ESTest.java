/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 00:34:52 GMT 2025
 */

package org.apache.commons.imaging.formats.tiff.write;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PipedOutputStream;
import java.nio.ByteOrder;
import java.nio.CharBuffer;
import java.util.List;
import org.apache.commons.imaging.common.BinaryOutputStream;
import org.apache.commons.imaging.formats.tiff.constants.TiffDirectoryType;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeAscii;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeByte;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeDouble;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeRational;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeShort;
import org.apache.commons.imaging.formats.tiff.taginfos.TagInfo;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputField;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputItem;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class TiffOutputField_ESTest extends TiffOutputField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      TiffDirectoryType tiffDirectoryType0 = TiffDirectoryType.TIFF_DIRECTORY_IFD0;
      TagInfo tagInfo0 = new TagInfo("%", (-2454), fieldTypeByte0.SHORT_OR_LONG_OR_RATIONAL, (-2454), tiffDirectoryType0);
      byte[] byteArray0 = new byte[7];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffOutputField tiffOutputField0 = TiffOutputField.createOffsetField(tagInfo0, byteOrder0);
      try { 
        tiffOutputField0.setData(byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot change size of value.
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffOutputField", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TiffDirectoryType tiffDirectoryType0 = TiffDirectoryType.EXIF_DIRECTORY_MAKER_NOTES;
      TagInfo tagInfo0 = new TagInfo("", 6, (FieldType) null, 6, tiffDirectoryType0, true);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffOutputField tiffOutputField0 = TiffOutputField.createOffsetField(tagInfo0, byteOrder0);
      tiffOutputField0.isLocalValue();
      assertEquals(1, tiffOutputField0.count);
      assertEquals(6, tiffOutputField0.tag);
      assertEquals((-1), tiffOutputField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      TagInfo tagInfo0 = new TagInfo("lx@d1>ye/m", 0, fieldTypeAscii0);
      byte[] byteArray0 = new byte[7];
      TiffOutputField tiffOutputField0 = new TiffOutputField(tagInfo0, fieldTypeAscii0, (-4), byteArray0);
      tiffOutputField0.isLocalValue();
      assertEquals((-4), tiffOutputField0.count);
      assertEquals(0, tiffOutputField0.tag);
      assertEquals((-1), tiffOutputField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      TagInfo tagInfo0 = new TagInfo("Cf# gB,EjI;VS)'@A8", 3313, fieldTypeByte0);
      byte[] byteArray0 = new byte[24];
      TiffOutputField tiffOutputField0 = new TiffOutputField(4, tagInfo0, fieldTypeByte0, 1202, byteArray0);
      tiffOutputField0.setSortHint(1650);
      int int0 = tiffOutputField0.getSortHint();
      assertEquals(1650, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = new FieldTypeByte(1860, "5[\"B)s>fS");
      TiffDirectoryType tiffDirectoryType0 = TiffDirectoryType.EXIF_DIRECTORY_EXIF_IFD;
      TagInfo tagInfo0 = new TagInfo("5[\"B)s>fS", (-2199), fieldTypeByte0, 0, tiffDirectoryType0);
      byte[] byteArray0 = new byte[6];
      TiffOutputField tiffOutputField0 = new TiffOutputField(0, tagInfo0, fieldTypeByte0, (-2199), byteArray0);
      TiffOutputItem.Value tiffOutputItem_Value0 = (TiffOutputItem.Value)tiffOutputField0.getSeperateValue();
      assertEquals((-2199), tiffOutputField0.count);
      assertEquals(0, tiffOutputField0.tag);
      assertEquals("Field Separate value (-2199 (0xfffff769: 5[\"B)s>fS): )", tiffOutputItem_Value0.getItemDescription());
      assertEquals((-1), tiffOutputField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      TiffDirectoryType tiffDirectoryType0 = TiffDirectoryType.TIFF_DIRECTORY_IFD2;
      TagInfo tagInfo0 = new TagInfo("INSENSITIVE", (-1247), fieldTypeShort0, (-1247), tiffDirectoryType0, true);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "INSENSITIVE");
      ByteOrder byteOrder0 = charBuffer0.order();
      TiffOutputField tiffOutputField0 = TiffOutputField.createOffsetField(tagInfo0, byteOrder0);
      byte[] byteArray0 = new byte[1];
      tiffOutputField0.bytesEqual(byteArray0);
      assertEquals(1, tiffOutputField0.count);
      assertEquals((-1247), tiffOutputField0.tag);
      assertEquals((-1), tiffOutputField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      TagInfo tagInfo0 = new TagInfo("Cannot change size of value.", (-1966), fieldTypeDouble0, (-1966));
      TiffOutputField tiffOutputField0 = TiffOutputField.createOffsetField(tagInfo0, byteOrder0);
      // Undeclared exception!
      try { 
        tiffOutputField0.writeField((BinaryOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffOutputField", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TagInfo tagInfo0 = new TagInfo("^t^hsmt+Xy0", (-777), (FieldType) null);
      TiffOutputField tiffOutputField0 = TiffOutputField.createOffsetField(tagInfo0, byteOrder0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BinaryOutputStream binaryOutputStream0 = new BinaryOutputStream(pipedOutputStream0, byteOrder0);
      try { 
        tiffOutputField0.writeField(binaryOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TagInfo tagInfo0 = new TagInfo("Cf gB,Ej7I;hVS)#A8", (-731), fieldTypeByte0);
      TiffOutputField tiffOutputField0 = TiffOutputField.createOffsetField(tagInfo0, byteOrder0);
      // Undeclared exception!
      try { 
        tiffOutputField0.setData((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffOutputField", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      // Undeclared exception!
      try { 
        TiffOutputField.createOffsetField((TagInfo) null, byteOrder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffOutputField", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      TiffDirectoryType tiffDirectoryType0 = TiffDirectoryType.EXIF_DIRECTORY_INTEROP_IFD;
      TagInfo tagInfo0 = new TagInfo("Z9bl@KX)v_Mm>OC", 0, fieldTypeByte0.BYTE_OR_SHORT, 0, tiffDirectoryType0);
      TiffOutputField tiffOutputField0 = null;
      try {
        tiffOutputField0 = new TiffOutputField(tagInfo0, fieldTypeByte0, (-1), (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffOutputField", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      TiffOutputField tiffOutputField0 = null;
      try {
        tiffOutputField0 = new TiffOutputField((-2340), (TagInfo) null, fieldTypeDouble0, (-2340), byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffOutputField", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      TagInfo tagInfo0 = new TagInfo("-DQ", 27, fieldTypeAscii0);
      byte[] byteArray0 = new byte[3];
      TiffOutputField tiffOutputField0 = new TiffOutputField(32898, tagInfo0, fieldTypeAscii0.RATIONAL, 1, byteArray0);
      tiffOutputField0.toString((String) null);
      assertEquals(1, tiffOutputField0.count);
      assertEquals(32898, tiffOutputField0.tag);
      assertEquals((-1), tiffOutputField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      TagInfo tagInfo0 = new TagInfo("%^", (-1), fieldTypeShort0);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffOutputField tiffOutputField0 = TiffOutputField.createOffsetField(tagInfo0, byteOrder0);
      tiffOutputField0.toString("%^");
      assertEquals((-1), tiffOutputField0.getSortHint());
      assertEquals(1, tiffOutputField0.count);
      assertEquals((-1), tiffOutputField0.tag);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      TiffDirectoryType tiffDirectoryType0 = TiffDirectoryType.EXIF_DIRECTORY_GPS;
      TagInfo tagInfo0 = new TagInfo("%|", (-2439), fieldTypeByte0.LONG_OR_SHORT, (-2439), tiffDirectoryType0);
      byte[] byteArray0 = new byte[6];
      TiffOutputField tiffOutputField0 = new TiffOutputField((-2439), tagInfo0, fieldTypeByte0, (-2439), byteArray0);
      tiffOutputField0.setData(byteArray0);
      assertEquals((-2439), tiffOutputField0.tag);
      assertEquals((-2439), tiffOutputField0.count);
      assertEquals((-1), tiffOutputField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      TiffDirectoryType tiffDirectoryType0 = TiffDirectoryType.EXIF_DIRECTORY_GPS;
      TagInfo tagInfo0 = new TagInfo("%|", (-2439), fieldTypeByte0, 0, tiffDirectoryType0);
      byte[] byteArray0 = new byte[6];
      TiffOutputField tiffOutputField0 = new TiffOutputField(0, tagInfo0, fieldTypeByte0, 43, byteArray0);
      byte[] byteArray1 = new byte[4];
      try { 
        tiffOutputField0.setData(byteArray1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot change size of value.
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffOutputField", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      List<FieldType> list0 = FieldType.BYTE_OR_SHORT;
      TiffDirectoryType tiffDirectoryType0 = TiffDirectoryType.EXIF_DIRECTORY_GPS;
      TagInfo tagInfo0 = new TagInfo("Interop IFD", 8, list0, (-1182), tiffDirectoryType0);
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[2];
      TiffOutputField tiffOutputField0 = new TiffOutputField(1, tagInfo0, fieldTypeRational0, (-1), byteArray0);
      tiffOutputField0.setData(byteArray0);
      assertEquals((-1), tiffOutputField0.getSortHint());
      assertEquals(1, tiffOutputField0.tag);
      assertEquals((-1), tiffOutputField0.count);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BinaryOutputStream binaryOutputStream0 = new BinaryOutputStream(byteArrayOutputStream0);
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      byte[] byteArray0 = new byte[0];
      TiffOutputField tiffOutputField0 = new TiffOutputField((-2636), (TagInfo) null, fieldTypeShort0, (-2636), byteArray0);
      tiffOutputField0.writeField(binaryOutputStream0);
      assertEquals(12, binaryOutputStream0.getByteCount());
      assertEquals("\uFFFD\uFFFD\u0000\u0003\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      TagInfo tagInfo0 = new TagInfo("Cf# gB,EjI;VS)'@A8", 3313, fieldTypeByte0);
      byte[] byteArray0 = new byte[8];
      TiffOutputField tiffOutputField0 = new TiffOutputField(4, tagInfo0, fieldTypeByte0, 1202, byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BinaryOutputStream binaryOutputStream0 = new BinaryOutputStream(byteArrayOutputStream0);
      CharBuffer charBuffer0 = CharBuffer.allocate((byte)11);
      ByteOrder byteOrder0 = charBuffer0.order();
      TiffOutputField tiffOutputField1 = TiffOutputField.createOffsetField(tiffOutputField0.tagInfo, byteOrder0);
      tiffOutputField1.writeField(binaryOutputStream0);
      assertEquals(12, binaryOutputStream0.getByteCount());
      assertEquals("\f\uFFFD\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      TagInfo tagInfo0 = new TagInfo("Cf# gB,EjI;VS)'@A8", 3313, fieldTypeByte0);
      byte[] byteArray0 = new byte[18];
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BinaryOutputStream binaryOutputStream0 = new BinaryOutputStream(byteArrayOutputStream0);
      TiffOutputField tiffOutputField0 = new TiffOutputField(3313, tagInfo0, fieldTypeByte0, 3313, byteArray0);
      tiffOutputField0.writeField(binaryOutputStream0);
      assertEquals("\f\uFFFD\u0000\u0007\u0000\u0000\f\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD", byteArrayOutputStream0.toString());
      assertEquals(3313, tiffOutputField0.count);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TagInfo tagInfo0 = new TagInfo((String) null, 0, (FieldType) null, 0);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffOutputField tiffOutputField0 = TiffOutputField.createOffsetField(tagInfo0, byteOrder0);
      tiffOutputField0.getSeperateValue();
      assertEquals(1, tiffOutputField0.count);
      assertEquals((-1), tiffOutputField0.getSortHint());
      assertEquals(0, tiffOutputField0.tag);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      TagInfo tagInfo0 = new TagInfo("lx@d1>ye/m", 0, fieldTypeAscii0);
      byte[] byteArray0 = new byte[7];
      TiffOutputField tiffOutputField0 = new TiffOutputField(tagInfo0, fieldTypeAscii0, (-4), byteArray0);
      tiffOutputField0.bytesEqual(byteArray0);
      assertEquals((-1), tiffOutputField0.getSortHint());
      assertEquals((-4), tiffOutputField0.count);
      assertEquals(0, tiffOutputField0.tag);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      TagInfo tagInfo0 = new TagInfo("Cf# gB,EjI;VS)'@A8", 3313, fieldTypeByte0);
      byte[] byteArray0 = new byte[8];
      TiffOutputField tiffOutputField0 = new TiffOutputField(4, tagInfo0, fieldTypeByte0, 1202, byteArray0);
      int int0 = tiffOutputField0.getSortHint();
      assertEquals(4, tiffOutputField0.tag);
      assertEquals(1202, tiffOutputField0.count);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      TiffOutputField tiffOutputField0 = new TiffOutputField(1522, (TagInfo) null, fieldTypeDouble0, 1522, byteArray0);
      tiffOutputField0.toString();
      assertEquals(1522, tiffOutputField0.count);
      assertEquals((-1), tiffOutputField0.getSortHint());
      assertEquals(1522, tiffOutputField0.tag);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      TagInfo tagInfo0 = new TagInfo("Cf# gB,EjI;VS)'@A8", 3313, fieldTypeByte0);
      byte[] byteArray0 = new byte[8];
      TiffOutputField tiffOutputField0 = new TiffOutputField(4, tagInfo0, fieldTypeByte0, 1202, byteArray0);
      assertEquals((-1), tiffOutputField0.getSortHint());
      
      tiffOutputField0.setSortHint((byte)0);
      int int0 = tiffOutputField0.getSortHint();
      assertEquals(0, int0);
  }
}
