/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 00:04:37 GMT 2025
 */

package org.apache.commons.imaging.common.itu_t4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import org.apache.commons.imaging.common.itu_t4.BitInputStreamFlexible;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class BitInputStreamFlexible_ESTest extends BitInputStreamFlexible_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BitInputStreamFlexible bitInputStreamFlexible0 = new BitInputStreamFlexible((InputStream) null);
      // Undeclared exception!
      try { 
        bitInputStreamFlexible0.readBits(8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.BitInputStreamFlexible", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)87;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BitInputStreamFlexible bitInputStreamFlexible0 = new BitInputStreamFlexible(byteArrayInputStream0);
      bitInputStreamFlexible0.readBits((byte)11);
      int int0 = bitInputStreamFlexible0.readBits((byte) (-69));
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BitInputStreamFlexible bitInputStreamFlexible0 = new BitInputStreamFlexible(byteArrayInputStream0);
      bitInputStreamFlexible0.readBits((byte)21);
      int int0 = bitInputStreamFlexible0.readBits((byte)21);
      assertEquals(6L, bitInputStreamFlexible0.getBytesRead());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1127), (-1127));
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 1222);
      BitInputStreamFlexible bitInputStreamFlexible0 = new BitInputStreamFlexible(bufferedInputStream0);
      try { 
        bitInputStreamFlexible0.readBits(32);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // couldn't read bits
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.BitInputStreamFlexible", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-69);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BitInputStreamFlexible bitInputStreamFlexible0 = new BitInputStreamFlexible(byteArrayInputStream0);
      int int0 = bitInputStreamFlexible0.readBits((byte)11);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(1496, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-69);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BitInputStreamFlexible bitInputStreamFlexible0 = new BitInputStreamFlexible(byteArrayInputStream0);
      int int0 = bitInputStreamFlexible0.read();
      assertEquals(187, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      File file0 = MockFile.createTempFile("VNqEap%;", "VNqEap%;");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BitInputStreamFlexible bitInputStreamFlexible0 = new BitInputStreamFlexible(mockFileInputStream0);
      int int0 = bitInputStreamFlexible0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BitInputStreamFlexible bitInputStreamFlexible0 = new BitInputStreamFlexible(byteArrayInputStream0);
      bitInputStreamFlexible0.readBits((byte)11);
      long long0 = bitInputStreamFlexible0.getBytesRead();
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), 282);
      BitInputStreamFlexible bitInputStreamFlexible0 = new BitInputStreamFlexible(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        bitInputStreamFlexible0.readBits(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BitInputStreamFlexible bitInputStreamFlexible0 = new BitInputStreamFlexible((InputStream) null);
      // Undeclared exception!
      try { 
        bitInputStreamFlexible0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.BitInputStreamFlexible", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-4566), 1067);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      BitInputStreamFlexible bitInputStreamFlexible0 = new BitInputStreamFlexible(pushbackInputStream0);
      // Undeclared exception!
      try { 
        bitInputStreamFlexible0.read();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)3, (byte)3);
      BitInputStreamFlexible bitInputStreamFlexible0 = new BitInputStreamFlexible(byteArrayInputStream0);
      try { 
        bitInputStreamFlexible0.readBits((byte)3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // couldn't read bits
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.BitInputStreamFlexible", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BitInputStreamFlexible bitInputStreamFlexible0 = new BitInputStreamFlexible((InputStream) null);
      try { 
        bitInputStreamFlexible0.readBits(1156);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // BitInputStream: unknown error
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.BitInputStreamFlexible", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BitInputStreamFlexible bitInputStreamFlexible0 = new BitInputStreamFlexible(byteArrayInputStream0);
      bitInputStreamFlexible0.readBits((byte)11);
      try { 
        bitInputStreamFlexible0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // BitInputStream: incomplete bit read
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.BitInputStreamFlexible", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      File file0 = MockFile.createTempFile("VNqEap%;", "VNqEap%;");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BitInputStreamFlexible bitInputStreamFlexible0 = new BitInputStreamFlexible(mockFileInputStream0);
      bitInputStreamFlexible0.flushCache();
      assertEquals(0L, bitInputStreamFlexible0.getBytesRead());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BitInputStreamFlexible bitInputStreamFlexible0 = new BitInputStreamFlexible(byteArrayInputStream0);
      long long0 = bitInputStreamFlexible0.getBytesRead();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BitInputStreamFlexible bitInputStreamFlexible0 = new BitInputStreamFlexible(byteArrayInputStream0);
      bitInputStreamFlexible0.readBits(5);
      bitInputStreamFlexible0.readBits(3);
      bitInputStreamFlexible0.read();
      assertEquals(1L, bitInputStreamFlexible0.getBytesRead());
  }
}
