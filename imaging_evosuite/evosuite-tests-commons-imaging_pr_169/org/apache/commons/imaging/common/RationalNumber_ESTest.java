/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 20:55:23 GMT 2025
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2405L));
      assertEquals((-2405.0), rationalNumber0.doubleValue(), 0.01);
      assertFalse(rationalNumber0.unsignedType);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(Double.NaN);
      assertFalse(rationalNumber0.unsignedType);
      assertEquals(1L, rationalNumber0.numerator);
      assertEquals(Float.POSITIVE_INFINITY, rationalNumber0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.147483647E9));
      assertFalse(rationalNumber0.unsignedType);
      assertEquals((-2.147483647E9), rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(4294965959L);
      assertEquals(2.147483647E9, rationalNumber0.doubleValue(), 0.01);
      assertFalse(rationalNumber0.unsignedType);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-106), (-106));
      String string0 = rationalNumber0.toDisplayString();
      assertFalse(rationalNumber0.unsignedType);
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      String string0 = rationalNumber0.toDisplayString();
      assertFalse(rationalNumber0.unsignedType);
      assertEquals(1L, rationalNumber0.divisor);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(216.874851653504);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      String string0 = rationalNumber1.toDisplayString();
      assertEquals("-216.875", string0);
      assertFalse(rationalNumber1.unsignedType);
      assertFalse(rationalNumber0.unsignedType);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(1, (-2405), false);
      String string0 = rationalNumber0.toString();
      assertEquals("1/-2405 (-0)", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(1, 0, true);
      String string0 = rationalNumber0.toString();
      assertEquals("Invalid rational (1/0)", string0);
      assertTrue(rationalNumber0.unsignedType);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-106), (-106));
      String string0 = rationalNumber0.toString();
      assertEquals("1", string0);
      assertFalse(rationalNumber0.unsignedType);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483681L), (-1L));
      assertEquals(1L, rationalNumber0.divisor);
      assertFalse(rationalNumber0.unsignedType);
      assertEquals((-2.147483615E9), rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(0L, 4294967295L);
      assertFalse(rationalNumber0.unsignedType);
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(3841L, 4294967295L);
      assertEquals(8.94069672047193E-7, rationalNumber0.doubleValue(), 0.01);
      assertEquals(2147483647L, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483648L), (-2147483649L));
      assertEquals(0.9999999990686774, rationalNumber0.doubleValue(), 0.01);
      assertFalse(rationalNumber0.unsignedType);
      assertEquals(1073741825L, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(4294967295L, 138L);
      assertEquals(3.11229514057971E7, rationalNumber0.doubleValue(), 0.01);
      assertEquals(69L, rationalNumber0.divisor);
      assertFalse(rationalNumber0.unsignedType);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-174L), 2147483647L);
      assertEquals((-8.1025064E-8F), rationalNumber0.floatValue(), 0.01F);
      assertEquals(2147483647L, rationalNumber0.divisor);
      assertFalse(rationalNumber0.unsignedType);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2147483647L, 659L);
      assertEquals(2147483647L, rationalNumber0.numerator);
      assertFalse(rationalNumber0.unsignedType);
      assertEquals(3258700.526555387, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      assertFalse(rationalNumber0.unsignedType);
      assertEquals(1L, rationalNumber0.divisor);
      assertFalse(rationalNumber1.unsignedType);
      assertEquals(0.0F, rationalNumber1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-1), (-647), true);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      RationalNumber rationalNumber2 = rationalNumber1.negate();
      assertEquals(252645135L, rationalNumber2.numerator);
      assertEquals(1.0000001504086184, rationalNumber0.doubleValue(), 0.01);
      assertEquals((-1.0000001504086184), rationalNumber1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(1, (-1), true);
      long long0 = rationalNumber0.longValue();
      assertEquals(0L, long0);
      assertTrue(rationalNumber0.unsignedType);
      assertEquals(2.3283064370807974E-10, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483648L), 576L);
      long long0 = rationalNumber0.longValue();
      assertFalse(rationalNumber0.unsignedType);
      assertEquals((-3728270L), long0);
      assertEquals((-33554432L), rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(1L, (-2147483681L));
      int int0 = rationalNumber0.intValue();
      assertFalse(rationalNumber0.unsignedType);
      assertEquals(0, int0);
      assertEquals(1L, rationalNumber0.numerator);
      assertEquals(4.656612944634737E-10, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-1), (-647), true);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      int int0 = rationalNumber1.intValue();
      assertEquals((-252645135L), rationalNumber1.numerator);
      assertEquals((-1), int0);
      assertFalse(rationalNumber1.unsignedType);
      assertEquals(1.0000001504086184, rationalNumber0.doubleValue(), 0.01);
      assertEquals(252645097L, rationalNumber1.divisor);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(0L, (-1453L));
      float float0 = rationalNumber0.floatValue();
      assertEquals(1L, rationalNumber0.divisor);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(rationalNumber0.unsignedType);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(1, 1);
      float float0 = rationalNumber0.floatValue();
      assertEquals(1.0F, float0, 0.01F);
      assertFalse(rationalNumber0.unsignedType);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(1, (-2405), false);
      float float0 = rationalNumber0.floatValue();
      assertEquals((-4.1580043E-4F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(4294966649L, (-252645135L));
      assertEquals(31580642L, rationalNumber0.divisor);
      assertFalse(rationalNumber0.unsignedType);
      assertEquals((-16.999997371807705), rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      double double0 = rationalNumber0.doubleValue();
      assertFalse(rationalNumber0.unsignedType);
      assertEquals(1L, rationalNumber0.divisor);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(1, (-2405), false);
      double double0 = rationalNumber0.doubleValue();
      assertEquals((-4.158004158004158E-4), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(0, 0);
      // Undeclared exception!
      try { 
        rationalNumber0.toDisplayString();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-773L), 0);
      // Undeclared exception!
      try { 
        rationalNumber0.longValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(0, 0);
      // Undeclared exception!
      try { 
        rationalNumber0.intValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod(0L, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483681L), (-2147483681L));
      double double0 = rationalNumber0.doubleValue();
      assertEquals(1.0, double0, 0.01);
      assertEquals(1L, rationalNumber0.divisor);
      assertFalse(rationalNumber0.unsignedType);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.1474836464236238E9));
      assertEquals((-2.147483646E9), rationalNumber0.doubleValue(), 0.01);
      assertFalse(rationalNumber0.unsignedType);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2147483653L));
      assertFalse(rationalNumber0.unsignedType);
      assertEquals((-2.147483647E9), rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.147483647E9);
      assertFalse(rationalNumber0.unsignedType);
      assertEquals(2.147483647E9, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.0E-8);
      String string0 = rationalNumber0.toDisplayString();
      assertFalse(rationalNumber0.unsignedType);
      assertEquals(1.0E-8, rationalNumber0.doubleValue(), 0.01);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      String string0 = rationalNumber0.toString();
      assertFalse(rationalNumber0.unsignedType);
      assertEquals("0", string0);
      assertEquals(1L, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2335.84059773743));
      String string0 = rationalNumber0.toString();
      assertFalse(rationalNumber0.unsignedType);
      assertEquals("-93945173/40219 (-2,335.841)", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-674), (-1), true);
      // Undeclared exception!
      try { 
        rationalNumber0.negate();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Unsigned numerator is too large to negate 4294966622
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(0, 0, true);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      assertTrue(rationalNumber0.unsignedType);
      assertFalse(rationalNumber1.unsignedType);
      assertEquals(Double.NaN, rationalNumber1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod(4294967301L, 0L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: 4294967301, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-1), (-647), true);
      long long0 = rationalNumber0.longValue();
      assertEquals(1L, long0);
      assertTrue(rationalNumber0.unsignedType);
      assertEquals(1.0000001504086184, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483648L), (-2147483648L));
      int int0 = rationalNumber0.intValue();
      assertFalse(rationalNumber0.unsignedType);
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(1L, rationalNumber0.divisor);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-1));
      assertEquals(1L, rationalNumber0.divisor);
      assertEquals((-1.0), rationalNumber0.doubleValue(), 0.01);
      assertFalse(rationalNumber0.unsignedType);
  }
}
