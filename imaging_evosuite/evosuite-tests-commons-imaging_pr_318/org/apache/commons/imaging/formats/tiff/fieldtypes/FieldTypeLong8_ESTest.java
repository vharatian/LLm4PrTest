/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 18:18:38 GMT 2025
 */

package org.apache.commons.imaging.formats.tiff.fieldtypes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.nio.ByteOrder;
import org.apache.commons.imaging.formats.tiff.TiffField;
import org.apache.commons.imaging.formats.tiff.fieldtypes.AbstractFieldType;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeLong8;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FieldTypeLong8_ESTest extends FieldTypeLong8_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FieldTypeLong8 fieldTypeLong8_0 = new FieldTypeLong8(429, "YAHXv62");
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(429, (-2242), fieldTypeLong8_0, 0L, (-2831L), byteArray0, byteOrder0, 1);
      Object object0 = fieldTypeLong8_0.getValue(tiffField0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeLong8 fieldTypeLong8_0 = AbstractFieldType.IFD8;
      try { 
        fieldTypeLong8_0.writeData(byteOrder0, byteOrder0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid data: BIG_ENDIAN (java.nio.ByteOrder)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeLong8", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FieldTypeLong8 fieldTypeLong8_0 = AbstractFieldType.SLONG8;
      byte[] byteArray0 = new byte[1];
      TiffField tiffField0 = new TiffField(4573, 4573, fieldTypeLong8_0, (-2490L), (-2490L), byteArray0, (ByteOrder) null, 4573);
      // Undeclared exception!
      try { 
        fieldTypeLong8_0.writeData(tiffField0, (ByteOrder) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.Allocator", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FieldTypeLong8 fieldTypeLong8_0 = AbstractFieldType.SLONG8;
      // Undeclared exception!
      try { 
        fieldTypeLong8_0.getValue((TiffField) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeLong8", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FieldTypeLong8 fieldTypeLong8_0 = AbstractFieldType.LONG8;
      byte[] byteArray0 = new byte[0];
      TiffField tiffField0 = new TiffField((-4566), (-4566), fieldTypeLong8_0, (-4566), (-4566), byteArray0, (ByteOrder) null, (-4566));
      // Undeclared exception!
      try { 
        fieldTypeLong8_0.getValue(tiffField0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.Allocator", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeLong8 fieldTypeLong8_0 = AbstractFieldType.LONG8;
      byte[] byteArray0 = new byte[0];
      TiffField tiffField0 = new TiffField((-1866), (-1866), fieldTypeLong8_0, 1L, (-1866), byteArray0, byteOrder0, (-1866));
      // Undeclared exception!
      try { 
        fieldTypeLong8_0.getValue(tiffField0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.imaging.common.ByteConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeLong8 fieldTypeLong8_0 = AbstractFieldType.LONG8;
      TiffField tiffField0 = new TiffField(0, 0, fieldTypeLong8_0, 0, 0, (byte[]) null, byteOrder0, 0);
      // Undeclared exception!
      try { 
        fieldTypeLong8_0.writeData(tiffField0, byteOrder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FieldTypeLong8 fieldTypeLong8_0 = AbstractFieldType.IFD8;
      byte[] byteArray0 = new byte[5];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(13, 13, fieldTypeLong8_0, 1L, (-1418L), byteArray0, byteOrder0, (byte)0);
      Object object0 = fieldTypeLong8_0.getValue(tiffField0);
      byte[] byteArray1 = fieldTypeLong8_0.writeData(object0, byteOrder0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      FieldTypeLong8 fieldTypeLong8_0 = new FieldTypeLong8(0, "J>IFu<o~ 8d");
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(0, 0, fieldTypeLong8_0, 789L, 789L, byteArray0, byteOrder0, 0);
      Object object0 = fieldTypeLong8_0.SLONG8.getValue(tiffField0);
      assertNotNull(object0);
  }
}
