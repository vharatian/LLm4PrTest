/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 18:16:19 GMT 2025
 */

package org.apache.commons.imaging.formats.tiff.fieldtypes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.nio.ByteOrder;
import org.apache.commons.imaging.formats.tiff.TiffField;
import org.apache.commons.imaging.formats.tiff.fieldtypes.AbstractFieldType;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeAscii;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeDouble;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeLong8;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeShort;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AbstractFieldType_ESTest extends AbstractFieldType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      try { 
        AbstractFieldType.getFieldType(0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Field type 0 is unsupported
         //
         verifyException("org.apache.commons.imaging.formats.tiff.fieldtypes.AbstractFieldType", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii(50710, "Bc#?m}P08'O?J[");
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      fieldTypeAscii0.writeData("Bc#?m}P08'O?J[", byteOrder0);
      assertEquals(50710, fieldTypeAscii0.getType());
      assertEquals(1, fieldTypeAscii0.getSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AbstractFieldType abstractFieldType0 = AbstractFieldType.getFieldType(7);
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(7, (-1), abstractFieldType0, 7, (-1), byteArray0, byteOrder0, 7);
      Object object0 = abstractFieldType0.SBYTE.getValue(tiffField0);
      abstractFieldType0.writeData(object0, byteOrder0);
      assertEquals(7, tiffField0.getBytesLength());
      assertEquals("Undefined", tiffField0.getFieldTypeName());
      assertEquals("Undefined", abstractFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii((-720), "l.F^-=[o89\"+lxS");
      byte[] byteArray0 = new byte[5];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((-720), 5, fieldTypeAscii0.SBYTE, 1190L, (-2147483648L), byteArray0, byteOrder0, 2);
      fieldTypeAscii0.getValue(tiffField0);
      assertEquals(1, fieldTypeAscii0.getSize());
      assertEquals((-720), fieldTypeAscii0.getType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = new FieldTypeShort((-1008), "Rational");
      int int0 = fieldTypeShort0.getType();
      assertEquals((-1008), int0);
      assertEquals(2, fieldTypeShort0.getSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = AbstractFieldType.DOUBLE;
      int int0 = fieldTypeDouble0.getSize();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble((-2797), (String) null);
      fieldTypeDouble0.getName();
      assertEquals((-2797), fieldTypeDouble0.getType());
      assertEquals(8, fieldTypeDouble0.getSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble((-684), "");
      fieldTypeDouble0.getName();
      assertEquals((-684), fieldTypeDouble0.getType());
      assertEquals(8, fieldTypeDouble0.getSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = AbstractFieldType.DOUBLE;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      try { 
        fieldTypeDouble0.writeData("Double", byteOrder0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid data: Double (java.lang.String)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = AbstractFieldType.DOUBLE;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((-61), 8, fieldTypeDouble0, (-61), 8, byteArray0, byteOrder0, (-61));
      // Undeclared exception!
      try { 
        fieldTypeDouble0.getValue(tiffField0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.Allocator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = AbstractFieldType.DOUBLE;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((-61), 8, fieldTypeDouble0, 1L, 8, byteArray0, byteOrder0, (-61));
      // Undeclared exception!
      try { 
        fieldTypeDouble0.getValue(tiffField0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.imaging.common.ByteConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AbstractFieldType abstractFieldType0 = AbstractFieldType.getFieldType(3);
      // Undeclared exception!
      try { 
        abstractFieldType0.getValue((TiffField) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeShort", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = AbstractFieldType.DOUBLE;
      int int0 = fieldTypeDouble0.LONG8.getType();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = AbstractFieldType.DOUBLE;
      String string0 = fieldTypeDouble0.getName();
      assertEquals("Double", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FieldTypeLong8 fieldTypeLong8_0 = new FieldTypeLong8(0, "B2-gu}'/bp-;");
      int int0 = fieldTypeLong8_0.getType();
      assertEquals(0, int0);
      assertEquals(8, fieldTypeLong8_0.getSize());
  }
}
