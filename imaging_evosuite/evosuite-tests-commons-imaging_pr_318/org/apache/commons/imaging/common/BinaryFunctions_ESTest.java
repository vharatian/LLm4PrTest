/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 17:58:04 GMT 2025
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.RandomAccessFile;
import java.io.SequenceInputStream;
import java.nio.ByteOrder;
import java.nio.CharBuffer;
import java.util.Enumeration;
import org.apache.commons.imaging.common.BinaryConstant;
import org.apache.commons.imaging.common.BinaryFunctions;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class BinaryFunctions_ESTest extends BinaryFunctions_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)2;
      boolean boolean0 = BinaryFunctions.startsWith(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byte[] byteArray1 = new byte[7];
      boolean boolean0 = BinaryFunctions.startsWith(byteArray0, byteArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)47;
      byte[] byteArray1 = new byte[2];
      BinaryConstant binaryConstant0 = new BinaryConstant(byteArray1);
      boolean boolean0 = BinaryFunctions.startsWith(byteArray0, binaryConstant0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      boolean boolean0 = BinaryFunctions.searchQuad((-3499), byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BinaryFunctions.readAndVerifyBytes((InputStream) byteArrayInputStream0, byteArray0, (String) null);
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)111;
      BinaryConstant binaryConstant0 = new BinaryConstant(byteArray1);
      try { 
        BinaryFunctions.readAndVerifyBytes((InputStream) byteArrayInputStream0, binaryConstant0, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)120;
      byteArray0[5] = (byte)80;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.skip(1L);
      byteArrayInputStream0.read();
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      try { 
        BinaryFunctions.read8Bytes("^IPS", byteArrayInputStream0, "^IPS", byteOrder0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ^IPS
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte)120;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      try { 
        BinaryFunctions.read8Bytes("^IPS", byteArrayInputStream0, "^IPS", byteOrder0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ^IPS
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte)120;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.skip(1L);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      try { 
        BinaryFunctions.read8Bytes("^IPS", byteArrayInputStream0, "^IPS", byteOrder0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ^IPS
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      try { 
        BinaryFunctions.read4Bytes("G^zI[w<Z%", byteArrayInputStream0, "", byteOrder0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      BinaryConstant binaryConstant0 = new BinaryConstant(byteArray0);
      BinaryFunctions.readAndVerifyBytes((InputStream) byteArrayInputStream0, binaryConstant0, "}GH(h7{o~)<l$S&H}");
      try { 
        BinaryFunctions.read4Bytes("}GH(h7{o~)<l$S&H}", byteArrayInputStream0, "}GH(h7{o~)<l$S&H}", byteOrder0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // }GH(h7{o~)<l$S&H}
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int int0 = BinaryFunctions.read3Bytes("btN^dz/AeQS^e\"'Y", byteArrayInputStream0, "btN^dz/AeQS^e\"'Y", (ByteOrder) null);
      assertEquals(65280, int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)57;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int int0 = BinaryFunctions.read3Bytes("btN^dz/AeQS^e\"'Y", byteArrayInputStream0, "btN^dz/AeQS^e\"'Y", (ByteOrder) null);
      assertEquals(3735552, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int int0 = BinaryFunctions.read2Bytes("[char[]: ", byteArrayInputStream0, "[char[]: ", (ByteOrder) null);
      assertEquals(512, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      BinaryFunctions.printCharQuad(mockPrintWriter0, "", (-4));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BinaryFunctions.logCharQuad("visitFileFailed", (-1));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = BinaryFunctions.head(byteArray0, 0);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      // Undeclared exception!
      try { 
        BinaryFunctions.getBytes((RandomAccessFile) null, 887L, 68, "%m2ChU{U:R\"K~aVg8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.RandomAccessFiles", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-43);
      int int0 = BinaryFunctions.findNull(byteArray0, "");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = BinaryFunctions.compareBytes(byteArray0, (-2499), byteArray0, (-2499), (-1041));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byte[] byteArray1 = BinaryFunctions.slice(byteArray0, (byte)0, (byte)0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 255, 255);
      long long0 = BinaryFunctions.skipBytes((InputStream) byteArrayInputStream0, (long) 255, "Unexpected EOF");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      long long0 = BinaryFunctions.skipBytes((InputStream) byteArrayInputStream0, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = BinaryFunctions.remainingBytes("%s, invalid length: %d", byteArray0, (byte)3);
      assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = BinaryFunctions.readBytes((InputStream) byteArrayInputStream0, 4);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)47, (byte)110);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      pushbackInputStream0.unread(10);
      byte byte0 = BinaryFunctions.readByte("", pushbackInputStream0, (String) null);
      assertEquals((byte)10, byte0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      int int0 = BinaryFunctions.read2Bytes("G^zI[w<Z%", byteArrayInputStream0, "fileFilters", byteOrder0);
      assertEquals(12032, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = BinaryFunctions.head(byteArray0, 0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      // Undeclared exception!
      try { 
        BinaryFunctions.startsWith(byteArray0, (BinaryConstant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        BinaryFunctions.slice(byteArray0, 16, 24);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        BinaryFunctions.skipBytes((InputStream) null, (long) (byte)13, "\r");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        BinaryFunctions.skipBytes((InputStream) pipedInputStream0, (long) (-1), "visitFileFailed");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Skip count must be non-negative, actual: -1
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-36), 255);
      // Undeclared exception!
      try { 
        BinaryFunctions.skipBytes((InputStream) byteArrayInputStream0, 35L, "cYG'}1");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        BinaryFunctions.skipBytes((InputStream) pipedInputStream0, 1L, "org.apache.commons.io.filefilter.SizeFileFilter");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // org.apache.commons.io.filefilter.SizeFileFilter
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        BinaryFunctions.skipBytes((InputStream) pipedInputStream0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Skip count must be non-negative, actual: -1
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        BinaryFunctions.skipBytes((InputStream) pipedInputStream0, (long) (byte)2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Couldn't skip bytes
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        BinaryFunctions.searchQuad((-1073741823), (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 381);
      try { 
        BinaryFunctions.searchQuad(381, pushbackInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        BinaryFunctions.remainingBytes("", (byte[]) null, 2021161080);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        BinaryFunctions.remainingBytes("_L$u#ORdiBpXD", byteArray0, (-3144));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2642, (-2509));
      // Undeclared exception!
      try { 
        BinaryFunctions.readBytes("str2", (InputStream) byteArrayInputStream0, (-2509), "str2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size must be equal or greater than zero: -2509
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1325);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1325);
      try { 
        BinaryFunctions.readBytes("*Hbgiu*DXk@", (InputStream) bufferedInputStream0, 1325, "*Hbgiu*DXk@");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // *Hbgiu*DXk@, name: *Hbgiu*DXk@, length: 1325
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        BinaryFunctions.readBytes("M rg", (InputStream) null, 1176127087);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Allocation limit 1,073,741,824 exceeded: 1,176,127,087
         //
         verifyException("org.apache.commons.imaging.common.Allocator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      try { 
        BinaryFunctions.readBytes("", (InputStream) sequenceInputStream0, 2273);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         //  could not be read., name: , length: 2273
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        BinaryFunctions.readBytes((InputStream) pipedInputStream0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size must be equal or greater than zero: -1
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        BinaryFunctions.readBytes((InputStream) byteArrayInputStream0, 3138);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected EOF, name: , length: 3138
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        BinaryFunctions.readByte("Couldn't skip bytes", (InputStream) null, "_'^_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        BinaryFunctions.readAndVerifyBytes((InputStream) null, byteArray0, "System");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      try { 
        BinaryFunctions.readAndVerifyBytes((InputStream) pushbackInputStream0, byteArray0, "[dshort[]: ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        BinaryFunctions.readAndVerifyBytes((InputStream) pipedInputStream0, (BinaryConstant) null, "%s, invalid length: %d");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      BinaryConstant binaryConstant0 = new BinaryConstant(byteArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        BinaryFunctions.readAndVerifyBytes((InputStream) pipedInputStream0, binaryConstant0, "visitFileFailed");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      // Undeclared exception!
      try { 
        BinaryFunctions.read8Bytes("OoA6VYsRrmi3m*f;C", (InputStream) null, "OoA6VYsRrmi3m*f;C", byteOrder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2928), 57);
      CharBuffer charBuffer0 = CharBuffer.allocate(75);
      ByteOrder byteOrder0 = charBuffer0.order();
      // Undeclared exception!
      try { 
        BinaryFunctions.read8Bytes(": '", byteArrayInputStream0, "}xyzcES]", byteOrder0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      // Undeclared exception!
      try { 
        BinaryFunctions.read4Bytes("Unexpected EOF.", (InputStream) null, "", byteOrder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      // Undeclared exception!
      try { 
        BinaryFunctions.read3Bytes((String) null, (InputStream) null, (String) null, byteOrder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        BinaryFunctions.read2Bytes("sjBCu(Lb}~J", (InputStream) null, "n~AH ", (ByteOrder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        BinaryFunctions.head((byte[]) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      try { 
        BinaryFunctions.findNull(byteArray0, "$TN]M~=L#Mrxm");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // $TN]M~=L#Mrxm
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        BinaryFunctions.compareBytes((byte[]) null, 255, (byte[]) null, 6, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      // Undeclared exception!
      try { 
        BinaryFunctions.compareBytes(byteArray0, (-689), byteArray0, (-689), 643);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -689
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)47;
      int int0 = BinaryFunctions.findNull(byteArray0, (int) (byte)0, "str2");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      int int0 = BinaryFunctions.findNull(byteArray0, (int) (byte)0, "str2");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        BinaryFunctions.findNull(byteArray0, (-1), ", name: ");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      // Undeclared exception!
      try { 
        BinaryFunctions.slice(byteArray0, (-2536), (-1333));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.Allocator", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = BinaryFunctions.readBytes("sjBCu(Lb}~J", (InputStream) byteArrayInputStream0, (int) (byte)0, "9JShqbqONuYS*tn4");
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-4);
      boolean boolean0 = BinaryFunctions.startsWith(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byte[] byteArray1 = new byte[2];
      boolean boolean0 = BinaryFunctions.startsWith(byteArray1, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      boolean boolean0 = BinaryFunctions.startsWith((byte[]) null, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = BinaryFunctions.startsWith((byte[]) null, (byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)40;
      BinaryConstant binaryConstant0 = new BinaryConstant(byteArray1);
      boolean boolean0 = BinaryFunctions.startsWith(byteArray0, binaryConstant0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      BinaryConstant binaryConstant0 = new BinaryConstant(byteArray0);
      byte[] byteArray1 = new byte[3];
      boolean boolean0 = BinaryFunctions.startsWith(byteArray1, binaryConstant0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      BinaryConstant binaryConstant0 = new BinaryConstant(byteArray0);
      boolean boolean0 = BinaryFunctions.startsWith(byteArray0, binaryConstant0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      BinaryConstant binaryConstant0 = new BinaryConstant(byteArray0);
      boolean boolean0 = BinaryFunctions.startsWith((byte[]) null, binaryConstant0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BinaryConstant binaryConstant0 = new BinaryConstant(byteArray0);
      BinaryFunctions.readAndVerifyBytes((InputStream) byteArrayInputStream0, binaryConstant0, "org.apache.commons.io.filefilter.DelegateFileFilter");
      try { 
        BinaryFunctions.readByte("Qg", byteArrayInputStream0, "org.apache.commons.io.filefilter.DelegateFileFilter");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // org.apache.commons.io.filefilter.DelegateFileFilter
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte byte0 = BinaryFunctions.readByte("org.apache.commons.imaging.common.AllocationRequestException", byteArrayInputStream0, "'");
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)4, 1708);
      try { 
        BinaryFunctions.readAndVerifyBytes((InputStream) byteArrayInputStream0, byteArray0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[8];
      try { 
        BinaryFunctions.readAndVerifyBytes((InputStream) sequenceInputStream0, byteArray0, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected EOF.
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)81;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      BinaryConstant binaryConstant0 = new BinaryConstant(byteArray0);
      try { 
        BinaryFunctions.readAndVerifyBytes((InputStream) byteArrayInputStream0, binaryConstant0, ",K3vO}^,)^G)m&!P");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ,K3vO}^,)^G)m&!P
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      BinaryFunctions.read2Bytes("G^zI[w<Z%", byteArrayInputStream0, "G^zI[w<Z%", byteOrder0);
      BinaryConstant binaryConstant0 = new BinaryConstant(byteArray0);
      try { 
        BinaryFunctions.readAndVerifyBytes((InputStream) byteArrayInputStream0, binaryConstant0, "G^zI[w<Z%");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected EOF.
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      long long0 = BinaryFunctions.read8Bytes("i3", byteArrayInputStream0, "", byteOrder0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      long long0 = BinaryFunctions.read8Bytes("IJPHr2kW|ZyQ[>!xl~B", byteArrayInputStream0, "IJPHr2kW|ZyQ[>!xl~B", byteOrder0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      int int0 = BinaryFunctions.read4Bytes("suffix", byteArrayInputStream0, "sjBCu(Lb}~J", byteOrder0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int int0 = BinaryFunctions.read4Bytes("", byteArrayInputStream0, "", (ByteOrder) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      int int0 = BinaryFunctions.read3Bytes("", byteArrayInputStream0, "org.apache.commons.io.filefilter.WildcardFilter", byteOrder0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BinaryFunctions.readAndVerifyBytes((InputStream) byteArrayInputStream0, byteArray0, "org.apache.commons.io.filefilter.DelegateFileFilter");
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      try { 
        BinaryFunctions.read3Bytes("", byteArrayInputStream0, "", byteOrder0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      int int0 = BinaryFunctions.read3Bytes("cYG'}1", byteArrayInputStream0, (String) null, byteOrder0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      BinaryFunctions.searchQuad(2659, byteArrayInputStream0);
      try { 
        BinaryFunctions.read2Bytes("0BP;v3sG0", byteArrayInputStream0, "|)jh", byteOrder0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // |)jh
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = BinaryFunctions.head(byteArray0, (byte)13);
      assertEquals(5, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        BinaryFunctions.head(byteArray0, (-197));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.Allocator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      try { 
        BinaryFunctions.getBytes((RandomAccessFile) null, 0, (-334), "%m2ChU{U:R\"K~aVg8");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // %m2ChU{U:R\"K~aVg8, invalid length: -334
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        BinaryFunctions.getBytes((RandomAccessFile) null, 887L, 0, "%m2ChU{U:R\"K~aVg8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.RandomAccessFiles", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      try { 
        BinaryFunctions.findNull(byteArray0, 3847, "\n");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      boolean boolean0 = BinaryFunctions.compareBytes(byteArray0, (byte)2, byteArray0, (byte)2, (byte)2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = BinaryFunctions.compareBytes(byteArray0, (byte)2, byteArray0, (byte)47, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      boolean boolean0 = BinaryFunctions.compareBytes(byteArray0, 1321, byteArray0, (-1010), 1321);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        BinaryFunctions.printCharQuad((PrintWriter) null, "'}; i{/I91cyj", 14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = BinaryFunctions.charsToQuad('5', '5', 'm', 'm');
      assertEquals(892693869, int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      long long0 = BinaryFunctions.skipBytes((InputStream) byteArrayInputStream0, 2147483647L);
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      int int0 = BinaryFunctions.findNull(byteArray0, "0D\"");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = BinaryFunctions.readBytes("", (InputStream) byteArrayInputStream0, 0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = BinaryFunctions.quadsToByteArray(255);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-1)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(14);
      byte[] byteArray0 = BinaryFunctions.readBytes((InputStream) pipedInputStream0, (int) (byte)0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        BinaryFunctions.remainingBytes("}?F ", byteArray0, 113);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.Allocator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      long long0 = BinaryFunctions.skipBytes((InputStream) byteArrayInputStream0, 1L, (String) null);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BinaryFunctions.logByteBits("", (byte) (-111));
  }
}
