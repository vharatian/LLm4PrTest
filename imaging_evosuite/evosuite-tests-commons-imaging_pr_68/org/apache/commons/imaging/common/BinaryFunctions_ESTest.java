/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 00:48:59 GMT 2025
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.ByteOrder;
import java.nio.CharBuffer;
import java.util.Enumeration;
import org.apache.commons.imaging.common.BinaryConstant;
import org.apache.commons.imaging.common.BinaryFunctions;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class BinaryFunctions_ESTest extends BinaryFunctions_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      boolean boolean0 = BinaryFunctions.searchQuad((-5139), byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BinaryFunctions.printCharQuad("F1c", (-885));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-89);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      int int0 = BinaryFunctions.read2Bytes("Db4U1[", byteArrayInputStream0, "Couldn't skip bytes", byteOrder0);
      assertEquals(42752, int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      int int0 = BinaryFunctions.read2Bytes("hX_+UN-", byteArrayInputStream0, "hX_+UN-", byteOrder0);
      assertEquals(815, int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ByteOrder byteOrder0 = charBuffer0.order();
      int int0 = BinaryFunctions.read3Bytes("5t7qP+F/1", byteArrayInputStream0, "The array of suffixes must not be null", byteOrder0);
      assertEquals(768, int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      char[] charArray0 = new char[7];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ByteOrder byteOrder0 = charBuffer0.order();
      int int0 = BinaryFunctions.read3Bytes(" (", byteArrayInputStream0, "", byteOrder0);
      assertEquals(65536, int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)59;
      byteArray0[2] = (byte)41;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      int int0 = BinaryFunctions.read3Bytes("", byteArrayInputStream0, (String) null, byteOrder0);
      assertEquals(3866665, int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-119);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      int int0 = BinaryFunctions.read3Bytes("", byteArrayInputStream0, (String) null, byteOrder0);
      assertEquals(3901696, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)82;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      int int0 = BinaryFunctions.read4Bytes((String) null, byteArrayInputStream0, "G6L,v", byteOrder0);
      assertEquals(20992, int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-7);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      int int0 = BinaryFunctions.read4Bytes((String) null, byteArrayInputStream0, "G6L,v", byteOrder0);
      assertEquals(16318464, int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)98;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      int int0 = BinaryFunctions.read4Bytes("\"i14,|Dw:M", sequenceInputStream0, "\"i14,|Dw:M", byteOrder0);
      assertEquals(25088, int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-90);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      int int0 = BinaryFunctions.read4Bytes("\"i14,|Dw:M", sequenceInputStream0, "\"i14,|Dw:M", byteOrder0);
      assertEquals(10878976, int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)87;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, (byte)87);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      try { 
        BinaryFunctions.read4Bytes("", byteArrayInputStream0, "U1]=3M:slg9Cj^{", byteOrder0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // U1]=3M:slg9Cj^{
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)1;
      boolean boolean0 = BinaryFunctions.compareBytes(byteArray0, (byte)0, byteArray0, (byte)2, (byte)1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = BinaryFunctions.compareBytes(byteArray0, (byte)0, byteArray0, 435, (-2755));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = BinaryFunctions.head(byteArray0, 1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = BinaryFunctions.quadsToByteArray(2042);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2, 1);
      BinaryConstant binaryConstant0 = new BinaryConstant(byteArray0);
      try { 
        BinaryFunctions.readAndVerifyBytes((InputStream) byteArrayInputStream0, binaryConstant0, "af84?LvJ1");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // af84?LvJ1
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BinaryConstant binaryConstant0 = new BinaryConstant(byteArray0);
      BinaryFunctions.readAndVerifyBytes((InputStream) byteArrayInputStream0, binaryConstant0, "3S'\u0003PT~J");
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)87;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, (byte)87);
      try { 
        BinaryFunctions.readAndVerifyBytes((InputStream) byteArrayInputStream0, byteArray0, "The suffixmust not be null");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The suffixmust not be null
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = BinaryFunctions.quadsToByteArray(1111);
      BinaryConstant binaryConstant0 = new BinaryConstant(byteArray1);
      boolean boolean0 = BinaryFunctions.startsWith(byteArray0, binaryConstant0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)4, (byte)87}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = BinaryFunctions.quadsToByteArray(3832);
      boolean boolean0 = BinaryFunctions.startsWith(byteArray0, byteArray1);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)14, (byte) (-8)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("eYh\"");
      BinaryFunctions.printCharQuad((PrintWriter) mockPrintWriter0, "eYh\"", (-3763));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = BinaryFunctions.quadsToByteArray(3);
      byte[] byteArray1 = BinaryFunctions.slice(byteArray0, 0, 3);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3}, byteArray0);
      assertEquals(3, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = BinaryFunctions.slice(byteArray0, (byte)0, (byte)0);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = BinaryFunctions.remainingBytes("rEREOp|", byteArray0, 0);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = BinaryFunctions.remainingBytes("", byteArray0, (byte)3);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 2057);
      BinaryFunctions.readBytes("", (InputStream) byteArrayInputStream0, 2, "");
      assertEquals(5, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = BinaryFunctions.readBytes("3S'\u0003PT~J", (InputStream) byteArrayInputStream0, (int) (byte)0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BinaryFunctions.readBytes((InputStream) byteArrayInputStream0, 5);
      assertEquals(1, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = BinaryFunctions.readBytes((InputStream) byteArrayInputStream0, 0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte byte0 = BinaryFunctions.readByte("", byteArrayInputStream0, "+c9A:X");
      assertEquals((byte)47, byte0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-52);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte byte0 = BinaryFunctions.readByte("'", byteArrayInputStream0, "");
      assertEquals((byte) (-52), byte0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      int int0 = BinaryFunctions.read4Bytes("\"i14,|Dw:M", sequenceInputStream0, "\"i14,|Dw:M", byteOrder0);
      assertEquals(117440512, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte) (-36);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      int int0 = BinaryFunctions.read4Bytes((String) null, byteArrayInputStream0, "G6L,v", byteOrder0);
      assertEquals((-603979776), int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = BinaryFunctions.head(byteArray0, (byte)0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      byte[] byteArray2 = BinaryFunctions.getStreamBytes(byteArrayInputStream0);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)120;
      int int0 = BinaryFunctions.findNull(byteArray0, 0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-38);
      int int0 = BinaryFunctions.findNull(byteArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        BinaryFunctions.startsWith(byteArray0, (BinaryConstant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        BinaryFunctions.slice((byte[]) null, (-3606), 2318);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        BinaryFunctions.slice(byteArray0, 1785358954, (-3363));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        BinaryFunctions.skipBytes((InputStream) null, (-3286L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        BinaryFunctions.skipBytes((InputStream) byteArrayInputStream0, 24L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Couldn't skip bytes (0)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        BinaryFunctions.searchQuad(142, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        BinaryFunctions.searchQuad(255, pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        BinaryFunctions.remainingBytes("", byteArray0, (-238));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        BinaryFunctions.readBytes("", (InputStream) null, 1, "sv,4b~)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        BinaryFunctions.readBytes("V 6fQI@>E~ecIJm#'", (InputStream) byteArrayInputStream0, (-3763), "V 6fQI@>E~ecIJm#'");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1778), 311);
      // Undeclared exception!
      try { 
        BinaryFunctions.readBytes((String) null, (InputStream) byteArrayInputStream0, (int) (byte)87, "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        BinaryFunctions.readBytes("Hgb?PK2ME[lJC", (InputStream) null, 1552);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        BinaryFunctions.readBytes("@>%wLk", (InputStream) byteArrayInputStream0, (-124));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        BinaryFunctions.readBytes((InputStream) null, 448);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        BinaryFunctions.readBytes((InputStream) byteArrayInputStream0, (-1360));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-12), 1908);
      // Undeclared exception!
      try { 
        BinaryFunctions.readBytes((InputStream) byteArrayInputStream0, 361);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        BinaryFunctions.readAndVerifyBytes((InputStream) null, byteArray0, "j");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = BinaryFunctions.quadsToByteArray(3);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-4839), 3);
      // Undeclared exception!
      try { 
        BinaryFunctions.readAndVerifyBytes((InputStream) byteArrayInputStream0, byteArray0, "org.apache.commons.io.filefilter.PrefixFileFilter");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        BinaryFunctions.readAndVerifyBytes((InputStream) pipedInputStream0, byteArray0, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        BinaryFunctions.readAndVerifyBytes((InputStream) byteArrayInputStream0, (BinaryConstant) null, " ,Mll");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      BinaryConstant binaryConstant0 = new BinaryConstant(byteArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)1);
      try { 
        BinaryFunctions.readAndVerifyBytes((InputStream) pipedInputStream0, binaryConstant0, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      // Undeclared exception!
      try { 
        BinaryFunctions.read4Bytes(")zS#J", (InputStream) null, ")zS#J", byteOrder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2784), 637);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      // Undeclared exception!
      try { 
        BinaryFunctions.read4Bytes("qTS7M", pushbackInputStream0, "", byteOrder0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      // Undeclared exception!
      try { 
        BinaryFunctions.read3Bytes("Unexpected EOF", (InputStream) null, "Unexpected EOF", byteOrder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1576), 1628);
      // Undeclared exception!
      try { 
        BinaryFunctions.read3Bytes("B8Nxl", byteArrayInputStream0, "#2IxlJDGd*-_fFT7", byteOrder0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      // Undeclared exception!
      try { 
        BinaryFunctions.read2Bytes(" (", (InputStream) null, " (", byteOrder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1053), 1274);
      // Undeclared exception!
      try { 
        BinaryFunctions.read2Bytes((String) null, byteArrayInputStream0, "$jM4xMJERwtaI", byteOrder0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        BinaryFunctions.head((byte[]) null, 1419);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        BinaryFunctions.getStreamBytes((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-31), (byte)87);
      // Undeclared exception!
      try { 
        BinaryFunctions.getStreamBytes(byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        BinaryFunctions.getStreamBytes(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        BinaryFunctions.findNull((byte[]) null, 339);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        BinaryFunctions.findNull(byteArray0, (-3773));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3773
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        BinaryFunctions.findNull((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        BinaryFunctions.copyStreamToStream(byteArrayInputStream0, pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        BinaryFunctions.compareBytes((byte[]) null, 0, (byte[]) null, 16, (-32));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "Insensitive");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("W]h/G3BOSkf%|-r(E;h");
      BinaryFunctions.copyStreamToStream(mockFileInputStream0, mockPrintStream0);
      assertEquals((-1), mockFileInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        BinaryFunctions.copyStreamToStream(byteArrayInputStream0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = BinaryFunctions.quadsToByteArray(3);
      int int0 = BinaryFunctions.findNull(byteArray0, 3);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      int int0 = BinaryFunctions.findNull(byteArray0, (int) (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BinaryFunctions.skipBytes((InputStream) sequenceInputStream0, (long) (byte)0, "org.apache.commons.io.filefilter.WildcardFileFilter");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        BinaryFunctions.readBytes("r7N6yD)Oq`z:2[H @W", (InputStream) byteArrayInputStream0, 3675, "Unexpected EOF");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected EOF count: -1 read: 5 length: 3675
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        BinaryFunctions.slice(byteArray0, 82, 82);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = BinaryFunctions.quadsToByteArray((-4247));
      int int0 = BinaryFunctions.findNull(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-17), (byte)105}, byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      int int0 = BinaryFunctions.findNull(byteArray0, 901);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      boolean boolean0 = BinaryFunctions.searchQuad(0, byteArrayInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      boolean boolean0 = BinaryFunctions.searchQuad(3285, bufferedInputStream0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      int int0 = BinaryFunctions.read2Bytes("hX_+UN-", byteArrayInputStream0, "hX_+UN-", byteOrder0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      try { 
        BinaryFunctions.read2Bytes("", byteArrayInputStream0, "", byteOrder0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      int int0 = BinaryFunctions.read3Bytes("B8Nxl", byteArrayInputStream0, "B8Nxl", byteOrder0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      try { 
        BinaryFunctions.read3Bytes("", byteArrayInputStream0, "", byteOrder0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      int int0 = BinaryFunctions.read4Bytes("G6L,v", byteArrayInputStream0, "G6L,v", byteOrder0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[3];
      byteArray1[1] = (byte)1;
      boolean boolean0 = BinaryFunctions.compareBytes(byteArray1, (byte)1, byteArray0, 0, (byte)1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = BinaryFunctions.compareBytes(byteArray0, (byte)1, byteArray0, (byte)2, 3);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = BinaryFunctions.compareBytes(byteArray0, 3, byteArray0, 0, 0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = BinaryFunctions.compareBytes(byteArray0, (-1545), byteArray0, 258, 258);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = BinaryFunctions.compareBytes(byteArray0, (-12), byteArray0, 1908, 1908);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        BinaryFunctions.compareBytes(byteArray0, 1, byteArray0, (-99), 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -99
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = BinaryFunctions.head(byteArray0, (byte)55);
      assertEquals(7, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        BinaryFunctions.head(byteArray0, (-38));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        BinaryFunctions.skipBytes((InputStream) byteArrayInputStream0, (long) (byte)47, "3S'\u0003PT~J");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 3S'\u0003PT~J (0)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)9;
      BinaryConstant binaryConstant0 = new BinaryConstant(byteArray1);
      try { 
        BinaryFunctions.readAndVerifyBytes((InputStream) byteArrayInputStream0, binaryConstant0, "Unexpected EOF");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected EOF
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      BinaryConstant binaryConstant0 = new BinaryConstant(byteArray0);
      try { 
        BinaryFunctions.readAndVerifyBytes((InputStream) byteArrayInputStream0, binaryConstant0, " count: ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected EOF.
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-128);
      try { 
        BinaryFunctions.readAndVerifyBytes((InputStream) byteArrayInputStream0, byteArray1, ",");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ,
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BinaryConstant binaryConstant0 = new BinaryConstant(byteArray0);
      BinaryFunctions.readAndVerifyBytes((InputStream) byteArrayInputStream0, binaryConstant0, "3S'\u0003PT~J");
      try { 
        BinaryFunctions.readAndVerifyBytes((InputStream) byteArrayInputStream0, byteArray0, "3S'\u0003PT~J");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected EOF.
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)70;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, (byte)70);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)70;
      BinaryFunctions.readAndVerifyBytes((InputStream) byteArrayInputStream0, byteArray1, "The suffix must not be null");
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = BinaryFunctions.readBytes("hX_+UN-", (InputStream) sequenceInputStream0, 0, "");
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BinaryConstant binaryConstant0 = new BinaryConstant(byteArray0);
      BinaryFunctions.readAndVerifyBytes((InputStream) byteArrayInputStream0, binaryConstant0, "'");
      try { 
        BinaryFunctions.readByte("]6`", byteArrayInputStream0, ">");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // >
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte byte0 = BinaryFunctions.readByte("6| jr;&/T9Rk/>}", byteArrayInputStream0, "");
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      BinaryConstant binaryConstant0 = new BinaryConstant(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)3;
      boolean boolean0 = BinaryFunctions.startsWith(byteArray1, binaryConstant0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = new byte[0];
      BinaryConstant binaryConstant0 = new BinaryConstant(byteArray0);
      boolean boolean0 = BinaryFunctions.startsWith(byteArray1, binaryConstant0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      BinaryConstant binaryConstant0 = new BinaryConstant(byteArray0);
      boolean boolean0 = BinaryFunctions.startsWith(byteArray0, binaryConstant0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = BinaryFunctions.startsWith((byte[]) null, (BinaryConstant) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-109);
      boolean boolean0 = BinaryFunctions.startsWith(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = new byte[1];
      boolean boolean0 = BinaryFunctions.startsWith(byteArray1, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = BinaryFunctions.startsWith((byte[]) null, (byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = BinaryFunctions.startsWith(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BinaryFunctions.skipBytes((InputStream) byteArrayInputStream0, 1L);
      assertEquals(4, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BinaryFunctions.printByteBits("", (byte)0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        BinaryFunctions.remainingBytes("The list of prefixes must not be null", byteArray0, 730);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        BinaryFunctions.printCharQuad((PrintWriter) null, "^^%k&cA/l0l}", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        BinaryFunctions.readBytes("", (InputStream) byteArrayInputStream0, 1254);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         //  could not be read. count: -1 read: 5 length: 1254
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = BinaryFunctions.getStreamBytes(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-3221), 384);
      // Undeclared exception!
      try { 
        BinaryFunctions.searchQuad((-3221), byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = BinaryFunctions.charsToQuad('_', '9', '/', '_');
      assertEquals(1597583199, int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        BinaryFunctions.readBytes((InputStream) pipedInputStream0, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        BinaryFunctions.remainingBytes((String) null, (byte[]) null, 24);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      int int0 = BinaryFunctions.findNull(byteArray0);
      assertEquals(0, int0);
  }
}
