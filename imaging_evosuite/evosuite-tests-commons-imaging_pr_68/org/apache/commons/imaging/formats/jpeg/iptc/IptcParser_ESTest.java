/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 00:54:14 GMT 2025
 */

package org.apache.commons.imaging.formats.jpeg.iptc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.apache.commons.imaging.formats.jpeg.iptc.IptcBlock;
import org.apache.commons.imaging.formats.jpeg.iptc.IptcParser;
import org.apache.commons.imaging.formats.jpeg.iptc.IptcRecord;
import org.apache.commons.imaging.formats.jpeg.iptc.IptcType;
import org.apache.commons.imaging.formats.jpeg.iptc.IptcTypes;
import org.apache.commons.imaging.formats.jpeg.iptc.PhotoshopApp13Data;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class IptcParser_ESTest extends IptcParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IptcParser iptcParser0 = new IptcParser();
      IptcType iptcType0 = IptcTypes.getUnknown(0);
      IptcRecord iptcRecord0 = new IptcRecord(iptcType0, "");
      LinkedList<IptcRecord> linkedList0 = new LinkedList<IptcRecord>();
      linkedList0.add(iptcRecord0);
      byte[] byteArray0 = iptcParser0.writeIPTCBlock(linkedList0);
      assertEquals(12, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IptcParser iptcParser0 = new IptcParser();
      LinkedList<IptcRecord> linkedList0 = new LinkedList<IptcRecord>();
      IptcTypes iptcTypes0 = IptcTypes.CONTACT;
      IptcRecord iptcRecord0 = new IptcRecord(iptcTypes0, "?~VkFZ6Te,&k");
      linkedList0.add(iptcRecord0);
      IptcTypes iptcTypes1 = IptcTypes.EXPIRATION_DATE;
      IptcRecord iptcRecord1 = new IptcRecord(iptcTypes1, "\";njb?99-v#r~`*f^");
      linkedList0.add(iptcRecord1);
      byte[] byteArray0 = iptcParser0.writeIPTCBlock(linkedList0);
      assertEquals(46, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IptcParser iptcParser0 = new IptcParser();
      LinkedList<IptcRecord> linkedList0 = new LinkedList<IptcRecord>();
      LinkedList<IptcBlock> linkedList1 = new LinkedList<IptcBlock>();
      byte[] byteArray0 = new byte[2];
      IptcBlock iptcBlock0 = new IptcBlock(65535, byteArray0, byteArray0);
      linkedList1.add(iptcBlock0);
      PhotoshopApp13Data photoshopApp13Data0 = new PhotoshopApp13Data(linkedList0, linkedList1);
      byte[] byteArray1 = iptcParser0.writePhotoshopApp13Segment(photoshopApp13Data0);
      assertEquals(30, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IptcParser iptcParser0 = new IptcParser();
      byte[] byteArray0 = new byte[5];
      List<IptcRecord> list0 = iptcParser0.parseIPTCBlock(byteArray0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IptcParser iptcParser0 = new IptcParser();
      byte[] byteArray0 = new byte[1];
      List<IptcRecord> list0 = iptcParser0.parseIPTCBlock(byteArray0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IptcParser iptcParser0 = new IptcParser();
      LinkedList<IptcBlock> linkedList0 = new LinkedList<IptcBlock>();
      PhotoshopApp13Data photoshopApp13Data0 = new PhotoshopApp13Data((List<IptcRecord>) null, linkedList0);
      byte[] byteArray0 = iptcParser0.writePhotoshopApp13Segment(photoshopApp13Data0);
      List<IptcBlock> list0 = iptcParser0.parseAllBlocks(byteArray0, true);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IptcParser iptcParser0 = new IptcParser();
      // Undeclared exception!
      try { 
        iptcParser0.writePhotoshopApp13Segment((PhotoshopApp13Data) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.jpeg.iptc.IptcParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IptcParser iptcParser0 = new IptcParser();
      // Undeclared exception!
      try { 
        iptcParser0.writeIPTCBlock((List<IptcRecord>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IptcParser iptcParser0 = new IptcParser();
      // Undeclared exception!
      try { 
        iptcParser0.parsePhotoshopSegment((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IptcParser iptcParser0 = new IptcParser();
      LinkedList<IptcBlock> linkedList0 = new LinkedList<IptcBlock>();
      byte[] byteArray0 = new byte[20];
      IptcBlock iptcBlock0 = new IptcBlock(1057, byteArray0, byteArray0);
      linkedList0.add(iptcBlock0);
      linkedList0.add(iptcBlock0);
      PhotoshopApp13Data photoshopApp13Data0 = new PhotoshopApp13Data((List<IptcRecord>) null, linkedList0);
      linkedList0.add(iptcBlock0);
      byte[] byteArray1 = iptcParser0.writePhotoshopApp13Segment(photoshopApp13Data0);
      IptcBlock iptcBlock1 = new IptcBlock(1057, byteArray1, byteArray1);
      linkedList0.add(iptcBlock1);
      byte[] byteArray2 = iptcParser0.writePhotoshopApp13Segment(photoshopApp13Data0);
      // Undeclared exception!
      try { 
        iptcParser0.parsePhotoshopSegment(byteArray2, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IptcParser iptcParser0 = new IptcParser();
      byte[] byteArray0 = new byte[3];
      try { 
        iptcParser0.parsePhotoshopSegment(byteArray0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // App13 Segment missing identification string count: -1 read: 3 length: 14
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IptcParser iptcParser0 = new IptcParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        iptcParser0.parsePhotoshopSegment((byte[]) null, (Map<String, Object>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IptcParser iptcParser0 = new IptcParser();
      LinkedList<IptcBlock> linkedList0 = new LinkedList<IptcBlock>();
      byte[] byteArray0 = new byte[20];
      IptcBlock iptcBlock0 = new IptcBlock(1057, byteArray0, byteArray0);
      linkedList0.add(iptcBlock0);
      linkedList0.add(iptcBlock0);
      PhotoshopApp13Data photoshopApp13Data0 = new PhotoshopApp13Data((List<IptcRecord>) null, linkedList0);
      linkedList0.add(iptcBlock0);
      byte[] byteArray1 = iptcParser0.writePhotoshopApp13Segment(photoshopApp13Data0);
      IptcBlock iptcBlock1 = new IptcBlock(1057, byteArray1, byteArray1);
      linkedList0.add(iptcBlock1);
      byte[] byteArray2 = iptcParser0.writePhotoshopApp13Segment(photoshopApp13Data0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        iptcParser0.parsePhotoshopSegment(byteArray2, (Map<String, Object>) hashMap0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IptcParser iptcParser0 = new IptcParser();
      // Undeclared exception!
      try { 
        iptcParser0.parseIPTCBlock((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.jpeg.iptc.IptcParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IptcParser iptcParser0 = new IptcParser();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)28;
      // Undeclared exception!
      try { 
        iptcParser0.parseIPTCBlock(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.imaging.common.ByteConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      IptcParser iptcParser0 = new IptcParser();
      try { 
        iptcParser0.parseAllBlocks(byteArray0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Photoshop App13 Segment
         //
         verifyException("org.apache.commons.imaging.formats.jpeg.iptc.IptcParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IptcParser iptcParser0 = new IptcParser();
      // Undeclared exception!
      try { 
        iptcParser0.parseAllBlocks((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IptcParser iptcParser0 = new IptcParser();
      LinkedList<IptcBlock> linkedList0 = new LinkedList<IptcBlock>();
      byte[] byteArray0 = new byte[12];
      IptcBlock iptcBlock0 = new IptcBlock(1090, byteArray0, byteArray0);
      linkedList0.add(iptcBlock0);
      linkedList0.add(iptcBlock0);
      linkedList0.addFirst(iptcBlock0);
      PhotoshopApp13Data photoshopApp13Data0 = new PhotoshopApp13Data((List<IptcRecord>) null, linkedList0);
      linkedList0.add(iptcBlock0);
      byte[] byteArray1 = iptcParser0.writePhotoshopApp13Segment(photoshopApp13Data0);
      IptcBlock iptcBlock1 = new IptcBlock(1090, byteArray1, byteArray0);
      linkedList0.add(iptcBlock1);
      byte[] byteArray2 = iptcParser0.writePhotoshopApp13Segment(photoshopApp13Data0);
      // Undeclared exception!
      try { 
        iptcParser0.parseAllBlocks(byteArray2, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IptcParser iptcParser0 = new IptcParser();
      byte[] byteArray0 = new byte[3];
      try { 
        iptcParser0.parseAllBlocks(byteArray0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // App13 Segment missing identification string count: -1 read: 3 length: 14
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IptcParser iptcParser0 = new IptcParser();
      IptcType iptcType0 = IptcTypes.getUnknown(2009);
      LinkedList<IptcRecord> linkedList0 = new LinkedList<IptcRecord>();
      IptcRecord iptcRecord0 = new IptcRecord(iptcType0, "GJr4(Rrwgkk~Fi*g>");
      linkedList0.add(iptcRecord0);
      try { 
        iptcParser0.writeIPTCBlock(linkedList0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid record type: 2009
         //
         verifyException("org.apache.commons.imaging.formats.jpeg.iptc.IptcParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IptcParser iptcParser0 = new IptcParser();
      IptcType iptcType0 = IptcTypes.getUnknown((-1));
      IptcRecord iptcRecord0 = new IptcRecord(iptcType0, "T0}");
      LinkedList<IptcRecord> linkedList0 = new LinkedList<IptcRecord>();
      linkedList0.add(iptcRecord0);
      try { 
        iptcParser0.writeIPTCBlock(linkedList0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid record type: -1
         //
         verifyException("org.apache.commons.imaging.formats.jpeg.iptc.IptcParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IptcTypes iptcTypes0 = IptcTypes.RECORD_VERSION;
      IptcRecord iptcRecord0 = new IptcRecord(iptcTypes0, "dJY-e");
      LinkedList<IptcRecord> linkedList0 = new LinkedList<IptcRecord>();
      linkedList0.add(iptcRecord0);
      IptcParser iptcParser0 = new IptcParser();
      byte[] byteArray0 = iptcParser0.writeIPTCBlock(linkedList0);
      assertArrayEquals(new byte[] {(byte)28, (byte)2, (byte)0, (byte)0, (byte)2, (byte)0, (byte)2}, byteArray0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IptcParser iptcParser0 = new IptcParser();
      LinkedList<IptcBlock> linkedList0 = new LinkedList<IptcBlock>();
      byte[] byteArray0 = new byte[12];
      IptcBlock iptcBlock0 = new IptcBlock(1093, byteArray0, byteArray0);
      linkedList0.add(iptcBlock0);
      linkedList0.addFirst(iptcBlock0);
      PhotoshopApp13Data photoshopApp13Data0 = new PhotoshopApp13Data((List<IptcRecord>) null, linkedList0);
      byte[] byteArray1 = iptcParser0.writePhotoshopApp13Segment(photoshopApp13Data0);
      IptcBlock iptcBlock1 = new IptcBlock(1093, byteArray1, byteArray1);
      linkedList0.add(iptcBlock1);
      byte[] byteArray2 = iptcParser0.writePhotoshopApp13Segment(photoshopApp13Data0);
      IptcBlock iptcBlock2 = new IptcBlock(1093, byteArray2, byteArray0);
      linkedList0.add(iptcBlock2);
      try { 
        iptcParser0.writePhotoshopApp13Segment(photoshopApp13Data0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IPTC block name is too long: 270
         //
         verifyException("org.apache.commons.imaging.formats.jpeg.iptc.IptcParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IptcParser iptcParser0 = new IptcParser();
      LinkedList<IptcBlock> linkedList0 = new LinkedList<IptcBlock>();
      PhotoshopApp13Data photoshopApp13Data0 = new PhotoshopApp13Data((List<IptcRecord>) null, linkedList0);
      byte[] byteArray0 = iptcParser0.writePhotoshopApp13Segment(photoshopApp13Data0);
      IptcBlock iptcBlock0 = new IptcBlock(65566, byteArray0, byteArray0);
      linkedList0.add(iptcBlock0);
      try { 
        iptcParser0.writePhotoshopApp13Segment(photoshopApp13Data0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid IPTC block type.
         //
         verifyException("org.apache.commons.imaging.formats.jpeg.iptc.IptcParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IptcParser iptcParser0 = new IptcParser();
      IptcBlock iptcBlock0 = new IptcBlock((-256), (byte[]) null, (byte[]) null);
      LinkedList<IptcBlock> linkedList0 = new LinkedList<IptcBlock>();
      linkedList0.add(iptcBlock0);
      PhotoshopApp13Data photoshopApp13Data0 = new PhotoshopApp13Data((List<IptcRecord>) null, linkedList0);
      try { 
        iptcParser0.writePhotoshopApp13Segment(photoshopApp13Data0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid IPTC block type.
         //
         verifyException("org.apache.commons.imaging.formats.jpeg.iptc.IptcParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IptcParser iptcParser0 = new IptcParser();
      LinkedList<IptcBlock> linkedList0 = new LinkedList<IptcBlock>();
      byte[] byteArray0 = new byte[20];
      IptcBlock iptcBlock0 = new IptcBlock(1057, byteArray0, byteArray0);
      linkedList0.add(iptcBlock0);
      PhotoshopApp13Data photoshopApp13Data0 = new PhotoshopApp13Data((List<IptcRecord>) null, linkedList0);
      byte[] byteArray1 = iptcParser0.writePhotoshopApp13Segment(photoshopApp13Data0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      PhotoshopApp13Data photoshopApp13Data1 = iptcParser0.parsePhotoshopSegment(byteArray1, (Map<String, Object>) hashMap0);
      assertFalse(photoshopApp13Data1.equals((Object)photoshopApp13Data0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IptcParser iptcParser0 = new IptcParser();
      LinkedList<IptcRecord> linkedList0 = new LinkedList<IptcRecord>();
      byte[] byteArray0 = iptcParser0.writeIPTCBlock(linkedList0);
      LinkedList<IptcBlock> linkedList1 = new LinkedList<IptcBlock>();
      IptcBlock iptcBlock0 = new IptcBlock(202, byteArray0, byteArray0);
      linkedList1.add(iptcBlock0);
      assertArrayEquals(new byte[] {(byte)28, (byte)2, (byte)0, (byte)0, (byte)2, (byte)0, (byte)2}, byteArray0);
      
      PhotoshopApp13Data photoshopApp13Data0 = new PhotoshopApp13Data(linkedList0, linkedList1);
      byte[] byteArray1 = iptcParser0.writePhotoshopApp13Segment(photoshopApp13Data0);
      assertEquals(40, byteArray1.length);
      
      List<IptcBlock> list0 = iptcParser0.parseAllBlocks(byteArray1, true);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IptcParser iptcParser0 = new IptcParser();
      LinkedList<IptcBlock> linkedList0 = new LinkedList<IptcBlock>();
      PhotoshopApp13Data photoshopApp13Data0 = new PhotoshopApp13Data((List<IptcRecord>) null, linkedList0);
      byte[] byteArray0 = iptcParser0.writePhotoshopApp13Segment(photoshopApp13Data0);
      IptcBlock iptcBlock0 = new IptcBlock(1086, byteArray0, byteArray0);
      linkedList0.add(iptcBlock0);
      linkedList0.add(iptcBlock0);
      byte[] byteArray1 = iptcParser0.writePhotoshopApp13Segment(photoshopApp13Data0);
      try { 
        iptcParser0.parsePhotoshopSegment(byteArray1, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid Image Resource Block Signature
         //
         verifyException("org.apache.commons.imaging.formats.jpeg.iptc.IptcParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IptcParser iptcParser0 = new IptcParser();
      IptcTypes iptcTypes0 = IptcTypes.EXPIRATION_DATE;
      IptcRecord iptcRecord0 = new IptcRecord(iptcTypes0, "&NNJVhB0");
      LinkedList<IptcRecord> linkedList0 = new LinkedList<IptcRecord>();
      linkedList0.add(iptcRecord0);
      byte[] byteArray0 = iptcParser0.writeIPTCBlock(linkedList0);
      List<IptcRecord> list0 = iptcParser0.parseIPTCBlock(byteArray0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IptcParser iptcParser0 = new IptcParser();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)28;
      List<IptcRecord> list0 = iptcParser0.parseIPTCBlock(byteArray0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IptcParser iptcParser0 = new IptcParser();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)28;
      byteArray0[3] = (byte) (-73);
      List<IptcRecord> list0 = iptcParser0.parseIPTCBlock(byteArray0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IptcParser iptcParser0 = new IptcParser();
      LinkedList<IptcBlock> linkedList0 = new LinkedList<IptcBlock>();
      PhotoshopApp13Data photoshopApp13Data0 = new PhotoshopApp13Data((List<IptcRecord>) null, linkedList0);
      byte[] byteArray0 = iptcParser0.writePhotoshopApp13Segment(photoshopApp13Data0);
      List<IptcRecord> list0 = iptcParser0.parseIPTCBlock(byteArray0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IptcParser iptcParser0 = new IptcParser();
      LinkedList<IptcRecord> linkedList0 = new LinkedList<IptcRecord>();
      byte[] byteArray0 = new byte[0];
      IptcBlock iptcBlock0 = new IptcBlock(0, byteArray0, byteArray0);
      LinkedList<IptcBlock> linkedList1 = new LinkedList<IptcBlock>();
      linkedList1.add(iptcBlock0);
      PhotoshopApp13Data photoshopApp13Data0 = new PhotoshopApp13Data(linkedList0, linkedList1);
      byte[] byteArray1 = iptcParser0.writePhotoshopApp13Segment(photoshopApp13Data0);
      PhotoshopApp13Data photoshopApp13Data1 = iptcParser0.parsePhotoshopSegment(byteArray1, true);
      assertNotSame(photoshopApp13Data0, photoshopApp13Data1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IptcParser iptcParser0 = new IptcParser();
      byte[] byteArray0 = new byte[20];
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        iptcParser0.parsePhotoshopSegment(byteArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Photoshop App13 Segment
         //
         verifyException("org.apache.commons.imaging.formats.jpeg.iptc.IptcParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IptcParser iptcParser0 = new IptcParser();
      byte[] byteArray0 = new byte[4];
      try { 
        iptcParser0.parsePhotoshopSegment(byteArray0, (Map<String, Object>) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // App13 Segment missing identification string count: -1 read: 4 length: 14
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IptcParser iptcParser0 = new IptcParser();
      LinkedList<IptcRecord> linkedList0 = new LinkedList<IptcRecord>();
      LinkedList<IptcBlock> linkedList1 = new LinkedList<IptcBlock>();
      byte[] byteArray0 = new byte[7];
      IptcBlock iptcBlock0 = new IptcBlock(2, byteArray0, byteArray0);
      linkedList1.add(iptcBlock0);
      PhotoshopApp13Data photoshopApp13Data0 = new PhotoshopApp13Data(linkedList0, linkedList1);
      byte[] byteArray1 = iptcParser0.writePhotoshopApp13Segment(photoshopApp13Data0);
      boolean boolean0 = iptcParser0.isPhotoshopJpegSegment(byteArray1);
      assertTrue(boolean0);
      assertEquals(40, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IptcParser iptcParser0 = new IptcParser();
      LinkedList<IptcRecord> linkedList0 = new LinkedList<IptcRecord>();
      byte[] byteArray0 = iptcParser0.writeIPTCBlock(linkedList0);
      boolean boolean0 = iptcParser0.isPhotoshopJpegSegment(byteArray0);
      assertArrayEquals(new byte[] {(byte)28, (byte)2, (byte)0, (byte)0, (byte)2, (byte)0, (byte)2}, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IptcParser iptcParser0 = new IptcParser();
      LinkedList<IptcBlock> linkedList0 = new LinkedList<IptcBlock>();
      PhotoshopApp13Data photoshopApp13Data0 = new PhotoshopApp13Data((List<IptcRecord>) null, linkedList0);
      byte[] byteArray0 = iptcParser0.writePhotoshopApp13Segment(photoshopApp13Data0);
      boolean boolean0 = iptcParser0.isPhotoshopJpegSegment(byteArray0);
      assertFalse(boolean0);
  }
}
