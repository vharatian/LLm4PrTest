/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 18:24:06 GMT 2025
 */

package org.apache.commons.imaging;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.PrintWriter;
import java.nio.charset.Charset;
import java.time.ZoneId;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.imaging.ImageFormat;
import org.apache.commons.imaging.ImageFormats;
import org.apache.commons.imaging.ImageInfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ImageInfo_ESTest extends ImageInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      String string0 = imageInfo_CompressionAlgorithm0.toString();
      assertEquals("LZW", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCbCr;
      ImageInfo imageInfo0 = new ImageInfo("T]e^", 3928, (List<String>) null, (ImageFormat) null, "T]e^", 407, "org.apache.commons.io.filefilter.OrFileFilter", 0, 3, 0.0F, 7, 1, 3928, true, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.dump();
      assertEquals("org.apache.commons.io.filefilter.OrFileFilter", imageInfo0.getMimeType());
      assertEquals(0, imageInfo0.getNumberOfImages());
      assertEquals(407, imageInfo0.getHeight());
      assertFalse(imageInfo0.isTransparent());
      assertEquals("T]e^", imageInfo0.getFormatDetails());
      assertEquals(3, imageInfo0.getPhysicalHeightDpi());
      assertEquals("T]e^", imageInfo0.getFormatName());
      assertTrue(imageInfo0.isProgressive());
      assertFalse(imageInfo0.usesPalette());
      assertEquals(3928, imageInfo0.getWidth());
      assertEquals(1.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(3928, imageInfo0.getBitsPerPixel());
      assertEquals(7, imageInfo0.getPhysicalWidthDpi());
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PACKBITS;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-1767), list0, (ImageFormat) null, (String) null, (-1767), "0XA(4G3", 2420, 1, 732.29F, 0, 1, 1, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.usesPalette();
      assertEquals(1, imageInfo0.getPhysicalHeightDpi());
      assertEquals(2420, imageInfo0.getNumberOfImages());
      assertEquals(732.29F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertFalse(imageInfo0.isProgressive());
      assertEquals(1, imageInfo0.getWidth());
      assertEquals((-1767), imageInfo0.getBitsPerPixel());
      assertFalse(boolean0);
      assertEquals((-1767), imageInfo0.getHeight());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(1.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("<(PZ5kTM~CTr*<", 19, list0, imageFormats0, "8O<0P.X", (-2386), "Grayscale", 19, 1, 19, 1285, 1285, (-2386), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isTransparent();
      assertEquals(1285, imageInfo0.getPhysicalWidthDpi());
      assertEquals("Grayscale", imageInfo0.getMimeType());
      assertTrue(boolean0);
      assertEquals(19, imageInfo0.getBitsPerPixel());
      assertEquals(19.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals((-2386), imageInfo0.getHeight());
      assertEquals(1, imageInfo0.getPhysicalHeightDpi());
      assertEquals(19, imageInfo0.getNumberOfImages());
      assertTrue(imageInfo0.usesPalette());
      assertTrue(imageInfo0.isProgressive());
      assertEquals("8O<0P.X", imageInfo0.getFormatName());
      assertEquals((-2386), imageInfo0.getWidth());
      assertEquals(1285.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals("<(PZ5kTM~CTr*<", imageInfo0.getFormatDetails());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.UNKNOWN;
      ImageInfo imageInfo0 = new ImageInfo("Height: ", 1, linkedList0, imageFormats0, "`g*WcARSq)eIn-c", 1, "Height: ", (-889), 22, 1, (-889), 22, (-889), true, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isProgressive();
      assertEquals(1.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(22, imageInfo0.getPhysicalHeightDpi());
      assertFalse(imageInfo0.usesPalette());
      assertEquals((-889), imageInfo0.getNumberOfImages());
      assertEquals(1, imageInfo0.getHeight());
      assertEquals(22.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(1, imageInfo0.getBitsPerPixel());
      assertEquals("Height: ", imageInfo0.getMimeType());
      assertFalse(imageInfo0.isTransparent());
      assertEquals("Height: ", imageInfo0.getFormatDetails());
      assertTrue(boolean0);
      assertEquals((-889), imageInfo0.getPhysicalWidthDpi());
      assertEquals((-889), imageInfo0.getWidth());
      assertEquals("`g*WcARSq)eIn-c", imageInfo0.getFormatName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("", (-1767), linkedList0, imageFormats0, " {cpsw4GX'a@-6W!\"W", 0, "", 0, 11, (-477.17F), 0, 0, 11, false, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      assertFalse(imageInfo0.isProgressive());
      assertEquals(11, int0);
      assertEquals(0.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(11, imageInfo0.getPhysicalHeightDpi());
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
      assertEquals("", imageInfo0.getFormatDetails());
      assertEquals((-477.17F), imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals((-1767), imageInfo0.getBitsPerPixel());
      assertTrue(imageInfo0.usesPalette());
      assertEquals(" {cpsw4GX'a@-6W!\"W", imageInfo0.getFormatName());
      assertEquals("", imageInfo0.getMimeType());
      assertEquals(0, imageInfo0.getHeight());
      assertFalse(imageInfo0.isTransparent());
      assertEquals(0, imageInfo0.getNumberOfImages());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.DEFLATE;
      ImageInfo imageInfo0 = new ImageInfo("Image Data: Error", 0, linkedList0, (ImageFormat) null, "78k4;fv@jqHm\"N", 12, "Image Data: Error", 12, 173, 1587.5408F, 0, 5406.332F, (-471), true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      assertEquals(173, imageInfo0.getPhysicalHeightDpi());
      assertTrue(imageInfo0.isProgressive());
      assertEquals(12, imageInfo0.getNumberOfImages());
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
      assertEquals("Image Data: Error", imageInfo0.getMimeType());
      assertTrue(imageInfo0.isTransparent());
      assertEquals((-471), int0);
      assertEquals("78k4;fv@jqHm\"N", imageInfo0.getFormatName());
      assertEquals(5406.332F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals("Image Data: Error", imageInfo0.getFormatDetails());
      assertEquals(12, imageInfo0.getHeight());
      assertEquals(1587.5408F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertFalse(imageInfo0.usesPalette());
      assertEquals(0, imageInfo0.getBitsPerPixel());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("JPEG_TIFF_OBSOLETE", 860, (List<String>) null, (ImageFormat) null, "JPEG_TIFF_OBSOLETE", (-105), "org.apache.commons.io.filefilter.NotFileFilter", 0, 860, (-105), 0, 0, 6, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      assertEquals(6, imageInfo0.getWidth());
      assertEquals("org.apache.commons.io.filefilter.NotFileFilter", imageInfo0.getMimeType());
      assertEquals(0, imageInfo0.getNumberOfImages());
      assertEquals("JPEG_TIFF_OBSOLETE", imageInfo0.getFormatName());
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
      assertEquals("JPEG_TIFF_OBSOLETE", imageInfo0.getFormatDetails());
      assertEquals((-105.0F), imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(860, imageInfo0.getPhysicalHeightDpi());
      assertEquals((-105), imageInfo0.getHeight());
      assertTrue(imageInfo0.usesPalette());
      assertEquals(860, imageInfo0.getBitsPerPixel());
      assertTrue(imageInfo0.isTransparent());
      assertTrue(imageInfo0.isProgressive());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("", 0, list0, imageFormats0, "|Q71n", 1706, "", 3, 61, 0, 1083, 61, 3, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      assertFalse(imageInfo0.isProgressive());
      assertEquals("", imageInfo0.getFormatDetails());
      assertFalse(imageInfo0.isTransparent());
      assertEquals(0, imageInfo0.getBitsPerPixel());
      assertFalse(imageInfo0.usesPalette());
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(61, imageInfo0.getPhysicalHeightDpi());
      assertEquals(1706, imageInfo0.getHeight());
      assertEquals(3, imageInfo0.getWidth());
      assertEquals(61.0F, float0, 0.01F);
      assertEquals(3, imageInfo0.getNumberOfImages());
      assertEquals(1083, imageInfo0.getPhysicalWidthDpi());
      assertEquals("|Q71n", imageInfo0.getFormatName());
      assertEquals("", imageInfo0.getMimeType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("MimeType: ", 0, list0, imageFormats0, "Ux^fM<%T_", 19, "Ux^fM<%T_", 19, 19, 0, 0, 0, (-3193), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      assertEquals((-3193), imageInfo0.getWidth());
      assertEquals("Ux^fM<%T_", imageInfo0.getFormatName());
      assertTrue(imageInfo0.usesPalette());
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(19, imageInfo0.getPhysicalHeightDpi());
      assertEquals("Ux^fM<%T_", imageInfo0.getMimeType());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(19, imageInfo0.getNumberOfImages());
      assertEquals("MimeType: ", imageInfo0.getFormatDetails());
      assertEquals(0, imageInfo0.getBitsPerPixel());
      assertTrue(imageInfo0.isProgressive());
      assertEquals(0, int0);
      assertEquals(0.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(19, imageInfo0.getHeight());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.TIFF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("OTHER", 3, linkedList0, imageFormats0, "OTHER", 3, "OTHER", 3, 431, 3, 431, 431, 9, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      assertEquals(3, imageInfo0.getBitsPerPixel());
      assertFalse(imageInfo0.isProgressive());
      assertEquals(431, imageInfo0.getPhysicalHeightDpi());
      assertEquals(9, imageInfo0.getWidth());
      assertEquals(431.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(3, imageInfo0.getHeight());
      assertFalse(imageInfo0.isTransparent());
      assertFalse(imageInfo0.usesPalette());
      assertEquals(3, imageInfo0.getNumberOfImages());
      assertEquals(431, int0);
      assertEquals(3.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ImageFormats imageFormats0 = ImageFormats.TIFF;
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PACKBITS;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-1958), list0, imageFormats0, (String) null, 228, "{[]P<=kL", (-1958), (-1958), 0.0F, 12, 2399.8835F, 1149, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertEquals((-1958), imageInfo0.getNumberOfImages());
      assertEquals(228, imageInfo0.getHeight());
      assertEquals((-1958), imageInfo0.getBitsPerPixel());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(1149, imageInfo0.getWidth());
      assertFalse(imageInfo0.isTransparent());
      assertEquals((-1958), imageInfo0.getPhysicalHeightDpi());
      assertEquals(12, imageInfo0.getPhysicalWidthDpi());
      assertFalse(imageInfo0.usesPalette());
      assertEquals(2399.8835F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertFalse(imageInfo0.isProgressive());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.DEFLATE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 2003, linkedList0, imageFormats0, "CCITT_GROUP_4", 2003, "", 0, 0, 2003, 8, 0.0F, 2003, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertEquals(8, imageInfo0.getPhysicalWidthDpi());
      assertEquals("", imageInfo0.getMimeType());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(0, imageInfo0.getNumberOfImages());
      assertEquals(2003.0F, float0, 0.01F);
      assertEquals(2003, imageInfo0.getWidth());
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
      assertFalse(imageInfo0.usesPalette());
      assertTrue(imageInfo0.isProgressive());
      assertEquals(0.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(2003, imageInfo0.getHeight());
      assertEquals("CCITT_GROUP_4", imageInfo0.getFormatName());
      assertEquals(2003, imageInfo0.getBitsPerPixel());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo imageInfo0 = new ImageInfo("S7n7kPsA]", (-1622), linkedList0, (ImageFormat) null, "Q9H&,Qu<", (-1622), "n", (-4961), 0, 0.0F, 10, 0.0F, (-2380), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      assertTrue(imageInfo0.usesPalette());
      assertEquals((-1622), imageInfo0.getHeight());
      assertEquals((-2380), imageInfo0.getWidth());
      assertEquals("Q9H&,Qu<", imageInfo0.getFormatName());
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(10, imageInfo0.getPhysicalWidthDpi());
      assertEquals(0, int0);
      assertEquals("n", imageInfo0.getMimeType());
      assertTrue(imageInfo0.isProgressive());
      assertEquals(0.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals((-4961), imageInfo0.getNumberOfImages());
      assertEquals((-1622), imageInfo0.getBitsPerPixel());
      assertTrue(imageInfo0.isTransparent());
      assertEquals("S7n7kPsA]", imageInfo0.getFormatDetails());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCbCr;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("8vt%]]", 2, list0, imageFormats0, "3a*?bnNX;", 2, "", 2, (-20), (-3392.0F), 0, (-1.0F), 0, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      assertFalse(imageInfo0.usesPalette());
      assertEquals(2, imageInfo0.getHeight());
      assertTrue(imageInfo0.isTransparent());
      assertFalse(imageInfo0.isProgressive());
      assertEquals(2, imageInfo0.getBitsPerPixel());
      assertEquals("3a*?bnNX;", imageInfo0.getFormatName());
      assertEquals(2, imageInfo0.getNumberOfImages());
      assertEquals(0, imageInfo0.getWidth());
      assertEquals("", imageInfo0.getMimeType());
      assertEquals((-3392.0F), imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals((-20), int0);
      assertEquals((-1.0F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals("8vt%]]", imageInfo0.getFormatDetails());
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.PAM;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.DEFLATE;
      ImageInfo imageInfo0 = new ImageInfo("Is Progressive: ", (-1646), list0, imageFormats0, (String) null, 2, "Format Details: \nBits Per Pixel: -1646\nComments: 0\nFormat: PAM\nFormat Name: null\nCompression Algorithm: DEFLATE (ZIP)\nHeight: -501\nMimeType: \nNumber Of Images: -1646\nPhysical Height Dpi: -1646\nPhysical Height Inch: -1646.0\nPhysical Width Dpi: -1646\nPhysical Width Inch: -501.0\nWidth: -2819\nIs Progressive: false\nIs Transparent: false\nColor Type: Black and White\nUses Palette: false\n", 2, 2, (-2819), 1, (-2819), (-2819), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      assertTrue(imageInfo0.isProgressive());
      assertEquals((-2819.0F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals("Is Progressive: ", imageInfo0.getFormatDetails());
      assertEquals(2, imageInfo0.getPhysicalHeightDpi());
      assertEquals((-2819), imageInfo0.getWidth());
      assertEquals("Format Details: \nBits Per Pixel: -1646\nComments: 0\nFormat: PAM\nFormat Name: null\nCompression Algorithm: DEFLATE (ZIP)\nHeight: -501\nMimeType: \nNumber Of Images: -1646\nPhysical Height Dpi: -1646\nPhysical Height Inch: -1646.0\nPhysical Width Dpi: -1646\nPhysical Width Inch: -501.0\nWidth: -2819\nIs Progressive: false\nIs Transparent: false\nColor Type: Black and White\nUses Palette: false\n", imageInfo0.getMimeType());
      assertEquals(2, int0);
      assertTrue(imageInfo0.usesPalette());
      assertEquals(1, imageInfo0.getPhysicalWidthDpi());
      assertEquals((-1646), imageInfo0.getBitsPerPixel());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(2, imageInfo0.getHeight());
      assertEquals((-2819.0F), imageInfo0.getPhysicalHeightInch(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.DEFLATE;
      ImageInfo imageInfo0 = new ImageInfo("", 0, linkedList0, (ImageFormat) null, "k1:6s9E", (-1622), "", (-1622), 1524, 0, 173, 0, 173, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      assertTrue(imageInfo0.usesPalette());
      assertEquals(173, imageInfo0.getPhysicalWidthDpi());
      assertEquals(0, imageInfo0.getBitsPerPixel());
      assertEquals(1524, imageInfo0.getPhysicalHeightDpi());
      assertEquals("k1:6s9E", imageInfo0.getFormatName());
      assertTrue(imageInfo0.isProgressive());
      assertEquals(173, imageInfo0.getWidth());
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals((-1622), int0);
      assertTrue(imageInfo0.isTransparent());
      assertEquals("", imageInfo0.getFormatDetails());
      assertEquals(0.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals("", imageInfo0.getMimeType());
      assertEquals((-1622), imageInfo0.getHeight());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("Format Details: c2Mm{Yr\nBits Per Pixel: 2\nComments: 0\nFormat: PGM\nFormat Name: c2Mm{Yr\nCompression Algorithm: Adaptive RLE\nHeight: 1\nMimeType: Tuk &[):D\nNumber Of Images: -1196\nPhysical Height Dpi: 1\nPhysical Height Inch: -1.0\nPhysical Width Dpi: 16\nPhysical Width Inch: 138.16\nWidth: 1\nIs Progressive: false\nIs Transparent: false\nColor Type: RGB\nUses Palette: false\n", (-1), linkedList0, imageFormats0, "c2Mm{Yr", 16, (String) null, 1, 1, 138.16F, 0, (-1103.3093F), 1, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      assertFalse(imageInfo0.isTransparent());
      assertEquals(1, imageInfo0.getWidth());
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
      assertEquals(138.16F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(1, imageInfo0.getNumberOfImages());
      assertEquals("Format Details: c2Mm{Yr\nBits Per Pixel: 2\nComments: 0\nFormat: PGM\nFormat Name: c2Mm{Yr\nCompression Algorithm: Adaptive RLE\nHeight: 1\nMimeType: Tuk &[):D\nNumber Of Images: -1196\nPhysical Height Dpi: 1\nPhysical Height Inch: -1.0\nPhysical Width Dpi: 16\nPhysical Width Inch: 138.16\nWidth: 1\nIs Progressive: false\nIs Transparent: false\nColor Type: RGB\nUses Palette: false\n", imageInfo0.getFormatDetails());
      assertEquals((-1), imageInfo0.getBitsPerPixel());
      assertTrue(imageInfo0.isProgressive());
      assertEquals(1, imageInfo0.getPhysicalHeightDpi());
      assertTrue(imageInfo0.usesPalette());
      assertEquals((-1103.3093F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertNull(string0);
      assertEquals("c2Mm{Yr", imageInfo0.getFormatName());
      assertEquals(16, imageInfo0.getHeight());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCbCr;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("8vt%]]", 2, list0, imageFormats0, "3a*?bnNX;", 2, "", 2, (-20), (-3392.0F), 0, (-1.0F), 0, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      assertEquals(2, imageInfo0.getNumberOfImages());
      assertEquals((-20), imageInfo0.getPhysicalHeightDpi());
      assertEquals("8vt%]]", imageInfo0.getFormatDetails());
      assertEquals((-1.0F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(0, imageInfo0.getWidth());
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
      assertEquals((-3392.0F), imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertFalse(imageInfo0.usesPalette());
      assertEquals(2, imageInfo0.getBitsPerPixel());
      assertTrue(imageInfo0.isTransparent());
      assertFalse(imageInfo0.isProgressive());
      assertEquals("", string0);
      assertEquals(2, imageInfo0.getHeight());
      assertEquals("3a*?bnNX;", imageInfo0.getFormatName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("JPEG_TIFF_OBSOLETE", 0, linkedList0, imageFormats0, "JPEG_TIFF_OBSOLETE", 0, "JPEG_TIFF_OBSOLETE", 0, 0, 0.0F, 0, 1.0F, 6062, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      assertTrue(imageInfo0.isTransparent());
      assertEquals(1.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertTrue(imageInfo0.usesPalette());
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(6062, imageInfo0.getWidth());
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
      assertEquals(0, imageInfo0.getNumberOfImages());
      assertEquals(0, int0);
      assertTrue(imageInfo0.isProgressive());
      assertEquals(0, imageInfo0.getBitsPerPixel());
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCC;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("", 1261, linkedList0, (ImageFormat) null, "", 1261, "Comments: ", 825, 825, 1261, (-2282), 1261, (-2282), true, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      assertEquals(825, imageInfo0.getPhysicalHeightDpi());
      assertEquals(1261, int0);
      assertEquals(1261.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertFalse(imageInfo0.usesPalette());
      assertTrue(imageInfo0.isProgressive());
      assertEquals("", imageInfo0.getFormatDetails());
      assertEquals("", imageInfo0.getFormatName());
      assertEquals(1261, imageInfo0.getBitsPerPixel());
      assertEquals(825, imageInfo0.getNumberOfImages());
      assertEquals("Comments: ", imageInfo0.getMimeType());
      assertEquals(1261.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals((-2282), imageInfo0.getPhysicalWidthDpi());
      assertEquals((-2282), imageInfo0.getWidth());
      assertFalse(imageInfo0.isTransparent());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.ICNS;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("44727", 2, list0, imageFormats0, (String) null, (-1136), "44727", (-1136), (-103), (-103), (-103), (-1453.0F), 2, false, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      assertEquals((-1453.0F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertFalse(imageInfo0.isProgressive());
      assertEquals((-103), imageInfo0.getPhysicalHeightDpi());
      assertEquals(2, imageInfo0.getBitsPerPixel());
      assertFalse(imageInfo0.isTransparent());
      assertNull(string0);
      assertEquals((-1136), imageInfo0.getNumberOfImages());
      assertEquals(2, imageInfo0.getWidth());
      assertEquals((-1136), imageInfo0.getHeight());
      assertEquals((-103.0F), imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertTrue(imageInfo0.usesPalette());
      assertEquals((-103), imageInfo0.getPhysicalWidthDpi());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("<(PZ5kTM~CTr*<", 19, list0, imageFormats0, "8O<0P.X", (-2386), "Grayscale", 19, 1, 19, 1285, 1285, (-2386), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      assertTrue(imageInfo0.isTransparent());
      assertEquals(19.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals((-2386), imageInfo0.getHeight());
      assertEquals(1, imageInfo0.getPhysicalHeightDpi());
      assertEquals("<(PZ5kTM~CTr*<", imageInfo0.getFormatDetails());
      assertEquals(1285, imageInfo0.getPhysicalWidthDpi());
      assertEquals(19, imageInfo0.getBitsPerPixel());
      assertEquals("8O<0P.X", string0);
      assertEquals(1285.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals((-2386), imageInfo0.getWidth());
      assertEquals(19, imageInfo0.getNumberOfImages());
      assertTrue(imageInfo0.usesPalette());
      assertTrue(imageInfo0.isProgressive());
      assertEquals("Grayscale", imageInfo0.getMimeType());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PACKBITS;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-1767), list0, (ImageFormat) null, (String) null, (-1767), "0XA(4G3", 2420, 1, 732.29F, 0, 1, 1, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      assertEquals((-1767), imageInfo0.getBitsPerPixel());
      assertFalse(imageInfo0.isProgressive());
      assertEquals(732.29F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertTrue(imageInfo0.isTransparent());
      assertEquals(1.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
      assertEquals(1, imageInfo0.getWidth());
      assertEquals((-1767), imageInfo0.getHeight());
      assertFalse(imageInfo0.usesPalette());
      assertEquals(1, imageInfo0.getPhysicalHeightDpi());
      assertEquals(2420, imageInfo0.getNumberOfImages());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCbCr;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("8vt%]]", 2, list0, imageFormats0, "3a*?bnNX;", 2, "", 2, (-20), (-3392.0F), 2, (-1.0F), 2, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      assertEquals(2, imageInfo0.getWidth());
      assertEquals("3a*?bnNX;", imageInfo0.getFormatName());
      assertTrue(imageInfo0.isTransparent());
      assertEquals((-3392.0F), imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(2, imageInfo0.getNumberOfImages());
      assertFalse(imageInfo0.usesPalette());
      assertFalse(imageInfo0.isProgressive());
      assertEquals(2, imageInfo0.getHeight());
      assertEquals(2, imageInfo0.getBitsPerPixel());
      assertEquals("8vt%]]", string0);
      assertEquals("", imageInfo0.getMimeType());
      assertEquals(2, imageInfo0.getPhysicalWidthDpi());
      assertEquals((-1.0F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals((-20), imageInfo0.getPhysicalHeightDpi());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.DEFLATE;
      ImageInfo imageInfo0 = new ImageInfo("", 0, linkedList0, (ImageFormat) null, "k1:6s9E", (-1622), "", (-1622), 1524, 0, 173, 0, 173, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getFormat();
      assertEquals((-1622), imageInfo0.getNumberOfImages());
      assertEquals(1524, imageInfo0.getPhysicalHeightDpi());
      assertEquals("", imageInfo0.getMimeType());
      assertEquals((-1622), imageInfo0.getHeight());
      assertEquals(173, imageInfo0.getWidth());
      assertTrue(imageInfo0.usesPalette());
      assertTrue(imageInfo0.isProgressive());
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals("", imageInfo0.getFormatDetails());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(0.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(0, imageInfo0.getBitsPerPixel());
      assertEquals("k1:6s9E", imageInfo0.getFormatName());
      assertEquals(173, imageInfo0.getPhysicalWidthDpi());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.addFirst("");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.DEFLATE;
      ImageInfo imageInfo0 = new ImageInfo("", 0, linkedList0, (ImageFormat) null, "k1:6s9E", (-1622), "", (-1622), 1524, 0, 173, 0, 173, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getComments();
      assertEquals("k1:6s9E", imageInfo0.getFormatName());
      assertTrue(imageInfo0.isTransparent());
      assertTrue(imageInfo0.isProgressive());
      assertTrue(imageInfo0.usesPalette());
      assertEquals("", imageInfo0.getFormatDetails());
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals((-1622), imageInfo0.getNumberOfImages());
      assertEquals(0.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals("", imageInfo0.getMimeType());
      assertEquals(1524, imageInfo0.getPhysicalHeightDpi());
      assertEquals(173, imageInfo0.getWidth());
      assertEquals((-1622), imageInfo0.getHeight());
      assertEquals(173, imageInfo0.getPhysicalWidthDpi());
      assertEquals(0, imageInfo0.getBitsPerPixel());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCbCr;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PNM;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("YCbCr", 0, linkedList0, imageFormats0, "YCbCr", 0, "YCbCr", 0, 0, 0, 0, (-1.0F), 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertEquals(0, imageInfo0.getWidth());
      assertTrue(imageInfo0.usesPalette());
      assertEquals((-1.0F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(0, imageInfo0.getNumberOfImages());
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
      assertEquals(0, imageInfo0.getHeight());
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(0, int0);
      assertTrue(imageInfo0.isProgressive());
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PACKBITS;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-1767), list0, (ImageFormat) null, (String) null, (-1767), "0XA(4G3", 2420, 1, 732.29F, 0, 1, 1, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertEquals(2420, imageInfo0.getNumberOfImages());
      assertEquals(1, imageInfo0.getPhysicalHeightDpi());
      assertFalse(imageInfo0.isProgressive());
      assertEquals((-1767), int0);
      assertEquals(732.29F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertFalse(imageInfo0.usesPalette());
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
      assertEquals((-1767), imageInfo0.getHeight());
      assertEquals(1, imageInfo0.getWidth());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(1.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCbCr;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PNM;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("YCbCr", 9, linkedList0, imageFormats0, "YCbCr", 9, "YCbCr", 9, 9, 9, 9, 9, 9, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      // Undeclared exception!
      try { 
        imageInfo0.toString((PrintWriter) null, "YCbCr");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("", 12, linkedList0, imageFormats0, "", 12, "DCX", (-1), 12, 12, 12, (-461.0F), 12, true, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      linkedList0.add("Unknown");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3415);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      imageInfo0.toString((PrintWriter) mockPrintWriter0, "Unknown");
      assertEquals("Format Details: \nBits Per Pixel: 12\nComments: 1\n\t0: 'Unknown'\nFormat: UNKNOWN\nFormat Name: \nCompression Algorithm: Adaptive RLE\nHeight: 12\nMimeType: DCX\nNumber Of Images: -1\nPhysical Height Dpi: 12\nPhysical Height Inch: 12.0\nPhysical Width Dpi: 12\nPhysical Width Inch: -461.0\nWidth: 12\nIs Progressive: true\nIs Transparent: false\nColor Type: Black and White\nUses Palette: false\n", byteArrayOutputStream0.toString());
      assertEquals(377, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCbCr;
      String string0 = imageInfo_ColorType0.toString();
      assertEquals("YCbCr", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("c2Mm{Yr", 2, linkedList0, imageFormats0, "c2Mm{Yr", 1, "Tuk &[):D", (-1196), 1, (-1.0F), 16, 138.16F, 1, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.toString();
      assertEquals("Format Details: c2Mm{Yr\nBits Per Pixel: 2\nComments: 0\nFormat: PGM\nFormat Name: c2Mm{Yr\nCompression Algorithm: Adaptive RLE\nHeight: 1\nMimeType: Tuk &[):D\nNumber Of Images: -1196\nPhysical Height Dpi: 1\nPhysical Height Inch: -1.0\nPhysical Width Dpi: 16\nPhysical Width Inch: 138.16\nWidth: 1\nIs Progressive: false\nIs Transparent: false\nColor Type: Black and White\nUses Palette: false\n", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCbCr;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PNM;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("YCbCr", 0, linkedList0, imageFormats0, "YCbCr", 0, "YCbCr", 0, 0, 0, 0, (-1.0F), 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.usesPalette();
      assertTrue(imageInfo0.isTransparent());
      assertEquals(0, imageInfo0.getHeight());
      assertEquals((-1.0F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertTrue(boolean0);
      assertEquals(0, imageInfo0.getBitsPerPixel());
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
      assertTrue(imageInfo0.isProgressive());
      assertEquals(0, imageInfo0.getNumberOfImages());
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
      assertEquals(0, imageInfo0.getWidth());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCbCr;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PNM;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("YCbCr", 9, linkedList0, imageFormats0, "YCbCr", 9, "YCbCr", 9, 9, 9, 9, 9, 9, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isProgressive();
      assertFalse(boolean0);
      assertEquals(9, imageInfo0.getWidth());
      assertFalse(imageInfo0.usesPalette());
      assertEquals(9, imageInfo0.getPhysicalWidthDpi());
      assertEquals(9, imageInfo0.getBitsPerPixel());
      assertEquals(9.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(9, imageInfo0.getPhysicalHeightDpi());
      assertEquals(9.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(9, imageInfo0.getNumberOfImages());
      assertEquals(9, imageInfo0.getHeight());
      assertFalse(imageInfo0.isTransparent());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("org/apache/commons/io/filefilter/RegexFileFilter", 0, list0, imageFormats0, "", 0, "", 0, 2454, 2454, 14, 1437.77F, 2454, true, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isTransparent();
      assertFalse(boolean0);
      assertEquals(0, imageInfo0.getNumberOfImages());
      assertEquals(0, imageInfo0.getBitsPerPixel());
      assertFalse(imageInfo0.usesPalette());
      assertEquals(2454.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(14, imageInfo0.getPhysicalWidthDpi());
      assertEquals(2454, imageInfo0.getWidth());
      assertEquals("org/apache/commons/io/filefilter/RegexFileFilter", imageInfo0.getFormatDetails());
      assertEquals("", imageInfo0.getMimeType());
      assertEquals(0, imageInfo0.getHeight());
      assertEquals(2454, imageInfo0.getPhysicalHeightDpi());
      assertEquals(1437.77F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertTrue(imageInfo0.isProgressive());
      assertEquals("", imageInfo0.getFormatName());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("E^*'J3", 982, linkedList0, imageFormats0, "str1", (-1321), "", (-1321), 5, (-1321), 12, 642.18F, (-1321), false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      assertTrue(imageInfo0.isTransparent());
      assertEquals("E^*'J3", imageInfo0.getFormatDetails());
      assertEquals((-1321), imageInfo0.getNumberOfImages());
      assertFalse(imageInfo0.isProgressive());
      assertFalse(imageInfo0.usesPalette());
      assertEquals(982, imageInfo0.getBitsPerPixel());
      assertEquals((-1321.0F), imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(12, imageInfo0.getPhysicalWidthDpi());
      assertEquals((-1321), imageInfo0.getWidth());
      assertEquals("", imageInfo0.getMimeType());
      assertEquals((-1321), int0);
      assertEquals(5, imageInfo0.getPhysicalHeightDpi());
      assertEquals(642.18F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals("str1", imageInfo0.getFormatName());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("", 12, linkedList0, imageFormats0, "", 12, "DCX", (-1), 12, 12, 12, (-461.0F), 12, true, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertEquals(12.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(12, imageInfo0.getHeight());
      assertEquals(12, imageInfo0.getWidth());
      assertTrue(imageInfo0.isProgressive());
      assertEquals("", imageInfo0.getFormatName());
      assertEquals(12, int0);
      assertEquals((-1), imageInfo0.getNumberOfImages());
      assertEquals(12, imageInfo0.getPhysicalHeightDpi());
      assertFalse(imageInfo0.isTransparent());
      assertEquals("", imageInfo0.getFormatDetails());
      assertEquals("DCX", imageInfo0.getMimeType());
      assertEquals((-461.0F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(12, imageInfo0.getPhysicalWidthDpi());
      assertFalse(imageInfo0.usesPalette());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 836, (List<String>) null, imageFormats0, (String) null, 21, "u+", 0, 15, (-367.0F), 21, 1.0F, (-937), false, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertTrue(imageInfo0.usesPalette());
      assertEquals(1.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertFalse(imageInfo0.isTransparent());
      assertEquals(0, imageInfo0.getNumberOfImages());
      assertEquals(21, imageInfo0.getHeight());
      assertEquals((-937), imageInfo0.getWidth());
      assertEquals(21, imageInfo0.getPhysicalWidthDpi());
      assertEquals(836, imageInfo0.getBitsPerPixel());
      assertEquals(15, imageInfo0.getPhysicalHeightDpi());
      assertFalse(imageInfo0.isProgressive());
      assertEquals((-367.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.PAM;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.UNKNOWN;
      ImageInfo imageInfo0 = new ImageInfo("", (-515), list0, imageFormats0, "", (-515), "", (-515), (-515), (-515), (-515), 0.0F, 1149, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getFormatDetails();
      assertEquals(0.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(1149, imageInfo0.getWidth());
      assertEquals((-515), imageInfo0.getNumberOfImages());
      assertEquals((-515), imageInfo0.getBitsPerPixel());
      assertEquals((-515), imageInfo0.getPhysicalWidthDpi());
      assertFalse(imageInfo0.isProgressive());
      assertFalse(imageInfo0.usesPalette());
      assertEquals((-515), imageInfo0.getPhysicalHeightDpi());
      assertFalse(imageInfo0.isTransparent());
      assertEquals((-515), imageInfo0.getHeight());
      assertEquals((-515.0F), imageInfo0.getPhysicalHeightInch(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCbCr;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("3a*?bnNX;", (-20), list0, imageFormats0, "BMP", 0, "*V>E<W", 572, 2, (-3392.0F), (-20), (-20), 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      assertTrue(imageInfo0.isProgressive());
      assertTrue(imageInfo0.usesPalette());
      assertEquals("3a*?bnNX;", imageInfo0.getFormatDetails());
      assertEquals(0, int0);
      assertEquals("BMP", imageInfo0.getFormatName());
      assertEquals((-20), imageInfo0.getPhysicalWidthDpi());
      assertEquals(0, imageInfo0.getHeight());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(572, imageInfo0.getNumberOfImages());
      assertEquals((-20), imageInfo0.getBitsPerPixel());
      assertEquals((-20.0F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(2, imageInfo0.getPhysicalHeightDpi());
      assertEquals("*V>E<W", imageInfo0.getMimeType());
      assertEquals((-3392.0F), imageInfo0.getPhysicalHeightInch(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCC;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", (-5421), list0, imageFormats0, "", 2058, "", 9, 9, 0.0F, 10, 9, 9, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      assertEquals(9, int0);
      assertEquals((-5421), imageInfo0.getBitsPerPixel());
      assertEquals(9, imageInfo0.getWidth());
      assertEquals(2058, imageInfo0.getHeight());
      assertEquals(10, imageInfo0.getPhysicalWidthDpi());
      assertTrue(imageInfo0.isProgressive());
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertTrue(imageInfo0.usesPalette());
      assertEquals(9, imageInfo0.getNumberOfImages());
      assertEquals(9.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertTrue(imageInfo0.isTransparent());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.PAM;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.UNKNOWN;
      ImageInfo imageInfo0 = new ImageInfo("", (-515), list0, imageFormats0, "", (-515), "", (-515), (-515), (-515), (-515), 0.0F, 1149, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getColorType();
      assertEquals((-515), imageInfo0.getHeight());
      assertFalse(imageInfo0.usesPalette());
      assertEquals((-515.0F), imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertFalse(imageInfo0.isTransparent());
      assertEquals((-515), imageInfo0.getPhysicalHeightDpi());
      assertEquals(0.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(1149, imageInfo0.getWidth());
      assertEquals((-515), imageInfo0.getPhysicalWidthDpi());
      assertEquals((-515), imageInfo0.getNumberOfImages());
      assertEquals((-515), imageInfo0.getBitsPerPixel());
      assertFalse(imageInfo0.isProgressive());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCC;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", (-5421), list0, imageFormats0, "", 2058, "", 9, 9, 0.0F, 10, 9, 9, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getCompressionAlgorithm();
      assertEquals(2058, imageInfo0.getHeight());
      assertTrue(imageInfo0.isProgressive());
      assertTrue(imageInfo0.usesPalette());
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals((-5421), imageInfo0.getBitsPerPixel());
      assertEquals(10, imageInfo0.getPhysicalWidthDpi());
      assertEquals(9, imageInfo0.getNumberOfImages());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(9.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(9, imageInfo0.getWidth());
      assertEquals(9, imageInfo0.getPhysicalHeightDpi());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCC;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", (-5421), list0, imageFormats0, "", 2058, "", 9, 9, 0.0F, 10, 9, 9, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getFormat();
      assertEquals((-5421), imageInfo0.getBitsPerPixel());
      assertTrue(imageInfo0.isProgressive());
      assertEquals(2058, imageInfo0.getHeight());
      assertEquals(9, imageInfo0.getWidth());
      assertEquals(9.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(9, imageInfo0.getPhysicalHeightDpi());
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertTrue(imageInfo0.usesPalette());
      assertEquals(10, imageInfo0.getPhysicalWidthDpi());
      assertEquals(9, imageInfo0.getNumberOfImages());
      assertTrue(imageInfo0.isTransparent());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("c2Mm{Yr", 2, linkedList0, imageFormats0, "c2Mm{Yr", 1, "Tuk &[):D", (-1196), 1, (-1.0F), 16, 138.16F, 1, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      assertFalse(imageInfo0.isProgressive());
      assertEquals(1, imageInfo0.getWidth());
      assertFalse(imageInfo0.usesPalette());
      assertEquals(2, imageInfo0.getBitsPerPixel());
      assertEquals(1, imageInfo0.getPhysicalHeightDpi());
      assertEquals(16, imageInfo0.getPhysicalWidthDpi());
      assertFalse(imageInfo0.isTransparent());
      assertEquals("Tuk &[):D", string0);
      assertEquals(138.16F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals("c2Mm{Yr", imageInfo0.getFormatDetails());
      assertEquals((-1.0F), imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(1, imageInfo0.getHeight());
      assertEquals("c2Mm{Yr", imageInfo0.getFormatName());
      assertEquals((-1196), imageInfo0.getNumberOfImages());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCbCr;
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.UNKNOWN;
      ImageInfo imageInfo0 = new ImageInfo("IN,9V=:`qY=r'6)v", 574, (List<String>) null, imageFormats0, "IN,9V=:`qY=r'6)v", 574, "IN,9V=:`qY=r'6)v", 574, 574, 574, 574, 574, 11, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getComments();
      assertEquals(574, imageInfo0.getHeight());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(574, imageInfo0.getNumberOfImages());
      assertEquals(574, imageInfo0.getPhysicalWidthDpi());
      assertEquals(574, imageInfo0.getBitsPerPixel());
      assertTrue(imageInfo0.isProgressive());
      assertTrue(imageInfo0.usesPalette());
      assertEquals(574.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(574, imageInfo0.getPhysicalHeightDpi());
      assertEquals(574.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(11, imageInfo0.getWidth());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCbCr;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PNM;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("YCbCr", 0, linkedList0, imageFormats0, "YCbCr", 0, "YCbCr", 0, 1129, 0, 1129, (-1.0F), 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertTrue(imageInfo0.usesPalette());
      assertEquals(0, int0);
      assertEquals(1129, imageInfo0.getPhysicalHeightDpi());
      assertEquals(0, imageInfo0.getBitsPerPixel());
      assertEquals((-1.0F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(1129, imageInfo0.getPhysicalWidthDpi());
      assertTrue(imageInfo0.isProgressive());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(0, imageInfo0.getHeight());
      assertEquals(0, imageInfo0.getWidth());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCbCr;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("3a*?bnNX;", (-20), list0, imageFormats0, "BMP", 0, "*V>E<W", 572, 2, (-3392.0F), (-20), (-20), 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      assertEquals(2, imageInfo0.getPhysicalHeightDpi());
      assertTrue(imageInfo0.isProgressive());
      assertEquals((-20.0F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(572, imageInfo0.getNumberOfImages());
      assertTrue(imageInfo0.usesPalette());
      assertTrue(imageInfo0.isTransparent());
      assertEquals("3a*?bnNX;", imageInfo0.getFormatDetails());
      assertEquals(0, imageInfo0.getHeight());
      assertEquals("*V>E<W", imageInfo0.getMimeType());
      assertEquals("BMP", imageInfo0.getFormatName());
      assertEquals((-20), int0);
      assertEquals((-20), imageInfo0.getBitsPerPixel());
      assertEquals(0, imageInfo0.getWidth());
      assertEquals((-3392.0F), imageInfo0.getPhysicalHeightInch(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCbCr;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PACKBITS;
      ImageInfo imageInfo0 = new ImageInfo("x7sb", 17, linkedList0, imageFormats0, "L", 1970, "- LjhlJF", 1, 0, 0, 1401, (-68.63F), 17, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      assertEquals("L", imageInfo0.getFormatName());
      assertFalse(imageInfo0.usesPalette());
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(17, imageInfo0.getWidth());
      assertEquals(1401, imageInfo0.getPhysicalWidthDpi());
      assertTrue(imageInfo0.isTransparent());
      assertFalse(imageInfo0.isProgressive());
      assertEquals("- LjhlJF", imageInfo0.getMimeType());
      assertEquals(1, imageInfo0.getNumberOfImages());
      assertEquals("x7sb", imageInfo0.getFormatDetails());
      assertEquals((-68.63F), float0, 0.01F);
      assertEquals(1970, imageInfo0.getHeight());
      assertEquals(17, imageInfo0.getBitsPerPixel());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.PAM;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.UNKNOWN;
      ImageInfo imageInfo0 = new ImageInfo("", (-501), list0, imageFormats0, "", (-501), "", (-501), (-501), (-501), (-501), (-501), (-501), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getFormatName();
      assertEquals((-501), imageInfo0.getHeight());
      assertEquals((-501), imageInfo0.getPhysicalHeightDpi());
      assertFalse(imageInfo0.isTransparent());
      assertEquals((-501.0F), imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals((-501), imageInfo0.getBitsPerPixel());
      assertEquals((-501), imageInfo0.getNumberOfImages());
      assertFalse(imageInfo0.isProgressive());
      assertFalse(imageInfo0.usesPalette());
      assertEquals((-501.0F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals((-501), imageInfo0.getPhysicalWidthDpi());
      assertEquals((-501), imageInfo0.getWidth());
  }
}
