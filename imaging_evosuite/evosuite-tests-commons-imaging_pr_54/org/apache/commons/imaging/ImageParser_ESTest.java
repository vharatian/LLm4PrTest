/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 02:41:57 GMT 2025
 */

package org.apache.commons.imaging;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.UnaryOperator;
import org.apache.commons.imaging.FormatCompliance;
import org.apache.commons.imaging.ImageFormats;
import org.apache.commons.imaging.ImageInfo;
import org.apache.commons.imaging.ImageParser;
import org.apache.commons.imaging.common.ImageMetadata;
import org.apache.commons.imaging.common.bytesource.ByteSource;
import org.apache.commons.imaging.common.bytesource.ByteSourceArray;
import org.apache.commons.imaging.common.bytesource.ByteSourceFile;
import org.apache.commons.imaging.common.bytesource.ByteSourceInputStream;
import org.apache.commons.imaging.formats.dcx.DcxImageParser;
import org.apache.commons.imaging.formats.gif.GifImageParser;
import org.apache.commons.imaging.formats.icns.IcnsImageParser;
import org.apache.commons.imaging.formats.ico.IcoImageParser;
import org.apache.commons.imaging.formats.jpeg.JpegImageParser;
import org.apache.commons.imaging.formats.png.PngImageParser;
import org.apache.commons.imaging.formats.pnm.PnmImageParser;
import org.apache.commons.imaging.formats.psd.PsdImageParser;
import org.apache.commons.imaging.formats.rgbe.RgbeImageParser;
import org.apache.commons.imaging.formats.tiff.TiffImageParser;
import org.apache.commons.imaging.formats.wbmp.WbmpImageParser;
import org.apache.commons.imaging.formats.xbm.XbmImageParser;
import org.apache.commons.imaging.formats.xpm.XpmImageParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ImageParser_ESTest extends ImageParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      String string0 = tiffImageParser0.getName();
      assertEquals("Tiff-Custom", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PsdImageParser psdImageParser0 = new PsdImageParser();
      byte[] byteArray0 = new byte[5];
      ImageMetadata imageMetadata0 = psdImageParser0.getMetadata(byteArray0, (Map<String, Object>) null);
      assertNull(imageMetadata0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PsdImageParser psdImageParser0 = new PsdImageParser();
      byte[] byteArray0 = new byte[0];
      ImageMetadata imageMetadata0 = psdImageParser0.getMetadata(byteArray0);
      assertNull(imageMetadata0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      MockFile mockFile0 = new MockFile("^3q#m#%", "_GpP4'PZV");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      ImageMetadata imageMetadata0 = pnmImageParser0.getMetadata((ByteSource) byteSourceFile0, (Map<String, Object>) null);
      assertNull(imageMetadata0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      IcoImageParser icoImageParser0 = new IcoImageParser();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      Dimension dimension0 = icoImageParser0.getImageSize(byteArray0, (Map<String, Object>) hashtable0);
      assertNull(dimension0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      IcoImageParser icoImageParser0 = new IcoImageParser();
      Dimension dimension0 = icoImageParser0.getImageSize(byteArray0);
      assertNull(dimension0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      IcoImageParser icoImageParser0 = new IcoImageParser();
      byte[] byteArray0 = new byte[9];
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ImageInfo imageInfo0 = icoImageParser0.getImageInfo(byteArray0, (Map<String, Object>) hashMap0);
      assertNull(imageInfo0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      IcoImageParser icoImageParser0 = new IcoImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ImageInfo imageInfo0 = icoImageParser0.getImageInfo((ByteSource) null, (Map<String, Object>) hashMap0);
      assertNull(imageInfo0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(".pgm", byteArray0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      WbmpImageParser wbmpImageParser0 = new WbmpImageParser();
      ImageInfo imageInfo0 = wbmpImageParser0.getImageInfo((ByteSource) byteSourceArray0, (Map<String, Object>) hashtable0);
      assertEquals(0, imageInfo0.getWidth());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(bufferedInputStream0, "Invalid PAM file header type ");
      ImageInfo imageInfo0 = dcxImageParser0.getImageInfo((ByteSource) byteSourceInputStream0);
      assertNull(imageInfo0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      byte[] byteArray0 = new byte[5];
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      byte[] byteArray1 = gifImageParser0.getICCProfileBytes(byteArray0, (Map<String, Object>) hashMap0);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      byte[] byteArray0 = pnmImageParser0.getICCProfileBytes((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XbmImageParser xbmImageParser0 = new XbmImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(byteArrayInputStream0, "Bitmap Data Size");
      byte[] byteArray1 = xbmImageParser0.getICCProfileBytes((ByteSource) byteSourceInputStream0, (Map<String, Object>) hashMap0);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      String string0 = pnmImageParser0.getDefaultExtension();
      assertEquals(".pnm", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      RgbeImageParser rgbeImageParser0 = new RgbeImageParser();
      byte[] byteArray0 = new byte[0];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("Invalid quantization table identifier ", byteArray0);
      String string0 = rgbeImageParser0.dumpImageFile((ByteSource) byteSourceArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PngImageParser pngImageParser0 = new PngImageParser();
      MockFile mockFile0 = new MockFile(".e7m0strict", ".png");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      // Undeclared exception!
      try { 
        pngImageParser0.writeImage((BufferedImage) null, mockPrintStream0, hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.png.PngWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      hashMap0.computeIfAbsent("STRICT", unaryOperator0);
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , any());
      hashMap0.replaceAll(biFunction0);
      // Undeclared exception!
      try { 
        ImageParser.isStrict(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      // Undeclared exception!
      try { 
        jpegImageParser0.getMetadata((byte[]) null, (Map<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      byte[] byteArray0 = new byte[0];
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        tiffImageParser0.getMetadata(byteArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid TIFF File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      RgbeImageParser rgbeImageParser0 = new RgbeImageParser();
      byte[] byteArray0 = new byte[4];
      try { 
        rgbeImageParser0.getMetadata(byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a valid HDR: Incorrect Header
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      byte[] byteArray0 = new byte[1];
      try { 
        tiffImageParser0.getMetadata(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid TIFF File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      byte[] byteArray0 = new byte[7];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      try { 
        tiffImageParser0.getMetadata((ByteSource) byteSourceArray0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid TIFF byte order 0
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ByteSourceArray byteSourceArray0 = new ByteSourceArray((byte[]) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      // Undeclared exception!
      try { 
        tiffImageParser0.getMetadata((ByteSource) byteSourceArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      byte[] byteArray0 = new byte[8];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      try { 
        gifImageParser0.getMetadata((ByteSource) byteSourceArray0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid GIF File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      File file0 = MockFile.createTempFile("YES", ".pam");
      PngImageParser pngImageParser0 = new PngImageParser();
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(file0);
      try { 
        pngImageParser0.getMetadata((ByteSource) byteSourceFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected EOF.
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      // Undeclared exception!
      try { 
        jpegImageParser0.getMetadata((ByteSource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.jpeg.JpegUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".pjam");
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      try { 
        tiffImageParser0.getMetadata((ByteSource) byteSourceFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        pnmImageParser0.getMetadata((File) null, (Map<String, Object>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".pic");
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      RgbeImageParser rgbeImageParser0 = new RgbeImageParser();
      try { 
        rgbeImageParser0.getMetadata((File) mockFile0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PsdImageParser psdImageParser0 = new PsdImageParser();
      // Undeclared exception!
      try { 
        psdImageParser0.getMetadata((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        pnmImageParser0.getImageSize((byte[]) null, (Map<String, Object>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      byte[] byteArray0 = new byte[2];
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        icnsImageParser0.getImageSize(byteArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid ICNS File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PngImageParser pngImageParser0 = new PngImageParser();
      byte[] byteArray0 = new byte[1];
      try { 
        pngImageParser0.getImageSize(byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Valid PNG Segment: Incorrect Signature
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      byte[] byteArray0 = new byte[0];
      try { 
        pnmImageParser0.getImageSize(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid PNM File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      XpmImageParser xpmImageParser0 = new XpmImageParser();
      byte[] byteArray0 = new byte[4];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        xpmImageParser0.getImageSize((ByteSource) byteSourceArray0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing XPM file failed, signature isn't '/* XPM *_/'
         //
         verifyException("org.apache.commons.imaging.formats.xpm.XpmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      ByteSourceArray byteSourceArray0 = new ByteSourceArray((byte[]) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        pnmImageParser0.getImageSize((ByteSource) byteSourceArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      MockFile mockFile0 = new MockFile(".0no");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        jpegImageParser0.getImageSize((ByteSource) byteSourceFile0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      // Undeclared exception!
      try { 
        pnmImageParser0.getImageSize((File) null, (Map<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".pam", ".pam");
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      try { 
        pnmImageParser0.getImageSize((File) mockFile0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XbmImageParser xbmImageParser0 = new XbmImageParser();
      // Undeclared exception!
      try { 
        xbmImageParser0.getImageSize((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      File file0 = MockFile.createTempFile("YES", ".pam");
      try { 
        pnmImageParser0.getImageSize(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid PNM File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XbmImageParser xbmImageParser0 = new XbmImageParser();
      byte[] byteArray0 = new byte[2];
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      try { 
        xbmImageParser0.getImageInfo(byteArray0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // width not found
         //
         verifyException("org.apache.commons.imaging.formats.xbm.XbmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      byte[] byteArray0 = new byte[0];
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        pnmImageParser0.getImageInfo(byteArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid PNM File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      WbmpImageParser wbmpImageParser0 = new WbmpImageParser();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-74);
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("hScreenSize: ", byteArray0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      try { 
        wbmpImageParser0.getImageInfo((ByteSource) byteSourceArray0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid/unsupported WBMP type 6912
         //
         verifyException("org.apache.commons.imaging.formats.wbmp.WbmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      // Undeclared exception!
      try { 
        pnmImageParser0.getImageInfo((ByteSource) null, (Map<String, Object>) hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.pnm.PnmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      byte[] byteArray0 = new byte[0];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("s0pAN 6V#nTOJT", byteArray0);
      try { 
        pnmImageParser0.getImageInfo((ByteSource) byteSourceArray0, (Map<String, Object>) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid PNM File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".pam", ".pam");
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        pnmImageParser0.getImageInfo((ByteSource) byteSourceFile0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PsdImageParser psdImageParser0 = new PsdImageParser();
      File file0 = MockFile.createTempFile("A7\"+", ": ");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(file0);
      try { 
        psdImageParser0.getImageInfo((ByteSource) byteSourceFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected EOF.
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      byte[] byteArray0 = new byte[0];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        gifImageParser0.getImageInfo((ByteSource) byteSourceArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid GIF File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".pb)m", ".pb)m");
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      try { 
        pnmImageParser0.getImageInfo((ByteSource) byteSourceFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      // Undeclared exception!
      try { 
        pnmImageParser0.getImageInfo((File) null, (Map<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      File file0 = MockFile.createTempFile("YES", ".pam");
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      try { 
        pnmImageParser0.getImageInfo(file0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid PNM File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      PngImageParser pngImageParser0 = new PngImageParser();
      byte[] byteArray0 = new byte[0];
      try { 
        pngImageParser0.getICCProfileBytes(byteArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected EOF.
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      byte[] byteArray0 = new byte[1];
      try { 
        tiffImageParser0.getICCProfileBytes(byteArray0, (Map<String, Object>) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid TIFF File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      byte[] byteArray0 = new byte[2];
      try { 
        tiffImageParser0.getICCProfileBytes(byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid TIFF byte order 0
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      byte[] byteArray0 = new byte[1];
      try { 
        tiffImageParser0.getICCProfileBytes(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid TIFF File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PsdImageParser psdImageParser0 = new PsdImageParser();
      PipedInputStream pipedInputStream0 = new PipedInputStream(606);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(pipedInputStream0, "");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        psdImageParser0.getICCProfileBytes((ByteSource) byteSourceInputStream0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PsdImageParser psdImageParser0 = new PsdImageParser();
      MockFile mockFile0 = new MockFile("org.apache.commons.imaging.ImageParser", "XMP");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        psdImageParser0.getICCProfileBytes((ByteSource) byteSourceFile0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      // Undeclared exception!
      try { 
        tiffImageParser0.getICCProfileBytes((File) null, (Map<String, Object>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      // Undeclared exception!
      try { 
        pnmImageParser0.getICCProfileBytes((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      byte[] byteArray0 = new byte[6];
      try { 
        tiffImageParser0.getFormatCompliance(byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid TIFF byte order 0
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      // Undeclared exception!
      try { 
        tiffImageParser0.getFormatCompliance((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      byte[] byteArray0 = new byte[0];
      try { 
        gifImageParser0.getFormatCompliance(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid GIF File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      GifImageParser gifImageParser0 = new GifImageParser();
      ByteSourceArray byteSourceArray0 = new ByteSourceArray((String) null, byteArray0);
      try { 
        gifImageParser0.getFormatCompliance((ByteSource) byteSourceArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid GIF File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XbmImageParser xbmImageParser0 = new XbmImageParser();
      // Undeclared exception!
      try { 
        xbmImageParser0.getFormatCompliance((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      byte[] byteArray0 = new byte[2];
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      try { 
        pnmImageParser0.getBufferedImage(byteArray0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // PNM file has invalid prefix byte 1
         //
         verifyException("org.apache.commons.imaging.formats.pnm.PnmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      byte[] byteArray0 = new byte[0];
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      try { 
        pnmImageParser0.getBufferedImage(byteArray0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid PNM File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PsdImageParser psdImageParser0 = new PsdImageParser();
      MockFile mockFile0 = new MockFile(".n");
      File file0 = MockFile.createTempFile("XMP", ".n", (File) mockFile0);
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(file0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        psdImageParser0.getBufferedImage((ByteSource) byteSourceFile0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected EOF.
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      // Undeclared exception!
      try { 
        pnmImageParser0.getBufferedImage((ByteSource) null, (Map<String, Object>) hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.pnm.PnmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      GifImageParser gifImageParser0 = new GifImageParser();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-87), 55);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(byteArrayInputStream0, "bA;eGAkCi");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        gifImageParser0.getBufferedImage((ByteSource) byteSourceInputStream0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      byte[] byteArray0 = new byte[0];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("&ACSweVm-8G!wb26AAP", byteArray0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        icnsImageParser0.getBufferedImage((ByteSource) byteSourceArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid ICNS File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      MockFile mockFile0 = new MockFile(".pgm0no");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      try { 
        jpegImageParser0.getBufferedImage((ByteSource) byteSourceFile0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      IcoImageParser icoImageParser0 = new IcoImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        icoImageParser0.getBufferedImage((File) null, (Map<String, Object>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      try { 
        pnmImageParser0.getAllBufferedImages(byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // PNM file has invalid prefix byte 1
         //
         verifyException("org.apache.commons.imaging.formats.pnm.PnmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      byte[] byteArray0 = new byte[0];
      try { 
        pnmImageParser0.getAllBufferedImages(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid PNM File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("YES", (byte[]) null);
      // Undeclared exception!
      try { 
        pnmImageParser0.getAllBufferedImages((ByteSource) byteSourceArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XbmImageParser xbmImageParser0 = new XbmImageParser();
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-54), 375);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(byteArrayInputStream0, ".?");
      // Undeclared exception!
      try { 
        xbmImageParser0.getAllBufferedImages((ByteSource) byteSourceInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      byte[] byteArray0 = new byte[1];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray((String) null, byteArray0);
      try { 
        pnmImageParser0.getAllBufferedImages((ByteSource) byteSourceArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid PNM File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      MockFile mockFile0 = new MockFile("`JTb");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      try { 
        icnsImageParser0.getAllBufferedImages((ByteSource) byteSourceFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      // Undeclared exception!
      try { 
        pnmImageParser0.getAllBufferedImages((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      File file0 = MockFile.createTempFile("YES", ".pam");
      try { 
        pnmImageParser0.getAllBufferedImages(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid PNM File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      IcoImageParser icoImageParser0 = new IcoImageParser();
      try { 
        icoImageParser0.dumpImageFile(byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Valid ICO File: icon type is 0
         //
         verifyException("org.apache.commons.imaging.formats.ico.IcoImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      // Undeclared exception!
      try { 
        pnmImageParser0.dumpImageFile((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      // Undeclared exception!
      try { 
        tiffImageParser0.dumpImageFile((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      IcoImageParser icoImageParser0 = new IcoImageParser();
      try { 
        icoImageParser0.dumpImageFile(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid ICO File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XbmImageParser xbmImageParser0 = new XbmImageParser();
      MockFile mockFile0 = new MockFile(".`u");
      File file0 = MockFile.createTempFile(".`u", "w`M9-~l,", (File) mockFile0);
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(file0);
      try { 
        xbmImageParser0.dumpImageFile((ByteSource) byteSourceFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // width not found
         //
         verifyException("org.apache.commons.imaging.formats.xbm.XbmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      ByteSourceArray byteSourceArray0 = new ByteSourceArray((byte[]) null);
      // Undeclared exception!
      try { 
        pnmImageParser0.dumpImageFile((ByteSource) byteSourceArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".pnm", ".pnm");
      PngImageParser pngImageParser0 = new PngImageParser();
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      try { 
        pngImageParser0.dumpImageFile((ByteSource) byteSourceFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      File file0 = MockFile.createTempFile("File Size", "File Size");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[7];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("File Size", byteArray0);
      try { 
        jpegImageParser0.dumpImageFile((PrintWriter) mockPrintWriter0, (ByteSource) byteSourceArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Valid JPEG File: doesn't begin with 0xffd8
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XbmImageParser xbmImageParser0 = new XbmImageParser();
      MockFile mockFile0 = new MockFile("|?\"Cw*W&el*(", "PNM_RAWBITS");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      ByteSourceArray byteSourceArray0 = new ByteSourceArray((byte[]) null);
      // Undeclared exception!
      try { 
        xbmImageParser0.dumpImageFile((PrintWriter) mockPrintWriter0, (ByteSource) byteSourceArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      byte[] byteArray0 = new byte[6];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("aMn4", byteArray0);
      try { 
        icnsImageParser0.dumpImageFile((PrintWriter) mockPrintWriter0, (ByteSource) byteSourceArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid ICNS File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".pam/.pam");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "\"1");
      MockFile mockFile0 = new MockFile(".pam", ".pam");
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      try { 
        pnmImageParser0.dumpImageFile((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // PNM file has invalid prefix byte 1
         //
         verifyException("org.apache.commons.imaging.formats.pnm.PnmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      // Undeclared exception!
      try { 
        tiffImageParser0.dumpImageFile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      File file0 = MockFile.createTempFile(".pbm", ".pbm");
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      try { 
        pnmImageParser0.dumpImageFile(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid PNM File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = ImageParser.isStrict((Map<String, Object>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockFile mockFile0 = new MockFile("PNM_RAWBITS");
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      byte[] byteArray0 = tiffImageParser0.getICCProfileBytes((File) mockFile0, (Map<String, Object>) hashtable0);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".pam");
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      byte[] byteArray0 = pnmImageParser0.getICCProfileBytes((File) mockFile0, (Map<String, Object>) hashMap0);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PngImageParser pngImageParser0 = new PngImageParser();
      MockFile mockFile0 = new MockFile("The offset cannot be negative", "k^K [D?sx%");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Dimension dimension0 = pngImageParser0.getImageSize((File) mockFile0, (Map<String, Object>) hashMap0);
      assertNull(dimension0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      File file0 = MockFile.createTempFile(".pbm", ".pbm");
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      try { 
        pnmImageParser0.getImageSize(file0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid PNM File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MockFile mockFile0 = new MockFile("PNM_RAWBITS");
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ImageMetadata imageMetadata0 = tiffImageParser0.getMetadata((File) mockFile0, (Map<String, Object>) hashMap0);
      assertNull(imageMetadata0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      RgbeImageParser rgbeImageParser0 = new RgbeImageParser();
      boolean boolean0 = rgbeImageParser0.dumpImageFile((PrintWriter) null, (ByteSource) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PsdImageParser psdImageParser0 = new PsdImageParser();
      byte[] byteArray0 = new byte[1];
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        psdImageParser0.getImageSize(byteArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Valid PSD File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PngImageParser pngImageParser0 = new PngImageParser();
      byte[] byteArray0 = new byte[2];
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        pngImageParser0.getMetadata(byteArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Valid PNG Segment: Incorrect Signature
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      // Undeclared exception!
      try { 
        pnmImageParser0.getAllBufferedImages((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PngImageParser pngImageParser0 = new PngImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        pngImageParser0.getICCProfileBytes((byte[]) null, (Map<String, Object>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PsdImageParser psdImageParser0 = new PsdImageParser();
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream((InputStream) null, "");
      try { 
        psdImageParser0.dumpImageFile((ByteSource) byteSourceInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MockFile mockFile0 = new MockFile("PNM_RAWBITS");
      IcoImageParser icoImageParser0 = new IcoImageParser();
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      FormatCompliance formatCompliance0 = icoImageParser0.getFormatCompliance((ByteSource) byteSourceFile0);
      assertNull(formatCompliance0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      hashMap0.computeIfAbsent("STRICT", unaryOperator0);
      // Undeclared exception!
      try { 
        ImageParser.isStrict(hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Boolean
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      // Undeclared exception!
      try { 
        tiffImageParser0.getImageInfo((ByteSource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      ImageFormats imageFormats0 = ImageFormats.JPEG;
      boolean boolean0 = jpegImageParser0.canAcceptType(imageFormats0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      ImageFormats imageFormats0 = ImageFormats.BMP;
      boolean boolean0 = pnmImageParser0.canAcceptType(imageFormats0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".Z09/?r_U(x8*#", ".Z09/?r_U(x8*#");
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      String string0 = pnmImageParser0.dumpImageFile((File) mockFile0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      MockFile mockFile0 = new MockFile("|?\"Cw*W&el*(", "PNM_RAWBITS");
      byte[] byteArray0 = pnmImageParser0.getICCProfileBytes((File) mockFile0);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      MockFile mockFile0 = new MockFile("PNM_RAWBITS");
      Dimension dimension0 = pnmImageParser0.getImageSize((File) mockFile0);
      assertNull(dimension0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      IcoImageParser icoImageParser0 = new IcoImageParser();
      MockFile mockFile0 = new MockFile("YES", "PNM_RAWBITS");
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      BufferedImage bufferedImage0 = icoImageParser0.getBufferedImage((File) mockFile0, (Map<String, Object>) hashtable0);
      assertNull(bufferedImage0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".pam", ".pam");
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        pnmImageParser0.getBufferedImage((File) mockFile0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      MockFile mockFile0 = new MockFile(".wbmp");
      List<BufferedImage> list0 = icnsImageParser0.getAllBufferedImages((File) mockFile0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".pam");
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      try { 
        pnmImageParser0.getAllBufferedImages((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PsdImageParser psdImageParser0 = new PsdImageParser();
      File file0 = MockFile.createTempFile("XMP", "XMP");
      FormatCompliance formatCompliance0 = psdImageParser0.getFormatCompliance(file0);
      assertNull(formatCompliance0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      MockFile mockFile0 = new MockFile("NO");
      ImageInfo imageInfo0 = pnmImageParser0.getImageInfo((File) mockFile0, (Map<String, Object>) null);
      assertNull(imageInfo0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      MockFile mockFile0 = new MockFile(".pam");
      try { 
        pnmImageParser0.getImageInfo((File) mockFile0, (Map<String, Object>) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".pam", ".pam");
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      try { 
        pnmImageParser0.getImageSize((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".pam", ".pam");
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      try { 
        pnmImageParser0.dumpImageFile((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      RgbeImageParser rgbeImageParser0 = new RgbeImageParser();
      MockFile mockFile0 = new MockFile(".t", ".t");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(1785, 1785);
      try { 
        rgbeImageParser0.writeImage((BufferedImage) null, mockFileOutputStream0, hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // This image format (Radiance HDR) cannot be written.
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      // Undeclared exception!
      try { 
        gifImageParser0.getMetadata((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      XbmImageParser xbmImageParser0 = new XbmImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        xbmImageParser0.getBufferedImage((byte[]) null, (Map<String, Object>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      FormatCompliance formatCompliance0 = icnsImageParser0.getFormatCompliance((byte[]) null);
      assertNull(formatCompliance0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      // Undeclared exception!
      try { 
        pnmImageParser0.getImageSize((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".pb)m", ".pb)m");
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      ImageMetadata imageMetadata0 = pnmImageParser0.getMetadata((ByteSource) byteSourceFile0);
      assertNull(imageMetadata0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      PsdImageParser psdImageParser0 = new PsdImageParser();
      byte[] byteArray0 = new byte[1];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        psdImageParser0.getAllBufferedImages((ByteSource) byteSourceArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Valid PSD File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      PsdImageParser psdImageParser0 = new PsdImageParser();
      File file0 = MockFile.createTempFile("XMP", "XMP");
      ImageMetadata imageMetadata0 = psdImageParser0.getMetadata(file0);
      assertNull(imageMetadata0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ImageParser[] imageParserArray0 = ImageParser.getAllImageParsers();
      assertEquals(15, imageParserArray0.length);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      // Undeclared exception!
      try { 
        jpegImageParser0.getICCProfileBytes((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".pam", ".pam");
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      FormatCompliance formatCompliance0 = pnmImageParser0.getFormatCompliance((File) mockFile0);
      assertNull(formatCompliance0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      // Undeclared exception!
      try { 
        pnmImageParser0.getImageInfo((byte[]) null, (Map<String, Object>) hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      RgbeImageParser rgbeImageParser0 = new RgbeImageParser();
      byte[] byteArray0 = new byte[4];
      String string0 = rgbeImageParser0.dumpImageFile(byteArray0);
      assertEquals("", string0);
  }
}
