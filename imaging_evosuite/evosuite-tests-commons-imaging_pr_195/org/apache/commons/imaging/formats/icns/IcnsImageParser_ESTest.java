/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 19:50:28 GMT 2025
 */

package org.apache.commons.imaging.formats.icns;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.image.BufferedImage;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import org.apache.commons.imaging.ImageFormat;
import org.apache.commons.imaging.common.ImageMetadata;
import org.apache.commons.imaging.common.RgbBufferedImageFactory;
import org.apache.commons.imaging.common.SimpleBufferedImageFactory;
import org.apache.commons.imaging.common.bytesource.ByteSource;
import org.apache.commons.imaging.common.bytesource.ByteSourceArray;
import org.apache.commons.imaging.common.bytesource.ByteSourceFile;
import org.apache.commons.imaging.common.bytesource.ByteSourceInputStream;
import org.apache.commons.imaging.formats.icns.IcnsImageParser;
import org.apache.commons.imaging.formats.icns.IcnsImagingParameters;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class IcnsImageParser_ESTest extends IcnsImageParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getColorBufferedImage(128, 1540, false);
      IcnsImagingParameters icnsImagingParameters0 = new IcnsImagingParameters();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        icnsImageParser0.writeImage(bufferedImage0, (OutputStream) pipedOutputStream0, icnsImagingParameters0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid/unsupported source width 128 and height 1540
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getColorBufferedImage(410, 410, true);
      IcnsImagingParameters icnsImagingParameters0 = new IcnsImagingParameters();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        icnsImageParser0.writeImage(bufferedImage0, (OutputStream) pipedOutputStream0, icnsImagingParameters0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid/unsupported source width 410 and height 410
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getColorBufferedImage(48, 32, false);
      IcnsImagingParameters icnsImagingParameters0 = new IcnsImagingParameters();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        icnsImageParser0.writeImage(bufferedImage0, (OutputStream) pipedOutputStream0, icnsImagingParameters0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid/unsupported source width 48 and height 32
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getColorBufferedImage(32, 1605, true);
      IcnsImagingParameters icnsImagingParameters0 = new IcnsImagingParameters();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        icnsImageParser0.writeImage(bufferedImage0, (OutputStream) pipedOutputStream0, icnsImagingParameters0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid/unsupported source width 32 and height 1605
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      IcnsImagingParameters icnsImagingParameters0 = icnsImageParser0.getDefaultParameters();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      RgbBufferedImageFactory rgbBufferedImageFactory0 = new RgbBufferedImageFactory();
      BufferedImage bufferedImage0 = rgbBufferedImageFactory0.getColorBufferedImage(16, 312, true);
      try { 
        icnsImageParser0.writeImage(bufferedImage0, (OutputStream) pipedOutputStream0, icnsImagingParameters0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid/unsupported source width 16 and height 312
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      RgbBufferedImageFactory rgbBufferedImageFactory0 = new RgbBufferedImageFactory();
      BufferedImage bufferedImage0 = rgbBufferedImageFactory0.getColorBufferedImage((byte)3, (byte)3, false);
      MockFile mockFile0 = new MockFile("", "org.apache.commons.imaging.formats.tiff.photometricinterpreters.PhotometricInterpreterYCbCr");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 242);
      try { 
        icnsImageParser0.writeImage(bufferedImage0, (OutputStream) bufferedOutputStream0, (IcnsImagingParameters) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid/unsupported source width 3 and height 3
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      IcnsImageParser.IcnsElement icnsImageParser_IcnsElement0 = new IcnsImageParser.IcnsElement((-1054), (-1054), byteArray0);
      IcnsImageParser.IcnsElement icnsImageParser_IcnsElement1 = new IcnsImageParser.IcnsElement((-1054), (-3784), icnsImageParser_IcnsElement0.data);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.io.file.Counters");
      icnsImageParser_IcnsElement1.dump(mockPrintWriter0);
      assertFalse(icnsImageParser_IcnsElement0.equals((Object)icnsImageParser_IcnsElement1));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)117;
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        icnsImageParser0.getAllBufferedImages((ByteSource) byteSourceArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Valid ICNS File: magic is 0x75000000
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (-1085));
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(dataInputStream0, "n~8C[r2D");
      IcnsImagingParameters icnsImagingParameters0 = new IcnsImagingParameters();
      ImageMetadata imageMetadata0 = icnsImageParser0.getMetadata((ByteSource) byteSourceInputStream0, icnsImagingParameters0);
      assertNull(imageMetadata0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      IcnsImagingParameters icnsImagingParameters0 = icnsImageParser0.getDefaultParameters();
      // Undeclared exception!
      try { 
        icnsImageParser0.writeImage((BufferedImage) null, (OutputStream) pipedOutputStream0, icnsImagingParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      byte[] byteArray0 = new byte[8];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("Apple Icon Image", byteArray0);
      IcnsImagingParameters icnsImagingParameters0 = icnsImageParser0.getDefaultParameters();
      try { 
        icnsImageParser0.getImageSize((ByteSource) byteSourceArray0, icnsImagingParameters0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Valid ICNS File: magic is 0x0
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      IcnsImagingParameters icnsImagingParameters0 = new IcnsImagingParameters();
      // Undeclared exception!
      try { 
        icnsImageParser0.getImageSize((ByteSource) null, icnsImagingParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      byte[] byteArray0 = new byte[1];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("Width: ", byteArray0);
      IcnsImagingParameters icnsImagingParameters0 = new IcnsImagingParameters();
      try { 
        icnsImageParser0.getImageSize((ByteSource) byteSourceArray0, icnsImagingParameters0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid ICNS File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      IcnsImagingParameters icnsImagingParameters0 = new IcnsImagingParameters();
      MockFile mockFile0 = new MockFile(", ");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      try { 
        icnsImageParser0.getImageSize((ByteSource) byteSourceFile0, icnsImagingParameters0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      byte[] byteArray0 = new byte[18];
      IcnsImagingParameters icnsImagingParameters0 = icnsImageParser0.getDefaultParameters();
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        icnsImageParser0.getImageInfo((ByteSource) byteSourceArray0, icnsImagingParameters0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Valid ICNS File: magic is 0x0
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      IcnsImagingParameters icnsImagingParameters0 = icnsImageParser0.getDefaultParameters();
      // Undeclared exception!
      try { 
        icnsImageParser0.getImageInfo((ByteSource) null, icnsImagingParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      IcnsImagingParameters icnsImagingParameters0 = icnsImageParser0.getDefaultParameters();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(pipedInputStream0, "");
      try { 
        icnsImageParser0.getImageInfo((ByteSource) byteSourceInputStream0, icnsImagingParameters0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      MockFile mockFile0 = new MockFile("*1$4*,v1;", "");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      try { 
        icnsImageParser0.getImageInfo((ByteSource) byteSourceFile0, (IcnsImagingParameters) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      byte[] byteArray0 = new byte[9];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      IcnsImagingParameters icnsImagingParameters0 = icnsImageParser0.getDefaultParameters();
      try { 
        icnsImageParser0.getBufferedImage((ByteSource) byteSourceArray0, icnsImagingParameters0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Valid ICNS File: magic is 0x0
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      IcnsImagingParameters icnsImagingParameters0 = new IcnsImagingParameters();
      // Undeclared exception!
      try { 
        icnsImageParser0.getBufferedImage((ByteSource) null, icnsImagingParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      byte[] byteArray0 = new byte[0];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      IcnsImagingParameters icnsImagingParameters0 = icnsImageParser0.getDefaultParameters();
      try { 
        icnsImageParser0.getBufferedImage((ByteSource) byteSourceArray0, icnsImagingParameters0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid ICNS File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      MockFile mockFile0 = new MockFile("");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      IcnsImagingParameters icnsImagingParameters0 = new IcnsImagingParameters();
      try { 
        icnsImageParser0.getBufferedImage((ByteSource) byteSourceFile0, icnsImagingParameters0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      // Undeclared exception!
      try { 
        icnsImageParser0.getAllBufferedImages((ByteSource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      byte[] byteArray0 = new byte[1];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(", ", byteArray0);
      try { 
        icnsImageParser0.getAllBufferedImages((ByteSource) byteSourceArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid ICNS File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      MockFile mockFile0 = new MockFile("Nuy=@7&f+F3\")z|");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      try { 
        icnsImageParser0.getAllBufferedImages((ByteSource) byteSourceFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      byte[] byteArray0 = new byte[8];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(" m^ShNeC&b1YTSM1J", byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      try { 
        icnsImageParser0.dumpImageFile((PrintWriter) mockPrintWriter0, (ByteSource) byteSourceArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Valid ICNS File: magic is 0x0
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      // Undeclared exception!
      try { 
        icnsImageParser0.dumpImageFile((PrintWriter) null, (ByteSource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      byte[] byteArray0 = new byte[1];
      IcnsImageParser.IcnsElement icnsImageParser_IcnsElement0 = new IcnsImageParser.IcnsElement((-1054), (-1054), byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.io.file.Counters");
      ByteSourceArray byteSourceArray0 = new ByteSourceArray((String) null, icnsImageParser_IcnsElement0.data);
      try { 
        icnsImageParser0.dumpImageFile((PrintWriter) mockPrintWriter0, (ByteSource) byteSourceArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid ICNS File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getColorBufferedImage(32, 32, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 32);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      IcnsImagingParameters icnsImagingParameters0 = new IcnsImagingParameters();
      icnsImageParser0.writeImage(bufferedImage0, (OutputStream) mockPrintStream0, icnsImagingParameters0);
      assertEquals(0, bufferedImage0.getMinY());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getColorBufferedImage(128, 62, true);
      IcnsImagingParameters icnsImagingParameters0 = new IcnsImagingParameters();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        icnsImageParser0.writeImage(bufferedImage0, (OutputStream) pipedOutputStream0, icnsImagingParameters0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid/unsupported source width 128 and height 62
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getColorBufferedImage(48, 48, true);
      IcnsImagingParameters icnsImagingParameters0 = new IcnsImagingParameters();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      try { 
        icnsImageParser0.writeImage(bufferedImage0, (OutputStream) pipedOutputStream0, icnsImagingParameters0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getColorBufferedImage(48, 151, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      IcnsImagingParameters icnsImagingParameters0 = new IcnsImagingParameters();
      try { 
        icnsImageParser0.writeImage(bufferedImage0, (OutputStream) pipedOutputStream0, icnsImagingParameters0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid/unsupported source width 48 and height 151
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getColorBufferedImage(32, 1, true);
      IcnsImagingParameters icnsImagingParameters0 = new IcnsImagingParameters();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        icnsImageParser0.writeImage(bufferedImage0, (OutputStream) pipedOutputStream0, icnsImagingParameters0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid/unsupported source width 32 and height 1
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getColorBufferedImage(32, 32, true);
      IcnsImagingParameters icnsImagingParameters0 = new IcnsImagingParameters();
      // Undeclared exception!
      try { 
        icnsImageParser0.writeImage(bufferedImage0, (OutputStream) null, icnsImagingParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      RgbBufferedImageFactory rgbBufferedImageFactory0 = new RgbBufferedImageFactory();
      BufferedImage bufferedImage0 = rgbBufferedImageFactory0.getColorBufferedImage(16, 16, true);
      IcnsImagingParameters icnsImagingParameters0 = new IcnsImagingParameters();
      try { 
        icnsImageParser0.writeImage(bufferedImage0, (OutputStream) pipedOutputStream0, icnsImagingParameters0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      RgbBufferedImageFactory rgbBufferedImageFactory0 = new RgbBufferedImageFactory();
      BufferedImage bufferedImage0 = rgbBufferedImageFactory0.getColorBufferedImage(16, 15, true);
      IcnsImagingParameters icnsImagingParameters0 = new IcnsImagingParameters();
      try { 
        icnsImageParser0.writeImage(bufferedImage0, (OutputStream) pipedOutputStream0, icnsImagingParameters0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid/unsupported source width 16 and height 15
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getGrayscaleBufferedImage(128, 128, false);
      IcnsImagingParameters icnsImagingParameters0 = new IcnsImagingParameters();
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      icnsImageParser0.writeImage(bufferedImage0, (OutputStream) byteArrayOutputStream0, icnsImagingParameters0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      String[] stringArray0 = icnsImageParser0.getAcceptedExtensions();
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      IcnsImagingParameters icnsImagingParameters0 = icnsImageParser0.getDefaultParameters();
      byte[] byteArray0 = icnsImageParser0.getICCProfileBytes((ByteSource) null, icnsImagingParameters0);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1034), 1778384896);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 147);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(pushbackInputStream0, "M!q#Qm6%!D]F^m");
      // Undeclared exception!
      try { 
        icnsImageParser0.getAllBufferedImages((ByteSource) byteSourceInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      String string0 = icnsImageParser0.getDefaultExtension();
      assertEquals("icns", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      ImageFormat[] imageFormatArray0 = icnsImageParser0.getAcceptedTypes();
      assertEquals(1, imageFormatArray0.length);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      String string0 = icnsImageParser0.getName();
      assertEquals("Apple Icon Image", string0);
  }
}
