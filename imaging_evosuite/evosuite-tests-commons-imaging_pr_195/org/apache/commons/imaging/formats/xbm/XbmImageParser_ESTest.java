/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 20:02:31 GMT 2025
 */

package org.apache.commons.imaging.formats.xbm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.awt.image.RescaleOp;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.util.HashMap;
import javax.swing.DebugGraphics;
import org.apache.commons.imaging.ImageFormat;
import org.apache.commons.imaging.common.ImageMetadata;
import org.apache.commons.imaging.common.SimpleBufferedImageFactory;
import org.apache.commons.imaging.common.bytesource.ByteSource;
import org.apache.commons.imaging.common.bytesource.ByteSourceArray;
import org.apache.commons.imaging.common.bytesource.ByteSourceFile;
import org.apache.commons.imaging.common.bytesource.ByteSourceInputStream;
import org.apache.commons.imaging.formats.xbm.XbmImageParser;
import org.apache.commons.imaging.formats.xbm.XbmImagingParameters;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class XbmImageParser_ESTest extends XbmImageParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XbmImageParser xbmImageParser0 = new XbmImageParser();
      assertEquals("X BitMap", xbmImageParser0.getName());
      assertEquals("xbm", xbmImageParser0.getDefaultExtension());
      assertNotNull(xbmImageParser0);
      
      XbmImagingParameters xbmImagingParameters0 = xbmImageParser0.getDefaultParameters();
      assertEquals("X BitMap", xbmImageParser0.getName());
      assertEquals("xbm", xbmImageParser0.getDefaultExtension());
      assertFalse(xbmImagingParameters0.isStrict());
      assertNull(xbmImagingParameters0.getFileName());
      assertNotNull(xbmImagingParameters0);
      
      // Undeclared exception!
      try { 
        xbmImageParser0.writeImage((BufferedImage) null, (OutputStream) null, xbmImagingParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      assertNotNull(simpleBufferedImageFactory0);
      
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getGrayscaleBufferedImage(29, 29, false);
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(29, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(29, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(29, bufferedImage0.getHeight());
      assertEquals(29, bufferedImage0.getTileWidth());
      assertEquals(10, bufferedImage0.getType());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertTrue(bufferedImage0.hasTileWriters());
      assertNotNull(bufferedImage0);
      
      XbmImageParser xbmImageParser0 = new XbmImageParser();
      assertEquals("xbm", xbmImageParser0.getDefaultExtension());
      assertEquals("X BitMap", xbmImageParser0.getName());
      assertNotNull(xbmImageParser0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      try { 
        xbmImageParser0.writeImage(bufferedImage0, (OutputStream) pipedOutputStream0, (XbmImagingParameters) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XbmImageParser xbmImageParser0 = new XbmImageParser();
      assertEquals("xbm", xbmImageParser0.getDefaultExtension());
      assertEquals("X BitMap", xbmImageParser0.getName());
      assertNotNull(xbmImageParser0);
      
      XbmImagingParameters xbmImagingParameters0 = xbmImageParser0.getDefaultParameters();
      assertEquals("xbm", xbmImageParser0.getDefaultExtension());
      assertEquals("X BitMap", xbmImageParser0.getName());
      assertFalse(xbmImagingParameters0.isStrict());
      assertNull(xbmImagingParameters0.getFileName());
      assertNotNull(xbmImagingParameters0);
      
      // Undeclared exception!
      try { 
        xbmImageParser0.getImageSize((ByteSource) null, xbmImagingParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.xbm.XbmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XbmImageParser xbmImageParser0 = new XbmImageParser();
      assertEquals("X BitMap", xbmImageParser0.getName());
      assertEquals("xbm", xbmImageParser0.getDefaultExtension());
      assertNotNull(xbmImageParser0);
      
      XbmImagingParameters xbmImagingParameters0 = new XbmImagingParameters();
      assertNull(xbmImagingParameters0.getFileName());
      assertFalse(xbmImagingParameters0.isStrict());
      assertNotNull(xbmImagingParameters0);
      
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream((InputStream) null, ";,fwRE_:y");
      assertEquals(";,fwRE_:y", byteSourceInputStream0.getFileName());
      assertNotNull(byteSourceInputStream0);
      
      try { 
        xbmImageParser0.getImageSize((ByteSource) byteSourceInputStream0, xbmImagingParameters0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XbmImageParser xbmImageParser0 = new XbmImageParser();
      assertEquals("X BitMap", xbmImageParser0.getName());
      assertEquals("xbm", xbmImageParser0.getDefaultExtension());
      assertNotNull(xbmImageParser0);
      
      XbmImagingParameters xbmImagingParameters0 = xbmImageParser0.getDefaultParameters();
      assertEquals("X BitMap", xbmImageParser0.getName());
      assertEquals("xbm", xbmImageParser0.getDefaultExtension());
      assertFalse(xbmImagingParameters0.isStrict());
      assertNull(xbmImagingParameters0.getFileName());
      assertNotNull(xbmImagingParameters0);
      
      MockFile mockFile0 = new MockFile("BeU&y:");
      assertNotNull(mockFile0);
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("BeU&y:", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("BeU&y:", mockFile0.toString());
      assertEquals("BeU&y:", byteSourceFile0.getFileName());
      assertEquals(0L, byteSourceFile0.getLength());
      assertNotNull(byteSourceFile0);
      
      try { 
        xbmImageParser0.getImageSize((ByteSource) byteSourceFile0, xbmImagingParameters0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XbmImageParser xbmImageParser0 = new XbmImageParser();
      assertEquals("X BitMap", xbmImageParser0.getName());
      assertEquals("xbm", xbmImageParser0.getDefaultExtension());
      assertNotNull(xbmImageParser0);
      
      XbmImagingParameters xbmImagingParameters0 = new XbmImagingParameters();
      assertFalse(xbmImagingParameters0.isStrict());
      assertNull(xbmImagingParameters0.getFileName());
      assertNotNull(xbmImagingParameters0);
      
      // Undeclared exception!
      try { 
        xbmImageParser0.getImageInfo((ByteSource) null, xbmImagingParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.xbm.XbmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XbmImageParser xbmImageParser0 = new XbmImageParser();
      assertEquals("xbm", xbmImageParser0.getDefaultExtension());
      assertEquals("X BitMap", xbmImageParser0.getName());
      assertNotNull(xbmImageParser0);
      
      XbmImagingParameters xbmImagingParameters0 = xbmImageParser0.getDefaultParameters();
      assertEquals("xbm", xbmImageParser0.getDefaultExtension());
      assertEquals("X BitMap", xbmImageParser0.getName());
      assertNull(xbmImagingParameters0.getFileName());
      assertFalse(xbmImagingParameters0.isStrict());
      assertNotNull(xbmImagingParameters0);
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(dataInputStream0, "");
      assertEquals("", byteSourceInputStream0.getFileName());
      assertNotNull(byteSourceInputStream0);
      
      // Undeclared exception!
      try { 
        xbmImageParser0.getImageInfo((ByteSource) byteSourceInputStream0, xbmImagingParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XbmImageParser xbmImageParser0 = new XbmImageParser();
      assertEquals("X BitMap", xbmImageParser0.getName());
      assertEquals("xbm", xbmImageParser0.getDefaultExtension());
      assertNotNull(xbmImageParser0);
      
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2773), 65482);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(2774, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArray0.length);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 65482);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(2774, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      assertEquals(1, byteArray0.length);
      
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(pushbackInputStream0, "/]^");
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(2774, byteArrayInputStream0.available());
      assertEquals("/]^", byteSourceInputStream0.getFileName());
      assertNotNull(byteSourceInputStream0);
      assertEquals(1, byteArray0.length);
      
      XbmImagingParameters xbmImagingParameters0 = xbmImageParser0.getDefaultParameters();
      assertEquals("X BitMap", xbmImageParser0.getName());
      assertEquals("xbm", xbmImageParser0.getDefaultExtension());
      assertFalse(xbmImagingParameters0.isStrict());
      assertNull(xbmImagingParameters0.getFileName());
      assertNotNull(xbmImagingParameters0);
      
      // Undeclared exception!
      try { 
        xbmImageParser0.getImageInfo((ByteSource) byteSourceInputStream0, xbmImagingParameters0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XbmImageParser xbmImageParser0 = new XbmImageParser();
      assertEquals("xbm", xbmImageParser0.getDefaultExtension());
      assertEquals("X BitMap", xbmImageParser0.getName());
      assertNotNull(xbmImageParser0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(pipedInputStream0, "%^<T'");
      assertEquals(0, pipedInputStream0.available());
      assertEquals("%^<T'", byteSourceInputStream0.getFileName());
      assertNotNull(byteSourceInputStream0);
      
      XbmImagingParameters xbmImagingParameters0 = xbmImageParser0.getDefaultParameters();
      assertEquals("xbm", xbmImageParser0.getDefaultExtension());
      assertEquals("X BitMap", xbmImageParser0.getName());
      assertFalse(xbmImagingParameters0.isStrict());
      assertNull(xbmImagingParameters0.getFileName());
      assertNotNull(xbmImagingParameters0);
      
      try { 
        xbmImageParser0.getImageInfo((ByteSource) byteSourceInputStream0, xbmImagingParameters0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XbmImageParser xbmImageParser0 = new XbmImageParser();
      assertEquals("X BitMap", xbmImageParser0.getName());
      assertEquals("xbm", xbmImageParser0.getDefaultExtension());
      assertNotNull(xbmImageParser0);
      
      XbmImagingParameters xbmImagingParameters0 = new XbmImagingParameters();
      assertNull(xbmImagingParameters0.getFileName());
      assertFalse(xbmImagingParameters0.isStrict());
      assertNotNull(xbmImagingParameters0);
      
      MockFile mockFile0 = new MockFile("_?Ki)Uo");
      assertNotNull(mockFile0);
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("_?Ki)Uo", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals("_?Ki)Uo", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, byteSourceFile0.getLength());
      assertEquals("_?Ki)Uo", byteSourceFile0.getFileName());
      assertNotNull(byteSourceFile0);
      
      try { 
        xbmImageParser0.getImageInfo((ByteSource) byteSourceFile0, xbmImagingParameters0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XbmImageParser xbmImageParser0 = new XbmImageParser();
      assertEquals("xbm", xbmImageParser0.getDefaultExtension());
      assertEquals("X BitMap", xbmImageParser0.getName());
      assertNotNull(xbmImageParser0);
      
      XbmImagingParameters xbmImagingParameters0 = xbmImageParser0.getDefaultParameters();
      assertEquals("xbm", xbmImageParser0.getDefaultExtension());
      assertEquals("X BitMap", xbmImageParser0.getName());
      assertNull(xbmImagingParameters0.getFileName());
      assertFalse(xbmImagingParameters0.isStrict());
      assertNotNull(xbmImagingParameters0);
      
      // Undeclared exception!
      try { 
        xbmImageParser0.getBufferedImage((ByteSource) null, xbmImagingParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.xbm.XbmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XbmImageParser xbmImageParser0 = new XbmImageParser();
      assertEquals("xbm", xbmImageParser0.getDefaultExtension());
      assertEquals("X BitMap", xbmImageParser0.getName());
      assertNotNull(xbmImageParser0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(pipedInputStream0, "%^<T'");
      assertEquals(0, pipedInputStream0.available());
      assertEquals("%^<T'", byteSourceInputStream0.getFileName());
      assertNotNull(byteSourceInputStream0);
      
      XbmImagingParameters xbmImagingParameters0 = xbmImageParser0.getDefaultParameters();
      assertEquals("xbm", xbmImageParser0.getDefaultExtension());
      assertEquals("X BitMap", xbmImageParser0.getName());
      assertFalse(xbmImagingParameters0.isStrict());
      assertNull(xbmImagingParameters0.getFileName());
      assertNotNull(xbmImagingParameters0);
      
      try { 
        xbmImageParser0.getBufferedImage((ByteSource) byteSourceInputStream0, xbmImagingParameters0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XbmImageParser xbmImageParser0 = new XbmImageParser();
      assertEquals("X BitMap", xbmImageParser0.getName());
      assertEquals("xbm", xbmImageParser0.getDefaultExtension());
      assertNotNull(xbmImageParser0);
      
      XbmImagingParameters xbmImagingParameters0 = xbmImageParser0.getDefaultParameters();
      assertEquals("X BitMap", xbmImageParser0.getName());
      assertEquals("xbm", xbmImageParser0.getDefaultExtension());
      assertFalse(xbmImagingParameters0.isStrict());
      assertNull(xbmImagingParameters0.getFileName());
      assertNotNull(xbmImagingParameters0);
      
      MockFile mockFile0 = new MockFile("org.apache.commons.imaging.formats.xbm.XbmImageParser$XbmHeader", "org.apache.commons.imaging.formats.xbm.XbmImageParser$XbmHeader");
      assertNotNull(mockFile0);
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("org.apache.commons.imaging.formats.xbm.XbmImageParser$XbmHeader", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/Users/atakanakar/Desktop/imaging_experiment_2/org.apache.commons.imaging.formats.xbm.XbmImageParser$XbmHeader/org.apache.commons.imaging.formats.xbm.XbmImageParser$XbmHeader", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals("/Users/atakanakar/Desktop/imaging_experiment_2/org.apache.commons.imaging.formats.xbm.XbmImageParser$XbmHeader", mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertEquals("org.apache.commons.imaging.formats.xbm.XbmImageParser$XbmHeader", byteSourceFile0.getFileName());
      assertEquals(0L, byteSourceFile0.getLength());
      assertNotNull(byteSourceFile0);
      
      try { 
        xbmImageParser0.getBufferedImage((ByteSource) byteSourceFile0, xbmImagingParameters0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1L, byteSourceArray0.getLength());
      assertNull(byteSourceArray0.getFileName());
      assertNotNull(byteSourceArray0);
      assertEquals(1, byteArray0.length);
      
      XbmImageParser xbmImageParser0 = new XbmImageParser();
      assertEquals("X BitMap", xbmImageParser0.getName());
      assertEquals("xbm", xbmImageParser0.getDefaultExtension());
      assertNotNull(xbmImageParser0);
      
      try { 
        xbmImageParser0.dumpImageFile((PrintWriter) null, (ByteSource) byteSourceArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // width not found
         //
         verifyException("org.apache.commons.imaging.formats.xbm.XbmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XbmImageParser xbmImageParser0 = new XbmImageParser();
      assertEquals("X BitMap", xbmImageParser0.getName());
      assertEquals("xbm", xbmImageParser0.getDefaultExtension());
      assertNotNull(xbmImageParser0);
      
      // Undeclared exception!
      try { 
        xbmImageParser0.dumpImageFile((PrintWriter) null, (ByteSource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.xbm.XbmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XbmImageParser xbmImageParser0 = new XbmImageParser();
      assertEquals("X BitMap", xbmImageParser0.getName());
      assertEquals("xbm", xbmImageParser0.getDefaultExtension());
      assertNotNull(xbmImageParser0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      assertNotNull(mockPrintWriter0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(bufferedInputStream0, "ICO");
      assertEquals("ICO", byteSourceInputStream0.getFileName());
      assertNotNull(byteSourceInputStream0);
      
      try { 
        xbmImageParser0.dumpImageFile((PrintWriter) mockPrintWriter0, (ByteSource) byteSourceInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XbmImageParser xbmImageParser0 = new XbmImageParser();
      assertEquals("X BitMap", xbmImageParser0.getName());
      assertEquals("xbm", xbmImageParser0.getDefaultExtension());
      assertNotNull(xbmImageParser0);
      
      MockFile mockFile0 = new MockFile("Q]'<dUXW");
      assertNotNull(mockFile0);
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      assertTrue(mockFile0.isFile());
      assertEquals("Q]'<dUXW", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Q]'<dUXW", mockFile0.toString());
      assertEquals("Q]'<dUXW", byteSourceFile0.getFileName());
      assertEquals(0L, byteSourceFile0.getLength());
      assertNotNull(byteSourceFile0);
      
      try { 
        xbmImageParser0.dumpImageFile((PrintWriter) null, (ByteSource) byteSourceFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      assertNotNull(simpleBufferedImageFactory0);
      
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getGrayscaleBufferedImage(855, 855, false);
      assertEquals(855, bufferedImage0.getHeight());
      assertEquals(855, bufferedImage0.getTileWidth());
      assertEquals(855, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(10, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(855, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertNotNull(bufferedImage0);
      
      XbmImageParser xbmImageParser0 = new XbmImageParser();
      assertEquals("xbm", xbmImageParser0.getDefaultExtension());
      assertEquals("X BitMap", xbmImageParser0.getName());
      assertNotNull(xbmImageParser0);
      
      PrintStream printStream0 = DebugGraphics.logStream();
      assertNotNull(printStream0);
      
      // Undeclared exception!
      xbmImageParser0.writeImage(bufferedImage0, (OutputStream) printStream0, (XbmImagingParameters) null);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      assertNotNull(simpleBufferedImageFactory0);
      
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getGrayscaleBufferedImage(32, 236, true);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(236, bufferedImage0.getTileHeight());
      assertEquals(236, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(32, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(32, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertNotNull(bufferedImage0);
      
      XbmImageParser xbmImageParser0 = new XbmImageParser();
      assertEquals("X BitMap", xbmImageParser0.getName());
      assertEquals("xbm", xbmImageParser0.getDefaultExtension());
      assertNotNull(xbmImageParser0);
      
      xbmImageParser0.writeImage(bufferedImage0, (OutputStream) byteArrayOutputStream0, (XbmImagingParameters) null);
      assertEquals(5087, byteArrayOutputStream0.size());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(236, bufferedImage0.getTileHeight());
      assertEquals(236, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(32, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(32, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals("X BitMap", xbmImageParser0.getName());
      assertEquals("xbm", xbmImageParser0.getDefaultExtension());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XbmImageParser xbmImageParser0 = new XbmImageParser();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getColorBufferedImage(1781, 4846, true);
      HashMap<RenderingHints.Key, Object> hashMap0 = new HashMap<RenderingHints.Key, Object>();
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      RescaleOp rescaleOp0 = new RescaleOp(0.0F, 4846, renderingHints0);
      BufferedImage bufferedImage1 = rescaleOp0.filter(bufferedImage0, bufferedImage0);
      // Undeclared exception!
      xbmImageParser0.writeImage(bufferedImage1, (OutputStream) byteArrayOutputStream0, (XbmImagingParameters) null);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XbmImagingParameters xbmImagingParameters0 = new XbmImagingParameters();
      XbmImageParser xbmImageParser0 = new XbmImageParser();
      byte[] byteArray0 = xbmImageParser0.getICCProfileBytes((ByteSource) null, xbmImagingParameters0);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XbmImageParser xbmImageParser0 = new XbmImageParser();
      String[] stringArray0 = xbmImageParser0.getAcceptedExtensions();
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XbmImageParser xbmImageParser0 = new XbmImageParser();
      ImageFormat[] imageFormatArray0 = xbmImageParser0.getAcceptedTypes();
      assertEquals(1, imageFormatArray0.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XbmImageParser xbmImageParser0 = new XbmImageParser();
      byte[] byteArray0 = new byte[9];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("X BitMap", byteArray0);
      XbmImagingParameters xbmImagingParameters0 = xbmImageParser0.getDefaultParameters();
      ImageMetadata imageMetadata0 = xbmImageParser0.getMetadata((ByteSource) byteSourceArray0, xbmImagingParameters0);
      assertNull(imageMetadata0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      XbmImageParser xbmImageParser0 = new XbmImageParser();
      XbmImagingParameters xbmImagingParameters0 = new XbmImagingParameters();
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        xbmImageParser0.getImageSize((ByteSource) byteSourceArray0, xbmImagingParameters0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // width not found
         //
         verifyException("org.apache.commons.imaging.formats.xbm.XbmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XbmImageParser xbmImageParser0 = new XbmImageParser();
      String string0 = xbmImageParser0.getName();
      assertEquals("X BitMap", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XbmImageParser xbmImageParser0 = new XbmImageParser();
      String string0 = xbmImageParser0.getDefaultExtension();
      assertEquals("xbm", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      XbmImagingParameters xbmImagingParameters0 = new XbmImagingParameters();
      XbmImageParser xbmImageParser0 = new XbmImageParser();
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        xbmImageParser0.getBufferedImage((ByteSource) byteSourceArray0, xbmImagingParameters0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // width not found
         //
         verifyException("org.apache.commons.imaging.formats.xbm.XbmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      XbmImagingParameters xbmImagingParameters0 = new XbmImagingParameters();
      XbmImageParser xbmImageParser0 = new XbmImageParser();
      try { 
        xbmImageParser0.getImageInfo((ByteSource) byteSourceArray0, xbmImagingParameters0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // width not found
         //
         verifyException("org.apache.commons.imaging.formats.xbm.XbmImageParser", e);
      }
  }
}
