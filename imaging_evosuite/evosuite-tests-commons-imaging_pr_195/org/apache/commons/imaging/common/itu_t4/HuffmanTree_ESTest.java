/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 19:47:51 GMT 2025
 */

package org.apache.commons.imaging.common.itu_t4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.commons.imaging.common.itu_t4.BitInputStreamFlexible;
import org.apache.commons.imaging.common.itu_t4.HuffmanTree;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class HuffmanTree_ESTest extends HuffmanTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HuffmanTree<Object> huffmanTree0 = new HuffmanTree<Object>();
      huffmanTree0.insert(")r9nl$", ")r9nl$");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 871);
      BitInputStreamFlexible bitInputStreamFlexible0 = new BitInputStreamFlexible(bufferedInputStream0);
      try { 
        huffmanTree0.decode(bitInputStreamFlexible0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error reading stream for huffman tree
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.HuffmanTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HuffmanTree<SequenceInputStream> huffmanTree0 = new HuffmanTree<SequenceInputStream>();
      byte[] byteArray0 = new byte[6];
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      huffmanTree0.insert("", sequenceInputStream0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BitInputStreamFlexible bitInputStreamFlexible0 = new BitInputStreamFlexible(byteArrayInputStream0);
      huffmanTree0.decode(bitInputStreamFlexible0);
      assertEquals(0L, bitInputStreamFlexible0.getBytesRead());
      assertEquals(6, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HuffmanTree<Object> huffmanTree0 = new HuffmanTree<Object>();
      // Undeclared exception!
      try { 
        huffmanTree0.insert((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.HuffmanTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HuffmanTree<Integer> huffmanTree0 = new HuffmanTree<Integer>();
      Integer integer0 = new Integer(417);
      huffmanTree0.insert("(RI%", integer0);
      // Undeclared exception!
      try { 
        huffmanTree0.decode((BitInputStreamFlexible) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.HuffmanTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HuffmanTree<Integer> huffmanTree0 = new HuffmanTree<Integer>();
      // Undeclared exception!
      try { 
        huffmanTree0.decode((BitInputStreamFlexible) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HuffmanTree<Integer> huffmanTree0 = new HuffmanTree<Integer>();
      huffmanTree0.insert("(RI%", (Integer) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-9);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      BitInputStreamFlexible bitInputStreamFlexible0 = new BitInputStreamFlexible(bufferedInputStream0);
      try { 
        huffmanTree0.decode(bitInputStreamFlexible0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid bit pattern
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.HuffmanTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HuffmanTree<Integer> huffmanTree0 = new HuffmanTree<Integer>();
      Integer integer0 = new Integer(417);
      huffmanTree0.insert("(RI%", integer0);
      try { 
        huffmanTree0.insert("(RI%", integer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't add child to a leaf
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.HuffmanTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      HuffmanTree<Object> huffmanTree0 = new HuffmanTree<Object>();
      // Undeclared exception!
      huffmanTree0.insert("5|if$xpmR0 WbK", "5|if$xpmR0 WbK");
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      HuffmanTree<Integer> huffmanTree0 = new HuffmanTree<Integer>();
      huffmanTree0.insert("(RI%", (Integer) null);
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      BitInputStreamFlexible bitInputStreamFlexible0 = new BitInputStreamFlexible(bufferedInputStream0);
      try { 
        huffmanTree0.decode(bitInputStreamFlexible0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid bit pattern
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.HuffmanTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      HuffmanTree<Object> huffmanTree0 = new HuffmanTree<Object>();
      huffmanTree0.insert("", "");
      try { 
        huffmanTree0.insert("", "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't add child to a leaf
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.HuffmanTree", e);
      }
  }
}
