/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 04:24:34 GMT 2025
 */

package org.apache.commons.imaging;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.PrintWriter;
import java.nio.charset.Charset;
import java.time.ZoneId;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.imaging.ImageFormat;
import org.apache.commons.imaging.ImageFormats;
import org.apache.commons.imaging.ImageInfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ImageInfo_ESTest extends ImageInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      String string0 = imageInfo_CompressionAlgorithm0.toString();
      assertEquals("CCITT Group 3 1-Dimensional Modified Huffman run-length encoding.", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCbCr;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 74, linkedList0, imageFormats0, "%s", 74, "%s", 1, 1, 0.0F, (-15), 0.0F, 1154, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.usesPalette();
      assertEquals(1, imageInfo0.getPhysicalHeightDpi());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(74, imageInfo0.getBitsPerPixel());
      assertTrue(boolean0);
      assertEquals(1154, imageInfo0.getWidth());
      assertTrue(imageInfo0.isProgressive());
      assertEquals(74, imageInfo0.getHeight());
      assertEquals(1, imageInfo0.getNumberOfImages());
      assertEquals(0.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals((-15), imageInfo0.getPhysicalWidthDpi());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.PAM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("X&3,", 0, list0, imageFormats0, "X&3,", 0, " *daNy<[gzd!K", 0, (-1353), (-3009.99F), (-1353), (-1353), 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isTransparent();
      assertEquals(0, imageInfo0.getWidth());
      assertEquals(0, imageInfo0.getNumberOfImages());
      assertEquals(" *daNy<[gzd!K", imageInfo0.getMimeType());
      assertEquals("X&3,", imageInfo0.getFormatName());
      assertEquals("X&3,", imageInfo0.getFormatDetails());
      assertEquals((-1353.0F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals((-1353), imageInfo0.getPhysicalWidthDpi());
      assertEquals((-3009.99F), imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertTrue(imageInfo0.isProgressive());
      assertTrue(imageInfo0.usesPalette());
      assertEquals(0, imageInfo0.getHeight());
      assertTrue(boolean0);
      assertEquals((-1353), imageInfo0.getPhysicalHeightDpi());
      assertEquals(0, imageInfo0.getBitsPerPixel());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.ICO;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCC;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("$aJ0Fr]AF|T", (-915), linkedList0, imageFormats0, "$aJ0Fr]AF|T", 185, "$aJ0Fr]AF|T", (-915), 185, (-1.0F), 3462, 524.0F, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isProgressive();
      assertEquals(524.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(185, imageInfo0.getPhysicalHeightDpi());
      assertTrue(imageInfo0.isTransparent());
      assertEquals((-915), imageInfo0.getBitsPerPixel());
      assertEquals(185, imageInfo0.getHeight());
      assertTrue(boolean0);
      assertEquals(0, imageInfo0.getWidth());
      assertEquals((-915), imageInfo0.getNumberOfImages());
      assertEquals((-1.0F), imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertTrue(imageInfo0.usesPalette());
      assertEquals(3462, imageInfo0.getPhysicalWidthDpi());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("Fd", 0, linkedList0, imageFormats0, "Fd", 0, "@97N&A|;>^", 0, 0, (-859.58F), 0, (-405.0F), 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      assertEquals("Fd", imageInfo0.getFormatName());
      assertEquals(0, imageInfo0.getNumberOfImages());
      assertEquals("Fd", imageInfo0.getFormatDetails());
      assertEquals((-405.0F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
      assertEquals(0, int0);
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
      assertEquals(0, imageInfo0.getBitsPerPixel());
      assertEquals((-859.58F), imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertTrue(imageInfo0.isProgressive());
      assertTrue(imageInfo0.usesPalette());
      assertEquals("@97N&A|;>^", imageInfo0.getMimeType());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(0, imageInfo0.getHeight());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-2699), linkedList0, imageFormats0, (String) null, (-937), (String) null, (-2699), 1757, (-2699), 1757, (-937), (-937), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      assertEquals(1757, imageInfo0.getPhysicalWidthDpi());
      assertTrue(imageInfo0.isTransparent());
      assertEquals((-937), imageInfo0.getHeight());
      assertEquals((-2699.0F), imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals((-2699), imageInfo0.getBitsPerPixel());
      assertTrue(imageInfo0.usesPalette());
      assertEquals((-937.0F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals((-2699), imageInfo0.getNumberOfImages());
      assertEquals(1757, imageInfo0.getPhysicalHeightDpi());
      assertEquals((-937), int0);
      assertFalse(imageInfo0.isProgressive());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCbCr;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 74, linkedList0, imageFormats0, "%s", 74, "%s", 1, 1, 0.0F, (-15), 0.0F, 1154, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      assertEquals(74, imageInfo0.getBitsPerPixel());
      assertTrue(imageInfo0.usesPalette());
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(imageInfo0.isTransparent());
      assertEquals(1154, imageInfo0.getWidth());
      assertEquals(1, imageInfo0.getPhysicalHeightDpi());
      assertTrue(imageInfo0.isProgressive());
      assertEquals((-15), imageInfo0.getPhysicalWidthDpi());
      assertEquals(74, imageInfo0.getHeight());
      assertEquals(1, imageInfo0.getNumberOfImages());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.valueOf("UNKNOWN");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.PNM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCC;
      ImageInfo imageInfo0 = new ImageInfo("UNKNOWN", 190, list0, imageFormats0, "UNKNOWN", 0, "UNKNOWN", 0, 0, (-1271.761F), (-3134), (-3134), (-3103), false, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
      assertEquals(190, imageInfo0.getBitsPerPixel());
      assertEquals((-3134.0F), float0, 0.01F);
      assertFalse(imageInfo0.isProgressive());
      assertEquals(0, imageInfo0.getHeight());
      assertEquals((-3103), imageInfo0.getWidth());
      assertTrue(imageInfo0.usesPalette());
      assertEquals((-3134), imageInfo0.getPhysicalWidthDpi());
      assertFalse(imageInfo0.isTransparent());
      assertEquals((-1271.761F), imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(0, imageInfo0.getNumberOfImages());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCC;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("Qraw^!", 295, linkedList0, imageFormats0, "`y^a88KI$a", (-306), "`y^a88KI$a", (-40), 0, 0.0F, 0, 0.0F, 0, false, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      assertEquals(0.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals((-40), imageInfo0.getNumberOfImages());
      assertEquals(0, imageInfo0.getWidth());
      assertEquals(295, imageInfo0.getBitsPerPixel());
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
      assertEquals("`y^a88KI$a", imageInfo0.getMimeType());
      assertEquals((-306), imageInfo0.getHeight());
      assertEquals("`y^a88KI$a", imageInfo0.getFormatName());
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertTrue(imageInfo0.usesPalette());
      assertEquals(0, int0);
      assertFalse(imageInfo0.isTransparent());
      assertFalse(imageInfo0.isProgressive());
      assertEquals("Qraw^!", imageInfo0.getFormatDetails());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo("", 0, list0, imageFormats0, "", 107, "", 0, 0, 2692.0F, (-1477), 0.0F, (-241), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      assertEquals(107, imageInfo0.getHeight());
      assertEquals(0, imageInfo0.getNumberOfImages());
      assertTrue(imageInfo0.isProgressive());
      assertEquals(0, imageInfo0.getBitsPerPixel());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(0.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals((-1477), int0);
      assertEquals((-241), imageInfo0.getWidth());
      assertTrue(imageInfo0.usesPalette());
      assertEquals(2692.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.UNKNOWN;
      ImageInfo imageInfo0 = new ImageInfo("ahT?FV,*3Xb", 74, linkedList0, imageFormats0, "wscxN", 4, (String) null, 74, (-1005), 4, (-37), 0.0F, (-541), false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertEquals((-541), imageInfo0.getWidth());
      assertEquals((-1005), imageInfo0.getPhysicalHeightDpi());
      assertEquals(74, imageInfo0.getBitsPerPixel());
      assertEquals(4.0F, float0, 0.01F);
      assertEquals((-37), imageInfo0.getPhysicalWidthDpi());
      assertEquals(0.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(74, imageInfo0.getNumberOfImages());
      assertEquals("wscxN", imageInfo0.getFormatName());
      assertFalse(imageInfo0.usesPalette());
      assertFalse(imageInfo0.isProgressive());
      assertEquals("ahT?FV,*3Xb", imageInfo0.getFormatDetails());
      assertEquals(4, imageInfo0.getHeight());
      assertTrue(imageInfo0.isTransparent());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCbCr;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo("Photoshop", (-937), linkedList0, imageFormats0, "The FileFilter must not be null", 8, "", (-937), 8, (-937), (-937), 8, (-937), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertEquals((-937.0F), float0, 0.01F);
      assertEquals("", imageInfo0.getMimeType());
      assertEquals((-937), imageInfo0.getBitsPerPixel());
      assertEquals("The FileFilter must not be null", imageInfo0.getFormatName());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(8, imageInfo0.getHeight());
      assertEquals((-937), imageInfo0.getWidth());
      assertTrue(imageInfo0.isProgressive());
      assertEquals((-937), imageInfo0.getPhysicalWidthDpi());
      assertEquals((-937), imageInfo0.getNumberOfImages());
      assertTrue(imageInfo0.usesPalette());
      assertEquals(8.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals("Photoshop", imageInfo0.getFormatDetails());
      assertEquals(8, imageInfo0.getPhysicalHeightDpi());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCbCr;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("The suffix must not be null", 74, linkedList0, imageFormats0, "RLE", (-1952), "Bits Per Pixel: ", 2936, 0, 876.8729F, 0, 876.8729F, 528, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      assertEquals((-1952), imageInfo0.getHeight());
      assertEquals(528, imageInfo0.getWidth());
      assertEquals(876.8729F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals("The suffix must not be null", imageInfo0.getFormatDetails());
      assertTrue(imageInfo0.isProgressive());
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
      assertEquals(2936, imageInfo0.getNumberOfImages());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(0, int0);
      assertEquals(74, imageInfo0.getBitsPerPixel());
      assertEquals(876.8729F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals("Bits Per Pixel: ", imageInfo0.getMimeType());
      assertEquals("RLE", imageInfo0.getFormatName());
      assertFalse(imageInfo0.usesPalette());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("![(=Fs%V^", 0, linkedList0, imageFormats0, "![(=Fs%V^", 0, "![(=Fs%V^", 0, (-923), (-923), 8, (-1239.0679F), (-923), true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      assertFalse(imageInfo0.usesPalette());
      assertEquals((-923), imageInfo0.getWidth());
      assertEquals(0, imageInfo0.getBitsPerPixel());
      assertTrue(imageInfo0.isProgressive());
      assertEquals((-1239.0679F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(8, imageInfo0.getPhysicalWidthDpi());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(0, imageInfo0.getHeight());
      assertEquals((-923.0F), imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals((-923), int0);
      assertEquals(0, imageInfo0.getNumberOfImages());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageFormats imageFormats0 = ImageFormats.TGA;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo(": 6uW/}", 0, list0, imageFormats0, ": 6uW/}", 0, "", 0, 0, 0, 0, 0, 6104, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      assertEquals(0, imageInfo0.getHeight());
      assertEquals("", imageInfo0.getMimeType());
      assertTrue(imageInfo0.usesPalette());
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(": 6uW/}", imageInfo0.getFormatDetails());
      assertEquals(6104, imageInfo0.getWidth());
      assertEquals(0, int0);
      assertEquals(0, imageInfo0.getBitsPerPixel());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(": 6uW/}", imageInfo0.getFormatName());
      assertTrue(imageInfo0.isProgressive());
      assertEquals(0.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("", 0, linkedList0, imageFormats0, "'#)bZiq]&ix?", 2696, "Color Type: ", 2397, (-2052), 2608.686F, (-923), 0, (-835), true, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      assertEquals(2397, int0);
      assertEquals("Color Type: ", imageInfo0.getMimeType());
      assertEquals(2696, imageInfo0.getHeight());
      assertEquals((-2052), imageInfo0.getPhysicalHeightDpi());
      assertEquals(2608.686F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals("'#)bZiq]&ix?", imageInfo0.getFormatName());
      assertEquals((-835), imageInfo0.getWidth());
      assertEquals(0.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals("", imageInfo0.getFormatDetails());
      assertFalse(imageInfo0.isTransparent());
      assertEquals(0, imageInfo0.getBitsPerPixel());
      assertFalse(imageInfo0.usesPalette());
      assertEquals((-923), imageInfo0.getPhysicalWidthDpi());
      assertTrue(imageInfo0.isProgressive());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCbCr;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 74, linkedList0, imageFormats0, "Rj7,'l!3}da>", 74, (String) null, 74, 74, 74, 74, 74, (-937), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      assertEquals(74.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertFalse(imageInfo0.isProgressive());
      assertFalse(imageInfo0.usesPalette());
      assertEquals(74, imageInfo0.getPhysicalWidthDpi());
      assertNull(string0);
      assertEquals(74.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(74, imageInfo0.getBitsPerPixel());
      assertEquals(74, imageInfo0.getPhysicalHeightDpi());
      assertEquals(74, imageInfo0.getHeight());
      assertEquals(74, imageInfo0.getNumberOfImages());
      assertEquals((-937), imageInfo0.getWidth());
      assertFalse(imageInfo0.isTransparent());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.TIFF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("_&a9~@;S:u;1l1n|$", 16, linkedList0, imageFormats0, "_&a9~@;S:u;1l1n|$", 16, "YCCK", 16, (-1419), 3720.819F, 1988, 16, (-1419), false, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      assertFalse(imageInfo0.isTransparent());
      assertEquals(1988, imageInfo0.getPhysicalWidthDpi());
      assertEquals(16, imageInfo0.getBitsPerPixel());
      assertEquals((-1419), imageInfo0.getPhysicalHeightDpi());
      assertFalse(imageInfo0.isProgressive());
      assertEquals("YCCK", string0);
      assertEquals(16.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertTrue(imageInfo0.usesPalette());
      assertEquals(16, imageInfo0.getNumberOfImages());
      assertEquals(3720.819F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals("_&a9~@;S:u;1l1n|$", imageInfo0.getFormatDetails());
      assertEquals((-1419), imageInfo0.getWidth());
      assertEquals(16, imageInfo0.getHeight());
      assertEquals("_&a9~@;S:u;1l1n|$", imageInfo0.getFormatName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("![(=Fs%V^", 0, linkedList0, imageFormats0, "![(=Fs%V^", 0, "![(=Fs%V^", 0, (-923), (-923), 8, (-1239.0679F), (-923), true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      assertEquals((-923), imageInfo0.getPhysicalHeightDpi());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(8, imageInfo0.getPhysicalWidthDpi());
      assertEquals((-923.0F), imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(0, imageInfo0.getBitsPerPixel());
      assertEquals((-923), imageInfo0.getWidth());
      assertEquals(0, imageInfo0.getNumberOfImages());
      assertTrue(imageInfo0.isProgressive());
      assertEquals((-1239.0679F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(0, int0);
      assertFalse(imageInfo0.usesPalette());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.ICO;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCbCr;
      ImageInfo imageInfo0 = new ImageInfo("CCITT Group 3 1-Dimensional Modified Huffman run-length encoding.", (-1816), linkedList0, imageFormats0, "", (-1816), "", 947, 947, 947, 169, 947, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      assertEquals((-1816), imageInfo0.getBitsPerPixel());
      assertEquals(947.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertTrue(imageInfo0.isTransparent());
      assertEquals(947, imageInfo0.getNumberOfImages());
      assertEquals(0, imageInfo0.getWidth());
      assertEquals((-1816), int0);
      assertEquals(169, imageInfo0.getPhysicalWidthDpi());
      assertTrue(imageInfo0.usesPalette());
      assertEquals(947.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals("", imageInfo0.getMimeType());
      assertEquals(947, imageInfo0.getPhysicalHeightDpi());
      assertTrue(imageInfo0.isProgressive());
      assertEquals("", imageInfo0.getFormatName());
      assertEquals("CCITT Group 3 1-Dimensional Modified Huffman run-length encoding.", imageInfo0.getFormatDetails());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-2699), linkedList0, imageFormats0, (String) null, (-937), (String) null, (-2699), 1757, (-2699), 1757, (-937), (-937), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getFormatName();
      assertEquals(1757, imageInfo0.getPhysicalHeightDpi());
      assertEquals((-937), imageInfo0.getWidth());
      assertEquals((-2699), imageInfo0.getNumberOfImages());
      assertEquals((-2699), imageInfo0.getBitsPerPixel());
      assertEquals((-937), imageInfo0.getHeight());
      assertTrue(imageInfo0.usesPalette());
      assertEquals((-937.0F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertTrue(imageInfo0.isTransparent());
      assertEquals((-2699.0F), imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(1757, imageInfo0.getPhysicalWidthDpi());
      assertFalse(imageInfo0.isProgressive());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("Rj7,'l!3}da>", (-1099), linkedList0, imageFormats0, "", (-1099), (String) null, 2615, 1, (-1218.0037F), (-937), 74, (-1799), true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      assertNotNull(string0);
      assertFalse(imageInfo0.usesPalette());
      assertEquals((-1099), imageInfo0.getBitsPerPixel());
      assertEquals("", string0);
      assertTrue(imageInfo0.isProgressive());
      assertEquals(2615, imageInfo0.getNumberOfImages());
      assertEquals((-1099), imageInfo0.getHeight());
      assertTrue(imageInfo0.isTransparent());
      assertEquals((-1218.0037F), imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals("Rj7,'l!3}da>", imageInfo0.getFormatDetails());
      assertEquals((-1799), imageInfo0.getWidth());
      assertEquals(74.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(1, imageInfo0.getPhysicalHeightDpi());
      assertEquals((-937), imageInfo0.getPhysicalWidthDpi());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCbCr;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 74, linkedList0, imageFormats0, "Rj7,'l!3}da>", 74, (String) null, 74, 74, 74, 74, 74, (-937), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      assertFalse(imageInfo0.usesPalette());
      assertEquals((-937), imageInfo0.getWidth());
      assertEquals(74, imageInfo0.getHeight());
      assertFalse(imageInfo0.isProgressive());
      assertFalse(imageInfo0.isTransparent());
      assertEquals(74, imageInfo0.getPhysicalHeightDpi());
      assertEquals(74, imageInfo0.getNumberOfImages());
      assertNull(string0);
      assertEquals(74, imageInfo0.getBitsPerPixel());
      assertEquals(74, imageInfo0.getPhysicalWidthDpi());
      assertEquals(74.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(74.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageFormats imageFormats0 = ImageFormats.TGA;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo(": 6uW/}", 0, list0, imageFormats0, "Format Name: ", 0, "", (-1), (-1), (-1909.0F), 0, (-1909.0F), 6104, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
      assertEquals((-1909.0F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(6104, imageInfo0.getWidth());
      assertEquals((-1909.0F), imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(": 6uW/}", string0);
      assertTrue(imageInfo0.isProgressive());
      assertTrue(imageInfo0.usesPalette());
      assertEquals(0, imageInfo0.getHeight());
      assertEquals(0, imageInfo0.getBitsPerPixel());
      assertEquals((-1), imageInfo0.getPhysicalHeightDpi());
      assertEquals((-1), imageInfo0.getNumberOfImages());
      assertFalse(imageInfo0.isTransparent());
      assertEquals("Format Name: ", imageInfo0.getFormatName());
      assertEquals("", imageInfo0.getMimeType());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCC;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("Qraw^!", 295, linkedList0, imageFormats0, "`y^a88KI$a", (-306), "`y^a88KI$a", (-40), 0, 0.0F, 0, 0.0F, 0, false, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getFormat();
      assertEquals((-306), imageInfo0.getHeight());
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
      assertEquals("`y^a88KI$a", imageInfo0.getMimeType());
      assertEquals(295, imageInfo0.getBitsPerPixel());
      assertEquals(0.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertTrue(imageInfo0.usesPalette());
      assertEquals("Qraw^!", imageInfo0.getFormatDetails());
      assertEquals((-40), imageInfo0.getNumberOfImages());
      assertFalse(imageInfo0.isProgressive());
      assertFalse(imageInfo0.isTransparent());
      assertEquals(0, imageInfo0.getWidth());
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
      assertEquals("`y^a88KI$a", imageInfo0.getFormatName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      LinkedList<String> linkedList0 = new LinkedList<String>(linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.PAM;
      linkedList0.push("");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo("BiaP2KAXP]I0P`nN", (-1), linkedList0, imageFormats0, "y,,=Dpt", 0, "]2 ~S:V~~3ttsC'T}", 0, 0, 0, 0, (-1), 0, false, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getComments();
      assertEquals((-1.0F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertFalse(imageInfo0.isProgressive());
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
      assertEquals("y,,=Dpt", imageInfo0.getFormatName());
      assertEquals(0, imageInfo0.getWidth());
      assertEquals((-1), imageInfo0.getBitsPerPixel());
      assertEquals(0, imageInfo0.getNumberOfImages());
      assertEquals("BiaP2KAXP]I0P`nN", imageInfo0.getFormatDetails());
      assertFalse(imageInfo0.isTransparent());
      assertEquals(0, imageInfo0.getHeight());
      assertTrue(imageInfo0.usesPalette());
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
      assertEquals("]2 ~S:V~~3ttsC'T}", imageInfo0.getMimeType());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCbCr;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, "G6:Zlg4Bb{", 13, "G6:Zlg4Bb{", 1424, 0, 1424, 1424, 0, 13, false, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertEquals(13, imageInfo0.getWidth());
      assertTrue(imageInfo0.usesPalette());
      assertEquals(0.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(1424, imageInfo0.getPhysicalWidthDpi());
      assertFalse(imageInfo0.isTransparent());
      assertEquals(1424, imageInfo0.getNumberOfImages());
      assertEquals(13, imageInfo0.getHeight());
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
      assertFalse(imageInfo0.isProgressive());
      assertEquals(1424.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("VV", (-492), list0, (ImageFormat) null, "Grayscale", (-492), "org.apache.commons.io.filefilter.WildcardFileFilter", (-492), 3, 3, 4, 4, 3, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertEquals((-492), int0);
      assertEquals(3, imageInfo0.getWidth());
      assertEquals(3, imageInfo0.getPhysicalHeightDpi());
      assertEquals((-492), imageInfo0.getNumberOfImages());
      assertEquals(4, imageInfo0.getPhysicalWidthDpi());
      assertEquals((-492), imageInfo0.getHeight());
      assertEquals(4.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals("org.apache.commons.io.filefilter.WildcardFileFilter", imageInfo0.getMimeType());
      assertEquals("VV", imageInfo0.getFormatDetails());
      assertEquals(3.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals("Grayscale", imageInfo0.getFormatName());
      assertFalse(imageInfo0.isProgressive());
      assertFalse(imageInfo0.usesPalette());
      assertFalse(imageInfo0.isTransparent());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.ICNS;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCC;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-2309), linkedList0, imageFormats0, (String) null, (-2309), (String) null, (-2309), (-2309), (-2309), (-2309), (-2309), (-2309), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      // Undeclared exception!
      try { 
        imageInfo0.toString((PrintWriter) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.ICO;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("UNKNOWN", 2917, (List<String>) null, imageFormats0, "UNKNOWN", 2917, "UNKNOWN", 2917, 2917, 2917, (-7), (-7), 2917, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      // Undeclared exception!
      try { 
        imageInfo0.getComments();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      linkedList0.add("Qraw^!");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCC;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("Qraw^!", 295, linkedList0, imageFormats0, "`y^a88KI$a", (-306), "`y^a88KI$a", (-40), 0, 0.0F, 0, 0.0F, 0, false, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      imageInfo0.toString((PrintWriter) mockPrintWriter0, "\"9|");
      assertEquals("Format Details: Qraw^!\nBits Per Pixel: 295\nComments: 1\n\t0: 'Qraw^!'\nFormat: PBM\nFormat Name: `y^a88KI$a\nCompression Algorithm: Adaptive RLE\nHeight: -306\nMimeType: `y^a88KI$a\nNumber Of Images: -40\nPhysical Height Dpi: 0\nPhysical Height Inch: 0.0\nPhysical Width Dpi: 0\nPhysical Width Inch: 0.0\nWidth: 0\nIs Progressive: false\nIs Transparent: false\nColor Type: YCC\nUses Palette: true\n", byteArrayOutputStream0.toString());
      assertEquals((-306), imageInfo0.getHeight());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCC;
      String string0 = imageInfo_ColorType0.toString();
      assertEquals("YCC", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 3552, linkedList0, (ImageFormat) null, "b?gek%", (-991), "", 94, (-991), 1838.3192F, (-991), (-991), 5, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.toString();
      assertEquals("Image Data: Error", string0);
      assertEquals(1838.3192F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(3552, imageInfo0.getBitsPerPixel());
      assertEquals(94, imageInfo0.getNumberOfImages());
      assertEquals("b?gek%", imageInfo0.getFormatName());
      assertEquals((-991), imageInfo0.getPhysicalHeightDpi());
      assertEquals("", imageInfo0.getMimeType());
      assertEquals((-991), imageInfo0.getHeight());
      assertFalse(imageInfo0.isTransparent());
      assertEquals(5, imageInfo0.getWidth());
      assertEquals((-991), imageInfo0.getPhysicalWidthDpi());
      assertEquals((-991.0F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertTrue(imageInfo0.isProgressive());
      assertTrue(imageInfo0.usesPalette());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.ICNS;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCC;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-2282), linkedList0, imageFormats0, (String) null, (-2282), (String) null, (-2282), (-2282), (-2282), (-2282), (-2282), (-2282), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.dump();
      assertEquals((-2282), imageInfo0.getPhysicalHeightDpi());
      assertEquals((-2282), imageInfo0.getBitsPerPixel());
      assertEquals((-2282), imageInfo0.getHeight());
      assertEquals((-2282.0F), imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals((-2282), imageInfo0.getWidth());
      assertFalse(imageInfo0.isTransparent());
      assertFalse(imageInfo0.usesPalette());
      assertEquals((-2282.0F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals((-2282), imageInfo0.getPhysicalWidthDpi());
      assertEquals((-2282), imageInfo0.getNumberOfImages());
      assertFalse(imageInfo0.isProgressive());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PNM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCbCr;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 74, linkedList0, imageFormats0, (String) null, 74, (String) null, 74, 74, 74, 74, 74, 74, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.usesPalette();
      assertFalse(boolean0);
      assertFalse(imageInfo0.isProgressive());
      assertEquals(74, imageInfo0.getWidth());
      assertEquals(74.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(74, imageInfo0.getNumberOfImages());
      assertFalse(imageInfo0.isTransparent());
      assertEquals(74, imageInfo0.getPhysicalHeightDpi());
      assertEquals(74, imageInfo0.getBitsPerPixel());
      assertEquals(74, imageInfo0.getPhysicalWidthDpi());
      assertEquals(74, imageInfo0.getHeight());
      assertEquals(74.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PNM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCbCr;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 74, linkedList0, imageFormats0, (String) null, 74, (String) null, 74, 74, 74, 74, 74, 74, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isProgressive();
      assertEquals(74.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(74, imageInfo0.getHeight());
      assertFalse(boolean0);
      assertFalse(imageInfo0.isTransparent());
      assertEquals(74, imageInfo0.getWidth());
      assertEquals(74, imageInfo0.getBitsPerPixel());
      assertEquals(74, imageInfo0.getPhysicalHeightDpi());
      assertEquals(74.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(74, imageInfo0.getPhysicalWidthDpi());
      assertEquals(74, imageInfo0.getNumberOfImages());
      assertFalse(imageInfo0.usesPalette());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCC;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("Qraw^!", 295, linkedList0, imageFormats0, "`y^a88KI$a", (-306), "`y^a88KI$a", (-40), 0, 0.0F, 0, 0.0F, 0, false, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isTransparent();
      assertEquals((-40), imageInfo0.getNumberOfImages());
      assertFalse(boolean0);
      assertEquals(0.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals((-306), imageInfo0.getHeight());
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
      assertEquals(295, imageInfo0.getBitsPerPixel());
      assertEquals("`y^a88KI$a", imageInfo0.getMimeType());
      assertFalse(imageInfo0.isProgressive());
      assertEquals("Qraw^!", imageInfo0.getFormatDetails());
      assertTrue(imageInfo0.usesPalette());
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
      assertEquals(0, imageInfo0.getWidth());
      assertEquals("`y^a88KI$a", imageInfo0.getFormatName());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCC;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 64, linkedList0, imageFormats0, (String) null, 64, (String) null, 64, 64, 64, (-1), (-4747.831F), (-1), true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      assertEquals((-1), imageInfo0.getWidth());
      assertTrue(imageInfo0.usesPalette());
      assertEquals(64.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(64, int0);
      assertEquals((-1), imageInfo0.getPhysicalWidthDpi());
      assertEquals(64, imageInfo0.getBitsPerPixel());
      assertFalse(imageInfo0.isTransparent());
      assertTrue(imageInfo0.isProgressive());
      assertEquals((-4747.831F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(64, imageInfo0.getNumberOfImages());
      assertEquals(64, imageInfo0.getPhysicalHeightDpi());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCC;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 64, linkedList0, imageFormats0, (String) null, 64, (String) null, 64, 64, 64, (-1), (-4747.831F), (-1), true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertEquals((-1), imageInfo0.getPhysicalWidthDpi());
      assertEquals((-1), imageInfo0.getWidth());
      assertFalse(imageInfo0.isTransparent());
      assertEquals(64, imageInfo0.getNumberOfImages());
      assertEquals(64, imageInfo0.getPhysicalHeightDpi());
      assertEquals(64.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertTrue(imageInfo0.usesPalette());
      assertTrue(imageInfo0.isProgressive());
      assertEquals(64, imageInfo0.getHeight());
      assertEquals(64, int0);
      assertEquals((-4747.831F), imageInfo0.getPhysicalWidthInch(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCbCr;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 7, list0, imageFormats0, "<rFa$_b7FzQi,Gk", 7, "", 11, 3, 0.0F, 958, 7, 11, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertEquals(7, imageInfo0.getHeight());
      assertTrue(imageInfo0.usesPalette());
      assertTrue(imageInfo0.isProgressive());
      assertTrue(imageInfo0.isTransparent());
      assertEquals("<rFa$_b7FzQi,Gk", imageInfo0.getFormatName());
      assertEquals("", imageInfo0.getFormatDetails());
      assertEquals(7, imageInfo0.getBitsPerPixel());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(3, imageInfo0.getPhysicalHeightDpi());
      assertEquals(11, imageInfo0.getWidth());
      assertEquals(7.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals("", imageInfo0.getMimeType());
      assertEquals(11, imageInfo0.getNumberOfImages());
      assertEquals(958, imageInfo0.getPhysicalWidthDpi());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageFormats imageFormats0 = ImageFormats.PAM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCbCr;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 0, list0, imageFormats0, "", 3, "", (-919), 3, (-919), (-74), 0, 3, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getFormatDetails();
      assertTrue(imageInfo0.isProgressive());
      assertEquals(0, imageInfo0.getBitsPerPixel());
      assertEquals(3, imageInfo0.getWidth());
      assertEquals((-919.0F), imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals((-74), imageInfo0.getPhysicalWidthDpi());
      assertTrue(imageInfo0.usesPalette());
      assertEquals(3, imageInfo0.getPhysicalHeightDpi());
      assertEquals((-919), imageInfo0.getNumberOfImages());
      assertEquals(3, imageInfo0.getHeight());
      assertEquals(0.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertTrue(imageInfo0.isTransparent());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 3552, linkedList0, (ImageFormat) null, "b?gek%", (-991), "", 94, (-991), 1838.3192F, (-991), (-991), 5, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      assertTrue(imageInfo0.usesPalette());
      assertTrue(imageInfo0.isProgressive());
      assertEquals((-991.0F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals((-991), imageInfo0.getPhysicalWidthDpi());
      assertEquals(94, imageInfo0.getNumberOfImages());
      assertEquals(5, int0);
      assertEquals("b?gek%", imageInfo0.getFormatName());
      assertEquals("", imageInfo0.getMimeType());
      assertEquals(1838.3192F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals((-991), imageInfo0.getHeight());
      assertEquals((-991), imageInfo0.getPhysicalHeightDpi());
      assertEquals(3552, imageInfo0.getBitsPerPixel());
      assertFalse(imageInfo0.isTransparent());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCbCr;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-919), linkedList0, imageFormats0, "The suffix must not be null", (-919), (String) null, (-919), 74, (-919), (-1021), (-1021), (-1952), true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      assertTrue(imageInfo0.isProgressive());
      assertEquals((-1021), imageInfo0.getPhysicalWidthDpi());
      assertEquals((-919), imageInfo0.getHeight());
      assertEquals((-919.0F), imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(74, int0);
      assertEquals((-919), imageInfo0.getBitsPerPixel());
      assertEquals((-1952), imageInfo0.getWidth());
      assertTrue(imageInfo0.isTransparent());
      assertEquals((-1021.0F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals((-919), imageInfo0.getNumberOfImages());
      assertFalse(imageInfo0.usesPalette());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PNM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCbCr;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 74, linkedList0, imageFormats0, (String) null, 74, (String) null, 74, 74, 74, 74, 74, 74, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getColorType();
      assertEquals(74, imageInfo0.getNumberOfImages());
      assertEquals(74, imageInfo0.getBitsPerPixel());
      assertEquals(74, imageInfo0.getPhysicalWidthDpi());
      assertEquals(74, imageInfo0.getWidth());
      assertEquals(74.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(74, imageInfo0.getHeight());
      assertEquals(74.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertFalse(imageInfo0.usesPalette());
      assertFalse(imageInfo0.isProgressive());
      assertFalse(imageInfo0.isTransparent());
      assertEquals(74, imageInfo0.getPhysicalHeightDpi());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCbCr;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 74, linkedList0, imageFormats0, (String) null, 74, (String) null, 74, 74, 74, 74, 74, 74, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getCompressionAlgorithm();
      assertFalse(imageInfo0.isTransparent());
      assertEquals(74, imageInfo0.getHeight());
      assertEquals(74, imageInfo0.getBitsPerPixel());
      assertEquals(74.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(74, imageInfo0.getWidth());
      assertFalse(imageInfo0.isProgressive());
      assertEquals(74, imageInfo0.getPhysicalWidthDpi());
      assertEquals(74.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(74, imageInfo0.getNumberOfImages());
      assertFalse(imageInfo0.usesPalette());
      assertEquals(74, imageInfo0.getPhysicalHeightDpi());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 3552, linkedList0, (ImageFormat) null, "b?gek%", (-991), "", 94, (-991), 1838.3192F, (-991), (-991), 5, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getFormat();
      assertEquals("", imageInfo0.getMimeType());
      assertEquals(5, imageInfo0.getWidth());
      assertEquals((-991), imageInfo0.getHeight());
      assertEquals(94, imageInfo0.getNumberOfImages());
      assertFalse(imageInfo0.isTransparent());
      assertEquals((-991), imageInfo0.getPhysicalHeightDpi());
      assertEquals(3552, imageInfo0.getBitsPerPixel());
      assertEquals("b?gek%", imageInfo0.getFormatName());
      assertEquals(1838.3192F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertTrue(imageInfo0.usesPalette());
      assertTrue(imageInfo0.isProgressive());
      assertEquals((-991), imageInfo0.getPhysicalWidthDpi());
      assertEquals((-991.0F), imageInfo0.getPhysicalWidthInch(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageFormats imageFormats0 = ImageFormats.TGA;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo(": 6uW/}", 0, list0, imageFormats0, "Format Name: ", 0, "", (-1), (-1), (-1909.0F), 0, (-1909.0F), 6104, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      assertEquals(6104, imageInfo0.getWidth());
      assertTrue(imageInfo0.isProgressive());
      assertEquals((-1909.0F), imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
      assertEquals((-1909.0F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertTrue(imageInfo0.usesPalette());
      assertEquals("", string0);
      assertEquals(": 6uW/}", imageInfo0.getFormatDetails());
      assertEquals(0, imageInfo0.getHeight());
      assertEquals((-1), imageInfo0.getNumberOfImages());
      assertFalse(imageInfo0.isTransparent());
      assertEquals(0, imageInfo0.getBitsPerPixel());
      assertEquals("Format Name: ", imageInfo0.getFormatName());
      assertEquals((-1), imageInfo0.getPhysicalHeightDpi());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 3552, linkedList0, (ImageFormat) null, "b?gek%", (-991), "", 94, (-991), 1838.3192F, (-991), (-991), 5, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getComments();
      assertTrue(imageInfo0.isProgressive());
      assertEquals(3552, imageInfo0.getBitsPerPixel());
      assertEquals(1838.3192F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertTrue(imageInfo0.usesPalette());
      assertEquals((-991.0F), imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals((-991), imageInfo0.getPhysicalWidthDpi());
      assertFalse(imageInfo0.isTransparent());
      assertEquals(94, imageInfo0.getNumberOfImages());
      assertEquals(5, imageInfo0.getWidth());
      assertEquals((-991), imageInfo0.getHeight());
      assertEquals("", imageInfo0.getMimeType());
      assertEquals("b?gek%", imageInfo0.getFormatName());
      assertEquals((-991), imageInfo0.getPhysicalHeightDpi());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("Rj7,'l!3}da>", 74, linkedList0, imageFormats0, "Rj7,'l!3}da>", 950, "Rj7,'l!3}da>", (-400), 1, 1.0F, 1, 1.0F, 35, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      assertFalse(imageInfo0.isProgressive());
      assertEquals((-400), int0);
      assertEquals(1.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(1.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(1, imageInfo0.getPhysicalHeightDpi());
      assertEquals(950, imageInfo0.getHeight());
      assertEquals(74, imageInfo0.getBitsPerPixel());
      assertEquals(1, imageInfo0.getPhysicalWidthDpi());
      assertFalse(imageInfo0.usesPalette());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(35, imageInfo0.getWidth());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-919), linkedList0, imageFormats0, (String) null, 74, (String) null, (-919), 10, 0.0F, 10, 0.0F, 10, false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      assertEquals((-919), imageInfo0.getNumberOfImages());
      assertTrue(imageInfo0.isTransparent());
      assertFalse(imageInfo0.isProgressive());
      assertTrue(imageInfo0.usesPalette());
      assertEquals(0.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(10, imageInfo0.getPhysicalHeightDpi());
      assertEquals((-919), imageInfo0.getBitsPerPixel());
      assertEquals(10, imageInfo0.getWidth());
      assertEquals(10, int0);
      assertEquals(0.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertEquals(74, imageInfo0.getHeight());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCbCr;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo(",)9B2~|l%{GClQ_", (-39), linkedList0, imageFormats0, (String) null, 60, ",)9B2~|l%{GClQ_", 60, (-919), 60, (-39), 60, (-919), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      assertEquals((-39), imageInfo0.getPhysicalWidthDpi());
      assertEquals((-919), imageInfo0.getWidth());
      assertFalse(imageInfo0.isProgressive());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(60, imageInfo0.getNumberOfImages());
      assertEquals((-919), imageInfo0.getPhysicalHeightDpi());
      assertEquals(60.0F, float0, 0.01F);
      assertTrue(imageInfo0.usesPalette());
      assertEquals(60.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(60, imageInfo0.getHeight());
      assertEquals((-39), imageInfo0.getBitsPerPixel());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("Rj7,'l!3}da>", 74, linkedList0, imageFormats0, "Rj7,'l!3}da>", 950, "Rj7,'l!3}da>", (-400), 1, 1.0F, 1, 1.0F, 35, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getFormatName();
      assertFalse(imageInfo0.usesPalette());
      assertEquals((-400), imageInfo0.getNumberOfImages());
      assertEquals(35, imageInfo0.getWidth());
      assertEquals(1, imageInfo0.getPhysicalHeightDpi());
      assertEquals(1.0F, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals(74, imageInfo0.getBitsPerPixel());
      assertTrue(imageInfo0.isTransparent());
      assertEquals(1.0F, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertFalse(imageInfo0.isProgressive());
      assertEquals(1, imageInfo0.getPhysicalWidthDpi());
      assertEquals(950, imageInfo0.getHeight());
  }
}
