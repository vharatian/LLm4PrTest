/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 04:54:09 GMT 2025
 */

package org.apache.commons.imaging.formats.jpeg.xmp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.net.URI;
import org.apache.commons.imaging.common.bytesource.ByteSource;
import org.apache.commons.imaging.common.bytesource.ByteSourceArray;
import org.apache.commons.imaging.common.bytesource.ByteSourceFile;
import org.apache.commons.imaging.common.bytesource.ByteSourceInputStream;
import org.apache.commons.imaging.formats.jpeg.xmp.JpegXmpRewriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class JpegXmpRewriter_ESTest extends JpegXmpRewriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JpegXmpRewriter jpegXmpRewriter0 = new JpegXmpRewriter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[3];
      try { 
        jpegXmpRewriter0.updateXmpXml(byteArray0, (OutputStream) byteArrayOutputStream0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Valid JPEG File: doesn't begin with 0xffd8
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JpegXmpRewriter jpegXmpRewriter0 = new JpegXmpRewriter();
      byte[] byteArray0 = new byte[0];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        jpegXmpRewriter0.updateXmpXml((ByteSource) byteSourceArray0, (OutputStream) null, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected EOF.
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JpegXmpRewriter jpegXmpRewriter0 = new JpegXmpRewriter();
      // Undeclared exception!
      try { 
        jpegXmpRewriter0.updateXmpXml((ByteSource) null, (OutputStream) null, "2e");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.jpeg.JpegUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JpegXmpRewriter jpegXmpRewriter0 = new JpegXmpRewriter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(pipedInputStream0, "7W@D7!@fMZ]p");
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      try { 
        jpegXmpRewriter0.updateXmpXml((ByteSource) byteSourceInputStream0, (OutputStream) mockFileOutputStream0, "org.apache.commons.imaging.formats.jpeg.xmp.JpegXmpRewriter");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JpegXmpRewriter jpegXmpRewriter0 = new JpegXmpRewriter();
      MockFile mockFile0 = new MockFile("");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        jpegXmpRewriter0.updateXmpXml((ByteSource) byteSourceFile0, (OutputStream) pipedOutputStream0, "v2h3aMz>?,3");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JpegXmpRewriter jpegXmpRewriter0 = new JpegXmpRewriter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        jpegXmpRewriter0.updateXmpXml((InputStream) byteArrayInputStream0, (OutputStream) byteArrayOutputStream0, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Valid JPEG File: doesn't begin with 0xffd8
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JpegXmpRewriter jpegXmpRewriter0 = new JpegXmpRewriter();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-724), 650);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        jpegXmpRewriter0.updateXmpXml((InputStream) byteArrayInputStream0, (OutputStream) pipedOutputStream0, ";AvG-:");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JpegXmpRewriter jpegXmpRewriter0 = new JpegXmpRewriter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        jpegXmpRewriter0.updateXmpXml((File) null, (OutputStream) byteArrayOutputStream0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.bytesource.ByteSourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JpegXmpRewriter jpegXmpRewriter0 = new JpegXmpRewriter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]KZ+dxe3xncXc");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("]KZ+dxe3xncXc");
      try { 
        jpegXmpRewriter0.updateXmpXml((File) mockFile0, (OutputStream) mockFileOutputStream0, "]KZ+dxe3xncXc");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JpegXmpRewriter jpegXmpRewriter0 = new JpegXmpRewriter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockFile mockFile0 = new MockFile("[foat[]:#", "[foat[]:#");
      try { 
        jpegXmpRewriter0.updateXmpXml((File) mockFile0, (OutputStream) pipedOutputStream0, "[foat[]:#");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JpegXmpRewriter jpegXmpRewriter0 = new JpegXmpRewriter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[0];
      try { 
        jpegXmpRewriter0.removeXmpXml(byteArray0, (OutputStream) byteArrayOutputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected EOF.
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JpegXmpRewriter jpegXmpRewriter0 = new JpegXmpRewriter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[1];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        jpegXmpRewriter0.removeXmpXml((ByteSource) byteSourceArray0, (OutputStream) byteArrayOutputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Valid JPEG File: doesn't begin with 0xffd8
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JpegXmpRewriter jpegXmpRewriter0 = new JpegXmpRewriter();
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream((InputStream) null, "Dx#Af/=kUAN(D");
      try { 
        jpegXmpRewriter0.removeXmpXml((ByteSource) byteSourceInputStream0, (OutputStream) byteArrayOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JpegXmpRewriter jpegXmpRewriter0 = new JpegXmpRewriter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockFile mockFile0 = new MockFile("[foat[]:#", "[foat[]:#");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      try { 
        jpegXmpRewriter0.removeXmpXml((ByteSource) byteSourceFile0, (OutputStream) pipedOutputStream0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JpegXmpRewriter jpegXmpRewriter0 = new JpegXmpRewriter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 65535, 65535);
      try { 
        jpegXmpRewriter0.removeXmpXml((InputStream) byteArrayInputStream0, (OutputStream) byteArrayOutputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected EOF.
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JpegXmpRewriter jpegXmpRewriter0 = new JpegXmpRewriter();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-693), 650);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 650);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("M)", false);
      // Undeclared exception!
      try { 
        jpegXmpRewriter0.removeXmpXml((InputStream) bufferedInputStream0, (OutputStream) mockFileOutputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JpegXmpRewriter jpegXmpRewriter0 = new JpegXmpRewriter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        jpegXmpRewriter0.removeXmpXml((File) null, (OutputStream) byteArrayOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.bytesource.ByteSourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JpegXmpRewriter jpegXmpRewriter0 = new JpegXmpRewriter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockFile mockFile0 = new MockFile("[float[]: ", "[float[]: ");
      try { 
        jpegXmpRewriter0.removeXmpXml((File) mockFile0, (OutputStream) pipedOutputStream0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JpegXmpRewriter jpegXmpRewriter0 = new JpegXmpRewriter();
      // Undeclared exception!
      try { 
        jpegXmpRewriter0.removeXmpXml((ByteSource) null, (OutputStream) byteArrayOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.jpeg.JpegUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JpegXmpRewriter jpegXmpRewriter0 = new JpegXmpRewriter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        jpegXmpRewriter0.updateXmpXml((byte[]) null, (OutputStream) byteArrayOutputStream0, "org.apache.commons.imaging.formats.jpeg.xmp.JpegXmpRewriter");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JpegXmpRewriter jpegXmpRewriter0 = new JpegXmpRewriter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        jpegXmpRewriter0.updateXmpXml((InputStream) pipedInputStream0, (OutputStream) byteArrayOutputStream0, "N?)q#pTFsf8");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JpegXmpRewriter jpegXmpRewriter0 = new JpegXmpRewriter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      try { 
        jpegXmpRewriter0.removeXmpXml((InputStream) null, (OutputStream) byteArrayOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JpegXmpRewriter jpegXmpRewriter0 = new JpegXmpRewriter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]KZ+dxe3xncXc");
      MockFile mockFile0 = new MockFile("]KZ+dxe3xncXc");
      try { 
        jpegXmpRewriter0.updateXmpXml((File) mockFile0, (OutputStream) mockFileOutputStream0, "]KZ+dxe3xncXc");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected EOF.
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JpegXmpRewriter jpegXmpRewriter0 = new JpegXmpRewriter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      File file0 = MockFile.createTempFile("[float[]: ", "[float[]: ");
      try { 
        jpegXmpRewriter0.removeXmpXml(file0, (OutputStream) pipedOutputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected EOF.
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JpegXmpRewriter jpegXmpRewriter0 = new JpegXmpRewriter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        jpegXmpRewriter0.removeXmpXml((byte[]) null, (OutputStream) byteArrayOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }
}
