/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 20:13:04 GMT 2025
 */

package org.apache.commons.imaging.palette;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.image.BufferedImage;
import org.apache.commons.imaging.palette.Palette;
import org.apache.commons.imaging.palette.PaletteFactory;
import org.apache.commons.imaging.palette.SimplePalette;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PaletteFactory_ESTest extends PaletteFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      int[] intArray0 = new int[8];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = 3;
      intArray0[4] = 3;
      intArray0[5] = 3;
      intArray0[6] = 3;
      intArray0[7] = (-2338);
      paletteFactory0.countTrasparentColors(intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      int[] intArray0 = new int[2];
      intArray0[0] = 3;
      paletteFactory0.countTrasparentColors(intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(1, 293, 1);
      PaletteFactory paletteFactory0 = new PaletteFactory();
      paletteFactory0.makeExactRgbPaletteSimple(bufferedImage0, 1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      BufferedImage bufferedImage0 = new BufferedImage(21, 293, 1);
      // Undeclared exception!
      paletteFactory0.makeQuantizedRgbPalette(bufferedImage0, 430);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      // Undeclared exception!
      try { 
        paletteFactory0.makeQuantizedRgbPalette((BufferedImage) null, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.palette.PaletteFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      BufferedImage bufferedImage0 = new BufferedImage(4405, 3, 3);
      // Undeclared exception!
      paletteFactory0.makeExactRgbPaletteSimple(bufferedImage0, 4405);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      // Undeclared exception!
      try { 
        paletteFactory0.makeExactRgbPaletteSimple((BufferedImage) null, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      BufferedImage bufferedImage0 = new BufferedImage(4104, 4104, 3);
      // Undeclared exception!
      paletteFactory0.isGrayscale(bufferedImage0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      // Undeclared exception!
      try { 
        paletteFactory0.isGrayscale((BufferedImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.palette.PaletteFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      BufferedImage bufferedImage0 = new BufferedImage(3, 2419, 3);
      paletteFactory0.hasTransparency(bufferedImage0, (-2924));
      // Undeclared exception!
      paletteFactory0.hasTransparency(bufferedImage0, (-31));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      // Undeclared exception!
      try { 
        paletteFactory0.hasTransparency((BufferedImage) null, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      // Undeclared exception!
      try { 
        paletteFactory0.hasTransparency((BufferedImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      // Undeclared exception!
      try { 
        paletteFactory0.countTrasparentColors((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.palette.PaletteFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      BufferedImage bufferedImage0 = new BufferedImage(6, 2091, 6);
      // Undeclared exception!
      paletteFactory0.countTransparentColors(bufferedImage0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      // Undeclared exception!
      try { 
        paletteFactory0.countTransparentColors((BufferedImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.palette.PaletteFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      boolean boolean0 = paletteFactory0.hasTransparency(bufferedImage0, 2521);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(1, 293, 1);
      PaletteFactory paletteFactory0 = new PaletteFactory();
      boolean boolean0 = paletteFactory0.hasTransparency(bufferedImage0, 15);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(1, 293, 1);
      PaletteFactory paletteFactory0 = new PaletteFactory();
      int int0 = paletteFactory0.countTransparentColors(bufferedImage0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      int int0 = paletteFactory0.countTransparentColors(bufferedImage0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      int[] intArray0 = new int[0];
      int int0 = paletteFactory0.countTrasparentColors(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      int[] intArray0 = new int[9];
      intArray0[6] = 3;
      int int0 = paletteFactory0.countTrasparentColors(intArray0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      int[] intArray0 = new int[2];
      intArray0[1] = (-1832);
      int int0 = paletteFactory0.countTrasparentColors(intArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      BufferedImage bufferedImage0 = new BufferedImage(2, 3, 2);
      boolean boolean0 = paletteFactory0.hasTransparency(bufferedImage0, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(1, 293, 1);
      PaletteFactory paletteFactory0 = new PaletteFactory();
      boolean boolean0 = paletteFactory0.hasTransparency(bufferedImage0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(1, 293, 1);
      PaletteFactory paletteFactory0 = new PaletteFactory();
      boolean boolean0 = paletteFactory0.isGrayscale(bufferedImage0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      SimplePalette simplePalette0 = paletteFactory0.makeExactRgbPaletteSimple(bufferedImage0, (-1));
      assertNull(simplePalette0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      // Undeclared exception!
      try { 
        paletteFactory0.makeQuantizedRgbaPalette((BufferedImage) null, false, 11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.palette.MedianCutQuantizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(1, 293, 1);
      PaletteFactory paletteFactory0 = new PaletteFactory();
      Palette palette0 = paletteFactory0.makeQuantizedRgbaPalette(bufferedImage0, true, 3);
      assertEquals(1, palette0.length());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      // Undeclared exception!
      paletteFactory0.makeQuantizedRgbPalette(bufferedImage0, (-2943));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PaletteFactory paletteFactory0 = new PaletteFactory();
      BufferedImage bufferedImage0 = new BufferedImage(2, 3, 2);
      boolean boolean0 = paletteFactory0.hasTransparency(bufferedImage0);
      assertTrue(boolean0);
  }
}
