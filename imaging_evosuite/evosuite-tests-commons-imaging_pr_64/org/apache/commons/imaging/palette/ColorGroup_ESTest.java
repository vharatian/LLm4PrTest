/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 01:47:28 GMT 2025
 */

package org.apache.commons.imaging.palette;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.imaging.palette.ColorCount;
import org.apache.commons.imaging.palette.ColorGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ColorGroup_ESTest extends ColorGroup_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(53);
      ColorCount colorCount1 = new ColorCount(0);
      linkedList0.add(colorCount0);
      linkedList0.add(colorCount1);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, true);
      String string0 = colorGroup0.toString();
      assertEquals("{ColorGroup. minRed: 0, maxRed: 0, minGreen: 0, maxGreen: 0, minBlue: 0, maxBlue: 35, minAlpha: 0, maxAlpha: 0, maxDiff: 35, diffTotal: 53}", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(1);
      linkedList0.add(colorCount0);
      ColorCount colorCount1 = new ColorCount((-1));
      linkedList0.add(colorCount1);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, false);
      String string0 = colorGroup0.toString();
      assertEquals("{ColorGroup. minRed: 0, maxRed: ff, minGreen: 0, maxGreen: ff, minBlue: 1, maxBlue: ff, minAlpha: 0, maxAlpha: ff, maxDiff: ff, diffTotal: 1019}", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount((-1509));
      linkedList0.offerLast(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, true);
      String string0 = colorGroup0.toString();
      assertEquals("{ColorGroup. minRed: ff, maxRed: ff, minGreen: fa, maxGreen: fa, minBlue: 1b, maxBlue: 1b, minAlpha: ff, maxAlpha: ff, maxDiff: 0, diffTotal: 0}", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(4);
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, false);
      colorGroup0.maxRed = 0;
      colorGroup0.maxRed = 4;
      String string0 = colorGroup0.toString();
      assertEquals("{ColorGroup. minRed: 0, maxRed: 4, minGreen: 0, maxGreen: 0, minBlue: 4, maxBlue: 4, minAlpha: 0, maxAlpha: 0, maxDiff: 0, diffTotal: 0}", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(1363);
      linkedList0.add(colorCount0);
      ColorCount colorCount1 = new ColorCount(83);
      linkedList0.add(colorCount1);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, false);
      String string0 = colorGroup0.toString();
      assertEquals("{ColorGroup. minRed: 0, maxRed: 0, minGreen: 0, maxGreen: 5, minBlue: 53, maxBlue: 53, minAlpha: 0, maxAlpha: 0, maxDiff: 5, diffTotal: 5}", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(2147483645);
      colorCount0.count = 2147483645;
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, false);
      int int0 = colorGroup0.getMedianValue();
      assertEquals(16843009, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(Integer.MIN_VALUE);
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, true);
      colorCount0.count = 40;
      linkedList0.add(colorCount0);
      int int0 = colorGroup0.getMedianValue();
      assertEquals((-16777216), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(3810);
      linkedList0.offerLast(colorCount0);
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, true);
      colorCount0.count = 3810;
      int int0 = colorGroup0.getMedianValue();
      assertEquals((-16773406), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount((-1509));
      linkedList0.offerLast(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, false);
      boolean boolean0 = colorGroup0.contains((-1509));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(1363);
      linkedList0.add(colorCount0);
      ColorCount colorCount1 = new ColorCount(83);
      linkedList0.add(colorCount1);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, false);
      boolean boolean0 = colorGroup0.contains(1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(1);
      linkedList0.add(colorCount0);
      ColorCount colorCount1 = new ColorCount((-1));
      linkedList0.add(colorCount1);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, false);
      boolean boolean0 = colorGroup0.contains(1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(Integer.MAX_VALUE);
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, false);
      boolean boolean0 = colorGroup0.contains(1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(4);
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, false);
      colorGroup0.maxRed = 0;
      colorGroup0.maxRed = 4;
      boolean boolean0 = colorGroup0.contains(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(Integer.MAX_VALUE);
      linkedList0.push(colorCount0);
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, true);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(3810);
      linkedList0.offerLast(colorCount0);
      linkedList0.add(colorCount0);
      colorCount0.count = 3810;
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, false);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount((-1066));
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, false);
      linkedList0.remove();
      List<ColorCount> list0 = colorGroup0.getColorCounts();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(0);
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, false);
      linkedList0.add((ColorCount) null);
      // Undeclared exception!
      try { 
        colorGroup0.getMedianValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.palette.ColorGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ColorGroup colorGroup0 = null;
      try {
        colorGroup0 = new ColorGroup((List<ColorCount>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(1363);
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, false);
      int int0 = colorGroup0.getMedianValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(Integer.MIN_VALUE);
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, true);
      boolean boolean0 = colorGroup0.contains(Integer.MIN_VALUE);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(Integer.MIN_VALUE);
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, true);
      boolean boolean0 = colorGroup0.contains(1719);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(Integer.MIN_VALUE);
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, true);
      boolean boolean0 = colorGroup0.contains((-761));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount((-1509));
      linkedList0.offerLast(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, true);
      boolean boolean0 = colorGroup0.contains(345);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(0);
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, false);
      boolean boolean0 = colorGroup0.contains(2147483645);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(Integer.MIN_VALUE);
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, true);
      boolean boolean0 = colorGroup0.contains(24);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(1363);
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, false);
      boolean boolean0 = colorGroup0.contains(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorGroup colorGroup0 = null;
      try {
        colorGroup0 = new ColorGroup(linkedList0, false);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // empty color_group
         //
         verifyException("org.apache.commons.imaging.palette.ColorGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(Integer.MIN_VALUE);
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, true);
      List<ColorCount> list0 = colorGroup0.getColorCounts();
      assertTrue(list0.contains(colorCount0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(Integer.MIN_VALUE);
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, true);
      String string0 = colorGroup0.toString();
      assertEquals("{ColorGroup. minRed: 0, maxRed: 0, minGreen: 0, maxGreen: 0, minBlue: 0, maxBlue: 0, minAlpha: 80, maxAlpha: 80, maxDiff: 0, diffTotal: 0}", string0);
  }
}
