/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 19:06:29 GMT 2025
 */

package org.apache.commons.imaging.formats.webp.chunks;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import org.apache.commons.imaging.formats.webp.chunks.WebPChunkAnim;
import org.apache.commons.imaging.formats.webp.chunks.WebPChunkIccp;
import org.apache.commons.imaging.formats.webp.chunks.WebPChunkVp8;
import org.apache.commons.imaging.formats.webp.chunks.WebPChunkVp8x;
import org.apache.commons.imaging.formats.webp.chunks.WebPChunkXml;
import org.apache.commons.imaging.formats.webp.chunks.WebPChunkXyzw;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class WebPChunk_ESTest extends WebPChunk_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      WebPChunkVp8x webPChunkVp8x0 = null;
      try {
        webPChunkVp8x0 = new WebPChunkVp8x(0, 0, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Chunk size must match bytes length
         //
         verifyException("org.apache.commons.imaging.formats.webp.chunks.WebPChunk", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      WebPChunkIccp webPChunkIccp0 = new WebPChunkIccp((-2938), 0, byteArray0);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      webPChunkIccp0.dump(mockPrintWriter0, 16);
      assertEquals("Chunk \uFFFD\uFFFD\uFFFD\uFFFD at offset 16, length 8\n, payload size 0\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      WebPChunkXyzw webPChunkXyzw0 = new WebPChunkXyzw(1708, 0, byteArray0);
      int int0 = webPChunkXyzw0.getType();
      assertEquals(8, webPChunkXyzw0.getChunkSize());
      assertEquals(0, webPChunkXyzw0.getPayloadSize());
      assertEquals(1708, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      WebPChunkXml webPChunkXml0 = new WebPChunkXml((-3978), 0, byteArray0);
      int int0 = webPChunkXml0.getType();
      assertEquals(0, webPChunkXml0.getPayloadSize());
      assertEquals((-3978), int0);
      assertEquals(8, webPChunkXml0.getChunkSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      WebPChunkIccp webPChunkIccp0 = new WebPChunkIccp(24, 4, byteArray0);
      int int0 = webPChunkIccp0.getPayloadSize();
      assertEquals(4, int0);
      assertEquals(12, webPChunkIccp0.getChunkSize());
      assertEquals(24, webPChunkIccp0.getType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      WebPChunkAnim webPChunkAnim0 = new WebPChunkAnim(8, 8, byteArray0);
      webPChunkAnim0.getBytes();
      assertEquals(16, webPChunkAnim0.getChunkSize());
      assertEquals(8, webPChunkAnim0.getPayloadSize());
      assertEquals(8, webPChunkAnim0.getType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      WebPChunkAnim webPChunkAnim0 = new WebPChunkAnim(0, 0, byteArray0);
      int int0 = webPChunkAnim0.getChunkSize();
      assertEquals(8, int0);
      assertEquals(0, webPChunkAnim0.getType());
      assertEquals(0, webPChunkAnim0.getPayloadSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      WebPChunkAnim webPChunkAnim0 = new WebPChunkAnim(0, 0, byteArray0);
      int int0 = webPChunkAnim0.getPayloadSize();
      assertEquals(0, webPChunkAnim0.getType());
      assertEquals(0, int0);
      assertEquals(8, webPChunkAnim0.getChunkSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      WebPChunkAnim webPChunkAnim0 = new WebPChunkAnim(0, 0, byteArray0);
      String string0 = webPChunkAnim0.getTypeDescription();
      assertEquals("\u0000\u0000\u0000\u0000", string0);
      assertEquals(0, webPChunkAnim0.getPayloadSize());
      assertEquals(8, webPChunkAnim0.getChunkSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      WebPChunkIccp webPChunkIccp0 = new WebPChunkIccp((-2938), 0, byteArray0);
      // Undeclared exception!
      try { 
        webPChunkIccp0.dump((PrintWriter) null, (-2938));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.webp.chunks.WebPChunk", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      WebPChunkVp8 webPChunkVp8_0 = null;
      try {
        webPChunkVp8_0 = new WebPChunkVp8(1, 1, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Invalid VP8 chunk
         //
         verifyException("org.apache.commons.imaging.formats.webp.chunks.WebPChunkVp8", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      WebPChunkVp8 webPChunkVp8_0 = null;
      try {
        webPChunkVp8_0 = new WebPChunkVp8(3, 4, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Chunk size must match bytes length
         //
         verifyException("org.apache.commons.imaging.formats.webp.chunks.WebPChunk", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      WebPChunkAnim webPChunkAnim0 = new WebPChunkAnim(0, 0, byteArray0);
      webPChunkAnim0.getBytes();
      assertEquals(8, webPChunkAnim0.getChunkSize());
      assertEquals(0, webPChunkAnim0.getType());
      assertEquals(0, webPChunkAnim0.getPayloadSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      WebPChunkAnim webPChunkAnim0 = new WebPChunkAnim(0, 0, byteArray0);
      // Undeclared exception!
      try { 
        webPChunkAnim0.dump((PrintWriter) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.webp.chunks.WebPChunk", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      WebPChunkAnim webPChunkAnim0 = new WebPChunkAnim(0, 0, byteArray0);
      int int0 = webPChunkAnim0.getType();
      assertEquals(0, int0);
      assertEquals(0, webPChunkAnim0.getPayloadSize());
      assertEquals(8, webPChunkAnim0.getChunkSize());
  }
}
