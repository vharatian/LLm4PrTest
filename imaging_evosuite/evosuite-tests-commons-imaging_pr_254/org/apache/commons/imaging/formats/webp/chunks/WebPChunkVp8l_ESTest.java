/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 19:13:53 GMT 2025
 */

package org.apache.commons.imaging.formats.webp.chunks;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import org.apache.commons.imaging.formats.webp.chunks.WebPChunkVp8l;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class WebPChunkVp8l_ESTest extends WebPChunkVp8l_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      byteArray0[2] = (byte) (-1);
      WebPChunkVp8l webPChunkVp8l0 = new WebPChunkVp8l((byte)47, 9, byteArray0);
      assertEquals(16129, webPChunkVp8l0.getImageWidth());
      assertEquals(4, webPChunkVp8l0.getImageHeight());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)47;
      byteArray0[3] = (byte)47;
      WebPChunkVp8l webPChunkVp8l0 = new WebPChunkVp8l((byte)47, 5, byteArray0);
      assertEquals(1, webPChunkVp8l0.getImageWidth());
      assertEquals(189, webPChunkVp8l0.getImageHeight());
      assertFalse(webPChunkVp8l0.hasAlpha());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)47;
      WebPChunkVp8l webPChunkVp8l0 = new WebPChunkVp8l((byte)47, 9, byteArray0);
      assertEquals(48, webPChunkVp8l0.getImageWidth());
      assertEquals(1, webPChunkVp8l0.getImageHeight());
      assertFalse(webPChunkVp8l0.hasAlpha());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)123;
      WebPChunkVp8l webPChunkVp8l0 = null;
      try {
        webPChunkVp8l0 = new WebPChunkVp8l((-659), 4, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Invalid VP8L chunk
         //
         verifyException("org.apache.commons.imaging.formats.webp.chunks.WebPChunkVp8l", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      byteArray0[4] = (byte)31;
      WebPChunkVp8l webPChunkVp8l0 = new WebPChunkVp8l(2667, 9, byteArray0);
      boolean boolean0 = webPChunkVp8l0.hasAlpha();
      assertTrue(boolean0);
      assertEquals(1, webPChunkVp8l0.getImageWidth());
      assertEquals(3841, webPChunkVp8l0.getImageHeight());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      WebPChunkVp8l webPChunkVp8l0 = new WebPChunkVp8l(20, 9, byteArray0);
      // Undeclared exception!
      try { 
        webPChunkVp8l0.dump((PrintWriter) null, (byte)47);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.webp.chunks.WebPChunk", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      WebPChunkVp8l webPChunkVp8l0 = null;
      try {
        webPChunkVp8l0 = new WebPChunkVp8l(3, (byte)0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.webp.chunks.WebPChunk", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      WebPChunkVp8l webPChunkVp8l0 = null;
      try {
        webPChunkVp8l0 = new WebPChunkVp8l(0, 0, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.imaging.formats.webp.chunks.WebPChunkVp8l", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      WebPChunkVp8l webPChunkVp8l0 = new WebPChunkVp8l((byte)47, 9, byteArray0);
      boolean boolean0 = webPChunkVp8l0.hasAlpha();
      assertFalse(boolean0);
      assertEquals(1, webPChunkVp8l0.getImageWidth());
      assertEquals(1, webPChunkVp8l0.getImageHeight());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      WebPChunkVp8l webPChunkVp8l0 = new WebPChunkVp8l((byte)47, 9, byteArray0);
      int int0 = webPChunkVp8l0.getImageHeight();
      assertEquals(1, webPChunkVp8l0.getImageWidth());
      assertFalse(webPChunkVp8l0.hasAlpha());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)47;
      byteArray0[4] = (byte)83;
      WebPChunkVp8l webPChunkVp8l0 = null;
      try {
        webPChunkVp8l0 = new WebPChunkVp8l((byte)47, 5, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // VP8L version should be 0
         //
         verifyException("org.apache.commons.imaging.formats.webp.chunks.WebPChunkVp8l", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)47;
      WebPChunkVp8l webPChunkVp8l0 = null;
      try {
        webPChunkVp8l0 = new WebPChunkVp8l((-659), 4, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Invalid VP8L chunk
         //
         verifyException("org.apache.commons.imaging.formats.webp.chunks.WebPChunkVp8l", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      WebPChunkVp8l webPChunkVp8l0 = null;
      try {
        webPChunkVp8l0 = new WebPChunkVp8l(4, 4, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Invalid VP8L chunk
         //
         verifyException("org.apache.commons.imaging.formats.webp.chunks.WebPChunkVp8l", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      WebPChunkVp8l webPChunkVp8l0 = new WebPChunkVp8l(20, 9, byteArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      webPChunkVp8l0.dump(mockPrintWriter0, (byte)47);
      assertEquals(1, webPChunkVp8l0.getImageWidth());
      assertEquals(1, webPChunkVp8l0.getImageHeight());
      assertFalse(webPChunkVp8l0.hasAlpha());
      assertEquals(0, webPChunkVp8l0.getVersionNumber());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      WebPChunkVp8l webPChunkVp8l0 = new WebPChunkVp8l((byte)47, 9, byteArray0);
      int int0 = webPChunkVp8l0.getVersionNumber();
      assertFalse(webPChunkVp8l0.hasAlpha());
      assertEquals(0, int0);
      assertEquals(1, webPChunkVp8l0.getImageHeight());
      assertEquals(1, webPChunkVp8l0.getImageWidth());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      WebPChunkVp8l webPChunkVp8l0 = new WebPChunkVp8l((byte)47, 9, byteArray0);
      int int0 = webPChunkVp8l0.getImageWidth();
      assertFalse(webPChunkVp8l0.hasAlpha());
      assertEquals(1, int0);
      assertEquals(1, webPChunkVp8l0.getImageHeight());
  }
}
