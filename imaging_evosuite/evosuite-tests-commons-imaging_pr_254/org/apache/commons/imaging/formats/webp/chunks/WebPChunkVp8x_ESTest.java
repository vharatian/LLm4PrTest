/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 19:16:14 GMT 2025
 */

package org.apache.commons.imaging.formats.webp.chunks;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.PrintWriter;
import org.apache.commons.imaging.formats.webp.chunks.WebPChunkVp8x;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class WebPChunkVp8x_ESTest extends WebPChunkVp8x_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[6] = (byte) (-1);
      WebPChunkVp8x webPChunkVp8x0 = new WebPChunkVp8x(10, 10, byteArray0);
      assertEquals(16711681, webPChunkVp8x0.getCanvasWidth());
      assertFalse(webPChunkVp8x0.hasAlpha());
      assertFalse(webPChunkVp8x0.hasAnimation());
      assertFalse(webPChunkVp8x0.hasXmp());
      assertFalse(webPChunkVp8x0.hasIcc());
      assertFalse(webPChunkVp8x0.hasExif());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      WebPChunkVp8x webPChunkVp8x0 = null;
      try {
        webPChunkVp8x0 = new WebPChunkVp8x(34, 16, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // VP8X chunk size must be 10
         //
         verifyException("org.apache.commons.imaging.formats.webp.chunks.WebPChunkVp8x", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      WebPChunkVp8x webPChunkVp8x0 = null;
      try {
        webPChunkVp8x0 = new WebPChunkVp8x((-1155), 0, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // VP8X chunk size must be 10
         //
         verifyException("org.apache.commons.imaging.formats.webp.chunks.WebPChunkVp8x", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      WebPChunkVp8x webPChunkVp8x0 = new WebPChunkVp8x(10, 10, byteArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, true);
      webPChunkVp8x0.dump(mockPrintWriter0, 10);
      assertEquals(1, webPChunkVp8x0.getCanvasWidth());
      assertFalse(webPChunkVp8x0.hasAnimation());
      assertFalse(webPChunkVp8x0.hasXmp());
      assertEquals(1, webPChunkVp8x0.getCanvasHeight());
      assertFalse(webPChunkVp8x0.hasIcc());
      assertFalse(webPChunkVp8x0.hasExif());
      assertFalse(webPChunkVp8x0.hasAlpha());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)7;
      WebPChunkVp8x webPChunkVp8x0 = new WebPChunkVp8x(10, 10, byteArray0);
      boolean boolean0 = webPChunkVp8x0.hasXmp();
      assertTrue(boolean0);
      assertTrue(webPChunkVp8x0.hasAnimation());
      assertFalse(webPChunkVp8x0.hasIcc());
      assertFalse(webPChunkVp8x0.hasAlpha());
      assertFalse(webPChunkVp8x0.hasExif());
      assertEquals(1, webPChunkVp8x0.getCanvasWidth());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-21);
      WebPChunkVp8x webPChunkVp8x0 = new WebPChunkVp8x(10, 10, byteArray0);
      boolean boolean0 = webPChunkVp8x0.hasIcc();
      assertTrue(webPChunkVp8x0.hasExif());
      assertTrue(boolean0);
      assertEquals(1, webPChunkVp8x0.getCanvasWidth());
      assertFalse(webPChunkVp8x0.hasXmp());
      assertFalse(webPChunkVp8x0.hasAlpha());
      assertTrue(webPChunkVp8x0.hasAnimation());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)7;
      WebPChunkVp8x webPChunkVp8x0 = new WebPChunkVp8x(10, 10, byteArray0);
      boolean boolean0 = webPChunkVp8x0.hasAnimation();
      assertEquals(1, webPChunkVp8x0.getCanvasWidth());
      assertTrue(webPChunkVp8x0.hasXmp());
      assertFalse(webPChunkVp8x0.hasAlpha());
      assertTrue(boolean0);
      assertFalse(webPChunkVp8x0.hasIcc());
      assertFalse(webPChunkVp8x0.hasExif());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      WebPChunkVp8x webPChunkVp8x0 = null;
      try {
        webPChunkVp8x0 = new WebPChunkVp8x(548, 3480, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.webp.chunks.WebPChunk", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[5] = (byte)18;
      byteArray0[9] = (byte) (-117);
      WebPChunkVp8x webPChunkVp8x0 = null;
      try {
        webPChunkVp8x0 = new WebPChunkVp8x(10, 10, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Illegal canvas size
         //
         verifyException("org.apache.commons.imaging.formats.webp.chunks.WebPChunkVp8x", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-1);
      WebPChunkVp8x webPChunkVp8x0 = new WebPChunkVp8x(10, 10, byteArray0);
      boolean boolean0 = webPChunkVp8x0.hasAlpha();
      assertEquals(1, webPChunkVp8x0.getCanvasWidth());
      assertTrue(boolean0);
      assertTrue(webPChunkVp8x0.hasIcc());
      assertTrue(webPChunkVp8x0.hasXmp());
      assertTrue(webPChunkVp8x0.hasExif());
      assertTrue(webPChunkVp8x0.hasAnimation());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-21);
      WebPChunkVp8x webPChunkVp8x0 = new WebPChunkVp8x(10, 10, byteArray0);
      boolean boolean0 = webPChunkVp8x0.hasExif();
      assertTrue(boolean0);
      assertFalse(webPChunkVp8x0.hasXmp());
      assertFalse(webPChunkVp8x0.hasAlpha());
      assertTrue(webPChunkVp8x0.hasAnimation());
      assertEquals(1, webPChunkVp8x0.getCanvasWidth());
      assertTrue(webPChunkVp8x0.hasIcc());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      WebPChunkVp8x webPChunkVp8x0 = new WebPChunkVp8x(10, 10, byteArray0);
      int int0 = webPChunkVp8x0.getCanvasHeight();
      assertFalse(webPChunkVp8x0.hasAlpha());
      assertEquals(1, webPChunkVp8x0.getCanvasWidth());
      assertFalse(webPChunkVp8x0.hasAnimation());
      assertEquals(1, int0);
      assertFalse(webPChunkVp8x0.hasExif());
      assertFalse(webPChunkVp8x0.hasIcc());
      assertFalse(webPChunkVp8x0.hasXmp());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      WebPChunkVp8x webPChunkVp8x0 = new WebPChunkVp8x(10, 10, byteArray0);
      boolean boolean0 = webPChunkVp8x0.hasXmp();
      assertFalse(webPChunkVp8x0.hasIcc());
      assertFalse(boolean0);
      assertFalse(webPChunkVp8x0.hasExif());
      assertFalse(webPChunkVp8x0.hasAnimation());
      assertEquals(1, webPChunkVp8x0.getCanvasWidth());
      assertFalse(webPChunkVp8x0.hasAlpha());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      WebPChunkVp8x webPChunkVp8x0 = new WebPChunkVp8x(10, 10, byteArray0);
      int int0 = webPChunkVp8x0.getCanvasWidth();
      assertFalse(webPChunkVp8x0.hasExif());
      assertFalse(webPChunkVp8x0.hasXmp());
      assertFalse(webPChunkVp8x0.hasAlpha());
      assertFalse(webPChunkVp8x0.hasIcc());
      assertEquals(1, int0);
      assertFalse(webPChunkVp8x0.hasAnimation());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      WebPChunkVp8x webPChunkVp8x0 = new WebPChunkVp8x(10, 10, byteArray0);
      boolean boolean0 = webPChunkVp8x0.hasAnimation();
      assertFalse(webPChunkVp8x0.hasExif());
      assertFalse(webPChunkVp8x0.hasXmp());
      assertFalse(webPChunkVp8x0.hasIcc());
      assertFalse(boolean0);
      assertEquals(1, webPChunkVp8x0.getCanvasWidth());
      assertFalse(webPChunkVp8x0.hasAlpha());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      WebPChunkVp8x webPChunkVp8x0 = new WebPChunkVp8x(10, 10, byteArray0);
      boolean boolean0 = webPChunkVp8x0.hasIcc();
      assertFalse(boolean0);
      assertFalse(webPChunkVp8x0.hasExif());
      assertFalse(webPChunkVp8x0.hasAlpha());
      assertEquals(1, webPChunkVp8x0.getCanvasWidth());
      assertFalse(webPChunkVp8x0.hasAnimation());
      assertFalse(webPChunkVp8x0.hasXmp());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      WebPChunkVp8x webPChunkVp8x0 = new WebPChunkVp8x(10, 10, byteArray0);
      // Undeclared exception!
      try { 
        webPChunkVp8x0.dump((PrintWriter) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.webp.chunks.WebPChunk", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      WebPChunkVp8x webPChunkVp8x0 = new WebPChunkVp8x(10, 10, byteArray0);
      boolean boolean0 = webPChunkVp8x0.hasExif();
      assertFalse(webPChunkVp8x0.hasIcc());
      assertFalse(boolean0);
      assertEquals(1, webPChunkVp8x0.getCanvasWidth());
      assertFalse(webPChunkVp8x0.hasAlpha());
      assertFalse(webPChunkVp8x0.hasAnimation());
      assertFalse(webPChunkVp8x0.hasXmp());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      WebPChunkVp8x webPChunkVp8x0 = new WebPChunkVp8x(10, 10, byteArray0);
      boolean boolean0 = webPChunkVp8x0.hasAlpha();
      assertFalse(webPChunkVp8x0.hasAnimation());
      assertFalse(webPChunkVp8x0.hasXmp());
      assertEquals(1, webPChunkVp8x0.getCanvasWidth());
      assertFalse(webPChunkVp8x0.hasExif());
      assertFalse(boolean0);
      assertFalse(webPChunkVp8x0.hasIcc());
  }
}
