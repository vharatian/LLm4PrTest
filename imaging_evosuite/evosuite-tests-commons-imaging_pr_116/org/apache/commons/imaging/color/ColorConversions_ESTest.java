/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 22:55:01 GMT 2025
 */

package org.apache.commons.imaging.color;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.color.ColorCieLab;
import org.apache.commons.imaging.color.ColorCieLch;
import org.apache.commons.imaging.color.ColorCieLuv;
import org.apache.commons.imaging.color.ColorCmy;
import org.apache.commons.imaging.color.ColorCmyk;
import org.apache.commons.imaging.color.ColorConversions;
import org.apache.commons.imaging.color.ColorDin99Lab;
import org.apache.commons.imaging.color.ColorHsl;
import org.apache.commons.imaging.color.ColorHsv;
import org.apache.commons.imaging.color.ColorHunterLab;
import org.apache.commons.imaging.color.ColorXyz;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ColorConversions_ESTest extends ColorConversions_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ColorDin99Lab colorDin99Lab0 = ColorConversions.convertCIELabToDIN99oLab((-2291.4196403735664), 0.0, (-1.5659010130139692));
      assertEquals(Double.NaN, colorDin99Lab0.L99, 0.01);
      assertEquals((-0.1722273811072766), colorDin99Lab0.a99, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ColorXyz colorXyz0 = ColorConversions.convertCIELuvtoXYZ(0.0, 0.0, 0.0);
      ColorCieLab colorCieLab0 = ColorConversions.convertXYZtoCIELab(colorXyz0);
      ColorDin99Lab colorDin99Lab0 = ColorConversions.convertCIELabToDIN99bLab(colorCieLab0);
      assertEquals(0.0, colorDin99Lab0.L99, 0.01);
      assertEquals(0.0, colorXyz0.Y, 0.01);
      assertEquals(Double.NaN, colorCieLab0.a, 0.01);
      assertEquals(Double.NaN, colorCieLab0.b, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ColorDin99Lab colorDin99Lab0 = ColorConversions.convertCIELabToDIN99bLab((-3524.592696950893), 0.0, (-3524.592696950893));
      assertEquals((-97.81035041546559), colorDin99Lab0.b99, 0.01);
      assertEquals(Double.NaN, colorDin99Lab0.L99, 0.01);
      assertEquals((-40.06666665869551), colorDin99Lab0.a99, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ColorCieLab colorCieLab0 = ColorConversions.convertDIN99bLabToCIELab(1561.937850021107, (-4433.9907), 0.7686274509803921);
      ColorDin99Lab colorDin99Lab0 = ColorConversions.convertCIELabToDIN99bLab(colorCieLab0);
      assertEquals((-4433.9907), colorDin99Lab0.a99, 0.01);
      assertEquals(0.768627450980312, colorDin99Lab0.b99, 0.01);
      assertEquals(1561.937850021107, colorDin99Lab0.L99, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ColorCieLch colorCieLch0 = ColorConversions.convertCIELabtoCIELCH(0.06274509803921569, 1.3333333333333335, (double) (-16777200));
      assertEquals(270.0000045534638, colorCieLch0.h, 0.01);
      assertEquals(1.6777200000000054E7, colorCieLch0.C, 0.01);
      assertEquals(0.06274509803921569, colorCieLch0.L, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = ColorConversions.convertCMYKtoRGB_Adobe(0, 0, (-1), (-3872));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = ColorConversions.convertHSVtoRGB(3.0, 95.04833625324856, (-1668.9398));
      assertEquals((-16711936), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ColorHsv colorHsv0 = ColorConversions.convertRGBtoHSV((-16711681));
      assertEquals(1.0, colorHsv0.V, 0.01);
      assertEquals(1.0, colorHsv0.S, 0.01);
      assertEquals(0.4999999999999999, colorHsv0.H, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = ColorConversions.convertHSLtoRGB(1.0, 383.29491, 84.569);
      assertEquals((-16711681), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = ColorConversions.convertHSLtoRGB(0.5, (double) (-16777216), 0.8196078431372549);
      assertEquals((-65536), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ColorHsl colorHsl0 = ColorConversions.convertRGBtoHSL((-16711681));
      assertEquals(0.5, colorHsl0.L, 0.01);
      assertEquals(0.4999999999999999, colorHsl0.H, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ColorCmy colorCmy0 = ColorConversions.convertRGBtoCMY(590);
      ColorCmyk colorCmyk0 = ColorConversions.convertCMYtoCMYK(colorCmy0);
      assertEquals(0.6941176470588235, colorCmyk0.K, 0.01);
      assertEquals(0.9743589743589745, colorCmyk0.M, 0.01);
      assertEquals(1.0, colorCmyk0.C, 0.01);
      assertEquals(0.0, colorCmyk0.Y, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ColorXyz colorXyz0 = ColorConversions.convertRGBtoXYZ((-16777216));
      assertEquals(0.0, colorXyz0.Y, 0.01);
      assertEquals(0.0, colorXyz0.X, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = ColorConversions.radian_2_degree(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = ColorConversions.radian_2_degree(29.794);
      assertEquals(1707.0704548127749, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = ColorConversions.degree_2_radian(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = ColorConversions.degree_2_radian((-1424.061));
      assertEquals((-24.854553199242964), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ColorDin99Lab colorDin99Lab0 = ColorConversions.convertCIELabToDIN99bLab(42.51, 3.141592653589793, 0.0);
      ColorCieLab colorCieLab0 = ColorConversions.convertDIN99oLabToCIELab(colorDin99Lab0);
      assertEquals(1.8447696592033145, colorCieLab0.a, 0.01);
      assertEquals(50.115258545469004, colorCieLab0.L, 0.01);
      assertEquals((-0.5498752464746193), colorCieLab0.b, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ColorCieLab colorCieLab0 = ColorCieLab.WHITE;
      ColorDin99Lab colorDin99Lab0 = ColorConversions.convertCIELabToDIN99oLab(colorCieLab0);
      ColorCieLab colorCieLab1 = ColorConversions.convertDIN99bLabToCIELab(colorDin99Lab0);
      assertTrue(colorCieLab1.equals((Object)colorCieLab0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ColorCmyk colorCmyk0 = ColorCmyk.GREEN;
      ColorCmy colorCmy0 = ColorConversions.convertCMYKtoCMY(colorCmyk0);
      assertEquals(100.0, colorCmy0.Y, 0.01);
      assertEquals(100.0, colorCmy0.C, 0.01);
      assertEquals(0.0, colorCmy0.M, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorConversions.convertXYZtoRGB((ColorXyz) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.color.ColorConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorConversions.convertXYZtoCIELuv((ColorXyz) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.color.ColorConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorConversions.convertXYZtoCIELab((ColorXyz) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.color.ColorConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorConversions.convertHunterLabtoXYZ((ColorHunterLab) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.color.ColorConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorConversions.convertHSVtoRGB((ColorHsv) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.color.ColorConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorConversions.convertHSLtoRGB((ColorHsl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.color.ColorConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorConversions.convertCMYtoCMYK((ColorCmy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.color.ColorConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorConversions.convertCIELuvtoXYZ((ColorCieLuv) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.color.ColorConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorConversions.convertCIELabtoXYZ((ColorCieLab) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.color.ColorConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorConversions.convertCIELabtoCIELCH((ColorCieLab) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.color.ColorConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorConversions.convertCIELabToDIN99bLab((ColorCieLab) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.color.ColorConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorConversions.convertCIELCHtoCIELab((ColorCieLch) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.color.ColorConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ColorDin99Lab colorDin99Lab0 = ColorConversions.convertCIELabToDIN99oLab(566.0, 0.0, 0.0);
      assertEquals(0.0, colorDin99Lab0.b99, 0.01);
      assertEquals(353.9166044132153, colorDin99Lab0.L99, 0.01);
      assertEquals(0.0, colorDin99Lab0.a99, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ColorDin99Lab colorDin99Lab0 = ColorConversions.convertCIELabToDIN99oLab((-3562.06301443304), (-3562.06301443304), (-3562.06301443304));
      assertEquals(Double.NaN, colorDin99Lab0.L99, 0.01);
      assertEquals((-101.22178262813225), colorDin99Lab0.a99, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ColorDin99Lab colorDin99Lab0 = ColorConversions.convertCIELabToDIN99bLab(1.6414030062399113E8, 0.0, 0.0);
      assertEquals(0.0, colorDin99Lab0.a99, 0.01);
      assertEquals(1558.203454790067, colorDin99Lab0.L99, 0.01);
      assertEquals(0.0, colorDin99Lab0.b99, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ColorCieLch colorCieLch0 = ColorConversions.convertCIELabtoCIELCH((double) (-509), (double) 0, (double) 0);
      assertEquals((-509.0), colorCieLch0.L, 0.01);
      assertEquals(360.0, colorCieLch0.h, 0.01);
      assertEquals(0.0, colorCieLch0.C, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = ColorConversions.convertHSVtoRGB(0.6602564102564101, 211.58943173032, 53.233);
      assertEquals((-16776961), int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = ColorConversions.convertHSVtoRGB(0.34090909090909083, 71.52, 1685.4);
      assertEquals((-16711936), int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = ColorConversions.convertHSVtoRGB(21.046181167739558, 0.0, (-736.46077918));
      assertEquals((-16777216), int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = ColorConversions.convertHSLtoRGB((-130.358), 0.0, (-9.4));
      assertEquals((-16777216), int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ColorHunterLab colorHunterLab0 = ColorConversions.convertXYZtoHunterLab(Double.NaN, Double.NaN, 240.0);
      assertEquals(Double.NaN, colorHunterLab0.a, 0.01);
      assertEquals(Double.NaN, colorHunterLab0.b, 0.01);
      assertEquals(Double.NaN, colorHunterLab0.L, 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double double0 = ColorConversions.degree_2_radian(1.8758);
      assertEquals(0.03273888610890963, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorConversions.convertCMYtoRGB((ColorCmy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.color.ColorConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = ColorConversions.convertXYZtoRGB((-2034.1788920009753), (-2034.1788920009753), (-2034.1788920009753));
      assertEquals((-16777216), int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ColorXyz colorXyz0 = ColorConversions.convertHunterLabtoXYZ(78.962, (double) 2682, (double) (-65281));
      assertEquals(87014.38387941981, colorXyz0.Z, 0.01);
      assertEquals(62.349974440000004, colorXyz0.Y, 0.01);
      assertEquals(1247.548064577031, colorXyz0.X, 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ColorCieLab colorCieLab0 = ColorConversions.convertCIELCHtoCIELab(11.92, 1.8758, 4285.542285);
      assertEquals((-1.0613236395234138), colorCieLab0.b, 0.01);
      assertEquals(1.5466795958403199, colorCieLab0.a, 0.01);
      assertEquals(11.92, colorCieLab0.L, 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ColorCmy colorCmy0 = ColorConversions.convertCMYKtoCMY(0.0, (-3890.0), (-0.2040259), (-3890.0));
      int int0 = ColorConversions.convertCMYtoRGB(colorCmy0);
      assertEquals((-3890.0), colorCmy0.C, 0.01);
      assertEquals((-1.513988E7), colorCmy0.M, 0.01);
      assertEquals((-4683.8647769), colorCmy0.Y, 0.01);
      assertEquals((-65281), int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ColorCieLuv colorCieLuv0 = ColorConversions.convertXYZtoCIELuv((-382.7106938437016), (-382.7106938437016), (double) (-16777216));
      assertEquals(8889.78243739059, colorCieLuv0.u, 0.01);
      assertEquals(21044.496717681504, colorCieLuv0.v, 0.01);
      assertEquals((-3457.011506577629), colorCieLuv0.L, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ColorXyz colorXyz0 = ColorConversions.convertCIELabtoXYZ((-107.33333333333333), 1.1764705882352944, Double.NaN);
      assertEquals((-11.26515096259615), colorXyz0.X, 0.01);
      assertEquals(Double.NaN, colorXyz0.Z, 0.01);
      assertEquals((-11.882406059221744), colorXyz0.Y, 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ColorXyz colorXyz0 = ColorConversions.convertCIELuvtoXYZ(14.50164873818788, 14.50164873818788, 14.50164873818788);
      assertEquals(1.8180087888514167, colorXyz0.Y, 0.01);
      assertEquals(0.22549564395527608, colorXyz0.Z, 0.01);
      assertEquals(2.061263179547523, colorXyz0.X, 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ColorCieLab colorCieLab0 = ColorConversions.convertXYZtoCIELab((-1501.960460379), (-1501.960460379), (-1501.960460379));
      assertEquals(0.0, colorCieLab0.L, 0.01);
      assertEquals((-3047.4083752616393), colorCieLab0.a, 0.01);
      assertEquals((-1908.3600554963823), colorCieLab0.b, 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ColorXyz colorXyz0 = ColorConversions.convertRGBtoXYZ(2743);
      assertEquals(3.634781563492574, colorXyz0.Y, 0.01);
      assertEquals(8.652817928642804, colorXyz0.X, 0.01);
      assertEquals(45.03607021508192, colorXyz0.Z, 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ColorDin99Lab colorDin99Lab0 = ColorConversions.convertCIELabToDIN99oLab(0.0, 0.0, 100.0);
      assertEquals(0.0, colorDin99Lab0.L99, 0.01);
      assertEquals(3.583144595634734, colorDin99Lab0.a99, 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ColorCieLab colorCieLab0 = ColorCieLab.BLUE;
      ColorDin99Lab colorDin99Lab0 = ColorConversions.convertCIELabToDIN99oLab(colorCieLab0);
      assertEquals(31.846174475116936, colorDin99Lab0.a99, 0.01);
      assertEquals(35.7133021092943, colorDin99Lab0.L99, 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ColorDin99Lab colorDin99Lab0 = ColorConversions.convertCIELabToDIN99bLab(0.0, 0.0, 100.0);
      assertEquals(29.8611452210998, colorDin99Lab0.b99, 0.01);
      assertEquals(12.23220800803435, colorDin99Lab0.a99, 0.01);
      assertEquals(0.0, colorDin99Lab0.L99, 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = ColorConversions.convertHSVtoRGB((-1138.92), (-1138.92), (-1138.92));
      assertEquals((-16777216), int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = ColorConversions.convertHSVtoRGB(0.7235294117647059, 0.7235294117647059, 0.7235294117647059);
      assertEquals((-10406983), int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ColorHsv colorHsv0 = ColorConversions.convertRGBtoHSV((-613566757));
      int int0 = ColorConversions.convertHSVtoRGB(colorHsv0);
      assertEquals((-9586981), int0);
      assertEquals(0.502283105022831, colorHsv0.S, 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = ColorConversions.convertHSVtoRGB(0.22549564395527608, 0.22549564395527608, 2.061263179547523);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = ColorConversions.convertHSVtoRGB(1.0, (-2.422201353995812E30), (-2.422201353995812E30));
      assertEquals((-16777216), int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ColorHsv colorHsv0 = ColorConversions.convertRGBtoHSV(2147054210);
      assertEquals(0.980246913580247, colorHsv0.H, 0.01);
      assertEquals(0.9764705882352941, colorHsv0.V, 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ColorHsv colorHsv0 = ColorConversions.convertRGBtoHSV((-1));
      assertEquals(0.0, colorHsv0.H, 0.01);
      assertEquals(0.0, colorHsv0.S, 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ColorHsv colorHsv0 = ColorConversions.convertRGBtoHSV(10);
      assertEquals(0.0392156862745098, colorHsv0.V, 0.01);
      assertEquals(1.0, colorHsv0.S, 0.01);
      assertEquals(0.6666666666666667, colorHsv0.H, 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = ColorConversions.convertHSLtoRGB(0.0, 100.0, 0.0);
      assertEquals((-16777216), int0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ColorHsl colorHsl0 = ColorHsl.RED;
      int int0 = ColorConversions.convertHSLtoRGB(colorHsl0);
      assertEquals((-16711681), int0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ColorHsl colorHsl0 = ColorConversions.convertRGBtoHSL(2147054210);
      assertEquals(0.980246913580247, colorHsl0.H, 0.01);
      assertEquals(0.711764705882353, colorHsl0.L, 0.01);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ColorHsl colorHsl0 = ColorConversions.convertRGBtoHSL((-65536));
      int int0 = ColorConversions.convertHSLtoRGB(colorHsl0);
      assertEquals((-65536), int0);
      assertEquals(0.0, colorHsl0.H, 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ColorHsl colorHsl0 = ColorConversions.convertRGBtoHSL(16);
      assertEquals(1.0, colorHsl0.S, 0.01);
      assertEquals(0.6666666666666666, colorHsl0.H, 0.01);
      assertEquals(0.03137254901960784, colorHsl0.L, 0.01);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ColorHsl colorHsl0 = ColorConversions.convertRGBtoHSL((-1));
      assertEquals(1.0, colorHsl0.L, 0.01);
      assertEquals(0.0, colorHsl0.S, 0.01);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ColorHsl colorHsl0 = ColorConversions.convertRGBtoHSL(830982803);
      assertEquals(0.6607843137254902, colorHsl0.L, 0.01);
      assertEquals(0.36318407960198995, colorHsl0.H, 0.01);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ColorCmy colorCmy0 = ColorCmy.BLACK;
      ColorCmyk colorCmyk0 = ColorConversions.convertCMYtoCMYK(colorCmy0);
      assertEquals(0.0, colorCmyk0.M, 0.01);
      assertEquals(0.0, colorCmyk0.C, 0.01);
      assertEquals(1.0, colorCmyk0.K, 0.01);
      assertEquals(0.0, colorCmyk0.Y, 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ColorCmy colorCmy0 = ColorCmy.YELLOW;
      ColorCmyk colorCmyk0 = ColorConversions.convertCMYtoCMYK(colorCmy0);
      assertEquals(100.0, colorCmyk0.Y, 0.01);
      assertEquals(0.0, colorCmyk0.K, 0.01);
      assertEquals(0.0, colorCmyk0.C, 0.01);
      assertEquals(0.0, colorCmyk0.M, 0.01);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ColorCmy colorCmy0 = ColorCmy.CYAN;
      ColorCmyk colorCmyk0 = ColorConversions.convertCMYtoCMYK(colorCmy0);
      assertEquals(0.0, colorCmyk0.M, 0.01);
      assertEquals(0.0, colorCmyk0.Y, 0.01);
      assertEquals(0.0, colorCmyk0.K, 0.01);
      assertEquals(100.0, colorCmyk0.C, 0.01);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ColorHunterLab colorHunterLab0 = ColorConversions.convertXYZtoHunterLab(100.0, 0.0, 100.0);
      assertEquals(0.0, colorHunterLab0.L, 0.01);
      assertEquals(0.0, colorHunterLab0.a, 0.01);
      assertEquals(0.0, colorHunterLab0.b, 0.01);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ColorXyz colorXyz0 = ColorXyz.RED;
      ColorHunterLab colorHunterLab0 = ColorConversions.convertXYZtoHunterLab(colorXyz0);
      assertEquals(29.794252423892623, colorHunterLab0.b, 0.01);
      assertEquals(78.96233161759665, colorHunterLab0.a, 0.01);
      assertEquals(46.10856753359401, colorHunterLab0.L, 0.01);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorConversions.convertCMYKtoCMY((ColorCmyk) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.color.ColorConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ColorHunterLab colorHunterLab0 = ColorHunterLab.BLUE;
      ColorXyz colorXyz0 = ColorConversions.convertHunterLabtoXYZ(colorHunterLab0);
      assertEquals(95.04973587451511, colorXyz0.Z, 0.01);
      assertEquals(7.219969000000002, colorXyz0.Y, 0.01);
      assertEquals(18.049941316526613, colorXyz0.X, 0.01);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ColorCieLab colorCieLab0 = ColorCieLab.GREEN;
      ColorXyz colorXyz0 = ColorConversions.convertCIELabtoXYZ(colorCieLab0);
      assertEquals(36.15318773228199, colorXyz0.X, 0.01);
      assertEquals(72.06527532904178, colorXyz0.Y, 0.01);
      assertEquals(12.158749322317087, colorXyz0.Z, 0.01);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorConversions.convertDIN99oLabToCIELab((ColorDin99Lab) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.color.ColorConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorConversions.convertCIELabToDIN99oLab((ColorCieLab) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.color.ColorConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ColorXyz colorXyz0 = ColorXyz.GREEN;
      ColorCieLuv colorCieLuv0 = ColorConversions.convertXYZtoCIELuv(colorXyz0);
      assertEquals(87.73703347354422, colorCieLuv0.L, 0.01);
      assertEquals((-83.07975193131836), colorCieLuv0.u, 0.01);
      assertEquals(107.40136474095397, colorCieLuv0.v, 0.01);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorConversions.convertDIN99bLabToCIELab((ColorDin99Lab) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.color.ColorConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      ColorCmy colorCmy0 = ColorConversions.convertRGBtoCMY((-2056));
      assertEquals(0.0, colorCmy0.C, 0.01);
      assertEquals(0.03137254901960784, colorCmy0.M, 0.01);
      assertEquals(0.027450980392156876, colorCmy0.Y, 0.01);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      ColorCieLab colorCieLab0 = ColorConversions.convertDIN99oLabToCIELab((double) (-16777216), (double) (-16777216), (double) (-16777216));
      assertEquals(Double.NEGATIVE_INFINITY, colorCieLab0.b, 0.01);
      assertEquals(Double.NaN, colorCieLab0.a, 0.01);
      assertEquals((-256.4102564102564), colorCieLab0.L, 0.01);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorConversions.convertXYZtoHunterLab((ColorXyz) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.color.ColorConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      int int0 = ColorConversions.convertCIELabtoARGBTest(2147054199, 2147054199, 2147054199);
      assertEquals((-16776961), int0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      ColorCieLab colorCieLab0 = ColorCieLab.BLACK;
      ColorCieLch colorCieLch0 = ColorConversions.convertCIELabtoCIELCH(colorCieLab0);
      assertEquals(360.0, colorCieLch0.h, 0.01);
      assertEquals(0.0, colorCieLch0.L, 0.01);
      assertEquals(0.0, colorCieLch0.C, 0.01);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      ColorXyz colorXyz0 = ColorXyz.BLUE;
      int int0 = ColorConversions.convertXYZtoRGB(colorXyz0);
      assertEquals((-16776961), int0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      ColorCieLch colorCieLch0 = ColorCieLch.BLUE;
      ColorCieLab colorCieLab0 = ColorConversions.convertCIELCHtoCIELab(colorCieLch0);
      assertEquals(32.0, colorCieLab0.L, 0.01);
      assertEquals((-24.41234255562084), colorCieLab0.a, 0.01);
      assertEquals((-75.13346478731714), colorCieLab0.b, 0.01);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      ColorCieLch colorCieLch0 = ColorConversions.convertCIELabtoCIELCH(3568.8170610510324, 3568.8170610510324, 3568.8170610510324);
      assertEquals(3568.8170610510324, colorCieLch0.L, 0.01);
      assertEquals(45.0, colorCieLch0.h, 0.01);
      assertEquals(5047.06948936686, colorCieLch0.C, 0.01);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      double double0 = ColorConversions.radian_2_degree((-1));
      assertEquals((-57.29577951308232), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      int int0 = ColorConversions.convertCMYKtoRGB(22, 22, 22, 22);
      assertEquals((-2763307), int0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      ColorHsv colorHsv0 = ColorConversions.convertRGBtoHSV(2304);
      int int0 = ColorConversions.convertHSVtoRGB(colorHsv0);
      assertEquals((-16774912), int0);
      assertEquals(0.33333333333333337, colorHsv0.H, 0.01);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      ColorCieLuv colorCieLuv0 = ColorCieLuv.RED;
      ColorXyz colorXyz0 = ColorConversions.convertCIELuvtoXYZ(colorCieLuv0);
      assertEquals(1.9299056202319023, colorXyz0.Z, 0.01);
      assertEquals(41.24010827997529, colorXyz0.X, 0.01);
      assertEquals(21.26010890362568, colorXyz0.Y, 0.01);
  }
}
