/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 23:28:04 GMT 2025
 */

package org.apache.commons.imaging.formats.pcx;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.imaging.formats.pcx.PcxImagingParameters;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PcxImagingParameters_ESTest extends PcxImagingParameters_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      assertEquals((-1), pcxImagingParameters0.getPlanes());
      
      pcxImagingParameters0.setPlanes(0);
      int int0 = pcxImagingParameters0.getPlanes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      pcxImagingParameters0.setPlanes(615);
      int int0 = pcxImagingParameters0.getPlanes();
      assertEquals(615, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      pcxImagingParameters0.setCompression(938);
      int int0 = pcxImagingParameters0.getCompression();
      assertEquals(938, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      pcxImagingParameters0.setCompression((-2825));
      int int0 = pcxImagingParameters0.getCompression();
      assertEquals((-2825), int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      assertEquals((-1), pcxImagingParameters0.getBitDepth());
      
      pcxImagingParameters0.setBitDepth(0);
      int int0 = pcxImagingParameters0.getBitDepth();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      pcxImagingParameters0.setBitDepth(2090);
      int int0 = pcxImagingParameters0.getBitDepth();
      assertEquals(2090, int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      int int0 = pcxImagingParameters0.getBitDepth();
      assertEquals((-1), int0);
      assertEquals((-1), pcxImagingParameters0.getPlanes());
      assertEquals(0, pcxImagingParameters0.getCompression());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      int int0 = pcxImagingParameters0.getPlanes();
      assertEquals((-1), pcxImagingParameters0.getBitDepth());
      assertEquals((-1), int0);
      assertEquals(0, pcxImagingParameters0.getCompression());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      int int0 = pcxImagingParameters0.getCompression();
      assertEquals((-1), pcxImagingParameters0.getBitDepth());
      assertEquals(0, int0);
      assertEquals((-1), pcxImagingParameters0.getPlanes());
  }
}
