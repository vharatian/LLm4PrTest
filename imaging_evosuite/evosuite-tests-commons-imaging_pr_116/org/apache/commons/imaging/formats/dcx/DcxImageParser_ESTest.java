/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 23:04:30 GMT 2025
 */

package org.apache.commons.imaging.formats.dcx;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.io.DataInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.StringWriter;
import javax.swing.DebugGraphics;
import org.apache.commons.imaging.ImageFormat;
import org.apache.commons.imaging.ImageInfo;
import org.apache.commons.imaging.common.ImageMetadata;
import org.apache.commons.imaging.common.SimpleBufferedImageFactory;
import org.apache.commons.imaging.common.bytesource.ByteSource;
import org.apache.commons.imaging.common.bytesource.ByteSourceArray;
import org.apache.commons.imaging.common.bytesource.ByteSourceFile;
import org.apache.commons.imaging.common.bytesource.ByteSourceInputStream;
import org.apache.commons.imaging.formats.dcx.DcxImageParser;
import org.apache.commons.imaging.formats.pcx.PcxImagingParameters;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class DcxImageParser_ESTest extends DcxImageParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)83;
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        dcxImageParser0.getAllBufferedImages((ByteSource) byteSourceArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Valid DCX File: file id incorrect
         //
         verifyException("org.apache.commons.imaging.formats.dcx.DcxImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      PcxImagingParameters pcxImagingParameters0 = dcxImageParser0.getDefaultParameters();
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getGrayscaleBufferedImage((byte)67, (byte)67, false);
      MockFile mockFile0 = new MockFile("ax", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      dcxImageParser0.writeImage(bufferedImage0, (OutputStream) mockFileOutputStream0, pcxImagingParameters0);
      assertEquals(4898L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      byte[] byteArray0 = new byte[2];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray((String) null, byteArray0);
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      ImageMetadata imageMetadata0 = dcxImageParser0.getMetadata((ByteSource) byteSourceArray0, pcxImagingParameters0);
      assertNull(imageMetadata0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      PrintStream printStream0 = DebugGraphics.logStream();
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getColorBufferedImage(4100, 4100, false);
      PcxImagingParameters pcxImagingParameters0 = dcxImageParser0.getDefaultParameters();
      // Undeclared exception!
      dcxImageParser0.writeImage(bufferedImage0, (OutputStream) printStream0, pcxImagingParameters0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      PcxImagingParameters pcxImagingParameters0 = dcxImageParser0.getDefaultParameters();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        dcxImageParser0.writeImage((BufferedImage) null, (OutputStream) pipedOutputStream0, pcxImagingParameters0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      byte[] byteArray0 = new byte[8];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      PcxImagingParameters pcxImagingParameters0 = dcxImageParser0.getDefaultParameters();
      try { 
        dcxImageParser0.getBufferedImage((ByteSource) byteSourceArray0, pcxImagingParameters0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Valid DCX File: file id incorrect
         //
         verifyException("org.apache.commons.imaging.formats.dcx.DcxImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      PcxImagingParameters pcxImagingParameters0 = dcxImageParser0.getDefaultParameters();
      // Undeclared exception!
      try { 
        dcxImageParser0.getBufferedImage((ByteSource) null, pcxImagingParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.dcx.DcxImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(dataInputStream0, "{rg.ap8che.commons.io.filefilt}r.DirectoryFileFilter");
      // Undeclared exception!
      try { 
        dcxImageParser0.getBufferedImage((ByteSource) byteSourceInputStream0, (PcxImagingParameters) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      byte[] byteArray0 = new byte[2];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      PcxImagingParameters pcxImagingParameters0 = dcxImageParser0.getDefaultParameters();
      try { 
        dcxImageParser0.getBufferedImage((ByteSource) byteSourceArray0, pcxImagingParameters0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid DCX File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      MockFile mockFile0 = new MockFile("xxNYm(B|ni._#[|$-Q");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      try { 
        dcxImageParser0.getBufferedImage((ByteSource) byteSourceFile0, pcxImagingParameters0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      // Undeclared exception!
      try { 
        dcxImageParser0.getAllBufferedImages((ByteSource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.dcx.DcxImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0, (byte)47);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(pushbackInputStream0, "wlbAG[tO-<");
      // Undeclared exception!
      try { 
        dcxImageParser0.getAllBufferedImages((ByteSource) byteSourceInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      MockFile mockFile0 = new MockFile("org.apache.commons.io.file.StandardDeleteOption");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      try { 
        dcxImageParser0.getAllBufferedImages((ByteSource) byteSourceFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      try { 
        dcxImageParser0.dumpImageFile((PrintWriter) mockPrintWriter0, (ByteSource) byteSourceArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Valid DCX File: file id incorrect
         //
         verifyException("org.apache.commons.imaging.formats.dcx.DcxImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4B");
      // Undeclared exception!
      try { 
        dcxImageParser0.dumpImageFile((PrintWriter) mockPrintWriter0, (ByteSource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.dcx.DcxImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      byte[] byteArray0 = new byte[0];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        dcxImageParser0.dumpImageFile((PrintWriter) null, (ByteSource) byteSourceArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid DCX File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      MockFile mockFile0 = new MockFile("Dcx-Custom", "Dcx-Custom");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      try { 
        dcxImageParser0.dumpImageFile((PrintWriter) null, (ByteSource) byteSourceFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      PrintStream printStream0 = DebugGraphics.logStream();
      // Undeclared exception!
      try { 
        dcxImageParser0.writeImage((BufferedImage) null, (OutputStream) printStream0, pcxImagingParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte)24;
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("PageTable", byteArray0);
      try { 
        dcxImageParser0.getAllBufferedImages((ByteSource) byteSourceArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid DCX File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      String string0 = dcxImageParser0.getDefaultExtension();
      assertEquals("dcx", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      PcxImagingParameters pcxImagingParameters0 = dcxImageParser0.getDefaultParameters();
      byte[] byteArray0 = dcxImageParser0.getICCProfileBytes((ByteSource) null, pcxImagingParameters0);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      ImageFormat[] imageFormatArray0 = dcxImageParser0.getAcceptedTypes();
      assertEquals(1, imageFormatArray0.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      byte[] byteArray0 = new byte[8];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      PcxImagingParameters pcxImagingParameters0 = dcxImageParser0.getDefaultParameters();
      Dimension dimension0 = dcxImageParser0.getImageSize((ByteSource) byteSourceArray0, pcxImagingParameters0);
      assertNull(dimension0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      String[] stringArray0 = dcxImageParser0.getAcceptedExtensions();
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      String string0 = dcxImageParser0.getName();
      assertEquals("Dcx-Custom", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      PcxImagingParameters pcxImagingParameters0 = dcxImageParser0.getDefaultParameters();
      ImageInfo imageInfo0 = dcxImageParser0.getImageInfo((ByteSource) null, pcxImagingParameters0);
      assertNull(imageInfo0);
  }
}
