/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 20:23:05 GMT 2025
 */

package org.apache.commons.imaging.formats.png;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.commons.imaging.formats.png.BitParser;
import org.apache.commons.imaging.formats.png.FilterType;
import org.apache.commons.imaging.formats.png.GammaCorrection;
import org.apache.commons.imaging.formats.png.PngColorType;
import org.apache.commons.imaging.formats.png.ScanExpediterInterlaced;
import org.apache.commons.imaging.formats.png.ScanExpediterSimple;
import org.apache.commons.imaging.formats.png.chunks.PngChunkPlte;
import org.apache.commons.imaging.formats.png.scanlinefilters.ScanlineFilter;
import org.apache.commons.imaging.formats.png.transparencyfilters.TransparencyFilter;
import org.apache.commons.imaging.formats.png.transparencyfilters.TransparencyFilterGrayscale;
import org.apache.commons.imaging.formats.png.transparencyfilters.TransparencyFilterTrueColor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ScanExpediter_ESTest extends ScanExpediter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GammaCorrection gammaCorrection0 = new GammaCorrection(0, 0);
      byte[] byteArray0 = new byte[9];
      byteArray0[5] = (byte)62;
      TransparencyFilterTrueColor transparencyFilterTrueColor0 = new TransparencyFilterTrueColor(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)5, 4);
      PngColorType pngColorType0 = PngColorType.GREYSCALE_WITH_ALPHA;
      ScanExpediterInterlaced scanExpediterInterlaced0 = new ScanExpediterInterlaced(3, 2, byteArrayInputStream0, (BufferedImage) null, pngColorType0, 3851, 2, (PngChunkPlte) null, gammaCorrection0, transparencyFilterTrueColor0);
      try { 
        scanExpediterInterlaced0.getNextScanline(byteArrayInputStream0, 352, byteArray0, (byte) (-113));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // PNG: unknown filterType: 62
         //
         verifyException("org.apache.commons.imaging.formats.png.ScanExpediter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PngColorType pngColorType0 = PngColorType.INDEXED_COLOR;
      GammaCorrection gammaCorrection0 = new GammaCorrection(8, 4);
      byte[] byteArray0 = new byte[8];
      TransparencyFilterTrueColor transparencyFilterTrueColor0 = new TransparencyFilterTrueColor(byteArray0);
      ScanExpediterInterlaced scanExpediterInterlaced0 = new ScanExpediterInterlaced(8, 8, (InputStream) null, (BufferedImage) null, pngColorType0, 4, 4, (PngChunkPlte) null, gammaCorrection0, transparencyFilterTrueColor0);
      FilterType filterType0 = FilterType.AVERAGE;
      byte[] byteArray1 = scanExpediterInterlaced0.unfilterScanline(filterType0, byteArray0, byteArray0, 777);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PngColorType pngColorType0 = PngColorType.INDEXED_COLOR;
      GammaCorrection gammaCorrection0 = new GammaCorrection(8, 4);
      byte[] byteArray0 = new byte[8];
      TransparencyFilterTrueColor transparencyFilterTrueColor0 = new TransparencyFilterTrueColor(byteArray0);
      ScanExpediterInterlaced scanExpediterInterlaced0 = new ScanExpediterInterlaced(2089, (byte)125, (InputStream) null, (BufferedImage) null, pngColorType0, (byte) (-1), 1, (PngChunkPlte) null, gammaCorrection0, transparencyFilterTrueColor0);
      FilterType filterType0 = FilterType.SUB;
      // Undeclared exception!
      try { 
        scanExpediterInterlaced0.unfilterScanline(filterType0, byteArray0, byteArray0, (-2669));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2669
         //
         verifyException("org.apache.commons.imaging.formats.png.scanlinefilters.ScanlineFilterSub", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GammaCorrection gammaCorrection0 = new GammaCorrection(0, 0);
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte) (-16);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PngColorType pngColorType0 = PngColorType.TRUE_COLOR;
      TransparencyFilterTrueColor transparencyFilterTrueColor0 = new TransparencyFilterTrueColor(byteArray0);
      ScanExpediterInterlaced scanExpediterInterlaced0 = new ScanExpediterInterlaced(450, (-55), byteArrayInputStream0, (BufferedImage) null, pngColorType0, (-1883), 16, (PngChunkPlte) null, gammaCorrection0, transparencyFilterTrueColor0);
      BitParser bitParser0 = new BitParser(byteArray0, 16, 16);
      int int0 = scanExpediterInterlaced0.getRGB(bitParser0, (byte)0);
      assertEquals((-16777216), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GammaCorrection gammaCorrection0 = new GammaCorrection(0, 0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PngColorType pngColorType0 = PngColorType.TRUE_COLOR;
      TransparencyFilterTrueColor transparencyFilterTrueColor0 = new TransparencyFilterTrueColor(byteArray0);
      ScanExpediterInterlaced scanExpediterInterlaced0 = new ScanExpediterInterlaced(450, (-55), byteArrayInputStream0, (BufferedImage) null, pngColorType0, (-1883), 16, (PngChunkPlte) null, gammaCorrection0, transparencyFilterTrueColor0);
      BitParser bitParser0 = new BitParser(byteArray0, 16, 16);
      int int0 = scanExpediterInterlaced0.getRGB(bitParser0, (byte)0);
      assertEquals((-16777216), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GammaCorrection gammaCorrection0 = new GammaCorrection(8, 2);
      byte[] byteArray0 = new byte[8];
      TransparencyFilterTrueColor transparencyFilterTrueColor0 = new TransparencyFilterTrueColor(byteArray0);
      PngColorType pngColorType0 = PngColorType.TRUE_COLOR;
      ScanExpediterInterlaced scanExpediterInterlaced0 = new ScanExpediterInterlaced(2510, 8, (InputStream) null, (BufferedImage) null, pngColorType0, (-1696), 5, (PngChunkPlte) null, gammaCorrection0, transparencyFilterTrueColor0);
      BitParser bitParser0 = new BitParser(byteArray0, 8, 4);
      int int0 = scanExpediterInterlaced0.getRGB(bitParser0, 4);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GammaCorrection gammaCorrection0 = new GammaCorrection(8, 2);
      byte[] byteArray0 = new byte[8];
      TransparencyFilterTrueColor transparencyFilterTrueColor0 = new TransparencyFilterTrueColor(byteArray0);
      PngColorType pngColorType0 = PngColorType.GREYSCALE;
      ScanExpediterInterlaced scanExpediterInterlaced0 = new ScanExpediterInterlaced(2510, 8, (InputStream) null, (BufferedImage) null, pngColorType0, (-1696), 5, (PngChunkPlte) null, gammaCorrection0, transparencyFilterTrueColor0);
      BitParser bitParser0 = new BitParser(byteArray0, 8, 4);
      int int0 = scanExpediterInterlaced0.getRGB(bitParser0, 7);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PngColorType pngColorType0 = PngColorType.INDEXED_COLOR;
      GammaCorrection gammaCorrection0 = new GammaCorrection(8, 4);
      byte[] byteArray0 = new byte[8];
      TransparencyFilterTrueColor transparencyFilterTrueColor0 = new TransparencyFilterTrueColor(byteArray0);
      ScanExpediterInterlaced scanExpediterInterlaced0 = new ScanExpediterInterlaced(24, (-376), (InputStream) null, (BufferedImage) null, pngColorType0, (byte) (-1), (byte) (-7), (PngChunkPlte) null, gammaCorrection0, transparencyFilterTrueColor0);
      int int0 = scanExpediterInterlaced0.getPixelRGB(0, 3566, 808);
      assertEquals((-16716248), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GammaCorrection gammaCorrection0 = new GammaCorrection(3, 3);
      PngColorType pngColorType0 = PngColorType.TRUE_COLOR_WITH_ALPHA;
      BufferedImage bufferedImage0 = new BufferedImage(2, 5, 5);
      byte[] byteArray0 = new byte[3];
      TransparencyFilterGrayscale transparencyFilterGrayscale0 = new TransparencyFilterGrayscale(byteArray0);
      ScanExpediterInterlaced scanExpediterInterlaced0 = new ScanExpediterInterlaced(3, 1729, (InputStream) null, bufferedImage0, pngColorType0, 5, 5, (PngChunkPlte) null, gammaCorrection0, transparencyFilterGrayscale0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GammaCorrection gammaCorrection0 = new GammaCorrection(8, 4);
      byte[] byteArray0 = new byte[8];
      TransparencyFilterTrueColor transparencyFilterTrueColor0 = new TransparencyFilterTrueColor(byteArray0);
      PngColorType pngColorType0 = PngColorType.GREYSCALE;
      ScanExpediterInterlaced scanExpediterInterlaced0 = new ScanExpediterInterlaced(1, (-16777216), (InputStream) null, (BufferedImage) null, pngColorType0, 5, 8, (PngChunkPlte) null, gammaCorrection0, transparencyFilterTrueColor0);
      scanExpediterInterlaced0.drive();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GammaCorrection gammaCorrection0 = new GammaCorrection(0, 0);
      byte[] byteArray0 = new byte[8];
      TransparencyFilterTrueColor transparencyFilterTrueColor0 = new TransparencyFilterTrueColor(byteArray0);
      PngChunkPlte pngChunkPlte0 = new PngChunkPlte(0, 4, 2, byteArray0);
      PngColorType pngColorType0 = PngColorType.INDEXED_COLOR;
      ScanExpediterInterlaced scanExpediterInterlaced0 = new ScanExpediterInterlaced(2, 1, (InputStream) null, (BufferedImage) null, pngColorType0, 19, 0, pngChunkPlte0, gammaCorrection0, transparencyFilterTrueColor0);
      BitParser bitParser0 = new BitParser(byteArray0, 766, 0);
      try { 
        scanExpediterInterlaced0.getRGB(bitParser0, 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // PNG: unknown Palette reference: 0
         //
         verifyException("org.apache.commons.imaging.formats.png.chunks.PngChunkPlte", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GammaCorrection gammaCorrection0 = new GammaCorrection(8, 4);
      byte[] byteArray0 = new byte[8];
      PngColorType pngColorType0 = PngColorType.GREYSCALE;
      TransparencyFilterTrueColor transparencyFilterTrueColor0 = new TransparencyFilterTrueColor(byteArray0);
      ScanExpediterInterlaced scanExpediterInterlaced0 = new ScanExpediterInterlaced((byte)1, 4, (InputStream) null, (BufferedImage) null, pngColorType0, (byte)119, (byte)1, (PngChunkPlte) null, gammaCorrection0, transparencyFilterTrueColor0);
      FilterType filterType0 = FilterType.NONE;
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = scanExpediterInterlaced0.unfilterScanline(filterType0, byteArray1, byteArray0, (-4522));
      assertNotSame(byteArray2, byteArray1);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PngColorType pngColorType0 = PngColorType.INDEXED_COLOR;
      GammaCorrection gammaCorrection0 = new GammaCorrection(8, 8);
      byte[] byteArray0 = new byte[8];
      TransparencyFilterTrueColor transparencyFilterTrueColor0 = new TransparencyFilterTrueColor(byteArray0);
      ScanExpediterInterlaced scanExpediterInterlaced0 = new ScanExpediterInterlaced(24, 8, (InputStream) null, (BufferedImage) null, pngColorType0, (byte) (-1), (byte) (-7), (PngChunkPlte) null, gammaCorrection0, transparencyFilterTrueColor0);
      FilterType filterType0 = FilterType.UP;
      ScanlineFilter scanlineFilter0 = scanExpediterInterlaced0.getScanlineFilter(filterType0, 2);
      assertNotNull(scanlineFilter0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GammaCorrection gammaCorrection0 = new GammaCorrection(8, 4);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)25;
      TransparencyFilterTrueColor transparencyFilterTrueColor0 = new TransparencyFilterTrueColor(byteArray0);
      PngColorType pngColorType0 = PngColorType.GREYSCALE_WITH_ALPHA;
      ScanExpediterInterlaced scanExpediterInterlaced0 = new ScanExpediterInterlaced((byte)0, 5, (InputStream) null, (BufferedImage) null, pngColorType0, 8, (byte)0, (PngChunkPlte) null, gammaCorrection0, transparencyFilterTrueColor0);
      BitParser bitParser0 = new BitParser(byteArray0, 0, 4);
      int int0 = scanExpediterInterlaced0.getRGB(bitParser0, (byte)0);
      assertEquals(285278465, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      TransparencyFilterTrueColor transparencyFilterTrueColor0 = new TransparencyFilterTrueColor(byteArray0);
      PngColorType pngColorType0 = PngColorType.INDEXED_COLOR;
      GammaCorrection gammaCorrection0 = new GammaCorrection((-22), 0.0);
      ScanExpediterInterlaced scanExpediterInterlaced0 = new ScanExpediterInterlaced((-22), (-22), (InputStream) null, (BufferedImage) null, pngColorType0, (-22), (-22), (PngChunkPlte) null, gammaCorrection0, transparencyFilterTrueColor0);
      int int0 = scanExpediterInterlaced0.getPixelARGB((-512), (-512), 0, (-512));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      TransparencyFilterTrueColor transparencyFilterTrueColor0 = new TransparencyFilterTrueColor(byteArray0);
      PngColorType pngColorType0 = PngColorType.INDEXED_COLOR;
      GammaCorrection gammaCorrection0 = new GammaCorrection((-22), 0.0);
      ScanExpediterInterlaced scanExpediterInterlaced0 = new ScanExpediterInterlaced((-22), (-22), (InputStream) null, (BufferedImage) null, pngColorType0, (-22), (-22), (PngChunkPlte) null, gammaCorrection0, transparencyFilterTrueColor0);
      int int0 = scanExpediterInterlaced0.getPixelARGB(0, 31, 3, (-888));
      assertEquals(2032520, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GammaCorrection gammaCorrection0 = new GammaCorrection(8, 4);
      byte[] byteArray0 = new byte[8];
      TransparencyFilterTrueColor transparencyFilterTrueColor0 = new TransparencyFilterTrueColor(byteArray0);
      PngColorType pngColorType0 = PngColorType.GREYSCALE_WITH_ALPHA;
      ScanExpediterInterlaced scanExpediterInterlaced0 = new ScanExpediterInterlaced((byte)0, 5, (InputStream) null, (BufferedImage) null, pngColorType0, 8, (byte)0, (PngChunkPlte) null, gammaCorrection0, transparencyFilterTrueColor0);
      int int0 = scanExpediterInterlaced0.getPixelARGB((byte) (-1), 2, 3723, 5);
      assertEquals((-16610555), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GammaCorrection gammaCorrection0 = new GammaCorrection(0, 0);
      byte[] byteArray0 = new byte[8];
      TransparencyFilterTrueColor transparencyFilterTrueColor0 = new TransparencyFilterTrueColor(byteArray0);
      PngColorType pngColorType0 = PngColorType.TRUE_COLOR_WITH_ALPHA;
      ScanExpediterInterlaced scanExpediterInterlaced0 = new ScanExpediterInterlaced(0, 0, (InputStream) null, (BufferedImage) null, pngColorType0, (byte)0, 5, (PngChunkPlte) null, gammaCorrection0, transparencyFilterTrueColor0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      scanExpediterInterlaced0.getNextScanline(byteArrayInputStream0, 0, byteArray0, 0);
      assertEquals(7, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GammaCorrection gammaCorrection0 = new GammaCorrection(8, 4);
      byte[] byteArray0 = new byte[8];
      TransparencyFilterTrueColor transparencyFilterTrueColor0 = new TransparencyFilterTrueColor(byteArray0);
      PngColorType pngColorType0 = PngColorType.GREYSCALE;
      ScanExpediterInterlaced scanExpediterInterlaced0 = new ScanExpediterInterlaced(1, (-16777216), (InputStream) null, (BufferedImage) null, pngColorType0, 5, 8, (PngChunkPlte) null, gammaCorrection0, transparencyFilterTrueColor0);
      int int0 = scanExpediterInterlaced0.getBitsToBytesRoundingUp(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PngColorType pngColorType0 = PngColorType.INDEXED_COLOR;
      GammaCorrection gammaCorrection0 = new GammaCorrection(8, 4);
      byte[] byteArray0 = new byte[8];
      TransparencyFilterTrueColor transparencyFilterTrueColor0 = new TransparencyFilterTrueColor(byteArray0);
      ScanExpediterInterlaced scanExpediterInterlaced0 = new ScanExpediterInterlaced(24, (-376), (InputStream) null, (BufferedImage) null, pngColorType0, (byte) (-1), (byte) (-7), (PngChunkPlte) null, gammaCorrection0, transparencyFilterTrueColor0);
      int int0 = scanExpediterInterlaced0.getBitsToBytesRoundingUp(138);
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GammaCorrection gammaCorrection0 = new GammaCorrection(8, 4);
      byte[] byteArray0 = new byte[8];
      TransparencyFilterTrueColor transparencyFilterTrueColor0 = new TransparencyFilterTrueColor(byteArray0);
      PngColorType pngColorType0 = PngColorType.GREYSCALE_WITH_ALPHA;
      ScanExpediterInterlaced scanExpediterInterlaced0 = new ScanExpediterInterlaced((byte)0, 5, (InputStream) null, (BufferedImage) null, pngColorType0, 8, (byte)0, (PngChunkPlte) null, gammaCorrection0, transparencyFilterTrueColor0);
      int int0 = scanExpediterInterlaced0.getBitsToBytesRoundingUp((-3006));
      assertEquals((-374), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GammaCorrection gammaCorrection0 = new GammaCorrection(3, 3);
      byte[] byteArray0 = new byte[13];
      TransparencyFilterTrueColor transparencyFilterTrueColor0 = new TransparencyFilterTrueColor(byteArray0);
      PngColorType pngColorType0 = PngColorType.TRUE_COLOR;
      ScanExpediterInterlaced scanExpediterInterlaced0 = new ScanExpediterInterlaced(3, 3, (InputStream) null, (BufferedImage) null, pngColorType0, 3, 3, (PngChunkPlte) null, gammaCorrection0, transparencyFilterTrueColor0);
      FilterType filterType0 = FilterType.PAETH;
      // Undeclared exception!
      try { 
        scanExpediterInterlaced0.unfilterScanline(filterType0, (byte[]) null, (byte[]) null, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.png.ScanExpediter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GammaCorrection gammaCorrection0 = new GammaCorrection((-12), (-12));
      byte[] byteArray0 = new byte[8];
      TransparencyFilterTrueColor transparencyFilterTrueColor0 = new TransparencyFilterTrueColor(byteArray0);
      PngColorType pngColorType0 = PngColorType.GREYSCALE_WITH_ALPHA;
      ScanExpediterInterlaced scanExpediterInterlaced0 = new ScanExpediterInterlaced((-12), (-12), (InputStream) null, (BufferedImage) null, pngColorType0, (byte)0, (-12), (PngChunkPlte) null, gammaCorrection0, transparencyFilterTrueColor0);
      BitParser bitParser0 = new BitParser(byteArray0, (-12), (-12));
      // Undeclared exception!
      try { 
        scanExpediterInterlaced0.getRGB(bitParser0, (-12));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18
         //
         verifyException("org.apache.commons.imaging.formats.png.BitParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GammaCorrection gammaCorrection0 = new GammaCorrection(0, 0);
      byte[] byteArray0 = new byte[8];
      TransparencyFilterTrueColor transparencyFilterTrueColor0 = new TransparencyFilterTrueColor(byteArray0);
      PngColorType pngColorType0 = PngColorType.GREYSCALE_WITH_ALPHA;
      ScanExpediterInterlaced scanExpediterInterlaced0 = new ScanExpediterInterlaced(0, 0, (InputStream) null, (BufferedImage) null, pngColorType0, (byte)0, 0, (PngChunkPlte) null, gammaCorrection0, transparencyFilterTrueColor0);
      BitParser bitParser0 = new BitParser(byteArray0, 0, 0);
      // Undeclared exception!
      try { 
        scanExpediterInterlaced0.getRGB(bitParser0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.formats.png.BitParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GammaCorrection gammaCorrection0 = new GammaCorrection((-18), (-18));
      byte[] byteArray0 = new byte[8];
      TransparencyFilterTrueColor transparencyFilterTrueColor0 = new TransparencyFilterTrueColor(byteArray0);
      PngColorType pngColorType0 = PngColorType.INDEXED_COLOR;
      ScanExpediterInterlaced scanExpediterInterlaced0 = new ScanExpediterInterlaced((-18), (-18), (InputStream) null, (BufferedImage) null, pngColorType0, (-18), (-18), (PngChunkPlte) null, gammaCorrection0, transparencyFilterTrueColor0);
      // Undeclared exception!
      try { 
        scanExpediterInterlaced0.getNextScanline((InputStream) null, (-18), byteArray0, (-18));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.png.ScanExpediter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GammaCorrection gammaCorrection0 = new GammaCorrection(3, 3);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      TransparencyFilterTrueColor transparencyFilterTrueColor0 = new TransparencyFilterTrueColor(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PngColorType pngColorType0 = PngColorType.INDEXED_COLOR;
      ScanExpediterInterlaced scanExpediterInterlaced0 = new ScanExpediterInterlaced((byte)4, 8, byteArrayInputStream0, (BufferedImage) null, pngColorType0, (byte)4, 3, (PngChunkPlte) null, gammaCorrection0, transparencyFilterTrueColor0);
      // Undeclared exception!
      try { 
        scanExpediterInterlaced0.getNextScanline(byteArrayInputStream0, (byte)4, byteArray0, (-188));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 188
         //
         verifyException("org.apache.commons.imaging.formats.png.scanlinefilters.ScanlineFilterPaeth", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GammaCorrection gammaCorrection0 = new GammaCorrection((-27), (-27));
      byte[] byteArray0 = new byte[11];
      TransparencyFilterTrueColor transparencyFilterTrueColor0 = new TransparencyFilterTrueColor(byteArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PngColorType pngColorType0 = PngColorType.TRUE_COLOR;
      ScanExpediterInterlaced scanExpediterInterlaced0 = new ScanExpediterInterlaced(2, 2, pipedInputStream0, (BufferedImage) null, pngColorType0, 2, (-27), (PngChunkPlte) null, gammaCorrection0, transparencyFilterTrueColor0);
      try { 
        scanExpediterInterlaced0.getNextScanline(pipedInputStream0, 5139, byteArray0, 5619);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GammaCorrection gammaCorrection0 = new GammaCorrection(28, 28);
      byte[] byteArray0 = new byte[8];
      TransparencyFilterTrueColor transparencyFilterTrueColor0 = new TransparencyFilterTrueColor(byteArray0);
      PngColorType pngColorType0 = PngColorType.GREYSCALE;
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ScanExpediterSimple scanExpediterSimple0 = new ScanExpediterSimple(416, 416, sequenceInputStream0, (BufferedImage) null, pngColorType0, 28, 0, (PngChunkPlte) null, gammaCorrection0, transparencyFilterTrueColor0);
      try { 
        scanExpediterSimple0.drive();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // PNG: missing filter type
         //
         verifyException("org.apache.commons.imaging.formats.png.ScanExpediter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GammaCorrection gammaCorrection0 = new GammaCorrection(3, 3);
      byte[] byteArray0 = new byte[13];
      TransparencyFilterTrueColor transparencyFilterTrueColor0 = new TransparencyFilterTrueColor(byteArray0);
      PngColorType pngColorType0 = PngColorType.GREYSCALE_WITH_ALPHA;
      ScanExpediterInterlaced scanExpediterInterlaced0 = new ScanExpediterInterlaced(3, 3, (InputStream) null, (BufferedImage) null, pngColorType0, (byte)0, 3, (PngChunkPlte) null, gammaCorrection0, transparencyFilterTrueColor0);
      // Undeclared exception!
      try { 
        scanExpediterInterlaced0.drive();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.png.ScanExpediter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GammaCorrection gammaCorrection0 = new GammaCorrection(3, 3);
      byte[] byteArray0 = new byte[6];
      TransparencyFilterTrueColor transparencyFilterTrueColor0 = new TransparencyFilterTrueColor(byteArray0);
      PngColorType pngColorType0 = PngColorType.TRUE_COLOR_WITH_ALPHA;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ScanExpediterInterlaced scanExpediterInterlaced0 = new ScanExpediterInterlaced((byte)4, 3, byteArrayInputStream0, (BufferedImage) null, pngColorType0, (byte)4, 3, (PngChunkPlte) null, gammaCorrection0, transparencyFilterTrueColor0);
      scanExpediterInterlaced0.getNextScanline(byteArrayInputStream0, (byte)4, byteArray0, (byte)4);
      try { 
        scanExpediterInterlaced0.drive();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // PNG: missing image data count: -1 read: 0 length: 1
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      TransparencyFilterTrueColor transparencyFilterTrueColor0 = new TransparencyFilterTrueColor(byteArray0);
      PngColorType pngColorType0 = PngColorType.TRUE_COLOR_WITH_ALPHA;
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ScanExpediterInterlaced scanExpediterInterlaced0 = new ScanExpediterInterlaced((-16777216), 3, sequenceInputStream0, (BufferedImage) null, pngColorType0, (byte)0, 2, (PngChunkPlte) null, (GammaCorrection) null, transparencyFilterTrueColor0);
      BitParser bitParser0 = new BitParser(byteArray0, 0, (byte)2);
      int int0 = scanExpediterInterlaced0.getRGB(bitParser0, (-382));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GammaCorrection gammaCorrection0 = new GammaCorrection(8, 8);
      byte[] byteArray0 = new byte[8];
      TransparencyFilterTrueColor transparencyFilterTrueColor0 = new TransparencyFilterTrueColor(byteArray0);
      PngColorType pngColorType0 = PngColorType.INDEXED_COLOR;
      ScanExpediterInterlaced scanExpediterInterlaced0 = new ScanExpediterInterlaced(8, 8, (InputStream) null, (BufferedImage) null, pngColorType0, 8, 8, (PngChunkPlte) null, gammaCorrection0, transparencyFilterTrueColor0);
      try { 
        scanExpediterInterlaced0.getRGB((BitParser) null, 8);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // A PLTE chunk is required for an indexed color type.
         //
         verifyException("org.apache.commons.imaging.formats.png.ScanExpediter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GammaCorrection gammaCorrection0 = new GammaCorrection((-988.0715324412), (-3948.942907));
      byte[] byteArray0 = new byte[6];
      PngColorType pngColorType0 = PngColorType.GREYSCALE;
      ScanExpediterInterlaced scanExpediterInterlaced0 = new ScanExpediterInterlaced(2110, (-18), (InputStream) null, (BufferedImage) null, pngColorType0, (byte) (-85), 0, (PngChunkPlte) null, gammaCorrection0, (TransparencyFilter) null);
      BitParser bitParser0 = new BitParser(byteArray0, (-776), 16);
      int int0 = scanExpediterInterlaced0.getRGB(bitParser0, 0);
      assertEquals((-16777216), int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      TransparencyFilterTrueColor transparencyFilterTrueColor0 = new TransparencyFilterTrueColor(byteArray0);
      PngColorType pngColorType0 = PngColorType.GREYSCALE;
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ScanExpediterInterlaced scanExpediterInterlaced0 = new ScanExpediterInterlaced((-16777216), 3, sequenceInputStream0, (BufferedImage) null, pngColorType0, (byte)0, 2, (PngChunkPlte) null, (GammaCorrection) null, transparencyFilterTrueColor0);
      BitParser bitParser0 = new BitParser(byteArray0, 0, (byte)2);
      int int0 = scanExpediterInterlaced0.getRGB(bitParser0, (-382));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GammaCorrection gammaCorrection0 = new GammaCorrection(0, 0);
      byte[] byteArray0 = new byte[8];
      TransparencyFilterTrueColor transparencyFilterTrueColor0 = new TransparencyFilterTrueColor(byteArray0);
      PngColorType pngColorType0 = PngColorType.TRUE_COLOR_WITH_ALPHA;
      ScanExpediterInterlaced scanExpediterInterlaced0 = new ScanExpediterInterlaced(0, 0, (InputStream) null, (BufferedImage) null, pngColorType0, (byte)0, 5, (PngChunkPlte) null, gammaCorrection0, transparencyFilterTrueColor0);
      BitParser bitParser0 = new BitParser(byteArray0, 5, 5);
      int int0 = scanExpediterInterlaced0.getRGB(bitParser0, 5);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      TransparencyFilterTrueColor transparencyFilterTrueColor0 = new TransparencyFilterTrueColor(byteArray0);
      PngColorType pngColorType0 = PngColorType.GREYSCALE_WITH_ALPHA;
      ScanExpediterInterlaced scanExpediterInterlaced0 = new ScanExpediterInterlaced(3, 3, (InputStream) null, (BufferedImage) null, pngColorType0, (byte)0, 3, (PngChunkPlte) null, (GammaCorrection) null, transparencyFilterTrueColor0);
      BitParser bitParser0 = new BitParser(byteArray0, 3, 3);
      int int0 = scanExpediterInterlaced0.getRGB(bitParser0, 3);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      GammaCorrection gammaCorrection0 = new GammaCorrection(0, 0);
      byte[] byteArray0 = new byte[9];
      TransparencyFilterTrueColor transparencyFilterTrueColor0 = new TransparencyFilterTrueColor(byteArray0);
      PngChunkPlte pngChunkPlte0 = new PngChunkPlte(0, 0, 0, byteArray0);
      PngColorType pngColorType0 = PngColorType.INDEXED_COLOR;
      ScanExpediterInterlaced scanExpediterInterlaced0 = new ScanExpediterInterlaced(0, 0, (InputStream) null, (BufferedImage) null, pngColorType0, 0, 0, pngChunkPlte0, gammaCorrection0, transparencyFilterTrueColor0);
      // Undeclared exception!
      try { 
        scanExpediterInterlaced0.getRGB((BitParser) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.png.ScanExpediter", e);
      }
  }
}
