/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 20:47:15 GMT 2025
 */

package org.apache.commons.imaging.formats.tiff.datareaders;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.RasterFormatException;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteOrder;
import java.util.LinkedList;
import org.apache.commons.imaging.formats.tiff.TiffDirectory;
import org.apache.commons.imaging.formats.tiff.TiffElement;
import org.apache.commons.imaging.formats.tiff.TiffField;
import org.apache.commons.imaging.formats.tiff.TiffImageData;
import org.apache.commons.imaging.formats.tiff.constants.TiffPlanarConfiguration;
import org.apache.commons.imaging.formats.tiff.datareaders.BitInputStream;
import org.apache.commons.imaging.formats.tiff.datareaders.DataReaderStrips;
import org.apache.commons.imaging.formats.tiff.datareaders.DataReaderTiled;
import org.apache.commons.imaging.formats.tiff.datareaders.ImageDataReader;
import org.apache.commons.imaging.formats.tiff.photometricinterpreters.PhotometricInterpreter;
import org.apache.commons.imaging.formats.tiff.photometricinterpreters.PhotometricInterpreterCieLab;
import org.apache.commons.imaging.formats.tiff.photometricinterpreters.PhotometricInterpreterLogLuv;
import org.apache.commons.imaging.formats.tiff.photometricinterpreters.PhotometricInterpreterRgb;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ImageDataReader_ESTest extends ImageDataReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 62, 62);
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(62, tiffImageData_Tiles0.getTileHeight());
      assertEquals(62, tiffImageData_Tiles0.getTileWidth());
      assertNotNull(tiffImageData_Tiles0);
      
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffDirectory tiffDirectory0 = new TiffDirectory(62, linkedList0, 62, 62, byteOrder0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertNotNull(tiffDirectory0);
      assertEquals(62L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(62L, tiffDirectory0.offset);
      assertEquals(62, tiffDirectory0.type);
      assertEquals(6, tiffDirectory0.length);
      
      int[] intArray0 = new int[4];
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      DataReaderTiled dataReaderTiled0 = (DataReaderTiled)tiffImageData_Tiles0.getDataReader(tiffDirectory0, (PhotometricInterpreter) null, 62, intArray0, 62, 6, 6, 6, 6, tiffPlanarConfiguration0, byteOrder0);
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(62, tiffImageData_Tiles0.getTileHeight());
      assertEquals(62, tiffImageData_Tiles0.getTileWidth());
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertEquals(4, intArray0.length);
      assertNotNull(dataReaderTiled0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(62L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(62L, tiffDirectory0.offset);
      assertEquals(62, tiffDirectory0.type);
      assertEquals(6, tiffDirectory0.length);
      
      // Undeclared exception!
      try { 
        dataReaderTiled0.transferBlockToRaster(6, 62, 62, 8, intArray0, 62, 62, 6, 8, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 0, 0);
      assertEquals(0, tiffImageData_Tiles0.getTileHeight());
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(0, tiffImageData_Tiles0.getTileWidth());
      assertNotNull(tiffImageData_Tiles0);
      
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      TiffDirectory tiffDirectory0 = new TiffDirectory(0, linkedList0, 0, 0, (ByteOrder) null);
      assertEquals(0, linkedList0.size());
      assertEquals("Root", tiffDirectory0.description());
      assertNotNull(tiffDirectory0);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(0L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(0, tiffDirectory0.type);
      assertEquals(0L, tiffDirectory0.offset);
      
      int[] intArray0 = new int[6];
      PhotometricInterpreterRgb photometricInterpreterRgb0 = new PhotometricInterpreterRgb((-1903), intArray0, 6, 9, 9);
      assertEquals(6, intArray0.length);
      assertNotNull(photometricInterpreterRgb0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      DataReaderTiled dataReaderTiled0 = (DataReaderTiled)tiffImageData_Tiles0.getDataReader(tiffDirectory0, photometricInterpreterRgb0, (-1687), intArray0, (-1903), 0, (-1903), 393, 6, tiffPlanarConfiguration0, byteOrder0);
      assertEquals(0, tiffImageData_Tiles0.getTileHeight());
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(0, tiffImageData_Tiles0.getTileWidth());
      assertEquals(0, linkedList0.size());
      assertEquals("Root", tiffDirectory0.description());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(6, intArray0.length);
      assertNotNull(dataReaderTiled0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(0L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(0, tiffDirectory0.type);
      assertEquals(0L, tiffDirectory0.offset);
      
      byte[] byteArray0 = new byte[6];
      int[] intArray1 = dataReaderTiled0.unpackIntSamples(0, 6, 50733, byteArray0, 1831, 9, (ByteOrder) null);
      assertEquals(0, tiffImageData_Tiles0.getTileHeight());
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(0, tiffImageData_Tiles0.getTileWidth());
      assertEquals(0, linkedList0.size());
      assertEquals("Root", tiffDirectory0.description());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, byteArray0.length);
      assertEquals(304398, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(0L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(0, tiffDirectory0.type);
      assertEquals(0L, tiffDirectory0.offset);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TiffElement.DataElement[] tiffElement_DataElementArray0 = new TiffElement.DataElement[1];
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffDirectory tiffDirectory0 = new TiffDirectory(18, linkedList0, 18, 18, byteOrder0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertNotNull(tiffDirectory0);
      assertEquals(18L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(18, tiffDirectory0.type);
      assertEquals(18L, tiffDirectory0.offset);
      
      int[] intArray0 = new int[3];
      PhotometricInterpreterLogLuv photometricInterpreterLogLuv0 = new PhotometricInterpreterLogLuv(18, intArray0, 18, (-27), 18);
      assertEquals(3, intArray0.length);
      assertNotNull(photometricInterpreterLogLuv0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      TiffImageData.Strips tiffImageData_Strips0 = new TiffImageData.Strips(tiffElement_DataElementArray0, 18);
      assertEquals(1, tiffImageData_Strips0.getImageDataLength());
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      assertEquals(1, tiffElement_DataElementArray0.length);
      assertNotNull(tiffImageData_Strips0);
      assertEquals(18, tiffImageData_Strips0.rowsPerStrip);
      
      DataReaderStrips dataReaderStrips0 = new DataReaderStrips(tiffDirectory0, photometricInterpreterLogLuv0, 18, intArray0, (-27), 0, 18, (-27), 6, (-1765), tiffPlanarConfiguration0, byteOrder0, (-27), tiffImageData_Strips0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertEquals(1, tiffImageData_Strips0.getImageDataLength());
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      assertEquals(1, tiffElement_DataElementArray0.length);
      assertEquals(3, intArray0.length);
      assertNotNull(dataReaderStrips0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(18L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(18, tiffDirectory0.type);
      assertEquals(18L, tiffDirectory0.offset);
      assertEquals(18, tiffImageData_Strips0.rowsPerStrip);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-37);
      // Undeclared exception!
      try { 
        dataReaderStrips0.unpackIntSamples(1014, 16, 494, byteArray0, 2, 1016, byteOrder0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.ImageDataReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 0, 0);
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(0, tiffImageData_Tiles0.getTileHeight());
      assertEquals(0, tiffImageData_Tiles0.getTileWidth());
      assertNotNull(tiffImageData_Tiles0);
      
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      TiffDirectory tiffDirectory0 = new TiffDirectory(0, linkedList0, 0, 0, (ByteOrder) null);
      assertEquals(0, linkedList0.size());
      assertEquals("Root", tiffDirectory0.description());
      assertNotNull(tiffDirectory0);
      assertEquals(0L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(0L, tiffDirectory0.offset);
      assertEquals(0, tiffDirectory0.type);
      assertEquals(6, tiffDirectory0.length);
      
      int[] intArray0 = new int[6];
      PhotometricInterpreterRgb photometricInterpreterRgb0 = new PhotometricInterpreterRgb((-1903), intArray0, 6, 9, 9);
      assertEquals(6, intArray0.length);
      assertNotNull(photometricInterpreterRgb0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      DataReaderTiled dataReaderTiled0 = (DataReaderTiled)tiffImageData_Tiles0.getDataReader(tiffDirectory0, photometricInterpreterRgb0, (-1687), intArray0, 0, 4437, 0, 393, 6, tiffPlanarConfiguration0, byteOrder0);
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(0, tiffImageData_Tiles0.getTileHeight());
      assertEquals(0, tiffImageData_Tiles0.getTileWidth());
      assertEquals(0, linkedList0.size());
      assertEquals("Root", tiffDirectory0.description());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(6, intArray0.length);
      assertNotNull(dataReaderTiled0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(0L, tiffDirectory0.offset);
      assertEquals(0, tiffDirectory0.type);
      assertEquals(6, tiffDirectory0.length);
      
      byte[] byteArray0 = new byte[23];
      int[] intArray1 = dataReaderTiled0.unpackIntSamples(0, 11, 393, byteArray0, (-1849), 20, byteOrder0);
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(0, tiffImageData_Tiles0.getTileHeight());
      assertEquals(0, tiffImageData_Tiles0.getTileWidth());
      assertEquals(0, linkedList0.size());
      assertEquals("Root", tiffDirectory0.description());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(23, byteArray0.length);
      assertEquals(4323, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(0L, tiffDirectory0.offset);
      assertEquals(0, tiffDirectory0.type);
      assertEquals(6, tiffDirectory0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TiffElement.DataElement[] tiffElement_DataElementArray0 = new TiffElement.DataElement[2];
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffDirectory tiffDirectory0 = new TiffDirectory(0, linkedList0, 0, 0L, byteOrder0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Root", tiffDirectory0.description());
      assertNotNull(tiffDirectory0);
      assertEquals(0, tiffDirectory0.type);
      assertEquals(0L, tiffDirectory0.offset);
      assertEquals(0L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(6, tiffDirectory0.length);
      
      int[] intArray0 = new int[7];
      PhotometricInterpreterLogLuv photometricInterpreterLogLuv0 = new PhotometricInterpreterLogLuv(2566, intArray0, 0, 0, 0);
      assertEquals(7, intArray0.length);
      assertNotNull(photometricInterpreterLogLuv0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      TiffImageData.Strips tiffImageData_Strips0 = new TiffImageData.Strips(tiffElement_DataElementArray0, 0);
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      assertEquals(2, tiffImageData_Strips0.getImageDataLength());
      assertEquals(2, tiffElement_DataElementArray0.length);
      assertNotNull(tiffImageData_Strips0);
      assertEquals(0, tiffImageData_Strips0.rowsPerStrip);
      
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      DataReaderStrips dataReaderStrips0 = (DataReaderStrips)tiffImageData_Strips0.getDataReader(tiffDirectory0, photometricInterpreterLogLuv0, 857, intArray0, 1004, 857, 0, (-109), 19, tiffPlanarConfiguration0, byteOrder0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Root", tiffDirectory0.description());
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      assertEquals(2, tiffImageData_Strips0.getImageDataLength());
      assertEquals(2, tiffElement_DataElementArray0.length);
      assertEquals(7, intArray0.length);
      assertNotNull(dataReaderStrips0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, tiffDirectory0.type);
      assertEquals(0L, tiffDirectory0.offset);
      assertEquals(0L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(0, tiffImageData_Strips0.rowsPerStrip);
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        dataReaderStrips0.unpackIntSamples(19, (-109), 2091, byteArray0, 857, 7, byteOrder0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.ImageDataReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffDirectory tiffDirectory0 = new TiffDirectory(0, linkedList0, 0, (-22L), byteOrder0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Root", tiffDirectory0.description());
      assertNotNull(tiffDirectory0);
      assertEquals((-22L), tiffDirectory0.nextDirectoryOffset);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(0, tiffDirectory0.type);
      assertEquals(0L, tiffDirectory0.offset);
      
      int[] intArray0 = new int[7];
      PhotometricInterpreterLogLuv photometricInterpreterLogLuv0 = new PhotometricInterpreterLogLuv(0, intArray0, 0, 13, 0);
      assertEquals(7, intArray0.length);
      assertNotNull(photometricInterpreterLogLuv0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 6, (-712));
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(6, tiffImageData_Tiles0.getTileWidth());
      assertEquals((-712), tiffImageData_Tiles0.getTileHeight());
      assertNotNull(tiffImageData_Tiles0);
      
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterLogLuv0, (-258), (-251), 1844, intArray0, 3, 1844, 1844, (-712), (-251), 2, tiffPlanarConfiguration0, byteOrder0, tiffImageData_Tiles0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Root", tiffDirectory0.description());
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(6, tiffImageData_Tiles0.getTileWidth());
      assertEquals((-712), tiffImageData_Tiles0.getTileHeight());
      assertEquals(7, intArray0.length);
      assertNotNull(dataReaderTiled0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals((-22L), tiffDirectory0.nextDirectoryOffset);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(0, tiffDirectory0.type);
      assertEquals(0L, tiffDirectory0.offset);
      
      byte[] byteArray0 = new byte[5];
      try { 
        dataReaderTiled0.unpackFloatingPointSamples(1, 1, 0, byteArray0, (byte) (-88), byteOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Imaging does not yet support floating-point data with predictor type 3 for -88 bits per sample
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.ImageDataReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TiffElement.DataElement[] tiffElement_DataElementArray0 = new TiffElement.DataElement[7];
      byte[] byteArray0 = new byte[7];
      TiffImageData.Strips tiffImageData_Strips0 = new TiffImageData.Strips(tiffElement_DataElementArray0, (byte)28);
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      assertEquals(7, tiffImageData_Strips0.getImageDataLength());
      assertEquals(7, tiffElement_DataElementArray0.length);
      assertNotNull(tiffImageData_Strips0);
      assertEquals(28, tiffImageData_Strips0.rowsPerStrip);
      
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffDirectory tiffDirectory0 = new TiffDirectory(0, linkedList0, (-2874L), 339L, byteOrder0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Root", tiffDirectory0.description());
      assertNotNull(tiffDirectory0);
      assertEquals((-2874L), tiffDirectory0.offset);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(0, tiffDirectory0.type);
      assertEquals(339L, tiffDirectory0.nextDirectoryOffset);
      
      int[] intArray0 = new int[9];
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      DataReaderStrips dataReaderStrips0 = (DataReaderStrips)tiffImageData_Strips0.getDataReader(tiffDirectory0, (PhotometricInterpreter) null, 5, intArray0, (-1487), 32773, 0, 4414, (byte)7, tiffPlanarConfiguration0, byteOrder0);
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      assertEquals(7, tiffImageData_Strips0.getImageDataLength());
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Root", tiffDirectory0.description());
      assertEquals(7, tiffElement_DataElementArray0.length);
      assertEquals(9, intArray0.length);
      assertNotNull(dataReaderStrips0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(28, tiffImageData_Strips0.rowsPerStrip);
      assertEquals((-2874L), tiffDirectory0.offset);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(0, tiffDirectory0.type);
      assertEquals(339L, tiffDirectory0.nextDirectoryOffset);
      
      try { 
        dataReaderStrips0.unpackFloatingPointSamples((-181), 0, (-126), byteArray0, 3139, byteOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Imaging does not support floating-point samples with 3139 bits per sample
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.ImageDataReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 0, 0);
      assertEquals(0, tiffImageData_Tiles0.getTileHeight());
      assertEquals(0, tiffImageData_Tiles0.getTileWidth());
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertNotNull(tiffImageData_Tiles0);
      
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      TiffDirectory tiffDirectory0 = new TiffDirectory(0, linkedList0, 0, 0, (ByteOrder) null);
      assertEquals(0, linkedList0.size());
      assertEquals("Root", tiffDirectory0.description());
      assertNotNull(tiffDirectory0);
      assertEquals(0L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(0, tiffDirectory0.type);
      assertEquals(0L, tiffDirectory0.offset);
      assertEquals(6, tiffDirectory0.length);
      
      int[] intArray0 = new int[6];
      PhotometricInterpreterRgb photometricInterpreterRgb0 = new PhotometricInterpreterRgb(6, intArray0, 6, 9, 9);
      assertEquals(6, intArray0.length);
      assertNotNull(photometricInterpreterRgb0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      DataReaderTiled dataReaderTiled0 = (DataReaderTiled)tiffImageData_Tiles0.getDataReader(tiffDirectory0, photometricInterpreterRgb0, (-1707), intArray0, 0, 0, 0, (-1707), 6, tiffPlanarConfiguration0, byteOrder0);
      assertEquals(0, tiffImageData_Tiles0.getTileHeight());
      assertEquals(0, tiffImageData_Tiles0.getTileWidth());
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(0, linkedList0.size());
      assertEquals("Root", tiffDirectory0.description());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(6, intArray0.length);
      assertNotNull(dataReaderTiled0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(0, tiffDirectory0.type);
      assertEquals(0L, tiffDirectory0.offset);
      assertEquals(6, tiffDirectory0.length);
      
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte) (-92);
      // Undeclared exception!
      try { 
        dataReaderTiled0.applyPredictorToBlock(131, 40962, 9, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 23
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.ImageDataReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 65, 65);
      assertEquals(65, tiffImageData_Tiles0.getTileWidth());
      assertEquals(65, tiffImageData_Tiles0.getTileHeight());
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertNotNull(tiffImageData_Tiles0);
      
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffDirectory tiffDirectory0 = new TiffDirectory(65, linkedList0, 65, 65, byteOrder0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertNotNull(tiffDirectory0);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(65, tiffDirectory0.type);
      assertEquals(65L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(65L, tiffDirectory0.offset);
      
      int[] intArray0 = new int[1];
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      DataReaderTiled dataReaderTiled0 = (DataReaderTiled)tiffImageData_Tiles0.getDataReader(tiffDirectory0, (PhotometricInterpreter) null, 65, intArray0, 65, 6, 6, 6, 6, tiffPlanarConfiguration0, byteOrder0);
      assertEquals(65, tiffImageData_Tiles0.getTileWidth());
      assertEquals(65, tiffImageData_Tiles0.getTileHeight());
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertEquals(1, intArray0.length);
      assertNotNull(dataReaderTiled0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(65, tiffDirectory0.type);
      assertEquals(65L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(65L, tiffDirectory0.offset);
      
      byte[] byteArray0 = new byte[9];
      dataReaderTiled0.applyPredictorToBlock(65, 411, (-3001), byteArray0);
      assertEquals(65, tiffImageData_Tiles0.getTileWidth());
      assertEquals(65, tiffImageData_Tiles0.getTileHeight());
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertEquals(1, intArray0.length);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(65, tiffDirectory0.type);
      assertEquals(65L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(65L, tiffDirectory0.offset);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffDirectory tiffDirectory0 = new TiffDirectory((-3446), linkedList0, (-3446), (-3446), byteOrder0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertNotNull(tiffDirectory0);
      assertEquals((-3446L), tiffDirectory0.nextDirectoryOffset);
      assertEquals(6, tiffDirectory0.length);
      assertEquals((-3446), tiffDirectory0.type);
      assertEquals((-3446L), tiffDirectory0.offset);
      
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      int[] intArray0 = new int[1];
      PhotometricInterpreterCieLab photometricInterpreterCieLab0 = new PhotometricInterpreterCieLab((-3446), intArray0, (-1240), (-3446), 6);
      assertEquals(1, intArray0.length);
      assertNotNull(photometricInterpreterCieLab0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      TiffImageData.Strips tiffImageData_Strips0 = new TiffImageData.Strips((TiffElement.DataElement[]) null, (-26));
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      assertNotNull(tiffImageData_Strips0);
      assertEquals((-26), tiffImageData_Strips0.rowsPerStrip);
      
      DataReaderStrips dataReaderStrips0 = new DataReaderStrips(tiffDirectory0, photometricInterpreterCieLab0, 6, intArray0, 6, 6, 6, 6, (-26), (-3446), tiffPlanarConfiguration0, byteOrder0, 6, tiffImageData_Strips0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      assertEquals(1, intArray0.length);
      assertNotNull(dataReaderStrips0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals((-3446L), tiffDirectory0.nextDirectoryOffset);
      assertEquals(6, tiffDirectory0.length);
      assertEquals((-3446), tiffDirectory0.type);
      assertEquals((-3446L), tiffDirectory0.offset);
      assertEquals((-26), tiffImageData_Strips0.rowsPerStrip);
      
      dataReaderStrips0.applyPredictorToBlock((-3), (-1813), (-26), (byte[]) null);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals((-3446L), tiffDirectory0.nextDirectoryOffset);
      assertEquals(6, tiffDirectory0.length);
      assertEquals((-3446), tiffDirectory0.type);
      assertEquals((-3446L), tiffDirectory0.offset);
      assertEquals((-26), tiffImageData_Strips0.rowsPerStrip);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffDirectory tiffDirectory0 = new TiffDirectory((-3446), linkedList0, (-3446), (-3446), byteOrder0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertNotNull(tiffDirectory0);
      assertEquals((-3446L), tiffDirectory0.nextDirectoryOffset);
      assertEquals((-3446L), tiffDirectory0.offset);
      assertEquals(6, tiffDirectory0.length);
      assertEquals((-3446), tiffDirectory0.type);
      
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      int[] intArray0 = new int[1];
      PhotometricInterpreterCieLab photometricInterpreterCieLab0 = new PhotometricInterpreterCieLab(56, intArray0, 0, (-2134), 1);
      assertEquals(1, intArray0.length);
      assertNotNull(photometricInterpreterCieLab0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      TiffImageData.Strips tiffImageData_Strips0 = new TiffImageData.Strips((TiffElement.DataElement[]) null, 65);
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      assertNotNull(tiffImageData_Strips0);
      assertEquals(65, tiffImageData_Strips0.rowsPerStrip);
      
      DataReaderStrips dataReaderStrips0 = new DataReaderStrips(tiffDirectory0, photometricInterpreterCieLab0, (-3446), intArray0, (-2134), 1, 1, 1193, (-1240), 56, tiffPlanarConfiguration0, byteOrder0, (-3446), tiffImageData_Strips0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      assertEquals(1, intArray0.length);
      assertNotNull(dataReaderStrips0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals((-3446L), tiffDirectory0.nextDirectoryOffset);
      assertEquals((-3446L), tiffDirectory0.offset);
      assertEquals(6, tiffDirectory0.length);
      assertEquals((-3446), tiffDirectory0.type);
      assertEquals(65, tiffImageData_Strips0.rowsPerStrip);
      
      byte[] byteArray0 = new byte[7];
      intArray0[0] = (int) (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0L, bitInputStream0.getBytesRead());
      assertEquals(7, byteArray0.length);
      assertNotNull(bitInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      long long0 = byteArrayInputStream0.skip(4294967295L);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertEquals(7L, long0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      dataReaderStrips0.getSamplesAsBytes(bitInputStream0, intArray0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1L, bitInputStream0.getBytesRead());
      assertEquals(1, intArray0.length);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new int[] {255}, intArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-3446L), tiffDirectory0.nextDirectoryOffset);
      assertEquals((-3446L), tiffDirectory0.offset);
      assertEquals(6, tiffDirectory0.length);
      assertEquals((-3446), tiffDirectory0.type);
      assertEquals(65, tiffImageData_Strips0.rowsPerStrip);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffDirectory tiffDirectory0 = new TiffDirectory((-3446), linkedList0, (-3446), (-3446), byteOrder0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertNotNull(tiffDirectory0);
      assertEquals((-3446L), tiffDirectory0.nextDirectoryOffset);
      assertEquals(6, tiffDirectory0.length);
      assertEquals((-3446), tiffDirectory0.type);
      assertEquals((-3446L), tiffDirectory0.offset);
      
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      int[] intArray0 = new int[1];
      PhotometricInterpreterCieLab photometricInterpreterCieLab0 = new PhotometricInterpreterCieLab(56, intArray0, 0, (-2134), 1);
      assertEquals(1, intArray0.length);
      assertNotNull(photometricInterpreterCieLab0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      TiffImageData.Strips tiffImageData_Strips0 = new TiffImageData.Strips((TiffElement.DataElement[]) null, 65);
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      assertNotNull(tiffImageData_Strips0);
      assertEquals(65, tiffImageData_Strips0.rowsPerStrip);
      
      DataReaderStrips dataReaderStrips0 = new DataReaderStrips(tiffDirectory0, photometricInterpreterCieLab0, (-3446), intArray0, (-2134), 1, 1, 1193, (-1240), 56, tiffPlanarConfiguration0, byteOrder0, (-3446), tiffImageData_Strips0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      assertEquals(1, intArray0.length);
      assertNotNull(dataReaderStrips0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals((-3446L), tiffDirectory0.nextDirectoryOffset);
      assertEquals(6, tiffDirectory0.length);
      assertEquals((-3446), tiffDirectory0.type);
      assertEquals((-3446L), tiffDirectory0.offset);
      assertEquals(65, tiffImageData_Strips0.rowsPerStrip);
      
      byte[] byteArray0 = new byte[7];
      intArray0[0] = (int) (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0L, bitInputStream0.getBytesRead());
      assertEquals(7, byteArray0.length);
      assertNotNull(bitInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      dataReaderStrips0.getSamplesAsBytes(bitInputStream0, intArray0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(1L, bitInputStream0.getBytesRead());
      assertEquals(1, intArray0.length);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-3446L), tiffDirectory0.nextDirectoryOffset);
      assertEquals(6, tiffDirectory0.length);
      assertEquals((-3446), tiffDirectory0.type);
      assertEquals((-3446L), tiffDirectory0.offset);
      assertEquals(65, tiffImageData_Strips0.rowsPerStrip);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffDirectory tiffDirectory0 = new TiffDirectory((-3446), linkedList0, (-3446), (-3446), byteOrder0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertNotNull(tiffDirectory0);
      assertEquals(6, tiffDirectory0.length);
      assertEquals((-3446L), tiffDirectory0.offset);
      assertEquals((-3446L), tiffDirectory0.nextDirectoryOffset);
      assertEquals((-3446), tiffDirectory0.type);
      
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      int[] intArray0 = new int[1];
      intArray0[0] = (-3446);
      PhotometricInterpreterCieLab photometricInterpreterCieLab0 = new PhotometricInterpreterCieLab((-3446), intArray0, (-1240), (-3446), 6);
      assertEquals(1, intArray0.length);
      assertNotNull(photometricInterpreterCieLab0);
      assertArrayEquals(new int[] {(-3446)}, intArray0);
      
      TiffImageData.Strips tiffImageData_Strips0 = new TiffImageData.Strips((TiffElement.DataElement[]) null, (-1240));
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      assertNotNull(tiffImageData_Strips0);
      assertEquals((-1240), tiffImageData_Strips0.rowsPerStrip);
      
      DataReaderStrips dataReaderStrips0 = new DataReaderStrips(tiffDirectory0, photometricInterpreterCieLab0, 6, intArray0, 6, 6, 6, 6, (-3446), (-3446), tiffPlanarConfiguration0, byteOrder0, 6, tiffImageData_Strips0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      assertEquals(1, intArray0.length);
      assertNotNull(dataReaderStrips0);
      assertArrayEquals(new int[] {(-3446)}, intArray0);
      assertEquals(6, tiffDirectory0.length);
      assertEquals((-3446L), tiffDirectory0.offset);
      assertEquals((-3446L), tiffDirectory0.nextDirectoryOffset);
      assertEquals((-3446), tiffDirectory0.type);
      assertEquals((-1240), tiffImageData_Strips0.rowsPerStrip);
      
      boolean boolean0 = dataReaderStrips0.isHomogenous((-1240));
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      assertEquals(1, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-3446)}, intArray0);
      assertEquals(6, tiffDirectory0.length);
      assertEquals((-3446L), tiffDirectory0.offset);
      assertEquals((-3446L), tiffDirectory0.nextDirectoryOffset);
      assertEquals((-3446), tiffDirectory0.type);
      assertEquals((-1240), tiffImageData_Strips0.rowsPerStrip);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      int[] intArray0 = new int[4];
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      TiffDirectory tiffDirectory0 = new TiffDirectory(769, linkedList0, 65120, 4139L, byteOrder0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertNotNull(tiffDirectory0);
      assertEquals(769, tiffDirectory0.type);
      assertEquals(4139L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(65120L, tiffDirectory0.offset);
      
      TiffImageData.Strips tiffImageData_Strips0 = new TiffImageData.Strips((TiffElement.DataElement[]) null, 1817);
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      assertNotNull(tiffImageData_Strips0);
      assertEquals(1817, tiffImageData_Strips0.rowsPerStrip);
      
      DataReaderStrips dataReaderStrips0 = new DataReaderStrips(tiffDirectory0, (PhotometricInterpreter) null, 1714, intArray0, 387, 65, 387, 2316, 387, 769, tiffPlanarConfiguration0, byteOrder0, 652, tiffImageData_Strips0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      assertEquals(4, intArray0.length);
      assertNotNull(dataReaderStrips0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(769, tiffDirectory0.type);
      assertEquals(4139L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(65120L, tiffDirectory0.offset);
      assertEquals(1817, tiffImageData_Strips0.rowsPerStrip);
      
      int[] intArray1 = dataReaderStrips0.applyPredictor((int[]) null);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      assertEquals(4, intArray0.length);
      assertNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(769, tiffDirectory0.type);
      assertEquals(4139L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(65120L, tiffDirectory0.offset);
      assertEquals(1817, tiffImageData_Strips0.rowsPerStrip);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 0, 0);
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(0, tiffImageData_Tiles0.getTileWidth());
      assertEquals(0, tiffImageData_Tiles0.getTileHeight());
      assertNotNull(tiffImageData_Tiles0);
      
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      TiffDirectory tiffDirectory0 = new TiffDirectory(0, linkedList0, 0, 0, (ByteOrder) null);
      assertEquals(0, linkedList0.size());
      assertEquals("Root", tiffDirectory0.description());
      assertNotNull(tiffDirectory0);
      assertEquals(0, tiffDirectory0.type);
      assertEquals(0L, tiffDirectory0.offset);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(0L, tiffDirectory0.nextDirectoryOffset);
      
      int[] intArray0 = new int[6];
      PhotometricInterpreterRgb photometricInterpreterRgb0 = new PhotometricInterpreterRgb(0, intArray0, 6, 0, 0);
      assertEquals(6, intArray0.length);
      assertNotNull(photometricInterpreterRgb0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      DataReaderTiled dataReaderTiled0 = (DataReaderTiled)tiffImageData_Tiles0.getDataReader(tiffDirectory0, photometricInterpreterRgb0, (-1687), intArray0, 0, 4437, 0, 393, 6, tiffPlanarConfiguration0, byteOrder0);
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(0, tiffImageData_Tiles0.getTileWidth());
      assertEquals(0, tiffImageData_Tiles0.getTileHeight());
      assertEquals(0, linkedList0.size());
      assertEquals("Root", tiffDirectory0.description());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(6, intArray0.length);
      assertNotNull(dataReaderTiled0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, tiffDirectory0.type);
      assertEquals(0L, tiffDirectory0.offset);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(0L, tiffDirectory0.nextDirectoryOffset);
      
      byte[] byteArray0 = new byte[5];
      int[] intArray1 = dataReaderTiled0.unpackIntSamples(4, (-2909), 0, byteArray0, (-1307), 6, byteOrder0);
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(0, tiffImageData_Tiles0.getTileWidth());
      assertEquals(0, tiffImageData_Tiles0.getTileHeight());
      assertEquals(0, linkedList0.size());
      assertEquals("Root", tiffDirectory0.description());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(5, byteArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, tiffDirectory0.type);
      assertEquals(0L, tiffDirectory0.offset);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(0L, tiffDirectory0.nextDirectoryOffset);
      
      int[] intArray2 = dataReaderTiled0.applyPredictor(intArray1);
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(0, tiffImageData_Tiles0.getTileWidth());
      assertEquals(0, tiffImageData_Tiles0.getTileHeight());
      assertEquals(0, linkedList0.size());
      assertEquals("Root", tiffDirectory0.description());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertSame(intArray2, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(5, byteArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(0, tiffDirectory0.type);
      assertEquals(0L, tiffDirectory0.offset);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(0L, tiffDirectory0.nextDirectoryOffset);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 65, 65);
      assertEquals(65, tiffImageData_Tiles0.getTileWidth());
      assertEquals(65, tiffImageData_Tiles0.getTileHeight());
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertNotNull(tiffImageData_Tiles0);
      
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffDirectory tiffDirectory0 = new TiffDirectory(65, linkedList0, 65, 65, byteOrder0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertNotNull(tiffDirectory0);
      assertEquals(65L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(65, tiffDirectory0.type);
      assertEquals(65L, tiffDirectory0.offset);
      assertEquals(6, tiffDirectory0.length);
      
      int[] intArray0 = new int[8];
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      DataReaderTiled dataReaderTiled0 = (DataReaderTiled)tiffImageData_Tiles0.getDataReader(tiffDirectory0, (PhotometricInterpreter) null, 65, intArray0, 65, 6, 6, 6, 6, tiffPlanarConfiguration0, byteOrder0);
      assertEquals(65, tiffImageData_Tiles0.getTileWidth());
      assertEquals(65, tiffImageData_Tiles0.getTileHeight());
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertEquals(8, intArray0.length);
      assertNotNull(dataReaderTiled0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(65L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(65, tiffDirectory0.type);
      assertEquals(65L, tiffDirectory0.offset);
      assertEquals(6, tiffDirectory0.length);
      
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      dataReaderTiled0.unpackIntSamples((-1), 65, 5, byteArray0, 190, 33423, byteOrder0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, (-1588), (-1588));
      assertEquals((-1588), tiffImageData_Tiles0.getTileWidth());
      assertEquals((-1588), tiffImageData_Tiles0.getTileHeight());
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertNotNull(tiffImageData_Tiles0);
      
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      TiffDirectory tiffDirectory0 = new TiffDirectory((-1588), linkedList0, (-1588), (-1588), (ByteOrder) null);
      assertEquals(0, linkedList0.size());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertNotNull(tiffDirectory0);
      assertEquals((-1588), tiffDirectory0.type);
      assertEquals(6, tiffDirectory0.length);
      assertEquals((-1588L), tiffDirectory0.offset);
      assertEquals((-1588L), tiffDirectory0.nextDirectoryOffset);
      
      int[] intArray0 = new int[6];
      PhotometricInterpreterRgb photometricInterpreterRgb0 = new PhotometricInterpreterRgb((-1588), intArray0, 6, (-1588), (-1588));
      assertEquals(6, intArray0.length);
      assertNotNull(photometricInterpreterRgb0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      DataReaderTiled dataReaderTiled0 = (DataReaderTiled)tiffImageData_Tiles0.getDataReader(tiffDirectory0, photometricInterpreterRgb0, 761, intArray0, (-1588), 6, 6, 761, (-1588), tiffPlanarConfiguration0, (ByteOrder) null);
      assertEquals((-1588), tiffImageData_Tiles0.getTileWidth());
      assertEquals((-1588), tiffImageData_Tiles0.getTileHeight());
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(0, linkedList0.size());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertEquals(6, intArray0.length);
      assertNotNull(dataReaderTiled0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals((-1588), tiffDirectory0.type);
      assertEquals(6, tiffDirectory0.length);
      assertEquals((-1588L), tiffDirectory0.offset);
      assertEquals((-1588L), tiffDirectory0.nextDirectoryOffset);
      
      // Undeclared exception!
      try { 
        dataReaderTiled0.unpackIntSamples((-1684), 6, 4437, (byte[]) null, 1459, 4437, (ByteOrder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.ImageDataReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 48, 48);
      assertEquals(48, tiffImageData_Tiles0.getTileHeight());
      assertEquals(48, tiffImageData_Tiles0.getTileWidth());
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertNotNull(tiffImageData_Tiles0);
      
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffDirectory tiffDirectory0 = new TiffDirectory(48, linkedList0, (-1898L), (-1898L), byteOrder0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertNotNull(tiffDirectory0);
      assertEquals(48, tiffDirectory0.type);
      assertEquals((-1898L), tiffDirectory0.offset);
      assertEquals(6, tiffDirectory0.length);
      assertEquals((-1898L), tiffDirectory0.nextDirectoryOffset);
      
      int[] intArray0 = new int[5];
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      DataReaderTiled dataReaderTiled0 = (DataReaderTiled)tiffImageData_Tiles0.getDataReader(tiffDirectory0, (PhotometricInterpreter) null, 48, intArray0, 48, 6, 6, 6, 6, tiffPlanarConfiguration0, byteOrder0);
      assertEquals(48, tiffImageData_Tiles0.getTileHeight());
      assertEquals(48, tiffImageData_Tiles0.getTileWidth());
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertEquals(5, intArray0.length);
      assertNotNull(dataReaderTiled0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(48, tiffDirectory0.type);
      assertEquals((-1898L), tiffDirectory0.offset);
      assertEquals(6, tiffDirectory0.length);
      assertEquals((-1898L), tiffDirectory0.nextDirectoryOffset);
      
      // Undeclared exception!
      try { 
        dataReaderTiled0.unpackFloatingPointSamples(1432, 6, 729, (byte[]) null, 1683, byteOrder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.ImageDataReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 65, 65);
      assertEquals(65, tiffImageData_Tiles0.getTileHeight());
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(65, tiffImageData_Tiles0.getTileWidth());
      assertNotNull(tiffImageData_Tiles0);
      
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffDirectory tiffDirectory0 = new TiffDirectory(65, linkedList0, 65, 65, byteOrder0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertNotNull(tiffDirectory0);
      assertEquals(65, tiffDirectory0.type);
      assertEquals(65L, tiffDirectory0.offset);
      assertEquals(65L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(6, tiffDirectory0.length);
      
      int[] intArray0 = new int[1];
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      DataReaderTiled dataReaderTiled0 = (DataReaderTiled)tiffImageData_Tiles0.getDataReader(tiffDirectory0, (PhotometricInterpreter) null, 65, intArray0, 65, 6, 6, 6, 6, tiffPlanarConfiguration0, byteOrder0);
      assertEquals(65, tiffImageData_Tiles0.getTileHeight());
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(65, tiffImageData_Tiles0.getTileWidth());
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertEquals(1, intArray0.length);
      assertNotNull(dataReaderTiled0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(65, tiffDirectory0.type);
      assertEquals(65L, tiffDirectory0.offset);
      assertEquals(65L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(6, tiffDirectory0.length);
      
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        dataReaderTiled0.unpackFloatingPointSamples(434, 434, (-2221), byteArray0, 65, byteOrder0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.ImageDataReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 0, 0);
      assertEquals(0, tiffImageData_Tiles0.getTileWidth());
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(0, tiffImageData_Tiles0.getTileHeight());
      assertNotNull(tiffImageData_Tiles0);
      
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      TiffDirectory tiffDirectory0 = new TiffDirectory(0, linkedList0, 0, 0, (ByteOrder) null);
      assertEquals(0, linkedList0.size());
      assertEquals("Root", tiffDirectory0.description());
      assertNotNull(tiffDirectory0);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(0L, tiffDirectory0.offset);
      assertEquals(0, tiffDirectory0.type);
      assertEquals(0L, tiffDirectory0.nextDirectoryOffset);
      
      int[] intArray0 = new int[6];
      PhotometricInterpreterRgb photometricInterpreterRgb0 = new PhotometricInterpreterRgb(0, intArray0, 6, 0, 0);
      assertEquals(6, intArray0.length);
      assertNotNull(photometricInterpreterRgb0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      DataReaderTiled dataReaderTiled0 = (DataReaderTiled)tiffImageData_Tiles0.getDataReader(tiffDirectory0, photometricInterpreterRgb0, 0, intArray0, 0, 0, 0, 0, 6, tiffPlanarConfiguration0, byteOrder0);
      assertEquals(0, tiffImageData_Tiles0.getTileWidth());
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(0, tiffImageData_Tiles0.getTileHeight());
      assertEquals(0, linkedList0.size());
      assertEquals("Root", tiffDirectory0.description());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(6, intArray0.length);
      assertNotNull(dataReaderTiled0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(0L, tiffDirectory0.offset);
      assertEquals(0, tiffDirectory0.type);
      assertEquals(0L, tiffDirectory0.nextDirectoryOffset);
      
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        dataReaderTiled0.unpackFloatingPointSamples((-878), 0, 0, byteArray0, 0, byteOrder0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.ImageDataReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      TiffDirectory tiffDirectory0 = new TiffDirectory(0, linkedList0, 0, 0, (ByteOrder) null);
      assertEquals(0, linkedList0.size());
      assertEquals("Root", tiffDirectory0.description());
      assertNotNull(tiffDirectory0);
      assertEquals(0L, tiffDirectory0.offset);
      assertEquals(0, tiffDirectory0.type);
      assertEquals(0L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(6, tiffDirectory0.length);
      
      int[] intArray0 = new int[6];
      PhotometricInterpreterRgb photometricInterpreterRgb0 = new PhotometricInterpreterRgb(0, intArray0, 6, 0, 0);
      assertEquals(6, intArray0.length);
      assertNotNull(photometricInterpreterRgb0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 464, 0);
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(464, tiffImageData_Tiles0.getTileWidth());
      assertEquals(0, tiffImageData_Tiles0.getTileHeight());
      assertNotNull(tiffImageData_Tiles0);
      
      DataReaderTiled dataReaderTiled0 = (DataReaderTiled)tiffImageData_Tiles0.getDataReader(tiffDirectory0, photometricInterpreterRgb0, 0, intArray0, 8, 264, 3163, 369, 384, tiffPlanarConfiguration0, (ByteOrder) null);
      assertEquals(0, linkedList0.size());
      assertEquals("Root", tiffDirectory0.description());
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(464, tiffImageData_Tiles0.getTileWidth());
      assertEquals(0, tiffImageData_Tiles0.getTileHeight());
      assertEquals(6, intArray0.length);
      assertNotNull(dataReaderTiled0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0L, tiffDirectory0.offset);
      assertEquals(0, tiffDirectory0.type);
      assertEquals(0L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(6, tiffDirectory0.length);
      
      // Undeclared exception!
      try { 
        dataReaderTiled0.transferBlockToRaster(385, 1335, 50940, 464, (int[]) null, 1335, 340, 1285, 1285, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 65, 65);
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(65, tiffImageData_Tiles0.getTileHeight());
      assertEquals(65, tiffImageData_Tiles0.getTileWidth());
      assertNotNull(tiffImageData_Tiles0);
      
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffDirectory tiffDirectory0 = new TiffDirectory(65, linkedList0, 65, 65, byteOrder0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertNotNull(tiffDirectory0);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(65, tiffDirectory0.type);
      assertEquals(65L, tiffDirectory0.offset);
      assertEquals(65L, tiffDirectory0.nextDirectoryOffset);
      
      int[] intArray0 = new int[8];
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      ImageDataReader imageDataReader0 = tiffImageData_Tiles0.getDataReader(tiffDirectory0, (PhotometricInterpreter) null, 65, intArray0, 65, 6, 6, 6, 6, tiffPlanarConfiguration0, byteOrder0);
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(65, tiffImageData_Tiles0.getTileHeight());
      assertEquals(65, tiffImageData_Tiles0.getTileWidth());
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertEquals(8, intArray0.length);
      assertNotNull(imageDataReader0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(65, tiffDirectory0.type);
      assertEquals(65L, tiffDirectory0.offset);
      assertEquals(65L, tiffDirectory0.nextDirectoryOffset);
      
      Rectangle rectangle0 = new Rectangle(6, 65);
      assertEquals(32.5, rectangle0.getCenterY(), 0.01);
      assertEquals(3.0, rectangle0.getCenterX(), 0.01);
      assertEquals(6.0, rectangle0.getMaxX(), 0.01);
      assertEquals(65.0, rectangle0.getMaxY(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(6.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(65.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertNotNull(rectangle0);
      assertEquals(6, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(65, rectangle0.height);
      assertEquals(0, rectangle0.x);
      
      try { 
        imageDataReader0.readRasterData(rectangle0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unsupported sample format, value=0
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.DataReaderTiled", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TiffElement.DataElement[] tiffElement_DataElementArray0 = new TiffElement.DataElement[2];
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffDirectory tiffDirectory0 = new TiffDirectory(19, linkedList0, 19, 19, byteOrder0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertNotNull(tiffDirectory0);
      assertEquals(19L, tiffDirectory0.offset);
      assertEquals(19, tiffDirectory0.type);
      assertEquals(19L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(6, tiffDirectory0.length);
      
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles(tiffElement_DataElementArray0, 6, 50728);
      assertEquals(6, tiffImageData_Tiles0.getTileWidth());
      assertEquals(50728, tiffImageData_Tiles0.getTileHeight());
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(2, tiffElement_DataElementArray0.length);
      assertNotNull(tiffImageData_Tiles0);
      
      int[] intArray0 = new int[4];
      PhotometricInterpreterLogLuv photometricInterpreterLogLuv0 = new PhotometricInterpreterLogLuv(50728, intArray0, 19, 19, 19);
      assertEquals(4, intArray0.length);
      assertNotNull(photometricInterpreterLogLuv0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterLogLuv0, 19, (-1247), 8, intArray0, 2, 65120, 3, 32769, 50728, 13, tiffPlanarConfiguration0, byteOrder0, tiffImageData_Tiles0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertEquals(6, tiffImageData_Tiles0.getTileWidth());
      assertEquals(50728, tiffImageData_Tiles0.getTileHeight());
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(2, tiffElement_DataElementArray0.length);
      assertEquals(4, intArray0.length);
      assertNotNull(dataReaderTiled0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(19L, tiffDirectory0.offset);
      assertEquals(19, tiffDirectory0.type);
      assertEquals(19L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(6, tiffDirectory0.length);
      
      Rectangle rectangle0 = new Rectangle();
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      
      // Undeclared exception!
      try { 
        dataReaderTiled0.readRasterData(rectangle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.DataReaderTiled", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TiffElement.DataElement[] tiffElement_DataElementArray0 = new TiffElement.DataElement[2];
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffDirectory tiffDirectory0 = new TiffDirectory(19, linkedList0, 19, 19, byteOrder0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertNotNull(tiffDirectory0);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(19L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(19, tiffDirectory0.type);
      assertEquals(19L, tiffDirectory0.offset);
      
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles(tiffElement_DataElementArray0, 6, 50728);
      assertEquals(6, tiffImageData_Tiles0.getTileWidth());
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(50728, tiffImageData_Tiles0.getTileHeight());
      assertEquals(2, tiffElement_DataElementArray0.length);
      assertNotNull(tiffImageData_Tiles0);
      
      int[] intArray0 = new int[4];
      PhotometricInterpreterLogLuv photometricInterpreterLogLuv0 = new PhotometricInterpreterLogLuv(50728, intArray0, 19, 19, 19);
      assertEquals(4, intArray0.length);
      assertNotNull(photometricInterpreterLogLuv0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterLogLuv0, 19, (-1247), 8, intArray0, 2, 65120, 3, 32769, 50728, 13, tiffPlanarConfiguration0, byteOrder0, tiffImageData_Tiles0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertEquals(6, tiffImageData_Tiles0.getTileWidth());
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(50728, tiffImageData_Tiles0.getTileHeight());
      assertEquals(2, tiffElement_DataElementArray0.length);
      assertEquals(4, intArray0.length);
      assertNotNull(dataReaderTiled0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(19L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(19, tiffDirectory0.type);
      assertEquals(19L, tiffDirectory0.offset);
      
      Rectangle rectangle0 = new Rectangle();
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      
      Point point0 = new Point(50728, 940);
      assertEquals(940.0, point0.getY(), 0.01);
      assertEquals(50728.0, point0.getX(), 0.01);
      assertNotNull(point0);
      assertEquals(50728, point0.x);
      assertEquals(940, point0.y);
      
      rectangle0.add(point0);
      assertEquals(25364.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(940.0, rectangle0.getHeight(), 0.01);
      assertEquals(50728.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(470.0, rectangle0.getCenterY(), 0.01);
      assertEquals(940.0, rectangle0.getMaxY(), 0.01);
      assertEquals(50728.0, rectangle0.getMaxX(), 0.01);
      assertEquals(940.0, point0.getY(), 0.01);
      assertEquals(50728.0, point0.getX(), 0.01);
      assertEquals(50728, rectangle0.width);
      assertEquals(940, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(50728, point0.x);
      assertEquals(940, point0.y);
      
      // Undeclared exception!
      try { 
        dataReaderTiled0.readRasterData(rectangle0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.DataReaderTiled", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 65, 65);
      assertEquals(65, tiffImageData_Tiles0.getTileHeight());
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(65, tiffImageData_Tiles0.getTileWidth());
      assertNotNull(tiffImageData_Tiles0);
      
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffDirectory tiffDirectory0 = new TiffDirectory(65, linkedList0, 65, 65, byteOrder0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertNotNull(tiffDirectory0);
      assertEquals(65, tiffDirectory0.type);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(65L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(65L, tiffDirectory0.offset);
      
      int[] intArray0 = new int[1];
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      ImageDataReader imageDataReader0 = tiffImageData_Tiles0.getDataReader(tiffDirectory0, (PhotometricInterpreter) null, 65, intArray0, 65, 6, 6, 6, 6, tiffPlanarConfiguration0, byteOrder0);
      assertEquals(65, tiffImageData_Tiles0.getTileHeight());
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(65, tiffImageData_Tiles0.getTileWidth());
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertEquals(1, intArray0.length);
      assertNotNull(imageDataReader0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(65, tiffDirectory0.type);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(65L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(65L, tiffDirectory0.offset);
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertNotNull(rectangle2D_Float0);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      
      Rectangle rectangle0 = rectangle2D_Float0.getBounds();
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertNotNull(rectangle0);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      
      // Undeclared exception!
      try { 
        imageDataReader0.readImageData(rectangle0, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.DataReaderTiled", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffDirectory tiffDirectory0 = new TiffDirectory(255, linkedList0, 255, 255, byteOrder0);
      assertEquals(0, linkedList0.size());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertNotNull(tiffDirectory0);
      assertEquals(255, tiffDirectory0.type);
      assertEquals(255L, tiffDirectory0.offset);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(255L, tiffDirectory0.nextDirectoryOffset);
      
      int[] intArray0 = new int[0];
      PhotometricInterpreterLogLuv photometricInterpreterLogLuv0 = new PhotometricInterpreterLogLuv(641, intArray0, 325, 641, 255);
      assertEquals(0, intArray0.length);
      assertNotNull(photometricInterpreterLogLuv0);
      assertArrayEquals(new int[] {}, intArray0);
      
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      TiffElement.DataElement[] tiffElement_DataElementArray0 = new TiffElement.DataElement[0];
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles(tiffElement_DataElementArray0, 6, 2018);
      assertEquals(2018, tiffImageData_Tiles0.getTileHeight());
      assertEquals(6, tiffImageData_Tiles0.getTileWidth());
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(0, tiffElement_DataElementArray0.length);
      assertNotNull(tiffImageData_Tiles0);
      
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterLogLuv0, 255, 255, 255, intArray0, 325, 2018, (-3), 667, 255, 34018, tiffPlanarConfiguration0, byteOrder0, tiffImageData_Tiles0);
      assertEquals(0, linkedList0.size());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertEquals(2018, tiffImageData_Tiles0.getTileHeight());
      assertEquals(6, tiffImageData_Tiles0.getTileWidth());
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(0, intArray0.length);
      assertEquals(0, tiffElement_DataElementArray0.length);
      assertNotNull(dataReaderTiled0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(255, tiffDirectory0.type);
      assertEquals(255L, tiffDirectory0.offset);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(255L, tiffDirectory0.nextDirectoryOffset);
      
      Line2D.Float line2D_Float0 = new Line2D.Float();
      assertNotNull(line2D_Float0);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      
      Rectangle rectangle0 = line2D_Float0.getBounds();
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertNotNull(rectangle0);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      
      // Undeclared exception!
      try { 
        dataReaderTiled0.readImageData(rectangle0, true, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.DataReaderTiled", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 0, 0);
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(0, tiffImageData_Tiles0.getTileHeight());
      assertEquals(0, tiffImageData_Tiles0.getTileWidth());
      assertNotNull(tiffImageData_Tiles0);
      
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      TiffDirectory tiffDirectory0 = new TiffDirectory(0, linkedList0, 0, 0, (ByteOrder) null);
      assertEquals(0, linkedList0.size());
      assertEquals("Root", tiffDirectory0.description());
      assertNotNull(tiffDirectory0);
      assertEquals(0, tiffDirectory0.type);
      assertEquals(0L, tiffDirectory0.offset);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(0L, tiffDirectory0.nextDirectoryOffset);
      
      int[] intArray0 = new int[6];
      PhotometricInterpreterRgb photometricInterpreterRgb0 = new PhotometricInterpreterRgb(0, intArray0, 6, 0, 0);
      assertEquals(6, intArray0.length);
      assertNotNull(photometricInterpreterRgb0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      ImageDataReader imageDataReader0 = tiffImageData_Tiles0.getDataReader(tiffDirectory0, photometricInterpreterRgb0, 0, intArray0, 0, 4437, 0, (-159), 6, tiffPlanarConfiguration0, byteOrder0);
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(0, tiffImageData_Tiles0.getTileHeight());
      assertEquals(0, tiffImageData_Tiles0.getTileWidth());
      assertEquals(0, linkedList0.size());
      assertEquals("Root", tiffDirectory0.description());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(6, intArray0.length);
      assertNotNull(imageDataReader0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, tiffDirectory0.type);
      assertEquals(0L, tiffDirectory0.offset);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(0L, tiffDirectory0.nextDirectoryOffset);
      
      // Undeclared exception!
      try { 
        imageDataReader0.readImageData((Rectangle) null, true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.DataReaderTiled", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TiffElement.DataElement[] tiffElement_DataElementArray0 = new TiffElement.DataElement[2];
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffDirectory tiffDirectory0 = new TiffDirectory(19, linkedList0, 19, 19, byteOrder0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertNotNull(tiffDirectory0);
      assertEquals(19, tiffDirectory0.type);
      assertEquals(19L, tiffDirectory0.offset);
      assertEquals(19L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(6, tiffDirectory0.length);
      
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles(tiffElement_DataElementArray0, 6, 50728);
      assertEquals(50728, tiffImageData_Tiles0.getTileHeight());
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(6, tiffImageData_Tiles0.getTileWidth());
      assertEquals(2, tiffElement_DataElementArray0.length);
      assertNotNull(tiffImageData_Tiles0);
      
      int[] intArray0 = new int[7];
      PhotometricInterpreterLogLuv photometricInterpreterLogLuv0 = new PhotometricInterpreterLogLuv(50728, intArray0, 19, 19, 19);
      assertEquals(7, intArray0.length);
      assertNotNull(photometricInterpreterLogLuv0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterLogLuv0, 19, 19, 3, intArray0, 3, 481, 2016, (-17), 65120, 3, tiffPlanarConfiguration0, byteOrder0, tiffImageData_Tiles0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertEquals(50728, tiffImageData_Tiles0.getTileHeight());
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(6, tiffImageData_Tiles0.getTileWidth());
      assertEquals(2, tiffElement_DataElementArray0.length);
      assertEquals(7, intArray0.length);
      assertNotNull(dataReaderTiled0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(19, tiffDirectory0.type);
      assertEquals(19L, tiffDirectory0.offset);
      assertEquals(19L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(6, tiffDirectory0.length);
      
      Rectangle rectangle0 = new Rectangle((-440), 3);
      assertEquals(3.0, rectangle0.getMaxY(), 0.01);
      assertEquals((-440.0), rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(3.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals((-220.0), rectangle0.getCenterX(), 0.01);
      assertEquals((-440.0), rectangle0.getWidth(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(1.5, rectangle0.getCenterY(), 0.01);
      assertNotNull(rectangle0);
      assertEquals(3, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals((-440), rectangle0.width);
      
      // Undeclared exception!
      try { 
        dataReaderTiled0.readImageData(rectangle0, true, true);
        fail("Expecting exception: RasterFormatException");
      
      } catch(RasterFormatException e) {
         //
         // zero or negative width value
         //
         verifyException("org.apache.commons.imaging.common.ImageBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 48, 48);
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(48, tiffImageData_Tiles0.getTileWidth());
      assertEquals(48, tiffImageData_Tiles0.getTileHeight());
      assertNotNull(tiffImageData_Tiles0);
      
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffDirectory tiffDirectory0 = new TiffDirectory(48, linkedList0, 48, 48, byteOrder0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertNotNull(tiffDirectory0);
      assertEquals(48L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(48L, tiffDirectory0.offset);
      assertEquals(48, tiffDirectory0.type);
      
      int[] intArray0 = new int[1];
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      DataReaderTiled dataReaderTiled0 = (DataReaderTiled)tiffImageData_Tiles0.getDataReader(tiffDirectory0, (PhotometricInterpreter) null, 48, intArray0, 48, 6, 48, 48, 6, tiffPlanarConfiguration0, byteOrder0);
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(48, tiffImageData_Tiles0.getTileWidth());
      assertEquals(48, tiffImageData_Tiles0.getTileHeight());
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertEquals(1, intArray0.length);
      assertNotNull(dataReaderTiled0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(48L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(48L, tiffDirectory0.offset);
      assertEquals(48, tiffDirectory0.type);
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      BitInputStream bitInputStream0 = new BitInputStream(dataInputStream0, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, bitInputStream0.getBytesRead());
      assertNotNull(bitInputStream0);
      
      // Undeclared exception!
      try { 
        dataReaderTiled0.getSamplesAsBytes(bitInputStream0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffDirectory tiffDirectory0 = new TiffDirectory((-31), linkedList0, (-31), (-31), byteOrder0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertNotNull(tiffDirectory0);
      assertEquals(6, tiffDirectory0.length);
      assertEquals((-31L), tiffDirectory0.nextDirectoryOffset);
      assertEquals((-31L), tiffDirectory0.offset);
      assertEquals((-31), tiffDirectory0.type);
      
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      int[] intArray0 = new int[1];
      intArray0[0] = 6;
      PhotometricInterpreterCieLab photometricInterpreterCieLab0 = new PhotometricInterpreterCieLab(56, intArray0, (-31), 1486, 387);
      assertEquals(1, intArray0.length);
      assertNotNull(photometricInterpreterCieLab0);
      assertArrayEquals(new int[] {6}, intArray0);
      
      TiffImageData.Strips tiffImageData_Strips0 = new TiffImageData.Strips((TiffElement.DataElement[]) null, 65);
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      assertNotNull(tiffImageData_Strips0);
      assertEquals(65, tiffImageData_Strips0.rowsPerStrip);
      
      DataReaderStrips dataReaderStrips0 = new DataReaderStrips(tiffDirectory0, photometricInterpreterCieLab0, (-31), intArray0, 1486, 387, 387, (-31), (-31), 56, tiffPlanarConfiguration0, byteOrder0, (-31), tiffImageData_Strips0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      assertEquals(1, intArray0.length);
      assertNotNull(dataReaderStrips0);
      assertArrayEquals(new int[] {6}, intArray0);
      assertEquals(6, tiffDirectory0.length);
      assertEquals((-31L), tiffDirectory0.nextDirectoryOffset);
      assertEquals((-31L), tiffDirectory0.offset);
      assertEquals((-31), tiffDirectory0.type);
      assertEquals(65, tiffImageData_Strips0.rowsPerStrip);
      
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0L, bitInputStream0.getBytesRead());
      assertEquals(6, byteArray0.length);
      assertNotNull(bitInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        dataReaderStrips0.getSamplesAsBytes(bitInputStream0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.ImageDataReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      int[] intArray0 = new int[4];
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      byte[] byteArray0 = new byte[0];
      TiffDirectory tiffDirectory0 = new TiffDirectory(13, linkedList0, 13, 13, byteOrder0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertNotNull(tiffDirectory0);
      assertEquals(13L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(13, tiffDirectory0.type);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(13L, tiffDirectory0.offset);
      
      TiffImageData.Strips tiffImageData_Strips0 = new TiffImageData.Strips((TiffElement.DataElement[]) null, 2097);
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      assertNotNull(tiffImageData_Strips0);
      assertEquals(2097, tiffImageData_Strips0.rowsPerStrip);
      
      DataReaderStrips dataReaderStrips0 = new DataReaderStrips(tiffDirectory0, (PhotometricInterpreter) null, 13, intArray0, 13, 13, 13, 2097, 13, 13, tiffPlanarConfiguration0, byteOrder0, 13, tiffImageData_Strips0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertTrue(tiffImageData_Strips0.stripsNotTiles());
      assertEquals(4, intArray0.length);
      assertNotNull(dataReaderStrips0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(13L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(13, tiffDirectory0.type);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(13L, tiffDirectory0.offset);
      assertEquals(2097, tiffImageData_Strips0.rowsPerStrip);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0L, bitInputStream0.getBytesRead());
      assertEquals(0, byteArray0.length);
      assertNotNull(bitInputStream0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      try { 
        dataReaderStrips0.getSamplesAsBytes(bitInputStream0, intArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // BitInputStream: incomplete bit read
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, (-1590), (-1590));
      assertEquals((-1590), tiffImageData_Tiles0.getTileHeight());
      assertEquals((-1590), tiffImageData_Tiles0.getTileWidth());
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertNotNull(tiffImageData_Tiles0);
      
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      TiffDirectory tiffDirectory0 = new TiffDirectory((-1590), linkedList0, (-1590), (-1590), (ByteOrder) null);
      assertEquals(0, linkedList0.size());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertNotNull(tiffDirectory0);
      assertEquals((-1590), tiffDirectory0.type);
      assertEquals(6, tiffDirectory0.length);
      assertEquals((-1590L), tiffDirectory0.nextDirectoryOffset);
      assertEquals((-1590L), tiffDirectory0.offset);
      
      int[] intArray0 = new int[6];
      PhotometricInterpreterRgb photometricInterpreterRgb0 = new PhotometricInterpreterRgb((-1590), intArray0, 6, (-1590), (-1590));
      assertEquals(6, intArray0.length);
      assertNotNull(photometricInterpreterRgb0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      DataReaderTiled dataReaderTiled0 = (DataReaderTiled)tiffImageData_Tiles0.getDataReader(tiffDirectory0, photometricInterpreterRgb0, (-1590), intArray0, 0, 4437, 0, 365, 6, tiffPlanarConfiguration0, byteOrder0);
      assertEquals((-1590), tiffImageData_Tiles0.getTileHeight());
      assertEquals((-1590), tiffImageData_Tiles0.getTileWidth());
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(0, linkedList0.size());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(6, intArray0.length);
      assertNotNull(dataReaderTiled0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals((-1590), tiffDirectory0.type);
      assertEquals(6, tiffDirectory0.length);
      assertEquals((-1590L), tiffDirectory0.nextDirectoryOffset);
      assertEquals((-1590L), tiffDirectory0.offset);
      
      // Undeclared exception!
      try { 
        dataReaderTiled0.decompress((byte[]) null, 2, 50740, 4437, (-764));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 73, 73);
      assertEquals(73, tiffImageData_Tiles0.getTileWidth());
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(73, tiffImageData_Tiles0.getTileHeight());
      assertNotNull(tiffImageData_Tiles0);
      
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffDirectory tiffDirectory0 = new TiffDirectory(73, linkedList0, 73, 73, byteOrder0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertNotNull(tiffDirectory0);
      assertEquals(73L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(73, tiffDirectory0.type);
      assertEquals(73L, tiffDirectory0.offset);
      assertEquals(6, tiffDirectory0.length);
      
      int[] intArray0 = new int[1];
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      DataReaderTiled dataReaderTiled0 = (DataReaderTiled)tiffImageData_Tiles0.getDataReader(tiffDirectory0, (PhotometricInterpreter) null, 73, intArray0, 73, 6, 6, 6, 6, tiffPlanarConfiguration0, byteOrder0);
      assertEquals(73, tiffImageData_Tiles0.getTileWidth());
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(73, tiffImageData_Tiles0.getTileHeight());
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertEquals(1, intArray0.length);
      assertNotNull(dataReaderTiled0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(73L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(73, tiffDirectory0.type);
      assertEquals(73L, tiffDirectory0.offset);
      assertEquals(6, tiffDirectory0.length);
      
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        dataReaderTiled0.decompress(byteArray0, (byte)5, (byte) (-100), (byte)123, 432);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -100
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 62, 62);
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(62, tiffImageData_Tiles0.getTileHeight());
      assertEquals(62, tiffImageData_Tiles0.getTileWidth());
      assertNotNull(tiffImageData_Tiles0);
      
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      TiffDirectory tiffDirectory0 = new TiffDirectory(62, linkedList0, 62, 62, byteOrder0);
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertNotNull(tiffDirectory0);
      assertEquals(62L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(62, tiffDirectory0.type);
      assertEquals(62L, tiffDirectory0.offset);
      
      int[] intArray0 = new int[6];
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      DataReaderTiled dataReaderTiled0 = (DataReaderTiled)tiffImageData_Tiles0.getDataReader(tiffDirectory0, (PhotometricInterpreter) null, 62, intArray0, 62, 6, 6, 6, 6, tiffPlanarConfiguration0, byteOrder0);
      assertFalse(tiffImageData_Tiles0.stripsNotTiles());
      assertEquals(62, tiffImageData_Tiles0.getTileHeight());
      assertEquals(62, tiffImageData_Tiles0.getTileWidth());
      assertEquals(0, linkedList0.size());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("Bad Type", tiffDirectory0.description());
      assertEquals(6, intArray0.length);
      assertNotNull(dataReaderTiled0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(62L, tiffDirectory0.nextDirectoryOffset);
      assertEquals(6, tiffDirectory0.length);
      assertEquals(62, tiffDirectory0.type);
      assertEquals(62L, tiffDirectory0.offset);
      
      byte[] byteArray0 = new byte[3];
      try { 
        dataReaderTiled0.decompress(byteArray0, (byte)5, (byte)5, (byte) (-74), 283);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Bad Code: -1 codes: 258 code_size: 9, table: 4096
         //
         verifyException("org.apache.commons.imaging.common.mylzw.MyLzwDecompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 0, 0);
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      TiffDirectory tiffDirectory0 = new TiffDirectory(0, linkedList0, 0, 0, (ByteOrder) null);
      int[] intArray0 = new int[6];
      PhotometricInterpreterRgb photometricInterpreterRgb0 = new PhotometricInterpreterRgb((-1903), intArray0, 6, 9, 9);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      DataReaderTiled dataReaderTiled0 = (DataReaderTiled)tiffImageData_Tiles0.getDataReader(tiffDirectory0, photometricInterpreterRgb0, (-1687), intArray0, (-1903), 0, (-1903), 393, 6, tiffPlanarConfiguration0, byteOrder0);
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      dataReaderTiled0.applyPredictorToBlock(9, 33920, 0, byteArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory((-3446), linkedList0, (-3446), (-3446), byteOrder0);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      int[] intArray0 = new int[1];
      PhotometricInterpreterCieLab photometricInterpreterCieLab0 = new PhotometricInterpreterCieLab((-3446), intArray0, (-1240), (-3446), 8);
      TiffImageData.Strips tiffImageData_Strips0 = new TiffImageData.Strips((TiffElement.DataElement[]) null, (-26));
      DataReaderStrips dataReaderStrips0 = new DataReaderStrips(tiffDirectory0, photometricInterpreterCieLab0, 4072, intArray0, 4072, 4072, 8, 8, (-26), (-3446), tiffPlanarConfiguration0, byteOrder0, 8, tiffImageData_Strips0);
      // Undeclared exception!
      try { 
        dataReaderStrips0.applyPredictorToBlock(846, 8, 4072, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.ImageDataReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 48, 48);
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory(48, linkedList0, 48, 48, byteOrder0);
      int[] intArray0 = new int[5];
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      DataReaderTiled dataReaderTiled0 = (DataReaderTiled)tiffImageData_Tiles0.getDataReader(tiffDirectory0, (PhotometricInterpreter) null, 48, intArray0, 48, 6, 6, 6, 6, tiffPlanarConfiguration0, byteOrder0);
      dataReaderTiled0.transferBlockToRaster(48, 50830, 48, 1682, intArray0, 48, 6, 6, 48, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 0, 0);
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      TiffDirectory tiffDirectory0 = new TiffDirectory(0, linkedList0, 0, 0, (ByteOrder) null);
      int[] intArray0 = new int[6];
      PhotometricInterpreterRgb photometricInterpreterRgb0 = new PhotometricInterpreterRgb(6, intArray0, 6, 6, 6);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      DataReaderTiled dataReaderTiled0 = (DataReaderTiled)tiffImageData_Tiles0.getDataReader(tiffDirectory0, photometricInterpreterRgb0, (-1707), intArray0, 0, 4437, 0, 393, 6, tiffPlanarConfiguration0, byteOrder0);
      dataReaderTiled0.transferBlockToRaster(2514, 3, 303, 4437, intArray0, 559, 6, 0, 4437, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 0, 0);
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      TiffDirectory tiffDirectory0 = new TiffDirectory(0, linkedList0, 0, 0, (ByteOrder) null);
      int[] intArray0 = new int[19];
      PhotometricInterpreterRgb photometricInterpreterRgb0 = new PhotometricInterpreterRgb((-1903), intArray0, 6, 29, 29);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      DataReaderTiled dataReaderTiled0 = (DataReaderTiled)tiffImageData_Tiles0.getDataReader(tiffDirectory0, photometricInterpreterRgb0, 0, intArray0, (-16), 4437, (-16), 393, 6, tiffPlanarConfiguration0, byteOrder0);
      dataReaderTiled0.transferBlockToRaster(8, 0, 393, (-521), intArray0, 719, 0, (-16), 8, intArray0);
      assertEquals(19, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TiffElement.DataElement[] tiffElement_DataElementArray0 = new TiffElement.DataElement[1];
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory(17, linkedList0, 17, 17, byteOrder0);
      int[] intArray0 = new int[7];
      PhotometricInterpreterLogLuv photometricInterpreterLogLuv0 = new PhotometricInterpreterLogLuv(17, intArray0, 17, (-27), 17);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      TiffImageData.Strips tiffImageData_Strips0 = new TiffImageData.Strips(tiffElement_DataElementArray0, 17);
      DataReaderStrips dataReaderStrips0 = new DataReaderStrips(tiffDirectory0, photometricInterpreterLogLuv0, 17, intArray0, (-27), 6, 17, (-27), 6, (-1765), tiffPlanarConfiguration0, byteOrder0, (-27), tiffImageData_Strips0);
      float[] floatArray0 = new float[24];
      // Undeclared exception!
      try { 
        dataReaderStrips0.transferBlockToRaster(17, 2767, 6, 1817, intArray0, 17, 2767, 1730, 6, 6, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1730
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.ImageDataReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TiffElement.DataElement[] tiffElement_DataElementArray0 = new TiffElement.DataElement[1];
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory(74, linkedList0, 74, 74, byteOrder0);
      int[] intArray0 = new int[7];
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      TiffImageData.Strips tiffImageData_Strips0 = new TiffImageData.Strips(tiffElement_DataElementArray0, 42);
      PhotometricInterpreterLogLuv photometricInterpreterLogLuv0 = new PhotometricInterpreterLogLuv(74, intArray0, 74, 6, 74);
      DataReaderStrips dataReaderStrips0 = new DataReaderStrips(tiffDirectory0, photometricInterpreterLogLuv0, 74, intArray0, 74, 74, 7, 0, 42, (-1765), tiffPlanarConfiguration0, byteOrder0, 0, tiffImageData_Strips0);
      float[] floatArray0 = new float[8];
      dataReaderStrips0.transferBlockToRaster(42, 6, 1844, 6, intArray0, 1844, 0, 6, 42, 0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TiffElement.DataElement[] tiffElement_DataElementArray0 = new TiffElement.DataElement[1];
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory(42, linkedList0, 42, 42, byteOrder0);
      int[] intArray0 = new int[7];
      PhotometricInterpreterLogLuv photometricInterpreterLogLuv0 = new PhotometricInterpreterLogLuv(42, intArray0, 42, 6, 42);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      TiffImageData.Strips tiffImageData_Strips0 = new TiffImageData.Strips(tiffElement_DataElementArray0, 857);
      DataReaderStrips dataReaderStrips0 = new DataReaderStrips(tiffDirectory0, photometricInterpreterLogLuv0, 42, intArray0, 6, 6, 42, 857, 6, (-1765), tiffPlanarConfiguration0, byteOrder0, 857, tiffImageData_Strips0);
      float[] floatArray0 = new float[7];
      // Undeclared exception!
      try { 
        dataReaderStrips0.transferBlockToRaster(1477, 2736, 6, 1817, intArray0, 42, 2736, 1730, 6, 6, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1435
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.ImageDataReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TiffElement.DataElement[] tiffElement_DataElementArray0 = new TiffElement.DataElement[1];
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory(56, linkedList0, 56, 56, byteOrder0);
      int[] intArray0 = new int[7];
      PhotometricInterpreterLogLuv photometricInterpreterLogLuv0 = new PhotometricInterpreterLogLuv(56, intArray0, 56, 6, 56);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      TiffImageData.Strips tiffImageData_Strips0 = new TiffImageData.Strips(tiffElement_DataElementArray0, 24);
      DataReaderStrips dataReaderStrips0 = new DataReaderStrips(tiffDirectory0, photometricInterpreterLogLuv0, 56, intArray0, 6, 1018, 7, 0, 24, (-1765), tiffPlanarConfiguration0, byteOrder0, 0, tiffImageData_Strips0);
      float[] floatArray0 = new float[8];
      dataReaderStrips0.transferBlockToRaster(24, 6, 1844, 1844, intArray0, 1477, 0, 6, 24, 0, floatArray0);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory(48, linkedList0, 48, 48, byteOrder0);
      int[] intArray0 = new int[5];
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      TiffImageData.Strips tiffImageData_Strips0 = new TiffImageData.Strips((TiffElement.DataElement[]) null, 6);
      DataReaderStrips dataReaderStrips0 = new DataReaderStrips(tiffDirectory0, (PhotometricInterpreter) null, 48, intArray0, 48, 6, (-1507), 6, (-5), 2174, tiffPlanarConfiguration0, byteOrder0, (-860), tiffImageData_Strips0);
      float[] floatArray0 = new float[9];
      // Undeclared exception!
      dataReaderStrips0.transferBlockToRaster(6, 48, 2174, 869, intArray0, 259, 6, 48, 2174, (-860), floatArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TiffElement.DataElement[] tiffElement_DataElementArray0 = new TiffElement.DataElement[1];
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory(38, linkedList0, 38, 38, byteOrder0);
      int[] intArray0 = new int[3];
      PhotometricInterpreterLogLuv photometricInterpreterLogLuv0 = new PhotometricInterpreterLogLuv(38, intArray0, 38, 6, 38);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      TiffImageData.Strips tiffImageData_Strips0 = new TiffImageData.Strips(tiffElement_DataElementArray0, 38);
      DataReaderStrips dataReaderStrips0 = new DataReaderStrips(tiffDirectory0, photometricInterpreterLogLuv0, 38, intArray0, 6, 0, 38, 6, 6, 38, tiffPlanarConfiguration0, byteOrder0, 6, tiffImageData_Strips0);
      float[] floatArray0 = new float[21];
      // Undeclared exception!
      try { 
        dataReaderStrips0.transferBlockToRaster(38, 2767, 6, 6, intArray0, 38, 2767, 1730, 6, 6, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.ImageDataReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TiffElement.DataElement[] tiffElement_DataElementArray0 = new TiffElement.DataElement[1];
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory(38, linkedList0, 38, 38, byteOrder0);
      int[] intArray0 = new int[3];
      PhotometricInterpreterLogLuv photometricInterpreterLogLuv0 = new PhotometricInterpreterLogLuv(38, intArray0, 38, 6, 38);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      TiffImageData.Strips tiffImageData_Strips0 = new TiffImageData.Strips(tiffElement_DataElementArray0, 38);
      DataReaderStrips dataReaderStrips0 = new DataReaderStrips(tiffDirectory0, photometricInterpreterLogLuv0, 38, intArray0, 6, 0, 38, 6, 6, 38, tiffPlanarConfiguration0, byteOrder0, 6, tiffImageData_Strips0);
      dataReaderStrips0.transferBlockToRaster(2447, 22, 6, 2767, intArray0, 6, 38, 38, 2447, 2447, (float[]) null);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TiffElement.DataElement[] tiffElement_DataElementArray0 = new TiffElement.DataElement[2];
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory(19, linkedList0, 19, 19, byteOrder0);
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles(tiffElement_DataElementArray0, 6, 50728);
      int[] intArray0 = new int[7];
      PhotometricInterpreterLogLuv photometricInterpreterLogLuv0 = new PhotometricInterpreterLogLuv(50728, intArray0, 19, 19, 19);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      DataReaderTiled dataReaderTiled0 = (DataReaderTiled)tiffImageData_Tiles0.getDataReader(tiffDirectory0, photometricInterpreterLogLuv0, 56, intArray0, (-1123), 3, 65120, 79, 56, tiffPlanarConfiguration0, byteOrder0);
      float[] floatArray0 = new float[8];
      dataReaderTiled0.transferBlockToRaster((byte) (-36), (byte) (-76), 5416, 3, intArray0, 412, (-2049), 79, 19, (byte) (-37), floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 0, 0);
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      TiffDirectory tiffDirectory0 = new TiffDirectory(0, linkedList0, 0, 0, (ByteOrder) null);
      int[] intArray0 = new int[6];
      PhotometricInterpreterRgb photometricInterpreterRgb0 = new PhotometricInterpreterRgb(0, intArray0, 6, 9, 9);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      DataReaderTiled dataReaderTiled0 = (DataReaderTiled)tiffImageData_Tiles0.getDataReader(tiffDirectory0, photometricInterpreterRgb0, (-1687), intArray0, 6, 0, 6, 393, 6, tiffPlanarConfiguration0, byteOrder0);
      float[] floatArray0 = new float[1];
      dataReaderTiled0.transferBlockToRaster(0, 0, 0, 0, intArray0, 0, 0, 0, 0, (-1687), floatArray0);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory((-3446), linkedList0, (-3446), (-3446), byteOrder0);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      int[] intArray0 = new int[1];
      PhotometricInterpreterCieLab photometricInterpreterCieLab0 = new PhotometricInterpreterCieLab((-3446), intArray0, (-1240), (-3446), 6);
      TiffImageData.Strips tiffImageData_Strips0 = new TiffImageData.Strips((TiffElement.DataElement[]) null, 41992);
      DataReaderStrips dataReaderStrips0 = new DataReaderStrips(tiffDirectory0, photometricInterpreterCieLab0, 6, intArray0, 6, 6, 6, 6, 41992, (-3446), tiffPlanarConfiguration0, byteOrder0, 6, tiffImageData_Strips0);
      byte[] byteArray0 = new byte[0];
      int[] intArray1 = dataReaderStrips0.unpackIntSamples((-3446), 667, 64, byteArray0, (-3446), 108, byteOrder0);
      assertEquals(42688, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 48, 48);
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory(48, linkedList0, 48, 48, byteOrder0);
      int[] intArray0 = new int[5];
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      DataReaderTiled dataReaderTiled0 = (DataReaderTiled)tiffImageData_Tiles0.getDataReader(tiffDirectory0, (PhotometricInterpreter) null, 48, intArray0, 48, 6, 6, 6, 6, tiffPlanarConfiguration0, byteOrder0);
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        dataReaderTiled0.unpackIntSamples(48, 48, 48, byteArray0, 6, 48, byteOrder0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.ImageDataReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TiffElement.DataElement[] tiffElement_DataElementArray0 = new TiffElement.DataElement[2];
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory(19, linkedList0, 19, 19, byteOrder0);
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles(tiffElement_DataElementArray0, 6, 50728);
      int[] intArray0 = new int[7];
      PhotometricInterpreterLogLuv photometricInterpreterLogLuv0 = new PhotometricInterpreterLogLuv(50728, intArray0, 19, 19, 19);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      DataReaderTiled dataReaderTiled0 = (DataReaderTiled)tiffImageData_Tiles0.getDataReader(tiffDirectory0, photometricInterpreterLogLuv0, 56, intArray0, (-1123), 3, 65120, 79, 56, tiffPlanarConfiguration0, byteOrder0);
      byte[] byteArray0 = new byte[9];
      int[] intArray1 = dataReaderTiled0.unpackIntSamples((-1032), 56, 56, byteArray0, 2, 2, byteOrder0);
      assertEquals(3136, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 65, 65);
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory(65, linkedList0, 65, 65, byteOrder0);
      int[] intArray0 = new int[14];
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      DataReaderTiled dataReaderTiled0 = (DataReaderTiled)tiffImageData_Tiles0.getDataReader(tiffDirectory0, (PhotometricInterpreter) null, 65, intArray0, 65, 6, 6, 6, 6, tiffPlanarConfiguration0, byteOrder0);
      byte[] byteArray0 = new byte[15];
      // Undeclared exception!
      try { 
        dataReaderTiled0.unpackFloatingPointSamples(387, 65, 65, byteArray0, 387, byteOrder0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.ImageDataReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 65, 65);
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory(65, linkedList0, 65, 65, byteOrder0);
      int[] intArray0 = new int[8];
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      DataReaderTiled dataReaderTiled0 = (DataReaderTiled)tiffImageData_Tiles0.getDataReader(tiffDirectory0, (PhotometricInterpreter) null, 65, intArray0, 65, 6, 6, 6, 6, tiffPlanarConfiguration0, byteOrder0);
      byte[] byteArray0 = new byte[9];
      int[] intArray1 = dataReaderTiled0.unpackFloatingPointSamples(387, 65, 0, byteArray0, 387, byteOrder0);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 65, 65);
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory(65, linkedList0, 65, 65, byteOrder0);
      int[] intArray0 = new int[8];
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      DataReaderTiled dataReaderTiled0 = (DataReaderTiled)tiffImageData_Tiles0.getDataReader(tiffDirectory0, (PhotometricInterpreter) null, 65, intArray0, 65, 6, 6, 6, 6, tiffPlanarConfiguration0, byteOrder0);
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        dataReaderTiled0.unpackFloatingPointSamples(387, 65, 65, byteArray0, 387, byteOrder0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.ImageDataReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 67, 67);
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory(67, linkedList0, 67, 67, byteOrder0);
      int[] intArray0 = new int[1];
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      DataReaderTiled dataReaderTiled0 = (DataReaderTiled)tiffImageData_Tiles0.getDataReader(tiffDirectory0, (PhotometricInterpreter) null, 67, intArray0, 67, 6, 6, 6, 6, tiffPlanarConfiguration0, byteOrder0);
      byte[] byteArray0 = new byte[11];
      try { 
        dataReaderTiled0.decompress(byteArray0, 67, 1098, 67, 67);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Tiff: unknown/unsupported compression: 67
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.ImageDataReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 0, 0);
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      TiffDirectory tiffDirectory0 = new TiffDirectory(0, linkedList0, 0, 0, (ByteOrder) null);
      int[] intArray0 = new int[6];
      PhotometricInterpreterRgb photometricInterpreterRgb0 = new PhotometricInterpreterRgb(6, intArray0, 6, 6, 6);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      DataReaderTiled dataReaderTiled0 = (DataReaderTiled)tiffImageData_Tiles0.getDataReader(tiffDirectory0, photometricInterpreterRgb0, (-1707), intArray0, 0, 4437, 0, 393, 6, tiffPlanarConfiguration0, byteOrder0);
      byte[] byteArray0 = new byte[13];
      try { 
        dataReaderTiled0.decompress(byteArray0, 32946, 3, 2514, 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to decompress image
         //
         verifyException("org.apache.commons.imaging.common.ZlibDeflate", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TiffElement.DataElement[] tiffElement_DataElementArray0 = new TiffElement.DataElement[1];
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory(0, linkedList0, 0, 0L, byteOrder0);
      int[] intArray0 = new int[7];
      PhotometricInterpreterLogLuv photometricInterpreterLogLuv0 = new PhotometricInterpreterLogLuv(2566, intArray0, 0, 0, 0);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      byte[] byteArray0 = new byte[2];
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles(tiffElement_DataElementArray0, (-1765), 1639);
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterLogLuv0, 0, 24, 377, intArray0, (-185), 24, 0, 6, 24, 377, tiffPlanarConfiguration0, byteOrder0, tiffImageData_Tiles0);
      try { 
        dataReaderTiled0.decompress(byteArray0, 32773, 32946, 3307, (-1162));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Tiff: Unpack bits source exhausted: 2, done + 1, expected + 32946
         //
         verifyException("org.apache.commons.imaging.common.PackBits", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 48, 48);
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory(48, linkedList0, (-1898L), (-1898L), byteOrder0);
      int[] intArray0 = new int[1];
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      DataReaderTiled dataReaderTiled0 = (DataReaderTiled)tiffImageData_Tiles0.getDataReader(tiffDirectory0, (PhotometricInterpreter) null, 48, intArray0, 48, 6, 36, 36, 6, tiffPlanarConfiguration0, byteOrder0);
      byte[] byteArray0 = new byte[9];
      try { 
        dataReaderTiled0.decompress(byteArray0, 8, 6, 48, (-503));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to decompress image
         //
         verifyException("org.apache.commons.imaging.common.ZlibDeflate", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 73, 73);
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory(73, linkedList0, 73, 73, byteOrder0);
      int[] intArray0 = new int[1];
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      DataReaderTiled dataReaderTiled0 = (DataReaderTiled)tiffImageData_Tiles0.getDataReader(tiffDirectory0, (PhotometricInterpreter) null, 73, intArray0, 73, 6, 6, 6, 6, tiffPlanarConfiguration0, byteOrder0);
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = dataReaderTiled0.decompress(byteArray0, (byte)5, 73, 73, (-641));
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TiffElement.DataElement[] tiffElement_DataElementArray0 = new TiffElement.DataElement[1];
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory(42, linkedList0, 42, 42, byteOrder0);
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles(tiffElement_DataElementArray0, 6, 6);
      int[] intArray0 = new int[7];
      PhotometricInterpreterLogLuv photometricInterpreterLogLuv0 = new PhotometricInterpreterLogLuv(42, intArray0, 42, 16, 42);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterLogLuv0, 42, (-970), 6, intArray0, 6, 10, (-970), 1677, 6, 42, tiffPlanarConfiguration0, byteOrder0, tiffImageData_Tiles0);
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        dataReaderTiled0.decompress(byteArray0, 4, 42, (-477), 331);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory((-3446), linkedList0, (-3446), (-3446), byteOrder0);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      int[] intArray0 = new int[1];
      PhotometricInterpreterCieLab photometricInterpreterCieLab0 = new PhotometricInterpreterCieLab((-3446), intArray0, (-1240), (-3446), 6);
      TiffImageData.Strips tiffImageData_Strips0 = new TiffImageData.Strips((TiffElement.DataElement[]) null, 41992);
      DataReaderStrips dataReaderStrips0 = new DataReaderStrips(tiffDirectory0, photometricInterpreterCieLab0, 6, intArray0, 6, 6, 6, 6, 41992, (-3446), tiffPlanarConfiguration0, byteOrder0, 6, tiffImageData_Strips0);
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = dataReaderStrips0.decompress(byteArray0, (byte)1, (-1240), (-1240), (-2107));
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TiffElement.DataElement[] tiffElement_DataElementArray0 = new TiffElement.DataElement[2];
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory(19, linkedList0, 19, 19, byteOrder0);
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles(tiffElement_DataElementArray0, 6, 50728);
      int[] intArray0 = new int[7];
      PhotometricInterpreterLogLuv photometricInterpreterLogLuv0 = new PhotometricInterpreterLogLuv(50728, intArray0, 19, 19, 19);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      DataReaderTiled dataReaderTiled0 = (DataReaderTiled)tiffImageData_Tiles0.getDataReader(tiffDirectory0, photometricInterpreterLogLuv0, 56, intArray0, (-1123), 3, 65120, 79, 56, tiffPlanarConfiguration0, byteOrder0);
      byte[] byteArray0 = new byte[9];
      dataReaderTiled0.decompress(byteArray0, 3, (-113), 19, (-1123));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TiffElement.DataElement[] tiffElement_DataElementArray0 = new TiffElement.DataElement[2];
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory(19, linkedList0, 19, 19, byteOrder0);
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles(tiffElement_DataElementArray0, 6, 50728);
      int[] intArray0 = new int[4];
      PhotometricInterpreterLogLuv photometricInterpreterLogLuv0 = new PhotometricInterpreterLogLuv(50728, intArray0, 19, 19, 19);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterLogLuv0, 19, (-1247), 8, intArray0, 2, 65120, 3, 32769, 50728, 13, tiffPlanarConfiguration0, byteOrder0, tiffImageData_Tiles0);
      int[] intArray1 = dataReaderTiled0.applyPredictor(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory((-3446), linkedList0, (-3446), (-3446), byteOrder0);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      int[] intArray0 = new int[1];
      intArray0[0] = 6;
      PhotometricInterpreterCieLab photometricInterpreterCieLab0 = new PhotometricInterpreterCieLab(56, intArray0, 0, (-2134), 1);
      TiffImageData.Strips tiffImageData_Strips0 = new TiffImageData.Strips((TiffElement.DataElement[]) null, 65);
      DataReaderStrips dataReaderStrips0 = new DataReaderStrips(tiffDirectory0, photometricInterpreterCieLab0, (-3446), intArray0, (-2134), 1, 1, 1193, (-1240), 56, tiffPlanarConfiguration0, byteOrder0, (-3446), tiffImageData_Strips0);
      boolean boolean0 = dataReaderStrips0.isHomogenous(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory((-3446), linkedList0, (-3446), (-3446), byteOrder0);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      int[] intArray0 = new int[1];
      intArray0[0] = (-1240);
      PhotometricInterpreterCieLab photometricInterpreterCieLab0 = new PhotometricInterpreterCieLab((-3446), intArray0, (-1240), (-3446), 6);
      TiffImageData.Strips tiffImageData_Strips0 = new TiffImageData.Strips((TiffElement.DataElement[]) null, 41992);
      DataReaderStrips dataReaderStrips0 = new DataReaderStrips(tiffDirectory0, photometricInterpreterCieLab0, 6, intArray0, 6, 6, 6, 6, 41992, (-3446), tiffPlanarConfiguration0, byteOrder0, 6, tiffImageData_Strips0);
      boolean boolean0 = dataReaderStrips0.isHomogenous((-1240));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TiffElement.DataElement[] tiffElement_DataElementArray0 = new TiffElement.DataElement[1];
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory(42, linkedList0, 42, 42, byteOrder0);
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles(tiffElement_DataElementArray0, 6, 6);
      int[] intArray0 = new int[7];
      PhotometricInterpreterLogLuv photometricInterpreterLogLuv0 = new PhotometricInterpreterLogLuv(42, intArray0, 42, 16, 42);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterLogLuv0, 42, (-970), 6, intArray0, 6, 10, (-970), 1677, 6, 42, tiffPlanarConfiguration0, byteOrder0, tiffImageData_Tiles0);
      dataReaderTiled0.resetPredictor();
  }
}
