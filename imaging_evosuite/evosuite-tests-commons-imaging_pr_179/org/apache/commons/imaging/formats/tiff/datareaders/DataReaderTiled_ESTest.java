/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 20:43:09 GMT 2025
 */

package org.apache.commons.imaging.formats.tiff.datareaders;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Rectangle;
import java.awt.geom.Rectangle2D;
import java.awt.image.RasterFormatException;
import java.io.File;
import java.nio.ByteOrder;
import java.util.LinkedList;
import org.apache.commons.imaging.common.bytesource.ByteSourceFile;
import org.apache.commons.imaging.formats.tiff.TiffDirectory;
import org.apache.commons.imaging.formats.tiff.TiffElement;
import org.apache.commons.imaging.formats.tiff.TiffField;
import org.apache.commons.imaging.formats.tiff.TiffImageData;
import org.apache.commons.imaging.formats.tiff.TiffRasterData;
import org.apache.commons.imaging.formats.tiff.constants.TiffPlanarConfiguration;
import org.apache.commons.imaging.formats.tiff.datareaders.DataReaderTiled;
import org.apache.commons.imaging.formats.tiff.photometricinterpreters.PhotometricInterpreterBiLevel;
import org.apache.commons.imaging.formats.tiff.photometricinterpreters.PhotometricInterpreterCieLab;
import org.apache.commons.imaging.formats.tiff.photometricinterpreters.PhotometricInterpreterYCbCr;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class DataReaderTiled_ESTest extends DataReaderTiled_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory(22, linkedList0, 35L, 22, byteOrder0);
      int[] intArray0 = new int[1];
      PhotometricInterpreterYCbCr photometricInterpreterYCbCr0 = new PhotometricInterpreterYCbCr(6, intArray0, 6, 22, 6);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterYCbCr0, (-2226), (-2226), (-2226), intArray0, 6, 6, 2, 22, 22, 6, tiffPlanarConfiguration0, byteOrder0, (TiffImageData.Tiles) null);
      Rectangle rectangle0 = new Rectangle((-2226), 6, 2, 22);
      TiffRasterData tiffRasterData0 = dataReaderTiled0.readRasterData(rectangle0);
      assertEquals(22, tiffRasterData0.getHeight());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffDirectory tiffDirectory0 = new TiffDirectory((-15), linkedList0, (-15), (-15), byteOrder0);
      int[] intArray0 = new int[4];
      PhotometricInterpreterYCbCr photometricInterpreterYCbCr0 = new PhotometricInterpreterYCbCr((-15), intArray0, (-15), (-15), 6);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      Rectangle rectangle0 = new Rectangle();
      TiffElement.DataElement[] tiffElement_DataElementArray0 = new TiffElement.DataElement[5];
      byte[] byteArray0 = new byte[5];
      TiffImageData.Data tiffImageData_Data0 = new TiffImageData.Data(3, (-180), byteArray0);
      tiffElement_DataElementArray0[0] = (TiffElement.DataElement) tiffImageData_Data0;
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles(tiffElement_DataElementArray0, 244, 7);
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterYCbCr0, (-180), 3, 48321, intArray0, (-15), 481, 3, 0, 294, 177, tiffPlanarConfiguration0, byteOrder0, tiffImageData_Tiles0);
      try { 
        dataReaderTiled0.readRasterData(rectangle0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Tiff: unknown/unsupported compression: 177
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.ImageDataReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffDirectory tiffDirectory0 = new TiffDirectory((-14), linkedList0, (-14), (-14), byteOrder0);
      int[] intArray0 = new int[5];
      PhotometricInterpreterYCbCr photometricInterpreterYCbCr0 = new PhotometricInterpreterYCbCr((-14), intArray0, (-14), (-14), 6);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterYCbCr0, (-14), (-14), (-14), intArray0, 6, 6, 3, 6, 6, 6, tiffPlanarConfiguration0, byteOrder0, (TiffImageData.Tiles) null);
      Rectangle rectangle0 = new Rectangle((-14), 6);
      // Undeclared exception!
      try { 
        dataReaderTiled0.readRasterData(rectangle0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.DataReaderTiled", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffDirectory tiffDirectory0 = new TiffDirectory(0, linkedList0, 0, 0, byteOrder0);
      int[] intArray0 = new int[5];
      PhotometricInterpreterYCbCr photometricInterpreterYCbCr0 = new PhotometricInterpreterYCbCr(0, intArray0, 0, 0, 6);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterYCbCr0, 6, 0, 0, intArray0, 6, 0, 3, 6, 6, 6, tiffPlanarConfiguration0, byteOrder0, (TiffImageData.Tiles) null);
      Rectangle rectangle0 = new Rectangle(3, 6, 3, 0);
      // Undeclared exception!
      try { 
        dataReaderTiled0.readRasterData(rectangle0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.DataReaderTiled", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffDirectory tiffDirectory0 = new TiffDirectory(6, linkedList0, 6, 6, byteOrder0);
      int[] intArray0 = new int[1];
      PhotometricInterpreterYCbCr photometricInterpreterYCbCr0 = new PhotometricInterpreterYCbCr(1, intArray0, 6, 3668, 3668);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterYCbCr0, (-1297), 6, 41494, intArray0, 3668, 664, (-1297), 6, 6, 41494, tiffPlanarConfiguration0, byteOrder0, (TiffImageData.Tiles) null);
      Rectangle rectangle0 = new Rectangle();
      rectangle0.setFrameFromCenter((double) 6, (-1753.8533322920534), (-1753.8533322920534), (double) 41494);
      // Undeclared exception!
      dataReaderTiled0.readImageData(rectangle0, false, true);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffDirectory tiffDirectory0 = new TiffDirectory(45, linkedList0, 45, 45, byteOrder0);
      int[] intArray0 = new int[1];
      PhotometricInterpreterYCbCr photometricInterpreterYCbCr0 = new PhotometricInterpreterYCbCr(45, intArray0, 45, 45, 6);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      TiffElement.DataElement[] tiffElement_DataElementArray0 = new TiffElement.DataElement[1];
      File file0 = MockFile.createTempFile("Y9#*Z7^ntl/$Gk1", "Y9#*Z7^ntl/$Gk1");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(file0);
      TiffImageData.ByteSourceData tiffImageData_ByteSourceData0 = new TiffImageData.ByteSourceData(0L, 56, byteSourceFile0);
      tiffElement_DataElementArray0[0] = (TiffElement.DataElement) tiffImageData_ByteSourceData0;
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles(tiffElement_DataElementArray0, 32, 32);
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterYCbCr0, 6, 592, (-1183), intArray0, (-293), 592, 592, 45, (-1183), 32, tiffPlanarConfiguration0, byteOrder0, tiffImageData_Tiles0);
      Rectangle rectangle0 = new Rectangle(2051, 45);
      try { 
        dataReaderTiled0.readImageData(rectangle0, false, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Tiff: unknown/unsupported compression: 32
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.ImageDataReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory(0, linkedList0, 0, 0, byteOrder0);
      int[] intArray0 = new int[2];
      Rectangle rectangle0 = new Rectangle(1, (-3444));
      PhotometricInterpreterBiLevel photometricInterpreterBiLevel0 = new PhotometricInterpreterBiLevel(1, intArray0, (-3444), 14, 14, true);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterBiLevel0, 50728, 50728, (-8), intArray0, 0, 0, 14, (-3444), 0, (-835), tiffPlanarConfiguration0, byteOrder0, (TiffImageData.Tiles) null);
      // Undeclared exception!
      try { 
        dataReaderTiled0.readImageData(rectangle0, true, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.ImageBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffDirectory tiffDirectory0 = new TiffDirectory(22, linkedList0, 22, 22, byteOrder0);
      int[] intArray0 = new int[1];
      PhotometricInterpreterYCbCr photometricInterpreterYCbCr0 = new PhotometricInterpreterYCbCr(6, intArray0, 6, 22, 6);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      TiffElement.DataElement[] tiffElement_DataElementArray0 = new TiffElement.DataElement[0];
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles(tiffElement_DataElementArray0, 770, (-260));
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterYCbCr0, 62, 1369, 40964, intArray0, 62, 22, 22, 1, 40964, 6, tiffPlanarConfiguration0, byteOrder0, tiffImageData_Tiles0);
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        dataReaderTiled0.readImageData(rectangle0, false, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.DataReaderTiled", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory(0, linkedList0, 0, 0, byteOrder0);
      int[] intArray0 = new int[2];
      PhotometricInterpreterYCbCr photometricInterpreterYCbCr0 = new PhotometricInterpreterYCbCr(0, intArray0, 0, 0, 6);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterYCbCr0, 0, 0, 0, intArray0, 6, 6, 0, 6, 6, 6, tiffPlanarConfiguration0, byteOrder0, (TiffImageData.Tiles) null);
      // Undeclared exception!
      try { 
        dataReaderTiled0.readImageData((Rectangle) null, true, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.DataReaderTiled", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffDirectory tiffDirectory0 = new TiffDirectory(15, linkedList0, 15, 15, byteOrder0);
      int[] intArray0 = new int[2];
      PhotometricInterpreterYCbCr photometricInterpreterYCbCr0 = new PhotometricInterpreterYCbCr(6, intArray0, 6, 15, 6);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      DataReaderTiled dataReaderTiled0 = null;
      try {
        dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterYCbCr0, 2, 0, 257, (int[]) null, 11618, (-1886), 0, 1080, 0, 11618, tiffPlanarConfiguration0, byteOrder0, (TiffImageData.Tiles) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.ImageDataReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffDirectory tiffDirectory0 = new TiffDirectory(58, linkedList0, 58, 58, byteOrder0);
      int[] intArray0 = new int[18];
      PhotometricInterpreterYCbCr photometricInterpreterYCbCr0 = new PhotometricInterpreterYCbCr(58, intArray0, 58, 58, 6);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      DataReaderTiled dataReaderTiled0 = null;
      try {
        dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterYCbCr0, 6, 6, 6, intArray0, 58, (-556), 0, 6, 0, 0, tiffPlanarConfiguration0, byteOrder0, (TiffImageData.Tiles) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.ImageDataReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffDirectory tiffDirectory0 = new TiffDirectory(6, linkedList0, 6, 6, byteOrder0);
      int[] intArray0 = new int[5];
      PhotometricInterpreterYCbCr photometricInterpreterYCbCr0 = new PhotometricInterpreterYCbCr(6, intArray0, 6, 6, 6);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterYCbCr0, 6, 6, 6, intArray0, 6, 6, 3, 6, 6, 6, tiffPlanarConfiguration0, byteOrder0, (TiffImageData.Tiles) null);
      Rectangle rectangle0 = new Rectangle();
      rectangle0.x = 6;
      // Undeclared exception!
      try { 
        dataReaderTiled0.readRasterData(rectangle0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Raster dimensions less than or equal to zero are not supported
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffRasterData", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffDirectory tiffDirectory0 = new TiffDirectory((-15), linkedList0, (-15), (-15), byteOrder0);
      int[] intArray0 = new int[4];
      PhotometricInterpreterYCbCr photometricInterpreterYCbCr0 = new PhotometricInterpreterYCbCr((-15), intArray0, (-15), (-15), 6);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterYCbCr0, (-15), (-15), (-15), intArray0, 6, 6, 3, 6, 6, 6, tiffPlanarConfiguration0, byteOrder0, (TiffImageData.Tiles) null);
      Rectangle rectangle0 = new Rectangle(3, (-15), 3, 3);
      TiffRasterData tiffRasterData0 = dataReaderTiled0.readRasterData(rectangle0);
      assertEquals(3, tiffRasterData0.getWidth());
      assertEquals(3, tiffRasterData0.getHeight());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffDirectory tiffDirectory0 = new TiffDirectory(6, linkedList0, 6, 6, byteOrder0);
      int[] intArray0 = new int[5];
      PhotometricInterpreterYCbCr photometricInterpreterYCbCr0 = new PhotometricInterpreterYCbCr(6, intArray0, 6, 6, 6);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterYCbCr0, 6, 6, 6, intArray0, 6, 6, 3, 6, 6, 6, tiffPlanarConfiguration0, byteOrder0, (TiffImageData.Tiles) null);
      // Undeclared exception!
      try { 
        dataReaderTiled0.readRasterData((Rectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.DataReaderTiled", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffDirectory tiffDirectory0 = new TiffDirectory(49, linkedList0, 49, 49, byteOrder0);
      int[] intArray0 = new int[1];
      PhotometricInterpreterYCbCr photometricInterpreterYCbCr0 = new PhotometricInterpreterYCbCr(49, intArray0, 49, 49, 6);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterYCbCr0, 49, 49, 49, intArray0, 6, 49, 6, 49, 49, 49, tiffPlanarConfiguration0, byteOrder0, (TiffImageData.Tiles) null);
      Rectangle rectangle0 = new Rectangle();
      try { 
        dataReaderTiled0.readRasterData(rectangle0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unsupported sample format, value=6
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.DataReaderTiled", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffDirectory tiffDirectory0 = new TiffDirectory(15, linkedList0, 15, 15, byteOrder0);
      int[] intArray0 = new int[2];
      PhotometricInterpreterYCbCr photometricInterpreterYCbCr0 = new PhotometricInterpreterYCbCr(6, intArray0, 6, 15, 6);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterYCbCr0, 6, 15, 6, intArray0, 6, 6, 2, 15, 15, 6, tiffPlanarConfiguration0, byteOrder0, (TiffImageData.Tiles) null);
      // Undeclared exception!
      try { 
        dataReaderTiled0.readRasterData((Rectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.DataReaderTiled", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[13];
      PhotometricInterpreterCieLab photometricInterpreterCieLab0 = new PhotometricInterpreterCieLab(2425, intArray0, 2425, 0, 0);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 2425, 2425);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled((TiffDirectory) null, photometricInterpreterCieLab0, 3, (-293), 22, intArray0, 267, 267, 22, 267, 2425, 0, tiffPlanarConfiguration0, byteOrder0, tiffImageData_Tiles0);
      // Undeclared exception!
      try { 
        dataReaderTiled0.readImageData((Rectangle) null, true, true);
        fail("Expecting exception: RasterFormatException");
      
      } catch(RasterFormatException e) {
         //
         // subimage (y+height) is outside raster
         //
         verifyException("org.apache.commons.imaging.common.ImageBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory((-10), linkedList0, (-10), (-10), byteOrder0);
      int[] intArray0 = new int[1];
      PhotometricInterpreterYCbCr photometricInterpreterYCbCr0 = new PhotometricInterpreterYCbCr((-10), intArray0, (-10), (-10), 6);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterYCbCr0, (-10), (-10), (-10), intArray0, 6, 6, (-10), 6, 6, 6, tiffPlanarConfiguration0, byteOrder0, (TiffImageData.Tiles) null);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.0F, (-243.26633F), 705.4714F, 999.7F);
      Rectangle rectangle0 = rectangle2D_Float0.getBounds();
      // Undeclared exception!
      try { 
        dataReaderTiled0.readImageData(rectangle0, true, true);
        fail("Expecting exception: RasterFormatException");
      
      } catch(RasterFormatException e) {
         //
         // subimage (x+width) is outside raster
         //
         verifyException("org.apache.commons.imaging.common.ImageBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory((-10), linkedList0, (-10), (-10), byteOrder0);
      int[] intArray0 = new int[1];
      PhotometricInterpreterYCbCr photometricInterpreterYCbCr0 = new PhotometricInterpreterYCbCr((-10), intArray0, (-10), (-10), 6);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterYCbCr0, (-10), (-10), (-10), intArray0, 6, 6, (-10), 6, 6, 6, tiffPlanarConfiguration0, byteOrder0, (TiffImageData.Tiles) null);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-1.2371389F), (-243.26633F), 705.4714F, 999.7F);
      Rectangle rectangle0 = rectangle2D_Float0.getBounds();
      // Undeclared exception!
      try { 
        dataReaderTiled0.readImageData(rectangle0, true, true);
        fail("Expecting exception: RasterFormatException");
      
      } catch(RasterFormatException e) {
         //
         // subimage x is outside raster
         //
         verifyException("org.apache.commons.imaging.common.ImageBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory(15, linkedList0, 15, 15, byteOrder0);
      int[] intArray0 = new int[2];
      PhotometricInterpreterYCbCr photometricInterpreterYCbCr0 = new PhotometricInterpreterYCbCr(6, intArray0, 6, 15, 6);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterYCbCr0, (-5), 279, 279, intArray0, 279, 15, 1104, 32, 1104, 15, tiffPlanarConfiguration0, byteOrder0, (TiffImageData.Tiles) null);
      // Undeclared exception!
      try { 
        dataReaderTiled0.readImageData((Rectangle) null, false, false);
        fail("Expecting exception: RasterFormatException");
      
      } catch(RasterFormatException e) {
         //
         // subimage (x+width) is outside raster
         //
         verifyException("org.apache.commons.imaging.common.ImageBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffDirectory tiffDirectory0 = new TiffDirectory(49, linkedList0, 49, 49, byteOrder0);
      int[] intArray0 = new int[1];
      PhotometricInterpreterYCbCr photometricInterpreterYCbCr0 = new PhotometricInterpreterYCbCr(49, intArray0, 49, 49, 6);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterYCbCr0, 49, 49, 49, intArray0, 6, 49, 6, 49, 49, 49, tiffPlanarConfiguration0, byteOrder0, (TiffImageData.Tiles) null);
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        dataReaderTiled0.readImageData(rectangle0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.DataReaderTiled", e);
      }
  }
}
