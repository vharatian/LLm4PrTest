/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 21:35:46 GMT 2025
 */

package org.apache.commons.imaging.formats.tiff.datareaders;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dimension;
import java.awt.Rectangle;
import java.awt.image.RasterFormatException;
import java.io.IOException;
import java.nio.ByteOrder;
import java.nio.CharBuffer;
import java.util.LinkedList;
import org.apache.commons.imaging.formats.tiff.TiffDirectory;
import org.apache.commons.imaging.formats.tiff.TiffElement;
import org.apache.commons.imaging.formats.tiff.TiffField;
import org.apache.commons.imaging.formats.tiff.TiffImageData;
import org.apache.commons.imaging.formats.tiff.TiffRasterData;
import org.apache.commons.imaging.formats.tiff.constants.TiffPlanarConfiguration;
import org.apache.commons.imaging.formats.tiff.datareaders.DataReaderTiled;
import org.apache.commons.imaging.formats.tiff.photometricinterpreters.PhotometricInterpreterBiLevel;
import org.apache.commons.imaging.formats.tiff.photometricinterpreters.PhotometricInterpreterCieLab;
import org.apache.commons.imaging.formats.tiff.photometricinterpreters.PhotometricInterpreterLogLuv;
import org.apache.commons.imaging.formats.tiff.photometricinterpreters.PhotometricInterpreterYCbCr;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class DataReaderTiled_ESTest extends DataReaderTiled_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory(1413, linkedList0, 1413, 1413, byteOrder0);
      int[] intArray0 = new int[3];
      PhotometricInterpreterYCbCr photometricInterpreterYCbCr0 = new PhotometricInterpreterYCbCr(6, intArray0, 1413, 0, 0);
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 1413, 1413);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterYCbCr0, 6, 6, 1413, intArray0, 6, 1413, 2, 6, 1413, 1413, tiffPlanarConfiguration0, byteOrder0, tiffImageData_Tiles0);
      // Undeclared exception!
      try { 
        dataReaderTiled0.readRasterData((Rectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.DataReaderTiled", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ByteOrder byteOrder0 = charBuffer0.order();
      TiffDirectory tiffDirectory0 = new TiffDirectory(675, linkedList0, 2L, 2L, byteOrder0);
      int[] intArray0 = new int[8];
      PhotometricInterpreterCieLab photometricInterpreterCieLab0 = new PhotometricInterpreterCieLab(628, intArray0, 236, 24, 675);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      TiffElement.DataElement[] tiffElement_DataElementArray0 = new TiffElement.DataElement[2];
      byte[] byteArray0 = new byte[2];
      TiffImageData.Data tiffImageData_Data0 = new TiffImageData.Data(1, (-62), byteArray0);
      tiffElement_DataElementArray0[0] = (TiffElement.DataElement) tiffImageData_Data0;
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles(tiffElement_DataElementArray0, 1, (-62));
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterCieLab0, 3194, 236, 3194, intArray0, 628, 628, (-2072), 1481, 41989, 1, tiffPlanarConfiguration0, byteOrder0, tiffImageData_Tiles0);
      Dimension dimension0 = new Dimension();
      Rectangle rectangle0 = new Rectangle(dimension0);
      try { 
        dataReaderTiled0.readImageData(rectangle0, false, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // BitInputStream: incomplete bit read
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory(34, linkedList0, 34, 34, byteOrder0);
      int[] intArray0 = new int[9];
      PhotometricInterpreterCieLab photometricInterpreterCieLab0 = new PhotometricInterpreterCieLab(6, intArray0, 6, 3, 6);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      TiffElement.DataElement[] tiffElement_DataElementArray0 = new TiffElement.DataElement[2];
      byte[] byteArray0 = new byte[3];
      TiffImageData.Data tiffImageData_Data0 = new TiffImageData.Data(0, 0, byteArray0);
      tiffElement_DataElementArray0[0] = (TiffElement.DataElement) tiffImageData_Data0;
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles(tiffElement_DataElementArray0, 1, 34);
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterCieLab0, 6, 34, 6, intArray0, 0, 34, 3, 6, 0, 1, tiffPlanarConfiguration0, byteOrder0, tiffImageData_Tiles0);
      Rectangle rectangle0 = new Rectangle();
      try { 
        dataReaderTiled0.readRasterData(rectangle0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Imaging does not support floating-point samples with 6 bits per sample
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.ImageDataReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory(2, linkedList0, 2, 2, byteOrder0);
      int[] intArray0 = new int[8];
      PhotometricInterpreterCieLab photometricInterpreterCieLab0 = new PhotometricInterpreterCieLab(6, intArray0, 6, 2, 6);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      TiffElement.DataElement[] tiffElement_DataElementArray0 = new TiffElement.DataElement[3];
      byte[] byteArray0 = new byte[2];
      TiffImageData.Data tiffImageData_Data0 = new TiffImageData.Data(0, 0, byteArray0);
      tiffElement_DataElementArray0[0] = (TiffElement.DataElement) tiffImageData_Data0;
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles(tiffElement_DataElementArray0, 1, 2);
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterCieLab0, 6, 2, 6, intArray0, 0, 2, 2, 6, 0, 1, tiffPlanarConfiguration0, byteOrder0, tiffImageData_Tiles0);
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        dataReaderTiled0.readRasterData(rectangle0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.ImageDataReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffDirectory tiffDirectory0 = new TiffDirectory(2121, linkedList0, 2121, 2121, byteOrder0);
      int[] intArray0 = new int[9];
      PhotometricInterpreterYCbCr photometricInterpreterYCbCr0 = new PhotometricInterpreterYCbCr(6, intArray0, 6, 6, 6);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 6, 2121);
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterYCbCr0, 6, 6, 6, intArray0, 6, 0, 0, 0, 0, 6, tiffPlanarConfiguration0, byteOrder0, tiffImageData_Tiles0);
      // Undeclared exception!
      try { 
        dataReaderTiled0.readImageData((Rectangle) null, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.DataReaderTiled", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory(2, linkedList0, 2, 2, byteOrder0);
      int[] intArray0 = new int[8];
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 946, (-1887));
      PhotometricInterpreterLogLuv photometricInterpreterLogLuv0 = new PhotometricInterpreterLogLuv(877, intArray0, 2, (-314), (-522));
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterLogLuv0, 50218, 50218, 2, intArray0, (-522), 946, (-2566), (-2566), 2, 2, tiffPlanarConfiguration0, byteOrder0, tiffImageData_Tiles0);
      // Undeclared exception!
      try { 
        dataReaderTiled0.readImageData((Rectangle) null, false, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.ImageBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory(2, linkedList0, 2, 2, byteOrder0);
      int[] intArray0 = new int[8];
      PhotometricInterpreterCieLab photometricInterpreterCieLab0 = new PhotometricInterpreterCieLab(6, intArray0, 6, 3, 6);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      TiffElement.DataElement[] tiffElement_DataElementArray0 = new TiffElement.DataElement[3];
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles(tiffElement_DataElementArray0, 1, 2);
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterCieLab0, 6, 2, 6, intArray0, 0, 2, 3, 6, 0, 1, tiffPlanarConfiguration0, byteOrder0, tiffImageData_Tiles0);
      Rectangle rectangle0 = new Rectangle(2, (-500), 0, 6);
      // Undeclared exception!
      try { 
        dataReaderTiled0.readImageData(rectangle0, true, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -250
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.DataReaderTiled", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffDirectory tiffDirectory0 = new TiffDirectory((-16777248), linkedList0, (-16777248), (-16777248), byteOrder0);
      int[] intArray0 = new int[4];
      PhotometricInterpreterYCbCr photometricInterpreterYCbCr0 = new PhotometricInterpreterYCbCr(6, intArray0, 0, 6, 6);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 6, (-16777248));
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterYCbCr0, 0, 6, 6, intArray0, 6, 0, 0, 0, 0, 6, tiffPlanarConfiguration0, byteOrder0, tiffImageData_Tiles0);
      // Undeclared exception!
      try { 
        dataReaderTiled0.readImageData((Rectangle) null, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.DataReaderTiled", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffDirectory tiffDirectory0 = new TiffDirectory(668, linkedList0, 668, 0L, byteOrder0);
      int[] intArray0 = new int[2];
      PhotometricInterpreterYCbCr photometricInterpreterYCbCr0 = new PhotometricInterpreterYCbCr(508, intArray0, (-943), 7, 192);
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 668, 0);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      DataReaderTiled dataReaderTiled0 = null;
      try {
        dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterYCbCr0, 508, (-943), 929, (int[]) null, 6, 108, (-2), 6, 6, 7, tiffPlanarConfiguration0, byteOrder0, tiffImageData_Tiles0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.ImageDataReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      TiffDirectory tiffDirectory0 = new TiffDirectory(4037, linkedList0, 4037, 4037, (ByteOrder) null);
      int[] intArray0 = new int[9];
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      PhotometricInterpreterYCbCr photometricInterpreterYCbCr0 = new PhotometricInterpreterYCbCr((-314), intArray0, 4037, 4037, (-314));
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, (-314), 4037);
      DataReaderTiled dataReaderTiled0 = null;
      try {
        dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterYCbCr0, 946, 0, 4037, intArray0, 6, (-314), (-314), 946, 946, (-743), tiffPlanarConfiguration0, (ByteOrder) null, tiffImageData_Tiles0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.ImageDataReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory(0, linkedList0, 0, 0, byteOrder0);
      int[] intArray0 = new int[2];
      PhotometricInterpreterYCbCr photometricInterpreterYCbCr0 = new PhotometricInterpreterYCbCr(6, intArray0, 4047, 0, 0);
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 0, 320);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterYCbCr0, 320, 320, 0, intArray0, 320, 4047, 2, 320, 0, 0, tiffPlanarConfiguration0, byteOrder0, tiffImageData_Tiles0);
      Rectangle rectangle0 = new Rectangle(320, 6, 0, 1251);
      // Undeclared exception!
      try { 
        dataReaderTiled0.readRasterData(rectangle0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Raster dimensions less than or equal to zero are not supported
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffRasterData", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffDirectory tiffDirectory0 = new TiffDirectory(1417, linkedList0, 1417, 1417, byteOrder0);
      int[] intArray0 = new int[2];
      PhotometricInterpreterYCbCr photometricInterpreterYCbCr0 = new PhotometricInterpreterYCbCr(6, intArray0, 1417, 0, 0);
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 1417, (-2000));
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterYCbCr0, (-2000), (-2000), 1417, intArray0, (-2000), 1417, 2, (-2000), 1417, 1417, tiffPlanarConfiguration0, byteOrder0, tiffImageData_Tiles0);
      // Undeclared exception!
      try { 
        dataReaderTiled0.readRasterData((Rectangle) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.DataReaderTiled", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      TiffDirectory tiffDirectory0 = new TiffDirectory(4037, linkedList0, 4037, 4037, (ByteOrder) null);
      int[] intArray0 = new int[2];
      PhotometricInterpreterBiLevel photometricInterpreterBiLevel0 = new PhotometricInterpreterBiLevel(4037, intArray0, 4037, 4037, 4037, true);
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, (-796), (-307));
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterBiLevel0, (-1095), (-1345), 640, intArray0, 523, 3700, 3, 11, 4498, (-189), tiffPlanarConfiguration0, (ByteOrder) null, tiffImageData_Tiles0);
      Rectangle rectangle0 = new Rectangle(288, 2, 3700, 98);
      TiffRasterData tiffRasterData0 = dataReaderTiled0.readRasterData(rectangle0);
      assertEquals(98, tiffRasterData0.getHeight());
      assertEquals(3700, tiffRasterData0.getWidth());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      TiffDirectory tiffDirectory0 = new TiffDirectory(4037, linkedList0, 4037, 4037, (ByteOrder) null);
      int[] intArray0 = new int[9];
      PhotometricInterpreterBiLevel photometricInterpreterBiLevel0 = new PhotometricInterpreterBiLevel(4037, intArray0, 0, 0, 4037, true);
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 6, 6);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterBiLevel0, 4037, (-1345), 0, intArray0, 6, 3700, 3, 11, 4037, 4037, tiffPlanarConfiguration0, (ByteOrder) null, tiffImageData_Tiles0);
      TiffRasterData tiffRasterData0 = dataReaderTiled0.readRasterData((Rectangle) null);
      assertEquals(11, tiffRasterData0.getWidth());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      TiffDirectory tiffDirectory0 = new TiffDirectory(4037, linkedList0, 4037, 4037, (ByteOrder) null);
      int[] intArray0 = new int[9];
      PhotometricInterpreterBiLevel photometricInterpreterBiLevel0 = new PhotometricInterpreterBiLevel(4037, intArray0, 0, 0, 4037, true);
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 6, 6);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterBiLevel0, 0, (-1345), 0, intArray0, 6, 0, 3, 11, 0, 0, tiffPlanarConfiguration0, (ByteOrder) null, tiffImageData_Tiles0);
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        dataReaderTiled0.readRasterData(rectangle0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.DataReaderTiled", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory((-16777223), linkedList0, (-16777223), (-16777223), byteOrder0);
      int[] intArray0 = new int[4];
      PhotometricInterpreterYCbCr photometricInterpreterYCbCr0 = new PhotometricInterpreterYCbCr(6, intArray0, 0, 6, 6);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 6, (-16777223));
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterYCbCr0, 0, 6, 6, intArray0, 6, 0, 0, 0, 0, 6, tiffPlanarConfiguration0, byteOrder0, tiffImageData_Tiles0);
      Rectangle rectangle0 = new Rectangle((-16777223), (-16777223));
      try { 
        dataReaderTiled0.readRasterData(rectangle0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unsupported sample format, value=0
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.DataReaderTiled", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      TiffDirectory tiffDirectory0 = new TiffDirectory(4037, linkedList0, 4037, 4037, (ByteOrder) null);
      int[] intArray0 = new int[4];
      PhotometricInterpreterBiLevel photometricInterpreterBiLevel0 = new PhotometricInterpreterBiLevel(4037, intArray0, 4037, 4037, 4037, false);
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 4037, (-307));
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterBiLevel0, 1, (-1345), 640, intArray0, 521, 6, 4459, 4037, 4459, (-307), tiffPlanarConfiguration0, (ByteOrder) null, tiffImageData_Tiles0);
      // Undeclared exception!
      try { 
        dataReaderTiled0.readImageData((Rectangle) null, true, false);
        fail("Expecting exception: RasterFormatException");
      
      } catch(RasterFormatException e) {
         //
         // subimage (y+height) is outside raster
         //
         verifyException("org.apache.commons.imaging.common.ImageBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      TiffDirectory tiffDirectory0 = new TiffDirectory(4037, linkedList0, 4037, 4037, (ByteOrder) null);
      int[] intArray0 = new int[2];
      PhotometricInterpreterBiLevel photometricInterpreterBiLevel0 = new PhotometricInterpreterBiLevel(4037, intArray0, 4037, 4037, 4037, false);
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 4037, (-307));
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterBiLevel0, (-307), 4037, (-1345), intArray0, (-5716), 4037, 4037, 4037, (-5716), 939, tiffPlanarConfiguration0, (ByteOrder) null, tiffImageData_Tiles0);
      Rectangle rectangle0 = new Rectangle((-307), 4459, 640, 2560);
      // Undeclared exception!
      try { 
        dataReaderTiled0.readImageData(rectangle0, true, false);
        fail("Expecting exception: RasterFormatException");
      
      } catch(RasterFormatException e) {
         //
         // subimage (x+width) is outside raster
         //
         verifyException("org.apache.commons.imaging.common.ImageBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffDirectory tiffDirectory0 = new TiffDirectory(0, linkedList0, 0, 0, byteOrder0);
      int[] intArray0 = new int[4];
      PhotometricInterpreterYCbCr photometricInterpreterYCbCr0 = new PhotometricInterpreterYCbCr(6, intArray0, 0, 6, 6);
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 3, (-16777174));
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterYCbCr0, 6, (-296), 4, intArray0, 6, 614, 4038, 1574, 36, 0, tiffPlanarConfiguration0, byteOrder0, tiffImageData_Tiles0);
      Rectangle rectangle0 = new Rectangle((-16777174), 478, 47, 1779);
      // Undeclared exception!
      try { 
        dataReaderTiled0.readImageData(rectangle0, true, false);
        fail("Expecting exception: RasterFormatException");
      
      } catch(RasterFormatException e) {
         //
         // subimage x is outside raster
         //
         verifyException("org.apache.commons.imaging.common.ImageBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      TiffDirectory tiffDirectory0 = new TiffDirectory(4005, linkedList0, 4005, 4005, (ByteOrder) null);
      int[] intArray0 = new int[9];
      PhotometricInterpreterBiLevel photometricInterpreterBiLevel0 = new PhotometricInterpreterBiLevel(4005, intArray0, 0, 0, 4005, true);
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles((TiffElement.DataElement[]) null, 6, 4005);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterBiLevel0, (-864), 4388, (-864), intArray0, 964, 16, 7, 4005, (-568), (-1441), tiffPlanarConfiguration0, (ByteOrder) null, tiffImageData_Tiles0);
      // Undeclared exception!
      try { 
        dataReaderTiled0.readImageData((Rectangle) null, true, true);
        fail("Expecting exception: RasterFormatException");
      
      } catch(RasterFormatException e) {
         //
         // negative or zero subimage height
         //
         verifyException("org.apache.commons.imaging.common.ImageBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory(2, linkedList0, 2, 2, byteOrder0);
      int[] intArray0 = new int[8];
      PhotometricInterpreterCieLab photometricInterpreterCieLab0 = new PhotometricInterpreterCieLab(6, intArray0, 6, 3, 6);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      TiffElement.DataElement[] tiffElement_DataElementArray0 = new TiffElement.DataElement[3];
      byte[] byteArray0 = new byte[2];
      TiffImageData.Data tiffImageData_Data0 = new TiffImageData.Data(0, 0, byteArray0);
      tiffElement_DataElementArray0[0] = (TiffElement.DataElement) tiffImageData_Data0;
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles(tiffElement_DataElementArray0, 1, 2);
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterCieLab0, 6, 2, 6, intArray0, 0, 2, 3, 6, 0, 1, tiffPlanarConfiguration0, byteOrder0, tiffImageData_Tiles0);
      try { 
        dataReaderTiled0.readImageData((Rectangle) null, false, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Imaging does not support floating-point samples with 6 bits per sample
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.ImageDataReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ByteOrder byteOrder0 = charBuffer0.order();
      TiffDirectory tiffDirectory0 = new TiffDirectory(675, linkedList0, 2L, 2L, byteOrder0);
      int[] intArray0 = new int[8];
      PhotometricInterpreterCieLab photometricInterpreterCieLab0 = new PhotometricInterpreterCieLab(628, intArray0, 236, 24, 675);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      TiffElement.DataElement[] tiffElement_DataElementArray0 = new TiffElement.DataElement[2];
      byte[] byteArray0 = new byte[2];
      TiffImageData.Data tiffImageData_Data0 = new TiffImageData.Data(1, (-62), byteArray0);
      tiffElement_DataElementArray0[0] = (TiffElement.DataElement) tiffImageData_Data0;
      TiffImageData.Tiles tiffImageData_Tiles0 = new TiffImageData.Tiles(tiffElement_DataElementArray0, 1, (-62));
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterCieLab0, 3194, 236, 3194, intArray0, 628, 628, 24, 1481, 41989, 1, tiffPlanarConfiguration0, byteOrder0, tiffImageData_Tiles0);
      Dimension dimension0 = new Dimension();
      Rectangle rectangle0 = new Rectangle(dimension0);
      try { 
        dataReaderTiled0.readImageData(rectangle0, false, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // BitInputStream: incomplete bit read
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.BitInputStream", e);
      }
  }
}
