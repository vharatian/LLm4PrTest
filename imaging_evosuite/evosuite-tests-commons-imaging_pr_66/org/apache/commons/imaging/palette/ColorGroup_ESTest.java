/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 01:13:05 GMT 2025
 */

package org.apache.commons.imaging.palette;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.apache.commons.imaging.palette.ColorCount;
import org.apache.commons.imaging.palette.ColorGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ColorGroup_ESTest extends ColorGroup_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(2580);
      linkedList0.add(colorCount0);
      ColorCount colorCount1 = new ColorCount(Integer.MIN_VALUE);
      linkedList0.add(colorCount1);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, true);
      String string0 = colorGroup0.toString();
      assertEquals("{ColorGroup. minRed: 0, maxRed: 0, minGreen: 0, maxGreen: a, minBlue: 0, maxBlue: 14, minAlpha: 0, maxAlpha: 80, maxDiff: 14, diffTotal: 30}", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount((-1602));
      linkedList0.add(colorCount0);
      ColorCount colorCount1 = new ColorCount(24);
      linkedList0.add(colorCount1);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, true);
      String string0 = colorGroup0.toString();
      assertEquals("{ColorGroup. minRed: 0, maxRed: ff, minGreen: 0, maxGreen: f9, minBlue: 18, maxBlue: be, minAlpha: 0, maxAlpha: ff, maxDiff: ff, diffTotal: 670}", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount((-1602));
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, true);
      String string0 = colorGroup0.toString();
      assertEquals("{ColorGroup. minRed: ff, maxRed: ff, minGreen: f9, maxGreen: f9, minBlue: be, maxBlue: be, minAlpha: ff, maxAlpha: ff, maxDiff: 0, diffTotal: 0}", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(Integer.MIN_VALUE);
      colorCount0.count = Integer.MIN_VALUE;
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, false);
      colorCount0.count = 8;
      int int0 = colorGroup0.getMedianValue();
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount((-1602));
      colorCount0.count = (-1602);
      linkedList0.add(colorCount0);
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, true);
      int int0 = colorGroup0.getMedianValue();
      assertEquals((-1602), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(Integer.MIN_VALUE);
      colorCount0.count = 190;
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, true);
      linkedList0.add(colorCount0);
      int int0 = colorGroup0.getMedianValue();
      assertEquals((-16777216), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(121);
      linkedList0.add(colorCount0);
      colorCount0.count = 1589;
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, false);
      linkedList0.add(colorCount0);
      int int0 = colorGroup0.getMedianValue();
      assertEquals(121, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(121);
      boolean boolean0 = linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, false);
      colorGroup0.maxAlpha = Integer.MAX_VALUE;
      boolean boolean1 = colorGroup0.contains(307);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(2147483645);
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, false);
      boolean boolean0 = colorGroup0.contains(2147483645);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(Integer.MIN_VALUE);
      colorCount0.count = 190;
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, true);
      linkedList0.add(colorCount0);
      ColorGroup colorGroup1 = new ColorGroup(colorGroup0.colorCounts, true);
      assertFalse(colorGroup1.equals((Object)colorGroup0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(Integer.MIN_VALUE);
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, false);
      linkedList0.add((ColorCount) null);
      // Undeclared exception!
      try { 
        colorGroup0.getMedianValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.palette.ColorGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      linkedList0.add((ColorCount) null);
      ColorGroup colorGroup0 = null;
      try {
        colorGroup0 = new ColorGroup(linkedList0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.palette.ColorGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(121);
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, false);
      int int0 = colorGroup0.getMedianValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount((-1602));
      linkedList0.add(colorCount0);
      ColorCount colorCount1 = new ColorCount(24);
      linkedList0.add(colorCount1);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, true);
      boolean boolean0 = colorGroup0.contains((-8356501));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount((-2147483645));
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, true);
      boolean boolean0 = colorGroup0.contains(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(Integer.MIN_VALUE);
      boolean boolean0 = linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, true);
      boolean boolean1 = colorGroup0.contains((-1));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(2147483645);
      boolean boolean0 = linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, true);
      boolean boolean1 = colorGroup0.contains(255);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(2267);
      boolean boolean0 = linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, false);
      boolean boolean1 = colorGroup0.contains((-1));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(1127);
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, false);
      boolean boolean0 = colorGroup0.contains(103);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(Integer.MIN_VALUE);
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, true);
      boolean boolean0 = colorGroup0.contains(128);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(Integer.MIN_VALUE);
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, false);
      boolean boolean0 = colorGroup0.contains(128);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorGroup colorGroup0 = null;
      try {
        colorGroup0 = new ColorGroup(linkedList0, true);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // empty color_group
         //
         verifyException("org.apache.commons.imaging.palette.ColorGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(Integer.MIN_VALUE);
      linkedList0.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, true);
      String string0 = colorGroup0.toString();
      assertEquals("{ColorGroup. minRed: 0, maxRed: 0, minGreen: 0, maxGreen: 0, minBlue: 0, maxBlue: 0, minAlpha: 80, maxAlpha: 80, maxDiff: 0, diffTotal: 0}", string0);
  }
}
