/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 20:45:42 GMT 2025
 */

package org.apache.commons.codec.digest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import java.util.regex.PatternSyntaxException;
import org.apache.commons.codec.digest.Md5Crypt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Md5Crypt_ESTest extends Md5Crypt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Md5Crypt.md5Crypt(byteArray0, "e=uN^p", "");
      assertEquals("e$3jS.8J7qs7tCkRRl6hivc/", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      String string0 = Md5Crypt.md5Crypt(byteArray0, (String) null);
      assertEquals("$1$........$4yQWmUHgh5kt2TMJtG7kH1", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Md5Crypt.apr1Crypt(byteArray0, "org.apache.commons.codec.digest.B64");
      Md5Crypt.apr1Crypt(byteArray0);
      Md5Crypt.md5Crypt(byteArray0);
      Md5Crypt.apr1Crypt("org.apache.commons.codec.digest.B64", "EnO3},X)Fn");
      Md5Crypt.apr1Crypt("$apr1$........$aYMlbA2tmIiwlPC9gyEco.", "Invalid salt value: ");
      Md5Crypt.apr1Crypt(byteArray0, "./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz");
      Md5Crypt.apr1Crypt(byteArray0);
      MockRandom mockRandom0 = new MockRandom();
      Md5Crypt.apr1Crypt(byteArray0, (Random) mockRandom0);
      Md5Crypt.md5Crypt(byteArray0);
      // Undeclared exception!
      Md5Crypt.md5Crypt(byteArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        Md5Crypt.md5Crypt((byte[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        Md5Crypt.md5Crypt(byteArray0, "IVo^r(", "IVo^r(", (Random) mockRandom0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 31
         // ^IVo^r(([\\.\\/a-zA-Z0-9]{1,8}).*
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        Md5Crypt.md5Crypt((byte[]) null, "c^:vI?", "c^:vI?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        Md5Crypt.md5Crypt(byteArray0, "x;}nMg~N_ApJ>X", "x;}nMg~N_ApJ>X");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid salt value: x;}nMg~N_ApJ>X
         //
         verifyException("org.apache.commons.codec.digest.Md5Crypt", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Md5Crypt.md5Crypt(byteArray0, ".Uj\u0006'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid salt value: .Uj\u0006'
         //
         verifyException("org.apache.commons.codec.digest.Md5Crypt", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Md5Crypt.apr1Crypt(byteArray0, "org.apache.commons.codec.digest.B64");
      Md5Crypt.apr1Crypt(byteArray0);
      Md5Crypt.md5Crypt(byteArray0);
      Md5Crypt.apr1Crypt("org.apache.commons.codec.digest.B64", "EnO3},X)Fn");
      Md5Crypt.apr1Crypt("$apr1$........$aYMlbA2tmIiwlPC9gyEco.", "Invalid salt value: ");
      Md5Crypt.apr1Crypt(byteArray0, "./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz");
      Md5Crypt.apr1Crypt(byteArray0, (String) null);
      Md5Crypt.apr1Crypt(byteArray0);
      MockRandom mockRandom0 = new MockRandom();
      Md5Crypt.apr1Crypt(byteArray0, (Random) mockRandom0);
      // Undeclared exception!
      Md5Crypt.md5Crypt(byteArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        Md5Crypt.md5Crypt((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        Md5Crypt.apr1Crypt((byte[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Md5Crypt.apr1Crypt((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        Md5Crypt.apr1Crypt((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.digest.Md5Crypt", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        Md5Crypt.apr1Crypt((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.digest.Md5Crypt", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      MockRandom mockRandom0 = new MockRandom();
      String string0 = Md5Crypt.md5Crypt(byteArray0, (String) null, "bG&:I", (Random) mockRandom0);
      assertEquals("bG&:I........$uGUkSymPP5sjcum64iqWJ/", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      MockRandom mockRandom0 = new MockRandom();
      String string0 = Md5Crypt.md5Crypt(byteArray0, "jF8DUT", "([./a-zA-Z0-9]{1,8}).*", (Random) mockRandom0);
      assertEquals("([./a-zA-Z0-9]{1,8}).*jF8DU$nSG6473E4.DJhgvnHrHL//", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        Md5Crypt.md5Crypt(byteArray0, (String) null, (String) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Md5Crypt.md5Crypt(byteArray0, "$apr1$........$7DPFf0mVu8RHaTUUmUaFT.", "$apr1$........$7DPFf0mVu8RHaTUUmUaFT.", (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid salt value: $apr1$........$7DPFf0mVu8RHaTUUmUaFT.
         //
         verifyException("org.apache.commons.codec.digest.Md5Crypt", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Md5Crypt.apr1Crypt(byteArray0, "$apr1$$apr1$88888888");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid salt value: $apr1$$apr1$88888888
         //
         verifyException("org.apache.commons.codec.digest.Md5Crypt", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        Md5Crypt.apr1Crypt((byte[]) null, "p.A~qBFb-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        Md5Crypt.md5Crypt((byte[]) null, "6ya99");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Md5Crypt.md5Crypt(byteArray0, "z)BJ$ow", "z)BJ$ow");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 1
         // ^z)BJ\\$ow([\\.\\/a-zA-Z0-9]{1,8}).*
         //  ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        Md5Crypt.apr1Crypt("bG&:I", ">{IV0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid salt value: $apr1$>{IV0
         //
         verifyException("org.apache.commons.codec.digest.Md5Crypt", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Md5Crypt.apr1Crypt(byteArray0, (String) null);
      Md5Crypt.apr1Crypt(byteArray0);
      Md5Crypt.md5Crypt(byteArray0);
      Md5Crypt.apr1Crypt("org.apache.commons.codec.digest.B64", "$apr1$........$aYMlbA2tmIiwlPC9gyEco.");
      Md5Crypt.apr1Crypt("$apr1$........$aYMlbA2tmIiwlPC9gyEco.", "Invalid salt value: ");
      Md5Crypt.apr1Crypt(byteArray0, "./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz");
      Md5Crypt.apr1Crypt("Invalid salt value: ");
      Md5Crypt.apr1Crypt(byteArray0);
      Md5Crypt.md5Crypt(byteArray0);
      // Undeclared exception!
      Md5Crypt.apr1Crypt(byteArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Md5Crypt md5Crypt0 = new Md5Crypt();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      MockRandom mockRandom0 = new MockRandom();
      String string0 = Md5Crypt.md5Crypt(byteArray0, (Random) mockRandom0);
      assertEquals("$1$........$Oz0s/Vp/APGSobQIjB72m.", string0);
  }
}
