/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 18:48:48 GMT 2025
 */

package org.apache.commons.codec.language.bm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.regex.PatternSyntaxException;
import org.apache.commons.codec.language.bm.Languages;
import org.apache.commons.codec.language.bm.NameType;
import org.apache.commons.codec.language.bm.Rule;
import org.apache.commons.codec.language.bm.RuleType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Rule_ESTest extends Rule_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Rule rule0 = new Rule((String) null, (String) null, (String) null, (Rule.PhonemeExpr) null);
      Rule.RPattern rule_RPattern0 = rule0.getRContext();
      assertNotNull(rule_RPattern0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme("", languages_LanguageSet0);
      Rule rule0 = new Rule("", "f>T.Z$4: C|", "kkf74", rule_Phoneme0);
      boolean boolean0 = rule0.patternAndContextMatches("[NO_LANGUAGES]", 0);
      assertEquals("", rule0.getPattern());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme("", languages_LanguageSet0);
      Rule rule0 = new Rule("", "[NO_LANGUAGES]", "Ev4O/l", rule_Phoneme0);
      boolean boolean0 = rule0.patternAndContextMatches("[NO_LANGUAGES]", 6);
      assertEquals("", rule0.getPattern());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme("^$", languages_LanguageSet0);
      Rule rule0 = new Rule("^$", "^$", "^$", rule_Phoneme0);
      boolean boolean0 = rule0.patternAndContextMatches("^$^$^$^$[NO_LANGUAGES]", 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme("S", languages_LanguageSet0);
      Rule rule0 = new Rule("", "S", "", rule_Phoneme0);
      boolean boolean0 = rule0.patternAndContextMatches("ALL", 1);
      assertFalse(boolean0);
      assertEquals("", rule0.getPattern());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Rule rule0 = new Rule("", "W-", "", (Rule.PhonemeExpr) null);
      boolean boolean0 = rule0.patternAndContextMatches("W-", 2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme("ALL", languages_LanguageSet0);
      Rule.Phoneme rule_Phoneme1 = new Rule.Phoneme(rule_Phoneme0, rule_Phoneme0);
      Rule.Phoneme rule_Phoneme2 = new Rule.Phoneme(rule_Phoneme1, rule_Phoneme0, languages_LanguageSet0);
      assertFalse(rule_Phoneme2.equals((Object)rule_Phoneme1));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme(charBuffer0, languages_LanguageSet0);
      Rule.Phoneme rule_Phoneme1 = new Rule.Phoneme(rule_Phoneme0, rule_Phoneme0, languages_LanguageSet0);
      Rule.Phoneme rule_Phoneme2 = new Rule.Phoneme(rule_Phoneme1, rule_Phoneme0);
      assertFalse(rule_Phoneme2.equals((Object)rule_Phoneme1));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Rule rule0 = new Rule("^$", "p!XzlVlJ&&ehy'eK", "4+_!i4+_!i[NO_LANGUAGES]]", (Rule.PhonemeExpr) null);
      rule0.getPhoneme();
      assertEquals("^$", rule0.getPattern());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme("^$", languages_LanguageSet0);
      Rule rule0 = new Rule("^$", "^$", "^$", rule_Phoneme0);
      String string0 = rule0.getPattern();
      assertEquals("^$", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme("LT<E", languages_LanguageSet0);
      Rule rule0 = new Rule("", "LT<E", "", rule_Phoneme0);
      String string0 = rule0.getPattern();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Rule rule0 = new Rule("[+]", "[+]", "[+]", (Rule.PhonemeExpr) null);
      // Undeclared exception!
      try { 
        rule0.patternAndContextMatches("[+]", 2147483645);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Rule rule0 = new Rule((String) null, (String) null, (String) null, (Rule.PhonemeExpr) null);
      // Undeclared exception!
      try { 
        rule0.patternAndContextMatches((CharSequence) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.language.bm.Rule", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Rule rule0 = new Rule("[k]", "[k]", "", (Rule.PhonemeExpr) null);
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      // Undeclared exception!
      try { 
        rule0.patternAndContextMatches(charBuffer0, 2147483645);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NameType nameType0 = NameType.GENERIC;
      RuleType ruleType0 = RuleType.EXACT;
      // Undeclared exception!
      try { 
        Rule.getInstanceMap(nameType0, ruleType0, (Languages.LanguageSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.language.bm.Rule", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NameType nameType0 = NameType.ASHKENAZI;
      RuleType ruleType0 = RuleType.EXACT;
      // Undeclared exception!
      try { 
        Rule.getInstance(nameType0, ruleType0, (Languages.LanguageSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.language.bm.Rule", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NameType nameType0 = NameType.ASHKENAZI;
      RuleType ruleType0 = RuleType.APPROX;
      // Undeclared exception!
      try { 
        Rule.getInstance(nameType0, ruleType0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rules found for ash, approx, .
         //
         verifyException("org.apache.commons.codec.language.bm.Rule", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NameType nameType0 = NameType.SEPHARDIC;
      RuleType ruleType0 = RuleType.RULES;
      Map<String, List<Rule>> map0 = Rule.getInstanceMap(nameType0, ruleType0, "any");
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NameType nameType0 = NameType.SEPHARDIC;
      RuleType ruleType0 = RuleType.APPROX;
      // Undeclared exception!
      try { 
        Rule.getInstanceMap(nameType0, ruleType0, ");u=a0'cJl");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rules found for sep, approx, );u=a0'cJl.
         //
         verifyException("org.apache.commons.codec.language.bm.Rule", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NameType nameType0 = NameType.GENERIC;
      RuleType ruleType0 = RuleType.APPROX;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("");
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      // Undeclared exception!
      try { 
        Rule.getInstanceMap(nameType0, ruleType0, languages_LanguageSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rules found for gen, approx, .
         //
         verifyException("org.apache.commons.codec.language.bm.Rule", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NameType nameType0 = NameType.GENERIC;
      RuleType ruleType0 = RuleType.APPROX;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      List<Rule> list0 = Rule.getInstance(nameType0, ruleType0, languages_LanguageSet0);
      assertEquals(85, list0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Rule rule0 = new Rule("$", "$", "$", (Rule.PhonemeExpr) null);
      boolean boolean0 = rule0.patternAndContextMatches("ALL", 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme("", languages_LanguageSet0);
      Rule rule0 = new Rule("[NO_LANGUAGES]", "E??9,a;l/lFP-8/I", "", rule_Phoneme0);
      boolean boolean0 = rule0.patternAndContextMatches("E??9,a;l/lFP-8/I", 95);
      assertEquals("[NO_LANGUAGES]", rule0.getPattern());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Rule rule0 = new Rule("]", "]", "]", (Rule.PhonemeExpr) null);
      // Undeclared exception!
      try { 
        rule0.patternAndContextMatches("]", (-2253));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Can not match pattern at negative indexes
         //
         verifyException("org.apache.commons.codec.language.bm.Rule", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Rule rule0 = new Rule("", ".;g", ".;g", (Rule.PhonemeExpr) null);
      rule0.patternAndContextMatches("ALL", 0);
      assertEquals("", rule0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Rule rule0 = new Rule("]", "]", "]", (Rule.PhonemeExpr) null);
      boolean boolean0 = rule0.patternAndContextMatches("]", 0);
      assertFalse(boolean0);
      assertEquals("]", rule0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Rule rule0 = new Rule("", "$c#@<U=OjcY62C)", "$c#@<U=OjcY62C)", (Rule.PhonemeExpr) null);
      boolean boolean0 = rule0.patternAndContextMatches("$c#@<U=OjcY62C)", 0);
      assertEquals("", rule0.getPattern());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Rule rule0 = new Rule("[]A]", "[]A]", "$", (Rule.PhonemeExpr) null);
      boolean boolean0 = rule0.patternAndContextMatches("[]A]", 0);
      assertFalse(boolean0);
      assertEquals("[]A]", rule0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Rule rule0 = new Rule("", "[2]", "[2]", (Rule.PhonemeExpr) null);
      boolean boolean0 = rule0.patternAndContextMatches("[2]", 0);
      assertFalse(boolean0);
      assertEquals("", rule0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Rule rule0 = new Rule("[|]]", "[|]]", "[|]]", (Rule.PhonemeExpr) null);
      boolean boolean0 = rule0.patternAndContextMatches("[|]]", 0);
      assertFalse(boolean0);
      assertEquals("[|]]", rule0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Rule.Phoneme> linkedList0 = new LinkedList<Rule.Phoneme>();
      Rule.PhonemeList rule_PhonemeList0 = new Rule.PhonemeList(linkedList0);
      Rule rule0 = new Rule("[^]", "[^]", "[^]", rule_PhonemeList0);
      assertEquals("[^]", rule0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Rule rule0 = null;
      try {
        rule0 = new Rule("[^Z([UB^2@F4*)}rqB0xH[NO_LANGUAGES]", "[^Z([UB^2@F4*)}rqB0xH[NO_LANGUAGES]", "[^Z([UB^2@F4*)}rqB0xH[NO_LANGUAGES]", (Rule.PhonemeExpr) null);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 35
         // [^Z([UB^2@F4*)}rqB0xH[NO_LANGUAGES]$
         //                                    ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Rule rule0 = new Rule("}M[#MQ22J$H", "^[|]]]", "^[|]]]", (Rule.PhonemeExpr) null);
      assertEquals("}M[#MQ22J$H", rule0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Rule rule0 = new Rule("", "$", "$", (Rule.PhonemeExpr) null);
      boolean boolean0 = rule0.patternAndContextMatches("$", 0);
      assertFalse(boolean0);
      assertEquals("", rule0.getPattern());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("!");
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      NameType nameType0 = NameType.GENERIC;
      RuleType ruleType0 = RuleType.RULES;
      // Undeclared exception!
      try { 
        Rule.getInstance(nameType0, ruleType0, languages_LanguageSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rules found for gen, rules, !.
         //
         verifyException("org.apache.commons.codec.language.bm.Rule", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      NameType nameType0 = NameType.ASHKENAZI;
      RuleType ruleType0 = RuleType.APPROX;
      Map<String, List<Rule>> map0 = Rule.getInstanceMap(nameType0, ruleType0, languages_LanguageSet0);
      assertEquals(17, map0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme(" ", languages_LanguageSet0);
      Rule rule0 = new Rule("", " ", "", rule_Phoneme0);
      boolean boolean0 = rule0.patternAndContextMatches("[|]", 3);
      assertFalse(boolean0);
      assertEquals("", rule0.getPattern());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Rule rule0 = new Rule("", "[g]", "[g]", (Rule.PhonemeExpr) null);
      boolean boolean0 = rule0.patternAndContextMatches("[g]", 1);
      assertEquals("", rule0.getPattern());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Rule rule0 = new Rule("", "[>]", "", (Rule.PhonemeExpr) null);
      boolean boolean0 = rule0.patternAndContextMatches("[>]", 2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Rule.PhonemeList rule_PhonemeList0 = new Rule.PhonemeList((List<Rule.Phoneme>) null);
      List<Rule.Phoneme> list0 = rule_PhonemeList0.getPhonemes();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Rule rule0 = new Rule("[E]_T<dt^", "[E]_T<dt^", "[E]_T<dt^", (Rule.PhonemeExpr) null);
      boolean boolean0 = rule0.patternAndContextMatches("[E]_T<dt^", 0);
      assertFalse(boolean0);
      assertEquals("[E]_T<dt^", rule0.getPattern());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme("LT<E", languages_LanguageSet0);
      Rule.Phoneme rule_Phoneme1 = rule_Phoneme0.append("ALL");
      assertSame(rule_Phoneme1, rule_Phoneme0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme(", rcon='", languages_LanguageSet0);
      CharSequence charSequence0 = rule_Phoneme0.getPhonemeText();
      assertEquals(", rcon='", charSequence0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme("", languages_LanguageSet0);
      String string0 = rule_Phoneme0.toString();
      assertEquals("[NO_LANGUAGES]", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme("^^iR>MNIK$4xrp", languages_LanguageSet0);
      Languages.LanguageSet languages_LanguageSet1 = rule_Phoneme0.getLanguages();
      assertSame(languages_LanguageSet0, languages_LanguageSet1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme(" ", languages_LanguageSet0);
      Rule.Phoneme rule_Phoneme1 = rule_Phoneme0.mergeWithLanguage(languages_LanguageSet0);
      assertFalse(rule_Phoneme1.equals((Object)rule_Phoneme0));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      NameType nameType0 = NameType.ASHKENAZI;
      RuleType ruleType0 = RuleType.EXACT;
      List<Rule> list0 = Rule.getInstance(nameType0, ruleType0, "common");
      assertEquals(58, list0.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<Rule.Phoneme> linkedList0 = new LinkedList<Rule.Phoneme>();
      Rule.PhonemeList rule_PhonemeList0 = new Rule.PhonemeList(linkedList0);
      Rule rule0 = new Rule("N!%Tdnovo", "N!%Tdnovo", "N!%Tdnovo", rule_PhonemeList0);
      rule0.getPhoneme();
      assertEquals("N!%Tdnovo", rule0.getPattern());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      CharBuffer charBuffer0 = CharBuffer.allocate(2739);
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme(charBuffer0, languages_LanguageSet0);
      Rule rule0 = new Rule((String) null, (String) null, "org/apache/commons/codec/language/bm/%s_languages.txt$$", rule_Phoneme0);
      String string0 = rule0.getPattern();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Rule rule0 = new Rule("[E]_T<dt^", "[E]_T<dt^", "[E]_T<dt^", (Rule.PhonemeExpr) null);
      rule0.getLContext();
      assertEquals("[E]_T<dt^", rule0.getPattern());
  }
}
