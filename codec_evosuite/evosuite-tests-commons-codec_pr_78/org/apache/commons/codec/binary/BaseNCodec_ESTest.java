/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 19:10:03 GMT 2025
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.binary.Base16;
import org.apache.commons.codec.binary.Base32;
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.binary.BaseNCodec;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class BaseNCodec_ESTest extends BaseNCodec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      CodecPolicy codecPolicy0 = CodecPolicy.LENIENT;
      Base32 base32_0 = new Base32(64, byteArray0, false, (byte)18, codecPolicy0);
      boolean boolean0 = base32_0.isInAlphabet("Context[buffer=null, currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      CodecPolicy codecPolicy0 = CodecPolicy.LENIENT;
      Base64 base64_0 = new Base64(64, byteArray0, false, codecPolicy0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.readPos = 64;
      int int0 = base64_0.readResults(byteArray0, 76, 76, baseNCodec_Context0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      CodecPolicy codecPolicy0 = CodecPolicy.STRICT;
      Base32 base32_0 = new Base32((-4062), byteArray0, false, (byte)59, codecPolicy0);
      CodecPolicy codecPolicy1 = base32_0.getCodecPolicy();
      assertEquals(CodecPolicy.STRICT, codecPolicy1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Base16 base16_0 = new Base16();
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base16_0.ensureBufferSize(0, baseNCodec_Context0);
      // Undeclared exception!
      try { 
        base16_0.encode(byteArray0, 8192, 8192, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.modulus = (-10);
      String string0 = baseNCodec_Context0.toString();
      assertEquals("Context[buffer=null, currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=-10, pos=0, readPos=0]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.pos = 162;
      String string0 = baseNCodec_Context0.toString();
      assertEquals("Context[buffer=null, currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=162, readPos=0]", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.readPos = 2279;
      String string0 = baseNCodec_Context0.toString();
      assertEquals("Context[buffer=null, currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=2279]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.currentLinePos = (-87);
      String string0 = baseNCodec_Context0.toString();
      assertEquals("Context[buffer=null, currentLinePos=-87, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base32 base32_0 = new Base32(true, (byte) (-27));
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base32_0.decode(byteArray0, 64, (int) (byte) (-27), baseNCodec_Context0);
      int int0 = base32_0.readResults(byteArray0, 93, 13, baseNCodec_Context0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = BaseNCodec.isWhiteSpace((byte)9);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = BaseNCodec.isWhiteSpace((byte) (-27));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      boolean boolean0 = base64_0.isInAlphabet("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Base16 base16_0 = new Base16(true);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.pos = 76;
      boolean boolean0 = base16_0.hasData(baseNCodec_Context0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Base32 base32_0 = new Base32(8);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      boolean boolean0 = base32_0.hasData(baseNCodec_Context0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Base16 base16_0 = new Base16(false);
      byte[] byteArray0 = new byte[0];
      long long0 = base16_0.getEncodedLength(byteArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = BaseNCodec.getChunkSeparator();
      Base64 base64_0 = new Base64(376, byteArray0, true);
      long long0 = base64_0.getEncodedLength(byteArray0);
      assertEquals(6L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Base32 base32_0 = new Base32();
      int int0 = base32_0.getDefaultBufferSize();
      assertEquals(8192, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      CodecPolicy codecPolicy0 = CodecPolicy.LENIENT;
      Base32 base32_0 = new Base32(64, byteArray1, false, (byte)2, codecPolicy0);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.buffer = byteArray1;
      byte[] byteArray2 = base32_0.ensureBufferSize((-5536), baseNCodec_Context0);
      assertSame(byteArray1, byteArray2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Base16 base16_0 = new Base16(false);
      String string0 = base16_0.encodeToString((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Base16 base16_0 = new Base16(false);
      byte[] byteArray0 = new byte[0];
      String string0 = base16_0.encodeToString(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Base16 base16_0 = new Base16(false);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = base16_0.encode(byteArray0, 9, 9);
      String string0 = base16_0.encodeAsString(byteArray1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CodecPolicy codecPolicy0 = CodecPolicy.LENIENT;
      Base16 base16_0 = new Base16(true, codecPolicy0);
      byte[] byteArray0 = base16_0.encode((byte[]) null, 13, 9);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Base16 base16_0 = new Base16();
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base16_0.ensureBufferSize(64, baseNCodec_Context0);
      byte[] byteArray1 = base16_0.encode(byteArray0, 851, 851);
      assertEquals(1702, byteArray1.length);
      assertEquals(8192, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Base16 base16_0 = new Base16();
      byte[] byteArray0 = base16_0.encode((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Base16 base16_0 = new Base16(true);
      byte[] byteArray0 = base16_0.decode((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Base32 base32_0 = new Base32(0);
      assertFalse(base32_0.isStrictDecoding());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)75;
      byte[] byteArray1 = base32_0.decode(byteArray0);
      assertArrayEquals(new byte[] {(byte)2}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      CodecPolicy codecPolicy0 = CodecPolicy.STRICT;
      Base16 base16_0 = new Base16(true, codecPolicy0);
      byte[] byteArray1 = base16_0.decode(byteArray0);
      assertTrue(base16_0.isStrictDecoding());
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Base32 base32_0 = new Base32(true, (byte)19);
      byte[] byteArray0 = base32_0.decode((String) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Base32 base32_0 = new Base32((byte)0);
      byte[] byteArray0 = base32_0.decode("org.apache.commons.codec.binary.Base16");
      assertEquals(20, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = base32_0.decode("");
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Base32 base32_0 = new Base32(false);
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      baseNCodec_Context0.readPos = (-5504);
      int int0 = base32_0.available(baseNCodec_Context0);
      assertEquals(5504, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = BaseNCodec.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, 2147483639, 2147483639, (BaseNCodec.Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Base16 base16_0 = new Base16();
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      base16_0.ensureBufferSize(64, baseNCodec_Context0);
      baseNCodec_Context0.pos = 503;
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        base16_0.readResults(byteArray0, (-5516), (byte)0, baseNCodec_Context0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Base16 base16_0 = new Base16();
      // Undeclared exception!
      try { 
        base16_0.isInAlphabet((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Base16 base16_0 = new Base16();
      // Undeclared exception!
      try { 
        base16_0.isInAlphabet((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Base16 base16_0 = new Base16(false);
      // Undeclared exception!
      try { 
        base16_0.hasData((BaseNCodec.Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Base16 base16_0 = new Base16();
      // Undeclared exception!
      try { 
        base16_0.getEncodedLength((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Base16 base16_0 = new Base16();
      // Undeclared exception!
      try { 
        base16_0.ensureBufferSize(64, (BaseNCodec.Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Base16 base16_0 = new Base16();
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base16_0.ensureBufferSize(76, baseNCodec_Context0);
      base16_0.encode(byteArray0, 2051, 2051, baseNCodec_Context0);
      // Undeclared exception!
      base16_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Base16 base16_0 = new Base16();
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base16_0.ensureBufferSize(64, baseNCodec_Context0);
      base16_0.encode(byteArray0);
      // Undeclared exception!
      base16_0.encodeAsString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = BaseNCodec.getChunkSeparator();
      Base16 base16_0 = new Base16();
      // Undeclared exception!
      try { 
        base16_0.encode(byteArray0, (-5788), 2147483639);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input length exceeds maximum size for encoded data: 2147483639
         //
         verifyException("org.apache.commons.codec.binary.Base16", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Base16 base16_0 = new Base16();
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base16_0.ensureBufferSize(64, baseNCodec_Context0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Base16 base16_0 = new Base16();
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base16_0.ensureBufferSize(76, baseNCodec_Context0);
      Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64(76);
      // Undeclared exception!
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = BaseNCodec.getChunkSeparator();
      Base16 base16_0 = new Base16();
      // Undeclared exception!
      try { 
        base16_0.decode(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid octet in encoded value: 13
         //
         verifyException("org.apache.commons.codec.binary.Base16", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Base16 base16_0 = new Base16();
      // Undeclared exception!
      try { 
        base16_0.decode("y5]OgY3}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid octet in encoded value: 121
         //
         verifyException("org.apache.commons.codec.binary.Base16", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Base16 base16_0 = new Base16(true);
      // Undeclared exception!
      try { 
        base16_0.decode((Object) "Context[buffer=null, currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid octet in encoded value: 67
         //
         verifyException("org.apache.commons.codec.binary.Base16", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Base16 base16_0 = new Base16();
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base16_0.ensureBufferSize(76, baseNCodec_Context0);
      base16_0.containsAlphabetOrPad(byteArray0);
      // Undeclared exception!
      base16_0.containsAlphabetOrPad(byteArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Base16 base16_0 = new Base16(false);
      // Undeclared exception!
      try { 
        base16_0.available((BaseNCodec.Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Base16 base16_0 = new Base16(false);
      boolean boolean0 = base16_0.isStrictDecoding();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = BaseNCodec.getChunkSeparator();
      Base64 base64_0 = new Base64(62);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 62, 62);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base32 base32_0 = new Base32(true);
      byte[] byteArray1 = base32_0.encode(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      Base16 base16_0 = new Base16();
      try { 
        base16_0.decode((Object) baseNCodec_Context0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base-N decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Base16 base16_0 = new Base16();
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base16_0.ensureBufferSize(76, baseNCodec_Context0);
      base16_0.encode(byteArray0, 2030, 2030, baseNCodec_Context0);
      int int0 = base16_0.readResults(byteArray0, 4750, 2030, baseNCodec_Context0);
      assertEquals(2030, int0);
      assertEquals(8192, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CodecPolicy codecPolicy0 = CodecPolicy.STRICT;
      Base16 base16_0 = new Base16(false, codecPolicy0);
      boolean boolean0 = base16_0.isStrictDecoding();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Base16 base16_0 = new Base16(true);
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = base16_0.isInAlphabet(byteArray0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base16 base16_0 = new Base16();
      boolean boolean0 = base16_0.isInAlphabet(byteArray0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Base16 base16_0 = new Base16();
      CodecPolicy codecPolicy0 = BaseNCodec.DECODING_POLICY_DEFAULT;
      try { 
        base16_0.encode((Object) codecPolicy0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base-N encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.BaseNCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Base32 base32_0 = new Base32((byte)0);
      Object object0 = base32_0.decode((Object) "org.apache.commons.codec.binary.Base16");
      Object object1 = base32_0.encode(object0);
      assertNotSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Base16 base16_0 = new Base16();
      String string0 = base16_0.encodeAsString((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = BaseNCodec.getChunkSeparator();
      Base64 base64_0 = new Base64(2229, byteArray0);
      Object object0 = base64_0.decode((Object) "DQo");
      Object object1 = base64_0.decode(object0);
      assertNotSame(object1, object0);
      assertFalse(base64_0.isStrictDecoding());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base16 base16_0 = new Base16();
      boolean boolean0 = base16_0.containsAlphabetOrPad(byteArray1);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte)13, (byte)10}, byteArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      Base32 base32_0 = null;
      try {
        base32_0 = new Base32((byte)12, byteArray0, false, (byte)12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeparator must not contain Base32 characters: [\f]
         //
         verifyException("org.apache.commons.codec.binary.Base32", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Base64 base64_0 = new Base64(182, (byte[]) null);
      boolean boolean0 = base64_0.containsAlphabetOrPad((byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Base16 base16_0 = new Base16();
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      int int0 = base16_0.available(baseNCodec_Context0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("Input array too big, the output array would be bigger (");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base16 base16_0 = new Base16();
      boolean boolean0 = base16_0.isInAlphabet(byteArray1, true);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte)13, (byte)10}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Base16 base16_0 = new Base16();
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base16_0.ensureBufferSize(64, baseNCodec_Context0);
      base16_0.encodeAsString(byteArray0);
      assertEquals(8192, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Base16 base16_0 = new Base16();
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base16_0.ensureBufferSize(64, baseNCodec_Context0);
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      Base32 base32_0 = new Base32(true);
      // Undeclared exception!
      base32_0.isInAlphabet(string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Base16 base16_0 = new Base16();
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base16_0.ensureBufferSize(76, baseNCodec_Context0);
      base16_0.encodeToString(byteArray0);
      assertEquals(8192, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Base16 base16_0 = new Base16();
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base16_0.ensureBufferSize(64, baseNCodec_Context0);
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      // Undeclared exception!
      base16_0.decode((Object) string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Base16 base16_0 = new Base16();
      BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
      byte[] byteArray0 = base16_0.ensureBufferSize(76, baseNCodec_Context0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      // Undeclared exception!
      base16_0.isInAlphabet(byteArray1, false);
  }
}
