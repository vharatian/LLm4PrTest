/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 18:02:14 GMT 2025
 */

package org.apache.commons.codec.language.bm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.codec.language.bm.BeiderMorseEncoder;
import org.apache.commons.codec.language.bm.NameType;
import org.apache.commons.codec.language.bm.RuleType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class BeiderMorseEncoder_ESTest extends BeiderMorseEncoder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BeiderMorseEncoder beiderMorseEncoder0 = new BeiderMorseEncoder();
      beiderMorseEncoder0.setNameType((NameType) null);
      beiderMorseEncoder0.getNameType();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BeiderMorseEncoder beiderMorseEncoder0 = new BeiderMorseEncoder();
      String string0 = beiderMorseEncoder0.encode("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BeiderMorseEncoder beiderMorseEncoder0 = new BeiderMorseEncoder();
      RuleType ruleType0 = RuleType.RULES;
      // Undeclared exception!
      try { 
        beiderMorseEncoder0.setRuleType(ruleType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ruleType must not be RULES
         //
         verifyException("org.apache.commons.codec.language.bm.PhoneticEngine", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BeiderMorseEncoder beiderMorseEncoder0 = new BeiderMorseEncoder();
      // Undeclared exception!
      beiderMorseEncoder0.encode("BeiderMorseEncoder encode parameter is not of type String");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BeiderMorseEncoder beiderMorseEncoder0 = new BeiderMorseEncoder();
      NameType nameType0 = NameType.ASHKENAZI;
      beiderMorseEncoder0.setNameType(nameType0);
      beiderMorseEncoder0.setConcat(false);
      // Undeclared exception!
      try { 
        beiderMorseEncoder0.encode("da");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BeiderMorseEncoder beiderMorseEncoder0 = new BeiderMorseEncoder();
      beiderMorseEncoder0.setMaxPhonemes((-1599));
      // Undeclared exception!
      try { 
        beiderMorseEncoder0.encode("h_$hpkb6yRx");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1599
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BeiderMorseEncoder beiderMorseEncoder0 = new BeiderMorseEncoder();
      NameType nameType0 = NameType.SEPHARDIC;
      beiderMorseEncoder0.setNameType(nameType0);
      // Undeclared exception!
      try { 
        beiderMorseEncoder0.encode("Malformed line '");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.language.bm.PhoneticEngine", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BeiderMorseEncoder beiderMorseEncoder0 = new BeiderMorseEncoder();
      // Undeclared exception!
      beiderMorseEncoder0.encode((Object) "org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BeiderMorseEncoder beiderMorseEncoder0 = new BeiderMorseEncoder();
      NameType nameType0 = NameType.ASHKENAZI;
      beiderMorseEncoder0.setNameType(nameType0);
      beiderMorseEncoder0.setConcat(false);
      // Undeclared exception!
      try { 
        beiderMorseEncoder0.encode((Object) "da");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BeiderMorseEncoder beiderMorseEncoder0 = new BeiderMorseEncoder();
      beiderMorseEncoder0.setMaxPhonemes((-946));
      // Undeclared exception!
      try { 
        beiderMorseEncoder0.encode((Object) "%Bag0/Wwf;!gb;S<W[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -946
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BeiderMorseEncoder beiderMorseEncoder0 = new BeiderMorseEncoder();
      NameType nameType0 = NameType.SEPHARDIC;
      beiderMorseEncoder0.setNameType(nameType0);
      // Undeclared exception!
      try { 
        beiderMorseEncoder0.encode((Object) "Problem parsing line '");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.language.bm.PhoneticEngine", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BeiderMorseEncoder beiderMorseEncoder0 = new BeiderMorseEncoder();
      String string0 = beiderMorseEncoder0.encode("Malformed line '");
      assertEquals("mYlformYdlQni|mYlformYdlini|mYlformidlQni|mYlformidlini|malfYrmYdlQni|malfYrmYdlini|malfYrmidlQni|malfYrmidlini|malformYdlQni|malformYdlini|malformidlQni|malformidlini|malfurmidlini|molfYrmYdlQni|molfYrmYdlini|molfYrmidlQni|molfYrmidlini|molformYdlQni|molformYdlini|molformidlQni|molformidlini|molfurmidlini", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BeiderMorseEncoder beiderMorseEncoder0 = new BeiderMorseEncoder();
      String string0 = beiderMorseEncoder0.encode((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BeiderMorseEncoder beiderMorseEncoder0 = new BeiderMorseEncoder();
      Object object0 = beiderMorseEncoder0.encode((Object) "da");
      assertEquals("da|di|do", object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BeiderMorseEncoder beiderMorseEncoder0 = new BeiderMorseEncoder();
      beiderMorseEncoder0.setNameType((NameType) null);
      // Undeclared exception!
      try { 
        beiderMorseEncoder0.encode("Malformed line '");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.language.bm.PhoneticEngine", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BeiderMorseEncoder beiderMorseEncoder0 = new BeiderMorseEncoder();
      RuleType ruleType0 = RuleType.EXACT;
      beiderMorseEncoder0.setRuleType(ruleType0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BeiderMorseEncoder beiderMorseEncoder0 = new BeiderMorseEncoder();
      NameType nameType0 = beiderMorseEncoder0.getNameType();
      try { 
        beiderMorseEncoder0.encode((Object) nameType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // BeiderMorseEncoder encode parameter is not of type String
         //
         verifyException("org.apache.commons.codec.language.bm.BeiderMorseEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BeiderMorseEncoder beiderMorseEncoder0 = new BeiderMorseEncoder();
      beiderMorseEncoder0.setConcat(false);
      boolean boolean0 = beiderMorseEncoder0.isConcat();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BeiderMorseEncoder beiderMorseEncoder0 = new BeiderMorseEncoder();
      boolean boolean0 = beiderMorseEncoder0.isConcat();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BeiderMorseEncoder beiderMorseEncoder0 = new BeiderMorseEncoder();
      RuleType ruleType0 = beiderMorseEncoder0.getRuleType();
      assertEquals(RuleType.APPROX, ruleType0);
  }
}
