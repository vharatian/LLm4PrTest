/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 19:35:48 GMT 2025
 */

package org.apache.commons.codec.language.bm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.regex.PatternSyntaxException;
import org.apache.commons.codec.language.bm.Languages;
import org.apache.commons.codec.language.bm.NameType;
import org.apache.commons.codec.language.bm.Rule;
import org.apache.commons.codec.language.bm.RuleType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Rule_ESTest extends Rule_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Rule rule0 = new Rule("^$", "^$", "^$", (Rule.PhonemeExpr) null);
      rule0.getRContext();
      assertEquals("^$", rule0.getPattern());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme("", languages_LanguageSet0);
      Rule rule0 = new Rule("", "exact", "m", rule_Phoneme0);
      boolean boolean0 = rule0.patternAndContextMatches("SEPHARDIC", 0);
      assertFalse(boolean0);
      assertEquals("", rule0.getPattern());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Rule rule0 = new Rule("", "", "vA]TKYHg!'", (Rule.PhonemeExpr) null);
      boolean boolean0 = rule0.patternAndContextMatches("vA]TKYHg!'", 0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme("z\"\"", languages_LanguageSet0);
      Rule.Phoneme rule_Phoneme1 = new Rule.Phoneme(rule_Phoneme0, rule_Phoneme0);
      Rule.Phoneme rule_Phoneme2 = new Rule.Phoneme(rule_Phoneme1, rule_Phoneme0, languages_LanguageSet0);
      assertFalse(rule_Phoneme2.equals((Object)rule_Phoneme0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Rule rule0 = new Rule("K", "^iv,D>.", "K", (Rule.PhonemeExpr) null);
      rule0.getPhoneme();
      assertEquals("K", rule0.getPattern());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme("UTF-8", languages_LanguageSet0);
      Rule rule0 = new Rule((String) null, "ALL", "UTF-8", rule_Phoneme0);
      String string0 = rule0.getPattern();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme("", languages_LanguageSet0);
      Rule rule0 = new Rule("", "", "m", rule_Phoneme0);
      String string0 = rule0.getPattern();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NameType nameType0 = NameType.SEPHARDIC;
      RuleType ruleType0 = RuleType.EXACT;
      List<Rule> list0 = Rule.getInstance(nameType0, ruleType0, "any");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Rule rule0 = new Rule("[NlLNGAaGE]]", "[NlLNGAaGE]]", "[NlLNGAaGE]]", (Rule.PhonemeExpr) null);
      // Undeclared exception!
      try { 
        rule0.patternAndContextMatches("[NlLNGAaGE]]", 2147483645);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Rule rule0 = new Rule((String) null, (String) null, (String) null, (Rule.PhonemeExpr) null);
      // Undeclared exception!
      try { 
        rule0.patternAndContextMatches((CharSequence) null, 396);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.language.bm.Rule", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Rule.Phoneme> linkedList0 = new LinkedList<Rule.Phoneme>();
      Rule.PhonemeList rule_PhonemeList0 = new Rule.PhonemeList(linkedList0);
      Rule rule0 = new Rule(" parts: ", "[]*@S06ad-ZPP2a'$]", "[]*@S06ad-ZPP2a'$]", rule_PhonemeList0);
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        rule0.patternAndContextMatches(charBuffer0, 2147483645);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NameType nameType0 = NameType.ASHKENAZI;
      RuleType ruleType0 = RuleType.RULES;
      // Undeclared exception!
      try { 
        Rule.getInstanceMap(nameType0, ruleType0, (Languages.LanguageSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.language.bm.Rule", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NameType nameType0 = NameType.ASHKENAZI;
      // Undeclared exception!
      try { 
        Rule.getInstanceMap(nameType0, (RuleType) null, "org.apache.commons.codec.language.bm.Rule$4");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.language.bm.Rule", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NameType nameType0 = NameType.ASHKENAZI;
      RuleType ruleType0 = RuleType.RULES;
      // Undeclared exception!
      try { 
        Rule.getInstance(nameType0, ruleType0, (Languages.LanguageSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.language.bm.Rule", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NameType nameType0 = NameType.SEPHARDIC;
      RuleType ruleType0 = RuleType.APPROX;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("~pDlZGrAF%");
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      // Undeclared exception!
      try { 
        Rule.getInstance(nameType0, ruleType0, languages_LanguageSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rules found for sep, approx, ~pDlZGrAF%.
         //
         verifyException("org.apache.commons.codec.language.bm.Rule", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NameType nameType0 = NameType.ASHKENAZI;
      // Undeclared exception!
      try { 
        Rule.getInstance(nameType0, (RuleType) null, "^|^[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.language.bm.Rule", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Rule rule0 = null;
      try {
        rule0 = new Rule("^^[Or[1", "^^[Or[1", "^^[Or[1", (Rule.PhonemeExpr) null);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 7
         // ^^[Or[1$
         //        ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Rule rule0 = new Rule("", "[lLNGAaGQg]]]", "", (Rule.PhonemeExpr) null);
      boolean boolean0 = rule0.patternAndContextMatches("[lLNGAaGQg]]]", 1);
      assertEquals("", rule0.getPattern());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NameType nameType0 = NameType.GENERIC;
      RuleType ruleType0 = RuleType.RULES;
      Map<String, List<Rule>> map0 = Rule.getInstanceMap(nameType0, ruleType0, "any");
      assertEquals(71, map0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NameType nameType0 = NameType.SEPHARDIC;
      RuleType ruleType0 = RuleType.RULES;
      // Undeclared exception!
      try { 
        Rule.getInstanceMap(nameType0, ruleType0, "ash");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rules found for sep, rules, ash.
         //
         verifyException("org.apache.commons.codec.language.bm.Rule", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      NameType nameType0 = NameType.ASHKENAZI;
      RuleType ruleType0 = RuleType.APPROX;
      Map<String, List<Rule>> map0 = Rule.getInstanceMap(nameType0, ruleType0, languages_LanguageSet0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NameType nameType0 = NameType.SEPHARDIC;
      RuleType ruleType0 = RuleType.RULES;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("GENERIC");
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      // Undeclared exception!
      try { 
        Rule.getInstanceMap(nameType0, ruleType0, languages_LanguageSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rules found for sep, rules, GENERIC.
         //
         verifyException("org.apache.commons.codec.language.bm.Rule", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Rule rule0 = new Rule("", "$", "$", (Rule.PhonemeExpr) null);
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      boolean boolean0 = rule0.patternAndContextMatches(charBuffer0, 0);
      assertFalse(boolean0);
      assertEquals("", rule0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Rule rule0 = new Rule("^$", "^$", "^$", (Rule.PhonemeExpr) null);
      // Undeclared exception!
      try { 
        rule0.patternAndContextMatches("^$", (-14));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Can not match pattern at negative indexes
         //
         verifyException("org.apache.commons.codec.language.bm.Rule", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Rule rule0 = new Rule("C", "C", "C", (Rule.PhonemeExpr) null);
      boolean boolean0 = rule0.patternAndContextMatches("CfGfy$X3_nq#~{%", 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Rule rule0 = new Rule("]Z{2sOAo,Oy", "]Z{2sOAo,Oy", "]Z{2sOAo,Oy", (Rule.PhonemeExpr) null);
      boolean boolean0 = rule0.patternAndContextMatches("]Z{2sOAo,Oy", 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Rule rule0 = new Rule("[NlLNGAaGE]]", "[NlLNGAaGE]]", "[NlLNGAaGE]]", (Rule.PhonemeExpr) null);
      boolean boolean0 = rule0.patternAndContextMatches("[NlLNGAaGE]][NO_LANGUAGES]", 0);
      assertEquals("[NlLNGAaGE]]", rule0.getPattern());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Rule rule0 = new Rule("[>D*&@S0.dP-ZP9B']$$]", "[>D*&@S0.dP-ZP9B']$$]", "[>D*&@S0.dP-ZP9B']$$]", (Rule.PhonemeExpr) null);
      boolean boolean0 = rule0.patternAndContextMatches("[>D*&@S0.dP-ZP9B']$$]", 0);
      assertFalse(boolean0);
      assertEquals("[>D*&@S0.dP-ZP9B']$$]", rule0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Rule rule0 = new Rule("[[>D*&@N0.dP-ZP9B']$$]$", "[[>D*&@N0.dP-ZP9B']$$]$", "[[>D*&@N0.dP-ZP9B']$$]$", (Rule.PhonemeExpr) null);
      assertEquals("[[>D*&@N0.dP-ZP9B']$$]$", rule0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Rule rule0 = new Rule("", "$", "$", (Rule.PhonemeExpr) null);
      boolean boolean0 = rule0.patternAndContextMatches("$", 0);
      assertEquals("", rule0.getPattern());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      NameType nameType0 = NameType.GENERIC;
      RuleType ruleType0 = RuleType.EXACT;
      List<Rule> list0 = Rule.getInstance(nameType0, ruleType0, languages_LanguageSet0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Rule rule0 = new Rule("", "\"", "[lLNGAaGg]]]", (Rule.PhonemeExpr) null);
      boolean boolean0 = rule0.patternAndContextMatches("[lLNGAaGg]]]", 7);
      assertEquals("", rule0.getPattern());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Rule rule0 = new Rule("", "[lLNGAaGQg]]]", "", (Rule.PhonemeExpr) null);
      boolean boolean0 = rule0.patternAndContextMatches("[lLNGAaGQg]]][NO_LANGUAGES]", 2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Rule.PhonemeList rule_PhonemeList0 = new Rule.PhonemeList((List<Rule.Phoneme>) null);
      List<Rule.Phoneme> list0 = rule_PhonemeList0.getPhonemes();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Rule rule0 = new Rule("", "]", "", (Rule.PhonemeExpr) null);
      boolean boolean0 = rule0.patternAndContextMatches("ALL", 1);
      assertEquals("", rule0.getPattern());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Rule rule0 = new Rule("[lOLG]aE]^", "[lOLG]aE]^", "[lOLG]aE]^", (Rule.PhonemeExpr) null);
      boolean boolean0 = rule0.patternAndContextMatches("[lOLG]aE]^", 0);
      assertEquals("[lOLG]aE]^", rule0.getPattern());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Rule rule0 = new Rule("", "=Xi", "=Xi", (Rule.PhonemeExpr) null);
      boolean boolean0 = rule0.patternAndContextMatches("=Xi=Xi[NO_LANGUAGES]", 3);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Rule rule0 = new Rule("^$", "^$", "^$", (Rule.PhonemeExpr) null);
      boolean boolean0 = rule0.patternAndContextMatches("^$", 0);
      assertEquals("^$", rule0.getPattern());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme("[NlLNGAaG]]", languages_LanguageSet0);
      Rule.Phoneme rule_Phoneme1 = rule_Phoneme0.append("ALL");
      assertSame(rule_Phoneme1, rule_Phoneme0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme("g", languages_LanguageSet0);
      CharSequence charSequence0 = rule_Phoneme0.getPhonemeText();
      assertEquals("g", charSequence0.toString());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme("=Xi", languages_LanguageSet0);
      String string0 = rule_Phoneme0.toString();
      assertEquals("=Xi[NO_LANGUAGES]", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme("ALL", languages_LanguageSet0);
      Languages.LanguageSet languages_LanguageSet1 = rule_Phoneme0.getLanguages();
      assertSame(languages_LanguageSet1, languages_LanguageSet0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme("", languages_LanguageSet0);
      Rule.Phoneme rule_Phoneme1 = rule_Phoneme0.mergeWithLanguage(languages_LanguageSet0);
      Rule.Phoneme rule_Phoneme2 = new Rule.Phoneme(rule_Phoneme0, rule_Phoneme1);
      assertFalse(rule_Phoneme2.equals((Object)rule_Phoneme1));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Rule rule0 = new Rule("[NlLNGAaG]]", "[NlLNGAaG]]", "[NlLNGAaG]]", (Rule.PhonemeExpr) null);
      boolean boolean0 = rule0.patternAndContextMatches("[NlLNGAaG]]ALL[NO_LANGUAGES]", 0);
      assertFalse(boolean0);
      assertEquals("[NlLNGAaG]]", rule0.getPattern());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Rule rule0 = new Rule("[N_lOLNGAGES]]]", "^[N_lOLNGAGES]]]]", "^[N_lOLNGAGES]]]]", (Rule.PhonemeExpr) null);
      assertEquals("[N_lOLNGAGES]]]", rule0.getPattern());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Rule rule0 = new Rule("[^]K]", "@21D Lx", "[^]K]", (Rule.PhonemeExpr) null);
      boolean boolean0 = rule0.patternAndContextMatches("[^]K]", 2);
      assertEquals("[^]K]", rule0.getPattern());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      NameType nameType0 = NameType.GENERIC;
      RuleType ruleType0 = RuleType.RULES;
      // Undeclared exception!
      try { 
        Rule.getInstance(nameType0, ruleType0, "-SE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rules found for gen, rules, -SE.
         //
         verifyException("org.apache.commons.codec.language.bm.Rule", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme("z\"\"", languages_LanguageSet0);
      Rule rule0 = new Rule("zOMLQL", "zOMLQL", "z\"\"", rule_Phoneme0);
      rule0.getPhoneme();
      assertEquals("zOMLQL", rule0.getPattern());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme("+>{pt6n", languages_LanguageSet0);
      Rule rule0 = new Rule("=fE]YK9pHdT?`", "V01IV#b%4k!{&-,h", "+>{pt6n", rule_Phoneme0);
      String string0 = rule0.getPattern();
      assertEquals("=fE]YK9pHdT?`", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme(charBuffer0, languages_LanguageSet0);
      Rule rule0 = new Rule("", "qLrKlXD#M", "", rule_Phoneme0);
      rule0.getLContext();
      assertEquals("", rule0.getPattern());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Rule rule0 = new Rule("$", "$", "$", (Rule.PhonemeExpr) null);
      boolean boolean0 = rule0.patternAndContextMatches("$", 0);
      assertFalse(boolean0);
  }
}
