/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 20:21:02 GMT 2025
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.apache.commons.codec.binary.Hex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Hex_ESTest extends Hex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Hex hex0 = new Hex((Charset) null);
      String string0 = hex0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Hex hex0 = new Hex();
      try { 
        hex0.decode((Object) hex0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // org.apache.commons.codec.binary.Hex cannot be cast to [C
         //
         verifyException("org.apache.commons.codec.binary.Hex", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = Hex.toDigit('0', 7);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = Hex.toDigit('F', 67);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Hex hex0 = new Hex();
      String string0 = hex0.getCharsetName();
      assertEquals("UTF-8", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Hex hex0 = new Hex((Charset) null);
      Charset charset0 = hex0.getCharset();
      assertNull(charset0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Charset charset0 = Charset.forName("US-ASCII");
      Hex hex0 = new Hex(charset0);
      Charset charset1 = hex0.getCharset();
      assertEquals("US-ASCII", charset1.name());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Hex.encodeHexString(byteArray0, true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Hex.encodeHexString(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Hex hex0 = new Hex(charset0);
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ByteBuffer byteBuffer0 = hex0.DEFAULT_CHARSET.encode(charBuffer0);
      String string0 = Hex.encodeHexString(byteBuffer0, true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      String string0 = Hex.encodeHexString(byteBuffer0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      char[] charArray0 = new char[3];
      char[] charArray1 = Hex.encodeHex(byteArray0, charArray0);
      assertEquals(2, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      char[] charArray0 = Hex.encodeHex(byteArray0, false);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      char[] charArray0 = Hex.encodeHex(byteArray0);
      assertEquals(18, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      char[] charArray0 = Hex.encodeHex(byteArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(67);
      char[] charArray0 = new char[4];
      char[] charArray1 = Hex.encodeHex(byteBuffer0, charArray0);
      assertEquals(134, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate((byte)0);
      char[] charArray0 = new char[0];
      char[] charArray1 = Hex.encodeHex(byteBuffer0, charArray0);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      char[] charArray0 = Hex.encodeHex(byteBuffer0, false);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      char[] charArray0 = Hex.encodeHex(byteBuffer0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Hex hex0 = new Hex();
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = hex0.encode(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(576);
      byteBuffer0.flip();
      Hex hex0 = new Hex();
      byte[] byteArray0 = hex0.encode(byteBuffer0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[0];
      byte[] byteArray0 = Hex.decodeHex(charArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = Hex.decodeHex("");
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Hex hex0 = new Hex();
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = hex0.decode(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Hex hex0 = new Hex();
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      byte[] byteArray1 = hex0.decode(byteBuffer0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      try { 
        Hex.toDigit('W', 102);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Illegal hexadecimal character W at index 102
         //
         verifyException("org.apache.commons.codec.binary.Hex", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        Hex.encodeHexString((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Hex hex0 = new Hex();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(3684);
      byte[] byteArray0 = hex0.encode(byteBuffer0);
      // Undeclared exception!
      Hex.encodeHexString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        Hex.encodeHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        Hex.encodeHexString((ByteBuffer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Hex", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Charset charset0 = Hex.DEFAULT_CHARSET;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(3999);
      String string0 = Hex.encodeHexString(byteBuffer0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) string0);
      ByteBuffer byteBuffer1 = charset0.encode(charBuffer0);
      // Undeclared exception!
      Hex.encodeHexString(byteBuffer1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        Hex.encodeHexString((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Hex", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Hex hex0 = new Hex();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(3710);
      byte[] byteArray0 = hex0.encode(byteBuffer0);
      char[] charArray0 = new char[8];
      // Undeclared exception!
      Hex.encodeHex(byteArray0, charArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        Hex.encodeHex((byte[]) null, charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        Hex.encodeHex((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Hex hex0 = new Hex();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2603);
      byte[] byteArray0 = hex0.encode(byteBuffer0);
      ByteBuffer byteBuffer1 = ByteBuffer.allocate(2603);
      hex0.encode(byteBuffer1);
      // Undeclared exception!
      Hex.encodeHex(byteArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1404);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        Hex.encodeHex(byteBuffer0, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        Hex.encodeHex((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Hex", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Charset charset0 = Hex.DEFAULT_CHARSET;
      Hex hex0 = new Hex(charset0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(4566);
      byte[] byteArray0 = hex0.encode(byteBuffer0);
      // Undeclared exception!
      hex0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Hex hex0 = new Hex();
      // Undeclared exception!
      try { 
        hex0.encode((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Charset charset0 = Hex.DEFAULT_CHARSET;
      Hex hex0 = new Hex(charset0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(4566);
      byte[] byteArray0 = hex0.encode(byteBuffer0);
      ByteBuffer byteBuffer1 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      hex0.encode(byteBuffer1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Hex hex0 = new Hex();
      // Undeclared exception!
      try { 
        hex0.encode((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Hex", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Hex hex0 = new Hex();
      try { 
        hex0.encode((Object) hex0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // org.apache.commons.codec.binary.Hex cannot be cast to [B
         //
         verifyException("org.apache.commons.codec.binary.Hex", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Hex hex0 = new Hex((Charset) null);
      // Undeclared exception!
      try { 
        hex0.encode((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        Hex.decodeHex((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Hex", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        Hex.decodeHex((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Hex", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Hex hex0 = new Hex();
      // Undeclared exception!
      try { 
        hex0.decode((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Hex hex0 = new Hex();
      ByteBuffer byteBuffer0 = hex0.DEFAULT_CHARSET.encode("UTF-8");
      try { 
        hex0.decode(byteBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Odd number of characters.
         //
         verifyException("org.apache.commons.codec.binary.Hex", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Hex hex0 = new Hex();
      // Undeclared exception!
      try { 
        hex0.decode((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Hex", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Hex hex0 = new Hex();
      // Undeclared exception!
      try { 
        hex0.decode((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Hex", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Hex hex0 = null;
      try {
        hex0 = new Hex("0000");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // 0000
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Hex hex0 = null;
      try {
        hex0 = new Hex("x'v^\"4tqc");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // x'v^\"4tqc
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Hex hex0 = null;
      try {
        hex0 = new Hex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        Hex.encodeHex(byteArray0, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      char[] charArray0 = new char[1];
      char[] charArray1 = Hex.encodeHex(byteArray0, charArray0);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        Hex.encodeHex((ByteBuffer) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Hex", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Hex hex0 = new Hex();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "UTF-8");
      ByteBuffer byteBuffer0 = hex0.DEFAULT_CHARSET.encode(charBuffer0);
      char[] charArray0 = Hex.encodeHex(byteBuffer0, false);
      assertEquals(10, charArray0.length);
      assertArrayEquals(new char[] {'5', '5', '5', '4', '4', '6', '2', 'D', '3', '8'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      char[] charArray0 = Hex.encodeHex(byteArray0, true);
      assertArrayEquals(new char[] {'0', '0'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      char[] charArray0 = new char[1];
      try { 
        Hex.decodeHex(charArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Odd number of characters.
         //
         verifyException("org.apache.commons.codec.binary.Hex", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      try { 
        Hex.encodeHex((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      try { 
        Hex.encodeHex((ByteBuffer) null, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Hex", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(5779);
      Hex.encodeHexString(byteBuffer0);
      ByteBuffer byteBuffer1 = ByteBuffer.allocateDirect(5779);
      // Undeclared exception!
      Hex.encodeHexString(byteBuffer1, false);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Hex hex0 = new Hex(charset0);
      ByteBuffer byteBuffer0 = hex0.DEFAULT_CHARSET.encode("ab15ba326120bf5c02");
      hex0.encode((Object) byteBuffer0);
      assertEquals(18, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=18 lim=18 cap=19]", byteBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(210);
      Hex.encodeHex(byteBuffer0);
      Hex hex0 = new Hex();
      Object object0 = hex0.decode((Object) byteBuffer0);
      Object object1 = hex0.encode(object0);
      assertFalse(object1.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(210);
      Hex hex0 = new Hex();
      try { 
        hex0.decode((Object) byteBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Illegal hexadecimal character \u0000 at index 0
         //
         verifyException("org.apache.commons.codec.binary.Hex", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Hex hex0 = new Hex();
      try { 
        hex0.decode((Object) "UTF-8");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Odd number of characters.
         //
         verifyException("org.apache.commons.codec.binary.Hex", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Hex hex0 = new Hex();
      Object object0 = hex0.encode((Object) "UTF-8");
      Object object1 = hex0.decode(object0);
      try { 
        hex0.decode(object1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Odd number of characters.
         //
         verifyException("org.apache.commons.codec.binary.Hex", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      try { 
        Hex.decodeHex("urVv)wJ+NwqTg.n'6Y");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Illegal hexadecimal character u at index 0
         //
         verifyException("org.apache.commons.codec.binary.Hex", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(49);
      char[] charArray0 = Hex.encodeHex(byteBuffer0);
      byte[] byteArray0 = Hex.decodeHex(charArray0);
      assertEquals(49, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(5779);
      Hex.encodeHexString(byteBuffer0, false);
      assertEquals(5779, byteBuffer0.position());
      assertEquals(0, byteBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      String string0 = Hex.encodeHexString(byteArray0, true);
      assertEquals("0000000000", string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Charset charset0 = Charset.defaultCharset();
      Hex hex0 = new Hex(charset0);
      byte[] byteArray1 = hex0.encode(byteArray0);
      byte[] byteArray2 = hex0.decode(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      byte[] byteArray0 = Hex.decodeHex("00");
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      String string0 = Hex.encodeHexString(byteArray0);
      assertEquals("000000000000000000", string0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Hex hex0 = new Hex((Charset) null);
      // Undeclared exception!
      try { 
        hex0.getCharsetName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Hex", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Charset charset0 = Charset.defaultCharset();
      Hex hex0 = new Hex(charset0);
      try { 
        hex0.decode(byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Odd number of characters.
         //
         verifyException("org.apache.commons.codec.binary.Hex", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Charset charset0 = Hex.DEFAULT_CHARSET;
      ByteBuffer byteBuffer0 = charset0.encode("0000");
      Hex hex0 = new Hex();
      byte[] byteArray0 = hex0.decode(byteBuffer0);
      assertEquals("java.nio.HeapByteBuffer[pos=4 lim=4 cap=4]", byteBuffer0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Hex hex0 = new Hex("US-ASCII");
      assertEquals("US-ASCII", hex0.getCharsetName());
  }
}
