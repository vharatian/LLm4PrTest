/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 18:12:15 GMT 2025
 */

package org.apache.commons.codec.language.bm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.Set;
import org.apache.commons.codec.language.bm.Languages;
import org.apache.commons.codec.language.bm.NameType;
import org.apache.commons.codec.language.bm.PhoneticEngine;
import org.apache.commons.codec.language.bm.Rule;
import org.apache.commons.codec.language.bm.RuleType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PhoneticEngine_ESTest extends PhoneticEngine_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NameType nameType0 = NameType.GENERIC;
      RuleType ruleType0 = RuleType.APPROX;
      PhoneticEngine phoneticEngine0 = new PhoneticEngine(nameType0, ruleType0, false, 69);
      //  // Unstable assertion: assertEquals(NameType.GENERIC, phoneticEngine0.getNameType());
      //  // Unstable assertion: assertFalse(phoneticEngine0.isConcat());
      //  // Unstable assertion: assertEquals(69, phoneticEngine0.getMaxPhonemes());
      //  // Unstable assertion: assertEquals(RuleType.APPROX, phoneticEngine0.getRuleType());
      //  // Unstable assertion: assertNotNull(phoneticEngine0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
      //  // Unstable assertion: assertTrue(linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertNotNull(linkedHashSet0);
      
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
      //  // Unstable assertion: assertTrue(linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertNotNull(languages_LanguageSet0);
      
      String string0 = phoneticEngine0.encode("ruleType must not be ", languages_LanguageSet0);
      //  // Unstable assertion: assertEquals(NameType.GENERIC, phoneticEngine0.getNameType());
      //  // Unstable assertion: assertFalse(phoneticEngine0.isConcat());
      //  // Unstable assertion: assertEquals(69, phoneticEngine0.getMaxPhonemes());
      //  // Unstable assertion: assertEquals(RuleType.APPROX, phoneticEngine0.getRuleType());
      //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
      //  // Unstable assertion: assertTrue(linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertFalse(linkedHashSet0.contains("ruleType must not be "));
      //  // Unstable assertion: assertEquals("rulitipi-mQst|must-no|not|nut-b|bi|vi", string0);
      //  // Unstable assertion: assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NameType nameType0 = NameType.GENERIC;
      RuleType ruleType0 = RuleType.APPROX;
      PhoneticEngine phoneticEngine0 = new PhoneticEngine(nameType0, ruleType0, true, 0);
      assertEquals(RuleType.APPROX, phoneticEngine0.getRuleType());
      assertEquals(NameType.GENERIC, phoneticEngine0.getNameType());
      assertEquals(0, phoneticEngine0.getMaxPhonemes());
      assertTrue(phoneticEngine0.isConcat());
      assertNotNull(phoneticEngine0);
      
      boolean boolean0 = phoneticEngine0.isConcat();
      assertEquals(RuleType.APPROX, phoneticEngine0.getRuleType());
      assertEquals(NameType.GENERIC, phoneticEngine0.getNameType());
      assertEquals(0, phoneticEngine0.getMaxPhonemes());
      assertTrue(phoneticEngine0.isConcat());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NameType nameType0 = NameType.ASHKENAZI;
      RuleType ruleType0 = RuleType.EXACT;
      PhoneticEngine phoneticEngine0 = new PhoneticEngine(nameType0, ruleType0, true, 0);
      assertEquals(RuleType.EXACT, phoneticEngine0.getRuleType());
      assertEquals(0, phoneticEngine0.getMaxPhonemes());
      assertTrue(phoneticEngine0.isConcat());
      assertEquals(NameType.ASHKENAZI, phoneticEngine0.getNameType());
      assertNotNull(phoneticEngine0);
      
      int int0 = phoneticEngine0.getMaxPhonemes();
      assertEquals(RuleType.EXACT, phoneticEngine0.getRuleType());
      assertEquals(0, phoneticEngine0.getMaxPhonemes());
      assertTrue(phoneticEngine0.isConcat());
      assertEquals(NameType.ASHKENAZI, phoneticEngine0.getNameType());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NameType nameType0 = NameType.GENERIC;
      RuleType ruleType0 = RuleType.EXACT;
      PhoneticEngine phoneticEngine0 = new PhoneticEngine(nameType0, ruleType0, true, (-2122));
      assertTrue(phoneticEngine0.isConcat());
      assertEquals((-2122), phoneticEngine0.getMaxPhonemes());
      assertEquals(RuleType.EXACT, phoneticEngine0.getRuleType());
      assertEquals(NameType.GENERIC, phoneticEngine0.getNameType());
      assertNotNull(phoneticEngine0);
      
      int int0 = phoneticEngine0.getMaxPhonemes();
      assertTrue(phoneticEngine0.isConcat());
      assertEquals((-2122), phoneticEngine0.getMaxPhonemes());
      assertEquals(RuleType.EXACT, phoneticEngine0.getRuleType());
      assertEquals(NameType.GENERIC, phoneticEngine0.getNameType());
      assertEquals((-2122), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NameType nameType0 = NameType.ASHKENAZI;
      RuleType ruleType0 = RuleType.EXACT;
      PhoneticEngine phoneticEngine0 = new PhoneticEngine(nameType0, ruleType0, false);
      assertEquals(NameType.ASHKENAZI, phoneticEngine0.getNameType());
      assertEquals(RuleType.EXACT, phoneticEngine0.getRuleType());
      assertEquals(20, phoneticEngine0.getMaxPhonemes());
      assertFalse(phoneticEngine0.isConcat());
      assertNotNull(phoneticEngine0);
      
      // Undeclared exception!
      try { 
        phoneticEngine0.encode("cglxd<MCA4", (Languages.LanguageSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.language.bm.Rule", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RuleType ruleType0 = RuleType.APPROX;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.add("O!:*J]K~8.8");
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains("O!:*J]K~8.8"));
      assertTrue(boolean0);
      
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(languages_LanguageSet0.isSingleton());
      assertFalse(languages_LanguageSet0.isEmpty());
      assertTrue(linkedHashSet0.contains("O!:*J]K~8.8"));
      assertNotNull(languages_LanguageSet0);
      
      NameType nameType0 = NameType.ASHKENAZI;
      PhoneticEngine phoneticEngine0 = new PhoneticEngine(nameType0, ruleType0, true);
      assertEquals(20, phoneticEngine0.getMaxPhonemes());
      assertEquals(RuleType.APPROX, phoneticEngine0.getRuleType());
      assertTrue(phoneticEngine0.isConcat());
      assertEquals(NameType.ASHKENAZI, phoneticEngine0.getNameType());
      assertNotNull(phoneticEngine0);
      
      // Undeclared exception!
      try { 
        phoneticEngine0.encode("O!:*J]K~8.8", languages_LanguageSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rules found for ash, rules, O!:*J]K~8.8.
         //
         verifyException("org.apache.commons.codec.language.bm.Rule", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RuleType ruleType0 = RuleType.EXACT;
      NameType nameType0 = NameType.SEPHARDIC;
      PhoneticEngine phoneticEngine0 = new PhoneticEngine(nameType0, ruleType0, false, 0);
      assertEquals(0, phoneticEngine0.getMaxPhonemes());
      assertFalse(phoneticEngine0.isConcat());
      assertEquals(RuleType.EXACT, phoneticEngine0.getRuleType());
      assertEquals(NameType.SEPHARDIC, phoneticEngine0.getNameType());
      assertNotNull(phoneticEngine0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(languages_LanguageSet0);
      
      // Undeclared exception!
      try { 
        phoneticEngine0.encode("Malformed line '", languages_LanguageSet0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.language.bm.PhoneticEngine", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RuleType ruleType0 = RuleType.EXACT;
      NameType nameType0 = NameType.SEPHARDIC;
      PhoneticEngine phoneticEngine0 = new PhoneticEngine(nameType0, ruleType0, false);
      assertEquals(RuleType.EXACT, phoneticEngine0.getRuleType());
      assertFalse(phoneticEngine0.isConcat());
      assertEquals(20, phoneticEngine0.getMaxPhonemes());
      assertEquals(NameType.SEPHARDIC, phoneticEngine0.getNameType());
      assertNotNull(phoneticEngine0);
      
      // Undeclared exception!
      try { 
        phoneticEngine0.encode("dela ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NameType nameType0 = NameType.SEPHARDIC;
      RuleType ruleType0 = RuleType.APPROX;
      PhoneticEngine phoneticEngine0 = new PhoneticEngine(nameType0, ruleType0, true);
      assertEquals(20, phoneticEngine0.getMaxPhonemes());
      assertTrue(phoneticEngine0.isConcat());
      assertEquals(NameType.SEPHARDIC, phoneticEngine0.getNameType());
      assertEquals(RuleType.APPROX, phoneticEngine0.getRuleType());
      assertNotNull(phoneticEngine0);
      
      // Undeclared exception!
      try { 
        phoneticEngine0.encode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.language.bm.Lang", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NameType nameType0 = NameType.SEPHARDIC;
      RuleType ruleType0 = RuleType.APPROX;
      PhoneticEngine phoneticEngine0 = new PhoneticEngine(nameType0, ruleType0, false, (-3814));
      assertFalse(phoneticEngine0.isConcat());
      assertEquals((-3814), phoneticEngine0.getMaxPhonemes());
      assertEquals(RuleType.APPROX, phoneticEngine0.getRuleType());
      assertEquals(NameType.SEPHARDIC, phoneticEngine0.getNameType());
      assertNotNull(phoneticEngine0);
      
      // Undeclared exception!
      try { 
        phoneticEngine0.encode("|Z6oKkH4D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -3814
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NameType nameType0 = NameType.SEPHARDIC;
      RuleType ruleType0 = RuleType.EXACT;
      PhoneticEngine phoneticEngine0 = new PhoneticEngine(nameType0, ruleType0, false);
      assertFalse(phoneticEngine0.isConcat());
      assertEquals(RuleType.EXACT, phoneticEngine0.getRuleType());
      assertEquals(20, phoneticEngine0.getMaxPhonemes());
      assertEquals(NameType.SEPHARDIC, phoneticEngine0.getNameType());
      assertNotNull(phoneticEngine0);
      
      // Undeclared exception!
      try { 
        phoneticEngine0.encode("Malformed import statement '");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.language.bm.PhoneticEngine", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NameType nameType0 = NameType.SEPHARDIC;
      RuleType ruleType0 = RuleType.RULES;
      PhoneticEngine phoneticEngine0 = null;
      try {
        phoneticEngine0 = new PhoneticEngine(nameType0, ruleType0, false, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ruleType must not be RULES
         //
         verifyException("org.apache.commons.codec.language.bm.PhoneticEngine", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NameType nameType0 = NameType.SEPHARDIC;
      RuleType ruleType0 = RuleType.EXACT;
      PhoneticEngine phoneticEngine0 = new PhoneticEngine(nameType0, ruleType0, false);
      assertEquals(RuleType.EXACT, phoneticEngine0.getRuleType());
      assertEquals(20, phoneticEngine0.getMaxPhonemes());
      assertFalse(phoneticEngine0.isConcat());
      assertEquals(NameType.SEPHARDIC, phoneticEngine0.getNameType());
      assertNotNull(phoneticEngine0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(languages_LanguageSet0);
      
      // Undeclared exception!
      try { 
        phoneticEngine0.encode("des", languages_LanguageSet0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NameType nameType0 = NameType.SEPHARDIC;
      RuleType ruleType0 = RuleType.APPROX;
      PhoneticEngine phoneticEngine0 = new PhoneticEngine(nameType0, ruleType0, false);
      assertEquals(20, phoneticEngine0.getMaxPhonemes());
      assertEquals(RuleType.APPROX, phoneticEngine0.getRuleType());
      assertFalse(phoneticEngine0.isConcat());
      assertEquals(NameType.SEPHARDIC, phoneticEngine0.getNameType());
      assertNotNull(phoneticEngine0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(languages_LanguageSet0);
      
      // Undeclared exception!
      phoneticEngine0.encode("ktivugzu|ktivuksu|ktivusu-vhiS|vhih|vziS|vzih", languages_LanguageSet0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NameType nameType0 = NameType.GENERIC;
      RuleType ruleType0 = RuleType.APPROX;
      PhoneticEngine phoneticEngine0 = new PhoneticEngine(nameType0, ruleType0, false);
      assertEquals(NameType.GENERIC, phoneticEngine0.getNameType());
      assertEquals(20, phoneticEngine0.getMaxPhonemes());
      assertEquals(RuleType.APPROX, phoneticEngine0.getRuleType());
      assertFalse(phoneticEngine0.isConcat());
      assertNotNull(phoneticEngine0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(languages_LanguageSet0);
      
      String string0 = phoneticEngine0.encode("", languages_LanguageSet0);
      assertEquals(NameType.GENERIC, phoneticEngine0.getNameType());
      assertEquals(20, phoneticEngine0.getMaxPhonemes());
      assertEquals(RuleType.APPROX, phoneticEngine0.getRuleType());
      assertFalse(phoneticEngine0.isConcat());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(string0));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(languages_LanguageSet0);
      
      NameType nameType0 = NameType.GENERIC;
      RuleType ruleType0 = RuleType.EXACT;
      PhoneticEngine phoneticEngine0 = new PhoneticEngine(nameType0, ruleType0, true, 25);
      assertEquals(25, phoneticEngine0.getMaxPhonemes());
      assertEquals(NameType.GENERIC, phoneticEngine0.getNameType());
      assertEquals(RuleType.EXACT, phoneticEngine0.getRuleType());
      assertTrue(phoneticEngine0.isConcat());
      assertNotNull(phoneticEngine0);
      
      String string0 = phoneticEngine0.encode("da dqmt2bp!#f(w]hr3", languages_LanguageSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(25, phoneticEngine0.getMaxPhonemes());
      assertEquals(NameType.GENERIC, phoneticEngine0.getNameType());
      assertEquals(RuleType.EXACT, phoneticEngine0.getRuleType());
      assertTrue(phoneticEngine0.isConcat());
      assertFalse(linkedHashSet0.contains(string0));
      assertEquals("(tkmtpfwhr|tkmtpvvhr|tkmtpvvr)-(datkmtpfwhr|datkmtpvvhr|datkmtpvvr)", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RuleType ruleType0 = RuleType.APPROX;
      NameType nameType0 = NameType.ASHKENAZI;
      PhoneticEngine phoneticEngine0 = new PhoneticEngine(nameType0, ruleType0, true, (-193));
      assertEquals(RuleType.APPROX, phoneticEngine0.getRuleType());
      assertEquals((-193), phoneticEngine0.getMaxPhonemes());
      assertEquals(NameType.ASHKENAZI, phoneticEngine0.getNameType());
      assertTrue(phoneticEngine0.isConcat());
      assertNotNull(phoneticEngine0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(languages_LanguageSet0);
      
      // Undeclared exception!
      try { 
        phoneticEngine0.encode("*2xPc6y31{Q6Q*sx8", languages_LanguageSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -193
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      NameType nameType0 = NameType.GENERIC;
      RuleType ruleType0 = RuleType.EXACT;
      PhoneticEngine phoneticEngine0 = new PhoneticEngine(nameType0, ruleType0, false, 0);
      assertEquals(0, phoneticEngine0.getMaxPhonemes());
      assertEquals(NameType.GENERIC, phoneticEngine0.getNameType());
      assertFalse(phoneticEngine0.isConcat());
      assertEquals(RuleType.EXACT, phoneticEngine0.getRuleType());
      assertNotNull(phoneticEngine0);
      
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(languages_LanguageSet0);
      
      String string0 = phoneticEngine0.encode("d'(idsak|idsok|isas|isak|isats|isos|isok|isots|itsak|itsok) (banisak|banisok|bonisak|bonisok|vanidsak|vanidsok|vanisas|vanisak|vanisats|vanisos|vanisok|vanisots|vanitsak|vanitsok|vonidsak|vonidsok|vonisas|vonisak|vonisats|vonisos|vonisok|vonisots|vonitsak|vonitsok)", languages_LanguageSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, phoneticEngine0.getMaxPhonemes());
      assertEquals(NameType.GENERIC, phoneticEngine0.getNameType());
      assertFalse(phoneticEngine0.isConcat());
      assertEquals(RuleType.EXACT, phoneticEngine0.getRuleType());
      assertFalse(linkedHashSet0.contains("d'(idsak|idsok|isas|isak|isats|isos|isok|isots|itsak|itsok) (banisak|banisok|bonisak|bonisok|vanidsak|vanidsok|vanisas|vanisak|vanisats|vanisos|vanisok|vanisots|vanitsak|vanitsok|vonidsak|vonidsok|vonisas|vonisak|vonisats|vonisos|vonisok|vonisots|vonitsak|vonitsok)"));
      assertEquals("(-)-(-)", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(languages_LanguageSet0);
      
      PhoneticEngine.PhonemeBuilder phoneticEngine_PhonemeBuilder0 = PhoneticEngine.PhonemeBuilder.empty(languages_LanguageSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(phoneticEngine_PhonemeBuilder0);
      
      String string0 = phoneticEngine_PhonemeBuilder0.makeString();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(string0));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.add("al");
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains("al"));
      assertTrue(boolean0);
      
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(languages_LanguageSet0.isSingleton());
      assertFalse(languages_LanguageSet0.isEmpty());
      assertTrue(linkedHashSet0.contains("al"));
      assertNotNull(languages_LanguageSet0);
      
      PhoneticEngine.PhonemeBuilder phoneticEngine_PhonemeBuilder0 = PhoneticEngine.PhonemeBuilder.empty(languages_LanguageSet0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(languages_LanguageSet0.isSingleton());
      assertFalse(languages_LanguageSet0.isEmpty());
      assertTrue(linkedHashSet0.contains("al"));
      assertNotNull(phoneticEngine_PhonemeBuilder0);
      
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme("al", languages_LanguageSet0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(languages_LanguageSet0.isSingleton());
      assertFalse(languages_LanguageSet0.isEmpty());
      assertTrue(linkedHashSet0.contains("al"));
      assertNotNull(rule_Phoneme0);
      
      phoneticEngine_PhonemeBuilder0.apply(rule_Phoneme0, 39);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(languages_LanguageSet0.isSingleton());
      assertFalse(languages_LanguageSet0.isEmpty());
      assertTrue(linkedHashSet0.contains("al"));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.add("du ");
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains("du "));
      assertTrue(boolean0);
      
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(languages_LanguageSet0.isSingleton());
      assertFalse(languages_LanguageSet0.isEmpty());
      assertTrue(linkedHashSet0.contains("du "));
      assertNotNull(languages_LanguageSet0);
      
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme("dos fwd1,w", languages_LanguageSet0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(languages_LanguageSet0.isSingleton());
      assertFalse(languages_LanguageSet0.isEmpty());
      assertTrue(linkedHashSet0.contains("du "));
      assertFalse(linkedHashSet0.contains("dos fwd1,w"));
      assertNotNull(rule_Phoneme0);
      
      PhoneticEngine.PhonemeBuilder phoneticEngine_PhonemeBuilder0 = PhoneticEngine.PhonemeBuilder.empty(languages_LanguageSet0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(languages_LanguageSet0.isSingleton());
      assertFalse(languages_LanguageSet0.isEmpty());
      assertTrue(linkedHashSet0.contains("du "));
      assertFalse(linkedHashSet0.contains("dos fwd1,w"));
      assertNotNull(phoneticEngine_PhonemeBuilder0);
      
      phoneticEngine_PhonemeBuilder0.apply(rule_Phoneme0, 0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(languages_LanguageSet0.isSingleton());
      assertFalse(languages_LanguageSet0.isEmpty());
      assertTrue(linkedHashSet0.contains("du "));
      assertFalse(linkedHashSet0.contains("dos fwd1,w"));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(languages_LanguageSet0);
      
      PhoneticEngine.PhonemeBuilder phoneticEngine_PhonemeBuilder0 = PhoneticEngine.PhonemeBuilder.empty(languages_LanguageSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(phoneticEngine_PhonemeBuilder0);
      
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme("(tkmtpfwhr|tkmtpvvhr|tkmtpvvr)-(datkmtpfwhr|datkmtpvvhr|datkmtpvvr)", languages_LanguageSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("(tkmtpfwhr|tkmtpvvhr|tkmtpvvr)-(datkmtpfwhr|datkmtpvvhr|datkmtpvvr)"));
      assertNotNull(rule_Phoneme0);
      
      phoneticEngine_PhonemeBuilder0.apply(rule_Phoneme0, 2060);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("(tkmtpfwhr|tkmtpvvhr|tkmtpvvr)-(datkmtpfwhr|datkmtpvvhr|datkmtpvvr)"));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(languages_LanguageSet0);
      
      PhoneticEngine.PhonemeBuilder phoneticEngine_PhonemeBuilder0 = PhoneticEngine.PhonemeBuilder.empty(languages_LanguageSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(phoneticEngine_PhonemeBuilder0);
      
      Set<Rule.Phoneme> set0 = phoneticEngine_PhonemeBuilder0.getPhonemes();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(languages_LanguageSet0);
      
      PhoneticEngine.PhonemeBuilder phoneticEngine_PhonemeBuilder0 = PhoneticEngine.PhonemeBuilder.empty(languages_LanguageSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(phoneticEngine_PhonemeBuilder0);
      
      phoneticEngine_PhonemeBuilder0.append("");
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(""));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RuleType ruleType0 = RuleType.EXACT;
      NameType nameType0 = NameType.ASHKENAZI;
      PhoneticEngine phoneticEngine0 = new PhoneticEngine(nameType0, ruleType0, false);
      assertEquals(RuleType.EXACT, phoneticEngine0.getRuleType());
      assertEquals(NameType.ASHKENAZI, phoneticEngine0.getNameType());
      assertEquals(20, phoneticEngine0.getMaxPhonemes());
      assertFalse(phoneticEngine0.isConcat());
      assertNotNull(phoneticEngine0);
      
      String string0 = phoneticEngine0.encode("do ^*|ylde|lzo.o");
      assertEquals(RuleType.EXACT, phoneticEngine0.getRuleType());
      assertEquals(NameType.ASHKENAZI, phoneticEngine0.getNameType());
      assertEquals(20, phoneticEngine0.getMaxPhonemes());
      assertFalse(phoneticEngine0.isConcat());
      assertEquals("do-ildelzoo", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NameType nameType0 = NameType.SEPHARDIC;
      RuleType ruleType0 = RuleType.EXACT;
      PhoneticEngine phoneticEngine0 = new PhoneticEngine(nameType0, ruleType0, true);
      assertEquals(RuleType.EXACT, phoneticEngine0.getRuleType());
      assertTrue(phoneticEngine0.isConcat());
      assertEquals(NameType.SEPHARDIC, phoneticEngine0.getNameType());
      assertEquals(20, phoneticEngine0.getMaxPhonemes());
      assertNotNull(phoneticEngine0);
      
      String string0 = phoneticEngine0.encode("dela #mmmnh=f<5x`#wi4");
      assertEquals(RuleType.EXACT, phoneticEngine0.getRuleType());
      assertTrue(phoneticEngine0.isConcat());
      assertEquals(NameType.SEPHARDIC, phoneticEngine0.getNameType());
      assertEquals(20, phoneticEngine0.getMaxPhonemes());
      assertEquals("mnjfSvi|mnjfksvi", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NameType nameType0 = NameType.GENERIC;
      RuleType ruleType0 = RuleType.RULES;
      PhoneticEngine phoneticEngine0 = null;
      try {
        phoneticEngine0 = new PhoneticEngine(nameType0, ruleType0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ruleType must not be RULES
         //
         verifyException("org.apache.commons.codec.language.bm.PhoneticEngine", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RuleType ruleType0 = RuleType.EXACT;
      NameType nameType0 = NameType.GENERIC;
      PhoneticEngine phoneticEngine0 = new PhoneticEngine(nameType0, ruleType0, true);
      assertEquals(NameType.GENERIC, phoneticEngine0.getNameType());
      assertEquals(RuleType.EXACT, phoneticEngine0.getRuleType());
      assertEquals(20, phoneticEngine0.getMaxPhonemes());
      assertTrue(phoneticEngine0.isConcat());
      assertNotNull(phoneticEngine0);
      
      String string0 = phoneticEngine0.encode(", pat='");
      assertEquals(NameType.GENERIC, phoneticEngine0.getNameType());
      assertEquals(RuleType.EXACT, phoneticEngine0.getRuleType());
      assertEquals(20, phoneticEngine0.getMaxPhonemes());
      assertTrue(phoneticEngine0.isConcat());
      assertEquals("pat", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NameType nameType0 = NameType.SEPHARDIC;
      RuleType ruleType0 = RuleType.EXACT;
      PhoneticEngine phoneticEngine0 = new PhoneticEngine(nameType0, ruleType0, true);
      assertEquals(20, phoneticEngine0.getMaxPhonemes());
      assertEquals(RuleType.EXACT, phoneticEngine0.getRuleType());
      assertEquals(NameType.SEPHARDIC, phoneticEngine0.getNameType());
      assertTrue(phoneticEngine0.isConcat());
      assertNotNull(phoneticEngine0);
      
      String string0 = phoneticEngine0.encode("do");
      assertEquals(20, phoneticEngine0.getMaxPhonemes());
      assertEquals(RuleType.EXACT, phoneticEngine0.getRuleType());
      assertEquals(NameType.SEPHARDIC, phoneticEngine0.getNameType());
      assertTrue(phoneticEngine0.isConcat());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NameType nameType0 = NameType.GENERIC;
      RuleType ruleType0 = RuleType.EXACT;
      PhoneticEngine phoneticEngine0 = new PhoneticEngine(nameType0, ruleType0, false);
      // Undeclared exception!
      phoneticEngine0.encode("d'd'(idsak|idsok|isas|isak|isats|isos|isok|isots|itsak|itsok) (banisak|banisok|bonisak|bonisok|vanidsak|vanidsok|vanisas|vanisak|vanisats|vanisos|vanisok|vanisots|vanitsak|vanitsok|vonidsak|vonidsok|vonisas|vonisak|vonisats|vonisos|vonisok|vonisots|vonitsak|vonitsok)");
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NameType nameType0 = NameType.GENERIC;
      RuleType ruleType0 = RuleType.EXACT;
      PhoneticEngine phoneticEngine0 = new PhoneticEngine(nameType0, ruleType0, false);
      boolean boolean0 = phoneticEngine0.isConcat();
      assertFalse(boolean0);
      assertEquals(20, phoneticEngine0.getMaxPhonemes());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NameType nameType0 = NameType.SEPHARDIC;
      RuleType ruleType0 = RuleType.EXACT;
      PhoneticEngine phoneticEngine0 = new PhoneticEngine(nameType0, ruleType0, false);
      phoneticEngine0.getRuleType();
      assertEquals(20, phoneticEngine0.getMaxPhonemes());
      assertFalse(phoneticEngine0.isConcat());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NameType nameType0 = NameType.GENERIC;
      RuleType ruleType0 = RuleType.EXACT;
      PhoneticEngine phoneticEngine0 = new PhoneticEngine(nameType0, ruleType0, false);
      phoneticEngine0.getLang();
      assertEquals(20, phoneticEngine0.getMaxPhonemes());
      assertFalse(phoneticEngine0.isConcat());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NameType nameType0 = NameType.GENERIC;
      RuleType ruleType0 = RuleType.EXACT;
      PhoneticEngine phoneticEngine0 = new PhoneticEngine(nameType0, ruleType0, false);
      int int0 = phoneticEngine0.getMaxPhonemes();
      assertEquals(20, int0);
      assertFalse(phoneticEngine0.isConcat());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NameType nameType0 = NameType.GENERIC;
      RuleType ruleType0 = RuleType.APPROX;
      PhoneticEngine phoneticEngine0 = new PhoneticEngine(nameType0, ruleType0, false);
      phoneticEngine0.getNameType();
      assertEquals(20, phoneticEngine0.getMaxPhonemes());
      assertFalse(phoneticEngine0.isConcat());
  }
}
