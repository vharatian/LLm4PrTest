/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 19:57:44 GMT 2025
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.OutputStream;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.binary.Base16OutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Base16OutputStream_ESTest extends Base16OutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CodecPolicy codecPolicy0 = CodecPolicy.LENIENT;
      Base16OutputStream base16OutputStream0 = new Base16OutputStream((OutputStream) null, false, false, codecPolicy0);
      assertFalse(base16OutputStream0.isStrictDecoding());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      File file0 = MockFile.createTempFile("p[Tr^'-", "p[Tr^'-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Base16OutputStream base16OutputStream0 = new Base16OutputStream(mockPrintStream0, false, false);
      assertFalse(base16OutputStream0.isStrictDecoding());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Base16OutputStream base16OutputStream0 = new Base16OutputStream((OutputStream) null, true);
      assertFalse(base16OutputStream0.isStrictDecoding());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Base16OutputStream base16OutputStream0 = null;
      try {
        base16OutputStream0 = new Base16OutputStream(byteArrayOutputStream0, false, false, (CodecPolicy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // codecPolicy
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Base16OutputStream base16OutputStream0 = new Base16OutputStream((OutputStream) null);
      assertFalse(base16OutputStream0.isStrictDecoding());
  }
}
