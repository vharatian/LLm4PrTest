/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 19:06:25 GMT 2025
 */

package org.apache.commons.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.text.AlphabetConverter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AlphabetConverter_ESTest extends AlphabetConverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, "");
      AlphabetConverter alphabetConverter0 = AlphabetConverter.createConverterFromMap(hashMap0);
      assertEquals(1, alphabetConverter0.getEncodedCharLength());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = Character.valueOf('Y');
      characterArray0[0] = character0;
      AlphabetConverter alphabetConverter0 = AlphabetConverter.createConverterFromChars(characterArray0, characterArray0, characterArray0);
      String string0 = alphabetConverter0.toString();
      assertEquals("Y -> 89\n", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, "\u0002");
      AlphabetConverter alphabetConverter0 = AlphabetConverter.createConverterFromMap(hashMap0);
      String string0 = alphabetConverter0.encode("\u0000");
      assertEquals("\u0002", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      AlphabetConverter alphabetConverter0 = AlphabetConverter.createConverterFromMap(hashMap0);
      alphabetConverter0.decode("");
      assertEquals(1, alphabetConverter0.getEncodedCharLength());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      AlphabetConverter alphabetConverter0 = AlphabetConverter.createConverterFromMap(hashMap0);
      hashMap0.put((Integer) null, "=");
      // Undeclared exception!
      try { 
        alphabetConverter0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.AlphabetConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      AlphabetConverter alphabetConverter0 = AlphabetConverter.createConverterFromMap(hashMap0);
      Integer integer0 = Integer.getInteger("", Integer.MAX_VALUE);
      hashMap0.put(integer0, "");
      // Undeclared exception!
      try { 
        alphabetConverter0.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Character", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        AlphabetConverter.createConverterFromMap((Map<Integer, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      hashMap0.put(integer0, "S:Q`[=*}");
      // Undeclared exception!
      try { 
        AlphabetConverter.createConverterFromMap(hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Character", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      // Undeclared exception!
      try { 
        AlphabetConverter.createConverterFromChars(characterArray0, characterArray0, characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.AlphabetConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(2147483645);
      integerArray0[0] = integer0;
      // Undeclared exception!
      try { 
        AlphabetConverter.createConverter(integerArray0, integerArray0, integerArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Character", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Character[] characterArray0 = new Character[3];
      Character character0 = new Character('c');
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('S');
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(' ');
      characterArray0[2] = character2;
      Character[] characterArray1 = new Character[4];
      characterArray1[0] = character1;
      characterArray1[1] = character2;
      characterArray1[2] = character1;
      characterArray1[3] = character2;
      AlphabetConverter alphabetConverter0 = AlphabetConverter.createConverterFromChars(characterArray0, characterArray1, (Character[]) null);
      assertEquals(2, alphabetConverter0.getEncodedCharLength());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(2831);
      integerArray0[0] = integer0;
      integerArray0[1] = integerArray0[0];
      integerArray0[2] = integerArray0[1];
      Integer[] integerArray1 = new Integer[4];
      integerArray1[0] = integerArray0[2];
      integerArray1[1] = integerArray0[1];
      integerArray1[2] = integerArray0[0];
      integerArray1[3] = integer0;
      // Undeclared exception!
      try { 
        AlphabetConverter.createConverter(integerArray0, integerArray1, integerArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must have at least two encoding characters (excluding those in the 'do not encode' list), but has 0
         //
         verifyException("org.apache.commons.text.AlphabetConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-51));
      integerArray0[0] = integer0;
      Integer[] integerArray1 = new Integer[4];
      // Undeclared exception!
      try { 
        AlphabetConverter.createConverter(integerArray0, integerArray1, integerArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not use 'do not encode' list because encoding alphabet does not contain '\uFFCD'
         //
         verifyException("org.apache.commons.text.AlphabetConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-1461));
      integerArray0[0] = integer0;
      Integer[] integerArray1 = new Integer[1];
      // Undeclared exception!
      try { 
        AlphabetConverter.createConverter(integerArray1, integerArray0, integerArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not use 'do not encode' list because original alphabet does not contain '\uFA4B'
         //
         verifyException("org.apache.commons.text.AlphabetConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = new Integer[7];
      AlphabetConverter alphabetConverter0 = AlphabetConverter.createConverter(integerArray0, integerArray1, integerArray0);
      String string0 = alphabetConverter0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      AlphabetConverter alphabetConverter0 = AlphabetConverter.createConverterFromMap(hashMap0);
      Integer integer0 = new Integer((-924));
      hashMap0.put(integer0, "fFza~NsHu*-K");
      AlphabetConverter alphabetConverter1 = AlphabetConverter.createConverterFromMap(hashMap0);
      boolean boolean0 = alphabetConverter0.equals(alphabetConverter1);
      assertFalse(boolean0);
      assertEquals(1, alphabetConverter0.getEncodedCharLength());
      assertEquals(13, alphabetConverter1.getEncodedCharLength());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = Character.valueOf(':');
      characterArray0[0] = character0;
      AlphabetConverter alphabetConverter0 = AlphabetConverter.createConverterFromChars(characterArray0, characterArray0, characterArray0);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      AlphabetConverter alphabetConverter1 = AlphabetConverter.createConverterFromMap(hashMap0);
      boolean boolean0 = alphabetConverter0.equals(alphabetConverter1);
      assertFalse(boolean0);
      assertEquals(1, alphabetConverter1.getEncodedCharLength());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      AlphabetConverter alphabetConverter0 = AlphabetConverter.createConverter(integerArray0, integerArray0, integerArray0);
      Map<Integer, String> map0 = alphabetConverter0.getOriginalToEncoded();
      AlphabetConverter alphabetConverter1 = AlphabetConverter.createConverterFromMap(map0);
      boolean boolean0 = alphabetConverter0.equals(alphabetConverter1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      AlphabetConverter alphabetConverter0 = AlphabetConverter.createConverter(integerArray0, integerArray0, integerArray0);
      boolean boolean0 = alphabetConverter0.equals(alphabetConverter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      AlphabetConverter alphabetConverter0 = AlphabetConverter.createConverterFromMap(hashMap0);
      boolean boolean0 = alphabetConverter0.equals((Object) null);
      assertEquals(1, alphabetConverter0.getEncodedCharLength());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Character[] characterArray0 = new Character[9];
      Character character0 = new Character('#');
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = characterArray0[0];
      characterArray0[4] = character0;
      characterArray0[5] = characterArray0[0];
      characterArray0[6] = characterArray0[0];
      characterArray0[7] = characterArray0[1];
      characterArray0[8] = characterArray0[6];
      AlphabetConverter alphabetConverter0 = AlphabetConverter.createConverterFromChars(characterArray0, characterArray0, characterArray0);
      Integer integer0 = new Integer((-4128));
      boolean boolean0 = alphabetConverter0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer(2284);
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      AlphabetConverter alphabetConverter0 = AlphabetConverter.createConverter(integerArray0, integerArray0, integerArray0);
      try { 
        alphabetConverter0.encode("\u08EC -> 2284\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // Couldn't find encoding for ' ' in \u08EC -> 2284
         //
         verifyException("org.apache.commons.text.AlphabetConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = Integer.valueOf(8);
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integerArray0[0];
      integerArray0[3] = integerArray0[0];
      integerArray0[4] = integerArray0[2];
      integerArray0[5] = integerArray0[4];
      AlphabetConverter alphabetConverter0 = AlphabetConverter.createConverter(integerArray0, integerArray0, integerArray0);
      String string0 = alphabetConverter0.encode("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      AlphabetConverter alphabetConverter0 = AlphabetConverter.createConverter(integerArray0, integerArray0, integerArray0);
      String string0 = alphabetConverter0.encode((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(29);
      hashMap0.put(integer0, "\u0002");
      AlphabetConverter alphabetConverter0 = AlphabetConverter.createConverterFromMap(hashMap0);
      assertEquals(1, hashMap0.size());
      
      String string0 = alphabetConverter0.decode("\u0002");
      assertEquals("\u001D", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer((-76));
      hashMap0.put(integer0, "t&zF+,@}[PRY");
      AlphabetConverter alphabetConverter0 = AlphabetConverter.createConverterFromMap(hashMap0);
      try { 
        alphabetConverter0.decode("\uFFB4 -> -76\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // Unexpected end of string while decoding \uFFB4 -> -76
         //
         verifyException("org.apache.commons.text.AlphabetConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Character[] characterArray0 = new Character[3];
      Character character0 = Character.valueOf('5');
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('9');
      characterArray0[1] = character1;
      characterArray0[2] = character0;
      AlphabetConverter alphabetConverter0 = AlphabetConverter.createConverterFromChars(characterArray0, characterArray0, characterArray0);
      try { 
        alphabetConverter0.decode("9C4e%RqW#S");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // Unexpected string without decoding (C) in 9C4e%RqW#S
         //
         verifyException("org.apache.commons.text.AlphabetConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Character[] characterArray0 = new Character[9];
      Character character0 = new Character('#');
      characterArray0[0] = character0;
      Character character1 = new Character('k');
      characterArray0[1] = character1;
      characterArray0[2] = character1;
      Character character2 = Character.valueOf('Z');
      characterArray0[3] = character2;
      characterArray0[4] = characterArray0[2];
      Character character3 = Character.valueOf('y');
      characterArray0[5] = character3;
      characterArray0[6] = characterArray0[1];
      characterArray0[7] = characterArray0[4];
      characterArray0[8] = character0;
      Character[] characterArray1 = new Character[6];
      characterArray1[0] = characterArray0[2];
      characterArray1[1] = character1;
      characterArray1[2] = character2;
      characterArray1[3] = characterArray0[1];
      characterArray1[4] = characterArray0[1];
      characterArray1[5] = character3;
      Character[] characterArray2 = new Character[1];
      characterArray2[0] = character3;
      AlphabetConverter alphabetConverter0 = AlphabetConverter.createConverterFromChars(characterArray0, characterArray1, characterArray2);
      assertEquals(2, alphabetConverter0.getEncodedCharLength());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      AlphabetConverter alphabetConverter0 = AlphabetConverter.createConverterFromMap(hashMap0);
      alphabetConverter0.decode((String) null);
      assertEquals(1, alphabetConverter0.getEncodedCharLength());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = new Integer[7];
      Integer integer0 = new Integer((-1228));
      integerArray1[0] = integer0;
      Integer integer1 = new Integer((-2040));
      integerArray1[2] = integer1;
      Integer integer2 = new Integer(3248);
      integerArray1[6] = integer2;
      Integer[] integerArray2 = new Integer[5];
      integerArray2[0] = integerArray1[0];
      // Undeclared exception!
      try { 
        AlphabetConverter.createConverter(integerArray1, integerArray2, integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.AlphabetConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Character[] characterArray0 = new Character[9];
      Character character0 = new Character('9');
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      Character character1 = Character.valueOf('!');
      characterArray0[2] = character1;
      Character character2 = Character.valueOf('$');
      characterArray0[3] = character2;
      characterArray0[4] = character2;
      characterArray0[5] = characterArray0[0];
      characterArray0[6] = characterArray0[2];
      Character character3 = new Character('6');
      characterArray0[7] = character3;
      characterArray0[8] = characterArray0[0];
      Character[] characterArray1 = new Character[7];
      characterArray1[0] = character2;
      characterArray1[1] = character0;
      characterArray1[2] = character0;
      characterArray1[3] = character1;
      characterArray1[4] = character1;
      characterArray1[5] = character0;
      characterArray1[6] = character1;
      Character[] characterArray2 = new Character[1];
      characterArray2[0] = characterArray0[4];
      AlphabetConverter alphabetConverter0 = AlphabetConverter.createConverterFromChars(characterArray0, characterArray1, characterArray2);
      assertEquals(2, alphabetConverter0.getEncodedCharLength());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = Integer.valueOf(8);
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integerArray0[1];
      Integer integer1 = new Integer(0);
      integerArray0[3] = integer1;
      Integer[] integerArray1 = new Integer[1];
      integerArray1[0] = integer0;
      // Undeclared exception!
      try { 
        AlphabetConverter.createConverter(integerArray0, integerArray0, integerArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.AlphabetConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Character[] characterArray0 = new Character[9];
      Character character0 = new Character('9');
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      char char0 = '!';
      Character character1 = Character.valueOf('!');
      characterArray0[2] = character1;
      characterArray0[3] = characterArray0[2];
      characterArray0[4] = characterArray0[1];
      Character character2 = Character.valueOf(char0);
      characterArray0[5] = character2;
      characterArray0[6] = character2;
      characterArray0[7] = characterArray0[5];
      characterArray0[8] = characterArray0[7];
      Character[] characterArray1 = new Character[7];
      characterArray1[0] = characterArray0[2];
      characterArray1[1] = character2;
      characterArray1[2] = characterArray0[3];
      characterArray1[3] = character1;
      characterArray1[4] = characterArray0[3];
      characterArray1[5] = character2;
      characterArray1[6] = character1;
      // Undeclared exception!
      try { 
        AlphabetConverter.createConverterFromChars(characterArray0, characterArray1, characterArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must have at least two encoding characters (excluding those in the 'do not encode' list), but has 0
         //
         verifyException("org.apache.commons.text.AlphabetConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Character[] characterArray0 = new Character[9];
      Character character0 = new Character('/');
      characterArray0[0] = character0;
      characterArray0[1] = characterArray0[0];
      characterArray0[2] = character0;
      characterArray0[3] = characterArray0[0];
      characterArray0[4] = character0;
      characterArray0[5] = characterArray0[2];
      characterArray0[6] = characterArray0[1];
      characterArray0[7] = characterArray0[1];
      characterArray0[8] = character0;
      AlphabetConverter alphabetConverter0 = AlphabetConverter.createConverterFromChars(characterArray0, characterArray0, characterArray0);
      int int0 = alphabetConverter0.getEncodedCharLength();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Character[] characterArray0 = new Character[9];
      Character character0 = new Character('/');
      characterArray0[0] = character0;
      characterArray0[1] = characterArray0[0];
      characterArray0[2] = character0;
      characterArray0[3] = characterArray0[1];
      characterArray0[4] = characterArray0[0];
      characterArray0[5] = character0;
      characterArray0[6] = characterArray0[2];
      characterArray0[7] = character0;
      characterArray0[8] = character0;
      AlphabetConverter alphabetConverter0 = AlphabetConverter.createConverterFromChars(characterArray0, characterArray0, characterArray0);
      alphabetConverter0.hashCode();
      assertEquals(1, alphabetConverter0.getEncodedCharLength());
  }
}
