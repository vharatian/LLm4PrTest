/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 20:17:31 GMT 2025
 */

package org.apache.commons.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.text.CharacterPredicate;
import org.apache.commons.text.CharacterPredicates;
import org.apache.commons.text.RandomStringGenerator;
import org.apache.commons.text.TextRandomProvider;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class RandomStringGenerator_ESTest extends RandomStringGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      char[][] charArray0 = new char[3][6];
      char[] charArray1 = new char[2];
      charArray1[0] = 'Q';
      charArray1[1] = 'p';
      charArray0[0] = charArray1;
      // Undeclared exception!
      try { 
        randomStringGenerator_Builder0.withinRange(charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Each pair must contain minimum and maximum code point
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      char[][] charArray0 = new char[2][1];
      char[] charArray1 = new char[2];
      charArray1[1] = '*';
      charArray0[0] = charArray1;
      // Undeclared exception!
      try { 
        randomStringGenerator_Builder0.withinRange(charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Each pair must contain minimum and maximum code point
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      RandomStringGenerator.Builder randomStringGenerator_Builder1 = randomStringGenerator_Builder0.withinRange(0, 1114111);
      assertEquals(0, RandomStringGenerator.Builder.DEFAULT_LENGTH);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      RandomStringGenerator.Builder randomStringGenerator_Builder1 = randomStringGenerator_Builder0.withinRange(0, 717);
      assertEquals(0, RandomStringGenerator.Builder.DEFAULT_LENGTH);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      TextRandomProvider textRandomProvider0 = mock(TextRandomProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(textRandomProvider0).nextInt(anyInt());
      randomStringGenerator_Builder0.usingRandom(textRandomProvider0);
      RandomStringGenerator randomStringGenerator0 = randomStringGenerator_Builder0.build();
      String string0 = randomStringGenerator0.generate(0, 1114111);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      char[][] charArray0 = new char[2][2];
      randomStringGenerator_Builder0.withinRange(4126, 4126);
      RandomStringGenerator.Builder randomStringGenerator_Builder1 = randomStringGenerator_Builder0.withinRange(charArray0);
      RandomStringGenerator.Builder randomStringGenerator_Builder2 = new RandomStringGenerator.Builder();
      TextRandomProvider textRandomProvider0 = mock(TextRandomProvider.class, new ViolatedAssumptionAnswer());
      doReturn(25, 0, 0, 0, 0).when(textRandomProvider0).nextInt(anyInt());
      randomStringGenerator_Builder0.usingRandom(textRandomProvider0);
      RandomStringGenerator randomStringGenerator0 = randomStringGenerator_Builder1.build();
      String string0 = randomStringGenerator0.generate(0, 0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      RandomStringGenerator randomStringGenerator0 = randomStringGenerator_Builder0.build();
      // Undeclared exception!
      try { 
        randomStringGenerator0.generate(0, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.concurrent.ThreadLocalRandom", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      char[] charArray0 = new char[1];
      randomStringGenerator_Builder0.selectFrom(charArray0);
      TextRandomProvider textRandomProvider0 = mock(TextRandomProvider.class, new ViolatedAssumptionAnswer());
      doReturn(1, (-792)).when(textRandomProvider0).nextInt(anyInt());
      randomStringGenerator_Builder0.usingRandom(textRandomProvider0);
      RandomStringGenerator randomStringGenerator0 = randomStringGenerator_Builder0.build();
      // Undeclared exception!
      try { 
        randomStringGenerator0.generate(0, 1114111);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      char[][] charArray0 = new char[1][2];
      randomStringGenerator_Builder0.withinRange(charArray0);
      TextRandomProvider textRandomProvider0 = mock(TextRandomProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 1114111).when(textRandomProvider0).nextInt(anyInt());
      randomStringGenerator_Builder0.usingRandom(textRandomProvider0);
      RandomStringGenerator randomStringGenerator0 = randomStringGenerator_Builder0.build();
      // Undeclared exception!
      try { 
        randomStringGenerator0.generate(717);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1114111, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      char[] charArray0 = new char[4];
      RandomStringGenerator.Builder randomStringGenerator_Builder1 = randomStringGenerator_Builder0.selectFrom(charArray0);
      TextRandomProvider textRandomProvider0 = mock(TextRandomProvider.class, new ViolatedAssumptionAnswer());
      doReturn(1, (-637)).when(textRandomProvider0).nextInt(anyInt());
      RandomStringGenerator.Builder randomStringGenerator_Builder2 = randomStringGenerator_Builder1.usingRandom(textRandomProvider0);
      RandomStringGenerator randomStringGenerator0 = randomStringGenerator_Builder2.build();
      // Undeclared exception!
      try { 
        randomStringGenerator0.generate(2437);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      char[][] charArray0 = new char[2][2];
      RandomStringGenerator.Builder randomStringGenerator_Builder1 = randomStringGenerator_Builder0.withinRange(charArray0);
      RandomStringGenerator randomStringGenerator0 = randomStringGenerator_Builder1.build();
      String string0 = randomStringGenerator0.generate(48);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      CharacterPredicate[] characterPredicateArray0 = new CharacterPredicate[3];
      randomStringGenerator_Builder0.filteredBy(characterPredicateArray0);
      RandomStringGenerator.Builder randomStringGenerator_Builder1 = randomStringGenerator_Builder0.filteredBy(characterPredicateArray0);
      assertSame(randomStringGenerator_Builder0, randomStringGenerator_Builder1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      RandomStringGenerator.Builder randomStringGenerator_Builder1 = randomStringGenerator_Builder0.filteredBy((CharacterPredicate[]) null);
      assertSame(randomStringGenerator_Builder1, randomStringGenerator_Builder0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      char[][] charArray0 = new char[2][1];
      char[] charArray1 = new char[2];
      charArray1[0] = '}';
      charArray0[0] = charArray1;
      // Undeclared exception!
      try { 
        randomStringGenerator_Builder0.withinRange(charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum code point 125 is larger than maximum code point 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      // Undeclared exception!
      try { 
        randomStringGenerator_Builder0.withinRange(2147480495, 2147480495);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2147480495 is larger than Character.MAX_CODE_POINT.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      // Undeclared exception!
      try { 
        randomStringGenerator_Builder0.withinRange((-526), (-526));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum code point -526 is negative
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      // Undeclared exception!
      try { 
        randomStringGenerator_Builder0.withinRange(1114111, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum code point 1114111 is larger than maximum code point 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      RandomStringGenerator randomStringGenerator0 = randomStringGenerator_Builder0.build();
      // Undeclared exception!
      try { 
        randomStringGenerator0.generate(1114111, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Maximum length 0 is smaller than minimum length 1114111.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      RandomStringGenerator randomStringGenerator0 = randomStringGenerator_Builder0.build();
      // Undeclared exception!
      try { 
        randomStringGenerator0.generate((-1756), (-1756));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum length -1756 is smaller than zero.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      CharacterPredicate[] characterPredicateArray0 = new CharacterPredicate[1];
      CharacterPredicates characterPredicates0 = CharacterPredicates.LETTERS;
      characterPredicateArray0[0] = (CharacterPredicate) characterPredicates0;
      RandomStringGenerator.Builder randomStringGenerator_Builder1 = randomStringGenerator_Builder0.filteredBy(characterPredicateArray0);
      RandomStringGenerator randomStringGenerator0 = randomStringGenerator_Builder1.build();
      String string0 = randomStringGenerator0.generate(115);
      //  // Unstable assertion: assertEquals("\uD85E\uDF5E\uA375\uD86C\uDCE4\uD85F\uDF60\u5D50\uA0F6\uB369\uB77E\uD84C\uDFED\uD84D\uDC92\u6081\u86E7\uD848\uDCCA\u8AD9\uB68F\uD856\uDF08\u64A9\uD800\uDECF\uD86F\uDFEA\u34A2\uD843\uDFB2\uD872\uDE63\uD851\uDD24\u9AD5\uD846\uDF8F\uD865\uDD96\u6293\uD856\uDE78\uA1BE\u4F7F\uBDAD\uD856\uDE79\u4D87\uBDBE\uD842\uDD7D\uFA4D\uD858\uDC67\uA8F2\uD860\uDDB4\uD840\uDDEB\uD855\uDE56\uD846\uDEE3\uD862\uDD61\uD859\uDD9A\uD859\uDE98\uD864\uDCEE\u9EE4\u1742\u7DF2\uD86A\uDF1B\uD871\uDF0D\u72BC\uD858\uDCAD\uD864\uDDB9\uB624\u03DF\uB50A\u1D4D\uBBAE\u6E20\uD862\uDD16\uD848\uDF8D\uBD82\uD86E\uDC43\u3BEA\uD85E\uDD46\u8395\u9824\uD862\uDE5A\u6591\uD860\uDCEE\uA93E\uD850\uDD96\u8063\u3E91\uB2C3\u62D6\uD852\uDF03\u1150\uD845\uDD95\uD80C\uDC57\uD84C\uDF1E\u52EF\uCD3C\uD853\uDF3B\u4A3E\uA89D\uD859\uDC1C\uD856\uDC69\u5A50\uA1A7\uD86A\uDC96\uD869\uDE89\uD857\uDD4C\u3A9E\uD85C\uDD68\uD842\uDDA5\uD865\uDF63\uD865\uDD69\uD848\uDC3D\u81B6\u3F90\uD85E\uDCF5\uD849\uDDB6\uD845\uDECB\uA184\uD840\uDFEF\uD852\uDE8A\uD85B\uDC4E\u48AE\uB82C\uD84D\uDE97\u4886\u8B41\u972B", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      CharacterPredicate[] characterPredicateArray0 = new CharacterPredicate[1];
      RandomStringGenerator.Builder randomStringGenerator_Builder1 = randomStringGenerator_Builder0.filteredBy(characterPredicateArray0);
      RandomStringGenerator randomStringGenerator0 = randomStringGenerator_Builder1.build();
      // Undeclared exception!
      try { 
        randomStringGenerator0.generate(115);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      char[][] charArray0 = new char[0][2];
      randomStringGenerator_Builder0.withinRange(charArray0);
      RandomStringGenerator randomStringGenerator0 = randomStringGenerator_Builder0.build();
      // Undeclared exception!
      randomStringGenerator0.generate(1114111);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      RandomStringGenerator randomStringGenerator0 = randomStringGenerator_Builder0.build();
      // Undeclared exception!
      try { 
        randomStringGenerator0.generate((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length -1 is smaller than zero.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      RandomStringGenerator randomStringGenerator0 = randomStringGenerator_Builder0.build();
      String string0 = randomStringGenerator0.generate(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      char[][] charArray0 = new char[2][2];
      RandomStringGenerator.Builder randomStringGenerator_Builder1 = randomStringGenerator_Builder0.withinRange(charArray0);
      TextRandomProvider textRandomProvider0 = mock(TextRandomProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(textRandomProvider0).nextInt(anyInt());
      randomStringGenerator_Builder0.usingRandom(textRandomProvider0);
      RandomStringGenerator randomStringGenerator0 = randomStringGenerator_Builder1.build();
      String string0 = randomStringGenerator0.generate(5, 1330);
      assertEquals("\u0000\u0000\u0000\u0000\u0000", string0);
  }
}
