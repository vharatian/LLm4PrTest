/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 20:21:44 GMT 2025
 */

package org.apache.commons.text.similarity;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.function.Function;
import org.apache.commons.text.similarity.IntersectionResult;
import org.apache.commons.text.similarity.IntersectionSimilarity;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class IntersectionSimilarity_ESTest extends IntersectionSimilarity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList1.add(object0);
      Function<CharSequence, Collection<Object>> function0 = (Function<CharSequence, Collection<Object>>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0, linkedList1).when(function0).apply(any(java.lang.CharSequence.class));
      IntersectionSimilarity<Object> intersectionSimilarity0 = new IntersectionSimilarity<Object>(function0);
      char[] charArray0 = new char[9];
      Object object1 = new Object();
      linkedList0.addLast(object1);
      linkedList0.addAll((Collection<?>) linkedList1);
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      IntersectionResult intersectionResult0 = intersectionSimilarity0.apply(charBuffer0, charBuffer0);
      assertEquals(1, intersectionResult0.getSizeB());
      assertEquals(2, intersectionResult0.getSizeA());
      assertEquals(1, intersectionResult0.getIntersection());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList1.add(object0);
      Function<CharSequence, Collection<Object>> function0 = (Function<CharSequence, Collection<Object>>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0, linkedList1).when(function0).apply(any(java.lang.CharSequence.class));
      IntersectionSimilarity<Object> intersectionSimilarity0 = new IntersectionSimilarity<Object>(function0);
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      IntersectionResult intersectionResult0 = intersectionSimilarity0.apply(charBuffer0, charBuffer0);
      assertEquals(1, intersectionResult0.getSizeB());
      assertEquals(0, intersectionResult0.getSizeA());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Function<CharSequence, Collection<Object>> function0 = (Function<CharSequence, Collection<Object>>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0, linkedList0).when(function0).apply(any(java.lang.CharSequence.class));
      IntersectionSimilarity<Object> intersectionSimilarity0 = new IntersectionSimilarity<Object>(function0);
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      IntersectionResult intersectionResult0 = intersectionSimilarity0.apply(charBuffer1, charBuffer0);
      assertEquals(0, intersectionResult0.getSizeA());
      assertEquals(0, intersectionResult0.getSizeB());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Function<CharSequence, Collection<Object>> function0 = (Function<CharSequence, Collection<Object>>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0, linkedList0).when(function0).apply(any(java.lang.CharSequence.class));
      IntersectionSimilarity<Object> intersectionSimilarity0 = new IntersectionSimilarity<Object>(function0);
      linkedList0.add((Object) linkedList0);
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      // Undeclared exception!
      try { 
        intersectionSimilarity0.apply(charBuffer0, charBuffer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Function<CharSequence, Collection<IntersectionResult>> function0 = (Function<CharSequence, Collection<IntersectionResult>>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function0).apply(any(java.lang.CharSequence.class));
      IntersectionSimilarity<IntersectionResult> intersectionSimilarity0 = new IntersectionSimilarity<IntersectionResult>(function0);
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      // Undeclared exception!
      try { 
        intersectionSimilarity0.apply(charBuffer0, charBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.similarity.IntersectionSimilarity", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList1.add(object0);
      Function<CharSequence, Collection<Object>> function0 = (Function<CharSequence, Collection<Object>>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0, linkedList1).when(function0).apply(any(java.lang.CharSequence.class));
      IntersectionSimilarity<Object> intersectionSimilarity0 = new IntersectionSimilarity<Object>(function0);
      Object object1 = new Object();
      linkedList1.add(object1);
      char[] charArray0 = new char[9];
      linkedList0.addLast(object0);
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      IntersectionResult intersectionResult0 = intersectionSimilarity0.apply(charBuffer0, charBuffer0);
      assertEquals(1, intersectionResult0.getIntersection());
      assertEquals(1, intersectionResult0.getSizeA());
      assertEquals(2, intersectionResult0.getSizeB());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Function<CharSequence, Collection<Object>> function0 = (Function<CharSequence, Collection<Object>>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0, linkedList0).when(function0).apply(any(java.lang.CharSequence.class));
      IntersectionSimilarity<Object> intersectionSimilarity0 = new IntersectionSimilarity<Object>(function0);
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      IntersectionResult intersectionResult0 = intersectionSimilarity0.apply(charBuffer0, charBuffer0);
      LinkedHashSet<IntersectionResult> linkedHashSet0 = new LinkedHashSet<IntersectionResult>();
      Function<CharSequence, Collection<IntersectionResult>> function1 = (Function<CharSequence, Collection<IntersectionResult>>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(linkedHashSet0, linkedHashSet0).when(function1).apply(any(java.lang.CharSequence.class));
      IntersectionSimilarity<IntersectionResult> intersectionSimilarity1 = new IntersectionSimilarity<IntersectionResult>(function1);
      linkedHashSet0.add(intersectionResult0);
      assertEquals(0, intersectionResult0.getSizeB());
      assertEquals(0, intersectionResult0.getSizeA());
      
      IntersectionResult intersectionResult1 = intersectionSimilarity1.apply(charBuffer0, charBuffer0);
      assertEquals(1, intersectionResult1.getSizeA());
      assertEquals(1, intersectionResult1.getSizeB());
      assertEquals(1, intersectionResult1.getIntersection());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Function<CharSequence, Collection<LinkedHashSet<Object>>> function0 = (Function<CharSequence, Collection<LinkedHashSet<Object>>>) mock(Function.class, new ViolatedAssumptionAnswer());
      IntersectionSimilarity<LinkedHashSet<Object>> intersectionSimilarity0 = new IntersectionSimilarity<LinkedHashSet<Object>>(function0);
      CharBuffer charBuffer0 = CharBuffer.allocate(2736);
      // Undeclared exception!
      try { 
        intersectionSimilarity0.apply(charBuffer0, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input cannot be null
         //
         verifyException("org.apache.commons.text.similarity.IntersectionSimilarity", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Function<CharSequence, Collection<Object>> function0 = (Function<CharSequence, Collection<Object>>) mock(Function.class, new ViolatedAssumptionAnswer());
      IntersectionSimilarity<Object> intersectionSimilarity0 = new IntersectionSimilarity<Object>(function0);
      // Undeclared exception!
      try { 
        intersectionSimilarity0.apply((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input cannot be null
         //
         verifyException("org.apache.commons.text.similarity.IntersectionSimilarity", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IntersectionSimilarity<Object> intersectionSimilarity0 = null;
      try {
        intersectionSimilarity0 = new IntersectionSimilarity<Object>((Function<CharSequence, Collection<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Converter must not be null
         //
         verifyException("org.apache.commons.text.similarity.IntersectionSimilarity", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList1.add(object0);
      Function<CharSequence, Collection<Object>> function0 = (Function<CharSequence, Collection<Object>>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0, linkedList1).when(function0).apply(any(java.lang.CharSequence.class));
      IntersectionSimilarity<Object> intersectionSimilarity0 = new IntersectionSimilarity<Object>(function0);
      char[] charArray0 = new char[9];
      Object object1 = new Object();
      linkedList0.addLast(object1);
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      IntersectionResult intersectionResult0 = intersectionSimilarity0.apply(charBuffer0, charBuffer0);
      assertEquals(1, intersectionResult0.getSizeB());
      assertEquals(0, intersectionResult0.getIntersection());
      assertEquals(1, intersectionResult0.getSizeA());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Function<CharSequence, Collection<Object>> function0 = (Function<CharSequence, Collection<Object>>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0, linkedList0).when(function0).apply(any(java.lang.CharSequence.class));
      IntersectionSimilarity<Object> intersectionSimilarity0 = new IntersectionSimilarity<Object>(function0);
      linkedList0.add((Object) intersectionSimilarity0);
      linkedList0.add((Object) intersectionSimilarity0);
      CharBuffer charBuffer0 = CharBuffer.allocate(5);
      IntersectionResult intersectionResult0 = intersectionSimilarity0.apply(charBuffer0, charBuffer0);
      assertEquals(2, intersectionResult0.getIntersection());
      assertEquals(2, intersectionResult0.getSizeB());
      assertEquals(2, intersectionResult0.getSizeA());
  }
}
