/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 21:15:32 GMT 2025
 */

package org.apache.commons.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import org.apache.commons.text.StrLookup;
import org.apache.commons.text.StrMatcher;
import org.apache.commons.text.StrSubstitutor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class StrSubstitutor_ESTest extends StrSubstitutor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(strLookup0).toString();
      doReturn((String) null).when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.comons.ext.StrLookup", (String) null, (String) null).when(strMatcher0).toString();
      doReturn(2, (-3496), 2233, 0, 0).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'U', strMatcher0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.apache.comons.ext.StrLookup");
      strSubstitutor0.replaceIn(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0);
      char[] charArray0 = new char[9];
      strSubstitutor0.replace(charArray0, 1, 0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, "org.apache.comons.ext.StrLookup", "org.apache.comons.ext.StrLookup", 'w', "");
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        strSubstitutor0.replace(charArray0, 3284, 9);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 9
         //
         verifyException("org.apache.commons.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.replace("Variable prefix matcher must not be null!", 0, (int) '$');
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Properties properties0 = new Properties();
      Object object0 = new Object();
      properties0.put("org.apache.commons.text.StrSubstitutor@0000000002", object0);
      StrSubstitutor.replace(object0, properties0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(strLookup0).toString();
      doReturn((String) null).when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(strMatcher0).toString();
      doReturn(28, 0).when(strMatcher0).isMatch(any(char[].class) , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '5', strMatcher0);
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariablePrefix('P');
      strSubstitutor1.setVariableSuffix('\'');
      char[] charArray0 = new char[4];
      charArray0[0] = 'P';
      charArray0[2] = '\'';
      strSubstitutor0.replace(charArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "", "", 'C');
      strSubstitutor0.setPreserveEscapes(true);
      strSubstitutor0.setVariableSuffix("Infinite loop in property interpolation of ");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, "org.apache.comons.ext.StrLookup", "org.apache.comons.ext.StrLookup", 'w', "");
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      strSubstitutor0.setVariableSuffix("GU^q8${G|Ruy/9");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "PeC", "*j", ':');
      strSubstitutor0.setDisableSubstitutionInValues(true);
      strSubstitutor0.setVariableSuffix("3f<f-/Qm");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "Variable suffix must not be null!", "Variable suffix must not be null!", '?', "Variable suffix must not be null!");
      strSubstitutor0.setPreserveEscapes(true);
      strSubstitutor0.setVariableSuffix('$');
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, "org.apache.comons.ext.StrLookup", "org.apache.comons.ext.StrLookup", 'w', "");
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      strSubstitutor0.setVariableSuffix('N');
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '<');
      strSubstitutor0.setDisableSubstitutionInValues(true);
      strSubstitutor0.setVariableSuffix('#');
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "", "", 'C');
      strSubstitutor0.setPreserveEscapes(true);
      strSubstitutor0.setVariablePrefix("");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "Variable prefix matcher must not be null!", "!4N87z5nGUg", 'A');
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      strSubstitutor0.setVariablePrefix("!4N87z5nGUg");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'U', strMatcher0);
      strSubstitutor0.setDisableSubstitutionInValues(true);
      strSubstitutor0.setVariablePrefix("");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) null, "startIndex must be valid", "startIndex must be valid", '6');
      strSubstitutor0.setDisableSubstitutionInValues(true);
      strSubstitutor0.setVariablePrefix('$');
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '|', strMatcher0);
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      strSubstitutor0.setValueDelimiter("2bp");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '<');
      strSubstitutor0.setDisableSubstitutionInValues(true);
      strSubstitutor0.setValueDelimiter("");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '*', strMatcher0);
      strSubstitutor0.setPreserveEscapes(true);
      strSubstitutor0.setValueDelimiter('P');
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '|', strMatcher0);
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      strSubstitutor0.setValueDelimiter('H');
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'U', strMatcher0);
      strSubstitutor0.setDisableSubstitutionInValues(true);
      strSubstitutor0.setValueDelimiter('U');
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrSubstitutor.replaceSystemProperties(strSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StrSubstitutor.replaceSystemProperties("");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      char[] charArray0 = new char[2];
      strSubstitutor0.replace(charArray0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0);
      StringBuffer stringBuffer0 = new StringBuffer("/RoiWfD%;xKhV1");
      strSubstitutor0.replace(stringBuffer0, 4, 10);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0);
      StringBuffer stringBuffer0 = new StringBuffer(0);
      strSubstitutor0.replace(stringBuffer0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "<", "The name of the field/property to read should not be null", 'o', "");
      StringWriter stringWriter0 = new StringWriter(957);
      char[] charArray0 = new char[9];
      stringWriter0.write(charArray0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      strSubstitutor0.replace(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.text.StrLookup", "org.apache.commons.text.StrLookup", (String) null).when(strMatcher0).toString();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'U', strMatcher0);
      strSubstitutor0.replace("", 0, 0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Properties properties0 = new Properties();
      StrSubstitutor.replace((Object) null, properties0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Properties properties0 = new Properties();
      StrSubstitutor.replace((Object) stringBuilder0, properties0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor.replace((Object) null, (Map<String, Object>) hashMap0, "S6~_mBhPbrYf<?R", "");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor.replace((Object) "", (Map<String, Object>) hashMap0, "I.x+;#=vVOz!m", "org.apache.commons.text.StrSubstitutor");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor.replace((Object) null, (Map<String, Object>) hashMap0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor.replace((Object) "", (Map<String, Object>) hashMap0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0);
      strSubstitutor0.replace((Object) "org.apache.commons.text.StrMatcher$CharMatcher");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "hgN+", "Variable prefix must not be null!", '', "tqcC'");
      strSubstitutor0.replace((CharSequence) "Variable prefix must not be null!", 3, 3);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "org.apache.commons.text.StrSubstitutor", "org.apache.commons.text.StrSubstitutor", 'j', "Variable prefix matcher must not be null!");
      strSubstitutor0.replace((CharSequence) "Variable prefix matcher must not be null!", 3, 0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "", "", 'C');
      strSubstitutor0.replace((CharSequence) "Infinite loop in property interpolation of ");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StrLookup<String> strLookup0 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "", "", '*');
      strSubstitutor0.setPreserveEscapes(true);
      strSubstitutor0.isPreserveEscapes();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '*', strMatcher0);
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      strSubstitutor0.isEnableSubstitutionInVariables();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "", "", '.');
      strSubstitutor0.getEscapeChar();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "->", "->", 'A', "");
      strSubstitutor0.getEscapeChar();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("-K+m}'S2D~0|g/&/0?c").when(strLookup0).toString();
      doReturn("-K+m}'S2D~0|g/&/0?c").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("-K+m}'S2D~0|g/&/0?c", "-K+m}'S2D~0|g/&/0?c", "-K+m}'S2D~0|g/&/0?c", "-K+m}'S2D~0|g/&/0?c", "-K+m}'S2D~0|g/&/0?c").when(strMatcher0).toString();
      doReturn(3, 3, 3, 3).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '[', strMatcher0);
      StringBuilder stringBuilder0 = new StringBuilder("-K+m}'S2D~0|g/&/0?c");
      // Undeclared exception!
      try { 
        strSubstitutor0.replaceIn(stringBuilder0, 5, 5);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Infinite loop in property interpolation of 'S2D~: 
         //
         verifyException("org.apache.commons.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("-K+m}}27|g/&/^?c", "-K+m}}27|g/&/^?c", "-K+m}}27|g/&/^?c").when(strMatcher0).toString();
      doReturn((-21), (-21)).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'z', strMatcher0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "-K+m}}27|g/&/^?c");
      // Undeclared exception!
      try { 
        strSubstitutor0.replaceIn(stringBuilder0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.comons.ext.StrLookup").when(strLookup0).toString();
      doReturn("org.apache.comons.ext.StrLookup").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.comons.ext.StrLookup", "$e$$").when(strMatcher0).toString();
      doReturn((-2995)).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'U', strMatcher0);
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariablePrefix('U');
      StringBuilder stringBuilder0 = new StringBuilder();
      char[] charArray0 = new char[7];
      charArray0[0] = 'U';
      stringBuilder0.append(charArray0);
      // Undeclared exception!
      try { 
        strSubstitutor1.replaceIn(stringBuilder0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("-K+m}'2=|g/&/^?c").when(strLookup0).toString();
      doReturn("-K+m}'2=|g/&/^?c").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("-K+m}'2=|g/&/^?c", "-K+m}'2=|g/&/^?c", "-K+m}'2=|g/&/^?c", "-K+m}'2=|g/&/^?c", "-K+m}'2=|g/&/^?c").when(strMatcher0).toString();
      doReturn(6, 6, 6, 6).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'v', strMatcher0);
      StringBuilder stringBuilder0 = new StringBuilder(6);
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) strSubstitutor0);
      // Undeclared exception!
      try { 
        strSubstitutor0.replaceIn(stringBuilder1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Infinite loop in property interpolation of org.apache.commons.text.StrSubstitutor@1: 
         //
         verifyException("org.apache.commons.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("-K+m}}27|g/&/^?c", "-K+m}}27|g/&/^?c").when(strMatcher0).toString();
      doReturn((-21)).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'z', strMatcher0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "-K+m}}27|g/&/^?c");
      strSubstitutor0.setVariableSuffix('I');
      // Undeclared exception!
      try { 
        strSubstitutor0.replaceIn(stringBuilder0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.coNons.ext.StrLoGrup").when(strLookup0).toString();
      doReturn("org.apache.coNons.ext.StrLoGrup").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.coNons.ext.StrLoGrup", "org.apache.coNons.ext.StrLoGrup", "org.apache.coNons.ext.StrLoGrup", "org.apache.coNons.ext.StrLoGrup", "org.apache.coNons.ext.StrLoGrup").when(strMatcher0).toString();
      doReturn(2, 2, 2, 2).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '9', strMatcher0);
      StringBuffer stringBuffer0 = new StringBuffer("org.apache.coNons.ext.StrLoGrup");
      // Undeclared exception!
      try { 
        strSubstitutor0.replaceIn(stringBuffer0, 2, 26);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Infinite loop in property interpolation of g.apache.coNons.ext.StrLoG: 
         //
         verifyException("org.apache.commons.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StringBuilder stringBuilder0 = new StringBuilder(2066);
      CharBuffer charBuffer0 = CharBuffer.allocate(97526364);
      stringBuilder0.append((CharSequence) charBuffer0);
      StringWriter stringWriter0 = new StringWriter(2565);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuilder0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      strSubstitutor0.replaceIn(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("W#+XtbVhXxu3Z=+MD", "W#+XtbVhXxu3Z=+MD", "W#+XtbVhXxu3Z=+MD").when(strMatcher0).toString();
      doReturn((-41), (-41)).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '>', strMatcher0);
      StringBuffer stringBuffer0 = new StringBuffer("W#+XtbVhXxu3Z=+MD");
      // Undeclared exception!
      try { 
        strSubstitutor0.replaceIn(stringBuffer0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.comons.ext.StrLookup").when(strLookup0).toString();
      doReturn("org.apache.comons.ext.StrLookup").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.comons.ext.StrLookup", "org.apache.comons.ext.StrLookup", "org.apache.comons.ext.StrLookup").when(strMatcher0).toString();
      doReturn(2, (-3496)).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'U', strMatcher0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.apache.comons.ext.StrLookup");
      // Undeclared exception!
      try { 
        strSubstitutor0.replaceIn(stringBuffer0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("orA.apache.coNans./t.StrLorup").when(strLookup0).toString();
      doReturn("orA.apache.coNans./t.StrLorup").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("orA.apache.coNans./t.StrLorup", "orA.apache.coNans./t.StrLorup", "orA.apache.coNans./t.StrLorup", "orA.apache.coNans./t.StrLorup", "orA.apache.coNans./t.StrLorup").when(strMatcher0).toString();
      doReturn(2, 2, 2, 2).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '!', strMatcher0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "orA.apache.coNans./t.StrLorup");
      // Undeclared exception!
      try { 
        strSubstitutor0.replaceIn(stringBuffer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Infinite loop in property interpolation of orA.apache.coNans./t.StrLorup: 
         //
         verifyException("org.apache.commons.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StrLookup<String> strLookup0 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("$", (String) null).when(strMatcher0).toString();
      doReturn((-2881)).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'k', strMatcher0);
      strSubstitutor0.setVariableSuffix("4;?1Q");
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.insert(0, false);
      // Undeclared exception!
      try { 
        strSubstitutor0.replaceIn(stringBuffer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.comons.ext.StrLookup").when(strLookup0).toString();
      doReturn("org.apache.comons.ext.StrLookup").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.comons.ext.StrLookup", (String) null).when(strMatcher0).toString();
      doReturn((-591)).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'U', strMatcher0);
      strSubstitutor0.setVariablePrefix('U');
      char[] charArray0 = new char[4];
      charArray0[0] = 'U';
      // Undeclared exception!
      try { 
        strSubstitutor0.replace(charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.coNons.ext.StrLookup").when(strLookup0).toString();
      doReturn("org.apache.coNons.ext.StrLookup").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.coNons.ext.StrLookup", "}d34XHbq", "}d34XHbq", "org.apache.coNons.ext.StrLookup", "org.apache.coNons.ext.StrLookup").when(strMatcher0).toString();
      doReturn(2, 2, 2, 2).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '9', strMatcher0);
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        strSubstitutor0.replace(charArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Infinite loop in property interpolation of \u0000\u0000\u0000\u0000\u0000: 
         //
         verifyException("org.apache.commons.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(strLookup0).toString();
      doReturn((String) null).when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.comons.ext.StrLookup", (String) null).when(strMatcher0).toString();
      doReturn((-591)).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'U', strMatcher0);
      strSubstitutor0.setVariablePrefix('U');
      char[] charArray0 = new char[4];
      charArray0[0] = 'U';
      // Undeclared exception!
      try { 
        strSubstitutor0.replace(charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("$=AA3t;^", "$=AA3t;^", "$=AA3t;^").when(strMatcher0).toString();
      doReturn((-3), (-3)).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'R', strMatcher0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "$=AA3t;^");
      // Undeclared exception!
      try { 
        strSubstitutor0.replace(stringBuffer0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("$uI~3R$Ek").when(strLookup0).toString();
      doReturn("$uI~3R$Ek").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("$uI~3R$Ek", "$uI~3R$Ek", "$uI~3R$Ek", "$uI~3R$Ek", "$uI~3R$Ek").when(strMatcher0).toString();
      doReturn(6, 6, 6, 6).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'j', strMatcher0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "$uI~3R$Ek");
      // Undeclared exception!
      try { 
        strSubstitutor0.replace(stringBuffer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Infinite loop in property interpolation of $uI~3R$Ek: 
         //
         verifyException("org.apache.commons.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("$=AA3t;^", "$=AA3t;^").when(strMatcher0).toString();
      doReturn((-3)).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'R', strMatcher0);
      strSubstitutor0.setVariableSuffix('R');
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "$=AA3t;^");
      // Undeclared exception!
      try { 
        strSubstitutor0.replace(stringBuffer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.coNons.ext.StrLorup", "org.apache.coNons.ext.StrLorup").when(strLookup0).toString();
      doReturn("org.apache.coNons.ext.StrLorup", "org.apache.coNons.ext.StrLorup").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.coNons.ext.StrLorup", "org.apache.coNons.ext.StrLorup", "org.apache.coNons.ext.StrLorup").when(strMatcher0).toString();
      doReturn(2, 2, 2, 2, (-1732)).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '\u001D', strMatcher0);
      strSubstitutor0.setDisableSubstitutionInValues(true);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("org.apache.coNons.ext.StrLorup", 2, 10);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("/{*iW;D%;xKhV1", (int) '$', (int) '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("PeC", "PeC", "PeC").when(strMatcher0).toString();
      doReturn((-7), (-7)).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '\u001F', strMatcher0);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("PeC");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.comons.ext.StrLookup").when(strLookup0).toString();
      doReturn("").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.comons.ext.StrLookup", "").when(strMatcher0).toString();
      doReturn(2, (-3496)).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'L');
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("org.apache.comons.ext.StrLookup");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("PeC", "PeC").when(strMatcher0).toString();
      doReturn((-3)).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '\u001F', strMatcher0);
      strSubstitutor0.setVariableSuffix("PeC");
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("PeC");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        StrSubstitutor.replace((Object) null, (Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      Properties properties0 = new Properties();
      Object object0 = new Object();
      properties0.put(object0, object0);
      // Undeclared exception!
      try { 
        StrSubstitutor.replace((Object) strSubstitutor0, properties0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("java.util.Properties", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("", strSubstitutor0);
      // Undeclared exception!
      try { 
        StrSubstitutor.replace((Object) strSubstitutor0, (Map<String, Object>) hashMap0, "0", "0");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Infinite loop in property interpolation of org.apache.commons.text.StrSubstitutor@0000000001: 
         //
         verifyException("org.apache.commons.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.coNons.ext.StrLoGrup", "}d34XHbq", "}d34XHbq").when(strMatcher0).toString();
      doReturn((-40), (-40)).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'E', strMatcher0);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace((Object) "}d34XHbq");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("PeC").when(strLookup0).toString();
      doReturn("PeC").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("PeC", "PeC", "PeC", "PeC", "PeC").when(strMatcher0).toString();
      doReturn(2, 2, 2, 2).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '\u001F', strMatcher0);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace((Object) "PeC");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Infinite loop in property interpolation of PeC: 
         //
         verifyException("org.apache.commons.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StringBuilder stringBuilder0 = new StringBuilder(2066);
      CharBuffer charBuffer0 = CharBuffer.allocate(97526364);
      stringBuilder0.append((CharSequence) charBuffer0);
      StringBuffer stringBuffer0 = new StringBuffer(stringBuilder0);
      // Undeclared exception!
      strSubstitutor0.replace((CharSequence) stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("PeC", "PeC", "PeC").when(strMatcher0).toString();
      doReturn((-3), (-3)).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '\u001F', strMatcher0);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace((CharSequence) "PeC");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.comons.ext.StrLookup", "Variable suffix must not be null!").when(strMatcher0).toString();
      doReturn(0, 0, 0, 0).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'U', strMatcher0);
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariablePrefix('U');
      strSubstitutor1.replace((CharSequence) " X^x8wuYUs& M");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("PeC").when(strLookup0).toString();
      doReturn("PeC").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("PeC", "PeC", "PeC", "PeC", "PeC").when(strMatcher0).toString();
      doReturn(2, 2, 2, 2).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '\u001F', strMatcher0);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace((CharSequence) "PeC");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Infinite loop in property interpolation of PeC: 
         //
         verifyException("org.apache.commons.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("PeC", "PeC").when(strMatcher0).toString();
      doReturn(0, 0, 0).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '\u001F', strMatcher0);
      strSubstitutor0.setVariableSuffix("PeC");
      strSubstitutor0.replace((CharSequence) "PeC");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = null;
      try {
        strSubstitutor0 = new StrSubstitutor(strLookup0, (String) null, (String) null, '8', (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = null;
      try {
        strSubstitutor0 = new StrSubstitutor(strLookup0, (String) null, (String) null, '%');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = null;
      try {
        strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "}", (String) null, 'W', (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable suffix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = null;
      try {
        strSubstitutor0 = new StrSubstitutor((Map<String, Object>) null, (String) null, "\u0000", '$');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = null;
      try {
        strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      // Undeclared exception!
      try { 
        strSubstitutor0.setVariablePrefix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("PeC").when(strLookup0).toString();
      doReturn("PeC").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("PeC", "PeC", "PeC", "PeC", "PeC").when(strMatcher0).toString();
      doReturn(2, 2, 2, 2).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '\u001F', strMatcher0);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("PeC");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Infinite loop in property interpolation of PeC: 
         //
         verifyException("org.apache.commons.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = new Object();
      hashMap0.put("shM", object0);
      String string0 = StrSubstitutor.replace((Object) hashMap0, (Map<String, Object>) hashMap0, "a", "a");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StringBuilder stringBuilder0 = new StringBuilder();
      boolean boolean0 = strSubstitutor0.replaceIn(stringBuilder0, 0, 0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        strSubstitutor0.replaceIn(stringBuilder0, (int) '$', (int) '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      boolean boolean0 = strSubstitutor0.replaceIn(stringBuffer0, 0, 0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        strSubstitutor0.replaceIn(stringBuffer0, (int) '$', (int) '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0);
      String string0 = strSubstitutor0.replace((Object) null);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "", "", '\'', "");
      strSubstitutor0.replace((Object) "");
      assertEquals('\'', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      // Undeclared exception!
      try { 
        strSubstitutor0.replace((CharSequence) "[q", 23, 23);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "", "", 'c', "Variable suffix must not be null!");
      strSubstitutor0.isDisableSubstitutionInValues();
      assertEquals('c', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Object object0 = new Object();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = StrSubstitutor.replace(object0, (Map<String, String>) hashMap0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '5', strMatcher0);
      char char0 = strSubstitutor0.getEscapeChar();
      assertEquals('5', char0);
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "HG&]Vs-_`%H", "dHEnav6J)C|", 'O', "dHEnav6J)C|");
      StrLookup<String> strLookup1 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      strSubstitutor0.setVariableResolver(strLookup1);
      assertEquals('O', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0);
      strSubstitutor0.setDisableSubstitutionInValues(true);
      strSubstitutor0.isDisableSubstitutionInValues();
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "", "");
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '9', strMatcher0);
      strSubstitutor0.isEnableSubstitutionInVariables();
      assertEquals('9', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0);
      strSubstitutor0.setEscapeChar('\'');
      assertEquals('\'', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setValueDelimiter((String) null);
      assertEquals('$', strSubstitutor1.getEscapeChar());
      assertFalse(strSubstitutor1.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      // Undeclared exception!
      try { 
        strSubstitutor0.setVariableSuffix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable suffix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = null;
      try {
        strSubstitutor0 = new StrSubstitutor((StrLookup<?>) null, strMatcher0, (StrMatcher) null, '\u001F', strMatcher0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable suffix matcher must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        StrSubstitutor.replace((Object) hashMap0, (Map<String, Object>) hashMap0, (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = null;
      try {
        strSubstitutor0 = new StrSubstitutor(strLookup0, (StrMatcher) null, strMatcher0, 'y', strMatcher0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix matcher must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(strMatcher0).toString();
      doReturn((int)'$', (int)'$').when(strMatcher0).isMatch(any(char[].class) , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '$', strMatcher0);
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariablePrefix('$');
      StrSubstitutor strSubstitutor2 = strSubstitutor1.setVariableSuffix('$');
      char[] charArray0 = new char[4];
      charArray0[0] = '$';
      charArray0[2] = '$';
      // Undeclared exception!
      try { 
        strSubstitutor2.replace(charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.setVariablePrefix('3');
      strSubstitutor0.setVariableSuffix('[');
      char[] charArray0 = new char[8];
      charArray0[3] = '3';
      charArray0[5] = '3';
      charArray0[7] = '[';
      String string0 = strSubstitutor0.replace(charArray0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertEquals("\u0000\u0000\u00003\u00003\u0000[", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(strLookup0).toString();
      doReturn("", "").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "").when(strMatcher0).toString();
      doReturn((-1), (-1), 0, 0, 0).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'U', strMatcher0);
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariablePrefix('U');
      char[] charArray0 = new char[4];
      charArray0[0] = 'U';
      strSubstitutor1.setValueDelimiter("");
      String string0 = strSubstitutor0.replace(charArray0);
      assertEquals('U', strSubstitutor0.getEscapeChar());
      assertEquals("U\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariablePrefix('P');
      strSubstitutor0.setVariableSuffix('N');
      char[] charArray0 = new char[7];
      strSubstitutor1.setEnableSubstitutionInVariables(true);
      charArray0[1] = 'P';
      charArray0[4] = 'N';
      strSubstitutor1.replace(charArray0);
      assertEquals('$', strSubstitutor1.getEscapeChar());
      assertFalse(strSubstitutor1.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) null, "startIndex must be valid", "startIndex must be valid", '6');
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariablePrefix('$');
      char[] charArray0 = new char[4];
      charArray0[1] = '$';
      charArray0[3] = '$';
      String string0 = strSubstitutor1.replace(charArray0);
      assertTrue(strSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals("\u0000$\u0000$", string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("w", "w").when(strMatcher0).toString();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '|', strMatcher0);
      strSubstitutor0.setPreserveEscapes(true);
      strSubstitutor0.setVariablePrefix('R');
      char[] charArray0 = new char[3];
      charArray0[0] = '|';
      charArray0[1] = 'R';
      strSubstitutor0.replace(charArray0);
      assertTrue(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(strLookup0).toString();
      doReturn((String) null).when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(strMatcher0).toString();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '*', strMatcher0);
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariablePrefix('*');
      char[] charArray0 = new char[9];
      charArray0[1] = '*';
      charArray0[2] = '*';
      strSubstitutor0.setVariableSuffix('*');
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "org.apache.comons.ext.StrLookup");
      stringBuilder0.append((CharSequence) " \t\n\r\f");
      stringBuilder0.insert(36, charArray0);
      boolean boolean0 = strSubstitutor1.replaceIn(stringBuilder0);
      //  // Unstable assertion: assertEquals("org.apache.comons.ext.StrLookup \t\n\r\f\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringBuilder0.toString());
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      boolean boolean0 = strSubstitutor0.replaceIn((StringBuilder) null, (int) '$', (int) '$');
      assertFalse(boolean0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      boolean boolean0 = strSubstitutor0.replaceIn((StringBuilder) null);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertFalse(boolean0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("W#+XtbVhXxu3Z=+MD", (String) null).when(strLookup0).toString();
      doReturn("W#+XtbVhXxu3Z=+MD", (String) null).when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("W#+XtbVhXxu3Z=+MD", "W#+XtbVhXxu3Z=+MD", "W#+XtbVhXxu3Z=+MD").when(strMatcher0).toString();
      doReturn(2, 2, 2, 2, 0).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'g', strMatcher0);
      strSubstitutor0.setDisableSubstitutionInValues(true);
      StringBuffer stringBuffer0 = new StringBuffer("W#+XtbVhXxu3Z=+MD");
      boolean boolean0 = strSubstitutor0.replaceIn(stringBuffer0);
      assertEquals(30, stringBuffer0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      boolean boolean0 = strSubstitutor0.replaceIn((StringBuffer) null, (int) '$', (int) '$');
      assertFalse(boolean0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      boolean boolean0 = strSubstitutor0.replaceIn((StringBuffer) null);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      String string0 = strSubstitutor0.replace((CharSequence) null, (int) '$', (int) '$');
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertNull(string0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.replace((CharSequence) null);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = strSubstitutor0.replace((CharSequence) stringBuffer0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.replace((StringBuffer) null, 64711720, 64711720);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace(stringBuffer0, 0, 7);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.replace((StringBuffer) null);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = strSubstitutor0.replace(stringBuffer0);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      String string0 = strSubstitutor0.replace((char[]) null, 3, 3);
      assertNull(string0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.replace((char[]) null);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      char[] charArray0 = new char[0];
      String string0 = strSubstitutor0.replace(charArray0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.coNons.ext.StrLorup", (String) null).when(strLookup0).toString();
      doReturn("org.apache.coNons.ext.StrLorup", (String) null).when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.coNons.ext.StrLorup", "org.apache.coNons.ext.StrLorup", "org.apache.coNons.ext.StrLorup").when(strMatcher0).toString();
      doReturn(2, 2, 2, 2, 0).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '\u001D', strMatcher0);
      strSubstitutor0.setDisableSubstitutionInValues(true);
      String string0 = strSubstitutor0.replace("org.apache.coNons.ext.StrLorup", 2, 10);
      assertEquals("org.apache.coNons.ext.StrLorupache.c", string0);
      assertEquals('\u001D', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.replace((String) null, 6, 6);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("QPPeQ").when(strLookup0).toString();
      doReturn("QPPeQ").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("QPPeQ", "QPPeQ", "QPPeQ").when(strMatcher0).toString();
      doReturn(2, 2, 2).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '<', strMatcher0);
      strSubstitutor0.setDisableSubstitutionInValues(true);
      assertTrue(strSubstitutor0.isDisableSubstitutionInValues());
      
      String string0 = strSubstitutor0.replace("QPPeQ");
      assertEquals("QPPeQQ", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.replace((String) null);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      String string0 = strSubstitutor0.replace("");
      assertNotNull(string0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      boolean boolean0 = strSubstitutor0.isPreserveEscapes();
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariablePrefix('$');
      StrSubstitutor strSubstitutor2 = strSubstitutor1.setVariableSuffix('$');
      String string0 = strSubstitutor2.replace("$$$");
      assertEquals("$$", string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = StrSubstitutor.replaceSystemProperties((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      assertFalse(strSubstitutor0.isPreserveEscapes());
      
      strSubstitutor0.setPreserveEscapes(true);
      strSubstitutor0.setValueDelimiter("GET'>{{Wr");
      assertTrue(strSubstitutor0.isPreserveEscapes());
  }
}
