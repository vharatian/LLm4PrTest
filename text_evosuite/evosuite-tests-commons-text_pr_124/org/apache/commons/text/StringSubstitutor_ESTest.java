/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 21:18:46 GMT 2025
 */

package org.apache.commons.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import org.apache.commons.text.StringSubstitutor;
import org.apache.commons.text.TextStringBuilder;
import org.apache.commons.text.lookup.StringLookup;
import org.apache.commons.text.matcher.StringMatcher;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class StringSubstitutor_ESTest extends StringSubstitutor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setVariablePrefix('R');
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      
      char[] charArray0 = new char[8];
      charArray0[1] = 'R';
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setEscapeChar('R');
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('R', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('R', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('R', stringSubstitutor2.getEscapeChar());
      
      String string0 = stringSubstitutor0.replace(charArray0);
      assertArrayEquals(new char[] {'\u0000', 'R', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      assertNotNull(string0);
      assertEquals("\u0000R\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('R', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      String string0 = stringSubstitutor0.replace("org.assertj.core.groups.Tuple", 2, 1);
      assertNotNull(string0);
      assertEquals("g", string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      // Undeclared exception!
      try { 
        stringSubstitutor0.replace("org.assertj.core.extractor.ByNameSingleExtractor", 17, (-791));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_SUFFIX;
      assertNotNull(stringMatcher0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, '\'', stringMatcher0);
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('\'', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "", "z]5p:=kjxZ`]{", 'r', "org.apache.commons.text.lookup.FileStringLookup");
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('r', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(":-");
      assertNotNull(textStringBuilder0);
      assertNull(textStringBuilder0.getNullText());
      assertEquals(2, textStringBuilder0.size());
      assertEquals(2, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(34, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      
      boolean boolean0 = stringSubstitutor0.substitute(textStringBuilder0, (-2254), (-2254));
      assertFalse(boolean0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(2, textStringBuilder0.size());
      assertEquals(2, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(34, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((StringLookup) null);
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariableSuffixMatcher(stringSubstitutor0.DEFAULT_PREFIX);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "->", "->", '9');
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('9', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariableSuffixMatcher(stringSubstitutor1.DEFAULT_PREFIX);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('9', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('9', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "pp", "pp", '4', "pp");
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals('4', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals('4', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('4', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariableSuffixMatcher(stringSubstitutor0.DEFAULT_SUFFIX);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals('4', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('4', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals('4', stringSubstitutor2.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariableSuffixMatcher(stringSubstitutor0.DEFAULT_SUFFIX);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableSuffix("}");
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, String>) hashMap0, "Infinite loop in property interpolation of ", "Infinite loop in property interpolation of ");
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariableSuffix("Variable suffix matcher must not be null!");
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, String>) hashMap0, "m>]Waq]}r,:U=#", "g@f+;M", 'K', "j>Wt");
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('K', stringSubstitutor0.getEscapeChar());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('K', stringSubstitutor0.getEscapeChar());
      assertEquals('K', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableSuffix("j>Wt");
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('K', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('K', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableSuffix("}");
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, String>) hashMap0, "Infinite loop in property interpolation of ", "Infinite loop in property interpolation of ");
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableSuffix('$');
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, String>) hashMap0);
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariableSuffix('$');
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "pp", "pp", '4', "pp");
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('4', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('4', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('4', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariableSuffix('$');
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('4', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('4', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals('4', stringSubstitutor2.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariableSuffix('3');
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "i]]Fi62v|2i@j+YkF", "y", '@');
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('@', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertEquals('@', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('@', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      
      StringLookup stringLookup1 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariableResolver(stringLookup1);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertEquals('@', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('@', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('@', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, String>) hashMap0, "Variable suffix matcher must not be null!", "ogffB:jTWo", '7', "Variable suffix matcher must not be null!");
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('7', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('7', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('7', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableResolver(stringLookup0);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('7', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals('7', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "wvD^A]SWSPqp^t+{:", "null", '\'');
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('\'', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('\'', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('\'', stringSubstitutor1.getEscapeChar());
      
      StringLookup stringLookup1 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariableResolver(stringLookup1);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('\'', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('\'', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals('\'', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<String, Locale.FilteringMode> hashMap0 = new HashMap<String, Locale.FilteringMode>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Locale.FilteringMode>) hashMap0, "$6$", "$6$");
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableResolver(stringLookup0);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0);
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariablePrefixMatcher(stringSubstitutor0.DEFAULT_PREFIX);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, String>) hashMap0);
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariablePrefixMatcher(stringSubstitutor0.DEFAULT_PREFIX);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0);
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariablePrefixMatcher(stringSubstitutor0.DEFAULT_PREFIX);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<String, Locale.FilteringMode> hashMap0 = new HashMap<String, Locale.FilteringMode>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Locale.FilteringMode>) hashMap0, "$6$", "$6$");
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariablePrefixMatcher(stringSubstitutor0.DEFAULT_PREFIX);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariablePrefix("{=L0g(");
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_VALUE_DELIMITER;
      assertNotNull(stringMatcher0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, 'a', stringMatcher0);
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('a', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('a', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('a', stringSubstitutor1.getEscapeChar());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariablePrefix("${");
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('a', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals('a', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariablePrefix("${");
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<String, Locale.FilteringMode> hashMap0 = new HashMap<String, Locale.FilteringMode>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Locale.FilteringMode>) hashMap0, "$6$", "$6$");
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariablePrefix("}");
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariablePrefix('Q');
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, String>) hashMap0);
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariablePrefix('>');
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariablePrefix('$');
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setValueDelimiterMatcher(stringSubstitutor0.DEFAULT_PREFIX);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, String>) hashMap0);
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setValueDelimiterMatcher(stringSubstitutor1.DEFAULT_VALUE_DELIMITER);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setValueDelimiterMatcher(stringSubstitutor1.DEFAULT_VALUE_DELIMITER);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "", "", 'j');
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('j', stringSubstitutor0.getEscapeChar());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('j', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('j', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setValueDelimiterMatcher(stringSubstitutor0.DEFAULT_VALUE_DELIMITER);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('j', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('j', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((StringLookup) null);
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setValueDelimiter("${");
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, String>) hashMap0);
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setValueDelimiter("]Ugm-:C");
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setValueDelimiter("");
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_VALUE_DELIMITER;
      assertNotNull(stringMatcher0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, 'l');
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('l', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('l', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('l', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setValueDelimiter("${");
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('l', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('l', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('l', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "", "", 'U');
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('U', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('U', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertEquals('U', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setValueDelimiter('U');
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('U', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertEquals('U', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('U', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "wvD^A]SWSPqp^t+{:", "null", '\'');
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('\'', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('\'', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('\'', stringSubstitutor1.getEscapeChar());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setValueDelimiter(' ');
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('\'', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('\'', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('\'', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "", "", 'U');
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals('U', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals('U', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('U', stringSubstitutor1.getEscapeChar());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setValueDelimiter('U');
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals('U', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('U', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "", "", 'j');
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('j', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('j', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('j', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setValueDelimiter('$');
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('j', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('j', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setPreserveEscapes(true);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setPreserveEscapes(false);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<String, Locale.FilteringMode> hashMap0 = new HashMap<String, Locale.FilteringMode>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Locale.FilteringMode>) hashMap0, "$6$", "$6$");
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setPreserveEscapes(false);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0);
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setEscapeChar('b');
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('b', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertEquals('b', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertEquals('b', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, String>) hashMap0, "Variable suffix matcher must not be null!", "ogffB:jTWo", '7', "Variable suffix matcher must not be null!");
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('7', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('7', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('7', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setEscapeChar('7');
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('7', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('7', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setEscapeChar('M');
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('M', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('M', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('M', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setEscapeChar('\\');
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('\\', stringSubstitutor0.getEscapeChar());
      assertEquals('\\', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((StringLookup) null);
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setEnableUndefinedVariableException(true);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "pp", "pp", '4', "pp");
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('4', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('4', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('4', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('4', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('4', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setEnableUndefinedVariableException(false);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0);
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setEnableSubstitutionInVariables(true);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(false);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setDisableSubstitutionInValues(true);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, String>) hashMap0);
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setDisableSubstitutionInValues(true);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((String) null);
      assertNotNull(textStringBuilder0);
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      
      String string0 = stringSubstitutor0.resolveVariable("${", textStringBuilder0, 0, 0);
      assertNull(string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((-654));
      assertNotNull(textStringBuilder0);
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(32, textStringBuilder0.capacity());
      
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      doReturn("}").when(stringLookup0).toString();
      doReturn("org.assertj.core.groups.Tuple").when(stringLookup0).lookup(anyString());
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setVariableResolver(stringLookup0);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      
      String string0 = stringSubstitutor0.resolveVariable("C6#F/vrvA`QJYB|GP,+", textStringBuilder0, (-654), 2);
      assertNotNull(string0);
      assertEquals("org.assertj.core.groups.Tuple", string0);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(32, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(stringLookup0).toString();
      doReturn("").when(stringLookup0).lookup(anyString());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0);
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      String string0 = stringSubstitutor0.resolveVariable("dG~sON(\",+)U!d", (TextStringBuilder) null, (-2582), 475);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = StringSubstitutor.replaceSystemProperties((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(0);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      String string0 = StringSubstitutor.replaceSystemProperties(stringBuffer0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0);
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((-34));
      assertNotNull(textStringBuilder0);
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "$A$";
      stringArray0[1] = "${";
      TextStringBuilder textStringBuilder1 = textStringBuilder0.appendAll(stringArray0);
      assertEquals(5, stringArray0.length);
      assertNotNull(textStringBuilder1);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertSame(textStringBuilder1, textStringBuilder0);
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals(5, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(5, textStringBuilder0.size());
      assertEquals(5, textStringBuilder1.size());
      assertEquals(32, textStringBuilder1.capacity());
      assertFalse(textStringBuilder1.isEmpty());
      assertNull(textStringBuilder1.getNullText());
      assertEquals(5, textStringBuilder1.length());
      assertNull(textStringBuilder1.getNewLineText());
      
      boolean boolean0 = stringSubstitutor0.replaceIn(textStringBuilder0);
      assertTrue(boolean0);
      assertSame(textStringBuilder0, textStringBuilder1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals(32, textStringBuilder0.capacity());
      assertEquals(4, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(4, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, String>) hashMap0);
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      char[] charArray0 = new char[8];
      String string0 = stringSubstitutor0.replace(charArray0, 1, 3);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000", string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, String>) hashMap0, ".6.P=Z<Q5-#", "A}-`.vJgC}~&?r", 'U', "A}-`.vJgC}~&?r");
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('U', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      
      char[] charArray0 = new char[3];
      String string0 = stringSubstitutor0.replace(charArray0, 0, 0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('U', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("java.lang.Object@0000000003");
      assertNotNull(textStringBuilder0);
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(27, textStringBuilder0.length());
      assertEquals(27, textStringBuilder0.size());
      assertEquals(59, textStringBuilder0.capacity());
      
      String string0 = stringSubstitutor0.replace(textStringBuilder0, 3, 1);
      assertNotNull(string0);
      assertEquals("a", string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(27, textStringBuilder0.length());
      assertEquals(27, textStringBuilder0.size());
      assertEquals(59, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, String>) hashMap0);
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("}");
      assertNotNull(textStringBuilder0);
      assertEquals(1, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(1, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(33, textStringBuilder0.capacity());
      
      String string0 = stringSubstitutor0.replace(textStringBuilder0, 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals(1, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(1, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(33, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "", "org.apache.commons.text.StringSubstitutor");
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("=t2~i9Q%");
      assertNotNull(textStringBuilder0);
      assertEquals(9, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(9, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(41, textStringBuilder0.capacity());
      
      String string0 = stringSubstitutor0.replace(textStringBuilder0);
      assertNotNull(string0);
      assertEquals("=t2~i9Q%", string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals(9, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(9, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(41, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      
      StringBuilder stringBuilder0 = new StringBuilder("}");
      assertNotNull(stringBuilder0);
      assertEquals("}", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) stringSubstitutor0);
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      
      StringBuffer stringBuffer0 = new StringBuffer(stringBuilder0);
      assertNotNull(stringBuffer0);
      assertEquals(44, stringBuffer0.length());
      
      String string0 = stringSubstitutor0.replace(stringBuffer0, 9, 3);
      assertNotNull(string0);
      assertEquals("he.", string0);
      assertSame(stringBuilder0, stringBuilder1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals(44, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      String string0 = stringSubstitutor0.replace(stringBuffer0, 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      StringBuffer stringBuffer0 = new StringBuffer("${");
      assertNotNull(stringBuffer0);
      assertEquals("${", stringBuffer0.toString());
      assertEquals(2, stringBuffer0.length());
      
      String string0 = stringSubstitutor0.replace(stringBuffer0);
      assertNotNull(string0);
      assertEquals("${", string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals("${", stringBuffer0.toString());
      assertEquals(2, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, String>) hashMap0, "org.apache.commons.text.StringTokenizer", "");
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      String string0 = stringSubstitutor0.replace("");
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      String string0 = StringSubstitutor.replace((Object) null, properties0);
      assertNull(string0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(2988);
      assertNotNull(textStringBuilder0);
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(2988, textStringBuilder0.capacity());
      assertEquals(0, textStringBuilder0.size());
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      String string0 = StringSubstitutor.replace((Object) textStringBuilder0, properties0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(2988, textStringBuilder0.capacity());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<String, Locale.FilteringMode> hashMap0 = new HashMap<String, Locale.FilteringMode>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = StringSubstitutor.replace((Object) "EE", (Map<String, Locale.FilteringMode>) hashMap0, "EE", "EE");
      assertNotNull(string0);
      assertEquals("EE", string0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(39);
      assertNotNull(textStringBuilder0);
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(39, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      
      HashMap<String, Locale.FilteringMode> hashMap0 = new HashMap<String, Locale.FilteringMode>(39, 1721.7927F);
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = StringSubstitutor.replace((Object) textStringBuilder0, (Map<String, Locale.FilteringMode>) hashMap0, "!TCkx$q", "null");
      assertNotNull(string0);
      assertEquals("", string0);
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(39, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = StringSubstitutor.replace((Object) null, (Map<String, Object>) hashMap0);
      assertNull(string0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder('$');
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      HashMap<String, Locale.FilteringMode> hashMap0 = new HashMap<String, Locale.FilteringMode>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = StringSubstitutor.replace((Object) stringBuilder0, (Map<String, Locale.FilteringMode>) hashMap0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", stringBuilder0.toString());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      String string0 = stringSubstitutor0.replace((Object) stringSubstitutor0);
      assertNotNull(string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      
      String string0 = stringSubstitutor0.replace((CharSequence) ":-", 1, 1);
      assertNotNull(string0);
      assertEquals("-", string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      
      String string0 = stringSubstitutor0.replace((CharSequence) "org.apache.commons.text.matcher.AbstractStringMatcher$StringMatcher@0000000005", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      
      StringBuilder stringBuilder0 = new StringBuilder(2);
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      String string0 = stringSubstitutor0.replace((CharSequence) stringBuilder0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, String>) hashMap0, "Variable suffix matcher must not be null!", "ogffB:jTWo", '7', "Variable suffix matcher must not be null!");
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('7', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('7', stringSubstitutor0.getEscapeChar());
      assertEquals('7', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      
      boolean boolean0 = stringSubstitutor1.isPreserveEscapes();
      assertTrue(boolean0);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('7', stringSubstitutor0.getEscapeChar());
      assertEquals('7', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      
      boolean boolean0 = stringSubstitutor0.isEnableUndefinedVariableException();
      assertTrue(boolean0);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      
      boolean boolean0 = stringSubstitutor1.isEnableSubstitutionInVariables();
      assertTrue(boolean0);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      
      boolean boolean0 = stringSubstitutor1.isDisableSubstitutionInValues();
      assertTrue(boolean0);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setValueDelimiter("");
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      
      StringMatcher stringMatcher0 = stringSubstitutor1.getValueDelimiterMatcher();
      assertNull(stringMatcher0);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, String>) hashMap0, "", "", 'M');
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals('M', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      
      StringLookup stringLookup0 = stringSubstitutor0.getStringLookup();
      assertNotNull(stringLookup0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals('M', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEscapeChar('6');
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('6', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('6', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      
      char char0 = stringSubstitutor1.getEscapeChar();
      assertEquals('6', char0);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('6', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('6', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(97526364);
      assertNotNull(textStringBuilder0);
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(97526364, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      
      // Undeclared exception!
      stringSubstitutor0.substitute(textStringBuilder0, 2, 97526364);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      
      // Undeclared exception!
      try { 
        stringSubstitutor0.substitute((TextStringBuilder) null, '$', '$');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.StringSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("}");
      assertNotNull(textStringBuilder0);
      assertEquals(1, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(1, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(33, textStringBuilder0.capacity());
      
      // Undeclared exception!
      try { 
        stringSubstitutor0.substitute(textStringBuilder0, 25, 25);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(3373707);
      assertNotNull(textStringBuilder0);
      assertEquals(3373707, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      
      // Undeclared exception!
      stringSubstitutor0.replaceIn(textStringBuilder0, 434, 3373707);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        stringSubstitutor0.replaceIn(stringBuffer0, (int) '$', (int) '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      Properties properties0 = new Properties();
      Object object0 = new Object();
      properties0.put(object0, object0);
      // Undeclared exception!
      try { 
        StringSubstitutor.replace((Object) stringSubstitutor0, properties0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("java.util.Properties", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Object object0 = new Object();
      HashMap<String, Locale.FilteringMode> hashMap0 = new HashMap<String, Locale.FilteringMode>();
      // Undeclared exception!
      try { 
        StringSubstitutor.replace(object0, (Map<String, Locale.FilteringMode>) hashMap0, (String) null, "uaeb6a&wU<e-4+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = null;
      try {
        stringSubstitutor0 = new StringSubstitutor((StringLookup) null, (StringMatcher) null, (StringMatcher) null, '1', (StringMatcher) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix matcher must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = null;
      try {
        stringSubstitutor0 = new StringSubstitutor((StringLookup) null, (String) null, "}", '$');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StringSubstitutor stringSubstitutor0 = null;
      try {
        stringSubstitutor0 = new StringSubstitutor((Map<String, String>) hashMap0, (String) null, (String) null, 't', (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StringSubstitutor stringSubstitutor0 = null;
      try {
        stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, (String) null, (String) null, 'u');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      // Undeclared exception!
      try { 
        stringSubstitutor0.setVariableSuffix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable suffix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      stringSubstitutor0.setVariablePrefixMatcher(stringSubstitutor0.DEFAULT_VALUE_DELIMITER);
      StringBuilder stringBuilder0 = new StringBuilder(52);
      char[] charArray0 = new char[8];
      charArray0[3] = '$';
      stringBuilder0.append(charArray0, 3, 1);
      StringBuilder stringBuilder1 = stringBuilder0.append(":-");
      StringBuilder stringBuilder2 = stringBuilder1.append((Object) stringBuilder0);
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuilder2);
      assertEquals(":-:-", stringBuilder2.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      // Undeclared exception!
      try { 
        stringSubstitutor0.setVariablePrefixMatcher((StringMatcher) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix matcher must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      // Undeclared exception!
      try { 
        stringSubstitutor0.setVariablePrefix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      StringBuilder stringBuilder0 = new StringBuilder("${");
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) stringSubstitutor0.DEFAULT_SUFFIX);
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuilder1, 46, 12);
      assertFalse(boolean0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      StringBuilder stringBuilder0 = new StringBuilder("}");
      // Undeclared exception!
      try { 
        stringSubstitutor0.replaceIn(stringBuilder0, (int) '$', (int) '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      StringBuffer stringBuffer0 = new StringBuffer();
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuffer0, 0, 0);
      assertFalse(boolean0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      String string0 = stringSubstitutor0.replace((Object) "");
      assertNotNull(string0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      String string0 = stringSubstitutor0.replace((Object) null);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      // Undeclared exception!
      try { 
        stringSubstitutor0.replace((CharSequence) stringBuffer0, (-1059), (-1059));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = StringSubstitutor.replace((Object) "}", (Map<String, Object>) hashMap0);
      assertEquals("}", string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      stringSubstitutor0.isEnableSubstitutionInVariables();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "", "org.apache.commons.text.StringSubstitutor");
      stringSubstitutor0.getVariableSuffixMatcher();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      stringSubstitutor0.getStringLookup();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      stringSubstitutor0.getValueDelimiterMatcher();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      stringSubstitutor0.isDisableSubstitutionInValues();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0);
      StringLookup stringLookup1 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor1 = new StringSubstitutor(stringLookup1, stringSubstitutor0.DEFAULT_SUFFIX, stringSubstitutor0.DEFAULT_PREFIX, 'I');
      char char0 = stringSubstitutor1.getEscapeChar();
      assertEquals('I', char0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      char char0 = stringSubstitutor0.getEscapeChar();
      assertEquals('$', char0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      stringSubstitutor0.isEnableUndefinedVariableException();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "}", "}", '7');
      stringSubstitutor0.getVariablePrefixMatcher();
      assertEquals('7', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      StringBuilder stringBuilder0 = new StringBuilder("${");
      stringBuilder0.append("}");
      stringSubstitutor0.setEnableUndefinedVariableException(true);
      // Undeclared exception!
      try { 
        stringSubstitutor0.replaceIn(stringBuilder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot resolve variable '' (enableSubstitutionInVariables=false).
         //
         verifyException("org.apache.commons.text.StringSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      StringBuilder stringBuilder0 = new StringBuilder("${");
      stringSubstitutor0.setDisableSubstitutionInValues(true);
      stringBuilder0.append((Object) ":-");
      stringBuilder0.append("}");
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      StringBuilder stringBuilder0 = new StringBuilder("${");
      StringBuilder stringBuilder1 = stringBuilder0.append("}");
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(stringLookup0).toString();
      doReturn((String) null).when(stringLookup0).lookup(anyString());
      stringSubstitutor0.setVariableResolver(stringLookup0);
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuilder1);
      //  // Unstable assertion: assertEquals("Variable prefix matcher must not be null!", stringBuilder1.toString());
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      StringBuilder stringBuilder0 = new StringBuilder("${");
      stringBuilder0.append("${");
      StringBuilder stringBuilder1 = stringBuilder0.append("}");
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuilder1);
      assertEquals("${${}", stringBuilder0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      StringBuilder stringBuilder0 = new StringBuilder("${");
      StringBuilder stringBuilder1 = stringBuilder0.append("}");
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setVariablePrefix('$');
      stringSubstitutor1.setEnableSubstitutionInVariables(true);
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuilder1);
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setVariablePrefix('$');
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setValueDelimiter("");
      stringSubstitutor1.setVariableSuffixMatcher(stringSubstitutor0.DEFAULT_PREFIX);
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("$$${");
      // Undeclared exception!
      try { 
        stringSubstitutor2.substitute(textStringBuilder0, 0, 38);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_SUFFIX;
      StringBuilder stringBuilder0 = new StringBuilder("${");
      stringBuilder0.append((Object) stringMatcher0);
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      stringSubstitutor1.setVariablePrefix('$');
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuilder0);
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      StringBuilder stringBuilder0 = new StringBuilder("${");
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setVariablePrefix('{');
      stringSubstitutor1.setPreserveEscapes(true);
      boolean boolean0 = stringSubstitutor1.replaceIn(stringBuilder0);
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      StringBuilder stringBuilder0 = new StringBuilder("${");
      StringBuilder stringBuilder1 = stringBuilder0.append("}");
      stringBuilder1.append((Object) stringBuilder0);
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuilder1);
      assertEquals("${}${}", stringBuilder1.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      // Undeclared exception!
      try { 
        stringSubstitutor0.setVariableSuffixMatcher((StringMatcher) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable suffix matcher must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = null;
      try {
        stringSubstitutor0 = new StringSubstitutor((StringLookup) null, (StringMatcher) null, (StringMatcher) null, '.');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix matcher must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StringSubstitutor stringSubstitutor0 = null;
      try {
        stringSubstitutor0 = new StringSubstitutor((Map<String, String>) hashMap0, (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setValueDelimiter((String) null);
      assertEquals('$', stringSubstitutor1.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      boolean boolean0 = stringSubstitutor0.replaceIn((TextStringBuilder) null, 44, 44);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      try { 
        stringSubstitutor0.replaceIn(textStringBuilder0, 630, 630);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      boolean boolean0 = stringSubstitutor0.replaceIn((TextStringBuilder) null);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      boolean boolean0 = stringSubstitutor0.replaceIn((StringBuilder) null, (int) '$', (int) '$');
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      boolean boolean0 = stringSubstitutor0.replaceIn((StringBuilder) null);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      stringSubstitutor0.setVariablePrefix('{');
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "${");
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuffer0);
      assertEquals(1, stringBuffer0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      boolean boolean0 = stringSubstitutor0.replaceIn((StringBuffer) null, 27, 27);
      assertFalse(boolean0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      boolean boolean0 = stringSubstitutor0.replaceIn((StringBuffer) null);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      String string0 = stringSubstitutor0.replace((TextStringBuilder) null, (-2290), 1);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      // Undeclared exception!
      try { 
        stringSubstitutor0.replace(textStringBuilder0, (-725), (-725));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      stringSubstitutor0.replace((TextStringBuilder) null);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      String string0 = stringSubstitutor0.replace(textStringBuilder0);
      assertNotNull(string0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      String string0 = stringSubstitutor0.replace((StringBuffer) null, 82, 82);
      assertNull(string0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      StringBuilder stringBuilder0 = new StringBuilder("}");
      StringBuffer stringBuffer0 = new StringBuffer(stringBuilder0);
      // Undeclared exception!
      try { 
        stringSubstitutor0.replace(stringBuffer0, 9, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      stringSubstitutor0.replace((StringBuffer) null);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = stringSubstitutor0.replace(stringBuffer0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      stringSubstitutor0.replace((String) null, (int) '$', (int) '$');
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      String string0 = stringSubstitutor0.replace("", 0, 0);
      assertNotNull(string0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setVariablePrefix('{');
      stringSubstitutor1.replace("${org.apache.commons.text.matcher.AbstractStringMatcher$StringMatcher@2 [");
      assertEquals('$', stringSubstitutor1.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      stringSubstitutor0.replace((String) null);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      stringSubstitutor0.replace((CharSequence) null, (int) '$', (int) '$');
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      stringSubstitutor0.replace((CharSequence) null);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      String string0 = stringSubstitutor0.replace((CharSequence) ":-");
      assertNotNull(string0);
      assertEquals(":-", string0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      String string0 = stringSubstitutor0.replace((char[]) null, 0, 0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        stringSubstitutor0.replace(charArray0, (int) '$', (int) '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 36
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      char[] charArray0 = new char[0];
      stringSubstitutor0.replace(charArray0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      Properties properties0 = new Properties();
      Object object0 = new Object();
      properties0.put("t7UGl0\"8]sPHL", object0);
      StringSubstitutor.replace((Object) stringSubstitutor0, properties0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringSubstitutor.replace((Object) null, (Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      stringSubstitutor0.isPreserveEscapes();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      String string0 = StringSubstitutor.replaceSystemProperties(stringSubstitutor0);
      assertNotNull(string0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = StringSubstitutor.replace((Object) null, (Map<String, String>) hashMap0, "R9j", "R9j");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(false);
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = null;
      try {
        stringSubstitutor0 = new StringSubstitutor((StringLookup) null, "4kR6QrYH:rjFe", (String) null, '-', "4kR6QrYH:rjFe");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable suffix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      stringSubstitutor0.replace((char[]) null);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      stringSubstitutor1.setEnableSubstitutionInVariables(true);
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
  }
}
