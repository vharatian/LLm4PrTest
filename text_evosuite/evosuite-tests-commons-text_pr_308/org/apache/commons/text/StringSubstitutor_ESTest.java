/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 19:36:36 GMT 2025
 */

package org.apache.commons.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.time.chrono.MinguoEra;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import org.apache.commons.io.file.StandardDeleteOption;
import org.apache.commons.text.StringSubstitutor;
import org.apache.commons.text.TextStringBuilder;
import org.apache.commons.text.lookup.StringLookup;
import org.apache.commons.text.matcher.StringMatcher;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class StringSubstitutor_ESTest extends StringSubstitutor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append('g');
      assertEquals("g", stringBuilder0.toString());
      assertEquals("g", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer("${");
      assertEquals(2, stringBuffer0.length());
      assertEquals("${", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '$';
      StringBuilder stringBuilder2 = stringBuilder0.append(charArray0);
      assertEquals("g$", stringBuilder0.toString());
      assertEquals("g$", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      assertEquals(1, charArray0.length);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertArrayEquals(new char[] {'$'}, charArray0);
      
      StringBuilder stringBuilder3 = stringBuilder2.append(stringBuffer0);
      assertEquals("g$${", stringBuilder0.toString());
      assertEquals(2, stringBuffer0.length());
      assertEquals("${", stringBuffer0.toString());
      assertEquals("g$${", stringBuilder2.toString());
      assertEquals("g$${", stringBuilder3.toString());
      assertNotNull(stringBuilder3);
      assertEquals(1, charArray0.length);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertArrayEquals(new char[] {'$'}, charArray0);
      
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuilder0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals("g$${", stringBuilder0.toString());
      assertFalse(boolean0);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringBuilder stringBuilder0 = new StringBuilder("${");
      assertEquals("${", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer("}");
      assertEquals("}", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      char[] charArray0 = new char[1];
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      assertEquals("${\u0000", stringBuilder0.toString());
      assertEquals("${\u0000", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertEquals(1, charArray0.length);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      StringBuilder stringBuilder2 = stringBuilder1.append(stringBuffer0);
      assertEquals("${\u0000}", stringBuilder0.toString());
      assertEquals("}", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      assertEquals("${\u0000}", stringBuilder1.toString());
      assertEquals("${\u0000}", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      assertEquals(1, charArray0.length);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor1 = new StringSubstitutor(stringLookup0, stringSubstitutor0.DEFAULT_SUFFIX, stringSubstitutor0.DEFAULT_PREFIX, 'q', stringSubstitutor0.DEFAULT_VALUE_DELIMITER);
      assertFalse(stringSubstitutor1.equals((Object)stringSubstitutor0));
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('q', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      boolean boolean0 = stringSubstitutor1.replaceIn(stringBuilder2);
      assertFalse(stringSubstitutor0.equals((Object)stringSubstitutor1));
      assertFalse(stringSubstitutor1.equals((Object)stringSubstitutor0));
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertEquals("${\u0000}", stringBuilder0.toString());
      assertEquals("}", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      assertEquals("${\u0000}", stringBuilder1.toString());
      assertEquals("${\u0000}", stringBuilder2.toString());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('q', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      assertNotSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringBuilder stringBuilder0 = new StringBuilder("${");
      assertEquals("${", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer("}");
      assertEquals(1, stringBuffer0.length());
      assertEquals("}", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0);
      assertEquals("${}", stringBuilder0.toString());
      assertEquals(1, stringBuffer0.length());
      assertEquals("}", stringBuffer0.toString());
      assertEquals("${}", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor1 = new StringSubstitutor(stringLookup0, stringSubstitutor0.DEFAULT_SUFFIX, stringSubstitutor0.DEFAULT_PREFIX, 'q', stringSubstitutor0.DEFAULT_VALUE_DELIMITER);
      assertFalse(stringSubstitutor1.equals((Object)stringSubstitutor0));
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('q', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      boolean boolean0 = stringSubstitutor1.replaceIn(stringBuilder1);
      assertFalse(stringSubstitutor0.equals((Object)stringSubstitutor1));
      assertFalse(stringSubstitutor1.equals((Object)stringSubstitutor0));
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals("${}", stringBuilder0.toString());
      assertEquals(1, stringBuffer0.length());
      assertEquals("}", stringBuffer0.toString());
      assertEquals("${}", stringBuilder1.toString());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('q', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(boolean0);
      assertNotSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "Infinite loop in property interpolation of ", "Infinite loop in property interpolation of ", 'c');
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('c', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      String string0 = stringSubstitutor0.replace("Infinite loop in property interpolation of ", 28, 1);
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('c', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertNotNull(string0);
      assertEquals("t", string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "g<G*csVDD3vQTI=", "g<G*csVDD3vQTI=", '9', "g<G*csVDD3vQTI=");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((-2177));
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertNotNull(textStringBuilder0);
      
      boolean boolean0 = stringSubstitutor0.substitute(textStringBuilder0, (-391), (-3984));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(boolean0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableSuffixMatcher(stringSubstitutor1.DEFAULT_SUFFIX);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableSuffixMatcher(stringSubstitutor1.DEFAULT_VALUE_DELIMITER);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "", "", 'O');
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('O', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('O', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('O', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableSuffixMatcher(stringSubstitutor0.DEFAULT_SUFFIX);
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('O', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('O', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "No advice defined by ", "Infinite loop n property interpoltion of ", 'v');
      assertEquals('v', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertEquals('v', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('v', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableSuffixMatcher(stringSubstitutor1.DEFAULT_SUFFIX);
      assertEquals('v', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('v', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('v', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableSuffix("${");
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableSuffix("}");
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableSuffix("IRO7");
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "${", "${", 'X');
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('X', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('X', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('X', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableSuffix("}");
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('X', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('X', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableSuffix('#');
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableSuffix('r');
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_VALUE_DELIMITER;
      assertEquals(2, stringMatcher0.size());
      assertNotNull(stringMatcher0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, ' ', stringMatcher0);
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals(' ', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals(' ', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals(' ', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableSuffix(' ');
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals(' ', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals(' ', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "${", "${", 'X');
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('X', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('X', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('X', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariableSuffix('^');
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('X', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('X', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('X', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "g<G*csVDD3vQTI=", "g<G*csVDD3vQTI=", '9', "g<G*csVDD3vQTI=");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('9', stringSubstitutor1.getEscapeChar());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableResolver(stringLookup0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('9', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "Cb!VTefmEl2HP=", "Cb!VTefmEl2HP=", '\\', "Cb!VTefmEl2HP=");
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('\\', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('\\', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('\\', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringLookup stringLookup1 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableResolver(stringLookup1);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('\\', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('\\', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "g<G*csVDD3vQTI=", "g<G*csVDD3vQTI=", '9', "g<G*csVDD3vQTI=");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('9', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariableResolver(stringLookup0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('9', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('9', stringSubstitutor2.getEscapeChar());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableResolver(stringLookup0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "g<G*csVDD3vQTI=", "g<G*csVDD3vQTI=", '9', "g<G*csVDD3vQTI=");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertEquals('9', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariablePrefixMatcher(stringSubstitutor0.DEFAULT_VALUE_DELIMITER);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertEquals('9', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('9', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, String>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariablePrefixMatcher(stringSubstitutor1.DEFAULT_SUFFIX);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariablePrefixMatcher(stringSubstitutor0.DEFAULT_VALUE_DELIMITER);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariablePrefixMatcher(stringSubstitutor1.DEFAULT_VALUE_DELIMITER);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "", "", 'O');
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('O', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertEquals('O', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('O', stringSubstitutor1.getEscapeChar());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariablePrefix("");
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertEquals('O', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('O', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('O', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariablePrefix("}");
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "g<G*csVDD3vQTI=", "g<G*csVDD3vQTI=", '9', "g<G*csVDD3vQTI=");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('9', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariablePrefix(":-");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('9', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariablePrefix("}");
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariablePrefix('a');
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariablePrefix('i');
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "g<G*csVDD3vQTI=", "g<G*csVDD3vQTI=", '9', "g<G*csVDD3vQTI=");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('9', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariablePrefix('u');
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('9', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('9', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariablePrefix('R');
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "", "", 'D');
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('D', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('D', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('D', stringSubstitutor1.getEscapeChar());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setValueDelimiterMatcher(stringSubstitutor0.DEFAULT_PREFIX);
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('D', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('D', stringSubstitutor2.getEscapeChar());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setValueDelimiterMatcher(stringSubstitutor0.DEFAULT_VALUE_DELIMITER);
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setValueDelimiterMatcher(stringSubstitutor0.DEFAULT_SUFFIX);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setValueDelimiterMatcher(stringSubstitutor0.DEFAULT_VALUE_DELIMITER);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "", "", 'O');
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('O', stringSubstitutor0.getEscapeChar());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('O', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('O', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setValueDelimiter("");
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('O', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('O', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('O', stringSubstitutor2.getEscapeChar());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setValueDelimiter("}");
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "g<G*csVDD3vQTI=", "g<G*csVDD3vQTI=", '9', "g<G*csVDD3vQTI=");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('9', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setValueDelimiter("}");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('9', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_PREFIX;
      assertEquals(2, stringMatcher0.size());
      assertNotNull(stringMatcher0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, 'M', stringMatcher0);
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('M', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertEquals(2, stringMatcher0.size());
      assertEquals('M', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('M', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setValueDelimiter(":-");
      assertEquals(2, stringMatcher0.size());
      assertEquals('M', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('M', stringSubstitutor2.getEscapeChar());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setValueDelimiter('\"');
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0);
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setValueDelimiter('o');
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "g<G*csVDD3vQTI=", "g<G*csVDD3vQTI=", '9', "g<G*csVDD3vQTI=");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('9', stringSubstitutor1.getEscapeChar());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setValueDelimiter('9');
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('9', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('9', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_VALUE_DELIMITER;
      assertEquals(2, stringMatcher0.size());
      assertNotNull(stringMatcher0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, ' ', stringMatcher0);
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals(' ', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertEquals(2, stringMatcher0.size());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals(' ', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals(' ', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setPreserveEscapes(false);
      assertEquals(2, stringMatcher0.size());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals(' ', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals(' ', stringSubstitutor2.getEscapeChar());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_VALUE_DELIMITER;
      assertEquals(2, stringMatcher0.size());
      assertNotNull(stringMatcher0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, ' ', stringMatcher0);
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals(' ', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals(' ', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals(' ', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setPreserveEscapes(false);
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals(' ', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals(' ', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setPreserveEscapes(true);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "", "", 'O');
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('O', stringSubstitutor0.getEscapeChar());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('O', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertEquals('O', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setEscapeChar('2');
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('2', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertEquals('2', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setEscapeChar('$');
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "g<G*csVDD3vQTI=", "g<G*csVDD3vQTI=", '9', "g<G*csVDD3vQTI=");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('9', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setEscapeChar('d');
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('d', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('d', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "dN,``?4S", "dN,``?4S", 'q', "\u0000$$");
      assertEquals('q', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertEquals('q', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('q', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setEscapeChar('3');
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('3', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('3', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setEnableUndefinedVariableException(true);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_VALUE_DELIMITER;
      assertEquals(2, stringMatcher0.size());
      assertNotNull(stringMatcher0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, ' ', stringMatcher0);
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals(' ', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals(' ', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals(' ', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setEnableUndefinedVariableException(true);
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals(' ', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals(' ', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals(' ', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "dN,``?4S", "dN,``?4S", 'q', "\u0000$$");
      assertEquals('q', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertEquals('q', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('q', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setEnableUndefinedVariableException(false);
      assertEquals('q', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('q', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "g<G*csVDD3vQTI=", "g<G*csVDD3vQTI=", '9', "g<G*csVDD3vQTI=");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('9', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('9', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_PREFIX;
      assertEquals(2, stringMatcher0.size());
      assertNotNull(stringMatcher0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, 'M', stringMatcher0);
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('M', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('M', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('M', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setEnableSubstitutionInVariables(false);
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('M', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('M', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('M', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "g<G*csVDD3vQTI=", "g<G*csVDD3vQTI=", '9', "g<G*csVDD3vQTI=");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('9', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setDisableSubstitutionInValues(false);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('9', stringSubstitutor2.getEscapeChar());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_VALUE_DELIMITER;
      assertEquals(2, stringMatcher0.size());
      assertNotNull(stringMatcher0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, ' ', stringMatcher0);
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals(' ', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals(' ', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals(' ', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setDisableSubstitutionInValues(false);
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals(' ', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals(' ', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "ci\"RO]~&~U~", "ci\"RO]~&~U~", '(');
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('(', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(false);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('(', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('(', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(stringLookup0).toString();
      doReturn((String) null).when(stringLookup0).lookup(anyString());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "", "", 'O');
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('O', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((CharSequence) "${");
      assertEquals(34, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(2, textStringBuilder0.length());
      assertEquals(2, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNotNull(textStringBuilder0);
      
      String string0 = stringSubstitutor0.resolveVariable("}", textStringBuilder0, 0, 0);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('O', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals(34, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(2, textStringBuilder0.length());
      assertEquals(2, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      doReturn("$3K").when(stringLookup0).toString();
      doReturn("cP\"").when(stringLookup0).lookup(anyString());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "", "", 'O');
      assertEquals('O', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((CharSequence) "${");
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(34, textStringBuilder0.capacity());
      assertEquals(2, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(2, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isReallocated());
      assertNotNull(textStringBuilder0);
      
      String string0 = stringSubstitutor0.resolveVariable("}", textStringBuilder0, 0, 0);
      assertEquals('O', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(34, textStringBuilder0.capacity());
      assertEquals(2, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(2, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isReallocated());
      assertNotNull(string0);
      assertEquals("cP\"", string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      doReturn("").when(stringLookup0).toString();
      doReturn("").when(stringLookup0).lookup(anyString());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "", "", 'O');
      assertEquals('O', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((CharSequence) "}");
      assertEquals(1, textStringBuilder0.length());
      assertEquals(1, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(33, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNotNull(textStringBuilder0);
      
      String string0 = stringSubstitutor0.resolveVariable("", textStringBuilder0, 0, 1);
      assertEquals('O', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals(1, textStringBuilder0.length());
      assertEquals(1, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(33, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = StringSubstitutor.replaceSystemProperties((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = StringSubstitutor.replaceSystemProperties("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      char[] charArray0 = new char[5];
      String string0 = stringSubstitutor0.replace(charArray0, 2, 0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(string0);
      assertEquals(5, charArray0.length);
      assertEquals("", string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      char[] charArray0 = new char[0];
      String string0 = stringSubstitutor0.replace(charArray0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertNotNull(string0);
      assertEquals(0, charArray0.length);
      assertEquals("", string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<String, MinguoEra> hashMap0 = new HashMap<String, MinguoEra>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, MinguoEra>) hashMap0, " jA+lG(l-k", " jA+lG(l-k");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((CharSequence) ":-");
      assertEquals(2, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(34, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(2, textStringBuilder0.size());
      assertNotNull(textStringBuilder0);
      
      String string0 = stringSubstitutor0.replace(textStringBuilder0, 0, 1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals(2, textStringBuilder0.length());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(34, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(2, textStringBuilder0.size());
      assertNotNull(string0);
      assertEquals(":", string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "g<G*csVDD3vQTI=", "g<G*csVDD3vQTI=", '9', "g<G*csVDD3vQTI=");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((CharSequence) "}");
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(1, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(1, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(33, textStringBuilder0.capacity());
      assertNotNull(textStringBuilder0);
      
      String string0 = stringSubstitutor0.replace(textStringBuilder0, 0, 0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(1, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(1, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(33, textStringBuilder0.capacity());
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_VALUE_DELIMITER;
      assertEquals(2, stringMatcher0.size());
      assertNotNull(stringMatcher0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, ',');
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals(',', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((CharSequence) "2!(a7-&102>lxG");
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(46, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(14, textStringBuilder0.length());
      assertEquals(14, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isEmpty());
      assertNotNull(textStringBuilder0);
      
      String string0 = stringSubstitutor0.replace(textStringBuilder0);
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals(',', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(46, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(14, textStringBuilder0.length());
      assertEquals(14, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertFalse(textStringBuilder0.isEmpty());
      assertNotNull(string0);
      assertEquals("2!(a7-&102>lxG", string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<String, MinguoEra> hashMap0 = new HashMap<String, MinguoEra>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, MinguoEra>) hashMap0, "P@@~lb'E\"7G}#s_", "M#s+");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringBuffer stringBuffer0 = new StringBuffer("bNm&k$<_LLbm|e");
      assertEquals("bNm&k$<_LLbm|e", stringBuffer0.toString());
      assertEquals(14, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      String string0 = stringSubstitutor0.replace(stringBuffer0, 2, 2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertEquals("bNm&k$<_LLbm|e", stringBuffer0.toString());
      assertEquals(14, stringBuffer0.length());
      assertNotNull(string0);
      assertEquals("m&", string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringBuffer stringBuffer0 = new StringBuffer("6#x/_bW:3AtD9mO");
      assertEquals(15, stringBuffer0.length());
      assertEquals("6#x/_bW:3AtD9mO", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      String string0 = stringSubstitutor0.replace(stringBuffer0, 2, 0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals(15, stringBuffer0.length());
      assertEquals("6#x/_bW:3AtD9mO", stringBuffer0.toString());
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "${", "${", 'X');
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('X', stringSubstitutor0.getEscapeChar());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringBuffer stringBuffer0 = new StringBuffer(2105);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      String string0 = stringSubstitutor0.replace(stringBuffer0);
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('X', stringSubstitutor0.getEscapeChar());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      String string0 = StringSubstitutor.replace((Object) null, properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      String string0 = StringSubstitutor.replace((Object) "", properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = StringSubstitutor.replace(object0, (Map<String, Object>) hashMap0, "", "");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertNotNull(textStringBuilder0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string0 = StringSubstitutor.replace((Object) textStringBuilder0, (Map<String, Object>) hashMap0, "WP)PF|Ir$4Vbjaz", "${");
      assertFalse(textStringBuilder0.isNotEmpty());
      assertTrue(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string0 = StringSubstitutor.replace((Object) null, (Map<String, Object>) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string0 = StringSubstitutor.replace((Object) "", (Map<String, Object>) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_PREFIX;
      assertEquals(2, stringMatcher0.size());
      assertNotNull(stringMatcher0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, 'a');
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('a', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      String string0 = stringSubstitutor0.replace((Object) "");
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('a', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "Infinite loop in property interpolation of ", "Infinite loop in property interpolation of ", 'c');
      assertEquals('c', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      String string0 = stringSubstitutor0.replace((CharSequence) "Infinite loop in property interpolation of ", 1, 1);
      assertEquals('c', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(string0);
      assertEquals("n", string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "", "");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      String string0 = stringSubstitutor0.replace((CharSequence) "${", 0, 0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "o}mgRZTM=t&0unHp)+", "", 'o');
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('o', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      String string0 = stringSubstitutor0.replace((CharSequence) "");
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('o', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      boolean boolean0 = stringSubstitutor0.isPreserveEscapes();
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(boolean0);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, String>) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      boolean boolean0 = stringSubstitutor0.isEnableUndefinedVariableException();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(boolean0);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      boolean boolean0 = stringSubstitutor1.isEnableSubstitutionInVariables();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(boolean0);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "dN,``?4S", "dN,``?4S", 'q', "\u0000$$");
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('q', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('q', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('q', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      boolean boolean0 = stringSubstitutor1.isDisableSubstitutionInValues();
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('q', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('q', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(boolean0);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setValueDelimiter((String) null);
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertNotNull(stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringMatcher stringMatcher0 = stringSubstitutor0.getValueDelimiterMatcher();
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertNull(stringMatcher0);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "g<G*csVDD3vQTI=", "g<G*csVDD3vQTI=", '9', "g<G*csVDD3vQTI=");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      StringLookup stringLookup0 = stringSubstitutor0.getStringLookup();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertNotNull(stringLookup0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "ci\"RO]~&~U~", "ci\"RO]~&~U~", '(');
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('(', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      char char0 = stringSubstitutor0.getEscapeChar();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('(', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('(', char0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "g<G*csVDD3vQTI=", "g<G*csVDD3vQTI=", '9', "g<G*csVDD3vQTI=");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      char char0 = stringSubstitutor0.getEscapeChar();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('9', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('9', char0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((CharSequence) ":-");
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(34, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(2, textStringBuilder0.length());
      assertEquals(2, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNotNull(textStringBuilder0);
      
      // Undeclared exception!
      try { 
        stringSubstitutor0.substitute(textStringBuilder0, 2459, 2459);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2459
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      
      // Undeclared exception!
      try { 
        stringSubstitutor0.substitute((TextStringBuilder) null, (-2884), (-2884));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // builder
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setVariablePrefix("");
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((CharSequence) ":-");
      // Undeclared exception!
      stringSubstitutor1.replaceIn(textStringBuilder0, 0, 2147483645);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((CharSequence) ":-");
      // Undeclared exception!
      try { 
        stringSubstitutor0.replaceIn(textStringBuilder0, 36, 36);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 36
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      stringSubstitutor0.setEnableUndefinedVariableException(true);
      StringBuffer stringBuffer0 = new StringBuffer("${");
      StringBuffer stringBuffer1 = stringBuffer0.append("}");
      // Undeclared exception!
      try { 
        stringSubstitutor0.replaceIn(stringBuffer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot resolve variable '' (enableSubstitutionInVariables=false).
         //
         verifyException("org.apache.commons.text.StringSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        stringSubstitutor0.replace(charArray0, (int) '$', (int) '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 36
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      // Undeclared exception!
      try { 
        stringSubstitutor0.replace("${", (int) '$', (int) '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringSubstitutor.replace((Object) null, (Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      Properties properties0 = new Properties();
      properties0.put(stringSubstitutor0, stringSubstitutor0);
      // Undeclared exception!
      try { 
        StringSubstitutor.replace((Object) stringSubstitutor0, properties0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.text.StringSubstitutor cannot be cast to java.lang.String
         //
         verifyException("java.util.Properties", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        StringSubstitutor.replace((Object) stringSubstitutor0, (Map<String, Object>) hashMap0, "}", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable suffix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      CharBuffer charBuffer0 = CharBuffer.allocate(3373707);
      // Undeclared exception!
      stringSubstitutor0.replace((CharSequence) charBuffer0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = null;
      try {
        stringSubstitutor0 = new StringSubstitutor((StringLookup) null, (StringMatcher) null, (StringMatcher) null, 'U', (StringMatcher) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix matcher must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = null;
      try {
        stringSubstitutor0 = new StringSubstitutor((StringLookup) null, (StringMatcher) null, (StringMatcher) null, 'n');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix matcher must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = null;
      try {
        stringSubstitutor0 = new StringSubstitutor((StringLookup) null, (String) null, (String) null, '?', (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = null;
      try {
        stringSubstitutor0 = new StringSubstitutor((StringLookup) null, "${", (String) null, '$');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable suffix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = null;
      try {
        stringSubstitutor0 = new StringSubstitutor((StringSubstitutor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.StringSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StringSubstitutor stringSubstitutor0 = null;
      try {
        stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, (String) null, (String) null, '*');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StringSubstitutor stringSubstitutor0 = null;
      try {
        stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      // Undeclared exception!
      try { 
        stringSubstitutor0.setVariablePrefix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      StringBuilder stringBuilder0 = new StringBuilder("${");
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuilder0, 0, 0);
      assertFalse(boolean0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      StringBuilder stringBuilder0 = new StringBuilder("${");
      // Undeclared exception!
      try { 
        stringSubstitutor0.replaceIn(stringBuilder0, (int) '$', (int) '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0);
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuffer0, 0, 0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ":-");
      // Undeclared exception!
      try { 
        stringSubstitutor0.replaceIn(stringBuffer0, (int) '$', (int) '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      String string0 = stringSubstitutor0.replace((Object) stringSubstitutor0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      String string0 = stringSubstitutor0.replace((Object) null);
      assertNull(string0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      // Undeclared exception!
      try { 
        stringSubstitutor0.replace((CharSequence) "${", (-995), (-995));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      StringMatcher stringMatcher0 = stringSubstitutor0.getVariableSuffixMatcher();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertEquals(1, stringMatcher0.size());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Object object0 = new Object();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = StringSubstitutor.replace(object0, (Map<String, String>) hashMap0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<String, StandardDeleteOption> hashMap0 = new HashMap<String, StandardDeleteOption>();
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, StandardDeleteOption>) hashMap0, ":-", "}", '$', "${");
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      stringSubstitutor0.isEnableSubstitutionInVariables();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      stringSubstitutor0.isPreserveEscapes();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<String, MinguoEra> hashMap0 = new HashMap<String, MinguoEra>();
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, MinguoEra>) hashMap0, " jA+lG(l-k", " jA+lG(l-k");
      String string0 = stringSubstitutor0.replace("");
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      stringSubstitutor0.getStringLookup();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "", "*vO:Cn6^T)aXUS0d", 'G');
      stringSubstitutor0.isDisableSubstitutionInValues();
      assertEquals('G', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "", "", 'O');
      char char0 = stringSubstitutor0.getEscapeChar();
      assertEquals('O', char0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_SUFFIX;
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, '*');
      stringSubstitutor0.isEnableUndefinedVariableException();
      assertEquals('*', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "dN,``?4S", "dN,``?4S", 'q', "\u0000$$");
      StringMatcher stringMatcher0 = stringSubstitutor0.getVariablePrefixMatcher();
      assertEquals(8, stringMatcher0.size());
      assertEquals('q', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "ks_", "{-1844.22", '&');
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      doReturn(":-").when(stringLookup0).toString();
      doReturn("{-1296").when(stringLookup0).lookup(anyString());
      stringSubstitutor0.setVariableResolver(stringLookup0);
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(992);
      Object[] objectArray0 = new Object[9];
      objectArray0[3] = (Object) "ks_";
      objectArray0[7] = (Object) "{-1844.22";
      textStringBuilder0.appendAll(objectArray0);
      boolean boolean0 = stringSubstitutor0.replaceIn(textStringBuilder0);
      assertEquals(6, textStringBuilder0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      StringBuilder stringBuilder0 = new StringBuilder("${");
      StringBuffer stringBuffer0 = new StringBuffer("}");
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0);
      StringBuilder stringBuilder2 = stringBuilder1.append((Object) stringBuilder0);
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuilder2);
      assertEquals("${}${}", stringBuilder1.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      StringBuilder stringBuilder0 = new StringBuilder("${");
      stringBuilder0.insert(0, (CharSequence) "${");
      StringBuffer stringBuffer0 = new StringBuffer("}");
      stringBuilder0.append(stringBuffer0);
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuilder0);
      assertEquals("${${}", stringBuilder0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setVariablePrefix('$');
      StringBuilder stringBuilder0 = new StringBuilder("${");
      stringSubstitutor0.setEnableSubstitutionInVariables(true);
      StringBuffer stringBuffer0 = new StringBuffer("}");
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0);
      boolean boolean0 = stringSubstitutor1.replaceIn(stringBuilder1);
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setVariablePrefix('v');
      StringBuffer stringBuffer0 = new StringBuffer("Cannot resolve variable '%s' (enableSubstitutionInVariables=%s).");
      stringSubstitutor1.setEnableSubstitutionInVariables(true);
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuffer0);
      assertFalse(boolean0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      stringSubstitutor0.setEnableSubstitutionInVariables(true);
      stringSubstitutor0.replace("+${y");
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      stringSubstitutor0.setPreserveEscapes(true);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append('$');
      StringBuilder stringBuilder2 = stringBuilder1.append("${");
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuilder2);
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      // Undeclared exception!
      try { 
        stringSubstitutor0.setVariableSuffixMatcher((StringMatcher) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable suffix matcher must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      // Undeclared exception!
      try { 
        stringSubstitutor0.setVariableSuffix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable suffix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      // Undeclared exception!
      try { 
        stringSubstitutor0.setVariablePrefixMatcher((StringMatcher) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix matcher must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      stringSubstitutor0.setValueDelimiter((String) null);
      StringBuilder stringBuilder0 = new StringBuilder("${");
      StringBuffer stringBuffer0 = new StringBuffer("}");
      stringBuilder0.append(stringBuffer0);
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuilder0);
      assertEquals("${}", stringBuilder0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      boolean boolean0 = stringSubstitutor0.replaceIn((TextStringBuilder) null, 101, 101);
      assertFalse(boolean0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      boolean boolean0 = stringSubstitutor0.replaceIn((TextStringBuilder) null);
      assertFalse(boolean0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append('$');
      StringBuffer stringBuffer0 = new StringBuffer("${");
      StringBuilder stringBuilder2 = stringBuilder1.append(stringBuffer0);
      stringBuilder2.append((CharSequence) "}");
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuilder2);
      assertEquals("${}", stringBuilder2.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      boolean boolean0 = stringSubstitutor0.replaceIn((StringBuilder) null, (int) '$', (int) '$');
      assertFalse(boolean0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      boolean boolean0 = stringSubstitutor0.replaceIn((StringBuilder) null);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      StringBuffer stringBuffer0 = new StringBuffer("${");
      stringBuffer0.append(":-");
      stringBuffer0.append("}");
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_VALUE_DELIMITER;
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((StringLookup) null, stringMatcher0, stringMatcher0, '[');
      boolean boolean0 = stringSubstitutor0.replaceIn((StringBuffer) null, 5, (-1185));
      assertEquals('[', stringSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_SUFFIX;
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, '$', stringMatcher0);
      boolean boolean0 = stringSubstitutor0.replaceIn((StringBuffer) null);
      assertFalse(boolean0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      stringSubstitutor0.replace((TextStringBuilder) null, 1123, 1123);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      TextStringBuilder textStringBuilder0 = new TextStringBuilder('$');
      // Undeclared exception!
      try { 
        stringSubstitutor0.replace(textStringBuilder0, (int) '$', (int) '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      stringSubstitutor0.replace((TextStringBuilder) null);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      String string0 = stringSubstitutor0.replace(textStringBuilder0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      stringSubstitutor0.replace((StringBuffer) null, 13, 13);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "${");
      // Undeclared exception!
      try { 
        stringSubstitutor0.replace(stringBuffer0, (int) '$', (int) '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      stringSubstitutor0.replace((StringBuffer) null);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "Cb!VTefmEl2HP=", "Cb!VTefmEl2HP=", '\\', "Cb!VTefmEl2HP=");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ":-");
      stringSubstitutor0.replace(stringBuffer0);
      assertEquals('\\', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      stringSubstitutor0.replace((String) null, (int) '$', (int) '$');
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      String string0 = stringSubstitutor0.replace("D1du(!bmc5#n", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      stringSubstitutor0.replace((String) null);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      stringSubstitutor0.replace((CharSequence) null, (int) '$', (int) '$');
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      stringSubstitutor0.replace((CharSequence) null);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      String string0 = stringSubstitutor0.replace((CharSequence) "${");
      assertNotNull(string0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      String string0 = stringSubstitutor0.replace((char[]) null, (-1), (-3469));
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      char[] charArray0 = new char[5];
      String string0 = stringSubstitutor0.replace(charArray0, 1, 1);
      assertEquals("\u0000", string0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      stringSubstitutor0.replace((char[]) null);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0);
      char[] charArray0 = new char[6];
      String string0 = stringSubstitutor0.replace(charArray0);
      assertNotNull(string0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("");
      Properties properties0 = new Properties();
      properties0.put("", textStringBuilder0);
      String string0 = StringSubstitutor.replace((Object) "\u0000", properties0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setVariablePrefix('$');
      StringBuffer stringBuffer0 = new StringBuffer("}");
      StringBuilder stringBuilder0 = new StringBuilder(":-");
      StringBuilder stringBuilder1 = stringBuilder0.append('$');
      StringBuilder stringBuilder2 = stringBuilder1.append((CharSequence) stringBuilder0);
      stringBuilder2.append(stringBuffer0);
      boolean boolean0 = stringSubstitutor1.replaceIn(stringBuilder2);
      assertEquals(":-$", stringBuilder2.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StringSubstitutor stringSubstitutor0 = null;
      try {
        stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, (String) null, (String) null, ',', (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Object object0 = new Object();
      String string0 = StringSubstitutor.replaceSystemProperties(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = StringSubstitutor.replace((Object) null, (Map<String, String>) hashMap0, "2w0jq82", "${");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      stringSubstitutor0.setValueDelimiter('$');
      StringBuilder stringBuilder0 = new StringBuilder("${");
      stringBuilder0.append('$');
      StringBuffer stringBuffer0 = new StringBuffer("}");
      stringBuilder0.append(stringBuffer0);
      boolean boolean0 = stringSubstitutor1.replaceIn(stringBuilder0);
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      StringSubstitutor stringSubstitutor1 = new StringSubstitutor(stringSubstitutor0);
      assertEquals('$', stringSubstitutor1.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      stringSubstitutor0.setEnableUndefinedVariableException(true);
      StringBuilder stringBuilder0 = new StringBuilder("${");
      StringBuffer stringBuffer0 = new StringBuffer("}");
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0);
      // Undeclared exception!
      try { 
        stringSubstitutor0.replaceIn(stringBuilder1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot resolve variable '' (enableSubstitutionInVariables=false).
         //
         verifyException("org.apache.commons.text.StringSubstitutor", e);
      }
  }
}
