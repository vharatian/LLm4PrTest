/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 20:39:07 GMT 2025
 */

package org.apache.commons.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import org.apache.commons.text.StrLookup;
import org.apache.commons.text.StrMatcher;
import org.apache.commons.text.StrSubstitutor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class StrSubstitutor_ESTest extends StrSubstitutor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("java.util.Collections$UnmodifiableMap@0000000003", (String) null).when(strLookup0).toString();
      doReturn("java.util.Collections$UnmodifiableMap@0000000003", (String) null).when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("java.util.Collections$UnmodifiableMap@0000000003", "java.util.Collections$UnmodifiableMap@0000000003").when(strMatcher0).toString();
      doReturn(1, 1, 1, 1, 0).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'N');
      strSubstitutor0.setDisableSubstitutionInValues(true);
      strSubstitutor0.replace((Object) "java.util.Collections$UnmodifiableMap@0000000003");
      assertEquals('N', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(strLookup0).toString();
      doReturn((String) null).when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(strMatcher0).toString();
      doReturn(26, 481).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrMatcher strMatcher1 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("java.lang.Object@0000000004").when(strMatcher1).toString();
      doReturn((-757), 276).when(strMatcher1).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrMatcher strMatcher2 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("\"Rn/y&Mzq&8$-L").when(strMatcher2).toString();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher1, '@', strMatcher2);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("java.lang.Object@0000000004");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Cannot ca`hevoid result for ");
      String string0 = strSubstitutor0.replace(stringBuffer0, 0, 2);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertEquals("Ca", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, ",'bP*zAhC.;-W", "org.apache.commons.text.StrMatcher$CharMatcher", '9', ",'bP*zAhC.;-W");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ",'bP*zAhC.;-W");
      // Undeclared exception!
      try { 
        strSubstitutor0.replace(stringBuffer0, 2, 2908);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      String string0 = strSubstitutor0.replace("Variable suffix matcher must not be null!", 0, 34);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertEquals("Variable suffix matcher must not b", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      assertFalse(strSubstitutor0.isPreserveEscapes());
      
      strSubstitutor0.setPreserveEscapes(true);
      strSubstitutor0.setVariableSuffix("org.apache.commons.text.StrLookup");
      assertTrue(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0);
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      strSubstitutor0.setVariableSuffix("");
      assertTrue(strSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.setDisableSubstitutionInValues(true);
      strSubstitutor0.setVariableSuffix("(KVgc;R+#ZE|g~|%ey");
      assertTrue(strSubstitutor0.isDisableSubstitutionInValues());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher1 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher2 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher1, '@', strMatcher2);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      
      strSubstitutor0.setPreserveEscapes(true);
      strSubstitutor0.setVariableSuffix('U');
      assertTrue(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0);
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      strSubstitutor0.setVariableSuffix('$');
      assertTrue(strSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0);
      strSubstitutor0.setDisableSubstitutionInValues(true);
      strSubstitutor0.setVariableSuffix('$');
      assertTrue(strSubstitutor0.isDisableSubstitutionInValues());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "Z(+ZWN", "00", ';');
      assertFalse(strSubstitutor0.isPreserveEscapes());
      
      strSubstitutor0.setPreserveEscapes(true);
      strSubstitutor0.setVariablePrefix("00");
      assertTrue(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0);
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      strSubstitutor0.setVariablePrefix("");
      assertTrue(strSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0);
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      strSubstitutor0.setVariablePrefix('m');
      assertTrue(strSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "Z(+ZWN", "00", ';');
      assertFalse(strSubstitutor0.isPreserveEscapes());
      
      strSubstitutor0.setPreserveEscapes(true);
      strSubstitutor0.setValueDelimiter("Z(+ZWN");
      assertTrue(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0);
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      strSubstitutor0.setValueDelimiter("3E a ");
      assertTrue(strSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "Z(+ZWN", "00", ';');
      assertFalse(strSubstitutor0.isPreserveEscapes());
      
      strSubstitutor0.setPreserveEscapes(true);
      strSubstitutor0.setValueDelimiter(';');
      assertTrue(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0);
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      strSubstitutor0.setValueDelimiter('$');
      assertTrue(strSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0);
      strSubstitutor0.setDisableSubstitutionInValues(true);
      strSubstitutor0.setValueDelimiter('p');
      assertTrue(strSubstitutor0.isDisableSubstitutionInValues());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = StrSubstitutor.replaceSystemProperties((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("");
      String string0 = StrSubstitutor.replaceSystemProperties(stringBuffer0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "l-2354.0lec", "tiVSNC.L89y0<", '3');
      strSubstitutor0.setVariablePrefix('$');
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "l-2354.0lec");
      StringBuilder stringBuilder1 = stringBuilder0.append((-1L));
      char[] charArray0 = new char[3];
      charArray0[1] = '$';
      charArray0[2] = '3';
      stringBuilder1.insert(12, charArray0);
      StringBuilder stringBuilder2 = stringBuilder1.reverse();
      boolean boolean0 = strSubstitutor0.replaceIn(stringBuilder2);
      assertEquals("1$\u0000-cel0.4532-l", stringBuilder2.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Bound", "net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Bound", '?', "");
      char[] charArray0 = new char[9];
      String string0 = strSubstitutor0.replace(charArray0, 1, 5);
      assertEquals("\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      assertEquals('?', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "", "", ':');
      char[] charArray0 = new char[0];
      String string0 = strSubstitutor0.replace(charArray0, 0, 0);
      assertEquals(':', strSubstitutor0.getEscapeChar());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn(" JEhfFR=+^_&").when(strMatcher0).toString();
      doReturn(1).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrMatcher strMatcher1 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.text.StrSubstitutor").when(strMatcher1).toString();
      StrMatcher strMatcher2 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Bound").when(strMatcher2).toString();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher1, '@', strMatcher2);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Bound");
      String string0 = strSubstitutor0.replace(stringBuffer0, 1, 1);
      assertEquals("e", string0);
      assertEquals('@', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(map0, "h>vK`9VK+;5=:I", ".dYR+ivjvS4AI", 'V', ".dYR+ivjvS4AI");
      StringBuffer stringBuffer0 = new StringBuffer(479);
      String string0 = strSubstitutor0.replace(stringBuffer0, 0, 0);
      assertNotNull(string0);
      assertEquals('V', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, "net.bytebuddy.asm.Advice$NoExceptionHandler", "net.bytebuddy.asm.Advice$NoExceptionHandler", '_');
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "net.bytebuddy.asm.Advice$NoExceptionHandler");
      strSubstitutor0.replace(stringBuffer0);
      assertEquals('_', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "Cannot catch exception during constructor call for ", ")~$;@j.m", 'w', "k`Xu");
      String string0 = strSubstitutor0.replace("Cannot catch exception during constructor call for ", 0, 0);
      assertEquals("", string0);
      assertEquals('w', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "", "", 'T');
      strSubstitutor0.replace("");
      assertEquals('T', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Properties properties0 = new Properties();
      String string0 = StrSubstitutor.replace((Object) null, properties0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Properties properties0 = new Properties();
      String string0 = StrSubstitutor.replace((Object) stringBuffer0, properties0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = StrSubstitutor.replace((Object) null, (Map<String, Object>) hashMap0, " and ", " and ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = StrSubstitutor.replace((Object) "", (Map<String, Object>) hashMap0, "", "J>X|VhtgC+$$Tv");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Object object0 = new Object();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = StrSubstitutor.replace(object0, (Map<String, Object>) hashMap0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = StrSubstitutor.replace((Object) stringBuffer0, (Map<String, Object>) hashMap0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      String string0 = strSubstitutor0.replace((Object) stringBuffer0);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, "net.bytebuddy.asm.Advice$NoExceptionHandler", "net.bytebuddy.asm.Advice$NoExceptionHandler", '_');
      String string0 = strSubstitutor0.replace((CharSequence) "net.bytebuddy.asm.Advice$NoExceptionHandler", 9, 9);
      assertEquals('_', strSubstitutor0.getEscapeChar());
      assertNotNull(string0);
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(map0, "h>vK`9VK+;5=:I", ".dYR+ivjvS4AI", 'V', ".dYR+ivjvS4AI");
      String string0 = strSubstitutor0.replace((CharSequence) ".dYR+ivjvS4AI", 0, 0);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('V', strSubstitutor0.getEscapeChar());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "{{1h~", "'L,LPf't>");
      String string0 = "LQCG}){p\\u!r*<ls[F";
      String string1 = strSubstitutor0.replace((CharSequence) string0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertNotNull(string1);
      assertEquals("LQCG}){p\\u!r*<ls[F", string1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher1 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher2 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher1, '@', strMatcher2);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      
      strSubstitutor0.setPreserveEscapes(true);
      boolean boolean0 = strSubstitutor0.isPreserveEscapes();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0);
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      boolean boolean0 = strSubstitutor0.isEnableSubstitutionInVariables();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0);
      strSubstitutor0.setDisableSubstitutionInValues(true);
      boolean boolean0 = strSubstitutor0.isDisableSubstitutionInValues();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, ",'bP*zAhC.;-W", "org.apache.commons.text.StrMatcher$CharMatcher", '9', ",'bP*zAhC.;-W");
      char char0 = strSubstitutor0.getEscapeChar();
      assertEquals('9', char0);
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "", "", 'T');
      char char0 = strSubstitutor0.getEscapeChar();
      assertEquals('T', char0);
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        strSubstitutor0.replaceIn(stringBuilder0, (int) '$', (int) '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(strMatcher0).toString();
      doReturn(0, 0, 0, 0, 0).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '@', strMatcher0);
      StringBuilder stringBuilder0 = new StringBuilder("java.util.Collections$UnmodifiableMap@0000000003");
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "java.util.Collections$UnmodifiableMap@0000000003");
      stringBuilder0.append((Object) "java.util.Collections$UnmodifiableMap@0000000003");
      strSubstitutor0.replaceIn(stringBuilder1, 1, 116);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(strLookup0).toString();
      doReturn((String) null).when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("java.util.Collections$UnmodifiableMap@0000000003", "java.util.Collections$UnmodifiableMap@0000000003").when(strMatcher0).toString();
      doReturn(37, 37).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '>');
      StringBuilder stringBuilder0 = new StringBuilder("java.util.Collections$UnmodifiableMap@0000000003");
      strSubstitutor0.replaceIn(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("java.util.Collections$UnmodifiableMap@0000000003").when(strLookup0).toString();
      doReturn("java.util.Collections$UnmodifiableMap@0000000003").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("java.util.Collections$UnmodifiableMap@0000000003", "java.util.Collections$UnmodifiableMap@0000000003", "java.util.Collections$UnmodifiableMap@0000000003", "java.util.Collections$UnmodifiableMap@0000000003", "java.util.Collections$UnmodifiableMap@0000000003").when(strMatcher0).toString();
      doReturn(1, 1, 1, 1).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '0', strMatcher0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "java.util.Collections$UnmodifiableMap@0000000003");
      // Undeclared exception!
      try { 
        strSubstitutor0.replaceIn(stringBuffer0, 1, 21);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Infinite loop in property interpolation of ava.util.Collections$: 
         //
         verifyException("org.apache.commons.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher1 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("").when(strMatcher1).toString();
      doReturn(0, 0, 0, 0, 0).when(strMatcher1).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrMatcher strMatcher2 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("VD/O?I5&9k*[LyBwk1").when(strMatcher2).toString();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher1, '@', strMatcher2);
      strSubstitutor0.setVariablePrefix('@');
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "java.lang.Object@0000000004");
      strSubstitutor0.replaceIn(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("java.util.Collections$UnmodifiableMap@0000000003", "java.util.Collections$UnmodifiableMap@0000000003", "java.util.Collections$UnmodifiableMap@0000000003").when(strMatcher0).toString();
      doReturn(0, 0, 0, 0, 0).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '0', strMatcher0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "java.util.Collections$UnmodifiableMap@0000000003");
      strSubstitutor0.replaceIn(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(strLookup0).toString();
      doReturn((String) null).when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher1 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("").when(strMatcher1).toString();
      doReturn((-18)).when(strMatcher1).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrMatcher strMatcher2 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("VD/O?I5&9k*[LyBwk1").when(strMatcher2).toString();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher1, '@', strMatcher2);
      strSubstitutor0.setVariablePrefix('@');
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "java.lang.Object@0000000004");
      // Undeclared exception!
      try { 
        strSubstitutor0.replaceIn(stringBuffer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(strMatcher0).toString();
      doReturn((-147)).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrMatcher strMatcher1 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("java.lang.Object@0000000004").when(strMatcher1).toString();
      doReturn((-363)).when(strMatcher1).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrMatcher strMatcher2 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(strMatcher2).toString();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher1, '@', strMatcher2);
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        strSubstitutor0.replace(charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("java.util.Collections$UnmodifiableMap@0000000003", "java.util.Collections$UnmodifiableMap@0000000003", "java.util.Collections$UnmodifiableMap@0000000003").when(strMatcher0).toString();
      doReturn(0, 0, 0, 0, 0).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '3', strMatcher0);
      char[] charArray0 = new char[5];
      strSubstitutor0.replace(charArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("java.util.Collections$UnmodifiableMap@0000000003", "java.util.Collections$UnmodifiableMap@0000000003", "java.util.Collections$UnmodifiableMap@0000000003").when(strMatcher0).toString();
      doReturn((-20), (-20)).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '@', strMatcher0);
      StringBuffer stringBuffer0 = new StringBuffer("java.util.Collections$UnmodifiableMap@0000000003");
      // Undeclared exception!
      try { 
        strSubstitutor0.replace(stringBuffer0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("java.util.HashMap@0000000003").when(strLookup0).toString();
      doReturn("java.util.HashMap@0000000003").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("java.util.HashMap@0000000003", "java.util.HashMap@0000000003", "java.util.HashMap@0000000003", "java.util.HashMap@0000000003", "java.util.HashMap@0000000003").when(strMatcher0).toString();
      doReturn(26, 26, 26, 26).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '/', strMatcher0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "java.util.HashMap@0000000003");
      // Undeclared exception!
      try { 
        strSubstitutor0.replace(stringBuffer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Infinite loop in property interpolation of java.util.HashMap@0000000003: 
         //
         verifyException("org.apache.commons.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("java.util.Collections$UnmodifiableMap@0000000003").when(strLookup0).toString();
      doReturn("java.util.Collections$UnmodifiableMap@0000000003").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("java.util.Collections$UnmodifiableMap@0000000003", "java.util.Collections$UnmodifiableMap@0000000003", "java.util.Collections$UnmodifiableMap@0000000003", "java.util.Collections$UnmodifiableMap@0000000003", "java.util.Collections$UnmodifiableMap@0000000003").when(strMatcher0).toString();
      doReturn(1, 1, 1, 36).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '@', strMatcher0);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("java.util.Collections$UnmodifiableMap@0000000003", 1, 10);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Infinite loop in property interpolation of ava.util.C: 
         //
         verifyException("org.apache.commons.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("java.lang.Object@0000000004").when(strLookup0).toString();
      doReturn("java.lang.Object@0000000004").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(strMatcher0).toString();
      doReturn(26).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrMatcher strMatcher1 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("java.lang.Object@0000000004").when(strMatcher1).toString();
      doReturn((-757)).when(strMatcher1).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrMatcher strMatcher2 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("\"Rn/y&Mzq&8$-L").when(strMatcher2).toString();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher1, '@', strMatcher2);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("java.lang.Object@0000000004");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      Properties properties0 = new Properties();
      properties0.put(strSubstitutor0, strSubstitutor0);
      // Undeclared exception!
      try { 
        StrSubstitutor.replace((Object) strSubstitutor0, properties0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.text.StrSubstitutor cannot be cast to java.lang.String
         //
         verifyException("java.util.Properties", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("java.util.HashMap@0000000003", "java.util.HashMap@0000000003", "java.util.HashMap@0000000003").when(strMatcher0).toString();
      doReturn(0, 0, 0, 0, 0).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '@', strMatcher0);
      strSubstitutor0.replace((Object) hashMap0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("java.util.Collections$UnmodifiableMap@0000000003", "java.util.Collections$UnmodifiableMap@0000000003").when(strLookup0).toString();
      doReturn("java.util.Collections$UnmodifiableMap@0000000003", "java.util.Collections$UnmodifiableMap@0000000003").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("java.util.Collections$UnmodifiableMap@0000000003", "java.util.Collections$UnmodifiableMap@0000000003", "java.util.Collections$UnmodifiableMap@0000000003").when(strMatcher0).toString();
      doReturn(1, 1, 1, 1, (-2221)).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '*');
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariableSuffix('d');
      // Undeclared exception!
      try { 
        strSubstitutor1.replace((Object) " and ");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("java.util.Collections$UnmodifiableMap@0000000003").when(strLookup0).toString();
      doReturn("java.util.Collections$UnmodifiableMap@0000000003").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("java.util.Collections$UnmodifiableMap@0000000003", "java.util.Collections$UnmodifiableMap@0000000003", "java.util.Collections$UnmodifiableMap@0000000003", (String) null).when(strMatcher0).toString();
      doReturn(1, 1, 1, 1).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '*');
      // Undeclared exception!
      try { 
        strSubstitutor0.replace((CharSequence) "java.util.Collections$UnmodifiableMap@0000000003", 1, 46);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Infinite loop in property interpolation of ava.util.Collections$UnmodifiableMap@000000000: 
         //
         verifyException("org.apache.commons.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("java.util.HashMap@0000000003", "java.util.HashMap@0000000003", "java.util.HashMap@0000000003").when(strMatcher0).toString();
      doReturn(0, 0, 0, 0, 0).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'G', strMatcher0);
      strSubstitutor0.replace((CharSequence) "java.util.HashMap@0000000003");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("java.util.HashMap@0000000003").when(strLookup0).toString();
      doReturn("java.util.HashMap@0000000003").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("java.util.HashMap@0000000003", "java.util.HashMap@0000000003", "java.util.HashMap@0000000003", "java.util.HashMap@0000000003", "java.util.HashMap@0000000003").when(strMatcher0).toString();
      doReturn(21, 21, 21, 21).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'G', strMatcher0);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace((CharSequence) "java.util.HashMap@0000000003");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Infinite loop in property interpolation of java.util.HashMap@0000000003: 
         //
         verifyException("org.apache.commons.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = null;
      try {
        strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, (StrMatcher) null, '@', strMatcher0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable suffix matcher must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StrLookup<String> strLookup0 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = null;
      try {
        strSubstitutor0 = new StrSubstitutor(strLookup0, (String) null, (String) null, 'R', (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StrLookup<String> strLookup0 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = null;
      try {
        strSubstitutor0 = new StrSubstitutor(strLookup0, "DFe}9yHE(8+g", (String) null, 'r');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable suffix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = null;
      try {
        strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, (String) null, (String) null, 'H', (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = null;
      try {
        strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, (String) null, (String) null, 'Z');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = null;
      try {
        strSubstitutor0 = new StrSubstitutor((Map<String, Object>) null, (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setValueDelimiter("");
      assertFalse(strSubstitutor1.isPreserveEscapes());
      assertEquals('$', strSubstitutor1.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      // Undeclared exception!
      try { 
        strSubstitutor0.setVariablePrefix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("Cannot cache the value of an abstract method: ", "").when(strLookup0).toString();
      doReturn("", "java.lang.Object@0000000004").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("", (String) null, (String) null).when(strMatcher0).toString();
      doReturn(1, 1, 1).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrMatcher strMatcher1 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.text.StrSubstitutor", "", "TzWF3\u0000c]H>8JoCSV").when(strMatcher1).toString();
      doReturn(1, 1, 17).when(strMatcher1).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrMatcher strMatcher2 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Bound", "The filter must not be null", (String) null).when(strMatcher2).toString();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher1, '@', strMatcher2);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("java.lang.Object@0000000004");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Infinite loop in property interpolation of java.lang.Object@0000000004: 
         //
         verifyException("org.apache.commons.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "", "", '3');
      StringBuilder stringBuilder0 = new StringBuilder(0);
      boolean boolean0 = strSubstitutor0.replaceIn(stringBuilder0, 0, 0);
      assertEquals('3', strSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0);
      StringBuffer stringBuffer0 = new StringBuffer();
      boolean boolean0 = strSubstitutor0.replaceIn(stringBuffer0, 0, 0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        strSubstitutor0.replaceIn(stringBuffer0, (int) '$', (int) '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0);
      String string0 = strSubstitutor0.replace((Object) null);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        strSubstitutor0.replace((CharSequence) stringBuilder0, (int) '$', (int) '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "", "", ':');
      strSubstitutor0.isDisableSubstitutionInValues();
      assertEquals(':', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0);
      char char0 = strSubstitutor0.getEscapeChar();
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('$', char0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0);
      strSubstitutor0.isEnableSubstitutionInVariables();
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0);
      StrLookup<String> strLookup1 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      strSubstitutor0.setVariableResolver(strLookup1);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "", "", 'T');
      assertEquals('T', strSubstitutor0.getEscapeChar());
      
      strSubstitutor0.setEscapeChar('$');
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      // Undeclared exception!
      try { 
        strSubstitutor0.setVariableSuffix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable suffix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StrLookup<String> strLookup0 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = null;
      try {
        strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, (StrMatcher) null, '$');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable suffix matcher must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        StrSubstitutor.replace((Object) "o.*C;n#C_x(v_+t", (Map<String, String>) hashMap0, (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = null;
      try {
        strSubstitutor0 = new StrSubstitutor(strLookup0, (StrMatcher) null, strMatcher0, '$');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix matcher must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("java.util.Collections$UnmodifiableMap@0000000003").when(strLookup0).toString();
      doReturn("java.util.Collections$UnmodifiableMap@0000000003").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("java.util.Collections$UnmodifiableMap@0000000003", "java.util.Collections$UnmodifiableMap@0000000003", "java.util.Collections$UnmodifiableMap@0000000003", "java.util.Collections$UnmodifiableMap@0000000003", "java.util.Collections$UnmodifiableMap@0000000003").when(strMatcher0).toString();
      doReturn(1, 1, 1, 1).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '@', strMatcher0);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace((Object) map0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Infinite loop in property interpolation of java.util.Collections$UnmodifiableMap@0000000003: 
         //
         verifyException("org.apache.commons.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariableSuffix('r');
      strSubstitutor1.setDisableSubstitutionInValues(true);
      StrSubstitutor strSubstitutor2 = strSubstitutor1.setVariablePrefix('r');
      strSubstitutor2.setValueDelimiter("mm");
      strSubstitutor1.replace((Object) strSubstitutor0);
      assertTrue(strSubstitutor1.isDisableSubstitutionInValues());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.setValueDelimiter('.');
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariableSuffix('c');
      StrSubstitutor strSubstitutor2 = strSubstitutor1.setVariablePrefix('c');
      strSubstitutor2.replace((Object) strSubstitutor1);
      assertEquals('$', strSubstitutor2.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.setVariableSuffix('r');
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariablePrefix('a');
      StrSubstitutor strSubstitutor2 = strSubstitutor0.setValueDelimiter((String) null);
      strSubstitutor2.replace((Object) strSubstitutor1);
      assertFalse(strSubstitutor2.isPreserveEscapes());
      assertEquals('$', strSubstitutor2.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariablePrefix('s');
      strSubstitutor1.setEnableSubstitutionInVariables(true);
      strSubstitutor0.replace((Object) strSubstitutor0);
      assertTrue(strSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.setPreserveEscapes(true);
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariablePrefix('*');
      char[] charArray0 = new char[17];
      charArray0[0] = '$';
      charArray0[1] = '*';
      String string0 = strSubstitutor1.replace(charArray0);
      assertEquals('$', strSubstitutor1.getEscapeChar());
      assertEquals("$*\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.setVariablePrefix('r');
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) strSubstitutor0);
      StringBuilder stringBuilder2 = stringBuilder1.delete(6, 31);
      char[] charArray0 = new char[5];
      charArray0[3] = '$';
      charArray0[4] = 'r';
      StringBuilder stringBuilder3 = stringBuilder2.append(charArray0);
      boolean boolean0 = strSubstitutor0.replaceIn(stringBuilder3, 14, 6);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      boolean boolean0 = strSubstitutor0.replaceIn((StringBuilder) null, 1, 1);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      boolean boolean0 = strSubstitutor0.replaceIn((StringBuilder) null);
      assertFalse(boolean0);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(strLookup0).toString();
      doReturn((String) null).when(strLookup0).lookup(anyString());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "java.util.Collections$UnmodifiableMap@0000000003", "java.util.Collections$UnmodifiableMap@0000000003", '3');
      strSubstitutor0.setVariableSuffix('$');
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "java.util.Collections$UnmodifiableMap@0000000003");
      stringBuffer0.append('$');
      boolean boolean0 = strSubstitutor0.replaceIn(stringBuffer0);
      //  // Unstable assertion: assertEquals(48, stringBuffer0.length());
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      boolean boolean0 = strSubstitutor0.replaceIn((StringBuffer) null, (int) '$', (int) '$');
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertFalse(boolean0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      boolean boolean0 = strSubstitutor0.replaceIn((StringBuffer) null);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      String string0 = strSubstitutor0.replace((CharSequence) null, (-798), (-798));
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertNull(string0);
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.replace((CharSequence) null);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      String string0 = strSubstitutor0.replace((CharSequence) "");
      assertNotNull(string0);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      String string0 = strSubstitutor0.replace((StringBuffer) null, (-1596), (-1596));
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertNull(string0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.replace((StringBuffer) null);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = strSubstitutor0.replace(stringBuffer0);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertNotNull(string0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      String string0 = strSubstitutor0.replace((char[]) null, 18, 29);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strSubstitutor0.replace(charArray0, 1261, 1261);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 1261
         //
         verifyException("org.apache.commons.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.replace((char[]) null);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      char[] charArray0 = new char[0];
      strSubstitutor0.replace(charArray0);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn(" JEhF+^_&", "java.util.Collections$UnmodifiableMap@0000000003", " JEhF+^_&", "nSutjfWHd|(", "Fzp").when(strMatcher0).toString();
      doReturn(1, 1, 47, (-1482), 0).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("java.util.Collections$UnmodifiableMap@0000000003").when(strLookup0).toString();
      doReturn("S$6V\" 0*2M:=Nl3yu?]").when(strLookup0).lookup(anyString());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '@', strMatcher0);
      String string0 = strSubstitutor0.replace(" JEhF+^_&", 1, 8);
      assertEquals("S$6V\" 0*2M:=Nl3yu?]hF+^_&", string0);
      assertEquals('@', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.replace((String) null, 8, 8);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("00", (int) '$', (int) '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("java.util.Collections$UnmodifiableMap@0000000003").when(strLookup0).toString();
      doReturn("java.util.Collections$UnmodifiableMap@0000000003").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn(" JEhfFR=+^_&", "java.util.Collections$UnmodifiableMap@0000000003", "java.util.Collections$UnmodifiableMap@0000000003", " JEhfFR=+^_&", "java.util.Collections$UnmodifiableMap@0000000003").when(strMatcher0).toString();
      doReturn(97, 97, 97).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '@', strMatcher0);
      strSubstitutor0.replace("net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Bound");
      assertEquals('@', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.replace((String) null);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      Properties properties0 = new Properties();
      properties0.put("1_K?hP,FKj<q:", strSubstitutor0);
      String string0 = StrSubstitutor.replace((Object) strSubstitutor0, properties0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        StrSubstitutor.replace((Object) null, (Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      boolean boolean0 = strSubstitutor0.isPreserveEscapes();
      assertFalse(boolean0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = StrSubstitutor.replaceSystemProperties("${");
      assertEquals("${", string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.setDisableSubstitutionInValues(true);
      strSubstitutor0.setVariablePrefix("0");
      assertTrue(strSubstitutor0.isDisableSubstitutionInValues());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = StrSubstitutor.replace((Object) null, (Map<String, Object>) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = StrSubstitutor.replace((Object) "Cannot cachevod re@ult fr ", (Map<String, Object>) null, "Cannot cachevod re@ult fr ", "Cannot cachevod re@ult fr ");
      assertEquals("Cannot cachevod re@ult fr ", string0);
  }
}
