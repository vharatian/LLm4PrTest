/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 18:44:26 GMT 2025
 */

package org.apache.commons.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.time.ZoneId;
import java.time.format.TextStyle;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import org.apache.commons.text.StringSubstitutor;
import org.apache.commons.text.TextStringBuilder;
import org.apache.commons.text.lookup.StringLookup;
import org.apache.commons.text.matcher.StringMatcher;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class StringSubstitutor_ESTest extends StringSubstitutor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(map0, "org.apache.commons.io.filefilter.IOFileFilter", "org.apache.commons.io.filefilter.IOFileFilter", 'j', "org.apache.commons.io.filefilter.IOFileFilter");
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('j', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setVariablePrefix('-');
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('j', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('j', stringSubstitutor1.getEscapeChar());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      String string0 = stringSubstitutor0.replace((CharSequence) ":-");
      assertNotNull(string0);
      assertEquals(":-", string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('j', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertSame(stringSubstitutor0, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "${");
      assertNotNull(stringBuilder0);
      assertEquals("${", stringBuilder0.toString());
      
      char[] charArray0 = new char[9];
      charArray0[8] = '$';
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, charArray0);
      assertNotNull(stringBuilder1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '$'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000$${", stringBuilder0.toString());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000$${", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      StringBuilder stringBuilder2 = stringBuilder1.append((Object) stringBuilder0);
      assertNotNull(stringBuilder2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '$'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000$${\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000$${", stringBuilder0.toString());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000$${\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000$${", stringBuilder1.toString());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000$${\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000$${", stringBuilder2.toString());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      
      StringBuilder stringBuilder3 = stringBuilder2.append((CharSequence) "}");
      assertNotNull(stringBuilder3);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '$'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000$${\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000$${}", stringBuilder0.toString());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000$${\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000$${}", stringBuilder1.toString());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000$${\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000$${}", stringBuilder2.toString());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000$${\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000$${}", stringBuilder3.toString());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      
      String string0 = stringSubstitutor0.replace((CharSequence) stringBuilder1);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '$'}, charArray0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000${\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000${}", string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(9, charArray0.length);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000$${\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000$${}", stringBuilder0.toString());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000$${\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000$${}", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) null);
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      
      boolean boolean0 = stringSubstitutor0.replaceIn(textStringBuilder0, 0, (-1292));
      assertFalse(boolean0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      char[] charArray0 = new char[6];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      assertNotNull(textStringBuilder0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(6, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(6, textStringBuilder0.capacity());
      
      String string0 = stringSubstitutor0.replace(textStringBuilder0, 1, 0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(6, charArray0.length);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals(6, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(6, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(6, textStringBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "Variable prefix matcher must not be null!", "Variable prefix matcher must not be null!");
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.size());
      
      // Undeclared exception!
      try { 
        stringSubstitutor0.replace(textStringBuilder0, (-2114), 2478);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setVariablePrefix("Delegate must be non null.");
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(16);
      assertNotNull(textStringBuilder0);
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(16, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      
      boolean boolean0 = stringSubstitutor0.substitute(textStringBuilder0, 16, 16);
      assertFalse(boolean0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(16, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertSame(stringSubstitutor0, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_SUFFIX;
      assertNotNull(stringMatcher0);
      assertEquals(1, stringMatcher0.size());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, '5');
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(1, stringMatcher0.size());
      assertEquals('5', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(1, stringMatcher0.size());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertEquals('5', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('5', stringSubstitutor1.getEscapeChar());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableSuffixMatcher(stringMatcher0);
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(1, stringMatcher0.size());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertEquals('5', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('5', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariableSuffixMatcher(stringSubstitutor0.DEFAULT_VALUE_DELIMITER);
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<String, TextStyle> hashMap0 = new HashMap<String, TextStyle>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, TextStyle>) hashMap0, "Variable prefix matcher must not be null!", "J).w$DSW");
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableSuffixMatcher(stringSubstitutor0.DEFAULT_SUFFIX);
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableSuffixMatcher(stringSubstitutor1.DEFAULT_SUFFIX);
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0);
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableSuffix("true");
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0);
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableSuffix("true");
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_PREFIX;
      assertNotNull(stringMatcher0);
      assertEquals(2, stringMatcher0.size());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, 'a', stringMatcher0);
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('a', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('a', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('a', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariableSuffix("${");
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('a', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('a', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('a', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_VALUE_DELIMITER;
      assertNotNull(stringMatcher0);
      assertEquals(2, stringMatcher0.size());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, 'x', stringMatcher0);
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(2, stringMatcher0.size());
      assertEquals('x', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(2, stringMatcher0.size());
      assertEquals('x', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('x', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableSuffix("-142");
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(2, stringMatcher0.size());
      assertEquals('x', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('x', stringSubstitutor2.getEscapeChar());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableSuffix('$');
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "4&I}*|iL6yDs^H8O?`", "4&I}*|iL6yDs^H8O?`", 'P');
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('P', stringSubstitutor0.getEscapeChar());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('P', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('P', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableSuffix('P');
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('P', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals('P', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_PREFIX;
      assertNotNull(stringMatcher0);
      assertEquals(2, stringMatcher0.size());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, 'w');
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('w', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('w', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('w', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableSuffix('Z');
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('w', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('w', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableSuffix(']');
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_SUFFIX;
      assertNotNull(stringMatcher0);
      assertEquals(1, stringMatcher0.size());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, '|');
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(1, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('|', stringSubstitutor0.getEscapeChar());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(1, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertEquals('|', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertEquals('|', stringSubstitutor1.getEscapeChar());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringLookup stringLookup1 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableResolver(stringLookup1);
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(1, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertEquals('|', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('|', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<String, HashMap<String, String>> hashMap0 = new HashMap<String, HashMap<String, String>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, HashMap<String, String>>) hashMap0, "", ",oNW)oW(evziyv6d{C&", 'Z');
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('Z', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('Z', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('Z', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariableResolver(stringLookup0);
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('Z', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('Z', stringSubstitutor2.getEscapeChar());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_PREFIX;
      assertNotNull(stringMatcher0);
      assertEquals(2, stringMatcher0.size());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, 'w');
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('w', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('w', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('w', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringLookup stringLookup1 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariableResolver(stringLookup1);
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('w', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('w', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('w', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_PREFIX;
      assertNotNull(stringMatcher0);
      assertEquals(2, stringMatcher0.size());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, 'w');
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('w', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(2, stringMatcher0.size());
      assertEquals('w', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('w', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringLookup stringLookup1 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariableResolver(stringLookup1);
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(2, stringMatcher0.size());
      assertEquals('w', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('w', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('w', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0);
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariablePrefixMatcher(stringSubstitutor1.DEFAULT_VALUE_DELIMITER);
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariablePrefixMatcher(stringSubstitutor0.DEFAULT_VALUE_DELIMITER);
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_PREFIX;
      assertNotNull(stringMatcher0);
      assertEquals(2, stringMatcher0.size());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, 'a', stringMatcher0);
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(2, stringMatcher0.size());
      assertEquals('a', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(2, stringMatcher0.size());
      assertEquals('a', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('a', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariablePrefixMatcher(stringSubstitutor0.DEFAULT_VALUE_DELIMITER);
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(2, stringMatcher0.size());
      assertEquals('a', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('a', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('a', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_VALUE_DELIMITER;
      assertNotNull(stringMatcher0);
      assertEquals(2, stringMatcher0.size());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, 'x', stringMatcher0);
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(2, stringMatcher0.size());
      assertEquals('x', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(2, stringMatcher0.size());
      assertEquals('x', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('x', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariablePrefixMatcher(stringSubstitutor0.DEFAULT_PREFIX);
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(2, stringMatcher0.size());
      assertEquals('x', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('x', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('x', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "4&I}*|iL6yDs^H8O?`", "4&I}*|iL6yDs^H8O?`", 'P');
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('P', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('P', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('P', stringSubstitutor1.getEscapeChar());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setVariablePrefix("xI");
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('P', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('P', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals('P', stringSubstitutor2.getEscapeChar());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariablePrefix("3636");
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariablePrefix("36");
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0);
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariablePrefix('-');
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "4&I}*|iL6yDs^H8O?`", "4&I}*|iL6yDs^H8O?`", 'P');
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('P', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('P', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('P', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariablePrefix('c');
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('P', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('P', stringSubstitutor2.getEscapeChar());
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_PREFIX;
      assertNotNull(stringMatcher0);
      assertEquals(2, stringMatcher0.size());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, 'w');
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('w', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('w', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('w', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariablePrefix('9');
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('w', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('w', stringSubstitutor2.getEscapeChar());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setVariablePrefix(')');
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setValueDelimiterMatcher(stringSubstitutor1.DEFAULT_SUFFIX);
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) null, "", "", 'C');
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('C', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('C', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('C', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setValueDelimiterMatcher(stringSubstitutor0.DEFAULT_VALUE_DELIMITER);
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('C', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals('C', stringSubstitutor2.getEscapeChar());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setValueDelimiterMatcher(stringSubstitutor0.DEFAULT_VALUE_DELIMITER);
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setValueDelimiterMatcher(stringSubstitutor1.DEFAULT_VALUE_DELIMITER);
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashMap<String, TextStyle> hashMap0 = new HashMap<String, TextStyle>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, TextStyle>) hashMap0);
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setValueDelimiter("${");
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<String, HashMap<String, String>> hashMap0 = new HashMap<String, HashMap<String, String>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, HashMap<String, String>>) hashMap0, "", ",oNW)oW(evziyv6d{C&", 'Z');
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('Z', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals('Z', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('Z', stringSubstitutor1.getEscapeChar());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setValueDelimiter(" from static ");
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals('Z', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('Z', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('Z', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setValueDelimiter("#]el UgaW(Q^S8I>@");
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setValueDelimiter('}');
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setValueDelimiter('C');
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, String>) hashMap0);
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setValueDelimiter('5');
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, String>) hashMap0, "}", "9$G 6ux)");
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setValueDelimiter('W');
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "U]}LRn+", "U]}LRn+", '/');
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('/', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(false);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('/', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('/', stringSubstitutor1.getEscapeChar());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setPreserveEscapes(true);
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "", ">_-'tD(!R[Bj,", '6', "<:r)");
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('6', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('6', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('6', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setPreserveEscapes(true);
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('6', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('6', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setEscapeChar('$');
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<String, HashMap<String, String>> hashMap0 = new HashMap<String, HashMap<String, String>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, HashMap<String, String>>) hashMap0, "", ",oNW)oW(evziyv6d{C&", 'Z');
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('Z', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('Z', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('Z', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setEscapeChar('$');
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setEscapeChar('$');
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_PREFIX;
      assertNotNull(stringMatcher0);
      assertEquals(2, stringMatcher0.size());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, 'w');
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('w', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('w', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('w', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setEscapeChar('');
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(2, stringMatcher0.size());
      assertEquals('', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('', stringSubstitutor2.getEscapeChar());
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "org.apache.commons.text.lookup.LocalHostStringLookup", "org.apache.commons.text.lookup.LocalHostStringLookup", '!');
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('!', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('!', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('!', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('!', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('!', stringSubstitutor2.getEscapeChar());
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "gx8:sz\n 7q~m.x", "gx8:sz\n 7q~m.x", '5', "gx8:sz\n 7q~m.x");
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('5', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('5', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('5', stringSubstitutor1.getEscapeChar());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setEnableUndefinedVariableException(false);
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('5', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertEquals('5', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_SUFFIX;
      assertNotNull(stringMatcher0);
      assertEquals(1, stringMatcher0.size());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, '5');
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(1, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('5', stringSubstitutor0.getEscapeChar());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(1, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('5', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('5', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setEnableUndefinedVariableException(false);
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(1, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('5', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('5', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('5', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setEnableSubstitutionInVariables(true);
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "org.apache.commons.text.lookup.LocalHostStringLookup", "org.apache.commons.text.lookup.LocalHostStringLookup", '!');
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('!', stringSubstitutor0.getEscapeChar());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(false);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('!', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('!', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_PREFIX;
      assertNotNull(stringMatcher0);
      assertEquals(2, stringMatcher0.size());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, 'w');
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('w', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(2, stringMatcher0.size());
      assertEquals('w', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('w', stringSubstitutor1.getEscapeChar());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(2, stringMatcher0.size());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('w', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('w', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_SUFFIX;
      assertNotNull(stringMatcher0);
      assertEquals(1, stringMatcher0.size());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, '5');
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(1, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('5', stringSubstitutor0.getEscapeChar());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(1, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('5', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('5', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor1.setDisableSubstitutionInValues(true);
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(1, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('5', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertEquals('5', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('5', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isPreserveEscapes());
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      assertSame(stringSubstitutor1, stringSubstitutor2);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_VALUE_DELIMITER;
      assertNotNull(stringMatcher0);
      assertEquals(2, stringMatcher0.size());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, 'x', stringMatcher0);
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('x', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('x', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('x', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(2, stringMatcher0.size());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('x', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor2.isEnableUndefinedVariableException());
      assertEquals('x', stringSubstitutor2.getEscapeChar());
      assertTrue(stringSubstitutor2.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
      assertSame(stringSubstitutor2, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      StringSubstitutor stringSubstitutor2 = stringSubstitutor0.setDisableSubstitutionInValues(false);
      assertNotNull(stringSubstitutor2);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isPreserveEscapes());
      assertFalse(stringSubstitutor2.isEnableUndefinedVariableException());
      assertTrue(stringSubstitutor2.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor2.getEscapeChar());
      assertFalse(stringSubstitutor2.isDisableSubstitutionInValues());
      assertSame(stringSubstitutor0, stringSubstitutor2);
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor1);
      assertSame(stringSubstitutor2, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) null);
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.size());
      
      String string0 = stringSubstitutor0.resolveVariable("${", textStringBuilder0, 115, 3912);
      assertNull(string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals(32, textStringBuilder0.capacity());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      doReturn("S2&pEFJF").when(stringLookup0).toString();
      doReturn("${").when(stringLookup0).lookup(anyString());
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setVariableResolver(stringLookup0);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("${");
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(34, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(2, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(2, textStringBuilder0.size());
      
      String string0 = stringSubstitutor0.resolveVariable("}", textStringBuilder0, 0, 100);
      assertNotNull(string0);
      assertEquals("${", string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(textStringBuilder0.isEmpty());
      assertEquals(34, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(2, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(2, textStringBuilder0.size());
      assertSame(stringSubstitutor0, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      doReturn("pu&L($6bP;FOP^!5nH`").when(stringLookup0).toString();
      doReturn("").when(stringLookup0).lookup(anyString());
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setVariableResolver(stringLookup0);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder("${");
      assertNotNull(textStringBuilder0);
      assertEquals(34, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(2, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(2, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      
      String string0 = stringSubstitutor0.resolveVariable("}", textStringBuilder0, 0, 100);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals(34, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isEmpty());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertEquals(2, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNullText());
      assertEquals(2, textStringBuilder0.size());
      assertNull(textStringBuilder0.getNewLineText());
      assertSame(stringSubstitutor0, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
      
      String string0 = StringSubstitutor.replaceSystemProperties(textStringBuilder0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(32, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertNull(textStringBuilder0.getNewLineText());
      assertEquals(0, textStringBuilder0.length());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      
      char[] charArray0 = new char[4];
      String string0 = stringSubstitutor0.replace(charArray0, 1, 1);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("\u0000", string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(4, charArray0.length);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) null);
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      
      char[] charArray0 = new char[9];
      String string0 = stringSubstitutor0.replace(charArray0, 8, 0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(9, charArray0.length);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      
      char[] charArray0 = new char[6];
      String string0 = stringSubstitutor0.replace(charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals(6, charArray0.length);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder();
      assertNotNull(textStringBuilder0);
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
      
      String string0 = stringSubstitutor0.replace(textStringBuilder0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertEquals(32, textStringBuilder0.capacity());
      assertNull(textStringBuilder0.getNewLineText());
      assertTrue(textStringBuilder0.isEmpty());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(0, textStringBuilder0.length());
      assertEquals(0, textStringBuilder0.size());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertNull(textStringBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "${");
      assertNotNull(stringBuffer0);
      assertEquals("${", stringBuffer0.toString());
      assertEquals(2, stringBuffer0.length());
      
      String string0 = stringSubstitutor0.replace(stringBuffer0, 0, 1);
      assertNotNull(string0);
      assertEquals("$", string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertEquals("${", stringBuffer0.toString());
      assertEquals(2, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) null);
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "${");
      assertNotNull(stringBuffer0);
      assertEquals("${", stringBuffer0.toString());
      assertEquals(2, stringBuffer0.length());
      
      String string0 = stringSubstitutor0.replace(stringBuffer0, 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals("${", stringBuffer0.toString());
      assertEquals(2, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "}");
      assertNotNull(stringBuffer0);
      assertEquals("}", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      
      String string0 = stringSubstitutor0.replace(stringBuffer0);
      assertNotNull(string0);
      assertEquals("}", string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals("}", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "']3y)SC=E_itJ'I", "']3y)SC=E_itJ'I");
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      
      String string0 = stringSubstitutor0.replace("qf3?xrx},FjL}.7", 0, 8);
      assertNotNull(string0);
      assertEquals("qf3?xrx}", string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "Variable prefix matcher must not be null!", "Variable prefix matcher must not be null!");
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      String string0 = stringSubstitutor0.replace("");
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      String string0 = StringSubstitutor.replace((Object) null, properties0);
      assertNull(string0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      String string0 = StringSubstitutor.replace((Object) "", properties0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = StringSubstitutor.replace((Object) null, (Map<String, Object>) hashMap0, "org.apache.commons.io.filefilter.PathVisitorFileFilter", "");
      assertNull(string0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<String, HashMap<Object, String>> hashMap0 = new HashMap<String, HashMap<Object, String>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = StringSubstitutor.replace((Object) "", (Map<String, HashMap<Object, String>>) hashMap0, "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      String string0 = StringSubstitutor.replace((Object) null, map0);
      assertNull(string0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = StringSubstitutor.replace((Object) "", (Map<String, HashMap<TextStyle, Object>>) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) null);
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      String string0 = stringSubstitutor0.replace((Object) "");
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      
      CharBuffer charBuffer0 = CharBuffer.allocate(8192);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8192, charBuffer0.remaining());
      assertEquals(8192, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(8192, charBuffer0.capacity());
      assertEquals(8192, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      
      String string0 = stringSubstitutor0.replace((CharSequence) charBuffer0, 36, 36);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8192, charBuffer0.remaining());
      assertEquals(8192, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(8192, charBuffer0.capacity());
      assertEquals(8192, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      
      StringBuffer stringBuffer0 = new StringBuffer(0);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      String string0 = stringSubstitutor0.replace((CharSequence) stringBuffer0, 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "Cannot assign a %s to a %s", "Cannot assign a %s to a %s", '#', "Cannot assign a %s to a %s");
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('#', stringSubstitutor0.getEscapeChar());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('#', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals('#', stringSubstitutor1.getEscapeChar());
      assertTrue(stringSubstitutor1.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      boolean boolean0 = stringSubstitutor0.isPreserveEscapes();
      assertTrue(boolean0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('#', stringSubstitutor0.getEscapeChar());
      assertSame(stringSubstitutor0, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<String, TextStyle> hashMap0 = new HashMap<String, TextStyle>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, TextStyle>) hashMap0, ".Qw4.`}Wp^A ", "Variable suffix matcher must not be null!", ' ', "]");
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals(' ', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableUndefinedVariableException(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals(' ', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertTrue(stringSubstitutor1.isEnableUndefinedVariableException());
      assertEquals(' ', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      boolean boolean0 = stringSubstitutor0.isEnableUndefinedVariableException();
      assertTrue(boolean0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals(' ', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertSame(stringSubstitutor0, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<String, TextStyle> hashMap0 = new HashMap<String, TextStyle>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, TextStyle>) hashMap0, "Variable prefix matcher must not be null!", "J).w$DSW");
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setEnableSubstitutionInVariables(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      boolean boolean0 = stringSubstitutor1.isEnableSubstitutionInVariables();
      assertTrue(boolean0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isDisableSubstitutionInValues());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      assertNotNull(stringSubstitutor1);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor1.getEscapeChar());
      assertFalse(stringSubstitutor1.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor1.isEnableSubstitutionInVariables());
      assertTrue(stringSubstitutor1.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor1.isPreserveEscapes());
      assertSame(stringSubstitutor0, stringSubstitutor1);
      assertSame(stringSubstitutor1, stringSubstitutor0);
      
      boolean boolean0 = stringSubstitutor0.isDisableSubstitutionInValues();
      assertTrue(boolean0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertSame(stringSubstitutor0, stringSubstitutor1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "}", "", 'f', "");
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals('f', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      
      StringMatcher stringMatcher0 = stringSubstitutor0.getValueDelimiterMatcher();
      assertNull(stringMatcher0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals('f', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      
      StringLookup stringLookup0 = stringSubstitutor0.getStringLookup();
      assertNull(stringLookup0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      
      char char0 = stringSubstitutor0.getEscapeChar();
      assertEquals('$', char0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((StringLookup) null, "}", "${", '8');
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('8', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      
      char char0 = stringSubstitutor0.getEscapeChar();
      assertEquals('8', char0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('8', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder('$');
      assertNotNull(textStringBuilder0);
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      assertTrue(textStringBuilder0.isEmpty());
      assertEquals(0, textStringBuilder0.length());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(36, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isNotEmpty());
      assertEquals(0, textStringBuilder0.size());
      
      // Undeclared exception!
      try { 
        stringSubstitutor0.substitute(textStringBuilder0, '$', '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 36
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      // Undeclared exception!
      try { 
        stringSubstitutor0.substitute((TextStringBuilder) null, '$', '$');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // builder
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      
      TextStringBuilder textStringBuilder0 = new TextStringBuilder((CharSequence) ":-");
      assertNotNull(textStringBuilder0);
      assertEquals(34, textStringBuilder0.capacity());
      assertFalse(textStringBuilder0.isReallocated());
      assertEquals(2, textStringBuilder0.length());
      assertEquals(2, textStringBuilder0.size());
      assertTrue(textStringBuilder0.isNotEmpty());
      assertFalse(textStringBuilder0.isEmpty());
      assertNull(textStringBuilder0.getNewLineText());
      assertNull(textStringBuilder0.getNullText());
      
      // Undeclared exception!
      try { 
        stringSubstitutor0.replaceIn(textStringBuilder0, 914, 914);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 914
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      
      StringBuffer stringBuffer0 = new StringBuffer(":-");
      assertNotNull(stringBuffer0);
      assertEquals(2, stringBuffer0.length());
      assertEquals(":-", stringBuffer0.toString());
      
      // Undeclared exception!
      try { 
        stringSubstitutor0.replaceIn(stringBuffer0, (int) '$', (int) '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      assertNotNull(stringSubstitutor0);
      assertEquals('$', StringSubstitutor.DEFAULT_ESCAPE);
      assertFalse(stringSubstitutor0.isEnableUndefinedVariableException());
      assertFalse(stringSubstitutor0.isPreserveEscapes());
      assertFalse(stringSubstitutor0.isEnableSubstitutionInVariables());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(stringSubstitutor0.isDisableSubstitutionInValues());
      
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        stringSubstitutor0.replace(charArray0, (int) '$', (int) '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 36
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      // Undeclared exception!
      try { 
        stringSubstitutor0.replace("}", (int) '$', (int) '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        StringSubstitutor.replace((Object) stringSubstitutor0, (Map<String, Object>) hashMap0, (String) null, "}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      StringBuffer stringBuffer0 = new StringBuffer("${");
      stringBuffer0.append((Object) stringBuffer0);
      // Undeclared exception!
      try { 
        stringSubstitutor0.replace((CharSequence) stringBuffer0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = null;
      try {
        stringSubstitutor0 = new StringSubstitutor((StringLookup) null, (StringMatcher) null, (StringMatcher) null, 'R');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix matcher must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = null;
      try {
        stringSubstitutor0 = new StringSubstitutor((StringLookup) null, "${", (String) null, '$', "${");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable suffix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = null;
      try {
        stringSubstitutor0 = new StringSubstitutor((StringLookup) null, (String) null, "false", 'g');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = null;
      try {
        stringSubstitutor0 = new StringSubstitutor((StringSubstitutor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.StringSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StringSubstitutor stringSubstitutor0 = null;
      try {
        stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, (String) null, (String) null, 'M');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StringSubstitutor stringSubstitutor0 = null;
      try {
        stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      // Undeclared exception!
      try { 
        stringSubstitutor0.setVariablePrefixMatcher((StringMatcher) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix matcher must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      // Undeclared exception!
      try { 
        stringSubstitutor0.setVariablePrefix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append((-1442.3619F));
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuilder1, 2, 2);
      assertFalse(boolean0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        stringSubstitutor0.replaceIn(stringBuilder0, (int) '$', (int) '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) null);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "${");
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuffer0, 0, 0);
      assertFalse(boolean0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      stringSubstitutor0.replace((Object) ":-");
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      StringBuilder stringBuilder0 = new StringBuilder("${");
      // Undeclared exception!
      try { 
        stringSubstitutor0.replace((CharSequence) stringBuilder0, (-1152), (-1152));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      StringMatcher stringMatcher0 = stringSubstitutor0.getVariableSuffixMatcher();
      assertEquals(1, stringMatcher0.size());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      StringSubstitutor.replace((Object) stringSubstitutor0, map0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      stringSubstitutor0.isEnableSubstitutionInVariables();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      stringSubstitutor0.isPreserveEscapes();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, Object>) hashMap0, "Variable prefix matcher must not be null!", "Variable prefix matcher must not be null!");
      String string0 = stringSubstitutor0.replace((Object) null);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(stringLookup0).toString();
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0);
      stringSubstitutor0.getStringLookup();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, String>) hashMap0, "", "", '#', "");
      stringSubstitutor0.isDisableSubstitutionInValues();
      assertEquals('#', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0);
      stringSubstitutor0.setEnableUndefinedVariableException(true);
      stringSubstitutor0.setPreserveEscapes(true);
      assertTrue(stringSubstitutor0.isEnableUndefinedVariableException());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "/{atX#XP", "/{atX#XP", 'P');
      char char0 = stringSubstitutor0.getEscapeChar();
      assertEquals('P', char0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<String, TextStyle> hashMap0 = new HashMap<String, TextStyle>();
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor((Map<String, TextStyle>) hashMap0, ".Qw4.`}Wp^A ", "Variable suffix matcher must not be null!", ' ', "]");
      stringSubstitutor0.isEnableUndefinedVariableException();
      assertEquals(' ', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      StringMatcher stringMatcher0 = stringSubstitutor0.getVariablePrefixMatcher();
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertEquals(2, stringMatcher0.size());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      StringBuffer stringBuffer0 = new StringBuffer("${");
      stringSubstitutor0.setEnableUndefinedVariableException(true);
      stringBuffer0.append((CharSequence) "}");
      // Undeclared exception!
      try { 
        stringSubstitutor0.replaceIn(stringBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot resolve variable '' (enableSubstitutionInVariables=false).
         //
         verifyException("org.apache.commons.text.StringSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      StringBuffer stringBuffer0 = new StringBuffer("${");
      stringSubstitutor0.setDisableSubstitutionInValues(true);
      StringBuffer stringBuffer1 = stringBuffer0.append((CharSequence) ":-");
      StringBuffer stringBuffer2 = stringBuffer1.append((CharSequence) "}");
      stringSubstitutor0.replace((CharSequence) stringBuffer2);
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      StringBuffer stringBuffer0 = new StringBuffer("${");
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      doReturn("yyL").when(stringLookup0).toString();
      doReturn("yyL").when(stringLookup0).lookup(anyString());
      stringSubstitutor0.setVariableResolver(stringLookup0);
      StringBuffer stringBuffer1 = stringBuffer0.append((CharSequence) "}");
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuffer1);
      assertEquals(3, stringBuffer0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      StringBuffer stringBuffer0 = new StringBuffer("${");
      StringBuffer stringBuffer1 = stringBuffer0.append((int) '$');
      stringBuffer0.append((CharSequence) "}");
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuffer1);
      assertEquals(5, stringBuffer1.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "${");
      StringBuffer stringBuffer1 = stringBuffer0.append((CharSequence) "${");
      stringBuffer1.append((CharSequence) "}");
      String string0 = stringSubstitutor0.replace((CharSequence) stringBuffer0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertEquals("${${}", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      stringSubstitutor0.setEnableSubstitutionInVariables(true);
      StringBuffer stringBuffer0 = new StringBuffer("${");
      StringBuffer stringBuffer1 = stringBuffer0.append((CharSequence) ":-");
      StringBuffer stringBuffer2 = stringBuffer1.append((CharSequence) "}");
      String string0 = stringSubstitutor0.replace((CharSequence) stringBuffer2);
      assertEquals("", string0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      StringBuffer stringBuffer0 = new StringBuffer("${");
      stringSubstitutor0.setValueDelimiter("");
      stringBuffer0.append((CharSequence) "}");
      String string0 = stringSubstitutor0.replace((CharSequence) stringBuffer0);
      assertEquals("${}", string0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "${");
      stringSubstitutor0.setEnableSubstitutionInVariables(true);
      StringBuffer stringBuffer1 = stringBuffer0.append((CharSequence) "${");
      stringBuffer1.append((CharSequence) "}");
      stringSubstitutor0.replace((CharSequence) stringBuffer0);
      assertTrue(stringSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      stringSubstitutor0.setPreserveEscapes(true);
      stringSubstitutor0.replace((CharSequence) "$7y$${");
      assertTrue(stringSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      StringBuffer stringBuffer0 = new StringBuffer("${");
      StringBuffer stringBuffer1 = stringBuffer0.append((CharSequence) "}");
      StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) stringBuffer1);
      String string0 = stringSubstitutor0.replace((CharSequence) stringBuffer2);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertEquals("${}${}", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      // Undeclared exception!
      try { 
        stringSubstitutor0.setVariableSuffixMatcher((StringMatcher) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable suffix matcher must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      // Undeclared exception!
      try { 
        stringSubstitutor0.setVariableSuffix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable suffix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = null;
      try {
        stringSubstitutor0 = new StringSubstitutor((StringLookup) null, (StringMatcher) null, (StringMatcher) null, 'b', (StringMatcher) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix matcher must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setValueDelimiter((String) null);
      assertEquals('$', stringSubstitutor1.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "Cannot assign a %s to a %s", "Cannot assign a %s to a %s", '#', "Cannot assign a %s to a %s");
      boolean boolean0 = stringSubstitutor0.replaceIn((TextStringBuilder) null, 36, 36);
      assertEquals('#', stringSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      boolean boolean0 = stringSubstitutor0.replaceIn((TextStringBuilder) null);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "26", "26", ',', "26");
      char[] charArray0 = new char[7];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      boolean boolean0 = stringSubstitutor0.replaceIn(textStringBuilder0);
      assertEquals(',', stringSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      StringBuffer stringBuffer0 = new StringBuffer("${");
      stringBuffer0.append((CharSequence) "}");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) stringBuffer0);
      StringBuilder stringBuilder2 = stringBuilder1.insert(0, '$');
      boolean boolean0 = stringSubstitutor0.replaceIn(stringBuilder2);
      assertEquals("${}", stringBuilder2.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      boolean boolean0 = stringSubstitutor0.replaceIn((StringBuilder) null, 36, 36);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      boolean boolean0 = stringSubstitutor0.replaceIn((StringBuilder) null);
      assertFalse(boolean0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      boolean boolean0 = stringSubstitutor0.replaceIn((StringBuffer) null, (int) '$', (int) '$');
      assertFalse(boolean0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      boolean boolean0 = stringSubstitutor0.replaceIn((StringBuffer) null);
      assertFalse(boolean0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      stringSubstitutor0.replace((TextStringBuilder) null, 256, 256);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      stringSubstitutor0.replace((TextStringBuilder) null);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_PREFIX;
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, 'a', stringMatcher0);
      TextStringBuilder textStringBuilder0 = new TextStringBuilder(")}Hc<P$Yp'SLof#.JF,");
      String string0 = stringSubstitutor0.replace(textStringBuilder0);
      assertEquals('a', stringSubstitutor0.getEscapeChar());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      stringSubstitutor0.replace((StringBuffer) null, 1232, 1232);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      StringBuffer stringBuffer0 = new StringBuffer("}");
      // Undeclared exception!
      try { 
        stringSubstitutor0.replace(stringBuffer0, (int) '$', (int) '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      stringSubstitutor0.replace((StringBuffer) null);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = stringSubstitutor0.replace(stringBuffer0);
      assertNotNull(string0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      String string0 = stringSubstitutor0.replace(":-", 0, 0);
      assertEquals("", string0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      stringSubstitutor0.replace((String) null, 0, 0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      stringSubstitutor0.replace((String) null);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      stringSubstitutor0.replace("$7p$${");
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = StringSubstitutor.replaceSystemProperties((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      stringSubstitutor0.replace((CharSequence) null, 745, 745);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      stringSubstitutor0.replace((CharSequence) null);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "gx8:sz\n 7q~m.x", "gx8:sz\n 7q~m.x", '5', "gx8:sz\n 7q~m.x");
      stringSubstitutor0.replace((char[]) null, 361, 33);
      assertEquals('5', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = StringSubstitutor.createInterpolator();
      stringSubstitutor0.replace((char[]) null);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      char[] charArray0 = new char[0];
      String string0 = stringSubstitutor0.replace(charArray0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringSubstitutor.replace((Object) null, (Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      HashMap<String, TextStyle> hashMap0 = new HashMap<String, TextStyle>();
      StringSubstitutor stringSubstitutor0 = null;
      try {
        stringSubstitutor0 = new StringSubstitutor((Map<String, TextStyle>) hashMap0, (String) null, (String) null, 'H', (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = StringSubstitutor.replaceSystemProperties("uCb^LCpWB/Tl");
      assertEquals("uCb^LCpWB/Tl", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = StringSubstitutor.replace((Object) "gx8:sz\n 7q~m.x", (Map<String, String>) hashMap0, "+", "uCb^LCpWB/Tl");
      assertEquals("gx8:sz\n 7q~m.x", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      Properties properties0 = new Properties();
      StringSubstitutor.replace((Object) stringSubstitutor0, properties0);
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setDisableSubstitutionInValues(true);
      stringSubstitutor1.setValueDelimiter(":-");
      assertTrue(stringSubstitutor0.isDisableSubstitutionInValues());
      assertEquals('$', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      StringSubstitutor stringSubstitutor1 = new StringSubstitutor(stringSubstitutor0);
      assertEquals('$', stringSubstitutor1.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher0 = StringSubstitutor.DEFAULT_SUFFIX;
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, stringMatcher0, stringMatcher0, '|');
      StringSubstitutor stringSubstitutor1 = stringSubstitutor0.setPreserveEscapes(true);
      stringSubstitutor1.setVariablePrefix("java.lang.Object@0000000004");
      assertTrue(stringSubstitutor0.isPreserveEscapes());
      assertEquals('|', stringSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor(stringLookup0, "26", "26", ',', "26");
      char[] charArray0 = new char[7];
      TextStringBuilder textStringBuilder0 = TextStringBuilder.wrap(charArray0);
      String string0 = stringSubstitutor0.replace(textStringBuilder0, 1, 1);
      assertEquals(',', stringSubstitutor0.getEscapeChar());
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      StringSubstitutor stringSubstitutor0 = new StringSubstitutor();
      stringSubstitutor0.setEnableUndefinedVariableException(true);
      StringBuffer stringBuffer0 = new StringBuffer("${");
      StringBuffer stringBuffer1 = stringBuffer0.append((CharSequence) "}");
      // Undeclared exception!
      try { 
        stringSubstitutor0.replace((CharSequence) stringBuffer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot resolve variable '' (enableSubstitutionInVariables=false).
         //
         verifyException("org.apache.commons.text.StringSubstitutor", e);
      }
  }
}
