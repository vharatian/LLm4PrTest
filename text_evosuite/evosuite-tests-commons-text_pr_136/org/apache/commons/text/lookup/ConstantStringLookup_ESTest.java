/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 20:56:28 GMT 2025
 */

package org.apache.commons.text.lookup;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.text.lookup.ConstantStringLookup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ConstantStringLookup_ESTest extends ConstantStringLookup_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantStringLookup constantStringLookup0 = new ConstantStringLookup();
      String string0 = constantStringLookup0.lookup("org.apache.commons.lang3.Validate");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantStringLookup constantStringLookup0 = new ConstantStringLookup();
      Class<?> class0 = constantStringLookup0.fetchClass("byte");
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConstantStringLookup constantStringLookup0 = new ConstantStringLookup();
      Class<?> class0 = constantStringLookup0.fetchClass("org.apache.commons.text.lookup.ConstantStringLookup");
      assertFalse(class0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConstantStringLookup constantStringLookup0 = new ConstantStringLookup();
      Class<?> class0 = constantStringLookup0.fetchClass("[F");
      assertTrue(class0.isArray());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConstantStringLookup constantStringLookup0 = new ConstantStringLookup();
      try { 
        constantStringLookup0.resolveField((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // className must not be null.
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantStringLookup constantStringLookup0 = new ConstantStringLookup();
      try { 
        constantStringLookup0.resolveField("", "");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstantStringLookup constantStringLookup0 = ConstantStringLookup.INSTANCE;
      // Undeclared exception!
      try { 
        constantStringLookup0.fetchClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // className must not be null.
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConstantStringLookup constantStringLookup0 = new ConstantStringLookup();
      try { 
        constantStringLookup0.fetchClass("RdV7R&uWm<H,p");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConstantStringLookup constantStringLookup0 = new ConstantStringLookup();
      try { 
        constantStringLookup0.resolveField("long", "V(Y\"rkg{jG*3");
        fail("Expecting exception: NoSuchFieldException");
      
      } catch(NoSuchFieldException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstantStringLookup constantStringLookup0 = new ConstantStringLookup();
      String string0 = constantStringLookup0.lookup("9");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantStringLookup constantStringLookup0 = new ConstantStringLookup();
      String string0 = constantStringLookup0.lookup((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantStringLookup constantStringLookup0 = new ConstantStringLookup();
      String string0 = constantStringLookup0.lookup(".wQQm?Ib2mEA72bor@");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantStringLookup.clear();
  }
}
