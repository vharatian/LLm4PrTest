/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 20:00:40 GMT 2025
 */

package org.apache.commons.text.lookup;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.text.lookup.DnsStringLookup;
import org.apache.commons.text.lookup.InterpolatorStringLookup;
import org.apache.commons.text.lookup.ResourceBundleStringLookup;
import org.apache.commons.text.lookup.StringLookup;
import org.apache.commons.text.lookup.UrlEncoderStringLookup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class InterpolatorStringLookup_ESTest extends InterpolatorStringLookup_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = InterpolatorStringLookup.toKey(":");
      assertEquals(":", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = InterpolatorStringLookup.toKey("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UrlEncoderStringLookup urlEncoderStringLookup0 = UrlEncoderStringLookup.INSTANCE;
      InterpolatorStringLookup interpolatorStringLookup0 = new InterpolatorStringLookup(urlEncoderStringLookup0);
      String string0 = interpolatorStringLookup0.lookup("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, StringLookup> hashMap0 = new HashMap<String, StringLookup>();
      InterpolatorStringLookup interpolatorStringLookup0 = new InterpolatorStringLookup(hashMap0, (StringLookup) null, false);
      Map<String, StringLookup> map0 = interpolatorStringLookup0.getStringLookupMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        InterpolatorStringLookup.toKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.lookup.InterpolatorStringLookup", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, HashMap<Object, Object>> hashMap0 = new HashMap<String, HashMap<Object, Object>>();
      InterpolatorStringLookup interpolatorStringLookup0 = new InterpolatorStringLookup((Map<String, HashMap<Object, Object>>) hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      hashMap0.put("H~", hashMap1);
      hashMap1.put(hashMap0, interpolatorStringLookup0);
      // Undeclared exception!
      try { 
        interpolatorStringLookup0.lookup("H~");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ResourceBundleStringLookup resourceBundleStringLookup0 = new ResourceBundleStringLookup();
      // Undeclared exception!
      try { 
        resourceBundleStringLookup0.lookup("^i:b_");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ResourceBundleStringLookup resourceBundleStringLookup0 = ResourceBundleStringLookup.INSTANCE;
      InterpolatorStringLookup interpolatorStringLookup0 = new InterpolatorStringLookup(resourceBundleStringLookup0);
      // Undeclared exception!
      try { 
        interpolatorStringLookup0.lookup("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad resource bundle key format []; expected format is BundleName:KeyName.
         //
         verifyException("org.apache.commons.text.lookup.IllegalArgumentExceptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, StringLookup> hashMap0 = new HashMap<String, StringLookup>();
      DnsStringLookup dnsStringLookup0 = DnsStringLookup.INSTANCE;
      InterpolatorStringLookup interpolatorStringLookup0 = new InterpolatorStringLookup(hashMap0, dnsStringLookup0, false);
      // Undeclared exception!
      try { 
        interpolatorStringLookup0.lookup("| ");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.text.lookup.DnsStringLookup", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InterpolatorStringLookup interpolatorStringLookup0 = null;
      try {
        interpolatorStringLookup0 = new InterpolatorStringLookup((Map<String, StringLookup>) null, (StringLookup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.lookup.InterpolatorStringLookup", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InterpolatorStringLookup interpolatorStringLookup0 = new InterpolatorStringLookup((StringLookup) null);
      String string0 = interpolatorStringLookup0.lookup("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      InterpolatorStringLookup interpolatorStringLookup0 = new InterpolatorStringLookup((Map<String, String>) hashMap0);
      String string0 = interpolatorStringLookup0.lookup("base64Encoder:b1$Btip");
      assertNotNull(string0);
      assertEquals("YjEkQnRpcA==", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InterpolatorStringLookup interpolatorStringLookup0 = new InterpolatorStringLookup();
      String string0 = interpolatorStringLookup0.lookup(":");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InterpolatorStringLookup interpolatorStringLookup0 = new InterpolatorStringLookup();
      String string0 = interpolatorStringLookup0.lookup((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InterpolatorStringLookup interpolatorStringLookup0 = new InterpolatorStringLookup();
      HashMap<String, StringLookup> hashMap0 = new HashMap<String, StringLookup>();
      hashMap0.put("", interpolatorStringLookup0);
      InterpolatorStringLookup interpolatorStringLookup1 = new InterpolatorStringLookup(hashMap0, interpolatorStringLookup0, false);
      assertFalse(interpolatorStringLookup1.equals((Object)interpolatorStringLookup0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      InterpolatorStringLookup interpolatorStringLookup0 = new InterpolatorStringLookup((Map<String, String>) hashMap0);
      Map<String, StringLookup> map0 = interpolatorStringLookup0.getStringLookupMap();
      assertEquals(18, map0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InterpolatorStringLookup interpolatorStringLookup0 = new InterpolatorStringLookup();
      String string0 = interpolatorStringLookup0.toString();
      assertNotNull(string0);
  }
}
