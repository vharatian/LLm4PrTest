/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 19:03:27 GMT 2025
 */

package org.apache.commons.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import org.apache.commons.text.StringEscapeUtils;
import org.apache.commons.text.translate.NumericEntityEscaper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class StringEscapeUtils_ESTest extends StringEscapeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringEscapeUtils.XsiUnescaper stringEscapeUtils_XsiUnescaper0 = (StringEscapeUtils.XsiUnescaper)StringEscapeUtils.UNESCAPE_XSI;
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringEscapeUtils_XsiUnescaper0.translate((CharSequence) ")", (-105), (Writer) stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // XsiUnescaper should never reach the [1] index
         //
         verifyException("org.apache.commons.text.StringEscapeUtils$XsiUnescaper", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeXSI("ti[VFx='vpW%r`");
      assertEquals("ti[VFx='vpW%r`", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeXml((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeXml("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeXSI((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeXSI("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeJson((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeJson("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeJava((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeJava("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeHtml4((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeHtml4("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeHtml3("&KihzbD{mh;6n>[~jk");
      assertEquals("&KihzbD{mh;6n>[~jk", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeHtml3("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeEcmaScript((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeEcmaScript("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeCsv((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeCsv("Z=");
      assertEquals("Z=", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeXml11((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeXml11("7+WPNS_.iL<dF[");
      assertEquals("7+WPNS_.iL&lt;dF[", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeXml10((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeXml10("AJxQRT1");
      assertEquals("AJxQRT1", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeXSI("d^&~#nED9b");
      assertEquals("d^\\&\\~\\#nED9b", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeXSI("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeJson((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeJson("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeJava("JF");
      assertEquals("JF", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeJava("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeHtml4((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeHtml4("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeHtml3((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeHtml3("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeEcmaScript((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeEcmaScript("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeCsv("+85.A/tj{");
      assertEquals("+85.A/tj{", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeCsv("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "}PJ! }1*b,>tJsG\\u5\\";
      // Undeclared exception!
      try { 
        StringEscapeUtils.unescapeJson(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Less than 4 hex digits in unicode value: '\\u5\\' due to end of CharSequence
         //
         verifyException("org.apache.commons.text.translate.UnicodeUnescaper", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "f.kMAKDs\\uUn.<~c2";
      // Undeclared exception!
      try { 
        StringEscapeUtils.unescapeJava(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unable to parse unicode value: Un.<
         //
         verifyException("org.apache.commons.text.translate.UnicodeUnescaper", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "9Z: _\\u";
      // Undeclared exception!
      try { 
        StringEscapeUtils.unescapeEcmaScript(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Less than 4 hex digits in unicode value: '\\u' due to end of CharSequence
         //
         verifyException("org.apache.commons.text.translate.UnicodeUnescaper", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringEscapeUtils.unescapeCsv("\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringEscapeUtils.XsiUnescaper stringEscapeUtils_XsiUnescaper0 = new StringEscapeUtils.XsiUnescaper();
      StringWriter stringWriter0 = new StringWriter();
      int int0 = stringEscapeUtils_XsiUnescaper0.translate((CharSequence) "", 0, (Writer) stringWriter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringEscapeUtils.XsiUnescaper stringEscapeUtils_XsiUnescaper0 = new StringEscapeUtils.XsiUnescaper();
      StringWriter stringWriter0 = new StringWriter(592);
      // Undeclared exception!
      try { 
        stringEscapeUtils_XsiUnescaper0.translate((CharSequence) null, 592, (Writer) stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // XsiUnescaper should never reach the [1] index
         //
         verifyException("org.apache.commons.text.StringEscapeUtils$XsiUnescaper", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeEcmaScript("t");
      assertEquals("t", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeCsv("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeHtml4("~\">XwlD?K~cz[");
      assertEquals("~\">XwlD?K~cz[", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeHtml3((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeJson("ByYl0],j#*RWn%k");
      assertEquals("ByYl0],j#*RWn%k", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeHtml4("ti[VFx='vpW%r`");
      assertEquals("ti[VFx='vpW%r`", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeHtml3("jA");
      assertEquals("jA", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeXSI((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeXml10("\u000B");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeXml11("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeXml(" is not static");
      assertEquals(" is not static", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeJava((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeCsv((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeEcmaScript("\u21D0");
      assertEquals("\\u21D0", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeJava("t");
      assertEquals("t", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringEscapeUtils stringEscapeUtils0 = new StringEscapeUtils();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeJson("t");
      assertEquals("t", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringEscapeUtils.XsiUnescaper stringEscapeUtils_XsiUnescaper0 = new StringEscapeUtils.XsiUnescaper();
      StringEscapeUtils.Builder stringEscapeUtils_Builder0 = StringEscapeUtils.builder(stringEscapeUtils_XsiUnescaper0);
      StringEscapeUtils.Builder stringEscapeUtils_Builder1 = stringEscapeUtils_Builder0.append("n|c?v3GM4Jcj(BBO");
      assertSame(stringEscapeUtils_Builder1, stringEscapeUtils_Builder0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      NumericEntityEscaper numericEntityEscaper0 = new NumericEntityEscaper();
      StringEscapeUtils.Builder stringEscapeUtils_Builder0 = StringEscapeUtils.builder(numericEntityEscaper0);
      String string0 = stringEscapeUtils_Builder0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringEscapeUtils.XsiUnescaper stringEscapeUtils_XsiUnescaper0 = new StringEscapeUtils.XsiUnescaper();
      StringEscapeUtils.Builder stringEscapeUtils_Builder0 = StringEscapeUtils.builder(stringEscapeUtils_XsiUnescaper0);
      stringEscapeUtils_Builder0.escape("~\">XwlD?K~cz[");
      assertEquals("~\">XwlD?K~cz[", stringEscapeUtils_Builder0.toString());
  }
}
