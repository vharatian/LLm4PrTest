/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 18:57:28 GMT 2025
 */

package org.apache.commons.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.text.CharacterPredicate;
import org.apache.commons.text.CharacterPredicates;
import org.apache.commons.text.RandomStringGenerator;
import org.apache.commons.text.TextRandomProvider;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class RandomStringGenerator_ESTest extends RandomStringGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      RandomStringGenerator.Builder randomStringGenerator_Builder1 = randomStringGenerator_Builder0.withinRange(0, 1114111);
      assertEquals(0, RandomStringGenerator.Builder.DEFAULT_LENGTH);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      char[][] charArray0 = new char[8][1];
      char[] charArray1 = new char[2];
      charArray1[0] = '+';
      charArray1[1] = '+';
      charArray0[0] = charArray1;
      // Undeclared exception!
      try { 
        randomStringGenerator_Builder0.withinRange(charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Each pair must contain minimum and maximum code point
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      char[][] charArray0 = new char[1][8];
      char[] charArray1 = new char[2];
      charArray1[1] = '(';
      charArray0[0] = charArray1;
      RandomStringGenerator.Builder randomStringGenerator_Builder1 = randomStringGenerator_Builder0.withinRange(charArray0);
      assertSame(randomStringGenerator_Builder1, randomStringGenerator_Builder0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      char[] charArray0 = new char[4];
      char[][] charArray1 = new char[4][0];
      charArray1[0] = charArray0;
      // Undeclared exception!
      try { 
        randomStringGenerator_Builder0.withinRange(charArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Each pair must contain minimum and maximum code point
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      randomStringGenerator_Builder0.withinRange(97, 97);
      RandomStringGenerator randomStringGenerator0 = randomStringGenerator_Builder0.build();
      assertNotNull(randomStringGenerator0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      RandomStringGenerator randomStringGenerator0 = randomStringGenerator_Builder0.build();
      String string0 = randomStringGenerator0.generate(0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      char[] charArray0 = new char[4];
      randomStringGenerator_Builder0.selectFrom(charArray0);
      TextRandomProvider textRandomProvider0 = mock(TextRandomProvider.class, new ViolatedAssumptionAnswer());
      doReturn(1, 1114111).when(textRandomProvider0).nextInt(anyInt());
      randomStringGenerator_Builder0.usingRandom(textRandomProvider0);
      RandomStringGenerator randomStringGenerator0 = randomStringGenerator_Builder0.build();
      // Undeclared exception!
      try { 
        randomStringGenerator0.generate(1114111, 1114111);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1114111, Size: 4
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      RandomStringGenerator randomStringGenerator0 = randomStringGenerator_Builder0.build();
      // Undeclared exception!
      try { 
        randomStringGenerator0.generate(0, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.concurrent.ThreadLocalRandom", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      char[] charArray0 = new char[1];
      randomStringGenerator_Builder0.selectFrom(charArray0);
      TextRandomProvider textRandomProvider0 = mock(TextRandomProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(textRandomProvider0).nextInt(anyInt());
      RandomStringGenerator.Builder randomStringGenerator_Builder1 = randomStringGenerator_Builder0.usingRandom(textRandomProvider0);
      RandomStringGenerator randomStringGenerator0 = randomStringGenerator_Builder1.build();
      randomStringGenerator0.generate(2, 1114111);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      char[] charArray0 = new char[1];
      randomStringGenerator_Builder0.selectFrom(charArray0);
      TextRandomProvider textRandomProvider0 = mock(TextRandomProvider.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(textRandomProvider0).nextInt(anyInt());
      randomStringGenerator_Builder0.usingRandom(textRandomProvider0);
      RandomStringGenerator randomStringGenerator0 = randomStringGenerator_Builder0.build();
      // Undeclared exception!
      try { 
        randomStringGenerator0.generate(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      char[] charArray0 = new char[4];
      RandomStringGenerator.Builder randomStringGenerator_Builder1 = randomStringGenerator_Builder0.selectFrom(charArray0);
      TextRandomProvider textRandomProvider0 = mock(TextRandomProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, (-2553)).when(textRandomProvider0).nextInt(anyInt());
      RandomStringGenerator.Builder randomStringGenerator_Builder2 = randomStringGenerator_Builder1.usingRandom(textRandomProvider0);
      RandomStringGenerator randomStringGenerator0 = randomStringGenerator_Builder2.build();
      // Undeclared exception!
      try { 
        randomStringGenerator0.generate(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      CharacterPredicate[] characterPredicateArray0 = new CharacterPredicate[5];
      CharacterPredicates characterPredicates0 = CharacterPredicates.DIGITS;
      characterPredicateArray0[0] = (CharacterPredicate) characterPredicates0;
      characterPredicateArray0[1] = (CharacterPredicate) characterPredicates0;
      characterPredicateArray0[2] = (CharacterPredicate) characterPredicates0;
      characterPredicateArray0[3] = (CharacterPredicate) characterPredicates0;
      characterPredicateArray0[4] = (CharacterPredicate) characterPredicates0;
      randomStringGenerator_Builder0.filteredBy(characterPredicateArray0);
      RandomStringGenerator randomStringGenerator0 = randomStringGenerator_Builder0.build();
      // Undeclared exception!
      randomStringGenerator0.generate(4314);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      char[] charArray0 = new char[1];
      RandomStringGenerator.Builder randomStringGenerator_Builder1 = randomStringGenerator_Builder0.selectFrom(charArray0);
      TextRandomProvider textRandomProvider0 = mock(TextRandomProvider.class, new ViolatedAssumptionAnswer());
      doReturn(1, 0).when(textRandomProvider0).nextInt(anyInt());
      randomStringGenerator_Builder0.usingRandom(textRandomProvider0);
      RandomStringGenerator randomStringGenerator0 = randomStringGenerator_Builder1.build();
      String string0 = randomStringGenerator0.generate(0, 2147481706);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      RandomStringGenerator randomStringGenerator0 = randomStringGenerator_Builder0.build();
      // Undeclared exception!
      try { 
        randomStringGenerator0.generate(1114111, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Maximum length 0 is smaller than minimum length 1114111.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      RandomStringGenerator randomStringGenerator0 = randomStringGenerator_Builder0.build();
      // Undeclared exception!
      try { 
        randomStringGenerator0.generate((-92), 1114111);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum length -92 is smaller than zero.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      CharacterPredicate[] characterPredicateArray0 = new CharacterPredicate[3];
      CharacterPredicates characterPredicates0 = CharacterPredicates.ARABIC_NUMERALS;
      characterPredicateArray0[0] = (CharacterPredicate) characterPredicates0;
      CharacterPredicates characterPredicates1 = CharacterPredicates.DIGITS;
      characterPredicateArray0[1] = (CharacterPredicate) characterPredicates1;
      characterPredicateArray0[2] = (CharacterPredicate) characterPredicates1;
      randomStringGenerator_Builder0.filteredBy(characterPredicateArray0);
      RandomStringGenerator randomStringGenerator0 = randomStringGenerator_Builder0.build();
      // Undeclared exception!
      randomStringGenerator0.generate(0, 551);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      CharacterPredicate[] characterPredicateArray0 = new CharacterPredicate[3];
      randomStringGenerator_Builder0.filteredBy(characterPredicateArray0);
      RandomStringGenerator randomStringGenerator0 = randomStringGenerator_Builder0.build();
      // Undeclared exception!
      try { 
        randomStringGenerator0.generate(7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      char[][] charArray0 = new char[0][0];
      randomStringGenerator_Builder0.withinRange(charArray0);
      RandomStringGenerator randomStringGenerator0 = randomStringGenerator_Builder0.build();
      // Undeclared exception!
      randomStringGenerator0.generate(1114111);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      RandomStringGenerator randomStringGenerator0 = randomStringGenerator_Builder0.build();
      // Undeclared exception!
      try { 
        randomStringGenerator0.generate((-2222));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length -2222 is smaller than zero.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      RandomStringGenerator randomStringGenerator0 = randomStringGenerator_Builder0.build();
      String string0 = randomStringGenerator0.generate(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      // Undeclared exception!
      try { 
        randomStringGenerator_Builder0.withinRange(1908874353, 1908874353);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1908874353 is larger than Character.MAX_CODE_POINT.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      // Undeclared exception!
      try { 
        randomStringGenerator_Builder0.withinRange((-779), (-779));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum code point -779 is negative
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      // Undeclared exception!
      try { 
        randomStringGenerator_Builder0.withinRange(4118, (-199));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum code point 4118 is larger than maximum code point -199
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      char[][] charArray0 = new char[1][8];
      char[] charArray1 = new char[2];
      charArray1[0] = '|';
      charArray0[0] = charArray1;
      // Undeclared exception!
      try { 
        randomStringGenerator_Builder0.withinRange(charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum code point 124 is larger than maximum code point 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      char[] charArray0 = new char[2];
      randomStringGenerator_Builder0.selectFrom(charArray0);
      RandomStringGenerator randomStringGenerator0 = randomStringGenerator_Builder0.build();
      String string0 = randomStringGenerator0.generate(4);
      assertEquals("\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      RandomStringGenerator.Builder randomStringGenerator_Builder1 = randomStringGenerator_Builder0.selectFrom((char[]) null);
      assertSame(randomStringGenerator_Builder0, randomStringGenerator_Builder1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      CharacterPredicate[] characterPredicateArray0 = new CharacterPredicate[3];
      RandomStringGenerator.Builder randomStringGenerator_Builder1 = randomStringGenerator_Builder0.filteredBy(characterPredicateArray0);
      RandomStringGenerator.Builder randomStringGenerator_Builder2 = randomStringGenerator_Builder0.filteredBy(characterPredicateArray0);
      assertSame(randomStringGenerator_Builder2, randomStringGenerator_Builder1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RandomStringGenerator.Builder randomStringGenerator_Builder0 = new RandomStringGenerator.Builder();
      CharacterPredicate[] characterPredicateArray0 = new CharacterPredicate[0];
      RandomStringGenerator.Builder randomStringGenerator_Builder1 = randomStringGenerator_Builder0.filteredBy(characterPredicateArray0);
      assertSame(randomStringGenerator_Builder1, randomStringGenerator_Builder0);
  }
}
