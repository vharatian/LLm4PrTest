/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 20:03:35 GMT 2025
 */

package org.apache.commons.text.similarity;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import org.apache.commons.text.similarity.JaroWinklerDistance;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class JaroWinklerDistance_ESTest extends JaroWinklerDistance_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      CharBuffer charBuffer1 = CharBuffer.allocate('Q');
      int[] intArray0 = JaroWinklerDistance.matches(charBuffer0, charBuffer1);
      assertArrayEquals(new int[] {2, 0, 2}, intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      JaroWinklerDistance jaroWinklerDistance0 = new JaroWinklerDistance();
      char[] charArray0 = new char[3];
      charArray0[0] = 's';
      charArray0[1] = 'E';
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      Double double0 = jaroWinklerDistance0.apply(charBuffer0, charBuffer1);
      assertEquals(1.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      JaroWinklerDistance jaroWinklerDistance0 = new JaroWinklerDistance();
      char[] charArray0 = new char[3];
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      Double double0 = jaroWinklerDistance0.apply(charBuffer0, charBuffer1);
      assertEquals(0.0888888888888889, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(833);
      // Undeclared exception!
      JaroWinklerDistance.matches(charBuffer0, charBuffer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      // Undeclared exception!
      try { 
        JaroWinklerDistance.matches(charBuffer0, (CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.similarity.JaroWinklerDistance", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      charBuffer0.position(2);
      // Undeclared exception!
      try { 
        JaroWinklerDistance.matches(charBuffer1, charBuffer1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JaroWinklerDistance jaroWinklerDistance0 = new JaroWinklerDistance();
      CharBuffer charBuffer0 = CharBuffer.allocate(3117);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 32, 3117);
      // Undeclared exception!
      jaroWinklerDistance0.apply(charBuffer1, charBuffer0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      charBuffer0.append((CharSequence) charBuffer1);
      CharBuffer charBuffer2 = CharBuffer.allocate('x');
      JaroWinklerDistance jaroWinklerDistance0 = new JaroWinklerDistance();
      // Undeclared exception!
      try { 
        jaroWinklerDistance0.apply(charBuffer2, charBuffer1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'k';
      charArray0[1] = 'Q';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      char[] charArray1 = new char[5];
      charArray1[0] = 'Q';
      charArray1[1] = 'k';
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray1);
      int[] intArray0 = JaroWinklerDistance.matches(charBuffer1, charBuffer0);
      assertArrayEquals(new int[] {2, 2, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      char[] charArray0 = new char[2];
      charArray0[0] = 'k';
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      int[] intArray0 = JaroWinklerDistance.matches(charBuffer0, charBuffer1);
      assertArrayEquals(new int[] {1, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JaroWinklerDistance jaroWinklerDistance0 = new JaroWinklerDistance();
      // Undeclared exception!
      try { 
        jaroWinklerDistance0.apply("Fae!#hZ", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // CharSequences must not be null
         //
         verifyException("org.apache.commons.text.similarity.JaroWinklerDistance", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      JaroWinklerDistance jaroWinklerDistance0 = new JaroWinklerDistance();
      Double double0 = jaroWinklerDistance0.apply(charBuffer0, charBuffer0);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JaroWinklerDistance jaroWinklerDistance0 = new JaroWinklerDistance();
      // Undeclared exception!
      try { 
        jaroWinklerDistance0.apply((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // CharSequences must not be null
         //
         verifyException("org.apache.commons.text.similarity.JaroWinklerDistance", e);
      }
  }
}
