/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 19:57:53 GMT 2025
 */

package org.apache.commons.text.lookup;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.text.lookup.ConstantStringLookup;
import org.apache.commons.text.lookup.DnsStringLookup;
import org.apache.commons.text.lookup.InterpolatorStringLookup;
import org.apache.commons.text.lookup.LocalHostStringLookup;
import org.apache.commons.text.lookup.ScriptStringLookup;
import org.apache.commons.text.lookup.StringLookup;
import org.apache.commons.text.lookup.UrlDecoderStringLookup;
import org.apache.commons.text.lookup.UrlEncoderStringLookup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class InterpolatorStringLookup_ESTest extends InterpolatorStringLookup_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InterpolatorStringLookup interpolatorStringLookup0 = new InterpolatorStringLookup();
      String string0 = interpolatorStringLookup0.lookup("urlEncoder:urlEncoder:urlEncoder");
      assertEquals("urlEncoder%3AurlEncoder", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InterpolatorStringLookup interpolatorStringLookup0 = (InterpolatorStringLookup)InterpolatorStringLookup.INSTANCE;
      String string0 = interpolatorStringLookup0.lookup(":");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = InterpolatorStringLookup.toKey("0D+<z#-}-qODg$=");
      assertEquals("0d+<z#-}-qodg$=", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = InterpolatorStringLookup.toKey("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, StringLookup> hashMap0 = new HashMap<String, StringLookup>();
      UrlEncoderStringLookup urlEncoderStringLookup0 = UrlEncoderStringLookup.INSTANCE;
      InterpolatorStringLookup interpolatorStringLookup0 = new InterpolatorStringLookup(hashMap0, urlEncoderStringLookup0, true);
      String string0 = interpolatorStringLookup0.lookup("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, StringLookup> hashMap0 = new HashMap<String, StringLookup>();
      ConstantStringLookup constantStringLookup0 = ConstantStringLookup.INSTANCE;
      InterpolatorStringLookup interpolatorStringLookup0 = new InterpolatorStringLookup(hashMap0, constantStringLookup0, false);
      Map<String, StringLookup> map0 = interpolatorStringLookup0.getStringLookupMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        InterpolatorStringLookup.toKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.lookup.InterpolatorStringLookup", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, HashMap<String, Object>> hashMap0 = new HashMap<String, HashMap<String, Object>>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      hashMap1.put("", hashMap0);
      hashMap0.put("", hashMap1);
      InterpolatorStringLookup interpolatorStringLookup0 = new InterpolatorStringLookup((Map<String, HashMap<String, Object>>) hashMap0);
      // Undeclared exception!
      try { 
        interpolatorStringLookup0.lookup("");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UrlDecoderStringLookup urlDecoderStringLookup0 = UrlDecoderStringLookup.INSTANCE;
      InterpolatorStringLookup interpolatorStringLookup0 = new InterpolatorStringLookup(urlDecoderStringLookup0);
      // Undeclared exception!
      try { 
        interpolatorStringLookup0.lookup("x)67V%tZ>8INQ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URLDecoder: Illegal hex characters in escape (%) pattern - For input string: \"tZ\"
         //
         verifyException("java.net.URLDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalHostStringLookup localHostStringLookup0 = LocalHostStringLookup.INSTANCE;
      InterpolatorStringLookup interpolatorStringLookup0 = new InterpolatorStringLookup(localHostStringLookup0);
      // Undeclared exception!
      try { 
        interpolatorStringLookup0.lookup("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.text.lookup.LocalHostStringLookup", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DnsStringLookup dnsStringLookup0 = DnsStringLookup.INSTANCE;
      InterpolatorStringLookup interpolatorStringLookup0 = new InterpolatorStringLookup(dnsStringLookup0);
      // Undeclared exception!
      try { 
        interpolatorStringLookup0.lookup("|   ");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.text.lookup.DnsStringLookup", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ScriptStringLookup scriptStringLookup0 = ScriptStringLookup.INSTANCE;
      InterpolatorStringLookup interpolatorStringLookup0 = null;
      try {
        interpolatorStringLookup0 = new InterpolatorStringLookup((Map<String, StringLookup>) null, scriptStringLookup0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.lookup.InterpolatorStringLookup", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InterpolatorStringLookup interpolatorStringLookup0 = new InterpolatorStringLookup((StringLookup) null);
      String string0 = interpolatorStringLookup0.lookup("null:4y<'f&*q895/l%Z.");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InterpolatorStringLookup interpolatorStringLookup0 = new InterpolatorStringLookup();
      String string0 = interpolatorStringLookup0.lookup((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InterpolatorStringLookup interpolatorStringLookup0 = (InterpolatorStringLookup)InterpolatorStringLookup.INSTANCE;
      Map<String, StringLookup> map0 = interpolatorStringLookup0.getStringLookupMap();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InterpolatorStringLookup interpolatorStringLookup0 = (InterpolatorStringLookup)InterpolatorStringLookup.INSTANCE;
      String string0 = interpolatorStringLookup0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InterpolatorStringLookup interpolatorStringLookup0 = new InterpolatorStringLookup();
      Map<String, StringLookup> map0 = interpolatorStringLookup0.getStringLookupMap();
      InterpolatorStringLookup interpolatorStringLookup1 = new InterpolatorStringLookup(map0, interpolatorStringLookup0, false);
      assertEquals(18, map0.size());
  }
}
