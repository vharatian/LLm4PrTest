/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 20:11:53 GMT 2025
 */

package org.apache.commons.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.apache.commons.text.StringTokenizer;
import org.apache.commons.text.matcher.StringMatcher;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class StringTokenizer_ESTest extends StringTokenizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[4];
      StringTokenizer stringTokenizer0 = StringTokenizer.getCSVInstance(charArray0);
      StringMatcher stringMatcher0 = mock(StringMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("Q/", "Q/").when(stringMatcher0).toString();
      doReturn(8192, 2).when(stringMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StringTokenizer stringTokenizer1 = stringTokenizer0.setQuoteMatcher(stringMatcher0);
      List<String> list0 = stringTokenizer1.getTokenList();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringTokenizer stringTokenizer0 = StringTokenizer.getCSVInstance("%-OwW8t");
      StringTokenizer stringTokenizer1 = stringTokenizer0.setQuoteChar('-');
      char[] charArray0 = new char[7];
      charArray0[1] = '-';
      charArray0[2] = '-';
      stringTokenizer0.reset(charArray0);
      String string0 = stringTokenizer1.previousToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      char[] charArray0 = new char[6];
      StringMatcher stringMatcher0 = mock(StringMatcher.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(stringMatcher0).toString();
      doReturn((-587), 8).when(stringMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StringTokenizer stringTokenizer0 = new StringTokenizer(charArray0, stringMatcher0, stringMatcher0);
      String string0 = stringTokenizer0.nextToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char[] charArray0 = new char[6];
      StringMatcher stringMatcher0 = mock(StringMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("set() is unsupported", (String) null, "set() is unsupported").when(stringMatcher0).toString();
      doReturn(1, (-65), 1).when(stringMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StringTokenizer stringTokenizer0 = new StringTokenizer(charArray0, stringMatcher0, stringMatcher0);
      stringTokenizer0.nextToken();
      assertEquals(0, stringTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer((String) null, 'm', ';');
      StringMatcher stringMatcher0 = mock(StringMatcher.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, "H[PBkAUUcCa").when(stringMatcher0).toString();
      doReturn((-2092), (-2092)).when(stringMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StringTokenizer stringTokenizer1 = stringTokenizer0.setQuoteMatcher(stringMatcher0);
      char[] charArray0 = new char[6];
      StringMatcher stringMatcher1 = mock(StringMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "=1|", "", "").when(stringMatcher1).toString();
      doReturn((-1622), (-1537), (-1259), (-1537), 185).when(stringMatcher1).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      stringTokenizer1.setIgnoredMatcher(stringMatcher1);
      charArray0[3] = 'm';
      StringTokenizer stringTokenizer2 = stringTokenizer1.reset(charArray0);
      String[] stringArray0 = stringTokenizer2.getTokenArray();
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringTokenizer stringTokenizer0 = StringTokenizer.getCSVInstance();
      char[] charArray0 = new char[5];
      StringTokenizer stringTokenizer1 = stringTokenizer0.reset(charArray0);
      StringMatcher stringMatcher0 = mock(StringMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.text.matcher.AbstractStringMatcher$CharArrayMatcher", (String) null, (String) null).when(stringMatcher0).toString();
      doReturn((-1485), 0, 0).when(stringMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StringTokenizer stringTokenizer2 = stringTokenizer1.setDelimiterMatcher(stringMatcher0);
      String string0 = stringTokenizer2.previousToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringTokenizer stringTokenizer0 = StringTokenizer.getCSVInstance("%-OwW8t");
      StringMatcher stringMatcher0 = mock(StringMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("S=").when(stringMatcher0).toString();
      doReturn(1208).when(stringMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      stringTokenizer0.setIgnoredMatcher(stringMatcher0);
      String string0 = stringTokenizer0.previousToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringMatcher stringMatcher0 = mock(StringMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("P69fo").when(stringMatcher0).toString();
      doReturn(39).when(stringMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StringTokenizer stringTokenizer0 = new StringTokenizer("Arguments cannot both be null", stringMatcher0);
      List<String> list0 = stringTokenizer0.getTokenList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringTokenizer stringTokenizer0 = StringTokenizer.getTSVInstance("M=gIntn`nIs_{kb");
      char[] charArray0 = new char[7];
      List<String> list0 = stringTokenizer0.tokenize(charArray0, 1, (-1));
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("-=@du1`2O`izGJV ,");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      stringTokenizer0.forEachRemaining(consumer0);
      stringTokenizer0.previous();
      assertEquals(0, stringTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[5] = '@';
      StringTokenizer stringTokenizer0 = StringTokenizer.getTSVInstance(charArray0);
      StringTokenizer stringTokenizer1 = stringTokenizer0.setDelimiterChar('@');
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      stringTokenizer1.forEachRemaining(consumer0);
      stringTokenizer1.previousToken();
      assertEquals(1, stringTokenizer1.nextIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringMatcher stringMatcher0 = mock(StringMatcher.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[1];
      StringTokenizer stringTokenizer0 = new StringTokenizer(charArray0, (StringMatcher) null, stringMatcher0);
      assertTrue(stringTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringTokenizer stringTokenizer0 = StringTokenizer.getTSVInstance();
      char[] charArray0 = new char[2];
      List<String> list0 = stringTokenizer0.tokenize(charArray0, 1, 2);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringTokenizer stringTokenizer0 = StringTokenizer.getCSVInstance();
      int int0 = stringTokenizer0.size();
      //  // Unstable assertion: assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[5] = 'N';
      StringTokenizer stringTokenizer0 = new StringTokenizer(charArray0, 'N', 'q');
      StringMatcher stringMatcher0 = stringTokenizer0.getTrimmerMatcher();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      stringTokenizer0.forEachRemaining(consumer0);
      stringTokenizer0.setTrimmerMatcher(stringMatcher0);
      assertEquals(1, stringTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[6];
      StringTokenizer stringTokenizer0 = StringTokenizer.getCSVInstance(charArray0);
      stringTokenizer0.next();
      StringMatcher stringMatcher0 = stringTokenizer0.getIgnoredMatcher();
      StringTokenizer stringTokenizer1 = stringTokenizer0.setTrimmerMatcher(stringMatcher0);
      //  // Unstable assertion: assertTrue(stringTokenizer1.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringTokenizer stringTokenizer0 = StringTokenizer.getTSVInstance((String) null);
      StringTokenizer stringTokenizer1 = stringTokenizer0.setEmptyTokenAsNull(true);
      StringMatcher stringMatcher0 = mock(StringMatcher.class, new ViolatedAssumptionAnswer());
      StringTokenizer stringTokenizer2 = stringTokenizer1.setTrimmerMatcher(stringMatcher0);
      assertTrue(stringTokenizer2.isEmptyTokenAsNull());
      assertEquals(0, stringTokenizer2.nextIndex());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[4] = 's';
      StringTokenizer stringTokenizer0 = new StringTokenizer(charArray0, 's', '#');
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      stringTokenizer0.forEachRemaining(consumer0);
      StringMatcher stringMatcher0 = mock(StringMatcher.class, new ViolatedAssumptionAnswer());
      stringTokenizer0.setQuoteMatcher(stringMatcher0);
      assertEquals(1, stringTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[6];
      StringTokenizer stringTokenizer0 = StringTokenizer.getCSVInstance(charArray0);
      stringTokenizer0.next();
      StringTokenizer stringTokenizer1 = stringTokenizer0.setQuoteMatcher((StringMatcher) null);
      assertSame(stringTokenizer0, stringTokenizer1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[9];
      StringTokenizer stringTokenizer0 = StringTokenizer.getCSVInstance(charArray0);
      stringTokenizer0.setEmptyTokenAsNull(true);
      StringMatcher stringMatcher0 = mock(StringMatcher.class, new ViolatedAssumptionAnswer());
      StringTokenizer stringTokenizer1 = stringTokenizer0.setQuoteMatcher(stringMatcher0);
      assertTrue(stringTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), stringTokenizer1.previousIndex());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[4] = 's';
      StringTokenizer stringTokenizer0 = new StringTokenizer(charArray0, 's', '#');
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      stringTokenizer0.forEachRemaining(consumer0);
      stringTokenizer0.setQuoteChar('M');
      assertEquals(1, stringTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[7];
      StringTokenizer stringTokenizer0 = new StringTokenizer(charArray0, 's', '#');
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      stringTokenizer0.forEachRemaining(consumer0);
      stringTokenizer0.setQuoteChar('M');
      assertEquals(0, stringTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[6];
      StringTokenizer stringTokenizer0 = new StringTokenizer(charArray0, (StringMatcher) null, (StringMatcher) null);
      stringTokenizer0.setEmptyTokenAsNull(true);
      stringTokenizer0.setQuoteChar('G');
      assertTrue(stringTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringTokenizer stringTokenizer0 = StringTokenizer.getTSVInstance("{B!");
      StringTokenizer stringTokenizer1 = stringTokenizer0.setDelimiterString("{B!");
      StringMatcher stringMatcher0 = stringTokenizer1.getQuoteMatcher();
      stringTokenizer1.next();
      stringTokenizer0.nextToken();
      stringTokenizer1.setIgnoredMatcher(stringMatcher0);
      assertEquals(1, stringTokenizer1.previousIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringTokenizer stringTokenizer0 = StringTokenizer.getTSVInstance("{B!");
      StringMatcher stringMatcher0 = stringTokenizer0.getQuoteMatcher();
      stringTokenizer0.next();
      stringTokenizer0.setIgnoredMatcher(stringMatcher0);
      assertEquals(0, stringTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[6];
      StringTokenizer stringTokenizer0 = new StringTokenizer(charArray0, (StringMatcher) null, (StringMatcher) null);
      stringTokenizer0.setEmptyTokenAsNull(true);
      stringTokenizer0.setIgnoredMatcher((StringMatcher) null);
      assertTrue(stringTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[5] = 'N';
      StringTokenizer stringTokenizer0 = new StringTokenizer(charArray0, 'N', '}');
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      stringTokenizer0.forEachRemaining(consumer0);
      stringTokenizer0.setIgnoredChar(';');
      assertEquals(1, stringTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[6];
      StringTokenizer stringTokenizer0 = StringTokenizer.getCSVInstance(charArray0);
      stringTokenizer0.next();
      StringTokenizer stringTokenizer1 = stringTokenizer0.setIgnoredChar('A');
      assertEquals(0, stringTokenizer1.previousIndex());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[9];
      StringTokenizer stringTokenizer0 = StringTokenizer.getCSVInstance(charArray0);
      stringTokenizer0.setEmptyTokenAsNull(true);
      StringTokenizer stringTokenizer1 = stringTokenizer0.setIgnoredChar(',');
      assertTrue(stringTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), stringTokenizer1.previousIndex());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringTokenizer stringTokenizer0 = StringTokenizer.getTSVInstance("{B!");
      StringTokenizer stringTokenizer1 = stringTokenizer0.setDelimiterString("{B!");
      stringTokenizer0.next();
      stringTokenizer0.nextToken();
      stringTokenizer1.setIgnoreEmptyTokens(false);
      assertEquals(1, stringTokenizer1.previousIndex());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[6];
      StringTokenizer stringTokenizer0 = StringTokenizer.getCSVInstance(charArray0);
      stringTokenizer0.next();
      StringTokenizer stringTokenizer1 = stringTokenizer0.setIgnoreEmptyTokens(false);
      assertSame(stringTokenizer0, stringTokenizer1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringMatcher stringMatcher0 = mock(StringMatcher.class, new ViolatedAssumptionAnswer());
      StringTokenizer stringTokenizer0 = new StringTokenizer("", stringMatcher0, stringMatcher0);
      stringTokenizer0.setIgnoreEmptyTokens(true);
      assertTrue(stringTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "7X(%ZW");
      stringTokenizer0.setEmptyTokenAsNull(true);
      stringTokenizer0.setIgnoreEmptyTokens(false);
      assertTrue(stringTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[5] = '}';
      StringTokenizer stringTokenizer0 = new StringTokenizer(charArray0, '}', 'n');
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      stringTokenizer0.forEachRemaining(consumer0);
      stringTokenizer0.setEmptyTokenAsNull(false);
      assertEquals(2, stringTokenizer0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringTokenizer stringTokenizer0 = StringTokenizer.getTSVInstance(" in an array of ");
      String string0 = stringTokenizer0.next();
      assertNotNull(string0);
      assertEquals("in an array of", string0);
      
      StringTokenizer stringTokenizer1 = stringTokenizer0.setEmptyTokenAsNull(true);
      assertTrue(stringTokenizer1.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[5] = 'N';
      StringTokenizer stringTokenizer0 = new StringTokenizer(charArray0, 'N', '}');
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      stringTokenizer0.forEachRemaining(consumer0);
      stringTokenizer0.setDelimiterString("");
      assertEquals(1, stringTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[6];
      StringTokenizer stringTokenizer0 = StringTokenizer.getCSVInstance(charArray0);
      stringTokenizer0.next();
      StringTokenizer stringTokenizer1 = stringTokenizer0.setDelimiterString("");
      //  // Unstable assertion: assertTrue(stringTokenizer1.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[5];
      StringMatcher stringMatcher0 = mock(StringMatcher.class, new ViolatedAssumptionAnswer());
      StringTokenizer stringTokenizer0 = new StringTokenizer(charArray0, stringMatcher0);
      stringTokenizer0.setEmptyTokenAsNull(true);
      stringTokenizer0.setDelimiterString("");
      assertTrue(stringTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringTokenizer stringTokenizer0 = StringTokenizer.getTSVInstance("{B!");
      StringTokenizer stringTokenizer1 = stringTokenizer0.setDelimiterString("{B!");
      StringMatcher stringMatcher0 = stringTokenizer1.getQuoteMatcher();
      stringTokenizer0.next();
      stringTokenizer0.nextToken();
      stringTokenizer0.setDelimiterMatcher(stringMatcher0);
      assertEquals(2, stringTokenizer1.nextIndex());
      assertEquals(1, stringTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringTokenizer stringTokenizer0 = StringTokenizer.getTSVInstance("{B!");
      StringMatcher stringMatcher0 = stringTokenizer0.getQuoteMatcher();
      stringTokenizer0.next();
      stringTokenizer0.setDelimiterMatcher(stringMatcher0);
      assertEquals(0, stringTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringTokenizer stringTokenizer0 = StringTokenizer.getTSVInstance((String) null);
      stringTokenizer0.setEmptyTokenAsNull(true);
      StringMatcher stringMatcher0 = mock(StringMatcher.class, new ViolatedAssumptionAnswer());
      StringTokenizer stringTokenizer1 = stringTokenizer0.setDelimiterMatcher(stringMatcher0);
      assertTrue(stringTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), stringTokenizer1.previousIndex());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[5] = 'N';
      StringTokenizer stringTokenizer0 = new StringTokenizer(charArray0, 'N', '}');
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      stringTokenizer0.forEachRemaining(consumer0);
      stringTokenizer0.setDelimiterChar('}');
      assertEquals(1, stringTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringTokenizer stringTokenizer0 = StringTokenizer.getTSVInstance(" in an array of ");
      stringTokenizer0.next();
      stringTokenizer0.setDelimiterChar('<');
      assertEquals(1, stringTokenizer0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      char[] charArray0 = new char[5];
      StringMatcher stringMatcher0 = mock(StringMatcher.class, new ViolatedAssumptionAnswer());
      StringTokenizer stringTokenizer0 = new StringTokenizer(charArray0, stringMatcher0);
      StringTokenizer stringTokenizer1 = stringTokenizer0.setEmptyTokenAsNull(true);
      stringTokenizer1.setDelimiterChar('4');
      assertTrue(stringTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      char[] charArray0 = new char[6];
      StringTokenizer stringTokenizer0 = new StringTokenizer(charArray0, (StringMatcher) null, (StringMatcher) null);
      stringTokenizer0.setEmptyTokenAsNull(true);
      stringTokenizer0.reset(charArray0);
      assertTrue(stringTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringTokenizer stringTokenizer0 = StringTokenizer.getTSVInstance((String) null);
      stringTokenizer0.setEmptyTokenAsNull(true);
      StringTokenizer stringTokenizer1 = stringTokenizer0.reset(">({^");
      assertEquals(0, stringTokenizer1.nextIndex());
      assertTrue(stringTokenizer1.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("N{}h5UT8A>)PD!X(", '<');
      StringTokenizer stringTokenizer1 = stringTokenizer0.reset();
      assertTrue(stringTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), stringTokenizer1.previousIndex());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringTokenizer stringTokenizer0 = StringTokenizer.getCSVInstance();
      stringTokenizer0.setEmptyTokenAsNull(true);
      StringTokenizer stringTokenizer1 = stringTokenizer0.reset();
      assertTrue(stringTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), stringTokenizer1.previousIndex());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '#';
      StringTokenizer stringTokenizer0 = StringTokenizer.getTSVInstance(charArray0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      stringTokenizer0.forEachRemaining(consumer0);
      String string0 = stringTokenizer0.previousToken();
      assertNotNull(string0);
      assertEquals("#", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      char[] charArray0 = new char[4];
      StringTokenizer stringTokenizer0 = StringTokenizer.getCSVInstance(charArray0);
      stringTokenizer0.next();
      int int0 = stringTokenizer0.previousIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("StringTokenizer[not tokenized yet]");
      stringTokenizer0.next();
      stringTokenizer0.next();
      int int0 = stringTokenizer0.previousIndex();
      assertEquals(2, stringTokenizer0.nextIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[6];
      StringTokenizer stringTokenizer0 = StringTokenizer.getCSVInstance(charArray0);
      stringTokenizer0.next();
      String string0 = stringTokenizer0.previous();
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer((String) null, 'm', ';');
      char[] charArray0 = new char[6];
      StringTokenizer stringTokenizer1 = stringTokenizer0.reset(charArray0);
      stringTokenizer0.nextToken();
      int int0 = stringTokenizer1.nextIndex();
      assertEquals(0, stringTokenizer1.previousIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      char[] charArray0 = new char[6];
      StringTokenizer stringTokenizer0 = StringTokenizer.getCSVInstance(charArray0);
      stringTokenizer0.isIgnoreEmptyTokens();
      assertEquals(0, stringTokenizer0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      char[] charArray0 = new char[3];
      StringTokenizer stringTokenizer0 = StringTokenizer.getCSVInstance(charArray0);
      assertFalse(stringTokenizer0.isEmptyTokenAsNull());
      
      stringTokenizer0.setEmptyTokenAsNull(true);
      boolean boolean0 = stringTokenizer0.isEmptyTokenAsNull();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringTokenizer stringTokenizer0 = StringTokenizer.getTSVInstance();
      String[] stringArray0 = stringTokenizer0.getTokenArray();
      //  // Unstable assertion: assertEquals(1, stringArray0.length);
      //  // Unstable assertion: assertEquals(0, stringTokenizer0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "");
      String string0 = stringTokenizer0.getContent();
      assertNotNull(string0);
      assertTrue(stringTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      char[] charArray0 = new char[1];
      StringTokenizer stringTokenizer0 = new StringTokenizer(charArray0, "remove() is unsupported");
      StringTokenizer stringTokenizer1 = (StringTokenizer)stringTokenizer0.cloneReset();
      assertTrue(stringTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), stringTokenizer1.previousIndex());
      assertNotSame(stringTokenizer1, stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringTokenizer stringTokenizer0 = StringTokenizer.getCSVInstance();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        stringTokenizer0.tokenize(charArray0, 76, 117);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("N{}h5UT8A>)PD!X(", '<');
      StringMatcher stringMatcher0 = mock(StringMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("", "G~(Yl0sU{gFzV0S", "pK", (String) null, (String) null).when(stringMatcher0).toString();
      doReturn((-1551), (-1551), 0, 0).when(stringMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StringTokenizer stringTokenizer1 = stringTokenizer0.setIgnoredMatcher(stringMatcher0);
      StringMatcher stringMatcher1 = stringTokenizer1.getIgnoredMatcher();
      stringTokenizer1.setTrimmerMatcher(stringMatcher1);
      // Undeclared exception!
      try { 
        stringTokenizer0.nextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("N{}h5UT8A>)PD!X(", '<');
      StringMatcher stringMatcher0 = mock(StringMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("N{}h5UT8A>)PD!X(", "StringTokenizer[not tokenized yet]", "8'm]R\"k7Qzg;-", "8'm]R\"k7Qzg;-", "8'm]R\"k7Qzg;-").when(stringMatcher0).toString();
      doReturn((-131), (-131), (-131), (-131)).when(stringMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StringTokenizer stringTokenizer1 = stringTokenizer0.setIgnoredMatcher(stringMatcher0);
      StringMatcher stringMatcher1 = stringTokenizer1.getIgnoredMatcher();
      stringTokenizer1.setTrimmerMatcher(stringMatcher1);
      // Undeclared exception!
      try { 
        stringTokenizer1.next();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("N{}h5UT8A>)PD!X(", '<');
      StringMatcher stringMatcher0 = mock(StringMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("M4DE`m=R4:Z}", (String) null, "", "i}=xM", "N{}h5UT8A>)PD!X(").when(stringMatcher0).toString();
      doReturn((-14), 0, (-14), 1607).when(stringMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StringTokenizer stringTokenizer1 = stringTokenizer0.setIgnoredMatcher(stringMatcher0);
      StringMatcher stringMatcher1 = stringTokenizer1.getIgnoredMatcher();
      StringTokenizer stringTokenizer2 = stringTokenizer1.setTrimmerMatcher(stringMatcher1);
      // Undeclared exception!
      try { 
        stringTokenizer2.hasPrevious();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 1607
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("N{}h5UT8A>)PD!X(", '<');
      StringMatcher stringMatcher0 = mock(StringMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("", "StringTokenizer[not tokenized yet]", "8'm]R\"k7Qzg;-", "8'm]R\"k7Qzg;-", "8'm]R\"k7Qzg;-").when(stringMatcher0).toString();
      doReturn((-131), (-131), (-131), (-131)).when(stringMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StringTokenizer stringTokenizer1 = stringTokenizer0.setIgnoredMatcher(stringMatcher0);
      StringMatcher stringMatcher1 = stringTokenizer1.getIgnoredMatcher();
      StringTokenizer stringTokenizer2 = stringTokenizer1.setTrimmerMatcher(stringMatcher1);
      // Undeclared exception!
      try { 
        stringTokenizer2.hasPrevious();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("UcV+m", '$', 'G');
      StringMatcher stringMatcher0 = mock(StringMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("UcV+m", "StringTokenizer", "set() is unsupported", "", ">'~jWC_pB/?ykNM8/^").when(stringMatcher0).toString();
      doReturn((-1), (-2129), (-1), (-1), 28).when(stringMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      stringTokenizer0.setTrimmerMatcher(stringMatcher0);
      // Undeclared exception!
      try { 
        stringTokenizer0.hasNext();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 28
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringTokenizer stringTokenizer0 = StringTokenizer.getCSVInstance("add() is unsupported");
      StringMatcher stringMatcher0 = mock(StringMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("7\"'t=<4AxF@%'%}").when(stringMatcher0).toString();
      doReturn((-4462)).when(stringMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StringTokenizer stringTokenizer1 = stringTokenizer0.setIgnoredMatcher(stringMatcher0);
      stringTokenizer1.getTokenList();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("UcV+m", '$', 'G');
      StringMatcher stringMatcher0 = mock(StringMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("set() is unsupported", "set() is unsupported", "UcV+m", "org.apache.commons.text.StringTokenizer", "set() is unsupported").when(stringMatcher0).toString();
      doReturn((-1180), 1, (-1), 1, 16).when(stringMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      stringTokenizer0.setTrimmerMatcher(stringMatcher0);
      // Undeclared exception!
      try { 
        stringTokenizer0.getTokenArray();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 16
         //
         verifyException("org.apache.commons.text.TextStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      char[] charArray0 = new char[6];
      StringTokenizer stringTokenizer0 = new StringTokenizer(charArray0, (StringMatcher) null, (StringMatcher) null);
      StringTokenizer stringTokenizer1 = stringTokenizer0.setDelimiterMatcher((StringMatcher) null);
      assertTrue(stringTokenizer1.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      char[] charArray0 = new char[4];
      StringTokenizer stringTokenizer0 = new StringTokenizer(charArray0, '=');
      StringMatcher stringMatcher0 = mock(StringMatcher.class, new ViolatedAssumptionAnswer());
      StringTokenizer stringTokenizer1 = stringTokenizer0.setDelimiterMatcher(stringMatcher0);
      assertTrue(stringTokenizer1.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      char[] charArray0 = new char[14];
      StringTokenizer stringTokenizer0 = StringTokenizer.getCSVInstance(charArray0);
      String string0 = stringTokenizer0.next();
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      boolean boolean0 = stringTokenizer0.hasPrevious();
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringTokenizer stringTokenizer0 = StringTokenizer.getCSVInstance();
      boolean boolean0 = stringTokenizer0.hasPrevious();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StringTokenizer stringTokenizer0 = StringTokenizer.getCSVInstance();
      boolean boolean0 = stringTokenizer0.hasNext();
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StringMatcher stringMatcher0 = mock(StringMatcher.class, new ViolatedAssumptionAnswer());
      StringTokenizer stringTokenizer0 = new StringTokenizer((char[]) null, stringMatcher0);
      StringTokenizer stringTokenizer1 = stringTokenizer0.reset((char[]) null);
      assertTrue(stringTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), stringTokenizer1.previousIndex());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      char[] charArray0 = new char[1];
      StringTokenizer stringTokenizer0 = new StringTokenizer(charArray0, "remove() is unsupported");
      StringTokenizer stringTokenizer1 = stringTokenizer0.reset("remove() is unsupported");
      assertEquals(0, stringTokenizer1.nextIndex());
      assertTrue(stringTokenizer1.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      char[] charArray0 = new char[7];
      StringTokenizer stringTokenizer0 = new StringTokenizer(charArray0);
      StringTokenizer stringTokenizer1 = stringTokenizer0.reset((String) null);
      assertTrue(stringTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), stringTokenizer1.previousIndex());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StringTokenizer stringTokenizer0 = StringTokenizer.getTSVInstance();
      stringTokenizer0.isEmptyTokenAsNull();
      assertEquals(0, stringTokenizer0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      char[] charArray0 = new char[3];
      StringTokenizer stringTokenizer0 = StringTokenizer.getCSVInstance(charArray0);
      stringTokenizer0.getDelimiterMatcher();
      assertEquals((-1), stringTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer((String) null, 'm', ';');
      boolean boolean0 = stringTokenizer0.isIgnoreEmptyTokens();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      char[] charArray0 = new char[6];
      StringTokenizer stringTokenizer0 = new StringTokenizer(charArray0, (StringMatcher) null, (StringMatcher) null);
      String string0 = stringTokenizer0.toString();
      assertEquals("StringTokenizer[not tokenized yet]", string0);
      assertTrue(stringTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      char[] charArray0 = new char[7];
      StringTokenizer stringTokenizer0 = new StringTokenizer(charArray0, '}', 'n');
      stringTokenizer0.next();
      stringTokenizer0.toString();
      assertEquals(0, stringTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      char[] charArray0 = new char[6];
      StringTokenizer stringTokenizer0 = new StringTokenizer(charArray0, (StringMatcher) null, (StringMatcher) null);
      StringTokenizer stringTokenizer1 = (StringTokenizer)stringTokenizer0.clone();
      assertEquals((-1), stringTokenizer1.previousIndex());
      assertTrue(stringTokenizer1.isIgnoreEmptyTokens());
      assertNotSame(stringTokenizer1, stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      StringTokenizer stringTokenizer0 = StringTokenizer.getCSVInstance();
      String string0 = stringTokenizer0.getContent();
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals(0, stringTokenizer0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      char[] charArray0 = new char[7];
      StringTokenizer stringTokenizer0 = new StringTokenizer(charArray0, '}', 'n');
      String string0 = stringTokenizer0.getContent();
      assertNotNull(string0);
      assertTrue(stringTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      char[] charArray0 = new char[6];
      StringTokenizer stringTokenizer0 = new StringTokenizer(charArray0, (StringMatcher) null, (StringMatcher) null);
      StringTokenizer stringTokenizer1 = stringTokenizer0.setTrimmerMatcher((StringMatcher) null);
      assertTrue(stringTokenizer1.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[2] = 'P';
      StringTokenizer stringTokenizer0 = StringTokenizer.getCSVInstance(charArray0);
      stringTokenizer0.setQuoteChar('\u0000');
      // Undeclared exception!
      try { 
        stringTokenizer0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      StringTokenizer stringTokenizer0 = StringTokenizer.getCSVInstance(charArray0);
      // Undeclared exception!
      try { 
        stringTokenizer0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      char[] charArray0 = new char[4];
      StringTokenizer stringTokenizer0 = StringTokenizer.getCSVInstance(charArray0);
      stringTokenizer0.setQuoteChar('\u0000');
      // Undeclared exception!
      try { 
        stringTokenizer0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      StringTokenizer stringTokenizer0 = StringTokenizer.getTSVInstance(" \t\n\r\f");
      boolean boolean0 = stringTokenizer0.hasNext();
      assertTrue(boolean0);
      assertEquals((-1), stringTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      char[] charArray0 = new char[4];
      StringTokenizer stringTokenizer0 = StringTokenizer.getTSVInstance(charArray0);
      StringTokenizer stringTokenizer1 = stringTokenizer0.setEmptyTokenAsNull(true);
      stringTokenizer0.next();
      String string0 = stringTokenizer1.previous();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      StringMatcher stringMatcher0 = mock(StringMatcher.class, new ViolatedAssumptionAnswer());
      StringTokenizer stringTokenizer0 = new StringTokenizer("Arguments cannot both be null", stringMatcher0);
      char[] charArray0 = new char[6];
      stringTokenizer0.tokenize(charArray0, 10, 0);
      assertTrue(stringTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      StringTokenizer stringTokenizer0 = StringTokenizer.getTSVInstance("{B!");
      stringTokenizer0.next();
      // Undeclared exception!
      try { 
        stringTokenizer0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.text.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer();
      assertTrue(stringTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("StringTokenizer[not tokenized yet]");
      int int0 = stringTokenizer0.previousIndex();
      assertEquals((-1), int0);
      assertTrue(stringTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      char[] charArray0 = new char[4];
      StringTokenizer stringTokenizer0 = StringTokenizer.getTSVInstance(charArray0);
      // Undeclared exception!
      try { 
        stringTokenizer0.add("Object varargs must not be null");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is unsupported
         //
         verifyException("org.apache.commons.text.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer((String) null, 'm', ';');
      int int0 = stringTokenizer0.nextIndex();
      assertEquals(0, int0);
      assertTrue(stringTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      StringTokenizer stringTokenizer0 = StringTokenizer.getTSVInstance();
      // Undeclared exception!
      try { 
        stringTokenizer0.set("Wr0");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // set() is unsupported
         //
         verifyException("org.apache.commons.text.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      StringTokenizer stringTokenizer0 = StringTokenizer.getCSVInstance();
      // Undeclared exception!
      try { 
        stringTokenizer0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove() is unsupported
         //
         verifyException("org.apache.commons.text.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      StringMatcher stringMatcher0 = mock(StringMatcher.class, new ViolatedAssumptionAnswer());
      StringMatcher stringMatcher1 = mock(StringMatcher.class, new ViolatedAssumptionAnswer());
      StringTokenizer stringTokenizer0 = new StringTokenizer("", stringMatcher0, stringMatcher1);
      assertTrue(stringTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      char[] charArray0 = new char[4];
      StringTokenizer stringTokenizer0 = new StringTokenizer(charArray0, (StringMatcher) null, (StringMatcher) null);
      int int0 = stringTokenizer0.size();
      assertEquals(1, int0);
  }
}
