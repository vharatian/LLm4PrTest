/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 21:48:36 GMT 2025
 */

package org.apache.commons.text.similarity;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.text.similarity.IntersectionResult;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class IntersectionResult_ESTest extends IntersectionResult_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IntersectionResult intersectionResult0 = new IntersectionResult(3659, 3659, 3659);
      IntersectionResult intersectionResult1 = new IntersectionResult(3659, 3659, 2);
      boolean boolean0 = intersectionResult1.equals(intersectionResult0);
      assertFalse(intersectionResult0.equals((Object)intersectionResult1));
      assertEquals(2, intersectionResult1.getIntersection());
      assertFalse(boolean0);
      assertEquals(3659, intersectionResult1.getSizeB());
      assertEquals(3659, intersectionResult1.getSizeA());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IntersectionResult intersectionResult0 = new IntersectionResult(2, 1451, 2);
      IntersectionResult intersectionResult1 = new IntersectionResult(2, 2, 2);
      boolean boolean0 = intersectionResult0.equals(intersectionResult1);
      assertEquals(1451, intersectionResult0.getSizeB());
      assertFalse(intersectionResult1.equals((Object)intersectionResult0));
      assertFalse(boolean0);
      assertEquals(2, intersectionResult0.getSizeA());
      assertEquals(2, intersectionResult0.getIntersection());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IntersectionResult intersectionResult0 = new IntersectionResult(3659, 3659, 3659);
      IntersectionResult intersectionResult1 = new IntersectionResult(3680, 3680, 3659);
      boolean boolean0 = intersectionResult0.equals(intersectionResult1);
      assertEquals(3680, intersectionResult1.getSizeA());
      assertEquals(3680, intersectionResult1.getSizeB());
      assertFalse(boolean0);
      assertEquals(3659, intersectionResult1.getIntersection());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IntersectionResult intersectionResult0 = new IntersectionResult(0, 0, 0);
      int int0 = intersectionResult0.getSizeB();
      assertEquals(0, intersectionResult0.getIntersection());
      assertEquals(0, intersectionResult0.getSizeA());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IntersectionResult intersectionResult0 = new IntersectionResult(0, 0, 0);
      int int0 = intersectionResult0.getSizeA();
      assertEquals(0, intersectionResult0.getIntersection());
      assertEquals(0, int0);
      assertEquals(0, intersectionResult0.getSizeB());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IntersectionResult intersectionResult0 = new IntersectionResult(0, 0, 0);
      int int0 = intersectionResult0.getIntersection();
      assertEquals(0, int0);
      assertEquals(0, intersectionResult0.getSizeA());
      assertEquals(0, intersectionResult0.getSizeB());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IntersectionResult intersectionResult0 = new IntersectionResult(2, 1451, 2);
      IntersectionResult intersectionResult1 = new IntersectionResult(2, 1451, 2);
      boolean boolean0 = intersectionResult0.equals(intersectionResult1);
      assertEquals(1451, intersectionResult1.getSizeB());
      assertEquals(2, intersectionResult1.getIntersection());
      assertEquals(2, intersectionResult1.getSizeA());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IntersectionResult intersectionResult0 = new IntersectionResult(2, 1451, 2);
      IntersectionResult intersectionResult1 = new IntersectionResult(2, 2, 2);
      boolean boolean0 = intersectionResult1.equals(intersectionResult0);
      assertFalse(boolean0);
      assertEquals(2, intersectionResult0.getSizeA());
      assertFalse(intersectionResult0.equals((Object)intersectionResult1));
      assertEquals(2, intersectionResult0.getIntersection());
      assertEquals(1451, intersectionResult0.getSizeB());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IntersectionResult intersectionResult0 = new IntersectionResult(3659, 3659, 3659);
      IntersectionResult intersectionResult1 = new IntersectionResult(1, 1, 1);
      boolean boolean0 = intersectionResult0.equals(intersectionResult1);
      assertEquals(1, intersectionResult1.getSizeB());
      assertEquals(1, intersectionResult1.getSizeA());
      assertFalse(boolean0);
      assertEquals(1, intersectionResult1.getIntersection());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IntersectionResult intersectionResult0 = new IntersectionResult(1316, 1316, 1316);
      IntersectionResult intersectionResult1 = new IntersectionResult(1316, 1316, 0);
      boolean boolean0 = intersectionResult0.equals(intersectionResult1);
      assertFalse(boolean0);
      assertEquals(1316, intersectionResult0.getIntersection());
      assertFalse(intersectionResult1.equals((Object)intersectionResult0));
      assertEquals(1316, intersectionResult1.getSizeB());
      assertEquals(1316, intersectionResult1.getSizeA());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IntersectionResult intersectionResult0 = new IntersectionResult(2, 1451, 2);
      boolean boolean0 = intersectionResult0.equals((Object) null);
      assertEquals(2, intersectionResult0.getSizeA());
      assertFalse(boolean0);
      assertEquals(2, intersectionResult0.getIntersection());
      assertEquals(1451, intersectionResult0.getSizeB());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IntersectionResult intersectionResult0 = new IntersectionResult(3659, 3659, 3659);
      boolean boolean0 = intersectionResult0.equals(intersectionResult0);
      assertEquals(3659, intersectionResult0.getSizeB());
      assertEquals(3659, intersectionResult0.getSizeA());
      assertEquals(3659, intersectionResult0.getIntersection());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IntersectionResult intersectionResult0 = new IntersectionResult(1316, 1316, 1316);
      boolean boolean0 = intersectionResult0.equals("Size A: 1316, Size B: 1316, Intersection: 1316");
      assertEquals(1316, intersectionResult0.getSizeB());
      assertFalse(boolean0);
      assertEquals(1316, intersectionResult0.getSizeA());
      assertEquals(1316, intersectionResult0.getIntersection());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IntersectionResult intersectionResult0 = null;
      try {
        intersectionResult0 = new IntersectionResult(2, 2, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid intersection of |A| and |B|: 3
         //
         verifyException("org.apache.commons.text.similarity.IntersectionResult", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IntersectionResult intersectionResult0 = null;
      try {
        intersectionResult0 = new IntersectionResult(3659, 3659, (-3989));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid intersection of |A| and |B|: -3989
         //
         verifyException("org.apache.commons.text.similarity.IntersectionResult", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IntersectionResult intersectionResult0 = null;
      try {
        intersectionResult0 = new IntersectionResult(1, (-196), (-945));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Set size |B| is not positive: -196
         //
         verifyException("org.apache.commons.text.similarity.IntersectionResult", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IntersectionResult intersectionResult0 = null;
      try {
        intersectionResult0 = new IntersectionResult((-253), 0, 867);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Set size |A| is not positive: -253
         //
         verifyException("org.apache.commons.text.similarity.IntersectionResult", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IntersectionResult intersectionResult0 = new IntersectionResult(1316, 1316, 1316);
      String string0 = intersectionResult0.toString();
      assertEquals("Size A: 1316, Size B: 1316, Intersection: 1316", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IntersectionResult intersectionResult0 = new IntersectionResult(1316, 1316, 1316);
      int int0 = intersectionResult0.getIntersection();
      assertEquals(1316, int0);
      assertEquals(1316, intersectionResult0.getSizeB());
      assertEquals(1316, intersectionResult0.getSizeA());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IntersectionResult intersectionResult0 = new IntersectionResult(1316, 1316, 1316);
      int int0 = intersectionResult0.getSizeB();
      assertEquals(1316, int0);
      assertEquals(1316, intersectionResult0.getIntersection());
      assertEquals(1316, intersectionResult0.getSizeA());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IntersectionResult intersectionResult0 = new IntersectionResult(1316, 1316, 1316);
      int int0 = intersectionResult0.getSizeA();
      assertEquals(1316, intersectionResult0.getSizeB());
      assertEquals(1316, int0);
      assertEquals(1316, intersectionResult0.getIntersection());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IntersectionResult intersectionResult0 = new IntersectionResult(1316, 1316, 1316);
      intersectionResult0.hashCode();
      assertEquals(1316, intersectionResult0.getSizeB());
      assertEquals(1316, intersectionResult0.getSizeA());
      assertEquals(1316, intersectionResult0.getIntersection());
  }
}
