/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 12:07:26 GMT 2025
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringReader;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.ExtendedBufferedReader;
import org.apache.commons.csv.Lexer;
import org.apache.commons.csv.Token;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Lexer_ESTest extends Lexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(pipedReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      boolean boolean0 = lexer0.isStartOfLine((-2246));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Lexer lexer0 = new Lexer(cSVFormat0, (ExtendedBufferedReader) null);
      boolean boolean0 = lexer0.isQuoteChar(275);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("](p#a18A4Q@FQT}(M;F");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      int int0 = lexer0.readEscape();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      StringReader stringReader0 = new StringReader("");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      boolean boolean0 = lexer0.isEscapeDelimiter();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      StringReader stringReader0 = new StringReader("qpQ6B");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      boolean boolean0 = lexer0.isCommentStart(65549);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringReader stringReader0 = new StringReader("Unexpected Quote value: ");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      lexer0.close();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Lexer lexer0 = new Lexer(cSVFormat0, (ExtendedBufferedReader) null);
      boolean boolean0 = lexer0.isStartOfLine(275);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Lexer lexer0 = new Lexer(cSVFormat0, (ExtendedBufferedReader) null);
      boolean boolean0 = lexer0.isQuoteChar(172);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedReader pipedReader0 = new PipedReader();
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(pipedReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      boolean boolean0 = lexer0.isEscape(9);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringReader stringReader0 = new StringReader("xRe12yba>^al");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      boolean boolean0 = lexer0.isEndOfFile((-1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Lexer lexer0 = new Lexer(cSVFormat0, (ExtendedBufferedReader) null);
      boolean boolean0 = lexer0.isEndOfFile(59);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedReader pipedReader0 = new PipedReader();
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(pipedReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      boolean boolean0 = lexer0.isDelimiter(9);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      PipedReader pipedReader0 = new PipedReader();
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(pipedReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      boolean boolean0 = lexer0.isDelimiter(372);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      PipedReader pipedReader0 = new PipedReader();
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(pipedReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      boolean boolean0 = lexer0.isCommentStart(9);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(pipedReader0);
      extendedBufferedReader0.close();
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      boolean boolean0 = lexer0.isClosed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringReader stringReader0 = new StringReader("|n'cKW/(/tb>0");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      boolean boolean0 = lexer0.readEndOfLine(13);
      assertTrue(boolean0);
      
      String string0 = lexer0.getFirstEol();
      assertEquals("\r", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringReader stringReader0 = new StringReader("|n'cKW/(/tb>0");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      lexer0.readEscape();
      long long0 = lexer0.getCurrentLineNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#.W=NyRaTE");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Token token0 = new Token();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      lexer0.nextToken(token0);
      long long0 = lexer0.getCharacterPosition();
      assertEquals(11L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedReader pipedReader0 = new PipedReader();
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(pipedReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      // Undeclared exception!
      try { 
        lexer0.trimTrailingSpaces((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Lexer lexer0 = new Lexer(cSVFormat0, (ExtendedBufferedReader) null);
      // Undeclared exception!
      try { 
        lexer0.readEscape();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedReader pipedReader0 = new PipedReader();
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(pipedReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      try { 
        lexer0.readEndOfLine(13);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      Lexer lexer0 = new Lexer(cSVFormat0, (ExtendedBufferedReader) null);
      Token token0 = new Token();
      // Undeclared exception!
      try { 
        lexer0.nextToken(token0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedReader pipedReader0 = new PipedReader();
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(pipedReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      Token token0 = new Token();
      try { 
        lexer0.nextToken(token0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Lexer lexer0 = new Lexer(cSVFormat0, (ExtendedBufferedReader) null);
      // Undeclared exception!
      try { 
        lexer0.isEscapeDelimiter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      PipedReader pipedReader0 = new PipedReader();
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(pipedReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      try { 
        lexer0.isEscapeDelimiter();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Lexer lexer0 = new Lexer(cSVFormat0, (ExtendedBufferedReader) null);
      // Undeclared exception!
      try { 
        lexer0.isClosed();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      Lexer lexer0 = new Lexer(cSVFormat0, (ExtendedBufferedReader) null);
      // Undeclared exception!
      try { 
        lexer0.getCurrentLineNumber();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 65534);
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(pipedReader0);
      Lexer lexer0 = null;
      try {
        lexer0 = new Lexer((CSVFormat) null, extendedBufferedReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      StringReader stringReader0 = new StringReader("qpQ6B");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      boolean boolean0 = lexer0.isEscapeDelimiter();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      PipedReader pipedReader0 = new PipedReader();
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(pipedReader0);
      StringBuilder stringBuilder0 = new StringBuilder();
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      lexer0.trimTrailingSpaces(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringReader stringReader0 = new StringReader("QuoteMode=<");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      lexer0.readEscape();
      lexer0.readEscape();
      int int0 = lexer0.readEscape();
      assertEquals((-1), int0);
      
      int int1 = lexer0.readEscape();
      assertEquals(9, int1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.apache.commons.io.file.CountingPathVisitor");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      int int0 = lexer0.readEscape();
      assertEquals((-1), int0);
      
      int int1 = lexer0.readEscape();
      assertEquals(13, int1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringReader stringReader0 = new StringReader("|n'cKW/(/tb>0");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      int int0 = lexer0.readEscape();
      assertEquals((-1), int0);
      
      int int1 = lexer0.readEscape();
      assertEquals(10, int1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringReader stringReader0 = new StringReader("fh\"@.GrO$:^h47OP");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      int int0 = lexer0.readEscape();
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      StringReader stringReader0 = new StringReader("ETM)z&d:(W?_/cS<wr");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      Token token0 = new Token();
      lexer0.nextToken(token0);
      try { 
        lexer0.readEscape();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // EOF whilst processing escape sequence
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringReader stringReader0 = new StringReader("|n'cKW/(/tb>0");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      boolean boolean0 = lexer0.readEndOfLine(10);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringReader stringReader0 = new StringReader("|n'cKW/(/tb>0");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      boolean boolean0 = lexer0.readEndOfLine(13);
      boolean boolean1 = lexer0.readEndOfLine((-1326));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_TSV;
      StringReader stringReader0 = new StringReader("");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      Token token0 = new Token();
      Token token1 = lexer0.nextToken(token0);
      assertSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      PipedReader pipedReader0 = new PipedReader();
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(pipedReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      boolean boolean0 = lexer0.isWhitespace(10);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringReader stringReader0 = new StringReader("(line ");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      Token token0 = new Token();
      Token token1 = lexer0.nextToken(token0);
      assertSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedReader pipedReader0 = new PipedReader();
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(pipedReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      boolean boolean0 = lexer0.isWhitespace(9);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      StringReader stringReader0 = new StringReader("ETM)z&d:(W?_/cS<wr");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      lexer0.readEscape();
      Token token0 = new Token();
      Token token1 = lexer0.nextToken(token0);
      assertSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Lexer lexer0 = new Lexer(cSVFormat0, (ExtendedBufferedReader) null);
      boolean boolean0 = lexer0.isStartOfLine(13);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringReader stringReader0 = new StringReader("#.W=NyRaTE");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      boolean boolean0 = lexer0.isStartOfLine(10);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringReader stringReader0 = new StringReader("O3");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      int int0 = lexer0.readEscape();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringReader stringReader0 = new StringReader("6G`LQuix';,jxhsOE");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      Token token0 = new Token();
      Token token1 = lexer0.nextToken(token0);
      assertSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      StringReader stringReader0 = new StringReader("qpQ6B");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      boolean boolean0 = lexer0.isCommentStart(65534);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      StringReader stringReader0 = new StringReader("ETM)z&d:(W?_/cS<wr");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      Token token0 = new Token();
      Token token1 = lexer0.nextToken(token0);
      Token token2 = lexer0.nextToken(token1);
      assertSame(token2, token0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedReader pipedReader0 = new PipedReader();
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(pipedReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      boolean boolean0 = lexer0.isClosed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringReader stringReader0 = new StringReader("|n'cKW/(/tb>0");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      long long0 = lexer0.getCurrentLineNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Lexer lexer0 = new Lexer(cSVFormat0, (ExtendedBufferedReader) null);
      // Undeclared exception!
      try { 
        lexer0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringReader stringReader0 = new StringReader("|n'cKW/(/tb>0");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      String string0 = lexer0.getFirstEol();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#.W=NyRaTE");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      long long0 = lexer0.getCharacterPosition();
      assertEquals(0L, long0);
  }
}
