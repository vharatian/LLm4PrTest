/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 12:01:39 GMT 2025
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringReader;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.ExtendedBufferedReader;
import org.apache.commons.csv.Lexer;
import org.apache.commons.csv.Token;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Lexer_ESTest extends Lexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringReader stringReader0 = new StringReader("?]");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      lexer0.readEscape();
      int int0 = lexer0.readEscape();
      assertEquals((-1), int0);
      
      boolean boolean0 = lexer0.readEndOfLine(13);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      PipedReader pipedReader0 = new PipedReader(1471);
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(pipedReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      boolean boolean0 = lexer0.isStartOfLine((-124));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\r\n");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      boolean boolean0 = lexer0.isEscapeDelimiter();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      StringReader stringReader0 = new StringReader("");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      boolean boolean0 = lexer0.isCommentStart(65546);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedReader pipedReader0 = new PipedReader();
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(pipedReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      boolean boolean0 = lexer0.readEndOfLine((-1807));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      PipedReader pipedReader0 = new PipedReader(172);
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(pipedReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      boolean boolean0 = lexer0.isStartOfLine(172);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      StringReader stringReader0 = new StringReader("\"o{Q*");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      boolean boolean0 = lexer0.isQuoteChar(34);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      StringReader stringReader0 = new StringReader("HzSMd-$4'/+6");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      boolean boolean0 = lexer0.isQuoteChar(3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringReader stringReader0 = new StringReader("?]");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      boolean boolean0 = lexer0.isEscape(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      Lexer lexer0 = new Lexer(cSVFormat0, (ExtendedBufferedReader) null);
      boolean boolean0 = lexer0.isEndOfFile((-1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringReader stringReader0 = new StringReader("?]");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      boolean boolean0 = lexer0.isEndOfFile(13);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringReader stringReader0 = new StringReader("?]");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      boolean boolean0 = lexer0.isDelimiter(9);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Lexer lexer0 = new Lexer(cSVFormat0, (ExtendedBufferedReader) null);
      boolean boolean0 = lexer0.isDelimiter((-31));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      PipedReader pipedReader0 = new PipedReader(172);
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(pipedReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      boolean boolean0 = lexer0.isCommentStart(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      StringReader stringReader0 = new StringReader("HzSMd-$4'/+6");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      lexer0.close();
      boolean boolean0 = lexer0.isClosed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m,6@Gz`");
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      lexer0.readEndOfLine(10);
      String string0 = lexer0.getFirstEol();
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringReader stringReader0 = new StringReader("\r\n");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      lexer0.readEscape();
      long long0 = lexer0.getCurrentLineNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringReader stringReader0 = new StringReader("=Kjd+");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      lexer0.readEscape();
      long long0 = lexer0.getCharacterPosition();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\r\n");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      // Undeclared exception!
      try { 
        lexer0.trimTrailingSpaces((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Lexer lexer0 = new Lexer(cSVFormat0, (ExtendedBufferedReader) null);
      // Undeclared exception!
      try { 
        lexer0.readEscape();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      StringReader stringReader0 = new StringReader("HzSMd-$4'/+6");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      lexer0.close();
      try { 
        lexer0.readEndOfLine(13);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"o{Q[W*");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      // Undeclared exception!
      try { 
        lexer0.nextToken((Token) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      Lexer lexer0 = new Lexer(cSVFormat0, (ExtendedBufferedReader) null);
      // Undeclared exception!
      try { 
        lexer0.isEscapeDelimiter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(pipedReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      extendedBufferedReader0.close();
      try { 
        lexer0.isEscapeDelimiter();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      Lexer lexer0 = new Lexer(cSVFormat0, (ExtendedBufferedReader) null);
      // Undeclared exception!
      try { 
        lexer0.isClosed();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      Lexer lexer0 = new Lexer(cSVFormat0, (ExtendedBufferedReader) null);
      // Undeclared exception!
      try { 
        lexer0.getCurrentLineNumber();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Lexer lexer0 = new Lexer(cSVFormat0, (ExtendedBufferedReader) null);
      // Undeclared exception!
      try { 
        lexer0.getCharacterPosition();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      Lexer lexer0 = new Lexer(cSVFormat0, (ExtendedBufferedReader) null);
      // Undeclared exception!
      try { 
        lexer0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(pipedReader0);
      Lexer lexer0 = null;
      try {
        lexer0 = new Lexer((CSVFormat) null, extendedBufferedReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\r\n");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "\r\n");
      lexer0.trimTrailingSpaces(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"o{Q[W*");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      StringBuilder stringBuilder0 = new StringBuilder(41);
      lexer0.trimTrailingSpaces(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      StringReader stringReader0 = new StringReader("tS1");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      int int0 = lexer0.readEscape();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringReader stringReader0 = new StringReader("rv");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      int int0 = lexer0.readEscape();
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("net.bytebuddy.build.CachedReturnPlugin$CacheFieldOffsetMapping");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      int int0 = lexer0.readEscape();
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('Q');
      StringReader stringReader0 = new StringReader("file");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      int int0 = lexer0.readEscape();
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\r\n");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      lexer0.readEscape();
      int int0 = lexer0.readEscape();
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringReader stringReader0 = new StringReader("zmb");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      lexer0.readEscape();
      lexer0.readEscape();
      lexer0.readEscape();
      try { 
        lexer0.readEscape();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // EOF whilst processing escape sequence
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringReader stringReader0 = new StringReader("?]");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      boolean boolean0 = lexer0.readEndOfLine(13);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\r\n");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      Token token0 = new Token();
      Token token1 = lexer0.nextToken(token0);
      assertSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m,6@GvL");
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Token token0 = new Token();
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      lexer0.readEscape();
      Token token1 = lexer0.nextToken(token0);
      assertSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('#');
      StringReader stringReader0 = new StringReader("");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      Token token0 = new Token();
      Token token1 = lexer0.nextToken(token0);
      assertSame(token0, token1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\r\n");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Token token0 = new Token();
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      Token token1 = lexer0.nextToken(token0);
      Token token2 = lexer0.nextToken(token0);
      assertSame(token2, token1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringReader stringReader0 = new StringReader("\r\n");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      lexer0.readEscape();
      Token token0 = new Token();
      Token token1 = lexer0.nextToken(token0);
      assertSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      Lexer lexer0 = new Lexer(cSVFormat0, (ExtendedBufferedReader) null);
      boolean boolean0 = lexer0.isStartOfLine(10);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"o{Q[W*");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Token token0 = new Token();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      try { 
        lexer0.nextToken(token0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (startline 1) EOF reached before encapsulated token finished
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"o{Q[W*");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      int int0 = lexer0.readEscape();
      assertEquals(34, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"o{Q[W*");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      int int0 = lexer0.readEscape();
      assertEquals(34, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringReader stringReader0 = new StringReader("=Kjd+");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      boolean boolean0 = lexer0.isEscapeDelimiter();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m,6@Gz`");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      extendedBufferedReader0.skip(1L);
      boolean boolean0 = lexer0.isEscapeDelimiter();
      Token token0 = new Token();
      lexer0.nextToken(token0);
      boolean boolean1 = lexer0.isEscapeDelimiter();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m,6@Gz`");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      Token token0 = new Token();
      Token token1 = lexer0.nextToken(token0);
      assertSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringReader stringReader0 = new StringReader("?]");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      boolean boolean0 = lexer0.isCommentStart(65534);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*,6@0z`");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Token token0 = new Token();
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      Token token1 = lexer0.nextToken(token0);
      assertSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringReader stringReader0 = new StringReader("=Kjd+");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      boolean boolean0 = lexer0.isClosed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringReader stringReader0 = new StringReader("\r\n");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      long long0 = lexer0.getCurrentLineNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m,6@Gz`");
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      String string0 = lexer0.getFirstEol();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringReader stringReader0 = new StringReader("=Kjd+");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      Lexer lexer0 = new Lexer(cSVFormat0, extendedBufferedReader0);
      long long0 = lexer0.getCharacterPosition();
      assertEquals(0L, long0);
  }
}
