/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 11:59:16 GMT 2025
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringReader;
import java.util.HashMap;
import java.util.stream.Stream;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CSVRecord_ESTest extends CSVRecord_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVParser cSVParser0 = CSVParser.parse("No header mapping was specified, the record values can't be accessed by name", cSVFormat0);
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, (String[]) null, "Index for header '%s' is %d but CSVRecord only has %d values!", (-1L), 46);
      boolean boolean0 = cSVRecord0.isSet(0);
      assertEquals((-1L), cSVRecord0.getRecordNumber());
      assertEquals(46L, cSVRecord0.getCharacterPosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, (String[]) null, "2xi[#jd", 0L, 0L);
      String[] stringArray0 = cSVRecord0.values();
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("Lje%,&gl3UX+:6jv`", cSVFormat0);
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, (String[]) null, "Lje%,&gl3UX+:6jv`", 479L, 479L);
      cSVRecord0.size();
      assertEquals(479L, cSVRecord0.getRecordNumber());
      assertEquals(479L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_TSV;
      CSVParser cSVParser0 = CSVParser.parse("0z%'I%hkR:wjDp&", cSVFormat0);
      String[] stringArray0 = new String[8];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "", 0L, 0L);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = cSVRecord0.putIn(hashMap0);
      assertSame(hashMap1, hashMap0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("Lje%,&gl3UX+:6jv`", cSVFormat0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("WA>ys1#rc*HigTymW@}", "IV-UX<0&Q<o[{N");
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, (String[]) null, "[YjNaDxqTj}[g", 1L, (-289L));
      cSVRecord0.putIn(hashMap0);
      assertEquals((-289L), cSVRecord0.getCharacterPosition());
      assertEquals(1L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVParser cSVParser0 = CSVParser.parse("Lje%,&gl3UX+:6jv`", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      cSVRecord0.iterator();
      assertEquals(0L, cSVRecord0.getCharacterPosition());
      assertEquals(1L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("Lje%,&gl3UX+:6jv`", cSVFormat0);
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, (String[]) null, "Lje%,&gl3UX+:6jv`", 479L, 479L);
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals(479L, long0);
      assertEquals(479L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVParser cSVParser0 = CSVParser.parse("No header mapping was specified, the record values can't be accessed by name", cSVFormat0);
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, (String[]) null, "Index for header '%s' is %d but CSVRecord only has %d values!", (-1L), 46);
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals((-1L), long0);
      assertEquals(46L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[5];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "J~<E", (-1313L), 2377L);
      cSVRecord0.getParser();
      assertEquals((-1313L), cSVRecord0.getRecordNumber());
      assertEquals(2377L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("Lje%,&gl3UX+:6jv`", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      cSVRecord0.getParser();
      assertEquals(0L, cSVRecord0.getCharacterPosition());
      assertEquals(1L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVParser cSVParser0 = CSVParser.parse("No header mapping was specified, the record values can't be accessed by name", cSVFormat0);
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, (String[]) null, (String) null, (-1080L), 46L);
      cSVRecord0.getComment();
      assertEquals(46L, cSVRecord0.getCharacterPosition());
      assertEquals((-1080L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[8];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "", 1L, (-1880L));
      cSVRecord0.getComment();
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals((-1880L), cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVParser cSVParser0 = CSVParser.parse("z[", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      long long0 = cSVRecord0.getCharacterPosition();
      assertEquals(0L, long0);
      assertEquals(1L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("Lje%,&gl3UX+:6jv`", cSVFormat0);
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, (String[]) null, "Lje%,&gl3UX+:6jv`", 479L, 479L);
      long long0 = cSVRecord0.getCharacterPosition();
      assertEquals(479L, cSVRecord0.getRecordNumber());
      assertEquals(479L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("OK51EN", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      cSVRecord0.get(0);
      assertEquals(0L, cSVRecord0.getCharacterPosition());
      assertEquals(1L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("Lje%,&gl3UX+:6jv`", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      cSVRecord0.putIn((HashMap<String, String>) null);
      assertEquals(0L, cSVRecord0.getCharacterPosition());
      assertEquals(1L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("Lje%,&gl3UX+:6jv`", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      cSVRecord0.isMapped("Lje%,&gl3UX+:6jv`");
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals(0L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[8];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "sNU78IM:6#", 1L, (-1880L));
      cSVRecord0.toList();
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals((-1880L), cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      StringReader stringReader0 = new StringReader("/<");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      boolean boolean0 = cSVRecord0.isSet(0);
      assertEquals(0L, cSVRecord0.getCharacterPosition());
      assertTrue(boolean0);
      assertEquals(1L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse(")%G&gl3U$T:6jv`", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      boolean boolean0 = cSVRecord0.isSet(7);
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertFalse(boolean0);
      assertEquals(0L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_TSV;
      CSVParser cSVParser0 = CSVParser.parse("0z%'I%hkR:wjDp&", cSVFormat0);
      String[] stringArray0 = new String[8];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "", 0L, 0L);
      boolean boolean0 = cSVRecord0.isSet((-631));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("Lje%,&gl3UX+:6jv`", cSVFormat0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = hashMap0.put("WA>ys1#rc*HigTymW@}", "IV-UX<0&Q<o[{N");
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, (String[]) null, "[YjNaDxqTj}[g", 1L, (-289L));
      boolean boolean0 = cSVRecord0.isSet(string0);
      assertEquals((-289L), cSVRecord0.getCharacterPosition());
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_TSV;
      CSVParser cSVParser0 = CSVParser.parse("0z%'I%hkR:wjDp&", cSVFormat0);
      String[] stringArray0 = new String[8];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "", 0L, 0L);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("Lje%,&gl3UX+:6jv`", cSVFormat0);
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, (String[]) null, "[YjNaDxqTj}[g", 1L, (-289L));
      boolean boolean0 = cSVRecord0.hasComment();
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals((-289L), cSVRecord0.getCharacterPosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVParser cSVParser0 = CSVParser.parse("No header mapping was specified, the record values can't be accessed by name", cSVFormat0);
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, (String[]) null, (String) null, (-1080L), 46L);
      boolean boolean0 = cSVRecord0.hasComment();
      assertEquals((-1080L), cSVRecord0.getRecordNumber());
      assertFalse(boolean0);
      assertEquals(46L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, (String[]) null, "/6/<n4_1_o.F/Y", (-920L), (-920L));
      // Undeclared exception!
      try { 
        cSVRecord0.get("Lje%,&gl3UX+:6jv`");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No header mapping was specified, the record values can't be accessed by name
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("Lje%,&gl3UX+:6jv`", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      cSVRecord0.size();
      assertEquals(0L, cSVRecord0.getCharacterPosition());
      assertEquals(1L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_TSV;
      CSVParser cSVParser0 = CSVParser.parse("0z%'I%hkR:wjDp&", cSVFormat0);
      String[] stringArray0 = new String[8];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "", 0L, 0L);
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("Lje%,&gl3UX+:6jv`", cSVFormat0);
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, (String[]) null, "[YjNaDxqTj}[g", 1L, (-289L));
      cSVRecord0.getParser();
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals((-289L), cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, (String[]) null, "2xi[#jd", 0L, 0L);
      // Undeclared exception!
      try { 
        cSVRecord0.get(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_TSV;
      CSVParser cSVParser0 = CSVParser.parse("0z%'I%hkR:wjDp&", cSVFormat0);
      String[] stringArray0 = new String[8];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "", 0L, 0L);
      String string0 = cSVRecord0.toString();
      assertEquals("CSVRecord [comment='', recordNumber=0, values=[null, null, null, null, null, null, null, null]]", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVParser cSVParser0 = CSVParser.parse("z[", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      cSVRecord0.toMap();
      assertEquals(0L, cSVRecord0.getCharacterPosition());
      assertEquals(1L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, (String[]) null, "2xi[#jd", 0L, 0L);
      Stream<String> stream0 = cSVRecord0.stream();
      assertNotNull(stream0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("Lje%,&gl3UX+:6jv`", cSVFormat0);
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, (String[]) null, "[YjNaDxqTj}[g", 1L, (-289L));
      cSVRecord0.getComment();
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals((-289L), cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("Lje%,&gl3UX+:6jv`", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      String[] stringArray0 = cSVRecord0.values();
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals(0L, cSVRecord0.getCharacterPosition());
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("Lje%,&gl3UX+:6jv`", cSVFormat0);
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, (String[]) null, "[YjNaDxqTj}[g", 1L, (-289L));
      long long0 = cSVRecord0.getCharacterPosition();
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals((-289L), long0);
  }
}
