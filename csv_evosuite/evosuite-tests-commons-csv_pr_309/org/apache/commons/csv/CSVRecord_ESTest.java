/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 11:25:17 GMT 2025
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.StringReader;
import java.util.HashMap;
import java.util.List;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CSVRecord_ESTest extends CSVRecord_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("uP8#+!wmC6SpS6s+xW>", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      boolean boolean0 = cSVRecord0.isSet(1);
      assertFalse(boolean0);
      assertEquals(0L, cSVRecord0.getCharacterPosition());
      assertEquals(1L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse(">7lqj?j97j:5t.p\"k64", cSVFormat0);
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, (String[]) null, ">7lqj?j97j:5t.p\"k64", 1L, 0L);
      cSVRecord0.values();
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals(0L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, (String[]) null, "org.apache.commons.csv.CSVRecord", 0L, 0L);
      List<String> list0 = cSVRecord0.toList();
      assertFalse(list0.contains("org.apache.commons.csv.CSVRecord"));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[13];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, " to declare exactly one property named value of an array type", 0L, 0L);
      HashMap<String, String> hashMap0 = cSVRecord0.putIn((HashMap<String, String>) null);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[5];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, " to declare exactly one property named value of an array type", 0L, 0L);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("A3", "`0FN=Bjo<@");
      HashMap<String, String> hashMap1 = cSVRecord0.putIn(hashMap0);
      assertFalse(hashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse(" ;`MOv%(Q03", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      cSVRecord0.iterator();
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals(0L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVParser cSVParser0 = CSVParser.parse("/[&ejK`4uh@!f", cSVFormat0);
      String[] stringArray0 = new String[9];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "The suffix must not be null", 0L, 0L);
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_TSV;
      CSVParser cSVParser0 = CSVParser.parse("', recordNumber=", cSVFormat0);
      String[] stringArray0 = new String[4];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, (String) null, (-2169L), (-2169L));
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals((-2169L), long0);
      assertEquals((-2169L), cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[5];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, " to declare exactly one property named value of an array type", 0L, 0L);
      CSVParser cSVParser0 = cSVRecord0.getParser();
      assertNull(cSVParser0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      StringReader stringReader0 = new StringReader("NU#BNJ");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, (String[]) null, "NU#BNJ", (-313L), (-313L));
      cSVRecord0.getParser();
      assertEquals((-313L), cSVRecord0.getCharacterPosition());
      assertEquals((-313L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse("<4=5", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      cSVRecord0.getParser();
      assertEquals(0L, cSVRecord0.getCharacterPosition());
      assertEquals(1L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse("<4=5", cSVFormat0);
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, (String[]) null, "{i", (-2197L), (-2197L));
      cSVRecord0.getComment();
      assertEquals((-2197L), cSVRecord0.getCharacterPosition());
      assertEquals((-2197L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      PipedReader pipedReader0 = new PipedReader(668);
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      String[] stringArray0 = new String[0];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "", 0L, 0L);
      String string0 = cSVRecord0.getComment();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVParser cSVParser0 = CSVParser.parse("<4=5", cSVFormat0);
      String[] stringArray0 = new String[2];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "<4=5", (-1), 518L);
      long long0 = cSVRecord0.getCharacterPosition();
      assertEquals((-1L), cSVRecord0.getRecordNumber());
      assertEquals(518L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVParser cSVParser0 = CSVParser.parse(" ;`Mv%(Q0", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertEquals(1, cSVRecord0.size());
      
      cSVRecord0.get(0);
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals(0L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_TSV;
      CSVParser cSVParser0 = CSVParser.parse("<4=5", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      cSVRecord0.putIn(hashMap0);
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals(1, cSVRecord0.size());
      assertEquals(0L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse("<4=5", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      cSVRecord0.isMapped("<4=5");
      assertEquals(1, cSVRecord0.size());
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals(0L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVParser cSVParser0 = CSVParser.parse("khqt[KpuQ*{|:w", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      cSVRecord0.stream();
      assertEquals(0L, cSVRecord0.getCharacterPosition());
      assertEquals(2, cSVRecord0.size());
      assertEquals(1L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("+6=5", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      List<String> list0 = cSVRecord0.toList();
      assertEquals(0L, cSVRecord0.getCharacterPosition());
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertTrue(list0.contains("+6=5"));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse("<4=5", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      boolean boolean0 = cSVRecord0.isSet(0);
      assertTrue(boolean0);
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals(0L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      PipedReader pipedReader0 = new PipedReader(668);
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      String[] stringArray0 = new String[0];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "", 668, 668);
      boolean boolean0 = cSVRecord0.isSet(668);
      assertFalse(boolean0);
      assertEquals(668L, cSVRecord0.getCharacterPosition());
      assertEquals(668L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_TSV;
      CSVParser cSVParser0 = CSVParser.parse("<4=5", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      boolean boolean0 = cSVRecord0.isSet((-4162));
      assertFalse(boolean0);
      assertEquals(1, cSVRecord0.size());
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals(0L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      PipedReader pipedReader0 = new PipedReader(668);
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      String[] stringArray0 = new String[0];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "", 668, 668);
      boolean boolean0 = cSVRecord0.isSet("");
      assertEquals(668L, cSVRecord0.getRecordNumber());
      assertEquals(668L, cSVRecord0.getCharacterPosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      PipedReader pipedReader0 = new PipedReader(668);
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      String[] stringArray0 = new String[0];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "", 668, 668);
      boolean boolean0 = cSVRecord0.hasComment();
      assertEquals(668L, cSVRecord0.getCharacterPosition());
      assertEquals(668L, cSVRecord0.getRecordNumber());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse("<4=5", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      boolean boolean0 = cSVRecord0.hasComment();
      assertEquals(0L, cSVRecord0.getCharacterPosition());
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertFalse(boolean0);
      assertEquals(1, cSVRecord0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "sy:{QdSyaaR=-d$b", 1000L, 1000L);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertEquals(1000L, cSVRecord0.getCharacterPosition());
      assertTrue(boolean0);
      assertEquals(1000L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      PipedReader pipedReader0 = new PipedReader(668);
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      String[] stringArray0 = new String[0];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "", 668, 668);
      // Undeclared exception!
      try { 
        cSVRecord0.get("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No header mapping was specified, the record values can't be accessed by name
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse("<4=5", cSVFormat0);
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, (String[]) null, "{i", (-2197L), (-2197L));
      long long0 = cSVRecord0.getCharacterPosition();
      assertEquals((-2197L), long0);
      assertEquals((-2197L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse("<4=5", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      int int0 = cSVRecord0.size();
      assertEquals(1, int0);
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals(0L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("z+6=5", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals(0L, cSVRecord0.getCharacterPosition());
      assertEquals(1, cSVRecord0.size());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("net.bytebuddy.dynamic.loading.ByteArrayClassLoader$EmptyEnumeration");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0, (-1L), (-1L));
      String[] stringArray0 = new String[3];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "", 1L, 1L);
      cSVRecord0.getParser();
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals(1L, cSVRecord0.getCharacterPosition());
      assertEquals(3, cSVRecord0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_TSV;
      CSVParser cSVParser0 = CSVParser.parse("<4=5", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      // Undeclared exception!
      try { 
        cSVRecord0.get((-4162));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4162
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVParser cSVParser0 = CSVParser.parse("F%}51~Zp", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      String[] stringArray0 = cSVRecord0.values();
      assertEquals(1, stringArray0.length);
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals(0L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_TSV;
      CSVParser cSVParser0 = CSVParser.parse("<4=5", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      String string0 = cSVRecord0.toString();
      assertEquals("CSVRecord [comment='null', recordNumber=1, values=[<4=5]]", string0);
      assertEquals(0L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVParser cSVParser0 = CSVParser.parse("<4=5", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      cSVRecord0.toMap();
      assertEquals(0L, cSVRecord0.getCharacterPosition());
      assertEquals(1, cSVRecord0.size());
      assertEquals(1L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse("<4=5", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      long long0 = cSVRecord0.getCharacterPosition();
      assertEquals(1, cSVRecord0.size());
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse("<4=5", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      cSVRecord0.getComment();
      assertEquals(1, cSVRecord0.size());
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals(0L, cSVRecord0.getCharacterPosition());
  }
}
