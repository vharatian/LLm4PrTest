/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 12:15:19 GMT 2025
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.time.format.ResolverStyle;
import java.time.temporal.ChronoField;
import java.util.EnumSet;
import java.util.PriorityQueue;
import java.util.concurrent.Callable;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.TimeUnit;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.h2.tools.Csv;
import org.h2.tools.SimpleResultSet;
import org.h2.tools.SimpleRowSource;
import org.h2.value.ValueLong;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("A+p_&*0imA");
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      String[] stringArray0 = new String[1];
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      cSVPrinter0.printRecord((Object[]) stringArray0);
      assertEquals("A+p_&*0imA\r\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_TSV;
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print((Appendable) stringWriter0);
      SimpleResultSet simpleResultSet0 = new SimpleResultSet((SimpleRowSource) null);
      cSVPrinter0.printRecords((ResultSet) simpleResultSet0, true);
      assertEquals("\r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = cSVFormat0.printer();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      cSVPrinter0.printHeaders(simpleResultSet0);
      assertFalse(simpleResultSet0.isClosed());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print((Appendable) charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      Charset charset0 = Charset.defaultCharset();
      MockFile mockFile0 = new MockFile(";v1giBR");
      CSVPrinter cSVPrinter0 = cSVFormat0.print((File) mockFile0, charset0);
      cSVPrinter0.close(false);
      Object[] objectArray0 = new Object[2];
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      ValueLong valueLong0 = ValueLong.MIN;
      Reader reader0 = valueLong0.getReader();
      Csv csv0 = new Csv();
      String[] stringArray0 = new String[3];
      ResultSet resultSet0 = csv0.read(reader0, stringArray0);
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = cSVFormat0.printer();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      Csv csv0 = new Csv();
      ValueLong valueLong0 = ValueLong.MIN;
      Reader reader0 = valueLong0.getReader();
      String[] stringArray0 = new String[1];
      ResultSet resultSet0 = csv0.read(reader0, stringArray0);
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_TSV;
      MockPrintStream mockPrintStream0 = new MockPrintStream("B@*{n0o:2/<v.@zRKV");
      CSVPrinter cSVPrinter0 = cSVFormat0.print((Appendable) mockPrintStream0);
      PriorityQueue<MockFileReader> priorityQueue0 = new PriorityQueue<MockFileReader>();
      MockFileReader mockFileReader0 = new MockFileReader("B@*{n0o:2/<v.@zRKV");
      priorityQueue0.add(mockFileReader0);
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      ResolverStyle resolverStyle0 = ResolverStyle.LENIENT;
      ResolverStyle[] resolverStyleArray0 = new ResolverStyle[4];
      resolverStyleArray0[0] = resolverStyle0;
      resolverStyleArray0[1] = resolverStyle0;
      resolverStyleArray0[2] = resolverStyle0;
      resolverStyleArray0[3] = resolverStyle0;
      EnumSet<ResolverStyle> enumSet0 = EnumSet.of(resolverStyle0, resolverStyleArray0);
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) enumSet0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = cSVFormat0.printer();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      Charset charset0 = Charset.defaultCharset();
      MockFile mockFile0 = new MockFile(";v1giBR");
      CSVPrinter cSVPrinter0 = cSVFormat0.print((File) mockFile0, charset0);
      cSVPrinter0.close(false);
      ChronoField chronoField0 = ChronoField.MILLI_OF_DAY;
      EnumSet<ChronoField> enumSet0 = EnumSet.of(chronoField0, chronoField0);
      try { 
        cSVPrinter0.printRecords((Iterable<?>) enumSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      Charset charset0 = Charset.defaultCharset();
      MockFile mockFile0 = new MockFile(";v1giBR");
      CSVPrinter cSVPrinter0 = cSVFormat0.print((File) mockFile0, charset0);
      cSVPrinter0.close(true);
      Object[] objectArray0 = new Object[1];
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = cSVFormat0.printer();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_TSV;
      Charset charset0 = Charset.defaultCharset();
      MockFile mockFile0 = new MockFile("A+p_&*0imA", "A+p_&*0imA");
      CSVPrinter cSVPrinter0 = cSVFormat0.print((File) mockFile0, charset0);
      cSVPrinter0.close(false);
      SynchronousQueue<MockFileReader> synchronousQueue0 = new SynchronousQueue<MockFileReader>();
      try { 
        cSVPrinter0.printRecord((Iterable<?>) synchronousQueue0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      Charset charset0 = Charset.defaultCharset();
      MockFile mockFile0 = new MockFile("A+p_&*0imA", ";v1giBR");
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('[');
      CSVPrinter cSVPrinter0 = cSVFormat1.print((File) mockFile0, charset0);
      cSVPrinter0.close(false);
      try { 
        cSVPrinter0.printComment("org.h2.command.dml.SetTypes");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVPrinter cSVPrinter0 = cSVFormat0.printer();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(mockFileReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      MockFile mockFile0 = new MockFile(";cdUqJ |v");
      Charset charset0 = Charset.defaultCharset();
      CSVPrinter cSVPrinter0 = cSVFormat0.print((File) mockFile0, charset0);
      cSVPrinter0.close(true);
      try { 
        cSVPrinter0.close(true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "!h");
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // out
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print((Appendable) stringWriter0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(109, threadFactory0);
      Callable<MockFileReader> callable0 = (Callable<MockFileReader>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ScheduledFuture<MockFileReader> scheduledFuture0 = scheduledThreadPoolExecutor0.schedule(callable0, (long) 109, timeUnit0);
      delayQueue0.add((Delayed) scheduledFuture0);
      cSVPrinter0.printRecord((Iterable<?>) delayQueue0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_TSV;
      CSVPrinter cSVPrinter0 = cSVFormat0.printer();
      cSVPrinter0.printComment("SCALE INT");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = cSVFormat0.printer();
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print((Appendable) charBuffer0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVPrinter cSVPrinter0 = cSVFormat1.printer();
      cSVPrinter0.close(false);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVPrinter cSVPrinter0 = cSVFormat0.printer();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVPrinter cSVPrinter0 = cSVFormat0.printer();
      // Undeclared exception!
      try { 
        cSVPrinter0.printHeaders((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("A+p_&*0imA");
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVPrinter cSVPrinter0 = cSVFormat0.printer();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVPrinter cSVPrinter0 = cSVFormat0.printer();
      Csv csv0 = new Csv();
      ValueLong valueLong0 = ValueLong.MIN;
      Reader reader0 = valueLong0.getReader();
      String[] stringArray0 = new String[1];
      ResultSet resultSet0 = csv0.read(reader0, stringArray0);
      cSVPrinter0.printRecords(resultSet0);
      assertTrue(resultSet0.isClosed());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_TSV;
      CSVPrinter cSVPrinter0 = cSVFormat0.printer();
      ChronoField chronoField0 = ChronoField.SECOND_OF_MINUTE;
      EnumSet<ChronoField> enumSet0 = EnumSet.of(chronoField0, chronoField0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) enumSet0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('f');
      CSVPrinter cSVPrinter0 = cSVFormat1.printer();
      cSVPrinter0.print((Object) null);
      cSVPrinter0.printComment("ke_Bn*wj oK8 ");
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('5');
      CSVPrinter cSVPrinter0 = cSVFormat1.printer();
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      StringBuilder stringBuilder0 = new StringBuilder(4343);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      cSVPrinter0.close(true);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVPrinter cSVPrinter0 = cSVFormat1.printer();
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVPrinter cSVPrinter0 = cSVFormat1.printer();
      assertNotNull(cSVPrinter0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      ResolverStyle resolverStyle0 = ResolverStyle.STRICT;
      ResolverStyle[] resolverStyleArray0 = new ResolverStyle[1];
      resolverStyleArray0[0] = resolverStyle0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(resolverStyleArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "A+p_&*0imA");
      CSVPrinter cSVPrinter0 = cSVFormat1.print((Appendable) charBuffer0);
      assertNotNull(cSVPrinter0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      ResolverStyle[] resolverStyleArray0 = new ResolverStyle[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(resolverStyleArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "A+p_&*0imA");
      CSVPrinter cSVPrinter0 = cSVFormat1.print((Appendable) charBuffer0);
      assertNotNull(cSVPrinter0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_TSV;
      CSVPrinter cSVPrinter0 = cSVFormat0.printer();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVPrinter cSVPrinter0 = cSVFormat0.printer();
      ResolverStyle resolverStyle0 = ResolverStyle.SMART;
      ResolverStyle[] resolverStyleArray0 = new ResolverStyle[0];
      EnumSet<ResolverStyle> enumSet0 = EnumSet.of(resolverStyle0, resolverStyleArray0);
      cSVPrinter0.printRecords((Iterable<?>) enumSet0);
      assertTrue(enumSet0.contains(resolverStyle0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = cSVFormat0.printer();
      Appendable appendable0 = cSVPrinter0.getOut();
      assertNotNull(appendable0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      ResolverStyle resolverStyle0 = ResolverStyle.STRICT;
      ResolverStyle[] resolverStyleArray0 = new ResolverStyle[1];
      resolverStyleArray0[0] = resolverStyle0;
      EnumSet<ResolverStyle> enumSet0 = EnumSet.of(resolverStyle0, resolverStyleArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "A+p_&*0imA");
      CSVPrinter cSVPrinter0 = cSVFormat0.print((Appendable) charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) enumSet0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }
}
