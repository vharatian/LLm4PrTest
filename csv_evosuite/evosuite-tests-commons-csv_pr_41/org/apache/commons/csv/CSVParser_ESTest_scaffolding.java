/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Sat Aug 23 13:19:54 GMT 2025
 */

package org.apache.commons.csv;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class CSVParser_ESTest_scaffolding {

  @org.junit.Rule
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.csv.CSVParser"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("user.home", "/home/azureuser"); 
    java.lang.System.setProperty("user.dir", "/home/azureuser/LLm4PrTest/csv_experiments"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(CSVParser_ESTest_scaffolding.class.getClassLoader() ,
      "org.h2.jdbc.JdbcResultSetBackwardsCompat",
      "org.apache.commons.csv.CSVParser$CSVRecordIterator",
      "org.apache.commons.csv.Token",
      "org.apache.commons.csv.CSVRecord",
      "org.apache.commons.csv.Constants",
      "org.h2.tools.SimpleResultSet",
      "org.apache.commons.csv.Assertions",
      "org.h2.util.Utils",
      "org.apache.commons.csv.QuoteMode",
      "org.apache.commons.csv.CSVParser$1",
      "org.h2.tools.SimpleRowSource",
      "org.apache.commons.csv.CSVFormat",
      "org.apache.commons.csv.Lexer",
      "org.apache.commons.csv.CSVParser",
      "org.apache.commons.csv.Token$Type",
      "org.apache.commons.csv.CSVParser$Headers",
      "org.apache.commons.csv.CSVPrinter",
      "org.apache.commons.csv.ExtendedBufferedReader"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("java.util.function.Consumer", false, CSVParser_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(CSVParser_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.apache.commons.csv.CSVParser",
      "org.apache.commons.csv.CSVParser$CSVRecordIterator",
      "org.apache.commons.csv.CSVParser$Headers",
      "org.apache.commons.csv.Token$Type",
      "org.apache.commons.csv.CSVParser$1",
      "org.apache.commons.csv.Constants",
      "org.apache.commons.csv.CSVFormat",
      "org.h2.command.dml.SetTypes",
      "org.h2.engine.ConnectionInfo",
      "org.h2.util.Utils",
      "org.h2.util.MathUtils",
      "org.h2.engine.SysProperties",
      "org.h2.engine.Database",
      "org.h2.engine.Mode$ModeEnum",
      "org.h2.engine.Mode$UniqueIndexNullsHandling",
      "org.h2.util.StringUtils",
      "org.h2.util.JdbcUtils",
      "org.h2.Driver",
      "org.h2.util.IOUtils",
      "org.h2.message.DbException",
      "org.h2.api.ErrorCode",
      "org.h2.jdbc.JdbcSQLSyntaxErrorException",
      "org.h2.api.IntervalQualifier",
      "org.h2.api.IntervalQualifier$1",
      "org.h2.value.DataType",
      "org.h2.engine.Mode",
      "org.h2.util.TempFileDeleter",
      "org.h2.result.RowFactory$DefaultRowFactory",
      "org.h2.result.RowFactory",
      "org.h2.result.LocalResultFactory$DefaultLocalResultFactory",
      "org.h2.result.LocalResultFactory",
      "org.h2.store.fs.FileUtils",
      "org.h2.store.fs.FilePath",
      "org.h2.store.fs.FilePathDisk",
      "org.h2.compress.CompressLZF",
      "org.h2.store.fs.FileMemData$Cache",
      "org.h2.store.fs.FileMemData",
      "org.h2.store.fs.FilePathMem",
      "org.h2.store.fs.FilePathMemLZF",
      "org.h2.store.fs.FilePathNioMem",
      "org.h2.store.fs.FilePathNioMemLZF",
      "org.h2.store.fs.FilePathWrapper",
      "org.h2.store.fs.FilePathSplit",
      "org.h2.store.fs.FilePathNio",
      "org.h2.store.fs.FilePathNioMapped",
      "org.h2.store.fs.FilePathAsync",
      "org.h2.store.fs.FilePathZip",
      "org.h2.store.fs.FilePathRetryOnInterrupt",
      "org.h2.jdbc.JdbcSQLNonTransientConnectionException",
      "org.apache.commons.csv.Assertions",
      "org.apache.commons.csv.Token",
      "org.apache.commons.csv.Lexer",
      "org.apache.commons.csv.ExtendedBufferedReader",
      "org.h2.tools.SimpleResultSet",
      "org.h2.jdbc.JdbcSQLNonTransientException",
      "org.h2.message.TraceObject",
      "org.h2.jdbc.JdbcConnection",
      "org.h2.jdbc.JdbcSQLDataException",
      "org.h2.tools.Csv",
      "org.h2.engine.SessionWithState",
      "org.h2.engine.SessionRemote",
      "org.h2.value.CompareMode",
      "org.h2.engine.Engine",
      "org.h2.store.FileLock",
      "org.h2.store.FileLockMethod",
      "org.h2.value.VersionedValue",
      "org.h2.value.Value",
      "org.h2.value.ValueResultSet",
      "org.apache.commons.io.FilenameUtils",
      "org.apache.commons.io.IOCase",
      "org.h2.value.ValueLong",
      "org.apache.commons.csv.CSVFormat$Predefined",
      "org.h2.command.Prepared",
      "org.h2.command.dml.ScriptBase",
      "org.h2.command.dml.ScriptCommand",
      "org.h2.value.ValueTimestamp",
      "org.h2.util.DateTimeUtils",
      "org.apache.commons.csv.CSVRecord",
      "org.h2.jdbc.JdbcSQLFeatureNotSupportedException",
      "org.h2.value.ValueLob",
      "org.h2.value.ValueNull",
      "org.h2.value.ValueLobDb",
      "org.h2.store.RangeReader",
      "org.h2.value.ValueString",
      "org.h2.table.IndexColumn",
      "org.h2.util.Bits",
      "org.h2.value.ValueBytes",
      "org.h2.jdbc.JdbcLob",
      "org.h2.jdbc.JdbcSQLXML",
      "org.apache.commons.csv.CSVPrinter",
      "org.apache.commons.csv.CSVFormat$1",
      "org.h2.util.Tool",
      "org.h2.tools.Recover",
      "org.h2.expression.Expression",
      "org.h2.expression.Wildcard",
      "org.h2.value.ValueDouble",
      "org.h2.mvstore.db.MVTableEngine$Store",
      "org.h2.value.ValueFloat",
      "org.h2.command.dml.RunScriptCommand",
      "org.h2.value.ValueShort",
      "org.h2.value.ValueInterval",
      "org.h2.util.IntervalUtils",
      "org.h2.util.IntervalUtils$1",
      "org.h2.engine.DbObjectBase",
      "org.h2.schema.SchemaObjectBase",
      "org.h2.table.Table",
      "org.h2.table.TableLink",
      "org.h2.store.LobStorageFrontend",
      "org.h2.store.LobStorageRemoteInputStream",
      "org.h2.store.FileStore",
      "org.h2.store.fs.FileBase",
      "org.h2.store.fs.FileDisk",
      "org.h2.store.FileStoreInputStream",
      "org.h2.tools.CompressTool",
      "org.h2.store.Data",
      "org.h2.engine.RightOwner",
      "org.h2.engine.User",
      "org.h2.expression.Variable",
      "org.h2.expression.ValueExpression",
      "org.h2.expression.UnaryOperation",
      "org.h2.command.ddl.CreateSynonymData",
      "org.h2.engine.FunctionAlias",
      "org.h2.engine.SettingsBase",
      "org.h2.engine.DbSettings",
      "org.h2.message.TraceSystem",
      "org.h2.message.Trace",
      "org.h2.mvstore.db.MVTableEngine",
      "org.h2.mvstore.MVStore$Builder",
      "org.h2.mvstore.MVStoreTool",
      "org.h2.mvstore.db.MVTableEngine$1",
      "org.h2.mvstore.MVStore",
      "org.h2.mvstore.MVStore$TxCounter",
      "org.h2.mvstore.DataUtils",
      "org.h2.mvstore.FileStore",
      "org.h2.mvstore.FreeSpaceBitSet",
      "org.h2.mvstore.cache.CacheLongKeyLIRS$Config",
      "org.h2.mvstore.cache.CacheLongKeyLIRS",
      "org.h2.mvstore.cache.CacheLongKeyLIRS$Segment",
      "org.h2.mvstore.cache.CacheLongKeyLIRS$Entry",
      "org.h2.mvstore.MVMap",
      "org.h2.mvstore.type.StringDataType",
      "org.h2.mvstore.Page$PageReference",
      "org.h2.mvstore.Page",
      "org.h2.mvstore.Page$Leaf",
      "org.h2.mvstore.RootReference",
      "org.h2.mvstore.cache.FilePathCache",
      "org.h2.store.fs.FileNio",
      "org.h2.mvstore.Cursor",
      "org.h2.mvstore.CursorPos",
      "org.h2.mvstore.MVStore$BackgroundWriterThread",
      "org.h2.mvstore.tx.TransactionStore$2",
      "org.h2.mvstore.tx.TransactionStore",
      "org.h2.mvstore.db.ValueDataType",
      "org.h2.mvstore.tx.VersionedBitSet",
      "org.h2.mvstore.MVMap$BasicBuilder",
      "org.h2.mvstore.MVMap$Builder",
      "org.h2.mvstore.type.ObjectDataType",
      "org.h2.mvstore.type.ObjectDataType$AutoDetectDataType",
      "org.h2.mvstore.type.ObjectDataType$StringType",
      "org.h2.mvstore.MVMap$DecisionMaker$1",
      "org.h2.mvstore.MVMap$DecisionMaker$2",
      "org.h2.mvstore.MVMap$DecisionMaker$3",
      "org.h2.mvstore.MVMap$DecisionMaker$4",
      "org.h2.mvstore.MVMap$DecisionMaker$5",
      "org.h2.mvstore.MVMap$DecisionMaker",
      "org.h2.mvstore.MVMap$IntValueHolder",
      "org.h2.mvstore.MVMap$Decision",
      "org.h2.mvstore.MVMap$4",
      "org.h2.mvstore.tx.VersionedValueType",
      "org.h2.mvstore.tx.TransactionStore$ArrayType",
      "org.h2.schema.Schema",
      "org.h2.engine.Role",
      "org.h2.engine.Session",
      "org.h2.engine.Session$State",
      "org.h2.util.ColumnNamerConfiguration",
      "org.h2.command.ddl.CreateTableData",
      "org.h2.table.Column",
      "org.h2.value.TypeInfo",
      "org.h2.table.TableBase",
      "org.h2.table.RegularTable",
      "org.h2.mvstore.db.MVTable",
      "org.h2.index.BaseIndex",
      "org.h2.mvstore.db.MVPrimaryIndex",
      "org.h2.index.IndexType",
      "org.h2.mvstore.tx.Transaction",
      "org.h2.mvstore.tx.TransactionMap",
      "org.h2.mvstore.db.MVTable$TraceLockEvent",
      "org.h2.mvstore.db.MVDelegateIndex",
      "org.h2.command.Parser$1",
      "org.h2.command.Parser",
      "org.h2.result.SortOrder",
      "org.h2.mvstore.db.MVPrimaryIndex$MVStoreCursor",
      "org.h2.mvstore.tx.TransactionMap$TMIterator",
      "org.h2.mvstore.tx.TransactionMap$EntryIterator",
      "org.h2.table.TableView",
      "org.h2.engine.Setting",
      "org.h2.result.RowImpl",
      "org.h2.engine.MetaRecord",
      "org.h2.value.ValueInt",
      "org.h2.value.ValueCollectionBase",
      "org.h2.value.ValueArray",
      "org.h2.mvstore.tx.TxDecisionMaker",
      "org.h2.mvstore.tx.TxDecisionMaker$PutDecisionMaker",
      "org.h2.mvstore.tx.TxDecisionMaker$PutIfAbsentDecisionMaker",
      "org.h2.mvstore.tx.VersionedValueCommitted",
      "org.h2.mvstore.tx.VersionedValueUncommitted",
      "org.h2.store.LobStorageMap",
      "org.h2.mvstore.StreamStore",
      "org.h2.mvstore.tx.CommitDecisionMaker",
      "org.h2.mvstore.type.ObjectDataType$LongType",
      "org.h2.mvstore.type.ObjectDataType$IntegerType",
      "org.h2.engine.OnExitDatabaseCloser",
      "org.h2.mvstore.MVMap$2",
      "org.h2.mvstore.MVMap$2$1",
      "org.h2.mvstore.Chunk",
      "org.h2.mvstore.WriteBuffer",
      "org.h2.store.RangeInputStream",
      "org.h2.expression.Parameter",
      "org.h2.value.ValueTime",
      "org.h2.table.PageStoreTable",
      "org.h2.value.ValueDecimal",
      "org.h2.value.ValueByte",
      "org.h2.jdbc.JdbcClob",
      "org.h2.value.ExtTypeInfo",
      "org.h2.value.ExtTypeInfoGeometry",
      "org.h2.value.ValueGeometry",
      "org.h2.util.geometry.GeometryUtils$Target",
      "org.h2.util.geometry.GeometryUtils$EnvelopeAndDimensionSystemTarget",
      "org.h2.util.geometry.EWKTUtils",
      "org.h2.util.geometry.EWKTUtils$EWKTSource",
      "org.h2.jdbc.JdbcBlob",
      "org.h2.value.ValueStringIgnoreCase",
      "org.h2.value.ValueBoolean",
      "org.h2.jdbc.JdbcArray",
      "org.h2.index.IndexCondition",
      "org.h2.api.TimestampWithTimeZone",
      "org.h2.value.ValueTimestampTimeZone",
      "org.h2.expression.IntervalOperation",
      "org.h2.expression.IntervalOperation$1",
      "org.h2.value.ValueDate",
      "org.h2.value.ValueStringFixed",
      "org.h2.constraint.ConstraintActionType",
      "org.h2.expression.ExpressionList",
      "org.h2.result.SimpleResult",
      "org.h2.result.SimpleResult$Column",
      "org.h2.value.ValueUuid",
      "org.h2.value.ValueRow",
      "org.h2.table.TableSynonym",
      "org.h2.schema.Sequence",
      "org.h2.value.ExtTypeInfoEnum",
      "org.h2.mvstore.MVStore$1",
      "org.h2.mvstore.MVStore$ChunkIdsCollector",
      "org.h2.command.dml.Query",
      "org.h2.command.dml.Select",
      "org.h2.command.ddl.DefineCommand",
      "org.h2.command.ddl.CreateSchema",
      "org.h2.expression.analysis.WindowFrameBound",
      "org.h2.expression.analysis.WindowFrame",
      "org.apache.commons.csv.QuoteMode"
    );
  }
}
