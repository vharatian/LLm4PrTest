/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 13:22:18 GMT 2025
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.Reader;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.h2.expression.analysis.WindowFrameExclusion;
import org.h2.tools.Csv;
import org.h2.tools.SimpleResultSet;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CSVRecord_ESTest extends CSVRecord_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      Class<Locale.Category> class0 = Locale.Category.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVParser cSVParser0 = CSVParser.parse("+A", cSVFormat1);
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, (String[]) null, "c5;", (-358L), (-358L));
      cSVRecord0.toMap();
      assertEquals((-358L), cSVRecord0.getRecordNumber());
      assertEquals((-358L), cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      Class<Locale.Category> class0 = Locale.Category.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVParser cSVParser0 = CSVParser.parse("+A", cSVFormat1);
      String[] stringArray0 = new String[6];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "sCTyP_e", 0L, 1L);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertFalse(boolean0);
      assertEquals(1L, cSVRecord0.getCharacterPosition());
      assertEquals(0L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVParser cSVParser0 = CSVParser.parse("]", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      cSVRecord0.values();
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals(0L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat0);
      String[] stringArray0 = new String[0];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "BYJxw%oU", 98L, 98L);
      cSVRecord0.values();
      assertEquals(98L, cSVRecord0.getCharacterPosition());
      assertEquals(98L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVParser cSVParser0 = CSVParser.parse("`", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      cSVRecord0.size();
      assertEquals(0L, cSVRecord0.getCharacterPosition());
      assertEquals(1L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVParser cSVParser0 = CSVParser.parse("yblM(uTz", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      cSVRecord0.putIn((HashMap<String, String>) null);
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals(0L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse("G'J3AI5R}Hp.z\"~?", cSVFormat0);
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, (String[]) null, "&;QZ}agogvc", (-717L), 2425L);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      cSVRecord0.putIn(hashMap0);
      assertEquals(2425L, cSVRecord0.getCharacterPosition());
      assertEquals((-717L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      Class<Locale.Category> class0 = Locale.Category.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVParser cSVParser0 = CSVParser.parse("+A", cSVFormat1);
      String[] stringArray0 = new String[1];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, (String) null, 0L, 0L);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      cSVRecord0.putIn(hashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      CSVParser cSVParser0 = CSVParser.parse("6RAPt6Q lK", cSVFormat0);
      String[] stringArray0 = new String[2];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "]", 3106L, 0L);
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals(0L, cSVRecord0.getCharacterPosition());
      assertEquals(3106L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_TSV;
      CSVParser cSVParser0 = CSVParser.parse("<<", cSVFormat0);
      String[] stringArray0 = new String[4];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, (String) null, (-3476L), (-1507L));
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals((-3476L), long0);
      assertEquals((-1507L), cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "Mo-:9!)", (-2237L), (-413L));
      cSVRecord0.getParser();
      assertEquals((-413L), cSVRecord0.getCharacterPosition());
      assertEquals((-2237L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVParser cSVParser0 = CSVParser.parse("]", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      cSVRecord0.getParser();
      assertEquals(0L, cSVRecord0.getCharacterPosition());
      assertEquals(1L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      CSVParser cSVParser0 = CSVParser.parse("+A", cSVFormat0);
      String[] stringArray0 = new String[6];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "sCTyP_e", 0L, 1L);
      cSVRecord0.getComment();
      assertEquals(1L, cSVRecord0.getCharacterPosition());
      assertEquals(0L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
      String[] stringArray0 = new String[7];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "", (-4317L), (-4317L));
      cSVRecord0.getComment();
      assertEquals((-4317L), cSVRecord0.getCharacterPosition());
      assertEquals((-4317L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      CSVParser cSVParser0 = CSVParser.parse("6RAPt6Q lK", cSVFormat0);
      String[] stringArray0 = new String[2];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "]", 3106L, 0L);
      long long0 = cSVRecord0.getCharacterPosition();
      assertEquals(3106L, cSVRecord0.getRecordNumber());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_TSV;
      CSVParser cSVParser0 = CSVParser.parse("<<", cSVFormat0);
      String[] stringArray0 = new String[4];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, (String) null, (-3476L), (-1507L));
      long long0 = cSVRecord0.getCharacterPosition();
      assertEquals((-1507L), long0);
      assertEquals((-3476L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_TSV;
      Csv csv0 = new Csv();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet(csv0);
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) simpleResultSet0);
      CSVParser cSVParser0 = CSVParser.parse("+", cSVFormat1);
      String[] stringArray0 = new String[4];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "+", 2778L, 2778L);
      cSVRecord0.get("+");
      assertEquals(2778L, cSVRecord0.getCharacterPosition());
      assertEquals(2778L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      Csv csv0 = new Csv();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet(csv0);
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) simpleResultSet0);
      CSVParser cSVParser0 = CSVParser.parse("&sf|gBZ|4|zG ", cSVFormat1);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "&sf|gBZ|4|zG ";
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "yA;kvf;[,v", 0L, 0L);
      String string0 = cSVRecord0.get("&sf|gBZ|4|zG ");
      assertEquals("&sf|gBZ|4|zG ", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      Class<Locale.Category> class0 = Locale.Category.class;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("+A");
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVParser cSVParser0 = CSVParser.parse("+A", cSVFormat2);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      cSVRecord0.get((Enum<?>) locale_Category0);
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals(0L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      Class<Locale.Category> class0 = Locale.Category.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVParser cSVParser0 = CSVParser.parse("+A", cSVFormat1);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      cSVRecord0.get((Enum<?>) locale_Category0);
      assertEquals(0L, cSVRecord0.getCharacterPosition());
      assertEquals(1L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_TSV;
      CSVParser cSVParser0 = CSVParser.parse("<<", cSVFormat0);
      String[] stringArray0 = new String[2];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "P'7kKBp$]", 2778L, 2778L);
      cSVRecord0.get(1);
      assertEquals(2778L, cSVRecord0.getCharacterPosition());
      assertEquals(2778L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("c!Prn+", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      cSVRecord0.get(0);
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals(0L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[1];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "9)]+>&<cM3`]2%N(~*", (-20L), 852L);
      // Undeclared exception!
      try { 
        cSVRecord0.toMap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, (String[]) null, "`", 0L, 0L);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        cSVRecord0.putIn(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, (String[]) null, "firefox", 10L, 10L);
      // Undeclared exception!
      try { 
        cSVRecord0.isSet("firefox");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, (String[]) null, "*8h!<^XP]SW[C'*:7", (-881L), (-949L));
      // Undeclared exception!
      try { 
        cSVRecord0.isMapped("y@PPHJi6DNK?r^T<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, (String[]) null, ".readBlob\";", (-870L), (-1593L));
      // Undeclared exception!
      try { 
        cSVRecord0.isConsistent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, (String[]) null, "`", 0L, 0L);
      // Undeclared exception!
      try { 
        cSVRecord0.get("tR(W]h");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVParser cSVParser0 = CSVParser.parse("`", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      // Undeclared exception!
      try { 
        cSVRecord0.get((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      Class<Locale.Category> class0 = Locale.Category.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVParser cSVParser0 = CSVParser.parse("+A", cSVFormat1);
      String[] stringArray0 = new String[1];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, (String) null, 0L, 0L);
      boolean boolean0 = cSVRecord0.isMapped((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVParser cSVParser0 = CSVParser.parse("yblM(uTz", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      cSVRecord0.isMapped(".kG@E1ZN=*wkFI\"}");
      assertEquals(0L, cSVRecord0.getCharacterPosition());
      assertEquals(1L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      Csv csv0 = new Csv();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet(csv0);
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) simpleResultSet0);
      CSVParser cSVParser0 = CSVParser.parse("&sf|gBZ|4|zG ", cSVFormat1);
      String[] stringArray0 = new String[9];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "yA;kvf;[,v", 0L, 0L);
      boolean boolean0 = cSVRecord0.isMapped("&sf|gBZ|4|zG ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) simpleResultSet0);
      CSVParser cSVParser0 = CSVParser.parse("a)V=", cSVFormat1);
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, (String[]) null, "+", (-870L), (-870L));
      // Undeclared exception!
      try { 
        cSVRecord0.get("+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mapping for + not found, expected one of [a)V=]
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVParser cSVParser0 = CSVParser.parse("]", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      // Undeclared exception!
      try { 
        cSVRecord0.get("]");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No header mapping was specified, the record values can't be accessed by name
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_TSV;
      Csv csv0 = new Csv();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet(csv0);
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) simpleResultSet0);
      CSVParser cSVParser0 = CSVParser.parse("<<", cSVFormat1);
      String[] stringArray0 = new String[2];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "P'7kKBp$]", 2778L, 2778L);
      Map<String, String> map0 = cSVRecord0.toMap();
      assertEquals(2778L, cSVRecord0.getCharacterPosition());
      assertEquals(2778L, cSVRecord0.getRecordNumber());
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_TSV;
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) simpleResultSet0);
      CSVParser cSVParser0 = CSVParser.parse("Index for header '%s' is %d but CSVRecord only has %d values!", cSVFormat1);
      String[] stringArray0 = new String[10];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "Index for header '%s' is %d but CSVRecord only has %d values!", 2777L, 2777L);
      boolean boolean0 = cSVRecord0.isSet("Index for header '%s' is %d but CSVRecord only has %d values!");
      assertEquals(2777L, cSVRecord0.getRecordNumber());
      assertEquals(2777L, cSVRecord0.getCharacterPosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("H", cSVFormat1);
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, (String[]) null, "H", (-1702L), (-1702L));
      boolean boolean0 = cSVRecord0.isSet("H");
      assertEquals((-1702L), cSVRecord0.getCharacterPosition());
      assertEquals((-1702L), cSVRecord0.getRecordNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      Class<Locale.Category> class0 = Locale.Category.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVParser cSVParser0 = CSVParser.parse("+A", cSVFormat1);
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, (String[]) null, "$Z_-eA", 2778L, 2778L);
      boolean boolean0 = cSVRecord0.isSet("$Z_-eA");
      assertEquals(2778L, cSVRecord0.getRecordNumber());
      assertFalse(boolean0);
      assertEquals(2778L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) simpleResultSet0);
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat1);
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, (String[]) null, "", (-870L), (-870L));
      boolean boolean0 = cSVRecord0.isConsistent();
      assertEquals((-870L), cSVRecord0.getCharacterPosition());
      assertTrue(boolean0);
      assertEquals((-870L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      Class<Locale.Category> class0 = Locale.Category.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVParser cSVParser0 = CSVParser.parse("+A", cSVFormat1);
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, (String[]) null, "$Z_-eA", 2778L, 2778L);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertEquals(2778L, cSVRecord0.getRecordNumber());
      assertEquals(2778L, cSVRecord0.getCharacterPosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("aihU-bwSX", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      boolean boolean0 = cSVRecord0.isConsistent();
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals(0L, cSVRecord0.getCharacterPosition());
      assertTrue(boolean0);
      assertEquals(1, cSVRecord0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("=", cSVFormat0);
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, (String[]) null, "=", (-870L), (-870L));
      boolean boolean0 = cSVRecord0.hasComment();
      assertTrue(boolean0);
      assertEquals((-870L), cSVRecord0.getCharacterPosition());
      assertEquals((-870L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_TSV;
      CSVParser cSVParser0 = CSVParser.parse("OGDAYT(f)Swnzo=f", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      boolean boolean0 = cSVRecord0.hasComment();
      assertEquals(0L, cSVRecord0.getCharacterPosition());
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals(1, cSVRecord0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("B*H", cSVFormat1);
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, (String[]) null, "B*H", (-1702L), (-1702L));
      WindowFrameExclusion windowFrameExclusion0 = WindowFrameExclusion.EXCLUDE_NO_OTHERS;
      // Undeclared exception!
      try { 
        cSVRecord0.get((Enum<?>) windowFrameExclusion0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mapping for EXCLUDE_NO_OTHERS not found, expected one of [B*H]
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "Mo-:9!)", (-2237L), (-413L));
      cSVRecord0.size();
      assertEquals((-2237L), cSVRecord0.getRecordNumber());
      assertEquals((-413L), cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      CSVParser cSVParser0 = CSVParser.parse("&sf|gBZ|4|zG ", cSVFormat0);
      String[] stringArray0 = new String[9];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "yA;kvf;[,v", 0L, 0L);
      cSVRecord0.getRecordNumber();
      assertEquals(9, cSVRecord0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      CSVParser cSVParser0 = CSVParser.parse("+A", cSVFormat0);
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, (String[]) null, "$Z_-eA", 2778L, 2778L);
      cSVRecord0.getParser();
      assertEquals(2778L, cSVRecord0.getCharacterPosition());
      assertEquals(2778L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse(")B+%wLL2p,1", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      // Undeclared exception!
      try { 
        cSVRecord0.get((-2282));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2282
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVParser cSVParser0 = CSVParser.parse("cIeqn+", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      String string0 = cSVRecord0.toString();
      assertEquals("CSVRecord [comment='null', recordNumber=1, values=[cIeqn+]]", string0);
      assertEquals(0L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVParser cSVParser0 = CSVParser.parse("Index for header '%s' is %d but CSVRecord only has %d values!", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      cSVRecord0.getComment();
      assertEquals(1, cSVRecord0.size());
      assertEquals(0L, cSVRecord0.getCharacterPosition());
      assertEquals(1L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("H", cSVFormat1);
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, (String[]) null, "H", (-1702L), (-1702L));
      // Undeclared exception!
      try { 
        cSVRecord0.get("H");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index for header 'H' is 0 but CSVRecord only has 0 values!
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      CSVParser cSVParser0 = CSVParser.parse("+A", cSVFormat0);
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, (String[]) null, "$Z_-eA", 2778L, 2778L);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      // Undeclared exception!
      try { 
        cSVRecord0.get((Enum<?>) locale_Category0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No header mapping was specified, the record values can't be accessed by name
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVParser cSVParser0 = CSVParser.parse("yblM(uTz", cSVFormat0);
      String[] stringArray0 = new String[1];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, (String) null, 0L, 50L);
      long long0 = cSVRecord0.getCharacterPosition();
      assertEquals(1, cSVRecord0.size());
      assertEquals(0L, cSVRecord0.getRecordNumber());
      assertEquals(50L, long0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVParser cSVParser0 = CSVParser.parse("cIeGqn+", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      cSVRecord0.iterator();
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals(0L, cSVRecord0.getCharacterPosition());
      assertEquals(1, cSVRecord0.size());
  }
}
