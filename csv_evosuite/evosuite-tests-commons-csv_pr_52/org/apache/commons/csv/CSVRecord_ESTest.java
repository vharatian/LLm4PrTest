/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 12:58:38 GMT 2025
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.Reader;
import java.math.RoundingMode;
import java.sql.ResultSet;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.h2.jdbc.JdbcLob;
import org.h2.tools.Csv;
import org.h2.tools.SimpleResultSet;
import org.h2.value.ValueLong;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CSVRecord_ESTest extends CSVRecord_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVParser cSVParser0 = CSVParser.parse("HSQLDB", cSVFormat0);
      String[] stringArray0 = new String[2];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "HSQLDB", (-2347L), 1L);
      boolean boolean0 = cSVRecord0.isSet(2);
      assertFalse(boolean0);
      assertEquals((-2347L), cSVRecord0.getRecordNumber());
      assertEquals(1L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "2-wzU_pi#";
      stringArray0[1] = "2-wzU_pi#";
      stringArray0[2] = "2-wzU_pi#";
      stringArray0[3] = "2-wzU_pi#";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("2-wzU_pi#", cSVFormat1);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      boolean boolean0 = cSVRecord0.isSet("2-wzU_pi#");
      assertFalse(boolean0);
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals(0L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[8];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("pz*#5.E:>,SF5{>>b", cSVFormat1);
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "2-wz/_ti#", 226L, 1000000000L);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertEquals(1000000000L, cSVRecord0.getCharacterPosition());
      assertFalse(boolean0);
      assertEquals(226L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse(",nQDT9L-2xO@vi", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      cSVRecord0.values();
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals(0L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      CSVParser cSVParser0 = CSVParser.parse("2-wzU_pi#", cSVFormat0);
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, (String[]) null, (String) null, (-1594L), (-1594L));
      cSVRecord0.values();
      assertEquals((-1594L), cSVRecord0.getCharacterPosition());
      assertEquals((-1594L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("LN() argument", cSVFormat0);
      String[] stringArray0 = new String[0];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "38/,H", 958L, 29L);
      cSVRecord0.size();
      assertEquals(29L, cSVRecord0.getCharacterPosition());
      assertEquals(958L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse("Index for header '%s' is %d but CSVRecord only has %d values!", cSVFormat0);
      String[] stringArray0 = new String[0];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, ";m15O#>f", (-728L), 60000000000L);
      cSVRecord0.putIn((HashMap<String, String>) null);
      assertEquals((-728L), cSVRecord0.getRecordNumber());
      assertEquals(60000000000L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_TSV;
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
      String[] stringArray0 = new String[4];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "b*d=@", 0L, 0L);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = cSVRecord0.putIn(hashMap0);
      assertEquals(0, hashMap1.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) simpleResultSet0);
      CSVParser cSVParser0 = CSVParser.parse("BEFORE BIT", cSVFormat1);
      String[] stringArray0 = new String[8];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "BEFORE BIT", 3475L, (-2966L));
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      cSVRecord0.putIn(hashMap0);
      assertEquals(1, hashMap0.size());
      assertEquals((-2966L), cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      CSVParser cSVParser0 = CSVParser.parse("SHA256", cSVFormat0);
      String[] stringArray0 = new String[8];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, (String) null, 0L, 128L);
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals(0L, long0);
      assertEquals(128L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      CSVParser cSVParser0 = CSVParser.parse("2-wzU_pi#", cSVFormat0);
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, (String[]) null, (String) null, (-1594L), (-1594L));
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals((-1594L), cSVRecord0.getCharacterPosition());
      assertEquals((-1594L), long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "/", (-1796L), (-1796L));
      cSVRecord0.getParser();
      assertEquals((-1796L), cSVRecord0.getCharacterPosition());
      assertEquals((-1796L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse("BEFORE BIT", cSVFormat0);
      String[] stringArray0 = new String[8];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "", (-2966L), (-1367L));
      cSVRecord0.getParser();
      assertEquals((-2966L), cSVRecord0.getRecordNumber());
      assertEquals((-1367L), cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      CSVParser cSVParser0 = CSVParser.parse("P-AYjSqjeQJzYu2.", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      cSVRecord0.getParser();
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals(0L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVParser cSVParser0 = CSVParser.parse("-+$lM[", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      cSVRecord0.getComment();
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals(0L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[8];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "eGTsT:-7_\",d:yZ", 0L, (-3355L));
      cSVRecord0.getComment();
      assertEquals(0L, cSVRecord0.getRecordNumber());
      assertEquals((-3355L), cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVParser cSVParser0 = CSVParser.parse("HSQLDB", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      long long0 = cSVRecord0.getCharacterPosition();
      assertEquals(0L, long0);
      assertEquals(1L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[1];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "a-CI", (-581L), 1L);
      long long0 = cSVRecord0.getCharacterPosition();
      assertEquals(1L, long0);
      assertEquals((-581L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "2-wzU_pi#";
      stringArray0[1] = "2-wzU_pi#";
      stringArray0[2] = "2-wzU_pi#";
      stringArray0[3] = "2-wzU_pi#";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("2-wzU_pi#", cSVFormat1);
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, (String) null, (-1594L), (-1594L));
      cSVRecord0.get("2-wzU_pi#");
      assertEquals((-1594L), cSVRecord0.getRecordNumber());
      assertEquals((-1594L), cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[6];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "BmN", 0L, 74L);
      cSVRecord0.get(1);
      assertEquals(74L, cSVRecord0.getCharacterPosition());
      assertEquals(0L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[1] = "', recordNumber=";
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "BmN", 0L, 74L);
      assertEquals(6, cSVRecord0.size());
      
      String string0 = cSVRecord0.get(1);
      assertEquals(74L, cSVRecord0.getCharacterPosition());
      assertEquals(0L, cSVRecord0.getRecordNumber());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[1];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "a-CI", (-581L), 1L);
      // Undeclared exception!
      try { 
        cSVRecord0.toMap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "org.apache.commons.csv.CSVRecord", (-703L), 0L);
      HashMap<String, String> hashMap0 = new HashMap<String, String>(3308, 619.2459F);
      // Undeclared exception!
      try { 
        cSVRecord0.putIn(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "", (-1803L), (-1803L));
      // Undeclared exception!
      try { 
        cSVRecord0.isSet("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "-+$lM[", 512000000415L, 512000000415L);
      // Undeclared exception!
      try { 
        cSVRecord0.isMapped((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "/", (-1753L), (-1753L));
      // Undeclared exception!
      try { 
        cSVRecord0.isConsistent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "", (-1803L), (-1803L));
      // Undeclared exception!
      try { 
        cSVRecord0.get("NdKSNqjU");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse("KK", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      // Undeclared exception!
      try { 
        cSVRecord0.get((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      Class<RoundingMode> class0 = RoundingMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      ValueLong valueLong0 = ValueLong.MIN;
      Reader reader0 = valueLong0.getReader();
      CSVParser cSVParser0 = new CSVParser(reader0, cSVFormat1);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      // Undeclared exception!
      try { 
        cSVRecord0.get((Enum<?>) roundingMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index for header 'HALF_UP' is 4 but CSVRecord only has 1 values!
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "2-wzU_pi#";
      stringArray0[1] = "2-wzU_pi#";
      stringArray0[2] = "2-wzU_pi#";
      stringArray0[3] = "2-wzU_pi#";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("2-wzU_pi#", cSVFormat1);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      cSVRecord0.isMapped("%Dh%Ic8%Ei`jXvT");
      assertEquals(0L, cSVRecord0.getCharacterPosition());
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals(1, cSVRecord0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVParser cSVParser0 = CSVParser.parse("HSQLDB", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      cSVRecord0.isMapped("!ae9j0\u00069");
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals(1, cSVRecord0.size());
      assertEquals(0L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "2-wzU_pi#";
      stringArray0[1] = "2-wzU_pi#";
      stringArray0[2] = "2-wzU_pi#";
      stringArray0[3] = "2-wzU_pi#";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("2-wzU_pi#", cSVFormat1);
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, (String[]) null, (String) null, (-1594L), (-1594L));
      boolean boolean0 = cSVRecord0.isMapped("2-wzU_pi#");
      assertTrue(boolean0);
      assertEquals((-1594L), cSVRecord0.getCharacterPosition());
      assertEquals((-1594L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      CSVParser cSVParser0 = CSVParser.parse("SHA256", cSVFormat0);
      String[] stringArray0 = new String[8];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, (String) null, 0L, 128L);
      // Undeclared exception!
      try { 
        cSVRecord0.get("kasFfE");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No header mapping was specified, the record values can't be accessed by name
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      Class<JdbcLob.State> class0 = JdbcLob.State.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVParser cSVParser0 = CSVParser.parse("6fJA_GTG;M-|@f", cSVFormat1);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      Map<String, String> map0 = cSVRecord0.toMap();
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals(1, map0.size());
      assertEquals(0L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("-+$lM[", cSVFormat1);
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "a8!i@\"pN)/X", 512000000415L, (-3416L));
      cSVRecord0.toMap();
      assertFalse(cSVRecord0.isConsistent());
      assertEquals(512000000415L, cSVRecord0.getRecordNumber());
      assertEquals((-3416L), cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVParser cSVParser0 = CSVParser.parse("HSQLDB", cSVFormat0);
      String[] stringArray0 = new String[1];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "HSQLDB", 1L, 128L);
      boolean boolean0 = cSVRecord0.isSet(0);
      assertEquals(128L, cSVRecord0.getCharacterPosition());
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      String[] stringArray0 = new String[0];
      CSVParser cSVParser0 = CSVParser.parse("-+$lM[", cSVFormat0);
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "-+$lM[", 512000000415L, 512000000415L);
      boolean boolean0 = cSVRecord0.isSet(2156);
      assertEquals(512000000415L, cSVRecord0.getRecordNumber());
      assertEquals(512000000415L, cSVRecord0.getCharacterPosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVParser cSVParser0 = CSVParser.parse("-+$lM[", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      boolean boolean0 = cSVRecord0.isSet((-2058005160));
      assertEquals(0L, cSVRecord0.getCharacterPosition());
      assertEquals(1, cSVRecord0.size());
      assertFalse(boolean0);
      assertEquals(1L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Lzei*||iz|T}}Tfg,";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("H1j!'|-Wnu", cSVFormat1);
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "H1j!'|-Wnu", 0L, 0L);
      boolean boolean0 = cSVRecord0.isSet("Lzei*||iz|T}}Tfg,");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("-.+$lM[", cSVFormat1);
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "-.+$lM[", 512000000415L, 512000000415L);
      boolean boolean0 = cSVRecord0.isSet("-.+$lM[");
      assertEquals(512000000415L, cSVRecord0.getCharacterPosition());
      assertEquals(512000000415L, cSVRecord0.getRecordNumber());
      assertEquals(1, cSVRecord0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("-+$lM[", cSVFormat1);
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "-+$lM[", 0L, 0L);
      boolean boolean0 = cSVRecord0.isSet("-+$lM[");
      assertFalse(boolean0);
      assertFalse(cSVRecord0.isConsistent());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Csv csv0 = new Csv();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet(csv0);
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) simpleResultSet0);
      CSVParser cSVParser0 = CSVParser.parse("-+$lM[", cSVFormat1);
      String[] stringArray0 = new String[1];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "-+$lM[", 512000000415L, 512000000415L);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertEquals(512000000415L, cSVRecord0.getCharacterPosition());
      assertEquals(1, cSVRecord0.size());
      assertEquals(512000000415L, cSVRecord0.getRecordNumber());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("-+$lM[", cSVFormat1);
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "a8!i@\"pN)/X", 512000000415L, (-3416L));
      boolean boolean0 = cSVRecord0.isConsistent();
      assertEquals((-3416L), cSVRecord0.getCharacterPosition());
      assertEquals(512000000415L, cSVRecord0.getRecordNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      CSVParser cSVParser0 = CSVParser.parse("P-AYjSqjeQJzYu2.", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      boolean boolean0 = cSVRecord0.isConsistent();
      assertEquals(1, cSVRecord0.size());
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals(0L, cSVRecord0.getCharacterPosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      String[] stringArray0 = new String[0];
      CSVParser cSVParser0 = CSVParser.parse("-+$lM[", cSVFormat0);
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "-+$lM[", 512000000415L, 512000000415L);
      boolean boolean0 = cSVRecord0.hasComment();
      assertEquals(512000000415L, cSVRecord0.getRecordNumber());
      assertTrue(boolean0);
      assertEquals(512000000415L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      CSVParser cSVParser0 = CSVParser.parse("org.h2.result.LocalResultFactory$DefaultLocalResultFactory", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      boolean boolean0 = cSVRecord0.hasComment();
      assertEquals(0L, cSVRecord0.getCharacterPosition());
      assertFalse(boolean0);
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals(1, cSVRecord0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("-+$lM[", cSVFormat1);
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "-+$lM[", 2357L, 2357L);
      // Undeclared exception!
      try { 
        cSVRecord0.get("SELECT ZERO() FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA=? AND TABLE_NAME=?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mapping for SELECT ZERO() FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA=? AND TABLE_NAME=? not found, expected one of [-+$lM[]
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVParser cSVParser0 = CSVParser.parse("G.;0,Jw_)27", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      int int0 = cSVRecord0.size();
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertEquals(0L, cSVRecord0.getCharacterPosition());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      CSVParser cSVParser0 = CSVParser.parse("2-wzU_pi#", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals(0L, cSVRecord0.getCharacterPosition());
      assertEquals(1L, long0);
      assertEquals(1, cSVRecord0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(14);
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0, 14, 0L);
      String[] stringArray0 = new String[6];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "prependLineNumber", (-2867L), 0L);
      cSVRecord0.getParser();
      assertEquals(6, cSVRecord0.size());
      assertEquals(0L, cSVRecord0.getCharacterPosition());
      assertEquals((-2867L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(14);
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0, 14, 0L);
      String[] stringArray0 = new String[6];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "prependLineNumber", (-2867L), 0L);
      // Undeclared exception!
      try { 
        cSVRecord0.get(2777);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2777
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      CSVParser cSVParser0 = CSVParser.parse("org.h2.result.LocalResultFactory$DefaultLocalResultFactory", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      String string0 = cSVRecord0.toString();
      assertEquals("CSVRecord [comment='null', recordNumber=1, values=[org.h2.result.LocalResultFactory$DefaultLocalResultFactory]]", string0);
      assertEquals(0L, cSVRecord0.getCharacterPosition());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVParser cSVParser0 = CSVParser.parse("I?S", cSVFormat0);
      String[] stringArray0 = new String[1];
      CSVRecord cSVRecord0 = new CSVRecord(cSVParser0, stringArray0, "", 0L, 0L);
      cSVRecord0.getComment();
      assertEquals(1, cSVRecord0.size());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_TSV;
      CSVParser cSVParser0 = CSVParser.parse("-+$lM[", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      // Undeclared exception!
      try { 
        cSVRecord0.get((Enum<?>) locale_Category0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No header mapping was specified, the record values can't be accessed by name
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CSVRecord cSVRecord0 = new CSVRecord((CSVParser) null, stringArray0, "/", (-1796L), (-1796L));
      long long0 = cSVRecord0.getCharacterPosition();
      assertEquals((-1796L), cSVRecord0.getRecordNumber());
      assertEquals((-1796L), long0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MONGODB_CSV;
      CSVParser cSVParser0 = CSVParser.parse("org.h2.result.LocalResultFactory$DefaultLocalResultFactory", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      cSVRecord0.iterator();
      assertEquals(0L, cSVRecord0.getCharacterPosition());
      assertEquals(1, cSVRecord0.size());
      assertEquals(1L, cSVRecord0.getRecordNumber());
  }
}
